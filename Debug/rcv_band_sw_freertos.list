
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001193c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026c4  08011adc  08011adc  00021adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141a0  080141a0  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080141a0  080141a0  000241a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141a8  080141a8  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141a8  080141a8  000241a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080141ac  080141ac  000241ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080141b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a38  200001f0  080143a0  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20006c28  080143a0  00036c28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d54e  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f89  00000000  00000000  0005d76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002400  00000000  00000000  000646f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002100  00000000  00000000  00066af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021aee  00000000  00000000  00068bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003315a  00000000  00000000  0008a6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2515  00000000  00000000  000bd840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016fd55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a94  00000000  00000000  0016fda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011ac4 	.word	0x08011ac4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08011ac4 	.word	0x08011ac4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b974 	b.w	8000b8c <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468e      	mov	lr, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14d      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008ca:	428a      	cmp	r2, r1
 80008cc:	4694      	mov	ip, r2
 80008ce:	d969      	bls.n	80009a4 <__udivmoddi4+0xe8>
 80008d0:	fab2 f282 	clz	r2, r2
 80008d4:	b152      	cbz	r2, 80008ec <__udivmoddi4+0x30>
 80008d6:	fa01 f302 	lsl.w	r3, r1, r2
 80008da:	f1c2 0120 	rsb	r1, r2, #32
 80008de:	fa20 f101 	lsr.w	r1, r0, r1
 80008e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ea:	4094      	lsls	r4, r2
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	0c21      	lsrs	r1, r4, #16
 80008f2:	fbbe f6f8 	udiv	r6, lr, r8
 80008f6:	fa1f f78c 	uxth.w	r7, ip
 80008fa:	fb08 e316 	mls	r3, r8, r6, lr
 80008fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000902:	fb06 f107 	mul.w	r1, r6, r7
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000912:	f080 811f 	bcs.w	8000b54 <__udivmoddi4+0x298>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 811c 	bls.w	8000b54 <__udivmoddi4+0x298>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb3 f0f8 	udiv	r0, r3, r8
 8000928:	fb08 3310 	mls	r3, r8, r0, r3
 800092c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000930:	fb00 f707 	mul.w	r7, r0, r7
 8000934:	42a7      	cmp	r7, r4
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x92>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000940:	f080 810a 	bcs.w	8000b58 <__udivmoddi4+0x29c>
 8000944:	42a7      	cmp	r7, r4
 8000946:	f240 8107 	bls.w	8000b58 <__udivmoddi4+0x29c>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	1be4      	subs	r4, r4, r7
 8000954:	2600      	movs	r6, #0
 8000956:	b11d      	cbz	r5, 8000960 <__udivmoddi4+0xa4>
 8000958:	40d4      	lsrs	r4, r2
 800095a:	2300      	movs	r3, #0
 800095c:	e9c5 4300 	strd	r4, r3, [r5]
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0xc2>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80ef 	beq.w	8000b4e <__udivmoddi4+0x292>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x160>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0xd4>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80f9 	bhi.w	8000b82 <__udivmoddi4+0x2c6>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0303 	sbc.w	r3, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	469e      	mov	lr, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0e0      	beq.n	8000960 <__udivmoddi4+0xa4>
 800099e:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a2:	e7dd      	b.n	8000960 <__udivmoddi4+0xa4>
 80009a4:	b902      	cbnz	r2, 80009a8 <__udivmoddi4+0xec>
 80009a6:	deff      	udf	#255	; 0xff
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	f040 8092 	bne.w	8000ad6 <__udivmoddi4+0x21a>
 80009b2:	eba1 010c 	sub.w	r1, r1, ip
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	0c20      	lsrs	r0, r4, #16
 80009c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009c6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ce:	fb0e f003 	mul.w	r0, lr, r3
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x12c>
 80009d6:	eb1c 0101 	adds.w	r1, ip, r1
 80009da:	f103 38ff 	add.w	r8, r3, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x12a>
 80009e0:	4288      	cmp	r0, r1
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2c0>
 80009e6:	4643      	mov	r3, r8
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f0:	fb07 1110 	mls	r1, r7, r0, r1
 80009f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x156>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x154>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2ca>
 8000a10:	4608      	mov	r0, r1
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a1a:	e79c      	b.n	8000956 <__udivmoddi4+0x9a>
 8000a1c:	f1c6 0720 	rsb	r7, r6, #32
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	431c      	orrs	r4, r3
 8000a34:	40f9      	lsrs	r1, r7
 8000a36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a42:	0c20      	lsrs	r0, r4, #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fb09 1118 	mls	r1, r9, r8, r1
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	fb08 f00e 	mul.w	r0, r8, lr
 8000a54:	4288      	cmp	r0, r1
 8000a56:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b8>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2bc>
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2bc>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	458e      	cmp	lr, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1e2>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2b4>
 8000a96:	458e      	cmp	lr, r1
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2b4>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000aa6:	eba1 010e 	sub.w	r1, r1, lr
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46a6      	mov	lr, r4
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x2a4>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x2a0>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x212>
 8000ab6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aba:	eb61 010e 	sbc.w	r1, r1, lr
 8000abe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ac2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ac6:	40f1      	lsrs	r1, r6
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000af4:	fb07 3610 	mls	r6, r7, r0, r3
 8000af8:	0c0b      	lsrs	r3, r1, #16
 8000afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000afe:	fb00 f60e 	mul.w	r6, r0, lr
 8000b02:	429e      	cmp	r6, r3
 8000b04:	fa04 f402 	lsl.w	r4, r4, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x260>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b8>
 8000b14:	429e      	cmp	r6, r3
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b8>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1b9b      	subs	r3, r3, r6
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b24:	fb07 3316 	mls	r3, r7, r6, r3
 8000b28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x28a>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b42:	3e02      	subs	r6, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0x104>
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e705      	b.n	8000960 <__udivmoddi4+0xa4>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e3      	b.n	8000920 <__udivmoddi4+0x64>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6f8      	b.n	800094e <__udivmoddi4+0x92>
 8000b5c:	454b      	cmp	r3, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x28a>
 8000b70:	4620      	mov	r0, r4
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1e2>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b8>
 8000b7c:	3b02      	subs	r3, #2
 8000b7e:	4461      	add	r1, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x12c>
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xde>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x156>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <ARGB_Init>:
/**
 * @brief Init timer & prescalers
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8000b96:	f006 f901 	bl	8006d9c <HAL_RCC_GetPCLK2Freq>
 8000b9a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 8000b9c:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <ARGB_Init+0xd8>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d101      	bne.n	8000bac <ARGB_Init+0x1c>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e000      	b.n	8000bae <ARGB_Init+0x1e>
 8000bac:	2302      	movs	r3, #2
 8000bae:	461a      	mov	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	fb02 f303 	mul.w	r3, r2, r3
 8000bb6:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	4a2b      	ldr	r2, [pc, #172]	; (8000c6c <ARGB_Init+0xdc>)
 8000bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	607b      	str	r3, [r7, #4]
#endif

    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <ARGB_Init+0xe0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <ARGB_Init+0xe0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <ARGB_Init+0xe0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2201      	movs	r2, #1
 8000be2:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fdb7 	bl	8000758 <__aeabi_ui2d>
 8000bea:	a31b      	add	r3, pc, #108	; (adr r3, 8000c58 <ARGB_Init+0xc8>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	f7ff fb46 	bl	8000280 <__aeabi_dmul>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff fe26 	bl	800084c <__aeabi_d2uiz>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	3b01      	subs	r3, #1
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <ARGB_Init+0xe4>)
 8000c0a:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fda3 	bl	8000758 <__aeabi_ui2d>
 8000c12:	a313      	add	r3, pc, #76	; (adr r3, 8000c60 <ARGB_Init+0xd0>)
 8000c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c18:	f7ff fb32 	bl	8000280 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4610      	mov	r0, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	f7ff fe12 	bl	800084c <__aeabi_d2uiz>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <ARGB_Init+0xe8>)
 8000c32:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <ARGB_Init+0xec>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <ARGB_Init+0xe0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2108      	movs	r1, #8
 8000c42:	4618      	mov	r0, r3
 8000c44:	f009 f882 	bl	8009d4c <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f002 f989 	bl	8002f60 <HAL_Delay>
    return ARGB_OK;
 8000c4e:	2302      	movs	r3, #2
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	1eb851ec 	.word	0x1eb851ec
 8000c5c:	3fe1eb85 	.word	0x3fe1eb85
 8000c60:	1eb851ec 	.word	0x1eb851ec
 8000c64:	3fd1eb85 	.word	0x3fd1eb85
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	014f8b59 	.word	0x014f8b59
 8000c70:	20000508 	.word	0x20000508
 8000c74:	2000020c 	.word	0x2000020c
 8000c78:	2000020d 	.word	0x2000020d
 8000c7c:	200002d6 	.word	0x200002d6

08000c80 <ARGB_Clear>:
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Clear(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 f885 	bl	8000d98 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
    return ARGB_OK;
 8000c8e:	2302      	movs	r3, #2
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <ARGB_SetBrightness>:
/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_SetBrightness(u8_t br) {
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <ARGB_SetBrightness+0x20>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	7013      	strb	r3, [r2, #0]
    return ARGB_OK;
 8000ca4:	2302      	movs	r3, #2
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000000 	.word	0x20000000

08000cb8 <ARGB_SetRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4623      	mov	r3, r4
 8000cc8:	80fb      	strh	r3, [r7, #6]
 8000cca:	4603      	mov	r3, r0
 8000ccc:	717b      	strb	r3, [r7, #5]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	713b      	strb	r3, [r7, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d005      	beq.n	8000ce8 <ARGB_SetRGB+0x30>
        u16_t _i = i / NUM_PIXELS;
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000ce0:	88fa      	ldrh	r2, [r7, #6]
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	80fb      	strh	r3, [r7, #6]
    }

    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <ARGB_SetRGB+0xd8>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	3301      	adds	r3, #1
 8000cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cf8:	797a      	ldrb	r2, [r7, #5]
 8000cfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cfe:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <ARGB_SetRGB+0xd8>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	3301      	adds	r3, #1
 8000d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d10:	793a      	ldrb	r2, [r7, #4]
 8000d12:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d16:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <ARGB_SetRGB+0xd8>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d24:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d28:	78fa      	ldrb	r2, [r7, #3]
 8000d2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d2e:	70fb      	strb	r3, [r7, #3]

#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000d30:	793b      	ldrb	r3, [r7, #4]
 8000d32:	21b0      	movs	r1, #176	; 0xb0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 f9cb 	bl	80010d0 <scale8>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8000d3e:	78fb      	ldrb	r3, [r7, #3]
 8000d40:	21f0      	movs	r1, #240	; 0xf0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f9c4 	bl	80010d0 <scale8>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8000d4c:	793b      	ldrb	r3, [r7, #4]
 8000d4e:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8000d50:	797b      	ldrb	r3, [r7, #5]
 8000d52:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8000d58:	88fa      	ldrh	r2, [r7, #6]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <ARGB_SetRGB+0xdc>)
 8000d62:	7b7a      	ldrb	r2, [r7, #13]
 8000d64:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000d66:	88fa      	ldrh	r2, [r7, #6]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4908      	ldr	r1, [pc, #32]	; (8000d94 <ARGB_SetRGB+0xdc>)
 8000d72:	7b3a      	ldrb	r2, [r7, #12]
 8000d74:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000d76:	88fa      	ldrh	r2, [r7, #6]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	4904      	ldr	r1, [pc, #16]	; (8000d94 <ARGB_SetRGB+0xdc>)
 8000d82:	7afa      	ldrb	r2, [r7, #11]
 8000d84:	54ca      	strb	r2, [r1, r3]
#endif
    return ARGB_OK;
 8000d86:	2302      	movs	r3, #2
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd90      	pop	{r4, r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000210 	.word	0x20000210

08000d98 <ARGB_FillRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
 8000da2:	460b      	mov	r3, r1
 8000da4:	71bb      	strb	r3, [r7, #6]
 8000da6:	4613      	mov	r3, r2
 8000da8:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	81fb      	strh	r3, [r7, #14]
 8000dae:	e00b      	b.n	8000dc8 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8000db0:	89fb      	ldrh	r3, [r7, #14]
 8000db2:	b298      	uxth	r0, r3
 8000db4:	797b      	ldrb	r3, [r7, #5]
 8000db6:	79ba      	ldrb	r2, [r7, #6]
 8000db8:	79f9      	ldrb	r1, [r7, #7]
 8000dba:	f7ff ff7d 	bl	8000cb8 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000dbe:	89fb      	ldrh	r3, [r7, #14]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	81fb      	strh	r3, [r7, #14]
 8000dc8:	89fb      	ldrh	r3, [r7, #14]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0ef      	beq.n	8000db0 <ARGB_FillRGB+0x18>
    return ARGB_OK;
 8000dd0:	2302      	movs	r3, #2
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8000de2:	4b9d      	ldr	r3, [pc, #628]	; (8001058 <ARGB_Show+0x27c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8000de8:	4b9c      	ldr	r3, [pc, #624]	; (800105c <ARGB_Show+0x280>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <ARGB_Show+0x22>
 8000df2:	4b9b      	ldr	r3, [pc, #620]	; (8001060 <ARGB_Show+0x284>)
 8000df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d001      	beq.n	8000e02 <ARGB_Show+0x26>
        return ARGB_BUSY;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e15e      	b.n	80010c0 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	e0a6      	b.n	8000f56 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e08:	4b96      	ldr	r3, [pc, #600]	; (8001064 <ARGB_Show+0x288>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	dd04      	ble.n	8000e2a <ARGB_Show+0x4e>
 8000e20:	4b91      	ldr	r3, [pc, #580]	; (8001068 <ARGB_Show+0x28c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	461a      	mov	r2, r3
 8000e28:	e003      	b.n	8000e32 <ARGB_Show+0x56>
 8000e2a:	4b90      	ldr	r3, [pc, #576]	; (800106c <ARGB_Show+0x290>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4619      	mov	r1, r3
 8000e38:	4b8d      	ldr	r3, [pc, #564]	; (8001070 <ARGB_Show+0x294>)
 8000e3a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e3e:	4b89      	ldr	r3, [pc, #548]	; (8001064 <ARGB_Show+0x288>)
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dd04      	ble.n	8000e60 <ARGB_Show+0x84>
 8000e56:	4b84      	ldr	r3, [pc, #528]	; (8001068 <ARGB_Show+0x28c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	e003      	b.n	8000e68 <ARGB_Show+0x8c>
 8000e60:	4b82      	ldr	r3, [pc, #520]	; (800106c <ARGB_Show+0x290>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4619      	mov	r1, r3
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	3308      	adds	r3, #8
 8000e6e:	4a80      	ldr	r2, [pc, #512]	; (8001070 <ARGB_Show+0x294>)
 8000e70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e74:	4b7b      	ldr	r3, [pc, #492]	; (8001064 <ARGB_Show+0x288>)
 8000e76:	789b      	ldrb	r3, [r3, #2]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	dd04      	ble.n	8000e96 <ARGB_Show+0xba>
 8000e8c:	4b76      	ldr	r3, [pc, #472]	; (8001068 <ARGB_Show+0x28c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4619      	mov	r1, r3
 8000e94:	e003      	b.n	8000e9e <ARGB_Show+0xc2>
 8000e96:	4b75      	ldr	r3, [pc, #468]	; (800106c <ARGB_Show+0x290>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	3310      	adds	r3, #16
 8000ea4:	4a72      	ldr	r2, [pc, #456]	; (8001070 <ARGB_Show+0x294>)
 8000ea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000eaa:	4b6e      	ldr	r3, [pc, #440]	; (8001064 <ARGB_Show+0x288>)
 8000eac:	78db      	ldrb	r3, [r3, #3]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	dd04      	ble.n	8000ecc <ARGB_Show+0xf0>
 8000ec2:	4b69      	ldr	r3, [pc, #420]	; (8001068 <ARGB_Show+0x28c>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4619      	mov	r1, r3
 8000eca:	e003      	b.n	8000ed4 <ARGB_Show+0xf8>
 8000ecc:	4b67      	ldr	r3, [pc, #412]	; (800106c <ARGB_Show+0x290>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	3318      	adds	r3, #24
 8000eda:	4a65      	ldr	r2, [pc, #404]	; (8001070 <ARGB_Show+0x294>)
 8000edc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000ee0:	4b60      	ldr	r3, [pc, #384]	; (8001064 <ARGB_Show+0x288>)
 8000ee2:	791b      	ldrb	r3, [r3, #4]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	dd04      	ble.n	8000f02 <ARGB_Show+0x126>
 8000ef8:	4b5b      	ldr	r3, [pc, #364]	; (8001068 <ARGB_Show+0x28c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4619      	mov	r1, r3
 8000f00:	e003      	b.n	8000f0a <ARGB_Show+0x12e>
 8000f02:	4b5a      	ldr	r3, [pc, #360]	; (800106c <ARGB_Show+0x290>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	4619      	mov	r1, r3
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	3320      	adds	r3, #32
 8000f10:	4a57      	ldr	r2, [pc, #348]	; (8001070 <ARGB_Show+0x294>)
 8000f12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000f16:	4b53      	ldr	r3, [pc, #332]	; (8001064 <ARGB_Show+0x288>)
 8000f18:	795b      	ldrb	r3, [r3, #5]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	dd04      	ble.n	8000f38 <ARGB_Show+0x15c>
 8000f2e:	4b4e      	ldr	r3, [pc, #312]	; (8001068 <ARGB_Show+0x28c>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4619      	mov	r1, r3
 8000f36:	e003      	b.n	8000f40 <ARGB_Show+0x164>
 8000f38:	4b4c      	ldr	r3, [pc, #304]	; (800106c <ARGB_Show+0x290>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4619      	mov	r1, r3
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	3328      	adds	r3, #40	; 0x28
 8000f46:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <ARGB_Show+0x294>)
 8000f48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b07      	cmp	r3, #7
 8000f5c:	f67f af54 	bls.w	8000e08 <ARGB_Show+0x2c>
#endif
        }

        //HAL_TIM_DMABurst_WriteStart(&TIM_HANDLE, TIM_DMABASE_ARR)

        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000f64:	e0a4      	b.n	80010b0 <ARGB_Show+0x2d4>

            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <ARGB_Show+0x298>)
 8000f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d102      	bne.n	8000f78 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8000f72:	2302      	movs	r3, #2
 8000f74:	73fb      	strb	r3, [r7, #15]
                continue;
 8000f76:	e09b      	b.n	80010b0 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8000f78:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <ARGB_Show+0x298>)
 8000f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d11d      	bne.n	8000fc0 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8000f84:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <ARGB_Show+0x298>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <ARGB_Show+0x298>)
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	4a39      	ldr	r2, [pc, #228]	; (8001078 <ARGB_Show+0x29c>)
 8000f92:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <ARGB_Show+0x298>)
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	4a38      	ldr	r2, [pc, #224]	; (800107c <ARGB_Show+0x2a0>)
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8000f9c:	4b35      	ldr	r3, [pc, #212]	; (8001074 <ARGB_Show+0x298>)
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	4a37      	ldr	r2, [pc, #220]	; (8001080 <ARGB_Show+0x2a4>)
 8000fa2:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fa4:	4b33      	ldr	r3, [pc, #204]	; (8001074 <ARGB_Show+0x298>)
 8000fa6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000fa8:	4931      	ldr	r1, [pc, #196]	; (8001070 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8000faa:	4b32      	ldr	r3, [pc, #200]	; (8001074 <ARGB_Show+0x298>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	2330      	movs	r3, #48	; 0x30
 8000fb4:	f002 ff2c 	bl	8003e10 <HAL_DMA_Start_IT>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <ARGB_Show+0x1f0>
 8000fbe:	e002      	b.n	8000fc6 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fc4:	e074      	b.n	80010b0 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fca:	e071      	b.n	80010b0 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <ARGB_Show+0x298>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	4b28      	ldr	r3, [pc, #160]	; (8001074 <ARGB_Show+0x298>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fda:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <ARGB_Show+0x298>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a28      	ldr	r2, [pc, #160]	; (8001084 <ARGB_Show+0x2a8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d107      	bne.n	8000ff6 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <ARGB_Show+0x298>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <ARGB_Show+0x298>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ff4:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <ARGB_Show+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <ARGB_Show+0x2a8>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d018      	beq.n	8001032 <ARGB_Show+0x256>
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <ARGB_Show+0x298>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001008:	d013      	beq.n	8001032 <ARGB_Show+0x256>
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <ARGB_Show+0x298>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <ARGB_Show+0x2ac>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00e      	beq.n	8001032 <ARGB_Show+0x256>
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <ARGB_Show+0x298>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1c      	ldr	r2, [pc, #112]	; (800108c <ARGB_Show+0x2b0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d009      	beq.n	8001032 <ARGB_Show+0x256>
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <ARGB_Show+0x298>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <ARGB_Show+0x2b4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d004      	beq.n	8001032 <ARGB_Show+0x256>
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <ARGB_Show+0x298>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a19      	ldr	r2, [pc, #100]	; (8001094 <ARGB_Show+0x2b8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d132      	bne.n	8001098 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <ARGB_Show+0x298>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b06      	cmp	r3, #6
 8001042:	d032      	beq.n	80010aa <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <ARGB_Show+0x298>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <ARGB_Show+0x298>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0201 	orr.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001054:	e029      	b.n	80010aa <ARGB_Show+0x2ce>
 8001056:	bf00      	nop
 8001058:	200002d6 	.word	0x200002d6
 800105c:	200002d4 	.word	0x200002d4
 8001060:	20000598 	.word	0x20000598
 8001064:	20000210 	.word	0x20000210
 8001068:	2000020c 	.word	0x2000020c
 800106c:	2000020d 	.word	0x2000020d
 8001070:	20000214 	.word	0x20000214
 8001074:	20000508 	.word	0x20000508
 8001078:	080010f9 	.word	0x080010f9
 800107c:	08001379 	.word	0x08001379
 8001080:	08009659 	.word	0x08009659
 8001084:	40010000 	.word	0x40010000
 8001088:	40000400 	.word	0x40000400
 800108c:	40000800 	.word	0x40000800
 8001090:	40000c00 	.word	0x40000c00
 8001094:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <ARGB_Show+0x2ec>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <ARGB_Show+0x2ec>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0201 	orr.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e000      	b.n	80010ac <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80010aa:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f47f af57 	bne.w	8000f66 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <ARGB_Show+0x2f0>)
 80010ba:	2202      	movs	r2, #2
 80010bc:	801a      	strh	r2, [r3, #0]

        return ARGB_OK;
 80010be:	2302      	movs	r3, #2
    }
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000508 	.word	0x20000508
 80010cc:	200002d4 	.word	0x200002d4

080010d0 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	79ba      	ldrb	r2, [r7, #6]
 80010e4:	fb02 f303 	mul.w	r3, r2, r3
 80010e8:	121b      	asrs	r3, r3, #8
 80010ea:	b2db      	uxtb	r3, r3
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001104:	60fb      	str	r3, [r7, #12]

    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d10b      	bne.n	8001128 <ARGB_TIM_DMADelayPulseCplt+0x30>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2201      	movs	r2, #1
 8001114:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d136      	bne.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001126:	e031      	b.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	429a      	cmp	r2, r3
 8001130:	d10b      	bne.n	800114a <ARGB_TIM_DMADelayPulseCplt+0x52>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2202      	movs	r2, #2
 8001136:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d125      	bne.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001148:	e020      	b.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	d10b      	bne.n	800116c <ARGB_TIM_DMADelayPulseCplt+0x74>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2204      	movs	r2, #4
 8001158:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d114      	bne.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800116a:	e00f      	b.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	d10a      	bne.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2208      	movs	r2, #8
 800117a:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 800118c:	4b72      	ldr	r3, [pc, #456]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d17b      	bne.n	800128e <ARGB_TIM_DMADelayPulseCplt+0x196>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	72fb      	strb	r3, [r7, #11]
 800119a:	e06c      	b.n	8001276 <ARGB_TIM_DMADelayPulseCplt+0x17e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800119c:	4b6e      	ldr	r3, [pc, #440]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	4a6c      	ldr	r2, [pc, #432]	; (800135c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	2b00      	cmp	r3, #0
 80011c0:	dd04      	ble.n	80011cc <ARGB_TIM_DMADelayPulseCplt+0xd4>
 80011c2:	4b67      	ldr	r3, [pc, #412]	; (8001360 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	4619      	mov	r1, r3
 80011ca:	e003      	b.n	80011d4 <ARGB_TIM_DMADelayPulseCplt+0xdc>
 80011cc:	4b65      	ldr	r3, [pc, #404]	; (8001364 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4619      	mov	r1, r3
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	3318      	adds	r3, #24
 80011da:	4a63      	ldr	r2, [pc, #396]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 80011dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011e0:	4b5d      	ldr	r3, [pc, #372]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a5a      	ldr	r2, [pc, #360]	; (800135c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 80011f2:	5cd3      	ldrb	r3, [r2, r3]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	7afb      	ldrb	r3, [r7, #11]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001204:	2b00      	cmp	r3, #0
 8001206:	dd04      	ble.n	8001212 <ARGB_TIM_DMADelayPulseCplt+0x11a>
 8001208:	4b55      	ldr	r3, [pc, #340]	; (8001360 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4619      	mov	r1, r3
 8001210:	e003      	b.n	800121a <ARGB_TIM_DMADelayPulseCplt+0x122>
 8001212:	4b54      	ldr	r3, [pc, #336]	; (8001364 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4619      	mov	r1, r3
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	3320      	adds	r3, #32
 8001220:	4a51      	ldr	r2, [pc, #324]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 8001222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001226:	4b4c      	ldr	r3, [pc, #304]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	3302      	adds	r3, #2
 8001236:	4a49      	ldr	r2, [pc, #292]	; (800135c <ARGB_TIM_DMADelayPulseCplt+0x264>)
 8001238:	5cd3      	ldrb	r3, [r2, r3]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	2b00      	cmp	r3, #0
 800124c:	dd04      	ble.n	8001258 <ARGB_TIM_DMADelayPulseCplt+0x160>
 800124e:	4b44      	ldr	r3, [pc, #272]	; (8001360 <ARGB_TIM_DMADelayPulseCplt+0x268>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4619      	mov	r1, r3
 8001256:	e003      	b.n	8001260 <ARGB_TIM_DMADelayPulseCplt+0x168>
 8001258:	4b42      	ldr	r3, [pc, #264]	; (8001364 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4619      	mov	r1, r3
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3328      	adds	r3, #40	; 0x28
 8001266:	4a40      	ldr	r2, [pc, #256]	; (8001368 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 8001268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800126c:	7afb      	ldrb	r3, [r7, #11]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	72fb      	strb	r3, [r7, #11]
 8001276:	7afb      	ldrb	r3, [r7, #11]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b07      	cmp	r3, #7
 800127c:	d98e      	bls.n	800119c <ARGB_TIM_DMADelayPulseCplt+0xa4>
#endif
        }
        BUF_COUNTER++;
 800127e:	4b36      	ldr	r3, [pc, #216]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	3301      	adds	r3, #1
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800128a:	801a      	strh	r2, [r3, #0]
 800128c:	e05d      	b.n	800134a <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800128e:	4b32      	ldr	r3, [pc, #200]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d80c      	bhi.n	80012b2 <ARGB_TIM_DMADelayPulseCplt+0x1ba>
        memset((u32_t *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // second part
 8001298:	2260      	movs	r2, #96	; 0x60
 800129a:	2100      	movs	r1, #0
 800129c:	4833      	ldr	r0, [pc, #204]	; (800136c <ARGB_TIM_DMADelayPulseCplt+0x274>)
 800129e:	f00f ff41 	bl	8011124 <memset>
        BUF_COUNTER++;
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	3301      	adds	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012ae:	801a      	strh	r2, [r3, #0]
 80012b0:	e04b      	b.n	800134a <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012c6:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fe05 	bl	8003edc <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a26      	ldr	r2, [pc, #152]	; (8001370 <ARGB_TIM_DMADelayPulseCplt+0x278>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d117      	bne.n	800130c <ARGB_TIM_DMADelayPulseCplt+0x214>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a1a      	ldr	r2, [r3, #32]
 80012e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10f      	bne.n	800130c <ARGB_TIM_DMADelayPulseCplt+0x214>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6a1a      	ldr	r2, [r3, #32]
 80012f2:	f240 4344 	movw	r3, #1092	; 0x444
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d107      	bne.n	800130c <ARGB_TIM_DMADelayPulseCplt+0x214>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800130a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6a1a      	ldr	r2, [r3, #32]
 8001312:	f241 1311 	movw	r3, #4369	; 0x1111
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10f      	bne.n	800133c <ARGB_TIM_DMADelayPulseCplt+0x244>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6a1a      	ldr	r2, [r3, #32]
 8001322:	f240 4344 	movw	r3, #1092	; 0x444
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d107      	bne.n	800133c <ARGB_TIM_DMADelayPulseCplt+0x244>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST = ARGB_READY;
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <ARGB_TIM_DMADelayPulseCplt+0x27c>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
    }

    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	771a      	strb	r2, [r3, #28]
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200002d4 	.word	0x200002d4
 800135c:	20000210 	.word	0x20000210
 8001360:	2000020c 	.word	0x2000020c
 8001364:	2000020d 	.word	0x2000020d
 8001368:	20000214 	.word	0x20000214
 800136c:	20000274 	.word	0x20000274
 8001370:	40010000 	.word	0x40010000
 8001374:	200002d6 	.word	0x200002d6

08001378 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001384:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4f      	ldr	r2, [pc, #316]	; (80014c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x150>)
 800138a:	4293      	cmp	r3, r2
 800138c:	f040 8098 	bne.w	80014c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x148>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4a4e      	ldr	r2, [pc, #312]	; (80014cc <ARGB_TIM_DMADelayPulseHalfCplt+0x154>)
 8001394:	4293      	cmp	r3, r2
 8001396:	f040 8093 	bne.w	80014c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x148>

    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 800139a:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d17b      	bne.n	800149c <ARGB_TIM_DMADelayPulseHalfCplt+0x124>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80013a4:	2300      	movs	r3, #0
 80013a6:	72fb      	strb	r3, [r7, #11]
 80013a8:	e06c      	b.n	8001484 <ARGB_TIM_DMADelayPulseHalfCplt+0x10c>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013aa:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dd04      	ble.n	80013da <ARGB_TIM_DMADelayPulseHalfCplt+0x62>
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	e003      	b.n	80013e2 <ARGB_TIM_DMADelayPulseHalfCplt+0x6a>
 80013da:	4b40      	ldr	r3, [pc, #256]	; (80014dc <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	7afb      	ldrb	r3, [r7, #11]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	4619      	mov	r1, r3
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013ea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a35      	ldr	r2, [pc, #212]	; (80014d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	7afb      	ldrb	r3, [r7, #11]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001412:	2b00      	cmp	r3, #0
 8001414:	dd04      	ble.n	8001420 <ARGB_TIM_DMADelayPulseHalfCplt+0xa8>
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4619      	mov	r1, r3
 800141e:	e003      	b.n	8001428 <ARGB_TIM_DMADelayPulseHalfCplt+0xb0>
 8001420:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4619      	mov	r1, r3
 8001428:	7afb      	ldrb	r3, [r7, #11]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	3308      	adds	r3, #8
 800142e:	4a2c      	ldr	r2, [pc, #176]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001430:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001434:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b29b      	uxth	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	3302      	adds	r3, #2
 8001444:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	7afb      	ldrb	r3, [r7, #11]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001458:	2b00      	cmp	r3, #0
 800145a:	dd04      	ble.n	8001466 <ARGB_TIM_DMADelayPulseHalfCplt+0xee>
 800145c:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4619      	mov	r1, r3
 8001464:	e003      	b.n	800146e <ARGB_TIM_DMADelayPulseHalfCplt+0xf6>
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4619      	mov	r1, r3
 800146e:	7afb      	ldrb	r3, [r7, #11]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	3310      	adds	r3, #16
 8001474:	4a1a      	ldr	r2, [pc, #104]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001476:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800147a:	7afb      	ldrb	r3, [r7, #11]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	3301      	adds	r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	72fb      	strb	r3, [r7, #11]
 8001484:	7afb      	ldrb	r3, [r7, #11]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b07      	cmp	r3, #7
 800148a:	d98e      	bls.n	80013aa <ARGB_TIM_DMADelayPulseHalfCplt+0x32>
#endif
        }
        BUF_COUNTER++;
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	3301      	adds	r3, #1
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001498:	801a      	strh	r2, [r3, #0]
 800149a:	e012      	b.n	80014c2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d80d      	bhi.n	80014c2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
        memset((u32_t*) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // first part
 80014a6:	2260      	movs	r2, #96	; 0x60
 80014a8:	2100      	movs	r1, #0
 80014aa:	480d      	ldr	r0, [pc, #52]	; (80014e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80014ac:	f00f fe3a 	bl	8011124 <memset>
        BUF_COUNTER++;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014bc:	801a      	strh	r2, [r3, #0]
 80014be:	e000      	b.n	80014c2 <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80014c0:	bf00      	nop
    }
}
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000598 	.word	0x20000598
 80014cc:	20000508 	.word	0x20000508
 80014d0:	200002d4 	.word	0x200002d4
 80014d4:	20000210 	.word	0x20000210
 80014d8:	2000020c 	.word	0x2000020c
 80014dc:	2000020d 	.word	0x2000020d
 80014e0:	20000214 	.word	0x20000214

080014e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_ADC1_Init+0x98>)
 80014f8:	4a21      	ldr	r2, [pc, #132]	; (8001580 <MX_ADC1_Init+0x9c>)
 80014fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_ADC1_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_ADC1_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_ADC1_Init+0x98>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_ADC1_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_ADC1_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_ADC1_Init+0x98>)
 800151e:	2200      	movs	r2, #0
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_ADC1_Init+0x98>)
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <MX_ADC1_Init+0xa0>)
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_ADC1_Init+0x98>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_ADC1_Init+0x98>)
 8001530:	2201      	movs	r2, #1
 8001532:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_ADC1_Init+0x98>)
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_ADC1_Init+0x98>)
 800153e:	2201      	movs	r2, #1
 8001540:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <MX_ADC1_Init+0x98>)
 8001544:	f001 fd30 	bl	8002fa8 <HAL_ADC_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800154e:	f000 fc89 	bl	8001e64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001552:	2309      	movs	r3, #9
 8001554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001556:	2301      	movs	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_ADC1_Init+0x98>)
 8001564:	f001 fe7e 	bl	8003264 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800156e:	f000 fc79 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002d8 	.word	0x200002d8
 8001580:	40012000 	.word	0x40012000
 8001584:	0f000001 	.word	0x0f000001

08001588 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_ADC_MspInit+0x7c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d127      	bne.n	80015fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_ADC_MspInit+0x80>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a15      	ldr	r2, [pc, #84]	; (8001608 <HAL_ADC_MspInit+0x80>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_ADC_MspInit+0x80>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_ADC_MspInit+0x80>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_ADC_MspInit+0x80>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_ADC_MspInit+0x80>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015e2:	2302      	movs	r3, #2
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e6:	2303      	movs	r3, #3
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <HAL_ADC_MspInit+0x84>)
 80015f6:	f002 fefd 	bl	80043f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40012000 	.word	0x40012000
 8001608:	40023800 	.word	0x40023800
 800160c:	40020400 	.word	0x40020400

08001610 <displayBand>:
int currentBand = 0;                          // First band. For this case, AM is the current band.
char buff[20];
uint32_t ticks;

void displayBand(int band_index)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af04      	add	r7, sp, #16
 8001616:	6078      	str	r0, [r7, #4]
    if(band_index != lastBand + 1 )
 8001618:	2304      	movs	r3, #4
 800161a:	3301      	adds	r3, #1
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	d07d      	beq.n	800171e <displayBand+0x10e>
    {
        ST7735_FillRectangleFast(0,0,160,80,ST7735_COLOR565(10, 10, 10));
 8001622:	f640 0341 	movw	r3, #2113	; 0x841
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2350      	movs	r3, #80	; 0x50
 800162a:	22a0      	movs	r2, #160	; 0xa0
 800162c:	2100      	movs	r1, #0
 800162e:	2000      	movs	r0, #0
 8001630:	f000 ff60 	bl	80024f4 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,64,160,16,ST7735_COLOR565(50, 50, 50));
 8001634:	f243 1386 	movw	r3, #12678	; 0x3186
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2310      	movs	r3, #16
 800163c:	22a0      	movs	r2, #160	; 0xa0
 800163e:	2140      	movs	r1, #64	; 0x40
 8001640:	2000      	movs	r0, #0
 8001642:	f000 ff57 	bl	80024f4 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,0,160,26,ST7735_COLOR565(50, 50, 50));
 8001646:	f243 1386 	movw	r3, #12678	; 0x3186
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	231a      	movs	r3, #26
 800164e:	22a0      	movs	r2, #160	; 0xa0
 8001650:	2100      	movs	r1, #0
 8001652:	2000      	movs	r0, #0
 8001654:	f000 ff4e 	bl	80024f4 <ST7735_FillRectangleFast>
        ST7735_WriteString(1, 2, band[band_index].name, Font_16x26, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(50, 50, 50));
 8001658:	4933      	ldr	r1, [pc, #204]	; (8001728 <displayBand+0x118>)
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	4b30      	ldr	r3, [pc, #192]	; (800172c <displayBand+0x11c>)
 800166a:	f243 1286 	movw	r2, #12678	; 0x3186
 800166e:	9202      	str	r2, [sp, #8]
 8001670:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8001674:	9201      	str	r2, [sp, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	9200      	str	r2, [sp, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	460a      	mov	r2, r1
 800167e:	2102      	movs	r1, #2
 8001680:	2001      	movs	r0, #1
 8001682:	f000 fe7a 	bl	800237a <ST7735_WriteString>
        //ST7735_WriteString(5, 26, "BAND", Font_7x10, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(10, 10, 10));
        // Band Frequencies Wide
       	//ST7735_WriteString(5, 26, "    ", Font_7x10, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(10, 10, 10));
       	sprintf(buff, "%s - %s", band[band_index].WminFreq, band[band_index].WmaxFreq);
 8001686:	4928      	ldr	r1, [pc, #160]	; (8001728 <displayBand+0x118>)
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	3304      	adds	r3, #4
 8001696:	6819      	ldr	r1, [r3, #0]
 8001698:	4823      	ldr	r0, [pc, #140]	; (8001728 <displayBand+0x118>)
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4403      	add	r3, r0
 80016a6:	3308      	adds	r3, #8
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	460a      	mov	r2, r1
 80016ac:	4920      	ldr	r1, [pc, #128]	; (8001730 <displayBand+0x120>)
 80016ae:	4821      	ldr	r0, [pc, #132]	; (8001734 <displayBand+0x124>)
 80016b0:	f00f fe9a 	bl	80113e8 <siprintf>
       	ST7735_WriteString(0, 29, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 80016b4:	4b20      	ldr	r3, [pc, #128]	; (8001738 <displayBand+0x128>)
 80016b6:	f640 0241 	movw	r2, #2113	; 0x841
 80016ba:	9202      	str	r2, [sp, #8]
 80016bc:	f244 52df 	movw	r2, #17887	; 0x45df
 80016c0:	9201      	str	r2, [sp, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	9200      	str	r2, [sp, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <displayBand+0x124>)
 80016ca:	211d      	movs	r1, #29
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 fe54 	bl	800237a <ST7735_WriteString>
       	sprintf(buff, "%s - %s", band[band_index].NminFreq, band[band_index].NmaxFreq);
 80016d2:	4915      	ldr	r1, [pc, #84]	; (8001728 <displayBand+0x118>)
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	330c      	adds	r3, #12
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	4810      	ldr	r0, [pc, #64]	; (8001728 <displayBand+0x118>)
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4403      	add	r3, r0
 80016f2:	3310      	adds	r3, #16
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	460a      	mov	r2, r1
 80016f8:	490d      	ldr	r1, [pc, #52]	; (8001730 <displayBand+0x120>)
 80016fa:	480e      	ldr	r0, [pc, #56]	; (8001734 <displayBand+0x124>)
 80016fc:	f00f fe74 	bl	80113e8 <siprintf>
       	ST7735_WriteString(0, 46, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <displayBand+0x128>)
 8001702:	f640 0241 	movw	r2, #2113	; 0x841
 8001706:	9202      	str	r2, [sp, #8]
 8001708:	f244 52df 	movw	r2, #17887	; 0x45df
 800170c:	9201      	str	r2, [sp, #4]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <displayBand+0x124>)
 8001716:	212e      	movs	r1, #46	; 0x2e
 8001718:	2000      	movs	r0, #0
 800171a:	f000 fe2e 	bl	800237a <ST7735_WriteString>
    }

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000004 	.word	0x20000004
 800172c:	20000084 	.word	0x20000084
 8001730:	08011b80 	.word	0x08011b80
 8001734:	20000320 	.word	0x20000320
 8001738:	2000007c 	.word	0x2000007c

0800173c <setBand>:
    HAL_GPIO_WritePin(GPIOB, CHIP, GPIO_PIN_SET); // HIGH
	delay_us(300);
}

void setBand(int band_index)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af04      	add	r7, sp, #16
 8001742:	6078      	str	r0, [r7, #4]
	ticks = band[band_index].ticks; //- START_RESISTANCE_KOM;
 8001744:	4912      	ldr	r1, [pc, #72]	; (8001790 <setBand+0x54>)
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	3314      	adds	r3, #20
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <setBand+0x58>)
 8001758:	6013      	str	r3, [r2, #0]
	sprintf(buff, "R:%ld", ticks);
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <setBand+0x58>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	490d      	ldr	r1, [pc, #52]	; (8001798 <setBand+0x5c>)
 8001762:	480e      	ldr	r0, [pc, #56]	; (800179c <setBand+0x60>)
 8001764:	f00f fe40 	bl	80113e8 <siprintf>
	ST7735_WriteString(0, 64, buff, Font_11x18, ST7735_COLOR565(165, 214, 2), ST7735_COLOR565(50, 50, 50));
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <setBand+0x64>)
 800176a:	f243 1286 	movw	r2, #12678	; 0x3186
 800176e:	9202      	str	r2, [sp, #8]
 8001770:	f24a 62a0 	movw	r2, #42656	; 0xa6a0
 8001774:	9201      	str	r2, [sp, #4]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	9200      	str	r2, [sp, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <setBand+0x60>)
 800177e:	2140      	movs	r1, #64	; 0x40
 8001780:	2000      	movs	r0, #0
 8001782:	f000 fdfa 	bl	800237a <ST7735_WriteString>
	//setResistanceUP(CS_PIN, ticks, false);
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000004 	.word	0x20000004
 8001794:	20000334 	.word	0x20000334
 8001798:	08011b88 	.word	0x08011b88
 800179c:	20000320 	.word	0x20000320
 80017a0:	2000007c 	.word	0x2000007c

080017a4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_CRC_Init+0x20>)
 80017aa:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <MX_CRC_Init+0x24>)
 80017ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_CRC_Init+0x20>)
 80017b0:	f002 f8ea 	bl	8003988 <HAL_CRC_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017ba:	f000 fb53 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000338 	.word	0x20000338
 80017c8:	40023000 	.word	0x40023000

080017cc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <HAL_CRC_MspInit+0x3c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d10d      	bne.n	80017fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_CRC_MspInit+0x40>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_CRC_MspInit+0x40>)
 80017e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <HAL_CRC_MspInit+0x40>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023000 	.word	0x40023000
 800180c:	40023800 	.word	0x40023800

08001810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_DMA_Init+0x3c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <MX_DMA_Init+0x3c>)
 8001820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_DMA_Init+0x3c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2105      	movs	r1, #5
 8001836:	202f      	movs	r0, #47	; 0x2f
 8001838:	f002 f862 	bl	8003900 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800183c:	202f      	movs	r0, #47	; 0x2f
 800183e:	f002 f88b 	bl	8003958 <HAL_NVIC_EnableIRQ>

}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &EncoderQueue_attributes);
 8001854:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <MX_FREERTOS_Init+0x58>)
 8001856:	2102      	movs	r1, #2
 8001858:	2010      	movs	r0, #16
 800185a:	f00c f8c0 	bl	800d9de <osMessageQueueNew>
 800185e:	4603      	mov	r3, r0
 8001860:	4a12      	ldr	r2, [pc, #72]	; (80018ac <MX_FREERTOS_Init+0x5c>)
 8001862:	6013      	str	r3, [r2, #0]

  /* creation of ButtonQueue */
  ButtonQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ButtonQueue_attributes);
 8001864:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <MX_FREERTOS_Init+0x60>)
 8001866:	2102      	movs	r1, #2
 8001868:	2010      	movs	r0, #16
 800186a:	f00c f8b8 	bl	800d9de <osMessageQueueNew>
 800186e:	4603      	mov	r3, r0
 8001870:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <MX_FREERTOS_Init+0x64>)
 8001872:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001874:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <MX_FREERTOS_Init+0x68>)
 8001876:	2100      	movs	r1, #0
 8001878:	4810      	ldr	r0, [pc, #64]	; (80018bc <MX_FREERTOS_Init+0x6c>)
 800187a:	f00c f803 	bl	800d884 <osThreadNew>
 800187e:	4603      	mov	r3, r0
 8001880:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <MX_FREERTOS_Init+0x70>)
 8001882:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8001884:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <MX_FREERTOS_Init+0x74>)
 8001886:	2100      	movs	r1, #0
 8001888:	480f      	ldr	r0, [pc, #60]	; (80018c8 <MX_FREERTOS_Init+0x78>)
 800188a:	f00b fffb 	bl	800d884 <osThreadNew>
 800188e:	4603      	mov	r3, r0
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <MX_FREERTOS_Init+0x7c>)
 8001892:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8001894:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <MX_FREERTOS_Init+0x80>)
 8001896:	2100      	movs	r1, #0
 8001898:	480e      	ldr	r0, [pc, #56]	; (80018d4 <MX_FREERTOS_Init+0x84>)
 800189a:	f00b fff3 	bl	800d884 <osThreadNew>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <MX_FREERTOS_Init+0x88>)
 80018a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	08014044 	.word	0x08014044
 80018ac:	2000034c 	.word	0x2000034c
 80018b0:	0801405c 	.word	0x0801405c
 80018b4:	20000350 	.word	0x20000350
 80018b8:	08013fd8 	.word	0x08013fd8
 80018bc:	080018dd 	.word	0x080018dd
 80018c0:	20000340 	.word	0x20000340
 80018c4:	08013ffc 	.word	0x08013ffc
 80018c8:	080018f1 	.word	0x080018f1
 80018cc:	20000344 	.word	0x20000344
 80018d0:	08014020 	.word	0x08014020
 80018d4:	080019b1 	.word	0x080019b1
 80018d8:	20000348 	.word	0x20000348

080018dc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80018e4:	f00e feea 	bl	80106bc <MX_USB_DEVICE_Init>
	/* Infinite loop */

	for (;;) {

		  // Some delay
		  osDelay(100);
 80018e8:	2064      	movs	r0, #100	; 0x64
 80018ea:	f00c f85d 	bl	800d9a8 <osDelay>
 80018ee:	e7fb      	b.n	80018e8 <StartDefaultTask+0xc>

080018f0 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	int32_t counter = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
	int16_t button = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	817b      	strh	r3, [r7, #10]
	int32_t last_counter = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
	int16_t max_index = 5;
 8001904:	2305      	movs	r3, #5
 8001906:	827b      	strh	r3, [r7, #18]
	ST7735_FillScreenFast(ST7735_BLACK);
 8001908:	2000      	movs	r0, #0
 800190a:	f000 fe88 	bl	800261e <ST7735_FillScreenFast>
	displayBand(last_counter);
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff fe7e 	bl	8001610 <displayBand>
	setBand(last_counter);
 8001914:	6978      	ldr	r0, [r7, #20]
 8001916:	f7ff ff11 	bl	800173c <setBand>
	for (;;) {
		//Encoder Rotate
		osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <StartDisplayTask+0xb8>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	f107 010c 	add.w	r1, r7, #12
 8001922:	2300      	movs	r3, #0
 8001924:	2200      	movs	r2, #0
 8001926:	f00c f92d 	bl	800db84 <osMessageQueueGet>
		if(counter == 2) {
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d116      	bne.n	800195e <StartDisplayTask+0x6e>
			if(last_counter != max_index -1)
 8001930:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001934:	3b01      	subs	r3, #1
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	d005      	beq.n	8001948 <StartDisplayTask+0x58>
			{
				last_counter += 1;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
				counter = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e003      	b.n	8001950 <StartDisplayTask+0x60>
			} else
			{
				last_counter = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
				counter = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
			}
			displayBand(last_counter);
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f7ff fe5d 	bl	8001610 <displayBand>
			setBand(last_counter);
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff fef0 	bl	800173c <setBand>
 800195c:	e017      	b.n	800198e <StartDisplayTask+0x9e>
		}else if (counter == 1){
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d114      	bne.n	800198e <StartDisplayTask+0x9e>
			if(last_counter != 0)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <StartDisplayTask+0x86>
			{
				last_counter -= 1;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3b01      	subs	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
				counter = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e005      	b.n	8001982 <StartDisplayTask+0x92>
			} else
			{
				last_counter = max_index -1;
 8001976:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800197a:	3b01      	subs	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
				counter = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
			}
			displayBand(last_counter);
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff fe44 	bl	8001610 <displayBand>
			setBand(last_counter);
 8001988:	6978      	ldr	r0, [r7, #20]
 800198a:	f7ff fed7 	bl	800173c <setBand>
		}else
		{

		}
		//Button click
		osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <StartDisplayTask+0xbc>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	f107 010a 	add.w	r1, r7, #10
 8001996:	2300      	movs	r3, #0
 8001998:	2200      	movs	r2, #0
 800199a:	f00c f8f3 	bl	800db84 <osMessageQueueGet>
		if (button)
		{

		}
		osDelay(1000);
 800199e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a2:	f00c f801 	bl	800d9a8 <osDelay>
		osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 80019a6:	e7b8      	b.n	800191a <StartDisplayTask+0x2a>
 80019a8:	2000034c 	.word	0x2000034c
 80019ac:	20000350 	.word	0x20000350

080019b0 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
	int32_t counter = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	76fb      	strb	r3, [r7, #27]
	uint8_t buttonSend = 1;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <StartEncoderTask+0xac>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	617b      	str	r3, [r7, #20]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	0fda      	lsrs	r2, r3, #31
 80019d8:	4413      	add	r3, r2
 80019da:	105b      	asrs	r3, r3, #1
 80019dc:	425b      	negs	r3, r3
 80019de:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80019e2:	337f      	adds	r3, #127	; 0x7f
 80019e4:	617b      	str	r3, [r7, #20]
		if (currCounter != prevCounter) {
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d01e      	beq.n	8001a2c <StartEncoderTask+0x7c>
			if (currCounter > prevCounter) {
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dd0a      	ble.n	8001a0c <StartEncoderTask+0x5c>
				counter = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <StartEncoderTask+0xb0>)
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	f107 0110 	add.w	r1, r7, #16
 8001a02:	2300      	movs	r3, #0
 8001a04:	2200      	movs	r2, #0
 8001a06:	f00c f85d 	bl	800dac4 <osMessageQueuePut>
 8001a0a:	e00d      	b.n	8001a28 <StartEncoderTask+0x78>
			} else if (currCounter < prevCounter){
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	da09      	bge.n	8001a28 <StartEncoderTask+0x78>
				counter = 2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <StartEncoderTask+0xb0>)
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	f107 0110 	add.w	r1, r7, #16
 8001a20:	2300      	movs	r3, #0
 8001a22:	2200      	movs	r2, #0
 8001a24:	f00c f84e 	bl	800dac4 <osMessageQueuePut>
			}
			else
			{

			}
			prevCounter = currCounter;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if(buttonPressed[buttonNumber]) {
 8001a2c:	7efb      	ldrb	r3, [r7, #27]
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <StartEncoderTask+0xb4>)
 8001a30:	5cd3      	ldrb	r3, [r2, r3]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00b      	beq.n	8001a50 <StartEncoderTask+0xa0>
			buttonPressed[buttonNumber] = 0;
 8001a38:	7efb      	ldrb	r3, [r7, #27]
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <StartEncoderTask+0xb4>)
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	54d1      	strb	r1, [r2, r3]
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <StartEncoderTask+0xb8>)
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	f107 010f 	add.w	r1, r7, #15
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f00c f83a 	bl	800dac4 <osMessageQueuePut>
		}
		osDelay(500);
 8001a50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a54:	f00b ffa8 	bl	800d9a8 <osDelay>
	for (;;) {
 8001a58:	e7b6      	b.n	80019c8 <StartEncoderTask+0x18>
 8001a5a:	bf00      	nop
 8001a5c:	200004c0 	.word	0x200004c0
 8001a60:	2000034c 	.word	0x2000034c
 8001a64:	20000468 	.word	0x20000468
 8001a68:	20000350 	.word	0x20000350

08001a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a3a      	ldr	r2, [pc, #232]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a33      	ldr	r2, [pc, #204]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a25      	ldr	r2, [pc, #148]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <MX_GPIO_Init+0x108>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	211c      	movs	r1, #28
 8001af6:	4820      	ldr	r0, [pc, #128]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001af8:	f002 ff16 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DP_INC_Pin|DP_UD_Pin|DP_CS_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001b02:	481e      	ldr	r0, [pc, #120]	; (8001b7c <MX_GPIO_Init+0x110>)
 8001b04:	f002 ff10 	bl	8004928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4816      	ldr	r0, [pc, #88]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001b1e:	f002 fc69 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8001b22:	231c      	movs	r3, #28
 8001b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	480f      	ldr	r0, [pc, #60]	; (8001b78 <MX_GPIO_Init+0x10c>)
 8001b3a:	f002 fc5b 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DP_INC_Pin|DP_UD_Pin|DP_CS_Pin;
 8001b3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4809      	ldr	r0, [pc, #36]	; (8001b7c <MX_GPIO_Init+0x110>)
 8001b58:	f002 fc4c 	bl	80043f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2105      	movs	r1, #5
 8001b60:	2006      	movs	r0, #6
 8001b62:	f001 fecd 	bl	8003900 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b66:	2006      	movs	r0, #6
 8001b68:	f001 fef6 	bl	8003958 <HAL_NVIC_EnableIRQ>

}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400

08001b80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001b86:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <MX_I2C1_Init+0x54>)
 8001b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001b8c:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <MX_I2C1_Init+0x58>)
 8001b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ba2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_I2C1_Init+0x50>)
 8001bbe:	f002 fefd 	bl	80049bc <HAL_I2C_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bc8:	f000 f94c 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000354 	.word	0x20000354
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	000186a0 	.word	0x000186a0

08001bdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_I2C_MspInit+0x84>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d12b      	bne.n	8001c56 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c1a:	23c0      	movs	r3, #192	; 0xc0
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1e:	2312      	movs	r3, #18
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <HAL_I2C_MspInit+0x8c>)
 8001c36:	f002 fbdd 	bl	80043f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40005400 	.word	0x40005400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020400 	.word	0x40020400

08001c6c <pixel>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void pixel(void){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
    ARGB_Init();  // Initialization
 8001c70:	f7fe ff8e 	bl	8000b90 <ARGB_Init>

    ARGB_Clear(); // Clear stirp
 8001c74:	f7ff f804 	bl	8000c80 <ARGB_Clear>
    while (ARGB_Show() != ARGB_OK); // Update - Option 1
 8001c78:	bf00      	nop
 8001c7a:	f7ff f8af 	bl	8000ddc <ARGB_Show>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d1fa      	bne.n	8001c7a <pixel+0xe>

    ARGB_SetBrightness(50);  // Set global brightness to 40%
 8001c84:	2032      	movs	r0, #50	; 0x32
 8001c86:	f7ff f805 	bl	8000c94 <ARGB_SetBrightness>

    ARGB_FillRGB(25, 0, 100); // Fill all the strip with Red
 8001c8a:	2264      	movs	r2, #100	; 0x64
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2019      	movs	r0, #25
 8001c90:	f7ff f882 	bl	8000d98 <ARGB_FillRGB>
    while (!ARGB_Show());
 8001c94:	bf00      	nop
 8001c96:	f7ff f8a1 	bl	8000ddc <ARGB_Show>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0fa      	beq.n	8001c96 <pixel+0x2a>
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <Display_Init>:

void Display_Init() {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af04      	add	r7, sp, #16
    ST7735_Init();
 8001cae:	f000 fad3 	bl	8002258 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 fca2 	bl	80025fc <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <Display_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	9202      	str	r2, [sp, #8]
 8001cbe:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8001cc2:	9201      	str	r2, [sp, #4]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	9200      	str	r2, [sp, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <Display_Init+0x5c>)
 8001ccc:	2100      	movs	r1, #0
 8001cce:	200f      	movs	r0, #15
 8001cd0:	f000 fb53 	bl	800237a <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <Display_Init+0x60>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	9202      	str	r2, [sp, #8]
 8001cda:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8001cde:	9201      	str	r2, [sp, #4]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	9200      	str	r2, [sp, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <Display_Init+0x64>)
 8001ce8:	2119      	movs	r1, #25
 8001cea:	2022      	movs	r0, #34	; 0x22
 8001cec:	f000 fb45 	bl	800237a <ST7735_WriteString>
    HAL_Delay(2000);
 8001cf0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cf4:	f001 f934 	bl	8002f60 <HAL_Delay>
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000084 	.word	0x20000084
 8001d04:	08011bd0 	.word	0x08011bd0
 8001d08:	2000007c 	.word	0x2000007c
 8001d0c:	08011bdc 	.word	0x08011bdc

08001d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d14:	f001 f8e2 	bl	8002edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d18:	f000 f828 	bl	8001d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d1c:	f7ff fea6 	bl	8001a6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d20:	f7ff ff2e 	bl	8001b80 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d24:	f000 f934 	bl	8001f90 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001d28:	f000 fe58 	bl	80029dc <MX_TIM3_Init>
  MX_CRC_Init();
 8001d2c:	f7ff fd3a 	bl	80017a4 <MX_CRC_Init>
  MX_TIM2_Init();
 8001d30:	f000 fdfc 	bl	800292c <MX_TIM2_Init>
  MX_DMA_Init();
 8001d34:	f7ff fd6c 	bl	8001810 <MX_DMA_Init>
  MX_RTC_Init();
 8001d38:	f000 f8a4 	bl	8001e84 <MX_RTC_Init>
  MX_TIM4_Init();
 8001d3c:	f000 fea2 	bl	8002a84 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001d40:	f7ff fbd0 	bl	80014e4 <MX_ADC1_Init>
  MX_TIM11_Init();
 8001d44:	f000 ff14 	bl	8002b70 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001d48:	213c      	movs	r1, #60	; 0x3c
 8001d4a:	4807      	ldr	r0, [pc, #28]	; (8001d68 <main+0x58>)
 8001d4c:	f006 fdd6 	bl	80088fc <HAL_TIM_Encoder_Start>
  pixel();
 8001d50:	f7ff ff8c 	bl	8001c6c <pixel>
  Display_Init();
 8001d54:	f7ff ffa8 	bl	8001ca8 <Display_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001d58:	f00b fd4a 	bl	800d7f0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001d5c:	f7ff fd78 	bl	8001850 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d60:	f00b fd6a 	bl	800d838 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <main+0x54>
 8001d66:	bf00      	nop
 8001d68:	200004c0 	.word	0x200004c0

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b094      	sub	sp, #80	; 0x50
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0320 	add.w	r3, r7, #32
 8001d76:	2230      	movs	r2, #48	; 0x30
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f00f f9d2 	bl	8011124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <SystemClock_Config+0xcc>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <SystemClock_Config+0xcc>)
 8001d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <SystemClock_Config+0xcc>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <SystemClock_Config+0xd0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <SystemClock_Config+0xd0>)
 8001db6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <SystemClock_Config+0xd0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001dc8:	2305      	movs	r3, #5
 8001dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001de0:	2319      	movs	r3, #25
 8001de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001de4:	23c0      	movs	r3, #192	; 0xc0
 8001de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de8:	2302      	movs	r3, #2
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dec:	2304      	movs	r3, #4
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df0:	f107 0320 	add.w	r3, r7, #32
 8001df4:	4618      	mov	r0, r3
 8001df6:	f004 fa35 	bl	8006264 <HAL_RCC_OscConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e00:	f000 f830 	bl	8001e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e04:	230f      	movs	r3, #15
 8001e06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	2101      	movs	r1, #1
 8001e20:	4618      	mov	r0, r3
 8001e22:	f004 fd47 	bl	80068b4 <HAL_RCC_ClockConfig>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e2c:	f000 f81a 	bl	8001e64 <Error_Handler>
  }
}
 8001e30:	bf00      	nop
 8001e32:	3750      	adds	r7, #80	; 0x50
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40007000 	.word	0x40007000

08001e40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e52:	f001 f865 	bl	8002f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000

08001e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e68:	b672      	cpsid	i
}
 8001e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <Error_Handler+0x8>

08001e6e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e98:	2300      	movs	r3, #0
 8001e9a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e9c:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <MX_RTC_Init+0xac>)
 8001e9e:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <MX_RTC_Init+0xb0>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <MX_RTC_Init+0xac>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <MX_RTC_Init+0xac>)
 8001eaa:	227f      	movs	r2, #127	; 0x7f
 8001eac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <MX_RTC_Init+0xac>)
 8001eb0:	22ff      	movs	r2, #255	; 0xff
 8001eb2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <MX_RTC_Init+0xac>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <MX_RTC_Init+0xac>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <MX_RTC_Init+0xac>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ec6:	481a      	ldr	r0, [pc, #104]	; (8001f30 <MX_RTC_Init+0xac>)
 8001ec8:	f005 f9c4 	bl	8007254 <HAL_RTC_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ed2:	f7ff ffc7 	bl	8001e64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2200      	movs	r2, #0
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480f      	ldr	r0, [pc, #60]	; (8001f30 <MX_RTC_Init+0xac>)
 8001ef2:	f005 fa87 	bl	8007404 <HAL_RTC_SetTime>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001efc:	f7ff ffb2 	bl	8001e64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001f00:	2305      	movs	r3, #5
 8001f02:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001f04:	2305      	movs	r3, #5
 8001f06:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8001f0c:	2316      	movs	r3, #22
 8001f0e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	2200      	movs	r2, #0
 8001f14:	4619      	mov	r1, r3
 8001f16:	4806      	ldr	r0, [pc, #24]	; (8001f30 <MX_RTC_Init+0xac>)
 8001f18:	f005 fbbc 	bl	8007694 <HAL_RTC_SetDate>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f22:	f7ff ff9f 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200003a8 	.word	0x200003a8
 8001f34:	40002800 	.word	0x40002800

08001f38 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
 8001f50:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <HAL_RTC_MspInit+0x50>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d111      	bne.n	8001f80 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f64:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f66:	f107 0308 	add.w	r3, r7, #8
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 ff5c 	bl	8006e28 <HAL_RCCEx_PeriphCLKConfig>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001f76:	f7ff ff75 	bl	8001e64 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <HAL_RTC_MspInit+0x54>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f80:	bf00      	nop
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40002800 	.word	0x40002800
 8001f8c:	42470e3c 	.word	0x42470e3c

08001f90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f94:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001f96:	4a18      	ldr	r2, [pc, #96]	; (8001ff8 <MX_SPI1_Init+0x68>)
 8001f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001f9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd4:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001fdc:	220a      	movs	r2, #10
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fe0:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <MX_SPI1_Init+0x64>)
 8001fe2:	f005 fd21 	bl	8007a28 <HAL_SPI_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fec:	f7ff ff3a 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200003c8 	.word	0x200003c8
 8001ff8:	40013000 	.word	0x40013000

08001ffc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a19      	ldr	r2, [pc, #100]	; (8002080 <HAL_SPI_MspInit+0x84>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d12b      	bne.n	8002076 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_SPI_MspInit+0x88>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a17      	ldr	r2, [pc, #92]	; (8002084 <HAL_SPI_MspInit+0x88>)
 8002028:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_SPI_MspInit+0x88>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_SPI_MspInit+0x88>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a10      	ldr	r2, [pc, #64]	; (8002084 <HAL_SPI_MspInit+0x88>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_SPI_MspInit+0x88>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002056:	23a0      	movs	r3, #160	; 0xa0
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002066:	2305      	movs	r3, #5
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <HAL_SPI_MspInit+0x8c>)
 8002072:	f002 f9bf 	bl	80043f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002076:	bf00      	nop
 8002078:	3728      	adds	r7, #40	; 0x28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40013000 	.word	0x40013000
 8002084:	40023800 	.word	0x40023800
 8002088:	40020000 	.word	0x40020000

0800208c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002090:	2200      	movs	r2, #0
 8002092:	2110      	movs	r1, #16
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <ST7735_Select+0x14>)
 8002096:	f002 fc47 	bl	8004928 <HAL_GPIO_WritePin>
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40020000 	.word	0x40020000

080020a4 <ST7735_Unselect>:

void ST7735_Unselect() {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80020a8:	2201      	movs	r2, #1
 80020aa:	2110      	movs	r1, #16
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <ST7735_Unselect+0x14>)
 80020ae:	f002 fc3b 	bl	8004928 <HAL_GPIO_WritePin>
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40020000 	.word	0x40020000

080020bc <ST7735_Reset>:

static void ST7735_Reset() {
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2108      	movs	r1, #8
 80020c4:	4806      	ldr	r0, [pc, #24]	; (80020e0 <ST7735_Reset+0x24>)
 80020c6:	f002 fc2f 	bl	8004928 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80020ca:	2005      	movs	r0, #5
 80020cc:	f000 ff48 	bl	8002f60 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80020d0:	2201      	movs	r2, #1
 80020d2:	2108      	movs	r1, #8
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <ST7735_Reset+0x24>)
 80020d6:	f002 fc27 	bl	8004928 <HAL_GPIO_WritePin>
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40020000 	.word	0x40020000

080020e4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2104      	movs	r1, #4
 80020f2:	4807      	ldr	r0, [pc, #28]	; (8002110 <ST7735_WriteCommand+0x2c>)
 80020f4:	f002 fc18 	bl	8004928 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80020f8:	1df9      	adds	r1, r7, #7
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	2201      	movs	r2, #1
 8002100:	4804      	ldr	r0, [pc, #16]	; (8002114 <ST7735_WriteCommand+0x30>)
 8002102:	f005 fe2d 	bl	8007d60 <HAL_SPI_Transmit>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40020000 	.word	0x40020000
 8002114:	200003c8 	.word	0x200003c8

08002118 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002122:	2201      	movs	r2, #1
 8002124:	2104      	movs	r1, #4
 8002126:	4807      	ldr	r0, [pc, #28]	; (8002144 <ST7735_WriteData+0x2c>)
 8002128:	f002 fbfe 	bl	8004928 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b29a      	uxth	r2, r3
 8002130:	f04f 33ff 	mov.w	r3, #4294967295
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4804      	ldr	r0, [pc, #16]	; (8002148 <ST7735_WriteData+0x30>)
 8002138:	f005 fe12 	bl	8007d60 <HAL_SPI_Transmit>
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40020000 	.word	0x40020000
 8002148:	200003c8 	.word	0x200003c8

0800214c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800215e:	e034      	b.n	80021ca <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800216a:	7afb      	ldrb	r3, [r7, #11]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ffb9 	bl	80020e4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800217c:	7abb      	ldrb	r3, [r7, #10]
 800217e:	b29b      	uxth	r3, r3
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002186:	7abb      	ldrb	r3, [r7, #10]
 8002188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800218c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800218e:	7abb      	ldrb	r3, [r7, #10]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002194:	7abb      	ldrb	r3, [r7, #10]
 8002196:	4619      	mov	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ffbd 	bl	8002118 <ST7735_WriteData>
            addr += numArgs;
 800219e:	7abb      	ldrb	r3, [r7, #10]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80021a6:	89bb      	ldrh	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00e      	beq.n	80021ca <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80021b6:	89bb      	ldrh	r3, [r7, #12]
 80021b8:	2bff      	cmp	r3, #255	; 0xff
 80021ba:	d102      	bne.n	80021c2 <ST7735_ExecuteCommandList+0x76>
 80021bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021c0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80021c2:	89bb      	ldrh	r3, [r7, #12]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fecb 	bl	8002f60 <HAL_Delay>
    while(numCommands--) {
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	1e5a      	subs	r2, r3, #1
 80021ce:	73fa      	strb	r2, [r7, #15]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1c5      	bne.n	8002160 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80021de:	b590      	push	{r4, r7, lr}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4604      	mov	r4, r0
 80021e6:	4608      	mov	r0, r1
 80021e8:	4611      	mov	r1, r2
 80021ea:	461a      	mov	r2, r3
 80021ec:	4623      	mov	r3, r4
 80021ee:	71fb      	strb	r3, [r7, #7]
 80021f0:	4603      	mov	r3, r0
 80021f2:	71bb      	strb	r3, [r7, #6]
 80021f4:	460b      	mov	r3, r1
 80021f6:	717b      	strb	r3, [r7, #5]
 80021f8:	4613      	mov	r3, r2
 80021fa:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80021fc:	202a      	movs	r0, #42	; 0x2a
 80021fe:	f7ff ff71 	bl	80020e4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002202:	2300      	movs	r3, #0
 8002204:	733b      	strb	r3, [r7, #12]
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	3301      	adds	r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	737b      	strb	r3, [r7, #13]
 800220e:	2300      	movs	r3, #0
 8002210:	73bb      	strb	r3, [r7, #14]
 8002212:	797b      	ldrb	r3, [r7, #5]
 8002214:	3301      	adds	r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800221a:	f107 030c 	add.w	r3, r7, #12
 800221e:	2104      	movs	r1, #4
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff79 	bl	8002118 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002226:	202b      	movs	r0, #43	; 0x2b
 8002228:	f7ff ff5c 	bl	80020e4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800222c:	79bb      	ldrb	r3, [r7, #6]
 800222e:	331a      	adds	r3, #26
 8002230:	b2db      	uxtb	r3, r3
 8002232:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002234:	793b      	ldrb	r3, [r7, #4]
 8002236:	331a      	adds	r3, #26
 8002238:	b2db      	uxtb	r3, r3
 800223a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	2104      	movs	r1, #4
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff68 	bl	8002118 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002248:	202c      	movs	r0, #44	; 0x2c
 800224a:	f7ff ff4b 	bl	80020e4 <ST7735_WriteCommand>
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}
	...

08002258 <ST7735_Init>:

void ST7735_Init() {
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
    ST7735_Select();
 800225c:	f7ff ff16 	bl	800208c <ST7735_Select>
    ST7735_Reset();
 8002260:	f7ff ff2c 	bl	80020bc <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8002264:	4806      	ldr	r0, [pc, #24]	; (8002280 <ST7735_Init+0x28>)
 8002266:	f7ff ff71 	bl	800214c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <ST7735_Init+0x2c>)
 800226c:	f7ff ff6e 	bl	800214c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8002270:	4805      	ldr	r0, [pc, #20]	; (8002288 <ST7735_Init+0x30>)
 8002272:	f7ff ff6b 	bl	800214c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8002276:	f7ff ff15 	bl	80020a4 <ST7735_Unselect>
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	08014074 	.word	0x08014074
 8002284:	080140b0 	.word	0x080140b0
 8002288:	080140c0 	.word	0x080140c0

0800228c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800228c:	b082      	sub	sp, #8
 800228e:	b590      	push	{r4, r7, lr}
 8002290:	b089      	sub	sp, #36	; 0x24
 8002292:	af00      	add	r7, sp, #0
 8002294:	637b      	str	r3, [r7, #52]	; 0x34
 8002296:	4603      	mov	r3, r0
 8002298:	80fb      	strh	r3, [r7, #6]
 800229a:	460b      	mov	r3, r1
 800229c:	80bb      	strh	r3, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	b2d8      	uxtb	r0, r3
 80022a6:	88bb      	ldrh	r3, [r7, #4]
 80022a8:	b2d9      	uxtb	r1, r3
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022b2:	4413      	add	r3, r2
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b2dc      	uxtb	r4, r3
 80022ba:	88bb      	ldrh	r3, [r7, #4]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022c2:	4413      	add	r3, r2
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4622      	mov	r2, r4
 80022cc:	f7ff ff87 	bl	80021de <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	e043      	b.n	800235e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80022d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	3b20      	subs	r3, #32
 80022dc:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4619      	mov	r1, r3
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	440b      	add	r3, r1
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	e029      	b.n	800234c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00e      	beq.n	8002326 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002308:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	b29b      	uxth	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	743b      	strb	r3, [r7, #16]
 8002312:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002314:	b2db      	uxtb	r3, r3
 8002316:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	2102      	movs	r1, #2
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fefa 	bl	8002118 <ST7735_WriteData>
 8002324:	e00f      	b.n	8002346 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002326:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	b29b      	uxth	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	733b      	strb	r3, [r7, #12]
 8002332:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002336:	b2db      	uxtb	r3, r3
 8002338:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	2102      	movs	r1, #2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fee9 	bl	8002118 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	3301      	adds	r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002350:	461a      	mov	r2, r3
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	4293      	cmp	r3, r2
 8002356:	d3cf      	bcc.n	80022f8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	3301      	adds	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002362:	461a      	mov	r2, r3
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	4293      	cmp	r3, r2
 8002368:	d3b5      	bcc.n	80022d6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3724      	adds	r7, #36	; 0x24
 8002370:	46bd      	mov	sp, r7
 8002372:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002376:	b002      	add	sp, #8
 8002378:	4770      	bx	lr

0800237a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800237a:	b082      	sub	sp, #8
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af04      	add	r7, sp, #16
 8002382:	603a      	str	r2, [r7, #0]
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
 800238a:	460b      	mov	r3, r1
 800238c:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800238e:	f7ff fe7d 	bl	800208c <ST7735_Select>

    while(*str) {
 8002392:	e02d      	b.n	80023f0 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	7d3a      	ldrb	r2, [r7, #20]
 8002398:	4413      	add	r3, r2
 800239a:	2b9f      	cmp	r3, #159	; 0x9f
 800239c:	dd13      	ble.n	80023c6 <ST7735_WriteString+0x4c>
            x = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80023a2:	7d7b      	ldrb	r3, [r7, #21]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	88bb      	ldrh	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80023ac:	88bb      	ldrh	r3, [r7, #4]
 80023ae:	7d7a      	ldrb	r2, [r7, #21]
 80023b0:	4413      	add	r3, r2
 80023b2:	2b4f      	cmp	r3, #79	; 0x4f
 80023b4:	dc21      	bgt.n	80023fa <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	d103      	bne.n	80023c6 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	603b      	str	r3, [r7, #0]
                continue;
 80023c4:	e014      	b.n	80023f0 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	88b9      	ldrh	r1, [r7, #4]
 80023cc:	88f8      	ldrh	r0, [r7, #6]
 80023ce:	8c3b      	ldrh	r3, [r7, #32]
 80023d0:	9302      	str	r3, [sp, #8]
 80023d2:	8bbb      	ldrh	r3, [r7, #28]
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f7ff ff56 	bl	800228c <ST7735_WriteChar>
        x += font.width;
 80023e0:	7d3b      	ldrb	r3, [r7, #20]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	4413      	add	r3, r2
 80023e8:	80fb      	strh	r3, [r7, #6]
        str++;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	603b      	str	r3, [r7, #0]
    while(*str) {
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1cd      	bne.n	8002394 <ST7735_WriteString+0x1a>
 80023f8:	e000      	b.n	80023fc <ST7735_WriteString+0x82>
                break;
 80023fa:	bf00      	nop
    }

    ST7735_Unselect();
 80023fc:	f7ff fe52 	bl	80020a4 <ST7735_Unselect>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800240a:	b002      	add	sp, #8
 800240c:	4770      	bx	lr
	...

08002410 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	4604      	mov	r4, r0
 8002418:	4608      	mov	r0, r1
 800241a:	4611      	mov	r1, r2
 800241c:	461a      	mov	r2, r3
 800241e:	4623      	mov	r3, r4
 8002420:	80fb      	strh	r3, [r7, #6]
 8002422:	4603      	mov	r3, r0
 8002424:	80bb      	strh	r3, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	807b      	strh	r3, [r7, #2]
 800242a:	4613      	mov	r3, r2
 800242c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	2b9f      	cmp	r3, #159	; 0x9f
 8002432:	d857      	bhi.n	80024e4 <ST7735_FillRectangle+0xd4>
 8002434:	88bb      	ldrh	r3, [r7, #4]
 8002436:	2b4f      	cmp	r3, #79	; 0x4f
 8002438:	d854      	bhi.n	80024e4 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	4413      	add	r3, r2
 8002440:	2ba0      	cmp	r3, #160	; 0xa0
 8002442:	dd03      	ble.n	800244c <ST7735_FillRectangle+0x3c>
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800244a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800244c:	88ba      	ldrh	r2, [r7, #4]
 800244e:	883b      	ldrh	r3, [r7, #0]
 8002450:	4413      	add	r3, r2
 8002452:	2b50      	cmp	r3, #80	; 0x50
 8002454:	dd03      	ble.n	800245e <ST7735_FillRectangle+0x4e>
 8002456:	88bb      	ldrh	r3, [r7, #4]
 8002458:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800245c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800245e:	f7ff fe15 	bl	800208c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	b2d8      	uxtb	r0, r3
 8002466:	88bb      	ldrh	r3, [r7, #4]
 8002468:	b2d9      	uxtb	r1, r3
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	4413      	add	r3, r2
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b2dc      	uxtb	r4, r3
 800247a:	88bb      	ldrh	r3, [r7, #4]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	883b      	ldrh	r3, [r7, #0]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4413      	add	r3, r2
 8002484:	b2db      	uxtb	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4622      	mov	r2, r4
 800248c:	f7ff fea7 	bl	80021de <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002490:	8c3b      	ldrh	r3, [r7, #32]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b29b      	uxth	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	733b      	strb	r3, [r7, #12]
 800249a:	8c3b      	ldrh	r3, [r7, #32]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80024a0:	2201      	movs	r2, #1
 80024a2:	2104      	movs	r1, #4
 80024a4:	4811      	ldr	r0, [pc, #68]	; (80024ec <ST7735_FillRectangle+0xdc>)
 80024a6:	f002 fa3f 	bl	8004928 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80024aa:	883b      	ldrh	r3, [r7, #0]
 80024ac:	80bb      	strh	r3, [r7, #4]
 80024ae:	e013      	b.n	80024d8 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	80fb      	strh	r3, [r7, #6]
 80024b4:	e00a      	b.n	80024cc <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80024b6:	f107 010c 	add.w	r1, r7, #12
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	2202      	movs	r2, #2
 80024c0:	480b      	ldr	r0, [pc, #44]	; (80024f0 <ST7735_FillRectangle+0xe0>)
 80024c2:	f005 fc4d 	bl	8007d60 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	80fb      	strh	r3, [r7, #6]
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f1      	bne.n	80024b6 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 80024d2:	88bb      	ldrh	r3, [r7, #4]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	80bb      	strh	r3, [r7, #4]
 80024d8:	88bb      	ldrh	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1e8      	bne.n	80024b0 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 80024de:	f7ff fde1 	bl	80020a4 <ST7735_Unselect>
 80024e2:	e000      	b.n	80024e6 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80024e4:	bf00      	nop
}
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}
 80024ec:	40020000 	.word	0x40020000
 80024f0:	200003c8 	.word	0x200003c8

080024f4 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4604      	mov	r4, r0
 80024fc:	4608      	mov	r0, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	461a      	mov	r2, r3
 8002502:	4623      	mov	r3, r4
 8002504:	80fb      	strh	r3, [r7, #6]
 8002506:	4603      	mov	r3, r0
 8002508:	80bb      	strh	r3, [r7, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	807b      	strh	r3, [r7, #2]
 800250e:	4613      	mov	r3, r2
 8002510:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	2b9f      	cmp	r3, #159	; 0x9f
 8002516:	d869      	bhi.n	80025ec <ST7735_FillRectangleFast+0xf8>
 8002518:	88bb      	ldrh	r3, [r7, #4]
 800251a:	2b4f      	cmp	r3, #79	; 0x4f
 800251c:	d866      	bhi.n	80025ec <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	887b      	ldrh	r3, [r7, #2]
 8002522:	4413      	add	r3, r2
 8002524:	2ba0      	cmp	r3, #160	; 0xa0
 8002526:	dd03      	ble.n	8002530 <ST7735_FillRectangleFast+0x3c>
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800252e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002530:	88ba      	ldrh	r2, [r7, #4]
 8002532:	883b      	ldrh	r3, [r7, #0]
 8002534:	4413      	add	r3, r2
 8002536:	2b50      	cmp	r3, #80	; 0x50
 8002538:	dd03      	ble.n	8002542 <ST7735_FillRectangleFast+0x4e>
 800253a:	88bb      	ldrh	r3, [r7, #4]
 800253c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8002540:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002542:	f7ff fda3 	bl	800208c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	b2d8      	uxtb	r0, r3
 800254a:	88bb      	ldrh	r3, [r7, #4]
 800254c:	b2d9      	uxtb	r1, r3
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	4413      	add	r3, r2
 8002558:	b2db      	uxtb	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b2dc      	uxtb	r4, r3
 800255e:	88bb      	ldrh	r3, [r7, #4]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	883b      	ldrh	r3, [r7, #0]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4413      	add	r3, r2
 8002568:	b2db      	uxtb	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4622      	mov	r2, r4
 8002570:	f7ff fe35 	bl	80021de <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8002574:	8c3b      	ldrh	r3, [r7, #32]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	b29b      	uxth	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	723b      	strb	r3, [r7, #8]
 800257e:	8c3b      	ldrh	r3, [r7, #32]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4618      	mov	r0, r3
 800258a:	f00e fdad 	bl	80110e8 <malloc>
 800258e:	4603      	mov	r3, r0
 8002590:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8002592:	2300      	movs	r3, #0
 8002594:	80fb      	strh	r3, [r7, #6]
 8002596:	e008      	b.n	80025aa <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	893a      	ldrh	r2, [r7, #8]
 80025a2:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	3301      	adds	r3, #1
 80025a8:	80fb      	strh	r3, [r7, #6]
 80025aa:	88fa      	ldrh	r2, [r7, #6]
 80025ac:	887b      	ldrh	r3, [r7, #2]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d3f2      	bcc.n	8002598 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80025b2:	2201      	movs	r2, #1
 80025b4:	2104      	movs	r1, #4
 80025b6:	480f      	ldr	r0, [pc, #60]	; (80025f4 <ST7735_FillRectangleFast+0x100>)
 80025b8:	f002 f9b6 	bl	8004928 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80025bc:	883b      	ldrh	r3, [r7, #0]
 80025be:	80bb      	strh	r3, [r7, #4]
 80025c0:	e00b      	b.n	80025da <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	68f9      	ldr	r1, [r7, #12]
 80025ce:	480a      	ldr	r0, [pc, #40]	; (80025f8 <ST7735_FillRectangleFast+0x104>)
 80025d0:	f005 fbc6 	bl	8007d60 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 80025d4:	88bb      	ldrh	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	80bb      	strh	r3, [r7, #4]
 80025da:	88bb      	ldrh	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <ST7735_FillRectangleFast+0xce>

    free(line);
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f00e fd89 	bl	80110f8 <free>
    ST7735_Unselect();
 80025e6:	f7ff fd5d 	bl	80020a4 <ST7735_Unselect>
 80025ea:	e000      	b.n	80025ee <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80025ec:	bf00      	nop
}
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}
 80025f4:	40020000 	.word	0x40020000
 80025f8:	200003c8 	.word	0x200003c8

080025fc <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af02      	add	r7, sp, #8
 8002602:	4603      	mov	r3, r0
 8002604:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	2350      	movs	r3, #80	; 0x50
 800260c:	22a0      	movs	r2, #160	; 0xa0
 800260e:	2100      	movs	r1, #0
 8002610:	2000      	movs	r0, #0
 8002612:	f7ff fefd 	bl	8002410 <ST7735_FillRectangle>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af02      	add	r7, sp, #8
 8002624:	4603      	mov	r3, r0
 8002626:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2350      	movs	r3, #80	; 0x50
 800262e:	22a0      	movs	r2, #160	; 0xa0
 8002630:	2100      	movs	r1, #0
 8002632:	2000      	movs	r0, #0
 8002634:	f7ff ff5e 	bl	80024f4 <ST7735_FillRectangleFast>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <HAL_MspInit+0x74>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <HAL_MspInit+0x74>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <HAL_MspInit+0x74>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <HAL_MspInit+0x74>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_MspInit+0x74>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_MspInit+0x74>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	210f      	movs	r1, #15
 8002682:	f06f 0001 	mvn.w	r0, #1
 8002686:	f001 f93b 	bl	8003900 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2105      	movs	r1, #5
 800268e:	2005      	movs	r0, #5
 8002690:	f001 f936 	bl	8003900 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002694:	2005      	movs	r0, #5
 8002696:	f001 f95f 	bl	8003958 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2105      	movs	r1, #5
 800269e:	2005      	movs	r0, #5
 80026a0:	f001 f92e 	bl	8003900 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80026a4:	2005      	movs	r0, #5
 80026a6:	f001 f957 	bl	8003958 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800

080026b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08c      	sub	sp, #48	; 0x30
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80026c8:	2200      	movs	r2, #0
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	2019      	movs	r0, #25
 80026ce:	f001 f917 	bl	8003900 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026d2:	2019      	movs	r0, #25
 80026d4:	f001 f940 	bl	8003958 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_InitTick+0xa0>)
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <HAL_InitTick+0xa0>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6453      	str	r3, [r2, #68]	; 0x44
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_InitTick+0xa0>)
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026f4:	f107 0210 	add.w	r2, r7, #16
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f004 fb60 	bl	8006dc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002704:	f004 fb4a 	bl	8006d9c <HAL_RCC_GetPCLK2Freq>
 8002708:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	4a13      	ldr	r2, [pc, #76]	; (800275c <HAL_InitTick+0xa4>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0c9b      	lsrs	r3, r3, #18
 8002714:	3b01      	subs	r3, #1
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <HAL_InitTick+0xa8>)
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <HAL_InitTick+0xac>)
 800271c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_InitTick+0xa8>)
 8002720:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002724:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002726:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <HAL_InitTick+0xa8>)
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_InitTick+0xa8>)
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_InitTick+0xa8>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002738:	4809      	ldr	r0, [pc, #36]	; (8002760 <HAL_InitTick+0xa8>)
 800273a:	f005 fd27 	bl	800818c <HAL_TIM_Base_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d104      	bne.n	800274e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002744:	4806      	ldr	r0, [pc, #24]	; (8002760 <HAL_InitTick+0xa8>)
 8002746:	f005 fde7 	bl	8008318 <HAL_TIM_Base_Start_IT>
 800274a:	4603      	mov	r3, r0
 800274c:	e000      	b.n	8002750 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	3730      	adds	r7, #48	; 0x30
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	431bde83 	.word	0x431bde83
 8002760:	20000420 	.word	0x20000420
 8002764:	40010000 	.word	0x40010000

08002768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800276c:	e7fe      	b.n	800276c <NMI_Handler+0x4>

0800276e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002772:	e7fe      	b.n	8002772 <HardFault_Handler+0x4>

08002774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <MemManage_Handler+0x4>

0800277a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800277e:	e7fe      	b.n	800277e <BusFault_Handler+0x4>

08002780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <UsageFault_Handler+0x4>

08002786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f002 f8f0 	bl	800498c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027b6:	f006 f95f 	bl	8008a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000420 	.word	0x20000420

080027c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <TIM2_IRQHandler+0x10>)
 80027ca:	f006 f955 	bl	8008a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000478 	.word	0x20000478

080027d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027dc:	4808      	ldr	r0, [pc, #32]	; (8002800 <TIM3_IRQHandler+0x28>)
 80027de:	f006 f94b 	bl	8008a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <TIM3_IRQHandler+0x2c>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <TIM3_IRQHandler+0x2c>)
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	4a04      	ldr	r2, [pc, #16]	; (8002804 <TIM3_IRQHandler+0x2c>)
 80027f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027f8:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200004c0 	.word	0x200004c0
 8002804:	40000400 	.word	0x40000400

08002808 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <TIM4_IRQHandler+0x10>)
 800280e:	f006 f933 	bl	8008a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000508 	.word	0x20000508

0800281c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <DMA1_Stream7_IRQHandler+0x10>)
 8002822:	f001 fb7d 	bl	8003f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000598 	.word	0x20000598

08002830 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <OTG_FS_IRQHandler+0x10>)
 8002836:	f002 fbe8 	bl	800500a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200064ec 	.word	0x200064ec

08002844 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 800284e:	23ff      	movs	r3, #255	; 0xff
 8002850:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 800285c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002860:	2b00      	cmp	r3, #0
 8002862:	db11      	blt.n	8002888 <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8002864:	f000 fb70 	bl	8002f48 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_GPIO_EXTI_Callback+0x50>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b63      	cmp	r3, #99	; 0x63
 8002874:	d90a      	bls.n	800288c <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 8002876:	4a07      	ldr	r2, [pc, #28]	; (8002894 <HAL_GPIO_EXTI_Callback+0x50>)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 800287c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002880:	4a05      	ldr	r2, [pc, #20]	; (8002898 <HAL_GPIO_EXTI_Callback+0x54>)
 8002882:	2101      	movs	r1, #1
 8002884:	54d1      	strb	r1, [r2, r3]
 8002886:	e002      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 8002888:	bf00      	nop
 800288a:	e000      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 800288c:	bf00      	nop
}
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000470 	.word	0x20000470
 8002898:	20000468 	.word	0x20000468

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <_sbrk+0x5c>)
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <_sbrk+0x60>)
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <_sbrk+0x64>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <_sbrk+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028cc:	f00e fbe0 	bl	8011090 <__errno>
 80028d0:	4603      	mov	r3, r0
 80028d2:	220c      	movs	r2, #12
 80028d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e009      	b.n	80028f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <_sbrk+0x64>)
 80028ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20020000 	.word	0x20020000
 80028fc:	00000800 	.word	0x00000800
 8002900:	20000474 	.word	0x20000474
 8002904:	20006c28 	.word	0x20006c28

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <SystemInit+0x20>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <SystemInit+0x20>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002932:	f107 0320 	add.w	r3, r7, #32
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]
 800294a:	615a      	str	r2, [r3, #20]
 800294c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <MX_TIM2_Init+0xac>)
 8002950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002954:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002956:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <MX_TIM2_Init+0xac>)
 8002958:	2200      	movs	r2, #0
 800295a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <MX_TIM2_Init+0xac>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <MX_TIM2_Init+0xac>)
 8002964:	f04f 32ff 	mov.w	r2, #4294967295
 8002968:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <MX_TIM2_Init+0xac>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <MX_TIM2_Init+0xac>)
 8002972:	2200      	movs	r2, #0
 8002974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002976:	4818      	ldr	r0, [pc, #96]	; (80029d8 <MX_TIM2_Init+0xac>)
 8002978:	f005 fd60 	bl	800843c <HAL_TIM_PWM_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002982:	f7ff fa6f 	bl	8001e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800298e:	f107 0320 	add.w	r3, r7, #32
 8002992:	4619      	mov	r1, r3
 8002994:	4810      	ldr	r0, [pc, #64]	; (80029d8 <MX_TIM2_Init+0xac>)
 8002996:	f007 fa45 	bl	8009e24 <HAL_TIMEx_MasterConfigSynchronization>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80029a0:	f7ff fa60 	bl	8001e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a4:	2360      	movs	r3, #96	; 0x60
 80029a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	2204      	movs	r2, #4
 80029b8:	4619      	mov	r1, r3
 80029ba:	4807      	ldr	r0, [pc, #28]	; (80029d8 <MX_TIM2_Init+0xac>)
 80029bc:	f006 f964 	bl	8008c88 <HAL_TIM_PWM_ConfigChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80029c6:	f7ff fa4d 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029ca:	4803      	ldr	r0, [pc, #12]	; (80029d8 <MX_TIM2_Init+0xac>)
 80029cc:	f000 f9fc 	bl	8002dc8 <HAL_TIM_MspPostInit>

}
 80029d0:	bf00      	nop
 80029d2:	3728      	adds	r7, #40	; 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000478 	.word	0x20000478

080029dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	; 0x30
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029e2:	f107 030c 	add.w	r3, r7, #12
 80029e6:	2224      	movs	r2, #36	; 0x24
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f00e fb9a 	bl	8011124 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029f8:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <MX_TIM3_Init+0xa0>)
 80029fa:	4a21      	ldr	r2, [pc, #132]	; (8002a80 <MX_TIM3_Init+0xa4>)
 80029fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029fe:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <MX_TIM3_Init+0xa0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <MX_TIM3_Init+0xa0>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <MX_TIM3_Init+0xa0>)
 8002a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <MX_TIM3_Init+0xa0>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <MX_TIM3_Init+0xa0>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a26:	2301      	movs	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8002a2e:	2306      	movs	r3, #6
 8002a30:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8002a3e:	2306      	movs	r3, #6
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a42:	f107 030c 	add.w	r3, r7, #12
 8002a46:	4619      	mov	r1, r3
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <MX_TIM3_Init+0xa0>)
 8002a4a:	f005 fdbd 	bl	80085c8 <HAL_TIM_Encoder_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002a54:	f7ff fa06 	bl	8001e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	4619      	mov	r1, r3
 8002a64:	4805      	ldr	r0, [pc, #20]	; (8002a7c <MX_TIM3_Init+0xa0>)
 8002a66:	f007 f9dd 	bl	8009e24 <HAL_TIMEx_MasterConfigSynchronization>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002a70:	f7ff f9f8 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a74:	bf00      	nop
 8002a76:	3730      	adds	r7, #48	; 0x30
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200004c0 	.word	0x200004c0
 8002a80:	40000400 	.word	0x40000400

08002a84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08e      	sub	sp, #56	; 0x38
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a98:	f107 0320 	add.w	r3, r7, #32
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
 8002ab0:	615a      	str	r2, [r3, #20]
 8002ab2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <MX_TIM4_Init+0xe4>)
 8002ab6:	4a2d      	ldr	r2, [pc, #180]	; (8002b6c <MX_TIM4_Init+0xe8>)
 8002ab8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002aba:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <MX_TIM4_Init+0xe4>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac0:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <MX_TIM4_Init+0xe4>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 8002ac6:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <MX_TIM4_Init+0xe4>)
 8002ac8:	223c      	movs	r2, #60	; 0x3c
 8002aca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002acc:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <MX_TIM4_Init+0xe4>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad2:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <MX_TIM4_Init+0xe4>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ad8:	4823      	ldr	r0, [pc, #140]	; (8002b68 <MX_TIM4_Init+0xe4>)
 8002ada:	f005 fb57 	bl	800818c <HAL_TIM_Base_Init>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002ae4:	f7ff f9be 	bl	8001e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af2:	4619      	mov	r1, r3
 8002af4:	481c      	ldr	r0, [pc, #112]	; (8002b68 <MX_TIM4_Init+0xe4>)
 8002af6:	f006 fa6d 	bl	8008fd4 <HAL_TIM_ConfigClockSource>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002b00:	f7ff f9b0 	bl	8001e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b04:	4818      	ldr	r0, [pc, #96]	; (8002b68 <MX_TIM4_Init+0xe4>)
 8002b06:	f005 fc99 	bl	800843c <HAL_TIM_PWM_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002b10:	f7ff f9a8 	bl	8001e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b14:	2300      	movs	r3, #0
 8002b16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b1c:	f107 0320 	add.w	r3, r7, #32
 8002b20:	4619      	mov	r1, r3
 8002b22:	4811      	ldr	r0, [pc, #68]	; (8002b68 <MX_TIM4_Init+0xe4>)
 8002b24:	f007 f97e 	bl	8009e24 <HAL_TIMEx_MasterConfigSynchronization>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002b2e:	f7ff f999 	bl	8001e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b32:	2360      	movs	r3, #96	; 0x60
 8002b34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	2208      	movs	r2, #8
 8002b46:	4619      	mov	r1, r3
 8002b48:	4807      	ldr	r0, [pc, #28]	; (8002b68 <MX_TIM4_Init+0xe4>)
 8002b4a:	f006 f89d 	bl	8008c88 <HAL_TIM_PWM_ConfigChannel>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002b54:	f7ff f986 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b58:	4803      	ldr	r0, [pc, #12]	; (8002b68 <MX_TIM4_Init+0xe4>)
 8002b5a:	f000 f935 	bl	8002dc8 <HAL_TIM_MspPostInit>

}
 8002b5e:	bf00      	nop
 8002b60:	3738      	adds	r7, #56	; 0x38
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000508 	.word	0x20000508
 8002b6c:	40000800 	.word	0x40000800

08002b70 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <MX_TIM11_Init+0x40>)
 8002b76:	4a0f      	ldr	r2, [pc, #60]	; (8002bb4 <MX_TIM11_Init+0x44>)
 8002b78:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <MX_TIM11_Init+0x40>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <MX_TIM11_Init+0x40>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <MX_TIM11_Init+0x40>)
 8002b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b8c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <MX_TIM11_Init+0x40>)
 8002b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b94:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <MX_TIM11_Init+0x40>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b9c:	4804      	ldr	r0, [pc, #16]	; (8002bb0 <MX_TIM11_Init+0x40>)
 8002b9e:	f005 faf5 	bl	800818c <HAL_TIM_Base_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002ba8:	f7ff f95c 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000550 	.word	0x20000550
 8002bb4:	40014800 	.word	0x40014800

08002bb8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d115      	bne.n	8002bf6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <HAL_TIM_PWM_MspInit+0x48>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <HAL_TIM_PWM_MspInit+0x48>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_TIM_PWM_MspInit+0x48>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2105      	movs	r1, #5
 8002bea:	201c      	movs	r0, #28
 8002bec:	f000 fe88 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bf0:	201c      	movs	r0, #28
 8002bf2:	f000 feb1 	bl	8003958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d151      	bne.n	8002cca <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a2a      	ldr	r2, [pc, #168]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	4a23      	ldr	r2, [pc, #140]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6313      	str	r3, [r2, #48]	; 0x30
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8002c7a:	2340      	movs	r3, #64	; 0x40
 8002c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c86:	2303      	movs	r3, #3
 8002c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	4811      	ldr	r0, [pc, #68]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xd8>)
 8002c96:	f001 fbad 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002caa:	2302      	movs	r3, #2
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8002cae:	f107 0314 	add.w	r3, r7, #20
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	480a      	ldr	r0, [pc, #40]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002cb6:	f001 fb9d 	bl	80043f4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2105      	movs	r1, #5
 8002cbe:	201d      	movs	r0, #29
 8002cc0:	f000 fe1e 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cc4:	201d      	movs	r0, #29
 8002cc6:	f000 fe47 	bl	8003958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002cca:	bf00      	nop
 8002ccc:	3728      	adds	r7, #40	; 0x28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40000400 	.word	0x40000400
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020000 	.word	0x40020000
 8002ce0:	40020400 	.word	0x40020400

08002ce4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a30      	ldr	r2, [pc, #192]	; (8002db4 <HAL_TIM_Base_MspInit+0xd0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d147      	bne.n	8002d86 <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <HAL_TIM_Base_MspInit+0xd4>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4a2e      	ldr	r2, [pc, #184]	; (8002db8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	6413      	str	r3, [r2, #64]	; 0x40
 8002d06:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002d12:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d14:	4a2a      	ldr	r2, [pc, #168]	; (8002dc0 <HAL_TIM_Base_MspInit+0xdc>)
 8002d16:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002d18:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d1a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d1e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d20:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d22:	2240      	movs	r2, #64	; 0x40
 8002d24:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d26:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002d2c:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d32:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d34:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d3a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d48:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d50:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d52:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002d58:	4818      	ldr	r0, [pc, #96]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d5a:	f000 fe3f 	bl	80039dc <HAL_DMA_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002d64:	f7ff f87e 	bl	8001e64 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d6e:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <HAL_TIM_Base_MspInit+0xd8>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002d74:	2200      	movs	r2, #0
 8002d76:	2105      	movs	r1, #5
 8002d78:	201e      	movs	r0, #30
 8002d7a:	f000 fdc1 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d7e:	201e      	movs	r0, #30
 8002d80:	f000 fdea 	bl	8003958 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002d84:	e012      	b.n	8002dac <HAL_TIM_Base_MspInit+0xc8>
  else if(tim_baseHandle->Instance==TIM11)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a0e      	ldr	r2, [pc, #56]	; (8002dc4 <HAL_TIM_Base_MspInit+0xe0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d10d      	bne.n	8002dac <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d90:	2300      	movs	r3, #0
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9e:	6453      	str	r3, [r2, #68]	; 0x44
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_TIM_Base_MspInit+0xd4>)
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40000800 	.word	0x40000800
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	20000598 	.word	0x20000598
 8002dc0:	400260b8 	.word	0x400260b8
 8002dc4:	40014800 	.word	0x40014800

08002dc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	; 0x28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de8:	d11e      	bne.n	8002e28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <HAL_TIM_MspPostInit+0xb0>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <HAL_TIM_MspPostInit+0xb0>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <HAL_TIM_MspPostInit+0xb0>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8002e06:	2302      	movs	r3, #2
 8002e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e16:	2301      	movs	r3, #1
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4816      	ldr	r0, [pc, #88]	; (8002e7c <HAL_TIM_MspPostInit+0xb4>)
 8002e22:	f001 fae7 	bl	80043f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e26:	e023      	b.n	8002e70 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <HAL_TIM_MspPostInit+0xb8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d11e      	bne.n	8002e70 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <HAL_TIM_MspPostInit+0xb0>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a0f      	ldr	r2, [pc, #60]	; (8002e78 <HAL_TIM_MspPostInit+0xb0>)
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <HAL_TIM_MspPostInit+0xb0>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e60:	2302      	movs	r3, #2
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4806      	ldr	r0, [pc, #24]	; (8002e84 <HAL_TIM_MspPostInit+0xbc>)
 8002e6c:	f001 fac2 	bl	80043f4 <HAL_GPIO_Init>
}
 8002e70:	bf00      	nop
 8002e72:	3728      	adds	r7, #40	; 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	40000800 	.word	0x40000800
 8002e84:	40020400 	.word	0x40020400

08002e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e8c:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e8e:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e90:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e94:	e002      	b.n	8002e9c <LoopCopyDataInit>

08002e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e9a:	3304      	adds	r3, #4

08002e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea0:	d3f9      	bcc.n	8002e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ea2:	4a0b      	ldr	r2, [pc, #44]	; (8002ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ea4:	4c0b      	ldr	r4, [pc, #44]	; (8002ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea8:	e001      	b.n	8002eae <LoopFillZerobss>

08002eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eac:	3204      	adds	r2, #4

08002eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb0:	d3fb      	bcc.n	8002eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eb2:	f7ff fd29 	bl	8002908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eb6:	f00e f8f1 	bl	801109c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eba:	f7fe ff29 	bl	8001d10 <main>
  bx  lr    
 8002ebe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002ecc:	080141b0 	.word	0x080141b0
  ldr r2, =_sbss
 8002ed0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002ed4:	20006c28 	.word	0x20006c28

08002ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed8:	e7fe      	b.n	8002ed8 <ADC_IRQHandler>
	...

08002edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <HAL_Init+0x40>)
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_Init+0x40>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <HAL_Init+0x40>)
 8002ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_Init+0x40>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <HAL_Init+0x40>)
 8002efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f04:	2003      	movs	r0, #3
 8002f06:	f000 fcdb 	bl	80038c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f0a:	200f      	movs	r0, #15
 8002f0c:	f7ff fbd4 	bl	80026b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f10:	f7ff fb96 	bl	8002640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00

08002f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_IncTick+0x20>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_IncTick+0x24>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <HAL_IncTick+0x24>)
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000094 	.word	0x20000094
 8002f44:	200005f8 	.word	0x200005f8

08002f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_GetTick+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	200005f8 	.word	0x200005f8

08002f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f68:	f7ff ffee 	bl	8002f48 <HAL_GetTick>
 8002f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d005      	beq.n	8002f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_Delay+0x44>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f86:	bf00      	nop
 8002f88:	f7ff ffde 	bl	8002f48 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d8f7      	bhi.n	8002f88 <HAL_Delay+0x28>
  {
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000094 	.word	0x20000094

08002fa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e14e      	b.n	800325c <HAL_ADC_Init+0x2b4>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a90      	ldr	r2, [pc, #576]	; (8003204 <HAL_ADC_Init+0x25c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_ADC_Init+0x2a>
 8002fc8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002fcc:	488e      	ldr	r0, [pc, #568]	; (8003208 <HAL_ADC_Init+0x260>)
 8002fce:	f7fe ff4e 	bl	8001e6e <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d013      	beq.n	8003002 <HAL_ADC_Init+0x5a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe2:	d00e      	beq.n	8003002 <HAL_ADC_Init+0x5a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fec:	d009      	beq.n	8003002 <HAL_ADC_Init+0x5a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ff6:	d004      	beq.n	8003002 <HAL_ADC_Init+0x5a>
 8002ff8:	f240 1143 	movw	r1, #323	; 0x143
 8002ffc:	4882      	ldr	r0, [pc, #520]	; (8003208 <HAL_ADC_Init+0x260>)
 8002ffe:	f7fe ff36 	bl	8001e6e <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d013      	beq.n	8003032 <HAL_ADC_Init+0x8a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003012:	d00e      	beq.n	8003032 <HAL_ADC_Init+0x8a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800301c:	d009      	beq.n	8003032 <HAL_ADC_Init+0x8a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003026:	d004      	beq.n	8003032 <HAL_ADC_Init+0x8a>
 8003028:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800302c:	4876      	ldr	r0, [pc, #472]	; (8003208 <HAL_ADC_Init+0x260>)
 800302e:	f7fe ff1e 	bl	8001e6e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_ADC_Init+0xa4>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d004      	beq.n	800304c <HAL_ADC_Init+0xa4>
 8003042:	f240 1145 	movw	r1, #325	; 0x145
 8003046:	4870      	ldr	r0, [pc, #448]	; (8003208 <HAL_ADC_Init+0x260>)
 8003048:	f7fe ff11 	bl	8001e6e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	7e1b      	ldrb	r3, [r3, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_ADC_Init+0xbe>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7e1b      	ldrb	r3, [r3, #24]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d004      	beq.n	8003066 <HAL_ADC_Init+0xbe>
 800305c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003060:	4869      	ldr	r0, [pc, #420]	; (8003208 <HAL_ADC_Init+0x260>)
 8003062:	f7fe ff04 	bl	8001e6e <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	d054      	beq.n	8003118 <HAL_ADC_Init+0x170>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003076:	d04f      	beq.n	8003118 <HAL_ADC_Init+0x170>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003080:	d04a      	beq.n	8003118 <HAL_ADC_Init+0x170>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800308a:	d045      	beq.n	8003118 <HAL_ADC_Init+0x170>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003094:	d040      	beq.n	8003118 <HAL_ADC_Init+0x170>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800309e:	d03b      	beq.n	8003118 <HAL_ADC_Init+0x170>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80030a8:	d036      	beq.n	8003118 <HAL_ADC_Init+0x170>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80030b2:	d031      	beq.n	8003118 <HAL_ADC_Init+0x170>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030bc:	d02c      	beq.n	8003118 <HAL_ADC_Init+0x170>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80030c6:	d027      	beq.n	8003118 <HAL_ADC_Init+0x170>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80030d0:	d022      	beq.n	8003118 <HAL_ADC_Init+0x170>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80030da:	d01d      	beq.n	8003118 <HAL_ADC_Init+0x170>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80030e4:	d018      	beq.n	8003118 <HAL_ADC_Init+0x170>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80030ee:	d013      	beq.n	8003118 <HAL_ADC_Init+0x170>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80030f8:	d00e      	beq.n	8003118 <HAL_ADC_Init+0x170>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003102:	d009      	beq.n	8003118 <HAL_ADC_Init+0x170>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	4a40      	ldr	r2, [pc, #256]	; (800320c <HAL_ADC_Init+0x264>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <HAL_ADC_Init+0x170>
 800310e:	f240 1147 	movw	r1, #327	; 0x147
 8003112:	483d      	ldr	r0, [pc, #244]	; (8003208 <HAL_ADC_Init+0x260>)
 8003114:	f7fe feab 	bl	8001e6e <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <HAL_ADC_Init+0x18c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003128:	d004      	beq.n	8003134 <HAL_ADC_Init+0x18c>
 800312a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800312e:	4836      	ldr	r0, [pc, #216]	; (8003208 <HAL_ADC_Init+0x260>)
 8003130:	f7fe fe9d 	bl	8001e6e <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_ADC_Init+0x19c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	2b10      	cmp	r3, #16
 8003142:	d904      	bls.n	800314e <HAL_ADC_Init+0x1a6>
 8003144:	f240 1149 	movw	r1, #329	; 0x149
 8003148:	482f      	ldr	r0, [pc, #188]	; (8003208 <HAL_ADC_Init+0x260>)
 800314a:	f7fe fe90 	bl	8001e6e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003154:	2b00      	cmp	r3, #0
 8003156:	d009      	beq.n	800316c <HAL_ADC_Init+0x1c4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800315e:	2b01      	cmp	r3, #1
 8003160:	d004      	beq.n	800316c <HAL_ADC_Init+0x1c4>
 8003162:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003166:	4828      	ldr	r0, [pc, #160]	; (8003208 <HAL_ADC_Init+0x260>)
 8003168:	f7fe fe81 	bl	8001e6e <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d00c      	beq.n	800318e <HAL_ADC_Init+0x1e6>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_ADC_Init+0x1e6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d004      	beq.n	800318e <HAL_ADC_Init+0x1e6>
 8003184:	f240 114b 	movw	r1, #331	; 0x14b
 8003188:	481f      	ldr	r0, [pc, #124]	; (8003208 <HAL_ADC_Init+0x260>)
 800318a:	f7fe fe70 	bl	8001e6e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_ADC_Init+0x204>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d004      	beq.n	80031ac <HAL_ADC_Init+0x204>
 80031a2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80031a6:	4818      	ldr	r0, [pc, #96]	; (8003208 <HAL_ADC_Init+0x260>)
 80031a8:	f7fe fe61 	bl	8001e6e <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	4a16      	ldr	r2, [pc, #88]	; (800320c <HAL_ADC_Init+0x264>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d017      	beq.n	80031e6 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d013      	beq.n	80031e6 <HAL_ADC_Init+0x23e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031c6:	d00e      	beq.n	80031e6 <HAL_ADC_Init+0x23e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d0:	d009      	beq.n	80031e6 <HAL_ADC_Init+0x23e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031da:	d004      	beq.n	80031e6 <HAL_ADC_Init+0x23e>
 80031dc:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80031e0:	4809      	ldr	r0, [pc, #36]	; (8003208 <HAL_ADC_Init+0x260>)
 80031e2:	f7fe fe44 	bl	8001e6e <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d110      	bne.n	8003210 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe f9ca 	bl	8001588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003202:	e005      	b.n	8003210 <HAL_ADC_Init+0x268>
 8003204:	40012000 	.word	0x40012000
 8003208:	08011be8 	.word	0x08011be8
 800320c:	0f000001 	.word	0x0f000001
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	d118      	bne.n	800324e <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003224:	f023 0302 	bic.w	r3, r3, #2
 8003228:	f043 0202 	orr.w	r2, r3, #2
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f98d 	bl	8003550 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	f023 0303 	bic.w	r3, r3, #3
 8003244:	f043 0201 	orr.w	r2, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
 800324c:	e001      	b.n	8003252 <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b12      	cmp	r3, #18
 8003278:	d909      	bls.n	800328e <HAL_ADC_ConfigChannel+0x2a>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a72      	ldr	r2, [pc, #456]	; (8003448 <HAL_ADC_ConfigChannel+0x1e4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_ADC_ConfigChannel+0x2a>
 8003284:	f240 618b 	movw	r1, #1675	; 0x68b
 8003288:	4870      	ldr	r0, [pc, #448]	; (800344c <HAL_ADC_ConfigChannel+0x1e8>)
 800328a:	f7fe fdf0 	bl	8001e6e <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_ADC_ConfigChannel+0x3a>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b10      	cmp	r3, #16
 800329c:	d904      	bls.n	80032a8 <HAL_ADC_ConfigChannel+0x44>
 800329e:	f240 618c 	movw	r1, #1676	; 0x68c
 80032a2:	486a      	ldr	r0, [pc, #424]	; (800344c <HAL_ADC_ConfigChannel+0x1e8>)
 80032a4:	f7fe fde3 	bl	8001e6e <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x8e>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d01c      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x8e>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d018      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x8e>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d014      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x8e>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d010      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x8e>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d00c      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x8e>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b06      	cmp	r3, #6
 80032de:	d008      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x8e>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b07      	cmp	r3, #7
 80032e6:	d004      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x8e>
 80032e8:	f240 618d 	movw	r1, #1677	; 0x68d
 80032ec:	4857      	ldr	r0, [pc, #348]	; (800344c <HAL_ADC_ConfigChannel+0x1e8>)
 80032ee:	f7fe fdbe 	bl	8001e6e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x9c>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e118      	b.n	8003532 <HAL_ADC_ConfigChannel+0x2ce>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b09      	cmp	r3, #9
 800330e:	d925      	bls.n	800335c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68d9      	ldr	r1, [r3, #12]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	3b1e      	subs	r3, #30
 8003326:	2207      	movs	r2, #7
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43da      	mvns	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	400a      	ands	r2, r1
 8003334:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68d9      	ldr	r1, [r3, #12]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	b29b      	uxth	r3, r3
 8003346:	4618      	mov	r0, r3
 8003348:	4603      	mov	r3, r0
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4403      	add	r3, r0
 800334e:	3b1e      	subs	r3, #30
 8003350:	409a      	lsls	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	e022      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6919      	ldr	r1, [r3, #16]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	2207      	movs	r2, #7
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43da      	mvns	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	400a      	ands	r2, r1
 800337e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6919      	ldr	r1, [r3, #16]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	4618      	mov	r0, r3
 8003392:	4603      	mov	r3, r0
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4403      	add	r3, r0
 8003398:	409a      	lsls	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d824      	bhi.n	80033f4 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	3b05      	subs	r3, #5
 80033bc:	221f      	movs	r2, #31
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	400a      	ands	r2, r1
 80033ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	4618      	mov	r0, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	3b05      	subs	r3, #5
 80033e6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	635a      	str	r2, [r3, #52]	; 0x34
 80033f2:	e051      	b.n	8003498 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	d829      	bhi.n	8003450 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	3b23      	subs	r3, #35	; 0x23
 800340e:	221f      	movs	r2, #31
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43da      	mvns	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	400a      	ands	r2, r1
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	4618      	mov	r0, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	3b23      	subs	r3, #35	; 0x23
 8003438:	fa00 f203 	lsl.w	r2, r0, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
 8003444:	e028      	b.n	8003498 <HAL_ADC_ConfigChannel+0x234>
 8003446:	bf00      	nop
 8003448:	10000012 	.word	0x10000012
 800344c:	08011be8 	.word	0x08011be8
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	3b41      	subs	r3, #65	; 0x41
 8003462:	221f      	movs	r2, #31
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43da      	mvns	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	400a      	ands	r2, r1
 8003470:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	4618      	mov	r0, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	3b41      	subs	r3, #65	; 0x41
 800348c:	fa00 f203 	lsl.w	r2, r0, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003498:	4b28      	ldr	r3, [pc, #160]	; (800353c <HAL_ADC_ConfigChannel+0x2d8>)
 800349a:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a27      	ldr	r2, [pc, #156]	; (8003540 <HAL_ADC_ConfigChannel+0x2dc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10f      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x262>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b12      	cmp	r3, #18
 80034ac:	d10b      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <HAL_ADC_ConfigChannel+0x2dc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d12b      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x2c4>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <HAL_ADC_ConfigChannel+0x2e0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <HAL_ADC_ConfigChannel+0x27e>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b11      	cmp	r3, #17
 80034e0:	d122      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a11      	ldr	r2, [pc, #68]	; (8003544 <HAL_ADC_ConfigChannel+0x2e0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d111      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003504:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_ADC_ConfigChannel+0x2e4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a10      	ldr	r2, [pc, #64]	; (800354c <HAL_ADC_ConfigChannel+0x2e8>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0c9a      	lsrs	r2, r3, #18
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800351a:	e002      	b.n	8003522 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	3b01      	subs	r3, #1
 8003520:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f9      	bne.n	800351c <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40012300 	.word	0x40012300
 8003540:	40012000 	.word	0x40012000
 8003544:	10000012 	.word	0x10000012
 8003548:	2000008c 	.word	0x2000008c
 800354c:	431bde83 	.word	0x431bde83

08003550 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003558:	4b7f      	ldr	r3, [pc, #508]	; (8003758 <ADC_Init+0x208>)
 800355a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	021a      	lsls	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6899      	ldr	r1, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	4a5e      	ldr	r2, [pc, #376]	; (800375c <ADC_Init+0x20c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	e00f      	b.n	800364e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800363c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800364c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0202 	bic.w	r2, r2, #2
 800365c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7e1b      	ldrb	r3, [r3, #24]
 8003668:	005a      	lsls	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d028      	beq.n	80036ce <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <ADC_Init+0x13c>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	2b08      	cmp	r3, #8
 800368a:	d904      	bls.n	8003696 <ADC_Init+0x146>
 800368c:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003690:	4833      	ldr	r0, [pc, #204]	; (8003760 <ADC_Init+0x210>)
 8003692:	f7fe fbec 	bl	8001e6e <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a4:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036b4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	3b01      	subs	r3, #1
 80036c2:	035a      	lsls	r2, r3, #13
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	e007      	b.n	80036de <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036dc:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	051a      	lsls	r2, r3, #20
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6899      	ldr	r1, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003720:	025a      	lsls	r2, r3, #9
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003738:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6899      	ldr	r1, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	029a      	lsls	r2, r3, #10
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40012300 	.word	0x40012300
 800375c:	0f000001 	.word	0x0f000001
 8003760:	08011be8 	.word	0x08011be8

08003764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003780:	4013      	ands	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800378c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003796:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	60d3      	str	r3, [r2, #12]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <__NVIC_GetPriorityGrouping+0x18>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f003 0307 	and.w	r3, r3, #7
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	db0b      	blt.n	80037f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	4907      	ldr	r1, [pc, #28]	; (8003800 <__NVIC_EnableIRQ+0x38>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2001      	movs	r0, #1
 80037ea:	fa00 f202 	lsl.w	r2, r0, r2
 80037ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e100 	.word	0xe000e100

08003804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003814:	2b00      	cmp	r3, #0
 8003816:	db0a      	blt.n	800382e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	490c      	ldr	r1, [pc, #48]	; (8003850 <__NVIC_SetPriority+0x4c>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	440b      	add	r3, r1
 8003828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800382c:	e00a      	b.n	8003844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4908      	ldr	r1, [pc, #32]	; (8003854 <__NVIC_SetPriority+0x50>)
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	3b04      	subs	r3, #4
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	440b      	add	r3, r1
 8003842:	761a      	strb	r2, [r3, #24]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000e100 	.word	0xe000e100
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	; 0x24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f1c3 0307 	rsb	r3, r3, #7
 8003872:	2b04      	cmp	r3, #4
 8003874:	bf28      	it	cs
 8003876:	2304      	movcs	r3, #4
 8003878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3304      	adds	r3, #4
 800387e:	2b06      	cmp	r3, #6
 8003880:	d902      	bls.n	8003888 <NVIC_EncodePriority+0x30>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3b03      	subs	r3, #3
 8003886:	e000      	b.n	800388a <NVIC_EncodePriority+0x32>
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800388c:	f04f 32ff 	mov.w	r2, #4294967295
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43da      	mvns	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	401a      	ands	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a0:	f04f 31ff 	mov.w	r1, #4294967295
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	43d9      	mvns	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b0:	4313      	orrs	r3, r2
         );
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3724      	adds	r7, #36	; 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b07      	cmp	r3, #7
 80038cc:	d00f      	beq.n	80038ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d00c      	beq.n	80038ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d009      	beq.n	80038ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d006      	beq.n	80038ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d003      	beq.n	80038ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038e6:	2190      	movs	r1, #144	; 0x90
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80038ea:	f7fe fac0 	bl	8001e6e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ff38 	bl	8003764 <__NVIC_SetPriorityGrouping>
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	08011c20 	.word	0x08011c20

08003900 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b0f      	cmp	r3, #15
 8003916:	d903      	bls.n	8003920 <HAL_NVIC_SetPriority+0x20>
 8003918:	21a8      	movs	r1, #168	; 0xa8
 800391a:	480e      	ldr	r0, [pc, #56]	; (8003954 <HAL_NVIC_SetPriority+0x54>)
 800391c:	f7fe faa7 	bl	8001e6e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b0f      	cmp	r3, #15
 8003924:	d903      	bls.n	800392e <HAL_NVIC_SetPriority+0x2e>
 8003926:	21a9      	movs	r1, #169	; 0xa9
 8003928:	480a      	ldr	r0, [pc, #40]	; (8003954 <HAL_NVIC_SetPriority+0x54>)
 800392a:	f7fe faa0 	bl	8001e6e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800392e:	f7ff ff3d 	bl	80037ac <__NVIC_GetPriorityGrouping>
 8003932:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	6978      	ldr	r0, [r7, #20]
 800393a:	f7ff ff8d 	bl	8003858 <NVIC_EncodePriority>
 800393e:	4602      	mov	r2, r0
 8003940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ff5c 	bl	8003804 <__NVIC_SetPriority>
}
 800394c:	bf00      	nop
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	08011c20 	.word	0x08011c20

08003958 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	2b00      	cmp	r3, #0
 8003968:	da03      	bge.n	8003972 <HAL_NVIC_EnableIRQ+0x1a>
 800396a:	21bc      	movs	r1, #188	; 0xbc
 800396c:	4805      	ldr	r0, [pc, #20]	; (8003984 <HAL_NVIC_EnableIRQ+0x2c>)
 800396e:	f7fe fa7e 	bl	8001e6e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff26 	bl	80037c8 <__NVIC_EnableIRQ>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	08011c20 	.word	0x08011c20

08003988 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e017      	b.n	80039ca <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a0d      	ldr	r2, [pc, #52]	; (80039d4 <HAL_CRC_Init+0x4c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d003      	beq.n	80039ac <HAL_CRC_Init+0x24>
 80039a4:	2168      	movs	r1, #104	; 0x68
 80039a6:	480c      	ldr	r0, [pc, #48]	; (80039d8 <HAL_CRC_Init+0x50>)
 80039a8:	f7fe fa61 	bl	8001e6e <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	795b      	ldrb	r3, [r3, #5]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d105      	bne.n	80039c2 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7fd ff05 	bl	80017cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023000 	.word	0x40023000
 80039d8:	08011c5c 	.word	0x08011c5c

080039dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039e8:	f7ff faae 	bl	8002f48 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e203      	b.n	8003e00 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a8b      	ldr	r2, [pc, #556]	; (8003c2c <HAL_DMA_Init+0x250>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d04e      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a8a      	ldr	r2, [pc, #552]	; (8003c30 <HAL_DMA_Init+0x254>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d049      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a88      	ldr	r2, [pc, #544]	; (8003c34 <HAL_DMA_Init+0x258>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d044      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a87      	ldr	r2, [pc, #540]	; (8003c38 <HAL_DMA_Init+0x25c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d03f      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a85      	ldr	r2, [pc, #532]	; (8003c3c <HAL_DMA_Init+0x260>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d03a      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a84      	ldr	r2, [pc, #528]	; (8003c40 <HAL_DMA_Init+0x264>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d035      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a82      	ldr	r2, [pc, #520]	; (8003c44 <HAL_DMA_Init+0x268>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d030      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a81      	ldr	r2, [pc, #516]	; (8003c48 <HAL_DMA_Init+0x26c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d02b      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a7f      	ldr	r2, [pc, #508]	; (8003c4c <HAL_DMA_Init+0x270>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d026      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7e      	ldr	r2, [pc, #504]	; (8003c50 <HAL_DMA_Init+0x274>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d021      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7c      	ldr	r2, [pc, #496]	; (8003c54 <HAL_DMA_Init+0x278>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01c      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7b      	ldr	r2, [pc, #492]	; (8003c58 <HAL_DMA_Init+0x27c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d017      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a79      	ldr	r2, [pc, #484]	; (8003c5c <HAL_DMA_Init+0x280>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d012      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a78      	ldr	r2, [pc, #480]	; (8003c60 <HAL_DMA_Init+0x284>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00d      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a76      	ldr	r2, [pc, #472]	; (8003c64 <HAL_DMA_Init+0x288>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d008      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a75      	ldr	r2, [pc, #468]	; (8003c68 <HAL_DMA_Init+0x28c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <HAL_DMA_Init+0xc4>
 8003a98:	21b7      	movs	r1, #183	; 0xb7
 8003a9a:	4874      	ldr	r0, [pc, #464]	; (8003c6c <HAL_DMA_Init+0x290>)
 8003a9c:	f7fe f9e7 	bl	8001e6e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d026      	beq.n	8003af6 <HAL_DMA_Init+0x11a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ab0:	d021      	beq.n	8003af6 <HAL_DMA_Init+0x11a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aba:	d01c      	beq.n	8003af6 <HAL_DMA_Init+0x11a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003ac4:	d017      	beq.n	8003af6 <HAL_DMA_Init+0x11a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ace:	d012      	beq.n	8003af6 <HAL_DMA_Init+0x11a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003ad8:	d00d      	beq.n	8003af6 <HAL_DMA_Init+0x11a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ae2:	d008      	beq.n	8003af6 <HAL_DMA_Init+0x11a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003aec:	d003      	beq.n	8003af6 <HAL_DMA_Init+0x11a>
 8003aee:	21b8      	movs	r1, #184	; 0xb8
 8003af0:	485e      	ldr	r0, [pc, #376]	; (8003c6c <HAL_DMA_Init+0x290>)
 8003af2:	f7fe f9bc 	bl	8001e6e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_DMA_Init+0x13a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b40      	cmp	r3, #64	; 0x40
 8003b04:	d007      	beq.n	8003b16 <HAL_DMA_Init+0x13a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b80      	cmp	r3, #128	; 0x80
 8003b0c:	d003      	beq.n	8003b16 <HAL_DMA_Init+0x13a>
 8003b0e:	21b9      	movs	r1, #185	; 0xb9
 8003b10:	4856      	ldr	r0, [pc, #344]	; (8003c6c <HAL_DMA_Init+0x290>)
 8003b12:	f7fe f9ac 	bl	8001e6e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b1e:	d007      	beq.n	8003b30 <HAL_DMA_Init+0x154>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_DMA_Init+0x154>
 8003b28:	21ba      	movs	r1, #186	; 0xba
 8003b2a:	4850      	ldr	r0, [pc, #320]	; (8003c6c <HAL_DMA_Init+0x290>)
 8003b2c:	f7fe f99f 	bl	8001e6e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b38:	d007      	beq.n	8003b4a <HAL_DMA_Init+0x16e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_DMA_Init+0x16e>
 8003b42:	21bb      	movs	r1, #187	; 0xbb
 8003b44:	4849      	ldr	r0, [pc, #292]	; (8003c6c <HAL_DMA_Init+0x290>)
 8003b46:	f7fe f992 	bl	8001e6e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <HAL_DMA_Init+0x192>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b5a:	d008      	beq.n	8003b6e <HAL_DMA_Init+0x192>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b64:	d003      	beq.n	8003b6e <HAL_DMA_Init+0x192>
 8003b66:	21bc      	movs	r1, #188	; 0xbc
 8003b68:	4840      	ldr	r0, [pc, #256]	; (8003c6c <HAL_DMA_Init+0x290>)
 8003b6a:	f7fe f980 	bl	8001e6e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <HAL_DMA_Init+0x1b6>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7e:	d008      	beq.n	8003b92 <HAL_DMA_Init+0x1b6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b88:	d003      	beq.n	8003b92 <HAL_DMA_Init+0x1b6>
 8003b8a:	21bd      	movs	r1, #189	; 0xbd
 8003b8c:	4837      	ldr	r0, [pc, #220]	; (8003c6c <HAL_DMA_Init+0x290>)
 8003b8e:	f7fe f96e 	bl	8001e6e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00c      	beq.n	8003bb4 <HAL_DMA_Init+0x1d8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba2:	d007      	beq.n	8003bb4 <HAL_DMA_Init+0x1d8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d003      	beq.n	8003bb4 <HAL_DMA_Init+0x1d8>
 8003bac:	21be      	movs	r1, #190	; 0xbe
 8003bae:	482f      	ldr	r0, [pc, #188]	; (8003c6c <HAL_DMA_Init+0x290>)
 8003bb0:	f7fe f95d 	bl	8001e6e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d012      	beq.n	8003be2 <HAL_DMA_Init+0x206>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc4:	d00d      	beq.n	8003be2 <HAL_DMA_Init+0x206>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bce:	d008      	beq.n	8003be2 <HAL_DMA_Init+0x206>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bd8:	d003      	beq.n	8003be2 <HAL_DMA_Init+0x206>
 8003bda:	21bf      	movs	r1, #191	; 0xbf
 8003bdc:	4823      	ldr	r0, [pc, #140]	; (8003c6c <HAL_DMA_Init+0x290>)
 8003bde:	f7fe f946 	bl	8001e6e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_DMA_Init+0x21e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d003      	beq.n	8003bfa <HAL_DMA_Init+0x21e>
 8003bf2:	21c0      	movs	r1, #192	; 0xc0
 8003bf4:	481d      	ldr	r0, [pc, #116]	; (8003c6c <HAL_DMA_Init+0x290>)
 8003bf6:	f7fe f93a 	bl	8001e6e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d064      	beq.n	8003ccc <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d032      	beq.n	8003c70 <HAL_DMA_Init+0x294>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d02e      	beq.n	8003c70 <HAL_DMA_Init+0x294>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d02a      	beq.n	8003c70 <HAL_DMA_Init+0x294>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d026      	beq.n	8003c70 <HAL_DMA_Init+0x294>
 8003c22:	21c5      	movs	r1, #197	; 0xc5
 8003c24:	4811      	ldr	r0, [pc, #68]	; (8003c6c <HAL_DMA_Init+0x290>)
 8003c26:	f7fe f922 	bl	8001e6e <assert_failed>
 8003c2a:	e021      	b.n	8003c70 <HAL_DMA_Init+0x294>
 8003c2c:	40026010 	.word	0x40026010
 8003c30:	40026028 	.word	0x40026028
 8003c34:	40026040 	.word	0x40026040
 8003c38:	40026058 	.word	0x40026058
 8003c3c:	40026070 	.word	0x40026070
 8003c40:	40026088 	.word	0x40026088
 8003c44:	400260a0 	.word	0x400260a0
 8003c48:	400260b8 	.word	0x400260b8
 8003c4c:	40026410 	.word	0x40026410
 8003c50:	40026428 	.word	0x40026428
 8003c54:	40026440 	.word	0x40026440
 8003c58:	40026458 	.word	0x40026458
 8003c5c:	40026470 	.word	0x40026470
 8003c60:	40026488 	.word	0x40026488
 8003c64:	400264a0 	.word	0x400264a0
 8003c68:	400264b8 	.word	0x400264b8
 8003c6c:	08011c94 	.word	0x08011c94
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d012      	beq.n	8003c9e <HAL_DMA_Init+0x2c2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c80:	d00d      	beq.n	8003c9e <HAL_DMA_Init+0x2c2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c8a:	d008      	beq.n	8003c9e <HAL_DMA_Init+0x2c2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c94:	d003      	beq.n	8003c9e <HAL_DMA_Init+0x2c2>
 8003c96:	21c6      	movs	r1, #198	; 0xc6
 8003c98:	485b      	ldr	r0, [pc, #364]	; (8003e08 <HAL_DMA_Init+0x42c>)
 8003c9a:	f7fe f8e8 	bl	8001e6e <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d012      	beq.n	8003ccc <HAL_DMA_Init+0x2f0>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cae:	d00d      	beq.n	8003ccc <HAL_DMA_Init+0x2f0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb8:	d008      	beq.n	8003ccc <HAL_DMA_Init+0x2f0>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003cc2:	d003      	beq.n	8003ccc <HAL_DMA_Init+0x2f0>
 8003cc4:	21c7      	movs	r1, #199	; 0xc7
 8003cc6:	4850      	ldr	r0, [pc, #320]	; (8003e08 <HAL_DMA_Init+0x42c>)
 8003cc8:	f7fe f8d1 	bl	8001e6e <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cec:	e00f      	b.n	8003d0e <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cee:	f7ff f92b 	bl	8002f48 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d908      	bls.n	8003d0e <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2203      	movs	r2, #3
 8003d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e078      	b.n	8003e00 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e8      	bne.n	8003cee <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <HAL_DMA_Init+0x430>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d107      	bne.n	8003d78 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	4313      	orrs	r3, r2
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f023 0307 	bic.w	r3, r3, #7
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d117      	bne.n	8003dd2 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00e      	beq.n	8003dd2 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 faa1 	bl	80042fc <DMA_CheckFifoParam>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2240      	movs	r2, #64	; 0x40
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e016      	b.n	8003e00 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fa58 	bl	8004290 <DMA_CalcBaseAndBitshift>
 8003de0:	4603      	mov	r3, r0
 8003de2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	223f      	movs	r2, #63	; 0x3f
 8003dea:	409a      	lsls	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	08011c94 	.word	0x08011c94
 8003e0c:	f010803f 	.word	0xf010803f

08003e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_DMA_Start_IT+0x26>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d304      	bcc.n	8003e40 <HAL_DMA_Start_IT+0x30>
 8003e36:	f240 11cb 	movw	r1, #459	; 0x1cb
 8003e3a:	4827      	ldr	r0, [pc, #156]	; (8003ed8 <HAL_DMA_Start_IT+0xc8>)
 8003e3c:	f7fe f817 	bl	8001e6e <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_DMA_Start_IT+0x3e>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e040      	b.n	8003ed0 <HAL_DMA_Start_IT+0xc0>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d12f      	bne.n	8003ec2 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2202      	movs	r2, #2
 8003e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f9dc 	bl	8004234 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	223f      	movs	r2, #63	; 0x3f
 8003e82:	409a      	lsls	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0216 	orr.w	r2, r2, #22
 8003e96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0208 	orr.w	r2, r2, #8
 8003eae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e005      	b.n	8003ece <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	08011c94 	.word	0x08011c94

08003edc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d004      	beq.n	8003efa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2280      	movs	r2, #128	; 0x80
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e00c      	b.n	8003f14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2205      	movs	r2, #5
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f2c:	4b8e      	ldr	r3, [pc, #568]	; (8004168 <HAL_DMA_IRQHandler+0x248>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a8e      	ldr	r2, [pc, #568]	; (800416c <HAL_DMA_IRQHandler+0x24c>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0a9b      	lsrs	r3, r3, #10
 8003f38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01a      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d013      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0204 	bic.w	r2, r2, #4
 8003f72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	2208      	movs	r2, #8
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	f043 0201 	orr.w	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	2201      	movs	r2, #1
 8003f92:	409a      	lsls	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d012      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	2201      	movs	r2, #1
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f043 0202 	orr.w	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d012      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00b      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f043 0204 	orr.w	r2, r3, #4
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	409a      	lsls	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d043      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d03c      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	2210      	movs	r2, #16
 800401c:	409a      	lsls	r2, r3
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d018      	beq.n	8004062 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d108      	bne.n	8004050 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d024      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
 800404e:	e01f      	b.n	8004090 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01b      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
 8004060:	e016      	b.n	8004090 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d107      	bne.n	8004080 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0208 	bic.w	r2, r2, #8
 800407e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	2220      	movs	r2, #32
 8004096:	409a      	lsls	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 808f 	beq.w	80041c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8087 	beq.w	80041c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b6:	2220      	movs	r2, #32
 80040b8:	409a      	lsls	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b05      	cmp	r3, #5
 80040c8:	d136      	bne.n	8004138 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0216 	bic.w	r2, r2, #22
 80040d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_DMA_IRQHandler+0x1da>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0208 	bic.w	r2, r2, #8
 8004108:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	223f      	movs	r2, #63	; 0x3f
 8004110:	409a      	lsls	r2, r3
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412a:	2b00      	cmp	r3, #0
 800412c:	d07e      	beq.n	800422c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
        }
        return;
 8004136:	e079      	b.n	800422c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01d      	beq.n	8004182 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10d      	bne.n	8004170 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004158:	2b00      	cmp	r3, #0
 800415a:	d031      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
 8004164:	e02c      	b.n	80041c0 <HAL_DMA_IRQHandler+0x2a0>
 8004166:	bf00      	nop
 8004168:	2000008c 	.word	0x2000008c
 800416c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d023      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	4798      	blx	r3
 8004180:	e01e      	b.n	80041c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10f      	bne.n	80041b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0210 	bic.w	r2, r2, #16
 800419e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d032      	beq.n	800422e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d022      	beq.n	800421a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2205      	movs	r2, #5
 80041d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	3301      	adds	r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d307      	bcc.n	8004208 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f2      	bne.n	80041ec <HAL_DMA_IRQHandler+0x2cc>
 8004206:	e000      	b.n	800420a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004208:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
 800422a:	e000      	b.n	800422e <HAL_DMA_IRQHandler+0x30e>
        return;
 800422c:	bf00      	nop
    }
  }
}
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004250:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d108      	bne.n	8004274 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004272:	e007      	b.n	8004284 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	60da      	str	r2, [r3, #12]
}
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	3b10      	subs	r3, #16
 80042a0:	4a14      	ldr	r2, [pc, #80]	; (80042f4 <DMA_CalcBaseAndBitshift+0x64>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042aa:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <DMA_CalcBaseAndBitshift+0x68>)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d909      	bls.n	80042d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	1d1a      	adds	r2, r3, #4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	659a      	str	r2, [r3, #88]	; 0x58
 80042d0:	e007      	b.n	80042e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	aaaaaaab 	.word	0xaaaaaaab
 80042f8:	08014104 	.word	0x08014104

080042fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d11f      	bne.n	8004356 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b03      	cmp	r3, #3
 800431a:	d856      	bhi.n	80043ca <DMA_CheckFifoParam+0xce>
 800431c:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <DMA_CheckFifoParam+0x28>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004335 	.word	0x08004335
 8004328:	08004347 	.word	0x08004347
 800432c:	08004335 	.word	0x08004335
 8004330:	080043cb 	.word	0x080043cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d046      	beq.n	80043ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004344:	e043      	b.n	80043ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800434e:	d140      	bne.n	80043d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004354:	e03d      	b.n	80043d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435e:	d121      	bne.n	80043a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d837      	bhi.n	80043d6 <DMA_CheckFifoParam+0xda>
 8004366:	a201      	add	r2, pc, #4	; (adr r2, 800436c <DMA_CheckFifoParam+0x70>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	0800437d 	.word	0x0800437d
 8004370:	08004383 	.word	0x08004383
 8004374:	0800437d 	.word	0x0800437d
 8004378:	08004395 	.word	0x08004395
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
      break;
 8004380:	e030      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d025      	beq.n	80043da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004392:	e022      	b.n	80043da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800439c:	d11f      	bne.n	80043de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043a2:	e01c      	b.n	80043de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d903      	bls.n	80043b2 <DMA_CheckFifoParam+0xb6>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d003      	beq.n	80043b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043b0:	e018      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
      break;
 80043b6:	e015      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00e      	beq.n	80043e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
      break;
 80043c8:	e00b      	b.n	80043e2 <DMA_CheckFifoParam+0xe6>
      break;
 80043ca:	bf00      	nop
 80043cc:	e00a      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
      break;
 80043ce:	bf00      	nop
 80043d0:	e008      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
      break;
 80043d2:	bf00      	nop
 80043d4:	e006      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
      break;
 80043d6:	bf00      	nop
 80043d8:	e004      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
      break;
 80043da:	bf00      	nop
 80043dc:	e002      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <DMA_CheckFifoParam+0xe8>
      break;
 80043e2:	bf00      	nop
    }
  } 
  
  return status; 
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop

080043f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004402:	2300      	movs	r3, #0
 8004404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a33      	ldr	r2, [pc, #204]	; (80044dc <HAL_GPIO_Init+0xe8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d017      	beq.n	8004442 <HAL_GPIO_Init+0x4e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a32      	ldr	r2, [pc, #200]	; (80044e0 <HAL_GPIO_Init+0xec>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d013      	beq.n	8004442 <HAL_GPIO_Init+0x4e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a31      	ldr	r2, [pc, #196]	; (80044e4 <HAL_GPIO_Init+0xf0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00f      	beq.n	8004442 <HAL_GPIO_Init+0x4e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a30      	ldr	r2, [pc, #192]	; (80044e8 <HAL_GPIO_Init+0xf4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00b      	beq.n	8004442 <HAL_GPIO_Init+0x4e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a2f      	ldr	r2, [pc, #188]	; (80044ec <HAL_GPIO_Init+0xf8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d007      	beq.n	8004442 <HAL_GPIO_Init+0x4e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a2e      	ldr	r2, [pc, #184]	; (80044f0 <HAL_GPIO_Init+0xfc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_Init+0x4e>
 800443a:	21ac      	movs	r1, #172	; 0xac
 800443c:	482d      	ldr	r0, [pc, #180]	; (80044f4 <HAL_GPIO_Init+0x100>)
 800443e:	f7fd fd16 	bl	8001e6e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_GPIO_Init+0x64>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	041b      	lsls	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_GPIO_Init+0x6c>
 8004458:	21ad      	movs	r1, #173	; 0xad
 800445a:	4826      	ldr	r0, [pc, #152]	; (80044f4 <HAL_GPIO_Init+0x100>)
 800445c:	f7fd fd07 	bl	8001e6e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d035      	beq.n	80044d4 <HAL_GPIO_Init+0xe0>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d031      	beq.n	80044d4 <HAL_GPIO_Init+0xe0>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b11      	cmp	r3, #17
 8004476:	d02d      	beq.n	80044d4 <HAL_GPIO_Init+0xe0>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d029      	beq.n	80044d4 <HAL_GPIO_Init+0xe0>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b12      	cmp	r3, #18
 8004486:	d025      	beq.n	80044d4 <HAL_GPIO_Init+0xe0>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004490:	d020      	beq.n	80044d4 <HAL_GPIO_Init+0xe0>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800449a:	d01b      	beq.n	80044d4 <HAL_GPIO_Init+0xe0>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80044a4:	d016      	beq.n	80044d4 <HAL_GPIO_Init+0xe0>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80044ae:	d011      	beq.n	80044d4 <HAL_GPIO_Init+0xe0>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80044b8:	d00c      	beq.n	80044d4 <HAL_GPIO_Init+0xe0>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80044c2:	d007      	beq.n	80044d4 <HAL_GPIO_Init+0xe0>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d003      	beq.n	80044d4 <HAL_GPIO_Init+0xe0>
 80044cc:	21ae      	movs	r1, #174	; 0xae
 80044ce:	4809      	ldr	r0, [pc, #36]	; (80044f4 <HAL_GPIO_Init+0x100>)
 80044d0:	f7fd fccd 	bl	8001e6e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e20c      	b.n	80048f4 <HAL_GPIO_Init+0x500>
 80044da:	bf00      	nop
 80044dc:	40020000 	.word	0x40020000
 80044e0:	40020400 	.word	0x40020400
 80044e4:	40020800 	.word	0x40020800
 80044e8:	40020c00 	.word	0x40020c00
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40021c00 	.word	0x40021c00
 80044f4:	08011ccc 	.word	0x08011ccc
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044f8:	2201      	movs	r2, #1
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4013      	ands	r3, r2
 800450a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	429a      	cmp	r2, r3
 8004512:	f040 81ec 	bne.w	80048ee <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d005      	beq.n	800452e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800452a:	2b02      	cmp	r3, #2
 800452c:	d144      	bne.n	80045b8 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00f      	beq.n	8004556 <HAL_GPIO_Init+0x162>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d00b      	beq.n	8004556 <HAL_GPIO_Init+0x162>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d007      	beq.n	8004556 <HAL_GPIO_Init+0x162>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d003      	beq.n	8004556 <HAL_GPIO_Init+0x162>
 800454e:	21c0      	movs	r1, #192	; 0xc0
 8004550:	4884      	ldr	r0, [pc, #528]	; (8004764 <HAL_GPIO_Init+0x370>)
 8004552:	f7fd fc8c 	bl	8001e6e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	2203      	movs	r2, #3
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800458c:	2201      	movs	r2, #1
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 0201 	and.w	r2, r3, #1
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d027      	beq.n	8004614 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_GPIO_Init+0x1f0>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d007      	beq.n	80045e4 <HAL_GPIO_Init+0x1f0>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d003      	beq.n	80045e4 <HAL_GPIO_Init+0x1f0>
 80045dc:	21d1      	movs	r1, #209	; 0xd1
 80045de:	4861      	ldr	r0, [pc, #388]	; (8004764 <HAL_GPIO_Init+0x370>)
 80045e0:	f7fd fc45 	bl	8001e6e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	2203      	movs	r2, #3
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b02      	cmp	r3, #2
 800461e:	f040 80a3 	bne.w	8004768 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d077      	beq.n	800471a <HAL_GPIO_Init+0x326>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b09      	cmp	r3, #9
 8004630:	d073      	beq.n	800471a <HAL_GPIO_Init+0x326>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d06f      	beq.n	800471a <HAL_GPIO_Init+0x326>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d06b      	beq.n	800471a <HAL_GPIO_Init+0x326>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d067      	beq.n	800471a <HAL_GPIO_Init+0x326>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d063      	beq.n	800471a <HAL_GPIO_Init+0x326>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d05f      	beq.n	800471a <HAL_GPIO_Init+0x326>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d05b      	beq.n	800471a <HAL_GPIO_Init+0x326>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d057      	beq.n	800471a <HAL_GPIO_Init+0x326>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d053      	beq.n	800471a <HAL_GPIO_Init+0x326>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d04f      	beq.n	800471a <HAL_GPIO_Init+0x326>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b04      	cmp	r3, #4
 8004680:	d04b      	beq.n	800471a <HAL_GPIO_Init+0x326>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b04      	cmp	r3, #4
 8004688:	d047      	beq.n	800471a <HAL_GPIO_Init+0x326>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b04      	cmp	r3, #4
 8004690:	d043      	beq.n	800471a <HAL_GPIO_Init+0x326>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b05      	cmp	r3, #5
 8004698:	d03f      	beq.n	800471a <HAL_GPIO_Init+0x326>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d03b      	beq.n	800471a <HAL_GPIO_Init+0x326>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	d037      	beq.n	800471a <HAL_GPIO_Init+0x326>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d033      	beq.n	800471a <HAL_GPIO_Init+0x326>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d02f      	beq.n	800471a <HAL_GPIO_Init+0x326>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d02b      	beq.n	800471a <HAL_GPIO_Init+0x326>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b06      	cmp	r3, #6
 80046c8:	d027      	beq.n	800471a <HAL_GPIO_Init+0x326>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b07      	cmp	r3, #7
 80046d0:	d023      	beq.n	800471a <HAL_GPIO_Init+0x326>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b07      	cmp	r3, #7
 80046d8:	d01f      	beq.n	800471a <HAL_GPIO_Init+0x326>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b07      	cmp	r3, #7
 80046e0:	d01b      	beq.n	800471a <HAL_GPIO_Init+0x326>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d017      	beq.n	800471a <HAL_GPIO_Init+0x326>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b0a      	cmp	r3, #10
 80046f0:	d013      	beq.n	800471a <HAL_GPIO_Init+0x326>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b09      	cmp	r3, #9
 80046f8:	d00f      	beq.n	800471a <HAL_GPIO_Init+0x326>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b09      	cmp	r3, #9
 8004700:	d00b      	beq.n	800471a <HAL_GPIO_Init+0x326>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d007      	beq.n	800471a <HAL_GPIO_Init+0x326>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b0f      	cmp	r3, #15
 8004710:	d003      	beq.n	800471a <HAL_GPIO_Init+0x326>
 8004712:	21de      	movs	r1, #222	; 0xde
 8004714:	4813      	ldr	r0, [pc, #76]	; (8004764 <HAL_GPIO_Init+0x370>)
 8004716:	f7fd fbaa 	bl	8001e6e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	08da      	lsrs	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3208      	adds	r2, #8
 8004722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	220f      	movs	r2, #15
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	43db      	mvns	r3, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4013      	ands	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	08da      	lsrs	r2, r3, #3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3208      	adds	r2, #8
 800475c:	69b9      	ldr	r1, [r7, #24]
 800475e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004762:	e001      	b.n	8004768 <HAL_GPIO_Init+0x374>
 8004764:	08011ccc 	.word	0x08011ccc
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	2203      	movs	r2, #3
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0203 	and.w	r2, r3, #3
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80a2 	beq.w	80048ee <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	4b56      	ldr	r3, [pc, #344]	; (8004908 <HAL_GPIO_Init+0x514>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	4a55      	ldr	r2, [pc, #340]	; (8004908 <HAL_GPIO_Init+0x514>)
 80047b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047b8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ba:	4b53      	ldr	r3, [pc, #332]	; (8004908 <HAL_GPIO_Init+0x514>)
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047c6:	4a51      	ldr	r2, [pc, #324]	; (800490c <HAL_GPIO_Init+0x518>)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	3302      	adds	r3, #2
 80047ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a48      	ldr	r2, [pc, #288]	; (8004910 <HAL_GPIO_Init+0x51c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d019      	beq.n	8004826 <HAL_GPIO_Init+0x432>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a47      	ldr	r2, [pc, #284]	; (8004914 <HAL_GPIO_Init+0x520>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <HAL_GPIO_Init+0x42e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a46      	ldr	r2, [pc, #280]	; (8004918 <HAL_GPIO_Init+0x524>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00d      	beq.n	800481e <HAL_GPIO_Init+0x42a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a45      	ldr	r2, [pc, #276]	; (800491c <HAL_GPIO_Init+0x528>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d007      	beq.n	800481a <HAL_GPIO_Init+0x426>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a44      	ldr	r2, [pc, #272]	; (8004920 <HAL_GPIO_Init+0x52c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <HAL_GPIO_Init+0x422>
 8004812:	2304      	movs	r3, #4
 8004814:	e008      	b.n	8004828 <HAL_GPIO_Init+0x434>
 8004816:	2307      	movs	r3, #7
 8004818:	e006      	b.n	8004828 <HAL_GPIO_Init+0x434>
 800481a:	2303      	movs	r3, #3
 800481c:	e004      	b.n	8004828 <HAL_GPIO_Init+0x434>
 800481e:	2302      	movs	r3, #2
 8004820:	e002      	b.n	8004828 <HAL_GPIO_Init+0x434>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <HAL_GPIO_Init+0x434>
 8004826:	2300      	movs	r3, #0
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	f002 0203 	and.w	r2, r2, #3
 800482e:	0092      	lsls	r2, r2, #2
 8004830:	4093      	lsls	r3, r2
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4313      	orrs	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004838:	4934      	ldr	r1, [pc, #208]	; (800490c <HAL_GPIO_Init+0x518>)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	3302      	adds	r3, #2
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004846:	4b37      	ldr	r3, [pc, #220]	; (8004924 <HAL_GPIO_Init+0x530>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	43db      	mvns	r3, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800486a:	4a2e      	ldr	r2, [pc, #184]	; (8004924 <HAL_GPIO_Init+0x530>)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004870:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <HAL_GPIO_Init+0x530>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	43db      	mvns	r3, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4013      	ands	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004894:	4a23      	ldr	r2, [pc, #140]	; (8004924 <HAL_GPIO_Init+0x530>)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800489a:	4b22      	ldr	r3, [pc, #136]	; (8004924 <HAL_GPIO_Init+0x530>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	43db      	mvns	r3, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4013      	ands	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048be:	4a19      	ldr	r2, [pc, #100]	; (8004924 <HAL_GPIO_Init+0x530>)
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048c4:	4b17      	ldr	r3, [pc, #92]	; (8004924 <HAL_GPIO_Init+0x530>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048e8:	4a0e      	ldr	r2, [pc, #56]	; (8004924 <HAL_GPIO_Init+0x530>)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3301      	adds	r3, #1
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	2b0f      	cmp	r3, #15
 80048f8:	f67f adfe 	bls.w	80044f8 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80048fc:	bf00      	nop
 80048fe:	bf00      	nop
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40023800 	.word	0x40023800
 800490c:	40013800 	.word	0x40013800
 8004910:	40020000 	.word	0x40020000
 8004914:	40020400 	.word	0x40020400
 8004918:	40020800 	.word	0x40020800
 800491c:	40020c00 	.word	0x40020c00
 8004920:	40021000 	.word	0x40021000
 8004924:	40013c00 	.word	0x40013c00

08004928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	807b      	strh	r3, [r7, #2]
 8004934:	4613      	mov	r3, r2
 8004936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004938:	887b      	ldrh	r3, [r7, #2]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <HAL_GPIO_WritePin+0x20>
 800493e:	887b      	ldrh	r3, [r7, #2]
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	d004      	beq.n	8004952 <HAL_GPIO_WritePin+0x2a>
 8004948:	f240 119d 	movw	r1, #413	; 0x19d
 800494c:	480e      	ldr	r0, [pc, #56]	; (8004988 <HAL_GPIO_WritePin+0x60>)
 800494e:	f7fd fa8e 	bl	8001e6e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004952:	787b      	ldrb	r3, [r7, #1]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <HAL_GPIO_WritePin+0x40>
 8004958:	787b      	ldrb	r3, [r7, #1]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d004      	beq.n	8004968 <HAL_GPIO_WritePin+0x40>
 800495e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8004962:	4809      	ldr	r0, [pc, #36]	; (8004988 <HAL_GPIO_WritePin+0x60>)
 8004964:	f7fd fa83 	bl	8001e6e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004968:	787b      	ldrb	r3, [r7, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004974:	e003      	b.n	800497e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	041a      	lsls	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	619a      	str	r2, [r3, #24]
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	08011ccc 	.word	0x08011ccc

0800498c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004998:	695a      	ldr	r2, [r3, #20]
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	4013      	ands	r3, r2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d006      	beq.n	80049b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049a2:	4a05      	ldr	r2, [pc, #20]	; (80049b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049a4:	88fb      	ldrh	r3, [r7, #6]
 80049a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fd ff4a 	bl	8002844 <HAL_GPIO_EXTI_Callback>
  }
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40013c00 	.word	0x40013c00

080049bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e1bd      	b.n	8004d4a <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a93      	ldr	r2, [pc, #588]	; (8004c20 <HAL_I2C_Init+0x264>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00e      	beq.n	80049f6 <HAL_I2C_Init+0x3a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a91      	ldr	r2, [pc, #580]	; (8004c24 <HAL_I2C_Init+0x268>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d009      	beq.n	80049f6 <HAL_I2C_Init+0x3a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a90      	ldr	r2, [pc, #576]	; (8004c28 <HAL_I2C_Init+0x26c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d004      	beq.n	80049f6 <HAL_I2C_Init+0x3a>
 80049ec:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80049f0:	488e      	ldr	r0, [pc, #568]	; (8004c2c <HAL_I2C_Init+0x270>)
 80049f2:	f7fd fa3c 	bl	8001e6e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <HAL_I2C_Init+0x4c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	4a8b      	ldr	r2, [pc, #556]	; (8004c30 <HAL_I2C_Init+0x274>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d904      	bls.n	8004a12 <HAL_I2C_Init+0x56>
 8004a08:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004a0c:	4887      	ldr	r0, [pc, #540]	; (8004c2c <HAL_I2C_Init+0x270>)
 8004a0e:	f7fd fa2e 	bl	8001e6e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <HAL_I2C_Init+0x72>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a22:	d004      	beq.n	8004a2e <HAL_I2C_Init+0x72>
 8004a24:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004a28:	4880      	ldr	r0, [pc, #512]	; (8004c2c <HAL_I2C_Init+0x270>)
 8004a2a:	f7fd fa20 	bl	8001e6e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a36:	f023 0303 	bic.w	r3, r3, #3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d004      	beq.n	8004a48 <HAL_I2C_Init+0x8c>
 8004a3e:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004a42:	487a      	ldr	r0, [pc, #488]	; (8004c2c <HAL_I2C_Init+0x270>)
 8004a44:	f7fd fa13 	bl	8001e6e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a50:	d009      	beq.n	8004a66 <HAL_I2C_Init+0xaa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a5a:	d004      	beq.n	8004a66 <HAL_I2C_Init+0xaa>
 8004a5c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004a60:	4872      	ldr	r0, [pc, #456]	; (8004c2c <HAL_I2C_Init+0x270>)
 8004a62:	f7fd fa04 	bl	8001e6e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_I2C_Init+0xc4>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d004      	beq.n	8004a80 <HAL_I2C_Init+0xc4>
 8004a76:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004a7a:	486c      	ldr	r0, [pc, #432]	; (8004c2c <HAL_I2C_Init+0x270>)
 8004a7c:	f7fd f9f7 	bl	8001e6e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <HAL_I2C_Init+0xda>
 8004a8c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004a90:	4866      	ldr	r0, [pc, #408]	; (8004c2c <HAL_I2C_Init+0x270>)
 8004a92:	f7fd f9ec 	bl	8001e6e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d008      	beq.n	8004ab0 <HAL_I2C_Init+0xf4>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	2b40      	cmp	r3, #64	; 0x40
 8004aa4:	d004      	beq.n	8004ab0 <HAL_I2C_Init+0xf4>
 8004aa6:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004aaa:	4860      	ldr	r0, [pc, #384]	; (8004c2c <HAL_I2C_Init+0x270>)
 8004aac:	f7fd f9df 	bl	8001e6e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_I2C_Init+0x10e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d004      	beq.n	8004aca <HAL_I2C_Init+0x10e>
 8004ac0:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004ac4:	4859      	ldr	r0, [pc, #356]	; (8004c2c <HAL_I2C_Init+0x270>)
 8004ac6:	f7fd f9d2 	bl	8001e6e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fd f87c 	bl	8001bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2224      	movs	r2, #36	; 0x24
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b1c:	f002 f92a 	bl	8006d74 <HAL_RCC_GetPCLK1Freq>
 8004b20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	4a43      	ldr	r2, [pc, #268]	; (8004c34 <HAL_I2C_Init+0x278>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d807      	bhi.n	8004b3c <HAL_I2C_Init+0x180>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4a42      	ldr	r2, [pc, #264]	; (8004c38 <HAL_I2C_Init+0x27c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	bf94      	ite	ls
 8004b34:	2301      	movls	r3, #1
 8004b36:	2300      	movhi	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	e006      	b.n	8004b4a <HAL_I2C_Init+0x18e>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a3f      	ldr	r2, [pc, #252]	; (8004c3c <HAL_I2C_Init+0x280>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	bf94      	ite	ls
 8004b44:	2301      	movls	r3, #1
 8004b46:	2300      	movhi	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e0fb      	b.n	8004d4a <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4a3a      	ldr	r2, [pc, #232]	; (8004c40 <HAL_I2C_Init+0x284>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	0c9b      	lsrs	r3, r3, #18
 8004b5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a2c      	ldr	r2, [pc, #176]	; (8004c34 <HAL_I2C_Init+0x278>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d802      	bhi.n	8004b8c <HAL_I2C_Init+0x1d0>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	e009      	b.n	8004ba0 <HAL_I2C_Init+0x1e4>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	4a2b      	ldr	r2, [pc, #172]	; (8004c44 <HAL_I2C_Init+0x288>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	099b      	lsrs	r3, r3, #6
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	491e      	ldr	r1, [pc, #120]	; (8004c34 <HAL_I2C_Init+0x278>)
 8004bbc:	428b      	cmp	r3, r1
 8004bbe:	d819      	bhi.n	8004bf4 <HAL_I2C_Init+0x238>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1e59      	subs	r1, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bce:	1c59      	adds	r1, r3, #1
 8004bd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bd4:	400b      	ands	r3, r1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_I2C_Init+0x234>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1e59      	subs	r1, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004be8:	3301      	adds	r3, #1
 8004bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bee:	e065      	b.n	8004cbc <HAL_I2C_Init+0x300>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	e063      	b.n	8004cbc <HAL_I2C_Init+0x300>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d125      	bne.n	8004c48 <HAL_I2C_Init+0x28c>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1e58      	subs	r0, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	440b      	add	r3, r1
 8004c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e026      	b.n	8004c6e <HAL_I2C_Init+0x2b2>
 8004c20:	40005400 	.word	0x40005400
 8004c24:	40005800 	.word	0x40005800
 8004c28:	40005c00 	.word	0x40005c00
 8004c2c:	08011d08 	.word	0x08011d08
 8004c30:	00061a80 	.word	0x00061a80
 8004c34:	000186a0 	.word	0x000186a0
 8004c38:	001e847f 	.word	0x001e847f
 8004c3c:	003d08ff 	.word	0x003d08ff
 8004c40:	431bde83 	.word	0x431bde83
 8004c44:	10624dd3 	.word	0x10624dd3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	1e58      	subs	r0, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6859      	ldr	r1, [r3, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	0099      	lsls	r1, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_I2C_Init+0x2ba>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e022      	b.n	8004cbc <HAL_I2C_Init+0x300>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10e      	bne.n	8004c9c <HAL_I2C_Init+0x2e0>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1e58      	subs	r0, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6859      	ldr	r1, [r3, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	440b      	add	r3, r1
 8004c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c90:	3301      	adds	r3, #1
 8004c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9a:	e00f      	b.n	8004cbc <HAL_I2C_Init+0x300>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1e58      	subs	r0, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6859      	ldr	r1, [r3, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	0099      	lsls	r1, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	6809      	ldr	r1, [r1, #0]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69da      	ldr	r2, [r3, #28]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6911      	ldr	r1, [r2, #16]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68d2      	ldr	r2, [r2, #12]
 8004cf6:	4311      	orrs	r1, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695a      	ldr	r2, [r3, #20]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop

08004d54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d56:	b08f      	sub	sp, #60	; 0x3c
 8004d58:	af0a      	add	r7, sp, #40	; 0x28
 8004d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e118      	b.n	8004f98 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d6e:	d003      	beq.n	8004d78 <HAL_PCD_Init+0x24>
 8004d70:	2187      	movs	r1, #135	; 0x87
 8004d72:	488b      	ldr	r0, [pc, #556]	; (8004fa0 <HAL_PCD_Init+0x24c>)
 8004d74:	f7fd f87b 	bl	8001e6e <assert_failed>

  USBx = hpcd->Instance;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f00b fe72 	bl	8010a7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f005 fa1b 	bl	800a1f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	603b      	str	r3, [r7, #0]
 8004dc2:	687e      	ldr	r6, [r7, #4]
 8004dc4:	466d      	mov	r5, sp
 8004dc6:	f106 0410 	add.w	r4, r6, #16
 8004dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dda:	1d33      	adds	r3, r6, #4
 8004ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dde:	6838      	ldr	r0, [r7, #0]
 8004de0:	f005 f8f2 	bl	8009fc8 <USB_CoreInit>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2202      	movs	r2, #2
 8004dee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e0d0      	b.n	8004f98 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f005 fa09 	bl	800a214 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e02:	2300      	movs	r3, #0
 8004e04:	73fb      	strb	r3, [r7, #15]
 8004e06:	e04a      	b.n	8004e9e <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e08:	7bfa      	ldrb	r2, [r7, #15]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	333d      	adds	r3, #61	; 0x3d
 8004e18:	2201      	movs	r2, #1
 8004e1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e1c:	7bfa      	ldrb	r2, [r7, #15]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	333c      	adds	r3, #60	; 0x3c
 8004e2c:	7bfa      	ldrb	r2, [r7, #15]
 8004e2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e30:	7bfa      	ldrb	r2, [r7, #15]
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	b298      	uxth	r0, r3
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	3344      	adds	r3, #68	; 0x44
 8004e44:	4602      	mov	r2, r0
 8004e46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e48:	7bfa      	ldrb	r2, [r7, #15]
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	3340      	adds	r3, #64	; 0x40
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e5c:	7bfa      	ldrb	r2, [r7, #15]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	3348      	adds	r3, #72	; 0x48
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e70:	7bfa      	ldrb	r2, [r7, #15]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	334c      	adds	r3, #76	; 0x4c
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e84:	7bfa      	ldrb	r2, [r7, #15]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	3354      	adds	r3, #84	; 0x54
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
 8004e9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d3af      	bcc.n	8004e08 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	73fb      	strb	r3, [r7, #15]
 8004eac:	e044      	b.n	8004f38 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004eae:	7bfa      	ldrb	r2, [r7, #15]
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ec4:	7bfa      	ldrb	r2, [r7, #15]
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004ed6:	7bfa      	ldrb	r2, [r7, #15]
 8004ed8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004eda:	7bfa      	ldrb	r2, [r7, #15]
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004eec:	2200      	movs	r2, #0
 8004eee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ef0:	7bfa      	ldrb	r2, [r7, #15]
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f06:	7bfa      	ldrb	r2, [r7, #15]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f1c:	7bfa      	ldrb	r2, [r7, #15]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	3301      	adds	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
 8004f38:	7bfa      	ldrb	r2, [r7, #15]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d3b5      	bcc.n	8004eae <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	687e      	ldr	r6, [r7, #4]
 8004f4a:	466d      	mov	r5, sp
 8004f4c:	f106 0410 	add.w	r4, r6, #16
 8004f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f60:	1d33      	adds	r3, r6, #4
 8004f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f64:	6838      	ldr	r0, [r7, #0]
 8004f66:	f005 f9a1 	bl	800a2ac <USB_DevInit>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e00d      	b.n	8004f98 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f006 faf0 	bl	800b576 <USB_DevDisconnect>

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa0:	08011d40 	.word	0x08011d40

08004fa4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_PCD_Start+0x1c>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e020      	b.n	8005002 <HAL_PCD_Start+0x5e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d109      	bne.n	8004fe4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d005      	beq.n	8004fe4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f005 f8f1 	bl	800a1d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f006 fa9e 	bl	800b534 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800500a:	b590      	push	{r4, r7, lr}
 800500c:	b08d      	sub	sp, #52	; 0x34
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f006 fb5c 	bl	800b6de <USB_GetMode>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	f040 848a 	bne.w	8005942 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f006 fac0 	bl	800b5b8 <USB_ReadInterrupts>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 8480 	beq.w	8005940 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	0a1b      	lsrs	r3, r3, #8
 800504a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f006 faad 	bl	800b5b8 <USB_ReadInterrupts>
 800505e:	4603      	mov	r3, r0
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b02      	cmp	r3, #2
 8005066:	d107      	bne.n	8005078 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695a      	ldr	r2, [r3, #20]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f002 0202 	and.w	r2, r2, #2
 8005076:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f006 fa9b 	bl	800b5b8 <USB_ReadInterrupts>
 8005082:	4603      	mov	r3, r0
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b10      	cmp	r3, #16
 800508a:	d161      	bne.n	8005150 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0210 	bic.w	r2, r2, #16
 800509a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	f003 020f 	and.w	r2, r3, #15
 80050a8:	4613      	mov	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	3304      	adds	r3, #4
 80050ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	0c5b      	lsrs	r3, r3, #17
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d124      	bne.n	8005112 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d035      	beq.n	8005140 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	6a38      	ldr	r0, [r7, #32]
 80050e8:	f006 f8d2 	bl	800b290 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050f8:	441a      	add	r2, r3
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	6a1a      	ldr	r2, [r3, #32]
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800510a:	441a      	add	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	621a      	str	r2, [r3, #32]
 8005110:	e016      	b.n	8005140 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	0c5b      	lsrs	r3, r3, #17
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	2b06      	cmp	r3, #6
 800511c:	d110      	bne.n	8005140 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005124:	2208      	movs	r2, #8
 8005126:	4619      	mov	r1, r3
 8005128:	6a38      	ldr	r0, [r7, #32]
 800512a:	f006 f8b1 	bl	800b290 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	6a1a      	ldr	r2, [r3, #32]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800513a:	441a      	add	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0210 	orr.w	r2, r2, #16
 800514e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f006 fa2f 	bl	800b5b8 <USB_ReadInterrupts>
 800515a:	4603      	mov	r3, r0
 800515c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005160:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005164:	f040 80a7 	bne.w	80052b6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f006 fa34 	bl	800b5de <USB_ReadDevAllOutEpInterrupt>
 8005176:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005178:	e099      	b.n	80052ae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 808e 	beq.w	80052a2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	4611      	mov	r1, r2
 8005190:	4618      	mov	r0, r3
 8005192:	f006 fa58 	bl	800b646 <USB_ReadDevOutEPInterrupt>
 8005196:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00c      	beq.n	80051bc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ae:	461a      	mov	r2, r3
 80051b0:	2301      	movs	r3, #1
 80051b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80051b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fec2 	bl	8005f40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00c      	beq.n	80051e0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d2:	461a      	mov	r2, r3
 80051d4:	2308      	movs	r3, #8
 80051d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 ff98 	bl	8006110 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	461a      	mov	r2, r3
 80051f8:	2310      	movs	r3, #16
 80051fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d030      	beq.n	8005268 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520e:	2b80      	cmp	r3, #128	; 0x80
 8005210:	d109      	bne.n	8005226 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005224:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	4413      	add	r3, r2
 8005238:	3304      	adds	r3, #4
 800523a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	78db      	ldrb	r3, [r3, #3]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d108      	bne.n	8005256 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2200      	movs	r2, #0
 8005248:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	b2db      	uxtb	r3, r3
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f00b fd0f 	bl	8010c74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005262:	461a      	mov	r2, r3
 8005264:	2302      	movs	r3, #2
 8005266:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d008      	beq.n	8005284 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	461a      	mov	r2, r3
 8005280:	2320      	movs	r3, #32
 8005282:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	461a      	mov	r2, r3
 800529c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	3301      	adds	r3, #1
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f47f af62 	bne.w	800517a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f006 f97c 	bl	800b5b8 <USB_ReadInterrupts>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052ca:	f040 80db 	bne.w	8005484 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f006 f99d 	bl	800b612 <USB_ReadDevAllInEpInterrupt>
 80052d8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80052de:	e0cd      	b.n	800547c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 80c2 	beq.w	8005470 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	4611      	mov	r1, r2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f006 f9c3 	bl	800b682 <USB_ReadDevInEPInterrupt>
 80052fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d057      	beq.n	80053b8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	2201      	movs	r2, #1
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	43db      	mvns	r3, r3
 8005322:	69f9      	ldr	r1, [r7, #28]
 8005324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005328:	4013      	ands	r3, r2
 800532a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	461a      	mov	r2, r3
 800533a:	2301      	movs	r3, #1
 800533c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d132      	bne.n	80053ac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534a:	4613      	mov	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	334c      	adds	r3, #76	; 0x4c
 8005356:	6819      	ldr	r1, [r3, #0]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535c:	4613      	mov	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4403      	add	r3, r0
 8005366:	3348      	adds	r3, #72	; 0x48
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4419      	add	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4403      	add	r3, r0
 800537a:	334c      	adds	r3, #76	; 0x4c
 800537c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	2b00      	cmp	r3, #0
 8005382:	d113      	bne.n	80053ac <HAL_PCD_IRQHandler+0x3a2>
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	3354      	adds	r3, #84	; 0x54
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d108      	bne.n	80053ac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053a4:	461a      	mov	r2, r3
 80053a6:	2101      	movs	r1, #1
 80053a8:	f006 f9ca 	bl	800b740 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f00b fbe3 	bl	8010b7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ce:	461a      	mov	r2, r3
 80053d0:	2308      	movs	r3, #8
 80053d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	461a      	mov	r2, r3
 80053ec:	2310      	movs	r3, #16
 80053ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d008      	beq.n	800540c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005406:	461a      	mov	r2, r3
 8005408:	2340      	movs	r3, #64	; 0x40
 800540a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d023      	beq.n	800545e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005416:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005418:	6a38      	ldr	r0, [r7, #32]
 800541a:	f005 f8ab 	bl	800a574 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800541e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005420:	4613      	mov	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	3338      	adds	r3, #56	; 0x38
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	4413      	add	r3, r2
 800542e:	3304      	adds	r3, #4
 8005430:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	78db      	ldrb	r3, [r3, #3]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d108      	bne.n	800544c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2200      	movs	r2, #0
 800543e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	b2db      	uxtb	r3, r3
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f00b fc26 	bl	8010c98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005458:	461a      	mov	r2, r3
 800545a:	2302      	movs	r3, #2
 800545c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fcdb 	bl	8005e26 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	3301      	adds	r3, #1
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	2b00      	cmp	r3, #0
 8005480:	f47f af2e 	bne.w	80052e0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f006 f895 	bl	800b5b8 <USB_ReadInterrupts>
 800548e:	4603      	mov	r3, r0
 8005490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005498:	d122      	bne.n	80054e0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	69fa      	ldr	r2, [r7, #28]
 80054a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d108      	bne.n	80054ca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054c0:	2100      	movs	r1, #0
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fec2 	bl	800624c <HAL_PCDEx_LPM_Callback>
 80054c8:	e002      	b.n	80054d0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f00b fbc4 	bl	8010c58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695a      	ldr	r2, [r3, #20]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80054de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f006 f867 	bl	800b5b8 <USB_ReadInterrupts>
 80054ea:	4603      	mov	r3, r0
 80054ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f4:	d112      	bne.n	800551c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	d102      	bne.n	800550c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f00b fb80 	bl	8010c0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695a      	ldr	r2, [r3, #20]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800551a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f006 f849 	bl	800b5b8 <USB_ReadInterrupts>
 8005526:	4603      	mov	r3, r0
 8005528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800552c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005530:	f040 80b7 	bne.w	80056a2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2110      	movs	r1, #16
 800554e:	4618      	mov	r0, r3
 8005550:	f005 f810 	bl	800a574 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005554:	2300      	movs	r3, #0
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005558:	e046      	b.n	80055e8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005566:	461a      	mov	r2, r3
 8005568:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800556c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005588:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800558c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	461a      	mov	r2, r3
 800559c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	3301      	adds	r3, #1
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d3b3      	bcc.n	800555a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005600:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005604:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	2b00      	cmp	r3, #0
 800560c:	d016      	beq.n	800563c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800561e:	f043 030b 	orr.w	r3, r3, #11
 8005622:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005634:	f043 030b 	orr.w	r3, r3, #11
 8005638:	6453      	str	r3, [r2, #68]	; 0x44
 800563a:	e015      	b.n	8005668 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800564a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800564e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005652:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005662:	f043 030b 	orr.w	r3, r3, #11
 8005666:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005676:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800567a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800568c:	461a      	mov	r2, r3
 800568e:	f006 f857 	bl	800b740 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80056a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f005 ff86 	bl	800b5b8 <USB_ReadInterrupts>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b6:	d124      	bne.n	8005702 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f006 f81c 	bl	800b6fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f004 ffd1 	bl	800a66e <USB_GetDevSpeed>
 80056cc:	4603      	mov	r3, r0
 80056ce:	461a      	mov	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681c      	ldr	r4, [r3, #0]
 80056d8:	f001 fb40 	bl	8006d5c <HAL_RCC_GetHCLKFreq>
 80056dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	4620      	mov	r0, r4
 80056e8:	f004 fcd0 	bl	800a08c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f00b fa6e 	bl	8010bce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695a      	ldr	r2, [r3, #20]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005700:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f005 ff56 	bl	800b5b8 <USB_ReadInterrupts>
 800570c:	4603      	mov	r3, r0
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b08      	cmp	r3, #8
 8005714:	d10a      	bne.n	800572c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f00b fa4b 	bl	8010bb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695a      	ldr	r2, [r3, #20]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f002 0208 	and.w	r2, r2, #8
 800572a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4618      	mov	r0, r3
 8005732:	f005 ff41 	bl	800b5b8 <USB_ReadInterrupts>
 8005736:	4603      	mov	r3, r0
 8005738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	d122      	bne.n	8005786 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800574c:	2301      	movs	r3, #1
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
 8005750:	e014      	b.n	800577c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005756:	4613      	mov	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d105      	bne.n	8005776 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	b2db      	uxtb	r3, r3
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fb27 	bl	8005dc4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	3301      	adds	r3, #1
 800577a:	627b      	str	r3, [r7, #36]	; 0x24
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005782:	429a      	cmp	r2, r3
 8005784:	d3e5      	bcc.n	8005752 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f005 ff14 	bl	800b5b8 <USB_ReadInterrupts>
 8005790:	4603      	mov	r3, r0
 8005792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800579a:	d13b      	bne.n	8005814 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800579c:	2301      	movs	r3, #1
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
 80057a0:	e02b      	b.n	80057fa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b6:	4613      	mov	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	3340      	adds	r3, #64	; 0x40
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d115      	bne.n	80057f4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80057c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	da12      	bge.n	80057f4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	4613      	mov	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	333f      	adds	r3, #63	; 0x3f
 80057de:	2201      	movs	r2, #1
 80057e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fae8 	bl	8005dc4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	3301      	adds	r3, #1
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005800:	429a      	cmp	r2, r3
 8005802:	d3ce      	bcc.n	80057a2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005812:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f005 fecd 	bl	800b5b8 <USB_ReadInterrupts>
 800581e:	4603      	mov	r3, r0
 8005820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005828:	d155      	bne.n	80058d6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800582a:	2301      	movs	r3, #1
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
 800582e:	e045      	b.n	80058bc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005844:	4613      	mov	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d12e      	bne.n	80058b6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005858:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800585a:	2b00      	cmp	r3, #0
 800585c:	da2b      	bge.n	80058b6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800586a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800586e:	429a      	cmp	r2, r3
 8005870:	d121      	bne.n	80058b6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005876:	4613      	mov	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005884:	2201      	movs	r2, #1
 8005886:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058b2:	6053      	str	r3, [r2, #4]
            break;
 80058b4:	e007      	b.n	80058c6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	3301      	adds	r3, #1
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d3b4      	bcc.n	8005830 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695a      	ldr	r2, [r3, #20]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80058d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f005 fe6c 	bl	800b5b8 <USB_ReadInterrupts>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d10a      	bne.n	8005902 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f00b f9e5 	bl	8010cbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005900:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f005 fe56 	bl	800b5b8 <USB_ReadInterrupts>
 800590c:	4603      	mov	r3, r0
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b04      	cmp	r3, #4
 8005914:	d115      	bne.n	8005942 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f00b f9d5 	bl	8010cd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6859      	ldr	r1, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
 800593e:	e000      	b.n	8005942 <HAL_PCD_IRQHandler+0x938>
      return;
 8005940:	bf00      	nop
    }
  }
}
 8005942:	3734      	adds	r7, #52	; 0x34
 8005944:	46bd      	mov	sp, r7
 8005946:	bd90      	pop	{r4, r7, pc}

08005948 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_PCD_SetAddress+0x1a>
 800595e:	2302      	movs	r3, #2
 8005960:	e013      	b.n	800598a <HAL_PCD_SetAddress+0x42>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	78fa      	ldrb	r2, [r7, #3]
 800596e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	4611      	mov	r1, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f005 fdb4 	bl	800b4e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	4608      	mov	r0, r1
 800599c:	4611      	mov	r1, r2
 800599e:	461a      	mov	r2, r3
 80059a0:	4603      	mov	r3, r0
 80059a2:	70fb      	strb	r3, [r7, #3]
 80059a4:	460b      	mov	r3, r1
 80059a6:	803b      	strh	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	da0f      	bge.n	80059d8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	4613      	mov	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	3338      	adds	r3, #56	; 0x38
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	4413      	add	r3, r2
 80059cc:	3304      	adds	r3, #4
 80059ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	705a      	strb	r2, [r3, #1]
 80059d6:	e00f      	b.n	80059f8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	f003 020f 	and.w	r2, r3, #15
 80059de:	4613      	mov	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	3304      	adds	r3, #4
 80059f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a04:	883a      	ldrh	r2, [r7, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	78ba      	ldrb	r2, [r7, #2]
 8005a0e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a22:	78bb      	ldrb	r3, [r7, #2]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d102      	bne.n	8005a2e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_PCD_EP_Open+0xaa>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e00e      	b.n	8005a5a <HAL_PCD_EP_Open+0xc8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68f9      	ldr	r1, [r7, #12]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f004 fe34 	bl	800a6b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005a58:	7afb      	ldrb	r3, [r7, #11]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	da0f      	bge.n	8005a96 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	f003 020f 	and.w	r2, r3, #15
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	3338      	adds	r3, #56	; 0x38
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	705a      	strb	r2, [r3, #1]
 8005a94:	e00f      	b.n	8005ab6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	f003 020f 	and.w	r2, r3, #15
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4413      	add	r3, r2
 8005aac:	3304      	adds	r3, #4
 8005aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_PCD_EP_Close+0x6e>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e00e      	b.n	8005aee <HAL_PCD_EP_Close+0x8c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68f9      	ldr	r1, [r7, #12]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f004 fe72 	bl	800a7c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b086      	sub	sp, #24
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	460b      	mov	r3, r1
 8005b04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b06:	7afb      	ldrb	r3, [r7, #11]
 8005b08:	f003 020f 	and.w	r2, r3, #15
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2200      	movs	r2, #0
 8005b36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b38:	7afb      	ldrb	r3, [r7, #11]
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d102      	bne.n	8005b52 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b52:	7afb      	ldrb	r3, [r7, #11]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d109      	bne.n	8005b70 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	6979      	ldr	r1, [r7, #20]
 8005b6a:	f005 f951 	bl	800ae10 <USB_EP0StartXfer>
 8005b6e:	e008      	b.n	8005b82 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6818      	ldr	r0, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	f004 feff 	bl	800a980 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	f003 020f 	and.w	r2, r3, #15
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	440b      	add	r3, r1
 8005baa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005bae:	681b      	ldr	r3, [r3, #0]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bcc:	7afb      	ldrb	r3, [r7, #11]
 8005bce:	f003 020f 	and.w	r2, r3, #15
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	3338      	adds	r3, #56	; 0x38
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	3304      	adds	r3, #4
 8005be2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bfc:	7afb      	ldrb	r3, [r7, #11]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d102      	bne.n	8005c16 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c16:	7afb      	ldrb	r3, [r7, #11]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d109      	bne.n	8005c34 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6979      	ldr	r1, [r7, #20]
 8005c2e:	f005 f8ef 	bl	800ae10 <USB_EP0StartXfer>
 8005c32:	e008      	b.n	8005c46 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	6979      	ldr	r1, [r7, #20]
 8005c42:	f004 fe9d 	bl	800a980 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	f003 020f 	and.w	r2, r3, #15
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d901      	bls.n	8005c6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e050      	b.n	8005d10 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	da0f      	bge.n	8005c96 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c76:	78fb      	ldrb	r3, [r7, #3]
 8005c78:	f003 020f 	and.w	r2, r3, #15
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	3338      	adds	r3, #56	; 0x38
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4413      	add	r3, r2
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	705a      	strb	r2, [r3, #1]
 8005c94:	e00d      	b.n	8005cb2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3304      	adds	r3, #4
 8005caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_PCD_EP_SetStall+0x82>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e01e      	b.n	8005d10 <HAL_PCD_EP_SetStall+0xc0>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f005 fb2d 	bl	800b340 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6818      	ldr	r0, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	b2d9      	uxtb	r1, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d00:	461a      	mov	r2, r3
 8005d02:	f005 fd1d 	bl	800b740 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	f003 020f 	and.w	r2, r3, #15
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d901      	bls.n	8005d36 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e042      	b.n	8005dbc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da0f      	bge.n	8005d5e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	f003 020f 	and.w	r2, r3, #15
 8005d44:	4613      	mov	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	3338      	adds	r3, #56	; 0x38
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	4413      	add	r3, r2
 8005d52:	3304      	adds	r3, #4
 8005d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	705a      	strb	r2, [r3, #1]
 8005d5c:	e00f      	b.n	8005d7e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	f003 020f 	and.w	r2, r3, #15
 8005d64:	4613      	mov	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	4413      	add	r3, r2
 8005d74:	3304      	adds	r3, #4
 8005d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_PCD_EP_ClrStall+0x86>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e00e      	b.n	8005dbc <HAL_PCD_EP_ClrStall+0xa4>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68f9      	ldr	r1, [r7, #12]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f005 fb35 	bl	800b41c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da0c      	bge.n	8005df2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	f003 020f 	and.w	r2, r3, #15
 8005dde:	4613      	mov	r3, r2
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	4413      	add	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	3338      	adds	r3, #56	; 0x38
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4413      	add	r3, r2
 8005dec:	3304      	adds	r3, #4
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e00c      	b.n	8005e0c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	f003 020f 	and.w	r2, r3, #15
 8005df8:	4613      	mov	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4413      	add	r3, r2
 8005e08:	3304      	adds	r3, #4
 8005e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68f9      	ldr	r1, [r7, #12]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f005 f954 	bl	800b0c0 <USB_EPStopXfer>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005e1c:	7afb      	ldrb	r3, [r7, #11]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b08a      	sub	sp, #40	; 0x28
 8005e2a:	af02      	add	r7, sp, #8
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	3338      	adds	r3, #56	; 0x38
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	4413      	add	r3, r2
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a1a      	ldr	r2, [r3, #32]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d901      	bls.n	8005e5e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e06c      	b.n	8005f38 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d902      	bls.n	8005e7a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	3303      	adds	r3, #3
 8005e7e:	089b      	lsrs	r3, r3, #2
 8005e80:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e82:	e02b      	b.n	8005edc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d902      	bls.n	8005ea0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	3303      	adds	r3, #3
 8005ea4:	089b      	lsrs	r3, r3, #2
 8005ea6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6919      	ldr	r1, [r3, #16]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	6978      	ldr	r0, [r7, #20]
 8005ec0:	f005 f9a8 	bl	800b214 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	441a      	add	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a1a      	ldr	r2, [r3, #32]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	441a      	add	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d809      	bhi.n	8005f06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1a      	ldr	r2, [r3, #32]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d203      	bcs.n	8005f06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1be      	bne.n	8005e84 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d811      	bhi.n	8005f36 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	2201      	movs	r2, #1
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	43db      	mvns	r3, r3
 8005f2c:	6939      	ldr	r1, [r7, #16]
 8005f2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f32:	4013      	ands	r3, r2
 8005f34:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3720      	adds	r7, #32
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	333c      	adds	r3, #60	; 0x3c
 8005f58:	3304      	adds	r3, #4
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d17b      	bne.n	800606e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f003 0308 	and.w	r3, r3, #8
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d015      	beq.n	8005fac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4a61      	ldr	r2, [pc, #388]	; (8006108 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	f240 80b9 	bls.w	80060fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 80b3 	beq.w	80060fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa8:	6093      	str	r3, [r2, #8]
 8005faa:	e0a7      	b.n	80060fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	2320      	movs	r3, #32
 8005fc6:	6093      	str	r3, [r2, #8]
 8005fc8:	e098      	b.n	80060fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f040 8093 	bne.w	80060fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	4a4b      	ldr	r2, [pc, #300]	; (8006108 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d90f      	bls.n	8005ffe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffa:	6093      	str	r3, [r2, #8]
 8005ffc:	e07e      	b.n	80060fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	4613      	mov	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	4413      	add	r3, r2
 8006010:	3304      	adds	r3, #4
 8006012:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	0159      	lsls	r1, r3, #5
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	440b      	add	r3, r1
 8006020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800602a:	1ad2      	subs	r2, r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d114      	bne.n	8006060 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006048:	461a      	mov	r2, r3
 800604a:	2101      	movs	r1, #1
 800604c:	f005 fb78 	bl	800b740 <USB_EP0_OutStart>
 8006050:	e006      	b.n	8006060 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	441a      	add	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f00a fd6e 	bl	8010b48 <HAL_PCD_DataOutStageCallback>
 800606c:	e046      	b.n	80060fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	4a26      	ldr	r2, [pc, #152]	; (800610c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d124      	bne.n	80060c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	461a      	mov	r2, r3
 800608e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006092:	6093      	str	r3, [r2, #8]
 8006094:	e032      	b.n	80060fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ac:	461a      	mov	r2, r3
 80060ae:	2320      	movs	r3, #32
 80060b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f00a fd45 	bl	8010b48 <HAL_PCD_DataOutStageCallback>
 80060be:	e01d      	b.n	80060fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d114      	bne.n	80060f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	4613      	mov	r3, r2
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d108      	bne.n	80060f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060e8:	461a      	mov	r2, r3
 80060ea:	2100      	movs	r1, #0
 80060ec:	f005 fb28 	bl	800b740 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f00a fd26 	bl	8010b48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3720      	adds	r7, #32
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	4f54300a 	.word	0x4f54300a
 800610c:	4f54310a 	.word	0x4f54310a

08006110 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	333c      	adds	r3, #60	; 0x3c
 8006128:	3304      	adds	r3, #4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4a15      	ldr	r2, [pc, #84]	; (8006198 <PCD_EP_OutSetupPacket_int+0x88>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d90e      	bls.n	8006164 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800614c:	2b00      	cmp	r3, #0
 800614e:	d009      	beq.n	8006164 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615c:	461a      	mov	r2, r3
 800615e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006162:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f00a fcdd 	bl	8010b24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4a0a      	ldr	r2, [pc, #40]	; (8006198 <PCD_EP_OutSetupPacket_int+0x88>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d90c      	bls.n	800618c <PCD_EP_OutSetupPacket_int+0x7c>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d108      	bne.n	800618c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006184:	461a      	mov	r2, r3
 8006186:	2101      	movs	r1, #1
 8006188:	f005 fada 	bl	800b740 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	4f54300a 	.word	0x4f54300a

0800619c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
 80061a8:	4613      	mov	r3, r2
 80061aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d107      	bne.n	80061ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80061ba:	883b      	ldrh	r3, [r7, #0]
 80061bc:	0419      	lsls	r1, r3, #16
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	629a      	str	r2, [r3, #40]	; 0x28
 80061c8:	e028      	b.n	800621c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d0:	0c1b      	lsrs	r3, r3, #16
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	4413      	add	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061d8:	2300      	movs	r3, #0
 80061da:	73fb      	strb	r3, [r7, #15]
 80061dc:	e00d      	b.n	80061fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	3340      	adds	r3, #64	; 0x40
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	0c1b      	lsrs	r3, r3, #16
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	4413      	add	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	3301      	adds	r3, #1
 80061f8:	73fb      	strb	r3, [r7, #15]
 80061fa:	7bfa      	ldrb	r2, [r7, #15]
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	3b01      	subs	r3, #1
 8006200:	429a      	cmp	r2, r3
 8006202:	d3ec      	bcc.n	80061de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006204:	883b      	ldrh	r3, [r7, #0]
 8006206:	0418      	lsls	r0, r3, #16
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6819      	ldr	r1, [r3, #0]
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	3b01      	subs	r3, #1
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	4302      	orrs	r2, r0
 8006214:	3340      	adds	r3, #64	; 0x40
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	460b      	mov	r3, r1
 8006234:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	887a      	ldrh	r2, [r7, #2]
 800623c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e314      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b0f      	cmp	r3, #15
 800627c:	d903      	bls.n	8006286 <HAL_RCC_OscConfig+0x22>
 800627e:	21e6      	movs	r1, #230	; 0xe6
 8006280:	4897      	ldr	r0, [pc, #604]	; (80064e0 <HAL_RCC_OscConfig+0x27c>)
 8006282:	f7fb fdf4 	bl	8001e6e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8088 	beq.w	80063a4 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00d      	beq.n	80062b8 <HAL_RCC_OscConfig+0x54>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a4:	d008      	beq.n	80062b8 <HAL_RCC_OscConfig+0x54>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ae:	d003      	beq.n	80062b8 <HAL_RCC_OscConfig+0x54>
 80062b0:	21eb      	movs	r1, #235	; 0xeb
 80062b2:	488b      	ldr	r0, [pc, #556]	; (80064e0 <HAL_RCC_OscConfig+0x27c>)
 80062b4:	f7fb fddb 	bl	8001e6e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062b8:	4b8a      	ldr	r3, [pc, #552]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 030c 	and.w	r3, r3, #12
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d00c      	beq.n	80062de <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062c4:	4b87      	ldr	r3, [pc, #540]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d112      	bne.n	80062f6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062d0:	4b84      	ldr	r3, [pc, #528]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062dc:	d10b      	bne.n	80062f6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062de:	4b81      	ldr	r3, [pc, #516]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d05b      	beq.n	80063a2 <HAL_RCC_OscConfig+0x13e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d157      	bne.n	80063a2 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e2d4      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fe:	d106      	bne.n	800630e <HAL_RCC_OscConfig+0xaa>
 8006300:	4b78      	ldr	r3, [pc, #480]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a77      	ldr	r2, [pc, #476]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	e01d      	b.n	800634a <HAL_RCC_OscConfig+0xe6>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006316:	d10c      	bne.n	8006332 <HAL_RCC_OscConfig+0xce>
 8006318:	4b72      	ldr	r3, [pc, #456]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a71      	ldr	r2, [pc, #452]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 800631e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	4b6f      	ldr	r3, [pc, #444]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a6e      	ldr	r2, [pc, #440]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 800632a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	e00b      	b.n	800634a <HAL_RCC_OscConfig+0xe6>
 8006332:	4b6c      	ldr	r3, [pc, #432]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a6b      	ldr	r2, [pc, #428]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	4b69      	ldr	r3, [pc, #420]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a68      	ldr	r2, [pc, #416]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006348:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d013      	beq.n	800637a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006352:	f7fc fdf9 	bl	8002f48 <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800635a:	f7fc fdf5 	bl	8002f48 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b64      	cmp	r3, #100	; 0x64
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e299      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636c:	4b5d      	ldr	r3, [pc, #372]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f0      	beq.n	800635a <HAL_RCC_OscConfig+0xf6>
 8006378:	e014      	b.n	80063a4 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637a:	f7fc fde5 	bl	8002f48 <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006380:	e008      	b.n	8006394 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006382:	f7fc fde1 	bl	8002f48 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b64      	cmp	r3, #100	; 0x64
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e285      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006394:	4b53      	ldr	r3, [pc, #332]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f0      	bne.n	8006382 <HAL_RCC_OscConfig+0x11e>
 80063a0:	e000      	b.n	80063a4 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d079      	beq.n	80064a4 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d008      	beq.n	80063ca <HAL_RCC_OscConfig+0x166>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d004      	beq.n	80063ca <HAL_RCC_OscConfig+0x166>
 80063c0:	f240 111d 	movw	r1, #285	; 0x11d
 80063c4:	4846      	ldr	r0, [pc, #280]	; (80064e0 <HAL_RCC_OscConfig+0x27c>)
 80063c6:	f7fb fd52 	bl	8001e6e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b1f      	cmp	r3, #31
 80063d0:	d904      	bls.n	80063dc <HAL_RCC_OscConfig+0x178>
 80063d2:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80063d6:	4842      	ldr	r0, [pc, #264]	; (80064e0 <HAL_RCC_OscConfig+0x27c>)
 80063d8:	f7fb fd49 	bl	8001e6e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063dc:	4b41      	ldr	r3, [pc, #260]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 030c 	and.w	r3, r3, #12
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063e8:	4b3e      	ldr	r3, [pc, #248]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d11c      	bne.n	800642e <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063f4:	4b3b      	ldr	r3, [pc, #236]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d116      	bne.n	800642e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006400:	4b38      	ldr	r3, [pc, #224]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <HAL_RCC_OscConfig+0x1b4>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d001      	beq.n	8006418 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e243      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006418:	4b32      	ldr	r3, [pc, #200]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	492f      	ldr	r1, [pc, #188]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006428:	4313      	orrs	r3, r2
 800642a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800642c:	e03a      	b.n	80064a4 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d020      	beq.n	8006478 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006436:	4b2c      	ldr	r3, [pc, #176]	; (80064e8 <HAL_RCC_OscConfig+0x284>)
 8006438:	2201      	movs	r2, #1
 800643a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fc fd84 	bl	8002f48 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006444:	f7fc fd80 	bl	8002f48 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e224      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006456:	4b23      	ldr	r3, [pc, #140]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0f0      	beq.n	8006444 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006462:	4b20      	ldr	r3, [pc, #128]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	491c      	ldr	r1, [pc, #112]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 8006472:	4313      	orrs	r3, r2
 8006474:	600b      	str	r3, [r1, #0]
 8006476:	e015      	b.n	80064a4 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006478:	4b1b      	ldr	r3, [pc, #108]	; (80064e8 <HAL_RCC_OscConfig+0x284>)
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647e:	f7fc fd63 	bl	8002f48 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006486:	f7fc fd5f 	bl	8002f48 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e203      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006498:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <HAL_RCC_OscConfig+0x280>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f0      	bne.n	8006486 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d045      	beq.n	800653c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d008      	beq.n	80064ca <HAL_RCC_OscConfig+0x266>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d004      	beq.n	80064ca <HAL_RCC_OscConfig+0x266>
 80064c0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80064c4:	4806      	ldr	r0, [pc, #24]	; (80064e0 <HAL_RCC_OscConfig+0x27c>)
 80064c6:	f7fb fcd2 	bl	8001e6e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d01e      	beq.n	8006510 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064d2:	4b06      	ldr	r3, [pc, #24]	; (80064ec <HAL_RCC_OscConfig+0x288>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d8:	f7fc fd36 	bl	8002f48 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064de:	e010      	b.n	8006502 <HAL_RCC_OscConfig+0x29e>
 80064e0:	08011d78 	.word	0x08011d78
 80064e4:	40023800 	.word	0x40023800
 80064e8:	42470000 	.word	0x42470000
 80064ec:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064f0:	f7fc fd2a 	bl	8002f48 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e1ce      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006502:	4b5e      	ldr	r3, [pc, #376]	; (800667c <HAL_RCC_OscConfig+0x418>)
 8006504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0f0      	beq.n	80064f0 <HAL_RCC_OscConfig+0x28c>
 800650e:	e015      	b.n	800653c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006510:	4b5b      	ldr	r3, [pc, #364]	; (8006680 <HAL_RCC_OscConfig+0x41c>)
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006516:	f7fc fd17 	bl	8002f48 <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800651e:	f7fc fd13 	bl	8002f48 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e1b7      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006530:	4b52      	ldr	r3, [pc, #328]	; (800667c <HAL_RCC_OscConfig+0x418>)
 8006532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f0      	bne.n	800651e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80b0 	beq.w	80066aa <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800654a:	2300      	movs	r3, #0
 800654c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00c      	beq.n	8006570 <HAL_RCC_OscConfig+0x30c>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d008      	beq.n	8006570 <HAL_RCC_OscConfig+0x30c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	2b05      	cmp	r3, #5
 8006564:	d004      	beq.n	8006570 <HAL_RCC_OscConfig+0x30c>
 8006566:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800656a:	4846      	ldr	r0, [pc, #280]	; (8006684 <HAL_RCC_OscConfig+0x420>)
 800656c:	f7fb fc7f 	bl	8001e6e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006570:	4b42      	ldr	r3, [pc, #264]	; (800667c <HAL_RCC_OscConfig+0x418>)
 8006572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10f      	bne.n	800659c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800657c:	2300      	movs	r3, #0
 800657e:	60bb      	str	r3, [r7, #8]
 8006580:	4b3e      	ldr	r3, [pc, #248]	; (800667c <HAL_RCC_OscConfig+0x418>)
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	4a3d      	ldr	r2, [pc, #244]	; (800667c <HAL_RCC_OscConfig+0x418>)
 8006586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658a:	6413      	str	r3, [r2, #64]	; 0x40
 800658c:	4b3b      	ldr	r3, [pc, #236]	; (800667c <HAL_RCC_OscConfig+0x418>)
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006598:	2301      	movs	r3, #1
 800659a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659c:	4b3a      	ldr	r3, [pc, #232]	; (8006688 <HAL_RCC_OscConfig+0x424>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d118      	bne.n	80065da <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065a8:	4b37      	ldr	r3, [pc, #220]	; (8006688 <HAL_RCC_OscConfig+0x424>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a36      	ldr	r2, [pc, #216]	; (8006688 <HAL_RCC_OscConfig+0x424>)
 80065ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065b4:	f7fc fcc8 	bl	8002f48 <HAL_GetTick>
 80065b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065bc:	f7fc fcc4 	bl	8002f48 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e168      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ce:	4b2e      	ldr	r3, [pc, #184]	; (8006688 <HAL_RCC_OscConfig+0x424>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0f0      	beq.n	80065bc <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d106      	bne.n	80065f0 <HAL_RCC_OscConfig+0x38c>
 80065e2:	4b26      	ldr	r3, [pc, #152]	; (800667c <HAL_RCC_OscConfig+0x418>)
 80065e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e6:	4a25      	ldr	r2, [pc, #148]	; (800667c <HAL_RCC_OscConfig+0x418>)
 80065e8:	f043 0301 	orr.w	r3, r3, #1
 80065ec:	6713      	str	r3, [r2, #112]	; 0x70
 80065ee:	e01c      	b.n	800662a <HAL_RCC_OscConfig+0x3c6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b05      	cmp	r3, #5
 80065f6:	d10c      	bne.n	8006612 <HAL_RCC_OscConfig+0x3ae>
 80065f8:	4b20      	ldr	r3, [pc, #128]	; (800667c <HAL_RCC_OscConfig+0x418>)
 80065fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fc:	4a1f      	ldr	r2, [pc, #124]	; (800667c <HAL_RCC_OscConfig+0x418>)
 80065fe:	f043 0304 	orr.w	r3, r3, #4
 8006602:	6713      	str	r3, [r2, #112]	; 0x70
 8006604:	4b1d      	ldr	r3, [pc, #116]	; (800667c <HAL_RCC_OscConfig+0x418>)
 8006606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006608:	4a1c      	ldr	r2, [pc, #112]	; (800667c <HAL_RCC_OscConfig+0x418>)
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	6713      	str	r3, [r2, #112]	; 0x70
 8006610:	e00b      	b.n	800662a <HAL_RCC_OscConfig+0x3c6>
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <HAL_RCC_OscConfig+0x418>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	4a19      	ldr	r2, [pc, #100]	; (800667c <HAL_RCC_OscConfig+0x418>)
 8006618:	f023 0301 	bic.w	r3, r3, #1
 800661c:	6713      	str	r3, [r2, #112]	; 0x70
 800661e:	4b17      	ldr	r3, [pc, #92]	; (800667c <HAL_RCC_OscConfig+0x418>)
 8006620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006622:	4a16      	ldr	r2, [pc, #88]	; (800667c <HAL_RCC_OscConfig+0x418>)
 8006624:	f023 0304 	bic.w	r3, r3, #4
 8006628:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d015      	beq.n	800665e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006632:	f7fc fc89 	bl	8002f48 <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006638:	e00a      	b.n	8006650 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800663a:	f7fc fc85 	bl	8002f48 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f241 3288 	movw	r2, #5000	; 0x1388
 8006648:	4293      	cmp	r3, r2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e127      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006650:	4b0a      	ldr	r3, [pc, #40]	; (800667c <HAL_RCC_OscConfig+0x418>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0ee      	beq.n	800663a <HAL_RCC_OscConfig+0x3d6>
 800665c:	e01c      	b.n	8006698 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800665e:	f7fc fc73 	bl	8002f48 <HAL_GetTick>
 8006662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006664:	e012      	b.n	800668c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006666:	f7fc fc6f 	bl	8002f48 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	f241 3288 	movw	r2, #5000	; 0x1388
 8006674:	4293      	cmp	r3, r2
 8006676:	d909      	bls.n	800668c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e111      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
 800667c:	40023800 	.word	0x40023800
 8006680:	42470e80 	.word	0x42470e80
 8006684:	08011d78 	.word	0x08011d78
 8006688:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800668c:	4b86      	ldr	r3, [pc, #536]	; (80068a8 <HAL_RCC_OscConfig+0x644>)
 800668e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e6      	bne.n	8006666 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d105      	bne.n	80066aa <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800669e:	4b82      	ldr	r3, [pc, #520]	; (80068a8 <HAL_RCC_OscConfig+0x644>)
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	4a81      	ldr	r2, [pc, #516]	; (80068a8 <HAL_RCC_OscConfig+0x644>)
 80066a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00c      	beq.n	80066cc <HAL_RCC_OscConfig+0x468>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d008      	beq.n	80066cc <HAL_RCC_OscConfig+0x468>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d004      	beq.n	80066cc <HAL_RCC_OscConfig+0x468>
 80066c2:	f240 11cd 	movw	r1, #461	; 0x1cd
 80066c6:	4879      	ldr	r0, [pc, #484]	; (80068ac <HAL_RCC_OscConfig+0x648>)
 80066c8:	f7fb fbd1 	bl	8001e6e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 80e4 	beq.w	800689e <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066d6:	4b74      	ldr	r3, [pc, #464]	; (80068a8 <HAL_RCC_OscConfig+0x644>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 030c 	and.w	r3, r3, #12
 80066de:	2b08      	cmp	r3, #8
 80066e0:	f000 80a5 	beq.w	800682e <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	f040 8089 	bne.w	8006800 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <HAL_RCC_OscConfig+0x4a6>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066fe:	d004      	beq.n	800670a <HAL_RCC_OscConfig+0x4a6>
 8006700:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8006704:	4869      	ldr	r0, [pc, #420]	; (80068ac <HAL_RCC_OscConfig+0x648>)
 8006706:	f7fb fbb2 	bl	8001e6e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	2b3f      	cmp	r3, #63	; 0x3f
 8006710:	d904      	bls.n	800671c <HAL_RCC_OscConfig+0x4b8>
 8006712:	f240 11d7 	movw	r1, #471	; 0x1d7
 8006716:	4865      	ldr	r0, [pc, #404]	; (80068ac <HAL_RCC_OscConfig+0x648>)
 8006718:	f7fb fba9 	bl	8001e6e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	2b31      	cmp	r3, #49	; 0x31
 8006722:	d904      	bls.n	800672e <HAL_RCC_OscConfig+0x4ca>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800672c:	d904      	bls.n	8006738 <HAL_RCC_OscConfig+0x4d4>
 800672e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8006732:	485e      	ldr	r0, [pc, #376]	; (80068ac <HAL_RCC_OscConfig+0x648>)
 8006734:	f7fb fb9b 	bl	8001e6e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	2b02      	cmp	r3, #2
 800673e:	d010      	beq.n	8006762 <HAL_RCC_OscConfig+0x4fe>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	2b04      	cmp	r3, #4
 8006746:	d00c      	beq.n	8006762 <HAL_RCC_OscConfig+0x4fe>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	2b06      	cmp	r3, #6
 800674e:	d008      	beq.n	8006762 <HAL_RCC_OscConfig+0x4fe>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	2b08      	cmp	r3, #8
 8006756:	d004      	beq.n	8006762 <HAL_RCC_OscConfig+0x4fe>
 8006758:	f240 11d9 	movw	r1, #473	; 0x1d9
 800675c:	4853      	ldr	r0, [pc, #332]	; (80068ac <HAL_RCC_OscConfig+0x648>)
 800675e:	f7fb fb86 	bl	8001e6e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006766:	2b01      	cmp	r3, #1
 8006768:	d903      	bls.n	8006772 <HAL_RCC_OscConfig+0x50e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	2b0f      	cmp	r3, #15
 8006770:	d904      	bls.n	800677c <HAL_RCC_OscConfig+0x518>
 8006772:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8006776:	484d      	ldr	r0, [pc, #308]	; (80068ac <HAL_RCC_OscConfig+0x648>)
 8006778:	f7fb fb79 	bl	8001e6e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800677c:	4b4c      	ldr	r3, [pc, #304]	; (80068b0 <HAL_RCC_OscConfig+0x64c>)
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006782:	f7fc fbe1 	bl	8002f48 <HAL_GetTick>
 8006786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006788:	e008      	b.n	800679c <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800678a:	f7fc fbdd 	bl	8002f48 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e081      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679c:	4b42      	ldr	r3, [pc, #264]	; (80068a8 <HAL_RCC_OscConfig+0x644>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1f0      	bne.n	800678a <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	019b      	lsls	r3, r3, #6
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	3b01      	subs	r3, #1
 80067c2:	041b      	lsls	r3, r3, #16
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	061b      	lsls	r3, r3, #24
 80067cc:	4936      	ldr	r1, [pc, #216]	; (80068a8 <HAL_RCC_OscConfig+0x644>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d2:	4b37      	ldr	r3, [pc, #220]	; (80068b0 <HAL_RCC_OscConfig+0x64c>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d8:	f7fc fbb6 	bl	8002f48 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067e0:	f7fc fbb2 	bl	8002f48 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e056      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f2:	4b2d      	ldr	r3, [pc, #180]	; (80068a8 <HAL_RCC_OscConfig+0x644>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f0      	beq.n	80067e0 <HAL_RCC_OscConfig+0x57c>
 80067fe:	e04e      	b.n	800689e <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006800:	4b2b      	ldr	r3, [pc, #172]	; (80068b0 <HAL_RCC_OscConfig+0x64c>)
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006806:	f7fc fb9f 	bl	8002f48 <HAL_GetTick>
 800680a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800680c:	e008      	b.n	8006820 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800680e:	f7fc fb9b 	bl	8002f48 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	2b02      	cmp	r3, #2
 800681a:	d901      	bls.n	8006820 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e03f      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006820:	4b21      	ldr	r3, [pc, #132]	; (80068a8 <HAL_RCC_OscConfig+0x644>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1f0      	bne.n	800680e <HAL_RCC_OscConfig+0x5aa>
 800682c:	e037      	b.n	800689e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d101      	bne.n	800683a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e032      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800683a:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <HAL_RCC_OscConfig+0x644>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d028      	beq.n	800689a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006852:	429a      	cmp	r2, r3
 8006854:	d121      	bne.n	800689a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006860:	429a      	cmp	r2, r3
 8006862:	d11a      	bne.n	800689a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800686a:	4013      	ands	r3, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006870:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006872:	4293      	cmp	r3, r2
 8006874:	d111      	bne.n	800689a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	085b      	lsrs	r3, r3, #1
 8006882:	3b01      	subs	r3, #1
 8006884:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006886:	429a      	cmp	r2, r3
 8006888:	d107      	bne.n	800689a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006896:	429a      	cmp	r2, r3
 8006898:	d001      	beq.n	800689e <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40023800 	.word	0x40023800
 80068ac:	08011d78 	.word	0x08011d78
 80068b0:	42470060 	.word	0x42470060

080068b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e174      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x24>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b0f      	cmp	r3, #15
 80068d6:	d904      	bls.n	80068e2 <HAL_RCC_ClockConfig+0x2e>
 80068d8:	f240 215a 	movw	r1, #602	; 0x25a
 80068dc:	487b      	ldr	r0, [pc, #492]	; (8006acc <HAL_RCC_ClockConfig+0x218>)
 80068de:	f7fb fac6 	bl	8001e6e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d019      	beq.n	800691c <HAL_RCC_ClockConfig+0x68>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d016      	beq.n	800691c <HAL_RCC_ClockConfig+0x68>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d013      	beq.n	800691c <HAL_RCC_ClockConfig+0x68>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d010      	beq.n	800691c <HAL_RCC_ClockConfig+0x68>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d00d      	beq.n	800691c <HAL_RCC_ClockConfig+0x68>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b05      	cmp	r3, #5
 8006904:	d00a      	beq.n	800691c <HAL_RCC_ClockConfig+0x68>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b06      	cmp	r3, #6
 800690a:	d007      	beq.n	800691c <HAL_RCC_ClockConfig+0x68>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b07      	cmp	r3, #7
 8006910:	d004      	beq.n	800691c <HAL_RCC_ClockConfig+0x68>
 8006912:	f240 215b 	movw	r1, #603	; 0x25b
 8006916:	486d      	ldr	r0, [pc, #436]	; (8006acc <HAL_RCC_ClockConfig+0x218>)
 8006918:	f7fb faa9 	bl	8001e6e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800691c:	4b6c      	ldr	r3, [pc, #432]	; (8006ad0 <HAL_RCC_ClockConfig+0x21c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d90c      	bls.n	8006944 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692a:	4b69      	ldr	r3, [pc, #420]	; (8006ad0 <HAL_RCC_ClockConfig+0x21c>)
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006932:	4b67      	ldr	r3, [pc, #412]	; (8006ad0 <HAL_RCC_ClockConfig+0x21c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d001      	beq.n	8006944 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e136      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d049      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800695c:	4b5d      	ldr	r3, [pc, #372]	; (8006ad4 <HAL_RCC_ClockConfig+0x220>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	4a5c      	ldr	r2, [pc, #368]	; (8006ad4 <HAL_RCC_ClockConfig+0x220>)
 8006962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006974:	4b57      	ldr	r3, [pc, #348]	; (8006ad4 <HAL_RCC_ClockConfig+0x220>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	4a56      	ldr	r2, [pc, #344]	; (8006ad4 <HAL_RCC_ClockConfig+0x220>)
 800697a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800697e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d024      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x11e>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	2b80      	cmp	r3, #128	; 0x80
 800698e:	d020      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x11e>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b90      	cmp	r3, #144	; 0x90
 8006996:	d01c      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x11e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	2ba0      	cmp	r3, #160	; 0xa0
 800699e:	d018      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x11e>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2bb0      	cmp	r3, #176	; 0xb0
 80069a6:	d014      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x11e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	2bc0      	cmp	r3, #192	; 0xc0
 80069ae:	d010      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x11e>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2bd0      	cmp	r3, #208	; 0xd0
 80069b6:	d00c      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x11e>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2be0      	cmp	r3, #224	; 0xe0
 80069be:	d008      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x11e>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	2bf0      	cmp	r3, #240	; 0xf0
 80069c6:	d004      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x11e>
 80069c8:	f240 217e 	movw	r1, #638	; 0x27e
 80069cc:	483f      	ldr	r0, [pc, #252]	; (8006acc <HAL_RCC_ClockConfig+0x218>)
 80069ce:	f7fb fa4e 	bl	8001e6e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069d2:	4b40      	ldr	r3, [pc, #256]	; (8006ad4 <HAL_RCC_ClockConfig+0x220>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	493d      	ldr	r1, [pc, #244]	; (8006ad4 <HAL_RCC_ClockConfig+0x220>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d059      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d010      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x166>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d00c      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x166>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d008      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x166>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d004      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x166>
 8006a10:	f240 2185 	movw	r1, #645	; 0x285
 8006a14:	482d      	ldr	r0, [pc, #180]	; (8006acc <HAL_RCC_ClockConfig+0x218>)
 8006a16:	f7fb fa2a 	bl	8001e6e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d107      	bne.n	8006a32 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a22:	4b2c      	ldr	r3, [pc, #176]	; (8006ad4 <HAL_RCC_ClockConfig+0x220>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d119      	bne.n	8006a62 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e0bf      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d003      	beq.n	8006a42 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d107      	bne.n	8006a52 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a42:	4b24      	ldr	r3, [pc, #144]	; (8006ad4 <HAL_RCC_ClockConfig+0x220>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e0af      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a52:	4b20      	ldr	r3, [pc, #128]	; (8006ad4 <HAL_RCC_ClockConfig+0x220>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e0a7      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a62:	4b1c      	ldr	r3, [pc, #112]	; (8006ad4 <HAL_RCC_ClockConfig+0x220>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f023 0203 	bic.w	r2, r3, #3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	4919      	ldr	r1, [pc, #100]	; (8006ad4 <HAL_RCC_ClockConfig+0x220>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a74:	f7fc fa68 	bl	8002f48 <HAL_GetTick>
 8006a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a7a:	e00a      	b.n	8006a92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a7c:	f7fc fa64 	bl	8002f48 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e08f      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a92:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <HAL_RCC_ClockConfig+0x220>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 020c 	and.w	r2, r3, #12
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d1eb      	bne.n	8006a7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006aa4:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <HAL_RCC_ClockConfig+0x21c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d212      	bcs.n	8006ad8 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab2:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <HAL_RCC_ClockConfig+0x21c>)
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <HAL_RCC_ClockConfig+0x21c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d007      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e072      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x2fe>
 8006acc:	08011d78 	.word	0x08011d78
 8006ad0:	40023c00 	.word	0x40023c00
 8006ad4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d025      	beq.n	8006b30 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d018      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x26a>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af4:	d013      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x26a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006afe:	d00e      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x26a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006b08:	d009      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x26a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006b12:	d004      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x26a>
 8006b14:	f240 21c3 	movw	r1, #707	; 0x2c3
 8006b18:	4828      	ldr	r0, [pc, #160]	; (8006bbc <HAL_RCC_ClockConfig+0x308>)
 8006b1a:	f7fb f9a8 	bl	8001e6e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b1e:	4b28      	ldr	r3, [pc, #160]	; (8006bc0 <HAL_RCC_ClockConfig+0x30c>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	4925      	ldr	r1, [pc, #148]	; (8006bc0 <HAL_RCC_ClockConfig+0x30c>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d026      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d018      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x2c2>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4c:	d013      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x2c2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b56:	d00e      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x2c2>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006b60:	d009      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x2c2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006b6a:	d004      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x2c2>
 8006b6c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8006b70:	4812      	ldr	r0, [pc, #72]	; (8006bbc <HAL_RCC_ClockConfig+0x308>)
 8006b72:	f7fb f97c 	bl	8001e6e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b76:	4b12      	ldr	r3, [pc, #72]	; (8006bc0 <HAL_RCC_ClockConfig+0x30c>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	490e      	ldr	r1, [pc, #56]	; (8006bc0 <HAL_RCC_ClockConfig+0x30c>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b8a:	f000 f821 	bl	8006bd0 <HAL_RCC_GetSysClockFreq>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <HAL_RCC_ClockConfig+0x30c>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	091b      	lsrs	r3, r3, #4
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	490a      	ldr	r1, [pc, #40]	; (8006bc4 <HAL_RCC_ClockConfig+0x310>)
 8006b9c:	5ccb      	ldrb	r3, [r1, r3]
 8006b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba2:	4a09      	ldr	r2, [pc, #36]	; (8006bc8 <HAL_RCC_ClockConfig+0x314>)
 8006ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ba6:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <HAL_RCC_ClockConfig+0x318>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fb fd84 	bl	80026b8 <HAL_InitTick>

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	08011d78 	.word	0x08011d78
 8006bc0:	40023800 	.word	0x40023800
 8006bc4:	080140ec 	.word	0x080140ec
 8006bc8:	2000008c 	.word	0x2000008c
 8006bcc:	20000090 	.word	0x20000090

08006bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd4:	b090      	sub	sp, #64	; 0x40
 8006bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
 8006bdc:	2300      	movs	r3, #0
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be0:	2300      	movs	r3, #0
 8006be2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006be8:	4b59      	ldr	r3, [pc, #356]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 030c 	and.w	r3, r3, #12
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d00d      	beq.n	8006c10 <HAL_RCC_GetSysClockFreq+0x40>
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	f200 80a1 	bhi.w	8006d3c <HAL_RCC_GetSysClockFreq+0x16c>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <HAL_RCC_GetSysClockFreq+0x34>
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d003      	beq.n	8006c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c02:	e09b      	b.n	8006d3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c04:	4b53      	ldr	r3, [pc, #332]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006c08:	e09b      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c0a:	4b53      	ldr	r3, [pc, #332]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006c0e:	e098      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c10:	4b4f      	ldr	r3, [pc, #316]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c1a:	4b4d      	ldr	r3, [pc, #308]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d028      	beq.n	8006c78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c26:	4b4a      	ldr	r3, [pc, #296]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	099b      	lsrs	r3, r3, #6
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	623b      	str	r3, [r7, #32]
 8006c30:	627a      	str	r2, [r7, #36]	; 0x24
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4b47      	ldr	r3, [pc, #284]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c3c:	fb03 f201 	mul.w	r2, r3, r1
 8006c40:	2300      	movs	r3, #0
 8006c42:	fb00 f303 	mul.w	r3, r0, r3
 8006c46:	4413      	add	r3, r2
 8006c48:	4a43      	ldr	r2, [pc, #268]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c4a:	fba0 1202 	umull	r1, r2, r0, r2
 8006c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c50:	460a      	mov	r2, r1
 8006c52:	62ba      	str	r2, [r7, #40]	; 0x28
 8006c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c56:	4413      	add	r3, r2
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	61bb      	str	r3, [r7, #24]
 8006c60:	61fa      	str	r2, [r7, #28]
 8006c62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006c6a:	f7f9 fe0f 	bl	800088c <__aeabi_uldivmod>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4613      	mov	r3, r2
 8006c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c76:	e053      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c78:	4b35      	ldr	r3, [pc, #212]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	099b      	lsrs	r3, r3, #6
 8006c7e:	2200      	movs	r2, #0
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	617a      	str	r2, [r7, #20]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006c8a:	f04f 0b00 	mov.w	fp, #0
 8006c8e:	4652      	mov	r2, sl
 8006c90:	465b      	mov	r3, fp
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f04f 0100 	mov.w	r1, #0
 8006c9a:	0159      	lsls	r1, r3, #5
 8006c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ca0:	0150      	lsls	r0, r2, #5
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	ebb2 080a 	subs.w	r8, r2, sl
 8006caa:	eb63 090b 	sbc.w	r9, r3, fp
 8006cae:	f04f 0200 	mov.w	r2, #0
 8006cb2:	f04f 0300 	mov.w	r3, #0
 8006cb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006cba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006cbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006cc2:	ebb2 0408 	subs.w	r4, r2, r8
 8006cc6:	eb63 0509 	sbc.w	r5, r3, r9
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	00eb      	lsls	r3, r5, #3
 8006cd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cd8:	00e2      	lsls	r2, r4, #3
 8006cda:	4614      	mov	r4, r2
 8006cdc:	461d      	mov	r5, r3
 8006cde:	eb14 030a 	adds.w	r3, r4, sl
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	eb45 030b 	adc.w	r3, r5, fp
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	028b      	lsls	r3, r1, #10
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d00:	4621      	mov	r1, r4
 8006d02:	028a      	lsls	r2, r1, #10
 8006d04:	4610      	mov	r0, r2
 8006d06:	4619      	mov	r1, r3
 8006d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	60bb      	str	r3, [r7, #8]
 8006d0e:	60fa      	str	r2, [r7, #12]
 8006d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d14:	f7f9 fdba 	bl	800088c <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	0c1b      	lsrs	r3, r3, #16
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006d30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d3a:	e002      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3740      	adds	r7, #64	; 0x40
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d4e:	bf00      	nop
 8006d50:	40023800 	.word	0x40023800
 8006d54:	00f42400 	.word	0x00f42400
 8006d58:	017d7840 	.word	0x017d7840

08006d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d60:	4b03      	ldr	r3, [pc, #12]	; (8006d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d62:	681b      	ldr	r3, [r3, #0]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	2000008c 	.word	0x2000008c

08006d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d78:	f7ff fff0 	bl	8006d5c <HAL_RCC_GetHCLKFreq>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	0a9b      	lsrs	r3, r3, #10
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	4903      	ldr	r1, [pc, #12]	; (8006d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d8a:	5ccb      	ldrb	r3, [r1, r3]
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40023800 	.word	0x40023800
 8006d98:	080140fc 	.word	0x080140fc

08006d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006da0:	f7ff ffdc 	bl	8006d5c <HAL_RCC_GetHCLKFreq>
 8006da4:	4602      	mov	r2, r0
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	0b5b      	lsrs	r3, r3, #13
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	4903      	ldr	r1, [pc, #12]	; (8006dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006db2:	5ccb      	ldrb	r3, [r1, r3]
 8006db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40023800 	.word	0x40023800
 8006dc0:	080140fc 	.word	0x080140fc

08006dc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	220f      	movs	r2, #15
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006dd4:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <HAL_RCC_GetClockConfig+0x5c>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 0203 	and.w	r2, r3, #3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006de0:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <HAL_RCC_GetClockConfig+0x5c>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006dec:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <HAL_RCC_GetClockConfig+0x5c>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006df8:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <HAL_RCC_GetClockConfig+0x5c>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	08db      	lsrs	r3, r3, #3
 8006dfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e06:	4b07      	ldr	r3, [pc, #28]	; (8006e24 <HAL_RCC_GetClockConfig+0x60>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0207 	and.w	r2, r3, #7
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	601a      	str	r2, [r3, #0]
}
 8006e12:	bf00      	nop
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40023800 	.word	0x40023800
 8006e24:	40023c00 	.word	0x40023c00

08006e28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b0f      	cmp	r3, #15
 8006e46:	d904      	bls.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006e48:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8006e4c:	4834      	ldr	r0, [pc, #208]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006e4e:	f7fb f80e 	bl	8001e6e <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d105      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d066      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d903      	bls.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	2b07      	cmp	r3, #7
 8006e78:	d904      	bls.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006e7a:	f640 11de 	movw	r1, #2526	; 0x9de
 8006e7e:	4828      	ldr	r0, [pc, #160]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006e80:	f7fa fff5 	bl	8001e6e <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	2b31      	cmp	r3, #49	; 0x31
 8006e8a:	d904      	bls.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006e94:	d904      	bls.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006e96:	f640 11df 	movw	r1, #2527	; 0x9df
 8006e9a:	4821      	ldr	r0, [pc, #132]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006e9c:	f7fa ffe7 	bl	8001e6e <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d903      	bls.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	2b3f      	cmp	r3, #63	; 0x3f
 8006eae:	d904      	bls.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x92>
 8006eb0:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8006eb4:	481a      	ldr	r0, [pc, #104]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006eb6:	f7fa ffda 	bl	8001e6e <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006eba:	4b1a      	ldr	r3, [pc, #104]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ec0:	f7fc f842 	bl	8002f48 <HAL_GetTick>
 8006ec4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ec6:	e008      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ec8:	f7fc f83e 	bl	8002f48 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e1b3      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006eda:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f0      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	019b      	lsls	r3, r3, #6
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	071b      	lsls	r3, r3, #28
 8006ef8:	490b      	ldr	r1, [pc, #44]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f00:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f06:	f7fc f81f 	bl	8002f48 <HAL_GetTick>
 8006f0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f0c:	e00e      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f0e:	f7fc f81b 	bl	8002f48 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d907      	bls.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e190      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006f20:	08011db0 	.word	0x08011db0
 8006f24:	42470068 	.word	0x42470068
 8006f28:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f2c:	4b88      	ldr	r3, [pc, #544]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0ea      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 8173 	beq.w	800722c <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4e:	f000 80a6 	beq.w	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f5a:	f000 80a0 	beq.w	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	4a7c      	ldr	r2, [pc, #496]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	f000 809a 	beq.w	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	4a7a      	ldr	r2, [pc, #488]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	f000 8094 	beq.w	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	4a78      	ldr	r2, [pc, #480]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	f000 808e 	beq.w	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	4a76      	ldr	r2, [pc, #472]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	f000 8088 	beq.w	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	4a74      	ldr	r2, [pc, #464]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	f000 8082 	beq.w	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	4a72      	ldr	r2, [pc, #456]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d07c      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	4a70      	ldr	r2, [pc, #448]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d077      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	4a6f      	ldr	r2, [pc, #444]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d072      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	4a6d      	ldr	r2, [pc, #436]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d06d      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	4a6c      	ldr	r2, [pc, #432]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d068      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	4a6a      	ldr	r2, [pc, #424]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d063      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	4a69      	ldr	r2, [pc, #420]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d05e      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	4a67      	ldr	r2, [pc, #412]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d059      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	4a66      	ldr	r2, [pc, #408]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d054      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	4a64      	ldr	r2, [pc, #400]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d04f      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	4a63      	ldr	r2, [pc, #396]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d04a      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	4a61      	ldr	r2, [pc, #388]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d045      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	4a60      	ldr	r2, [pc, #384]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d040      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	4a5e      	ldr	r2, [pc, #376]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d03b      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	4a5d      	ldr	r2, [pc, #372]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d036      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	4a5b      	ldr	r2, [pc, #364]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d031      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	4a5a      	ldr	r2, [pc, #360]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d02c      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	4a58      	ldr	r2, [pc, #352]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d027      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	4a57      	ldr	r2, [pc, #348]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d022      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	4a55      	ldr	r2, [pc, #340]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d01d      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	4a54      	ldr	r2, [pc, #336]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d018      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	4a52      	ldr	r2, [pc, #328]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d013      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	4a51      	ldr	r2, [pc, #324]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00e      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	4a4f      	ldr	r2, [pc, #316]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d009      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	4a4e      	ldr	r2, [pc, #312]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d004      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8007094:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8007098:	484c      	ldr	r0, [pc, #304]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800709a:	f7fa fee8 	bl	8001e6e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800709e:	2300      	movs	r3, #0
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	4b2b      	ldr	r3, [pc, #172]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	4a2a      	ldr	r2, [pc, #168]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80070a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ac:	6413      	str	r3, [r2, #64]	; 0x40
 80070ae:	4b28      	ldr	r3, [pc, #160]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070ba:	4b45      	ldr	r3, [pc, #276]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a44      	ldr	r2, [pc, #272]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80070c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070c6:	f7fb ff3f 	bl	8002f48 <HAL_GetTick>
 80070ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070cc:	e008      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070ce:	f7fb ff3b 	bl	8002f48 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e0b0      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070e0:	4b3b      	ldr	r3, [pc, #236]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0f0      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070ec:	4b18      	ldr	r3, [pc, #96]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80070ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d073      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	429a      	cmp	r2, r3
 8007108:	d06c      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800710a:	4b11      	ldr	r3, [pc, #68]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800710c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007112:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007114:	4b2f      	ldr	r3, [pc, #188]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8007116:	2201      	movs	r2, #1
 8007118:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800711a:	4b2e      	ldr	r3, [pc, #184]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007120:	4a0b      	ldr	r2, [pc, #44]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007126:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b01      	cmp	r3, #1
 8007130:	d158      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007132:	f7fb ff09 	bl	8002f48 <HAL_GetTick>
 8007136:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007138:	e04e      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800713a:	f7fb ff05 	bl	8002f48 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	f241 3288 	movw	r2, #5000	; 0x1388
 8007148:	4293      	cmp	r3, r2
 800714a:	d945      	bls.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e078      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007150:	40023800 	.word	0x40023800
 8007154:	00020300 	.word	0x00020300
 8007158:	00030300 	.word	0x00030300
 800715c:	00040300 	.word	0x00040300
 8007160:	00050300 	.word	0x00050300
 8007164:	00060300 	.word	0x00060300
 8007168:	00070300 	.word	0x00070300
 800716c:	00080300 	.word	0x00080300
 8007170:	00090300 	.word	0x00090300
 8007174:	000a0300 	.word	0x000a0300
 8007178:	000b0300 	.word	0x000b0300
 800717c:	000c0300 	.word	0x000c0300
 8007180:	000d0300 	.word	0x000d0300
 8007184:	000e0300 	.word	0x000e0300
 8007188:	000f0300 	.word	0x000f0300
 800718c:	00100300 	.word	0x00100300
 8007190:	00110300 	.word	0x00110300
 8007194:	00120300 	.word	0x00120300
 8007198:	00130300 	.word	0x00130300
 800719c:	00140300 	.word	0x00140300
 80071a0:	00150300 	.word	0x00150300
 80071a4:	00160300 	.word	0x00160300
 80071a8:	00170300 	.word	0x00170300
 80071ac:	00180300 	.word	0x00180300
 80071b0:	00190300 	.word	0x00190300
 80071b4:	001a0300 	.word	0x001a0300
 80071b8:	001b0300 	.word	0x001b0300
 80071bc:	001c0300 	.word	0x001c0300
 80071c0:	001d0300 	.word	0x001d0300
 80071c4:	001e0300 	.word	0x001e0300
 80071c8:	001f0300 	.word	0x001f0300
 80071cc:	08011db0 	.word	0x08011db0
 80071d0:	40007000 	.word	0x40007000
 80071d4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d8:	4b1c      	ldr	r3, [pc, #112]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80071da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0aa      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071f0:	d10d      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80071f2:	4b16      	ldr	r3, [pc, #88]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007206:	4911      	ldr	r1, [pc, #68]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007208:	4313      	orrs	r3, r2
 800720a:	608b      	str	r3, [r1, #8]
 800720c:	e005      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800720e:	4b0f      	ldr	r3, [pc, #60]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	4a0e      	ldr	r2, [pc, #56]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007214:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007218:	6093      	str	r3, [r2, #8]
 800721a:	4b0c      	ldr	r3, [pc, #48]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800721c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007226:	4909      	ldr	r1, [pc, #36]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007228:	4313      	orrs	r3, r2
 800722a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	7d1a      	ldrb	r2, [r3, #20]
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800723e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40023800 	.word	0x40023800
 8007250:	424711e0 	.word	0x424711e0

08007254 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e0c4      	b.n	80073f4 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a63      	ldr	r2, [pc, #396]	; (80073fc <HAL_RTC_Init+0x1a8>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d004      	beq.n	800727e <HAL_RTC_Init+0x2a>
 8007274:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007278:	4861      	ldr	r0, [pc, #388]	; (8007400 <HAL_RTC_Init+0x1ac>)
 800727a:	f7fa fdf8 	bl	8001e6e <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	d008      	beq.n	8007298 <HAL_RTC_Init+0x44>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d004      	beq.n	8007298 <HAL_RTC_Init+0x44>
 800728e:	f240 1105 	movw	r1, #261	; 0x105
 8007292:	485b      	ldr	r0, [pc, #364]	; (8007400 <HAL_RTC_Init+0x1ac>)
 8007294:	f7fa fdeb 	bl	8001e6e <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b7f      	cmp	r3, #127	; 0x7f
 800729e:	d904      	bls.n	80072aa <HAL_RTC_Init+0x56>
 80072a0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80072a4:	4856      	ldr	r0, [pc, #344]	; (8007400 <HAL_RTC_Init+0x1ac>)
 80072a6:	f7fa fde2 	bl	8001e6e <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b2:	d304      	bcc.n	80072be <HAL_RTC_Init+0x6a>
 80072b4:	f240 1107 	movw	r1, #263	; 0x107
 80072b8:	4851      	ldr	r0, [pc, #324]	; (8007400 <HAL_RTC_Init+0x1ac>)
 80072ba:	f7fa fdd8 	bl	8001e6e <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d013      	beq.n	80072ee <HAL_RTC_Init+0x9a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ce:	d00e      	beq.n	80072ee <HAL_RTC_Init+0x9a>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072d8:	d009      	beq.n	80072ee <HAL_RTC_Init+0x9a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072e2:	d004      	beq.n	80072ee <HAL_RTC_Init+0x9a>
 80072e4:	f44f 7184 	mov.w	r1, #264	; 0x108
 80072e8:	4845      	ldr	r0, [pc, #276]	; (8007400 <HAL_RTC_Init+0x1ac>)
 80072ea:	f7fa fdc0 	bl	8001e6e <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d009      	beq.n	800730a <HAL_RTC_Init+0xb6>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fe:	d004      	beq.n	800730a <HAL_RTC_Init+0xb6>
 8007300:	f240 1109 	movw	r1, #265	; 0x109
 8007304:	483e      	ldr	r0, [pc, #248]	; (8007400 <HAL_RTC_Init+0x1ac>)
 8007306:	f7fa fdb2 	bl	8001e6e <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d009      	beq.n	8007326 <HAL_RTC_Init+0xd2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800731a:	d004      	beq.n	8007326 <HAL_RTC_Init+0xd2>
 800731c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8007320:	4837      	ldr	r0, [pc, #220]	; (8007400 <HAL_RTC_Init+0x1ac>)
 8007322:	f7fa fda4 	bl	8001e6e <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7f5b      	ldrb	r3, [r3, #29]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d105      	bne.n	800733c <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fa fdfe 	bl	8001f38 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	22ca      	movs	r2, #202	; 0xca
 8007348:	625a      	str	r2, [r3, #36]	; 0x24
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2253      	movs	r2, #83	; 0x53
 8007350:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fad2 	bl	80078fc <RTC_EnterInitMode>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d12c      	bne.n	80073bc <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007374:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6899      	ldr	r1, [r3, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	68d2      	ldr	r2, [r2, #12]
 800739c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6919      	ldr	r1, [r3, #16]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	041a      	lsls	r2, r3, #16
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fad9 	bl	800796a <RTC_ExitInitMode>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d113      	bne.n	80073ea <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073d0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	22ff      	movs	r2, #255	; 0xff
 80073f0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40002800 	.word	0x40002800
 8007400:	08011dec 	.word	0x08011dec

08007404 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007404:	b590      	push	{r4, r7, lr}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d007      	beq.n	800742a <HAL_RTC_SetTime+0x26>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d004      	beq.n	800742a <HAL_RTC_SetTime+0x26>
 8007420:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8007424:	489a      	ldr	r0, [pc, #616]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 8007426:	f7fa fd22 	bl	8001e6e <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007432:	d00d      	beq.n	8007450 <HAL_RTC_SetTime+0x4c>
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800743c:	d008      	beq.n	8007450 <HAL_RTC_SetTime+0x4c>
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d004      	beq.n	8007450 <HAL_RTC_SetTime+0x4c>
 8007446:	f240 21b5 	movw	r1, #693	; 0x2b5
 800744a:	4891      	ldr	r0, [pc, #580]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 800744c:	f7fa fd0f 	bl	8001e6e <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d009      	beq.n	800746c <HAL_RTC_SetTime+0x68>
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007460:	d004      	beq.n	800746c <HAL_RTC_SetTime+0x68>
 8007462:	f240 21b6 	movw	r1, #694	; 0x2b6
 8007466:	488a      	ldr	r0, [pc, #552]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 8007468:	f7fa fd01 	bl	8001e6e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	7f1b      	ldrb	r3, [r3, #28]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d101      	bne.n	8007478 <HAL_RTC_SetTime+0x74>
 8007474:	2302      	movs	r3, #2
 8007476:	e107      	b.n	8007688 <HAL_RTC_SetTime+0x284>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2201      	movs	r2, #1
 800747c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2202      	movs	r2, #2
 8007482:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d15c      	bne.n	8007544 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007494:	2b00      	cmp	r3, #0
 8007496:	d01a      	beq.n	80074ce <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <HAL_RTC_SetTime+0xa4>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b0c      	cmp	r3, #12
 80074a6:	d904      	bls.n	80074b2 <HAL_RTC_SetTime+0xae>
 80074a8:	f240 21c1 	movw	r1, #705	; 0x2c1
 80074ac:	4878      	ldr	r0, [pc, #480]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 80074ae:	f7fa fcde 	bl	8001e6e <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	78db      	ldrb	r3, [r3, #3]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d015      	beq.n	80074e6 <HAL_RTC_SetTime+0xe2>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	78db      	ldrb	r3, [r3, #3]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d011      	beq.n	80074e6 <HAL_RTC_SetTime+0xe2>
 80074c2:	f240 21c2 	movw	r1, #706	; 0x2c2
 80074c6:	4872      	ldr	r0, [pc, #456]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 80074c8:	f7fa fcd1 	bl	8001e6e <assert_failed>
 80074cc:	e00b      	b.n	80074e6 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b17      	cmp	r3, #23
 80074da:	d904      	bls.n	80074e6 <HAL_RTC_SetTime+0xe2>
 80074dc:	f240 21c7 	movw	r1, #711	; 0x2c7
 80074e0:	486b      	ldr	r0, [pc, #428]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 80074e2:	f7fa fcc4 	bl	8001e6e <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	785b      	ldrb	r3, [r3, #1]
 80074ea:	2b3b      	cmp	r3, #59	; 0x3b
 80074ec:	d904      	bls.n	80074f8 <HAL_RTC_SetTime+0xf4>
 80074ee:	f240 21c9 	movw	r1, #713	; 0x2c9
 80074f2:	4867      	ldr	r0, [pc, #412]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 80074f4:	f7fa fcbb 	bl	8001e6e <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	789b      	ldrb	r3, [r3, #2]
 80074fc:	2b3b      	cmp	r3, #59	; 0x3b
 80074fe:	d904      	bls.n	800750a <HAL_RTC_SetTime+0x106>
 8007500:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007504:	4862      	ldr	r0, [pc, #392]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 8007506:	f7fa fcb2 	bl	8001e6e <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fa50 	bl	80079b4 <RTC_ByteToBcd2>
 8007514:	4603      	mov	r3, r0
 8007516:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	4618      	mov	r0, r3
 800751e:	f000 fa49 	bl	80079b4 <RTC_ByteToBcd2>
 8007522:	4603      	mov	r3, r0
 8007524:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007526:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	789b      	ldrb	r3, [r3, #2]
 800752c:	4618      	mov	r0, r3
 800752e:	f000 fa41 	bl	80079b4 <RTC_ByteToBcd2>
 8007532:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007534:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	78db      	ldrb	r3, [r3, #3]
 800753c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800753e:	4313      	orrs	r3, r2
 8007540:	617b      	str	r3, [r7, #20]
 8007542:	e062      	b.n	800760a <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d022      	beq.n	8007598 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 fa49 	bl	80079ee <RTC_Bcd2ToByte>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d007      	beq.n	8007572 <HAL_RTC_SetTime+0x16e>
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fa41 	bl	80079ee <RTC_Bcd2ToByte>
 800756c:	4603      	mov	r3, r0
 800756e:	2b0c      	cmp	r3, #12
 8007570:	d904      	bls.n	800757c <HAL_RTC_SetTime+0x178>
 8007572:	f240 21d5 	movw	r1, #725	; 0x2d5
 8007576:	4846      	ldr	r0, [pc, #280]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 8007578:	f7fa fc79 	bl	8001e6e <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	78db      	ldrb	r3, [r3, #3]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d019      	beq.n	80075b8 <HAL_RTC_SetTime+0x1b4>
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	78db      	ldrb	r3, [r3, #3]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d015      	beq.n	80075b8 <HAL_RTC_SetTime+0x1b4>
 800758c:	f240 21d6 	movw	r1, #726	; 0x2d6
 8007590:	483f      	ldr	r0, [pc, #252]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 8007592:	f7fa fc6c 	bl	8001e6e <assert_failed>
 8007596:	e00f      	b.n	80075b8 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2200      	movs	r2, #0
 800759c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fa23 	bl	80079ee <RTC_Bcd2ToByte>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b17      	cmp	r3, #23
 80075ac:	d904      	bls.n	80075b8 <HAL_RTC_SetTime+0x1b4>
 80075ae:	f240 21db 	movw	r1, #731	; 0x2db
 80075b2:	4837      	ldr	r0, [pc, #220]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 80075b4:	f7fa fc5b 	bl	8001e6e <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fa16 	bl	80079ee <RTC_Bcd2ToByte>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b3b      	cmp	r3, #59	; 0x3b
 80075c6:	d904      	bls.n	80075d2 <HAL_RTC_SetTime+0x1ce>
 80075c8:	f240 21dd 	movw	r1, #733	; 0x2dd
 80075cc:	4830      	ldr	r0, [pc, #192]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 80075ce:	f7fa fc4e 	bl	8001e6e <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	789b      	ldrb	r3, [r3, #2]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fa09 	bl	80079ee <RTC_Bcd2ToByte>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b3b      	cmp	r3, #59	; 0x3b
 80075e0:	d904      	bls.n	80075ec <HAL_RTC_SetTime+0x1e8>
 80075e2:	f240 21de 	movw	r1, #734	; 0x2de
 80075e6:	482a      	ldr	r0, [pc, #168]	; (8007690 <HAL_RTC_SetTime+0x28c>)
 80075e8:	f7fa fc41 	bl	8001e6e <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	785b      	ldrb	r3, [r3, #1]
 80075f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80075f8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80075fe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	78db      	ldrb	r3, [r3, #3]
 8007604:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007606:	4313      	orrs	r3, r2
 8007608:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	22ca      	movs	r2, #202	; 0xca
 8007610:	625a      	str	r2, [r3, #36]	; 0x24
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2253      	movs	r2, #83	; 0x53
 8007618:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 f96e 	bl	80078fc <RTC_EnterInitMode>
 8007620:	4603      	mov	r3, r0
 8007622:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007624:	7cfb      	ldrb	r3, [r7, #19]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d120      	bne.n	800766c <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007634:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007638:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689a      	ldr	r2, [r3, #8]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007648:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6899      	ldr	r1, [r3, #8]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	431a      	orrs	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 f981 	bl	800796a <RTC_ExitInitMode>
 8007668:	4603      	mov	r3, r0
 800766a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800766c:	7cfb      	ldrb	r3, [r7, #19]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d102      	bne.n	8007678 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2201      	movs	r2, #1
 8007676:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	22ff      	movs	r2, #255	; 0xff
 800767e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	771a      	strb	r2, [r3, #28]

  return status;
 8007686:	7cfb      	ldrb	r3, [r7, #19]
}
 8007688:	4618      	mov	r0, r3
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	bd90      	pop	{r4, r7, pc}
 8007690:	08011dec 	.word	0x08011dec

08007694 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007694:	b590      	push	{r4, r7, lr}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d007      	beq.n	80076ba <HAL_RTC_SetDate+0x26>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d004      	beq.n	80076ba <HAL_RTC_SetDate+0x26>
 80076b0:	f240 3153 	movw	r1, #851	; 0x353
 80076b4:	487c      	ldr	r0, [pc, #496]	; (80078a8 <HAL_RTC_SetDate+0x214>)
 80076b6:	f7fa fbda 	bl	8001e6e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	7f1b      	ldrb	r3, [r3, #28]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d101      	bne.n	80076c6 <HAL_RTC_SetDate+0x32>
 80076c2:	2302      	movs	r3, #2
 80076c4:	e0ec      	b.n	80078a0 <HAL_RTC_SetDate+0x20c>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2202      	movs	r2, #2
 80076d0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10e      	bne.n	80076f6 <HAL_RTC_SetDate+0x62>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	f003 0310 	and.w	r3, r3, #16
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d008      	beq.n	80076f6 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	f023 0310 	bic.w	r3, r3, #16
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	330a      	adds	r3, #10
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d01c      	beq.n	8007738 <HAL_RTC_SetDate+0xa4>
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d018      	beq.n	8007738 <HAL_RTC_SetDate+0xa4>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b03      	cmp	r3, #3
 800770c:	d014      	beq.n	8007738 <HAL_RTC_SetDate+0xa4>
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2b04      	cmp	r3, #4
 8007714:	d010      	beq.n	8007738 <HAL_RTC_SetDate+0xa4>
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b05      	cmp	r3, #5
 800771c:	d00c      	beq.n	8007738 <HAL_RTC_SetDate+0xa4>
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b06      	cmp	r3, #6
 8007724:	d008      	beq.n	8007738 <HAL_RTC_SetDate+0xa4>
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b07      	cmp	r3, #7
 800772c:	d004      	beq.n	8007738 <HAL_RTC_SetDate+0xa4>
 800772e:	f240 315f 	movw	r1, #863	; 0x35f
 8007732:	485d      	ldr	r0, [pc, #372]	; (80078a8 <HAL_RTC_SetDate+0x214>)
 8007734:	f7fa fb9b 	bl	8001e6e <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d13f      	bne.n	80077be <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	78db      	ldrb	r3, [r3, #3]
 8007742:	2b63      	cmp	r3, #99	; 0x63
 8007744:	d904      	bls.n	8007750 <HAL_RTC_SetDate+0xbc>
 8007746:	f240 3163 	movw	r1, #867	; 0x363
 800774a:	4857      	ldr	r0, [pc, #348]	; (80078a8 <HAL_RTC_SetDate+0x214>)
 800774c:	f7fa fb8f 	bl	8001e6e <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	785b      	ldrb	r3, [r3, #1]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_RTC_SetDate+0xcc>
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	2b0c      	cmp	r3, #12
 800775e:	d904      	bls.n	800776a <HAL_RTC_SetDate+0xd6>
 8007760:	f44f 7159 	mov.w	r1, #868	; 0x364
 8007764:	4850      	ldr	r0, [pc, #320]	; (80078a8 <HAL_RTC_SetDate+0x214>)
 8007766:	f7fa fb82 	bl	8001e6e <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	789b      	ldrb	r3, [r3, #2]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_RTC_SetDate+0xe6>
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	789b      	ldrb	r3, [r3, #2]
 8007776:	2b1f      	cmp	r3, #31
 8007778:	d904      	bls.n	8007784 <HAL_RTC_SetDate+0xf0>
 800777a:	f240 3165 	movw	r1, #869	; 0x365
 800777e:	484a      	ldr	r0, [pc, #296]	; (80078a8 <HAL_RTC_SetDate+0x214>)
 8007780:	f7fa fb75 	bl	8001e6e <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	78db      	ldrb	r3, [r3, #3]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f913 	bl	80079b4 <RTC_ByteToBcd2>
 800778e:	4603      	mov	r3, r0
 8007790:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	785b      	ldrb	r3, [r3, #1]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 f90c 	bl	80079b4 <RTC_ByteToBcd2>
 800779c:	4603      	mov	r3, r0
 800779e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80077a0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	789b      	ldrb	r3, [r3, #2]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 f904 	bl	80079b4 <RTC_ByteToBcd2>
 80077ac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80077ae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	e045      	b.n	800784a <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	78db      	ldrb	r3, [r3, #3]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 f913 	bl	80079ee <RTC_Bcd2ToByte>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b63      	cmp	r3, #99	; 0x63
 80077cc:	d904      	bls.n	80077d8 <HAL_RTC_SetDate+0x144>
 80077ce:	f240 316e 	movw	r1, #878	; 0x36e
 80077d2:	4835      	ldr	r0, [pc, #212]	; (80078a8 <HAL_RTC_SetDate+0x214>)
 80077d4:	f7fa fb4b 	bl	8001e6e <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 f906 	bl	80079ee <RTC_Bcd2ToByte>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d007      	beq.n	80077f8 <HAL_RTC_SetDate+0x164>
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 f8fe 	bl	80079ee <RTC_Bcd2ToByte>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b0c      	cmp	r3, #12
 80077f6:	d904      	bls.n	8007802 <HAL_RTC_SetDate+0x16e>
 80077f8:	f240 316f 	movw	r1, #879	; 0x36f
 80077fc:	482a      	ldr	r0, [pc, #168]	; (80078a8 <HAL_RTC_SetDate+0x214>)
 80077fe:	f7fa fb36 	bl	8001e6e <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	789b      	ldrb	r3, [r3, #2]
 8007806:	4618      	mov	r0, r3
 8007808:	f000 f8f1 	bl	80079ee <RTC_Bcd2ToByte>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <HAL_RTC_SetDate+0x18e>
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	789b      	ldrb	r3, [r3, #2]
 8007816:	4618      	mov	r0, r3
 8007818:	f000 f8e9 	bl	80079ee <RTC_Bcd2ToByte>
 800781c:	4603      	mov	r3, r0
 800781e:	2b1f      	cmp	r3, #31
 8007820:	d904      	bls.n	800782c <HAL_RTC_SetDate+0x198>
 8007822:	f44f 715c 	mov.w	r1, #880	; 0x370
 8007826:	4820      	ldr	r0, [pc, #128]	; (80078a8 <HAL_RTC_SetDate+0x214>)
 8007828:	f7fa fb21 	bl	8001e6e <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	78db      	ldrb	r3, [r3, #3]
 8007830:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	785b      	ldrb	r3, [r3, #1]
 8007836:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007838:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800783e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007846:	4313      	orrs	r3, r2
 8007848:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	22ca      	movs	r2, #202	; 0xca
 8007850:	625a      	str	r2, [r3, #36]	; 0x24
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2253      	movs	r2, #83	; 0x53
 8007858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f84e 	bl	80078fc <RTC_EnterInitMode>
 8007860:	4603      	mov	r3, r0
 8007862:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007864:	7cfb      	ldrb	r3, [r7, #19]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10c      	bne.n	8007884 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007874:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007878:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 f875 	bl	800796a <RTC_ExitInitMode>
 8007880:	4603      	mov	r3, r0
 8007882:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007884:	7cfb      	ldrb	r3, [r7, #19]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d102      	bne.n	8007890 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2201      	movs	r2, #1
 800788e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	22ff      	movs	r2, #255	; 0xff
 8007896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	771a      	strb	r2, [r3, #28]

  return status;
 800789e:	7cfb      	ldrb	r3, [r7, #19]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	371c      	adds	r7, #28
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd90      	pop	{r4, r7, pc}
 80078a8:	08011dec 	.word	0x08011dec

080078ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078c8:	f7fb fb3e 	bl	8002f48 <HAL_GetTick>
 80078cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078ce:	e009      	b.n	80078e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078d0:	f7fb fb3a 	bl	8002f48 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078de:	d901      	bls.n	80078e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e007      	b.n	80078f4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f003 0320 	and.w	r3, r3, #32
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0ee      	beq.n	80078d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d122      	bne.n	8007960 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68da      	ldr	r2, [r3, #12]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007928:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800792a:	f7fb fb0d 	bl	8002f48 <HAL_GetTick>
 800792e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007930:	e00c      	b.n	800794c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007932:	f7fb fb09 	bl	8002f48 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007940:	d904      	bls.n	800794c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2204      	movs	r2, #4
 8007946:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	d102      	bne.n	8007960 <RTC_EnterInitMode+0x64>
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d1e8      	bne.n	8007932 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007960:	7bfb      	ldrb	r3, [r7, #15]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007984:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7ff ff89 	bl	80078ac <HAL_RTC_WaitForSynchro>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d004      	beq.n	80079aa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2204      	movs	r2, #4
 80079a4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80079c2:	e005      	b.n	80079d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	3301      	adds	r3, #1
 80079c8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	3b0a      	subs	r3, #10
 80079ce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	2b09      	cmp	r3, #9
 80079d4:	d8f6      	bhi.n	80079c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
 80079d8:	011b      	lsls	r3, r3, #4
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	4313      	orrs	r3, r2
 80079e0:	b2db      	uxtb	r3, r3
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b085      	sub	sp, #20
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	4603      	mov	r3, r0
 80079f6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80079fc:	79fb      	ldrb	r3, [r7, #7]
 80079fe:	091b      	lsrs	r3, r3, #4
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	461a      	mov	r2, r3
 8007a04:	0092      	lsls	r2, r2, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	f003 030f 	and.w	r3, r3, #15
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
 8007a16:	4413      	add	r3, r2
 8007a18:	b2db      	uxtb	r3, r3
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
	...

08007a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e18c      	b.n	8007d54 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a75      	ldr	r2, [pc, #468]	; (8007c14 <HAL_SPI_Init+0x1ec>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d018      	beq.n	8007a76 <HAL_SPI_Init+0x4e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a73      	ldr	r2, [pc, #460]	; (8007c18 <HAL_SPI_Init+0x1f0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d013      	beq.n	8007a76 <HAL_SPI_Init+0x4e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a72      	ldr	r2, [pc, #456]	; (8007c1c <HAL_SPI_Init+0x1f4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00e      	beq.n	8007a76 <HAL_SPI_Init+0x4e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a70      	ldr	r2, [pc, #448]	; (8007c20 <HAL_SPI_Init+0x1f8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d009      	beq.n	8007a76 <HAL_SPI_Init+0x4e>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a6f      	ldr	r2, [pc, #444]	; (8007c24 <HAL_SPI_Init+0x1fc>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d004      	beq.n	8007a76 <HAL_SPI_Init+0x4e>
 8007a6c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a70:	486d      	ldr	r0, [pc, #436]	; (8007c28 <HAL_SPI_Init+0x200>)
 8007a72:	f7fa f9fc 	bl	8001e6e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <HAL_SPI_Init+0x6a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a86:	d004      	beq.n	8007a92 <HAL_SPI_Init+0x6a>
 8007a88:	f240 1141 	movw	r1, #321	; 0x141
 8007a8c:	4866      	ldr	r0, [pc, #408]	; (8007c28 <HAL_SPI_Init+0x200>)
 8007a8e:	f7fa f9ee 	bl	8001e6e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00e      	beq.n	8007ab8 <HAL_SPI_Init+0x90>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa2:	d009      	beq.n	8007ab8 <HAL_SPI_Init+0x90>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aac:	d004      	beq.n	8007ab8 <HAL_SPI_Init+0x90>
 8007aae:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007ab2:	485d      	ldr	r0, [pc, #372]	; (8007c28 <HAL_SPI_Init+0x200>)
 8007ab4:	f7fa f9db 	bl	8001e6e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac0:	d008      	beq.n	8007ad4 <HAL_SPI_Init+0xac>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d004      	beq.n	8007ad4 <HAL_SPI_Init+0xac>
 8007aca:	f240 1143 	movw	r1, #323	; 0x143
 8007ace:	4856      	ldr	r0, [pc, #344]	; (8007c28 <HAL_SPI_Init+0x200>)
 8007ad0:	f7fa f9cd 	bl	8001e6e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007adc:	d00d      	beq.n	8007afa <HAL_SPI_Init+0xd2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d009      	beq.n	8007afa <HAL_SPI_Init+0xd2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007aee:	d004      	beq.n	8007afa <HAL_SPI_Init+0xd2>
 8007af0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007af4:	484c      	ldr	r0, [pc, #304]	; (8007c28 <HAL_SPI_Init+0x200>)
 8007af6:	f7fa f9ba 	bl	8001e6e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d020      	beq.n	8007b44 <HAL_SPI_Init+0x11c>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	2b08      	cmp	r3, #8
 8007b08:	d01c      	beq.n	8007b44 <HAL_SPI_Init+0x11c>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	2b10      	cmp	r3, #16
 8007b10:	d018      	beq.n	8007b44 <HAL_SPI_Init+0x11c>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	2b18      	cmp	r3, #24
 8007b18:	d014      	beq.n	8007b44 <HAL_SPI_Init+0x11c>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	d010      	beq.n	8007b44 <HAL_SPI_Init+0x11c>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	2b28      	cmp	r3, #40	; 0x28
 8007b28:	d00c      	beq.n	8007b44 <HAL_SPI_Init+0x11c>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	2b30      	cmp	r3, #48	; 0x30
 8007b30:	d008      	beq.n	8007b44 <HAL_SPI_Init+0x11c>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	2b38      	cmp	r3, #56	; 0x38
 8007b38:	d004      	beq.n	8007b44 <HAL_SPI_Init+0x11c>
 8007b3a:	f240 1145 	movw	r1, #325	; 0x145
 8007b3e:	483a      	ldr	r0, [pc, #232]	; (8007c28 <HAL_SPI_Init+0x200>)
 8007b40:	f7fa f995 	bl	8001e6e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d008      	beq.n	8007b5e <HAL_SPI_Init+0x136>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	2b80      	cmp	r3, #128	; 0x80
 8007b52:	d004      	beq.n	8007b5e <HAL_SPI_Init+0x136>
 8007b54:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007b58:	4833      	ldr	r0, [pc, #204]	; (8007c28 <HAL_SPI_Init+0x200>)
 8007b5a:	f7fa f988 	bl	8001e6e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d008      	beq.n	8007b78 <HAL_SPI_Init+0x150>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	2b10      	cmp	r3, #16
 8007b6c:	d004      	beq.n	8007b78 <HAL_SPI_Init+0x150>
 8007b6e:	f240 1147 	movw	r1, #327	; 0x147
 8007b72:	482d      	ldr	r0, [pc, #180]	; (8007c28 <HAL_SPI_Init+0x200>)
 8007b74:	f7fa f97b 	bl	8001e6e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d155      	bne.n	8007c2c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d008      	beq.n	8007b9a <HAL_SPI_Init+0x172>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d004      	beq.n	8007b9a <HAL_SPI_Init+0x172>
 8007b90:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8007b94:	4824      	ldr	r0, [pc, #144]	; (8007c28 <HAL_SPI_Init+0x200>)
 8007b96:	f7fa f96a 	bl	8001e6e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d008      	beq.n	8007bb4 <HAL_SPI_Init+0x18c>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d004      	beq.n	8007bb4 <HAL_SPI_Init+0x18c>
 8007baa:	f240 114b 	movw	r1, #331	; 0x14b
 8007bae:	481e      	ldr	r0, [pc, #120]	; (8007c28 <HAL_SPI_Init+0x200>)
 8007bb0:	f7fa f95d 	bl	8001e6e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bbc:	d125      	bne.n	8007c0a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d05d      	beq.n	8007c82 <HAL_SPI_Init+0x25a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d059      	beq.n	8007c82 <HAL_SPI_Init+0x25a>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	2b10      	cmp	r3, #16
 8007bd4:	d055      	beq.n	8007c82 <HAL_SPI_Init+0x25a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	2b18      	cmp	r3, #24
 8007bdc:	d051      	beq.n	8007c82 <HAL_SPI_Init+0x25a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	d04d      	beq.n	8007c82 <HAL_SPI_Init+0x25a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	2b28      	cmp	r3, #40	; 0x28
 8007bec:	d049      	beq.n	8007c82 <HAL_SPI_Init+0x25a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	2b30      	cmp	r3, #48	; 0x30
 8007bf4:	d045      	beq.n	8007c82 <HAL_SPI_Init+0x25a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	2b38      	cmp	r3, #56	; 0x38
 8007bfc:	d041      	beq.n	8007c82 <HAL_SPI_Init+0x25a>
 8007bfe:	f240 114f 	movw	r1, #335	; 0x14f
 8007c02:	4809      	ldr	r0, [pc, #36]	; (8007c28 <HAL_SPI_Init+0x200>)
 8007c04:	f7fa f933 	bl	8001e6e <assert_failed>
 8007c08:	e03b      	b.n	8007c82 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	61da      	str	r2, [r3, #28]
 8007c10:	e037      	b.n	8007c82 <HAL_SPI_Init+0x25a>
 8007c12:	bf00      	nop
 8007c14:	40013000 	.word	0x40013000
 8007c18:	40003800 	.word	0x40003800
 8007c1c:	40003c00 	.word	0x40003c00
 8007c20:	40013400 	.word	0x40013400
 8007c24:	40015000 	.word	0x40015000
 8007c28:	08011e24 	.word	0x08011e24
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d020      	beq.n	8007c76 <HAL_SPI_Init+0x24e>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d01c      	beq.n	8007c76 <HAL_SPI_Init+0x24e>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	2b10      	cmp	r3, #16
 8007c42:	d018      	beq.n	8007c76 <HAL_SPI_Init+0x24e>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	2b18      	cmp	r3, #24
 8007c4a:	d014      	beq.n	8007c76 <HAL_SPI_Init+0x24e>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	d010      	beq.n	8007c76 <HAL_SPI_Init+0x24e>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	2b28      	cmp	r3, #40	; 0x28
 8007c5a:	d00c      	beq.n	8007c76 <HAL_SPI_Init+0x24e>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	2b30      	cmp	r3, #48	; 0x30
 8007c62:	d008      	beq.n	8007c76 <HAL_SPI_Init+0x24e>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	2b38      	cmp	r3, #56	; 0x38
 8007c6a:	d004      	beq.n	8007c76 <HAL_SPI_Init+0x24e>
 8007c6c:	f240 1159 	movw	r1, #345	; 0x159
 8007c70:	483a      	ldr	r0, [pc, #232]	; (8007d5c <HAL_SPI_Init+0x334>)
 8007c72:	f7fa f8fc 	bl	8001e6e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d106      	bne.n	8007ca2 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7fa f9ad 	bl	8001ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cb8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d06:	ea42 0103 	orr.w	r1, r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	0c1b      	lsrs	r3, r3, #16
 8007d20:	f003 0104 	and.w	r1, r3, #4
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	f003 0210 	and.w	r2, r3, #16
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69da      	ldr	r2, [r3, #28]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	08011e24 	.word	0x08011e24

08007d60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d009      	beq.n	8007d90 <HAL_SPI_Transmit+0x30>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d84:	d004      	beq.n	8007d90 <HAL_SPI_Transmit+0x30>
 8007d86:	f44f 7142 	mov.w	r1, #776	; 0x308
 8007d8a:	4880      	ldr	r0, [pc, #512]	; (8007f8c <HAL_SPI_Transmit+0x22c>)
 8007d8c:	f7fa f86f 	bl	8001e6e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <HAL_SPI_Transmit+0x3e>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e128      	b.n	8007ff0 <HAL_SPI_Transmit+0x290>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007da6:	f7fb f8cf 	bl	8002f48 <HAL_GetTick>
 8007daa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007dac:	88fb      	ldrh	r3, [r7, #6]
 8007dae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d002      	beq.n	8007dc2 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007dc0:	e10d      	b.n	8007fde <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <HAL_SPI_Transmit+0x6e>
 8007dc8:	88fb      	ldrh	r3, [r7, #6]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d102      	bne.n	8007dd4 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007dd2:	e104      	b.n	8007fde <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	88fa      	ldrh	r2, [r7, #6]
 8007dec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	88fa      	ldrh	r2, [r7, #6]
 8007df2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e1a:	d10f      	bne.n	8007e3c <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e46:	2b40      	cmp	r3, #64	; 0x40
 8007e48:	d007      	beq.n	8007e5a <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e62:	d14b      	bne.n	8007efc <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <HAL_SPI_Transmit+0x112>
 8007e6c:	8afb      	ldrh	r3, [r7, #22]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d13e      	bne.n	8007ef0 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e76:	881a      	ldrh	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e82:	1c9a      	adds	r2, r3, #2
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e96:	e02b      	b.n	8007ef0 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d112      	bne.n	8007ecc <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eaa:	881a      	ldrh	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	1c9a      	adds	r2, r3, #2
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	86da      	strh	r2, [r3, #54]	; 0x36
 8007eca:	e011      	b.n	8007ef0 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ecc:	f7fb f83c 	bl	8002f48 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d803      	bhi.n	8007ee4 <HAL_SPI_Transmit+0x184>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee2:	d102      	bne.n	8007eea <HAL_SPI_Transmit+0x18a>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d102      	bne.n	8007ef0 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007eee:	e076      	b.n	8007fde <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1ce      	bne.n	8007e98 <HAL_SPI_Transmit+0x138>
 8007efa:	e04e      	b.n	8007f9a <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <HAL_SPI_Transmit+0x1aa>
 8007f04:	8afb      	ldrh	r3, [r7, #22]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d142      	bne.n	8007f90 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	330c      	adds	r3, #12
 8007f14:	7812      	ldrb	r2, [r2, #0]
 8007f16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007f30:	e02e      	b.n	8007f90 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f003 0302 	and.w	r3, r3, #2
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d113      	bne.n	8007f68 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	330c      	adds	r3, #12
 8007f4a:	7812      	ldrb	r2, [r2, #0]
 8007f4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f66:	e013      	b.n	8007f90 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f68:	f7fa ffee 	bl	8002f48 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d803      	bhi.n	8007f80 <HAL_SPI_Transmit+0x220>
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7e:	d102      	bne.n	8007f86 <HAL_SPI_Transmit+0x226>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d104      	bne.n	8007f90 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f8a:	e028      	b.n	8007fde <HAL_SPI_Transmit+0x27e>
 8007f8c:	08011e24 	.word	0x08011e24
    while (hspi->TxXferCount > 0U)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1cb      	bne.n	8007f32 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 f8b2 	bl	8008108 <SPI_EndRxTxTransaction>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2220      	movs	r2, #32
 8007fae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10a      	bne.n	8007fce <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fb8:	2300      	movs	r3, #0
 8007fba:	613b      	str	r3, [r7, #16]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	613b      	str	r3, [r7, #16]
 8007fcc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	77fb      	strb	r3, [r7, #31]
 8007fda:	e000      	b.n	8007fde <HAL_SPI_Transmit+0x27e>
  }

error:
 8007fdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007fee:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3720      	adds	r7, #32
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	603b      	str	r3, [r7, #0]
 8008004:	4613      	mov	r3, r2
 8008006:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008008:	f7fa ff9e 	bl	8002f48 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008010:	1a9b      	subs	r3, r3, r2
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	4413      	add	r3, r2
 8008016:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008018:	f7fa ff96 	bl	8002f48 <HAL_GetTick>
 800801c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800801e:	4b39      	ldr	r3, [pc, #228]	; (8008104 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	015b      	lsls	r3, r3, #5
 8008024:	0d1b      	lsrs	r3, r3, #20
 8008026:	69fa      	ldr	r2, [r7, #28]
 8008028:	fb02 f303 	mul.w	r3, r2, r3
 800802c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800802e:	e054      	b.n	80080da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008036:	d050      	beq.n	80080da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008038:	f7fa ff86 	bl	8002f48 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	429a      	cmp	r2, r3
 8008046:	d902      	bls.n	800804e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d13d      	bne.n	80080ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800805c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008066:	d111      	bne.n	800808c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008070:	d004      	beq.n	800807c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800807a:	d107      	bne.n	800808c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800808a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008094:	d10f      	bne.n	80080b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e017      	b.n	80080fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	4013      	ands	r3, r2
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	bf0c      	ite	eq
 80080ea:	2301      	moveq	r3, #1
 80080ec:	2300      	movne	r3, #0
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	461a      	mov	r2, r3
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d19b      	bne.n	8008030 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3720      	adds	r7, #32
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	2000008c 	.word	0x2000008c

08008108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af02      	add	r7, sp, #8
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008114:	4b1b      	ldr	r3, [pc, #108]	; (8008184 <SPI_EndRxTxTransaction+0x7c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a1b      	ldr	r2, [pc, #108]	; (8008188 <SPI_EndRxTxTransaction+0x80>)
 800811a:	fba2 2303 	umull	r2, r3, r2, r3
 800811e:	0d5b      	lsrs	r3, r3, #21
 8008120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008124:	fb02 f303 	mul.w	r3, r2, r3
 8008128:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008132:	d112      	bne.n	800815a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2200      	movs	r2, #0
 800813c:	2180      	movs	r1, #128	; 0x80
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f7ff ff5a 	bl	8007ff8 <SPI_WaitFlagStateUntilTimeout>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d016      	beq.n	8008178 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814e:	f043 0220 	orr.w	r2, r3, #32
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e00f      	b.n	800817a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	3b01      	subs	r3, #1
 8008164:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008170:	2b80      	cmp	r3, #128	; 0x80
 8008172:	d0f2      	beq.n	800815a <SPI_EndRxTxTransaction+0x52>
 8008174:	e000      	b.n	8008178 <SPI_EndRxTxTransaction+0x70>
        break;
 8008176:	bf00      	nop
  }

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	2000008c 	.word	0x2000008c
 8008188:	165e9f81 	.word	0x165e9f81

0800818c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e0a7      	b.n	80082ee <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a55      	ldr	r2, [pc, #340]	; (80082f8 <HAL_TIM_Base_Init+0x16c>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d027      	beq.n	80081f8 <HAL_TIM_Base_Init+0x6c>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b0:	d022      	beq.n	80081f8 <HAL_TIM_Base_Init+0x6c>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a51      	ldr	r2, [pc, #324]	; (80082fc <HAL_TIM_Base_Init+0x170>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d01d      	beq.n	80081f8 <HAL_TIM_Base_Init+0x6c>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a4f      	ldr	r2, [pc, #316]	; (8008300 <HAL_TIM_Base_Init+0x174>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d018      	beq.n	80081f8 <HAL_TIM_Base_Init+0x6c>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a4e      	ldr	r2, [pc, #312]	; (8008304 <HAL_TIM_Base_Init+0x178>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d013      	beq.n	80081f8 <HAL_TIM_Base_Init+0x6c>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a4c      	ldr	r2, [pc, #304]	; (8008308 <HAL_TIM_Base_Init+0x17c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00e      	beq.n	80081f8 <HAL_TIM_Base_Init+0x6c>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a4b      	ldr	r2, [pc, #300]	; (800830c <HAL_TIM_Base_Init+0x180>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d009      	beq.n	80081f8 <HAL_TIM_Base_Init+0x6c>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a49      	ldr	r2, [pc, #292]	; (8008310 <HAL_TIM_Base_Init+0x184>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d004      	beq.n	80081f8 <HAL_TIM_Base_Init+0x6c>
 80081ee:	f240 1113 	movw	r1, #275	; 0x113
 80081f2:	4848      	ldr	r0, [pc, #288]	; (8008314 <HAL_TIM_Base_Init+0x188>)
 80081f4:	f7f9 fe3b 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d014      	beq.n	800822a <HAL_TIM_Base_Init+0x9e>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2b10      	cmp	r3, #16
 8008206:	d010      	beq.n	800822a <HAL_TIM_Base_Init+0x9e>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	2b20      	cmp	r3, #32
 800820e:	d00c      	beq.n	800822a <HAL_TIM_Base_Init+0x9e>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	2b40      	cmp	r3, #64	; 0x40
 8008216:	d008      	beq.n	800822a <HAL_TIM_Base_Init+0x9e>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	2b60      	cmp	r3, #96	; 0x60
 800821e:	d004      	beq.n	800822a <HAL_TIM_Base_Init+0x9e>
 8008220:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008224:	483b      	ldr	r0, [pc, #236]	; (8008314 <HAL_TIM_Base_Init+0x188>)
 8008226:	f7f9 fe22 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00e      	beq.n	8008250 <HAL_TIM_Base_Init+0xc4>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800823a:	d009      	beq.n	8008250 <HAL_TIM_Base_Init+0xc4>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008244:	d004      	beq.n	8008250 <HAL_TIM_Base_Init+0xc4>
 8008246:	f240 1115 	movw	r1, #277	; 0x115
 800824a:	4832      	ldr	r0, [pc, #200]	; (8008314 <HAL_TIM_Base_Init+0x188>)
 800824c:	f7f9 fe0f 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d008      	beq.n	800826a <HAL_TIM_Base_Init+0xde>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	2b80      	cmp	r3, #128	; 0x80
 800825e:	d004      	beq.n	800826a <HAL_TIM_Base_Init+0xde>
 8008260:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008264:	482b      	ldr	r0, [pc, #172]	; (8008314 <HAL_TIM_Base_Init+0x188>)
 8008266:	f7f9 fe02 	bl	8001e6e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d106      	bne.n	8008284 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7fa fd30 	bl	8002ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3304      	adds	r3, #4
 8008294:	4619      	mov	r1, r3
 8008296:	4610      	mov	r0, r2
 8008298:	f001 fa28 	bl	80096ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	40010000 	.word	0x40010000
 80082fc:	40000400 	.word	0x40000400
 8008300:	40000800 	.word	0x40000800
 8008304:	40000c00 	.word	0x40000c00
 8008308:	40014000 	.word	0x40014000
 800830c:	40014400 	.word	0x40014400
 8008310:	40014800 	.word	0x40014800
 8008314:	08011e5c 	.word	0x08011e5c

08008318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a3d      	ldr	r2, [pc, #244]	; (800841c <HAL_TIM_Base_Start_IT+0x104>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d027      	beq.n	800837a <HAL_TIM_Base_Start_IT+0x62>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008332:	d022      	beq.n	800837a <HAL_TIM_Base_Start_IT+0x62>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a39      	ldr	r2, [pc, #228]	; (8008420 <HAL_TIM_Base_Start_IT+0x108>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d01d      	beq.n	800837a <HAL_TIM_Base_Start_IT+0x62>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a38      	ldr	r2, [pc, #224]	; (8008424 <HAL_TIM_Base_Start_IT+0x10c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d018      	beq.n	800837a <HAL_TIM_Base_Start_IT+0x62>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a36      	ldr	r2, [pc, #216]	; (8008428 <HAL_TIM_Base_Start_IT+0x110>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d013      	beq.n	800837a <HAL_TIM_Base_Start_IT+0x62>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a35      	ldr	r2, [pc, #212]	; (800842c <HAL_TIM_Base_Start_IT+0x114>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00e      	beq.n	800837a <HAL_TIM_Base_Start_IT+0x62>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a33      	ldr	r2, [pc, #204]	; (8008430 <HAL_TIM_Base_Start_IT+0x118>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d009      	beq.n	800837a <HAL_TIM_Base_Start_IT+0x62>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a32      	ldr	r2, [pc, #200]	; (8008434 <HAL_TIM_Base_Start_IT+0x11c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d004      	beq.n	800837a <HAL_TIM_Base_Start_IT+0x62>
 8008370:	f240 11cf 	movw	r1, #463	; 0x1cf
 8008374:	4830      	ldr	r0, [pc, #192]	; (8008438 <HAL_TIM_Base_Start_IT+0x120>)
 8008376:	f7f9 fd7a 	bl	8001e6e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b01      	cmp	r3, #1
 8008384:	d001      	beq.n	800838a <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e044      	b.n	8008414 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2202      	movs	r2, #2
 800838e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68da      	ldr	r2, [r3, #12]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f042 0201 	orr.w	r2, r2, #1
 80083a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a1d      	ldr	r2, [pc, #116]	; (800841c <HAL_TIM_Base_Start_IT+0x104>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d018      	beq.n	80083de <HAL_TIM_Base_Start_IT+0xc6>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b4:	d013      	beq.n	80083de <HAL_TIM_Base_Start_IT+0xc6>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a19      	ldr	r2, [pc, #100]	; (8008420 <HAL_TIM_Base_Start_IT+0x108>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00e      	beq.n	80083de <HAL_TIM_Base_Start_IT+0xc6>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a17      	ldr	r2, [pc, #92]	; (8008424 <HAL_TIM_Base_Start_IT+0x10c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d009      	beq.n	80083de <HAL_TIM_Base_Start_IT+0xc6>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a16      	ldr	r2, [pc, #88]	; (8008428 <HAL_TIM_Base_Start_IT+0x110>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d004      	beq.n	80083de <HAL_TIM_Base_Start_IT+0xc6>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a14      	ldr	r2, [pc, #80]	; (800842c <HAL_TIM_Base_Start_IT+0x114>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d111      	bne.n	8008402 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f003 0307 	and.w	r3, r3, #7
 80083e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b06      	cmp	r3, #6
 80083ee:	d010      	beq.n	8008412 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0201 	orr.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008400:	e007      	b.n	8008412 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f042 0201 	orr.w	r2, r2, #1
 8008410:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	40010000 	.word	0x40010000
 8008420:	40000400 	.word	0x40000400
 8008424:	40000800 	.word	0x40000800
 8008428:	40000c00 	.word	0x40000c00
 800842c:	40014000 	.word	0x40014000
 8008430:	40014400 	.word	0x40014400
 8008434:	40014800 	.word	0x40014800
 8008438:	08011e5c 	.word	0x08011e5c

0800843c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e0a7      	b.n	800859e <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a55      	ldr	r2, [pc, #340]	; (80085a8 <HAL_TIM_PWM_Init+0x16c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d027      	beq.n	80084a8 <HAL_TIM_PWM_Init+0x6c>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008460:	d022      	beq.n	80084a8 <HAL_TIM_PWM_Init+0x6c>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a51      	ldr	r2, [pc, #324]	; (80085ac <HAL_TIM_PWM_Init+0x170>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d01d      	beq.n	80084a8 <HAL_TIM_PWM_Init+0x6c>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a4f      	ldr	r2, [pc, #316]	; (80085b0 <HAL_TIM_PWM_Init+0x174>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d018      	beq.n	80084a8 <HAL_TIM_PWM_Init+0x6c>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a4e      	ldr	r2, [pc, #312]	; (80085b4 <HAL_TIM_PWM_Init+0x178>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d013      	beq.n	80084a8 <HAL_TIM_PWM_Init+0x6c>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a4c      	ldr	r2, [pc, #304]	; (80085b8 <HAL_TIM_PWM_Init+0x17c>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00e      	beq.n	80084a8 <HAL_TIM_PWM_Init+0x6c>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a4b      	ldr	r2, [pc, #300]	; (80085bc <HAL_TIM_PWM_Init+0x180>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d009      	beq.n	80084a8 <HAL_TIM_PWM_Init+0x6c>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a49      	ldr	r2, [pc, #292]	; (80085c0 <HAL_TIM_PWM_Init+0x184>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d004      	beq.n	80084a8 <HAL_TIM_PWM_Init+0x6c>
 800849e:	f240 5129 	movw	r1, #1321	; 0x529
 80084a2:	4848      	ldr	r0, [pc, #288]	; (80085c4 <HAL_TIM_PWM_Init+0x188>)
 80084a4:	f7f9 fce3 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d014      	beq.n	80084da <HAL_TIM_PWM_Init+0x9e>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d010      	beq.n	80084da <HAL_TIM_PWM_Init+0x9e>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d00c      	beq.n	80084da <HAL_TIM_PWM_Init+0x9e>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	2b40      	cmp	r3, #64	; 0x40
 80084c6:	d008      	beq.n	80084da <HAL_TIM_PWM_Init+0x9e>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	2b60      	cmp	r3, #96	; 0x60
 80084ce:	d004      	beq.n	80084da <HAL_TIM_PWM_Init+0x9e>
 80084d0:	f240 512a 	movw	r1, #1322	; 0x52a
 80084d4:	483b      	ldr	r0, [pc, #236]	; (80085c4 <HAL_TIM_PWM_Init+0x188>)
 80084d6:	f7f9 fcca 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00e      	beq.n	8008500 <HAL_TIM_PWM_Init+0xc4>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ea:	d009      	beq.n	8008500 <HAL_TIM_PWM_Init+0xc4>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084f4:	d004      	beq.n	8008500 <HAL_TIM_PWM_Init+0xc4>
 80084f6:	f240 512b 	movw	r1, #1323	; 0x52b
 80084fa:	4832      	ldr	r0, [pc, #200]	; (80085c4 <HAL_TIM_PWM_Init+0x188>)
 80084fc:	f7f9 fcb7 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d008      	beq.n	800851a <HAL_TIM_PWM_Init+0xde>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	2b80      	cmp	r3, #128	; 0x80
 800850e:	d004      	beq.n	800851a <HAL_TIM_PWM_Init+0xde>
 8008510:	f240 512c 	movw	r1, #1324	; 0x52c
 8008514:	482b      	ldr	r0, [pc, #172]	; (80085c4 <HAL_TIM_PWM_Init+0x188>)
 8008516:	f7f9 fcaa 	bl	8001e6e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7fa fb42 	bl	8002bb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3304      	adds	r3, #4
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f001 f8d0 	bl	80096ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	40010000 	.word	0x40010000
 80085ac:	40000400 	.word	0x40000400
 80085b0:	40000800 	.word	0x40000800
 80085b4:	40000c00 	.word	0x40000c00
 80085b8:	40014000 	.word	0x40014000
 80085bc:	40014400 	.word	0x40014400
 80085c0:	40014800 	.word	0x40014800
 80085c4:	08011e5c 	.word	0x08011e5c

080085c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e18a      	b.n	80088f2 <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a78      	ldr	r2, [pc, #480]	; (80087c4 <HAL_TIM_Encoder_Init+0x1fc>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d01d      	beq.n	8008622 <HAL_TIM_Encoder_Init+0x5a>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ee:	d018      	beq.n	8008622 <HAL_TIM_Encoder_Init+0x5a>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a74      	ldr	r2, [pc, #464]	; (80087c8 <HAL_TIM_Encoder_Init+0x200>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d013      	beq.n	8008622 <HAL_TIM_Encoder_Init+0x5a>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a73      	ldr	r2, [pc, #460]	; (80087cc <HAL_TIM_Encoder_Init+0x204>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d00e      	beq.n	8008622 <HAL_TIM_Encoder_Init+0x5a>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a71      	ldr	r2, [pc, #452]	; (80087d0 <HAL_TIM_Encoder_Init+0x208>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d009      	beq.n	8008622 <HAL_TIM_Encoder_Init+0x5a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a70      	ldr	r2, [pc, #448]	; (80087d4 <HAL_TIM_Encoder_Init+0x20c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d004      	beq.n	8008622 <HAL_TIM_Encoder_Init+0x5a>
 8008618:	f640 31d1 	movw	r1, #3025	; 0xbd1
 800861c:	486e      	ldr	r0, [pc, #440]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 800861e:	f7f9 fc26 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d014      	beq.n	8008654 <HAL_TIM_Encoder_Init+0x8c>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	2b10      	cmp	r3, #16
 8008630:	d010      	beq.n	8008654 <HAL_TIM_Encoder_Init+0x8c>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	2b20      	cmp	r3, #32
 8008638:	d00c      	beq.n	8008654 <HAL_TIM_Encoder_Init+0x8c>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	2b40      	cmp	r3, #64	; 0x40
 8008640:	d008      	beq.n	8008654 <HAL_TIM_Encoder_Init+0x8c>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	2b60      	cmp	r3, #96	; 0x60
 8008648:	d004      	beq.n	8008654 <HAL_TIM_Encoder_Init+0x8c>
 800864a:	f640 31d2 	movw	r1, #3026	; 0xbd2
 800864e:	4862      	ldr	r0, [pc, #392]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 8008650:	f7f9 fc0d 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00e      	beq.n	800867a <HAL_TIM_Encoder_Init+0xb2>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008664:	d009      	beq.n	800867a <HAL_TIM_Encoder_Init+0xb2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800866e:	d004      	beq.n	800867a <HAL_TIM_Encoder_Init+0xb2>
 8008670:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8008674:	4858      	ldr	r0, [pc, #352]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 8008676:	f7f9 fbfa 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d008      	beq.n	8008694 <HAL_TIM_Encoder_Init+0xcc>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	2b80      	cmp	r3, #128	; 0x80
 8008688:	d004      	beq.n	8008694 <HAL_TIM_Encoder_Init+0xcc>
 800868a:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800868e:	4852      	ldr	r0, [pc, #328]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 8008690:	f7f9 fbed 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d00c      	beq.n	80086b6 <HAL_TIM_Encoder_Init+0xee>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d008      	beq.n	80086b6 <HAL_TIM_Encoder_Init+0xee>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d004      	beq.n	80086b6 <HAL_TIM_Encoder_Init+0xee>
 80086ac:	f640 31d5 	movw	r1, #3029	; 0xbd5
 80086b0:	4849      	ldr	r0, [pc, #292]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 80086b2:	f7f9 fbdc 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d00c      	beq.n	80086d8 <HAL_TIM_Encoder_Init+0x110>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d008      	beq.n	80086d8 <HAL_TIM_Encoder_Init+0x110>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d004      	beq.n	80086d8 <HAL_TIM_Encoder_Init+0x110>
 80086ce:	f640 31d6 	movw	r1, #3030	; 0xbd6
 80086d2:	4841      	ldr	r0, [pc, #260]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 80086d4:	f7f9 fbcb 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d00c      	beq.n	80086fa <HAL_TIM_Encoder_Init+0x132>
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d008      	beq.n	80086fa <HAL_TIM_Encoder_Init+0x132>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d004      	beq.n	80086fa <HAL_TIM_Encoder_Init+0x132>
 80086f0:	f640 31d7 	movw	r1, #3031	; 0xbd7
 80086f4:	4838      	ldr	r0, [pc, #224]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 80086f6:	f7f9 fbba 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d008      	beq.n	8008714 <HAL_TIM_Encoder_Init+0x14c>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d004      	beq.n	8008714 <HAL_TIM_Encoder_Init+0x14c>
 800870a:	f640 31d8 	movw	r1, #3032	; 0xbd8
 800870e:	4832      	ldr	r0, [pc, #200]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 8008710:	f7f9 fbad 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d008      	beq.n	800872e <HAL_TIM_Encoder_Init+0x166>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	2b02      	cmp	r3, #2
 8008722:	d004      	beq.n	800872e <HAL_TIM_Encoder_Init+0x166>
 8008724:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8008728:	482b      	ldr	r0, [pc, #172]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 800872a:	f7f9 fba0 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d010      	beq.n	8008758 <HAL_TIM_Encoder_Init+0x190>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	2b04      	cmp	r3, #4
 800873c:	d00c      	beq.n	8008758 <HAL_TIM_Encoder_Init+0x190>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	2b08      	cmp	r3, #8
 8008744:	d008      	beq.n	8008758 <HAL_TIM_Encoder_Init+0x190>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	2b0c      	cmp	r3, #12
 800874c:	d004      	beq.n	8008758 <HAL_TIM_Encoder_Init+0x190>
 800874e:	f640 31da 	movw	r1, #3034	; 0xbda
 8008752:	4821      	ldr	r0, [pc, #132]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 8008754:	f7f9 fb8b 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	69db      	ldr	r3, [r3, #28]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d010      	beq.n	8008782 <HAL_TIM_Encoder_Init+0x1ba>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	69db      	ldr	r3, [r3, #28]
 8008764:	2b04      	cmp	r3, #4
 8008766:	d00c      	beq.n	8008782 <HAL_TIM_Encoder_Init+0x1ba>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	2b08      	cmp	r3, #8
 800876e:	d008      	beq.n	8008782 <HAL_TIM_Encoder_Init+0x1ba>
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	2b0c      	cmp	r3, #12
 8008776:	d004      	beq.n	8008782 <HAL_TIM_Encoder_Init+0x1ba>
 8008778:	f640 31db 	movw	r1, #3035	; 0xbdb
 800877c:	4816      	ldr	r0, [pc, #88]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 800877e:	f7f9 fb76 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	2b0f      	cmp	r3, #15
 8008788:	d904      	bls.n	8008794 <HAL_TIM_Encoder_Init+0x1cc>
 800878a:	f640 31dc 	movw	r1, #3036	; 0xbdc
 800878e:	4812      	ldr	r0, [pc, #72]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 8008790:	f7f9 fb6d 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	2b0f      	cmp	r3, #15
 800879a:	d904      	bls.n	80087a6 <HAL_TIM_Encoder_Init+0x1de>
 800879c:	f640 31dd 	movw	r1, #3037	; 0xbdd
 80087a0:	480d      	ldr	r0, [pc, #52]	; (80087d8 <HAL_TIM_Encoder_Init+0x210>)
 80087a2:	f7f9 fb64 	bl	8001e6e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d114      	bne.n	80087dc <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7fa fa22 	bl	8002c04 <HAL_TIM_Encoder_MspInit>
 80087c0:	e00c      	b.n	80087dc <HAL_TIM_Encoder_Init+0x214>
 80087c2:	bf00      	nop
 80087c4:	40010000 	.word	0x40010000
 80087c8:	40000400 	.word	0x40000400
 80087cc:	40000800 	.word	0x40000800
 80087d0:	40000c00 	.word	0x40000c00
 80087d4:	40014000 	.word	0x40014000
 80087d8:	08011e5c 	.word	0x08011e5c
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	6812      	ldr	r2, [r2, #0]
 80087ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087f2:	f023 0307 	bic.w	r3, r3, #7
 80087f6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3304      	adds	r3, #4
 8008800:	4619      	mov	r1, r3
 8008802:	4610      	mov	r0, r2
 8008804:	f000 ff72 	bl	80096ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008830:	f023 0303 	bic.w	r3, r3, #3
 8008834:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	689a      	ldr	r2, [r3, #8]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	021b      	lsls	r3, r3, #8
 8008840:	4313      	orrs	r3, r2
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	4313      	orrs	r3, r2
 8008846:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800884e:	f023 030c 	bic.w	r3, r3, #12
 8008852:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800885a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800885e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	68da      	ldr	r2, [r3, #12]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	4313      	orrs	r3, r2
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	4313      	orrs	r3, r2
 8008870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	011a      	lsls	r2, r3, #4
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	6a1b      	ldr	r3, [r3, #32]
 800887c:	031b      	lsls	r3, r3, #12
 800887e:	4313      	orrs	r3, r2
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	4313      	orrs	r3, r2
 8008884:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800888c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008894:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	4313      	orrs	r3, r2
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop

080088fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800890c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008914:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800891c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008924:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a4d      	ldr	r2, [pc, #308]	; (8008a60 <HAL_TIM_Encoder_Start+0x164>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d01d      	beq.n	800896c <HAL_TIM_Encoder_Start+0x70>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008938:	d018      	beq.n	800896c <HAL_TIM_Encoder_Start+0x70>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a49      	ldr	r2, [pc, #292]	; (8008a64 <HAL_TIM_Encoder_Start+0x168>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d013      	beq.n	800896c <HAL_TIM_Encoder_Start+0x70>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a47      	ldr	r2, [pc, #284]	; (8008a68 <HAL_TIM_Encoder_Start+0x16c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d00e      	beq.n	800896c <HAL_TIM_Encoder_Start+0x70>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a46      	ldr	r2, [pc, #280]	; (8008a6c <HAL_TIM_Encoder_Start+0x170>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d009      	beq.n	800896c <HAL_TIM_Encoder_Start+0x70>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a44      	ldr	r2, [pc, #272]	; (8008a70 <HAL_TIM_Encoder_Start+0x174>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d004      	beq.n	800896c <HAL_TIM_Encoder_Start+0x70>
 8008962:	f640 418e 	movw	r1, #3214	; 0xc8e
 8008966:	4843      	ldr	r0, [pc, #268]	; (8008a74 <HAL_TIM_Encoder_Start+0x178>)
 8008968:	f7f9 fa81 	bl	8001e6e <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d110      	bne.n	8008994 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008972:	7bfb      	ldrb	r3, [r7, #15]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d102      	bne.n	800897e <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008978:	7b7b      	ldrb	r3, [r7, #13]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d001      	beq.n	8008982 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e069      	b.n	8008a56 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2202      	movs	r2, #2
 8008986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2202      	movs	r2, #2
 800898e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008992:	e031      	b.n	80089f8 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b04      	cmp	r3, #4
 8008998:	d110      	bne.n	80089bc <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d102      	bne.n	80089a6 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80089a0:	7b3b      	ldrb	r3, [r7, #12]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d001      	beq.n	80089aa <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e055      	b.n	8008a56 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2202      	movs	r2, #2
 80089ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2202      	movs	r2, #2
 80089b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089ba:	e01d      	b.n	80089f8 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d108      	bne.n	80089d4 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d105      	bne.n	80089d4 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089c8:	7b7b      	ldrb	r3, [r7, #13]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d102      	bne.n	80089d4 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80089ce:	7b3b      	ldrb	r3, [r7, #12]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d001      	beq.n	80089d8 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e03e      	b.n	8008a56 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2202      	movs	r2, #2
 80089dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <HAL_TIM_Encoder_Start+0x10a>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d008      	beq.n	8008a16 <HAL_TIM_Encoder_Start+0x11a>
 8008a04:	e00f      	b.n	8008a26 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 f99c 	bl	8009d4c <TIM_CCxChannelCmd>
      break;
 8008a14:	e016      	b.n	8008a44 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	2104      	movs	r1, #4
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f001 f994 	bl	8009d4c <TIM_CCxChannelCmd>
      break;
 8008a24:	e00e      	b.n	8008a44 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 f98c 	bl	8009d4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	2104      	movs	r1, #4
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f001 f985 	bl	8009d4c <TIM_CCxChannelCmd>
      break;
 8008a42:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f042 0201 	orr.w	r2, r2, #1
 8008a52:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	40010000 	.word	0x40010000
 8008a64:	40000400 	.word	0x40000400
 8008a68:	40000800 	.word	0x40000800
 8008a6c:	40000c00 	.word	0x40000c00
 8008a70:	40014000 	.word	0x40014000
 8008a74:	08011e5c 	.word	0x08011e5c

08008a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d122      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d11b      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f06f 0202 	mvn.w	r2, #2
 8008aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fda4 	bl	8009608 <HAL_TIM_IC_CaptureCallback>
 8008ac0:	e005      	b.n	8008ace <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fd96 	bl	80095f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fda7 	bl	800961c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	f003 0304 	and.w	r3, r3, #4
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d122      	bne.n	8008b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d11b      	bne.n	8008b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f06f 0204 	mvn.w	r2, #4
 8008af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2202      	movs	r2, #2
 8008afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fd7a 	bl	8009608 <HAL_TIM_IC_CaptureCallback>
 8008b14:	e005      	b.n	8008b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fd6c 	bl	80095f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fd7d 	bl	800961c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b08      	cmp	r3, #8
 8008b34:	d122      	bne.n	8008b7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d11b      	bne.n	8008b7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f06f 0208 	mvn.w	r2, #8
 8008b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2204      	movs	r2, #4
 8008b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fd50 	bl	8009608 <HAL_TIM_IC_CaptureCallback>
 8008b68:	e005      	b.n	8008b76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fd42 	bl	80095f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fd53 	bl	800961c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 0310 	and.w	r3, r3, #16
 8008b86:	2b10      	cmp	r3, #16
 8008b88:	d122      	bne.n	8008bd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f003 0310 	and.w	r3, r3, #16
 8008b94:	2b10      	cmp	r3, #16
 8008b96:	d11b      	bne.n	8008bd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f06f 0210 	mvn.w	r2, #16
 8008ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2208      	movs	r2, #8
 8008ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fd26 	bl	8009608 <HAL_TIM_IC_CaptureCallback>
 8008bbc:	e005      	b.n	8008bca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fd18 	bl	80095f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fd29 	bl	800961c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d10e      	bne.n	8008bfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d107      	bne.n	8008bfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f06f 0201 	mvn.w	r2, #1
 8008bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7f9 f922 	bl	8001e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c06:	2b80      	cmp	r3, #128	; 0x80
 8008c08:	d10e      	bne.n	8008c28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c14:	2b80      	cmp	r3, #128	; 0x80
 8008c16:	d107      	bne.n	8008c28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 f9c6 	bl	8009fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c32:	2b40      	cmp	r3, #64	; 0x40
 8008c34:	d10e      	bne.n	8008c54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c40:	2b40      	cmp	r3, #64	; 0x40
 8008c42:	d107      	bne.n	8008c54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fcee 	bl	8009630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	f003 0320 	and.w	r3, r3, #32
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	d10e      	bne.n	8008c80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	2b20      	cmp	r3, #32
 8008c6e:	d107      	bne.n	8008c80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f06f 0220 	mvn.w	r2, #32
 8008c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 f990 	bl	8009fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d010      	beq.n	8008cc0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	d00d      	beq.n	8008cc0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b08      	cmp	r3, #8
 8008ca8:	d00a      	beq.n	8008cc0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b0c      	cmp	r3, #12
 8008cae:	d007      	beq.n	8008cc0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b3c      	cmp	r3, #60	; 0x3c
 8008cb4:	d004      	beq.n	8008cc0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008cb6:	f241 0177 	movw	r1, #4215	; 0x1077
 8008cba:	4893      	ldr	r0, [pc, #588]	; (8008f08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008cbc:	f7f9 f8d7 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b60      	cmp	r3, #96	; 0x60
 8008cc6:	d008      	beq.n	8008cda <HAL_TIM_PWM_ConfigChannel+0x52>
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b70      	cmp	r3, #112	; 0x70
 8008cce:	d004      	beq.n	8008cda <HAL_TIM_PWM_ConfigChannel+0x52>
 8008cd0:	f241 0178 	movw	r1, #4216	; 0x1078
 8008cd4:	488c      	ldr	r0, [pc, #560]	; (8008f08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008cd6:	f7f9 f8ca 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d008      	beq.n	8008cf4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d004      	beq.n	8008cf4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8008cea:	f241 0179 	movw	r1, #4217	; 0x1079
 8008cee:	4886      	ldr	r0, [pc, #536]	; (8008f08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008cf0:	f7f9 f8bd 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d008      	beq.n	8008d0e <HAL_TIM_PWM_ConfigChannel+0x86>
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	2b04      	cmp	r3, #4
 8008d02:	d004      	beq.n	8008d0e <HAL_TIM_PWM_ConfigChannel+0x86>
 8008d04:	f241 017a 	movw	r1, #4218	; 0x107a
 8008d08:	487f      	ldr	r0, [pc, #508]	; (8008f08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008d0a:	f7f9 f8b0 	bl	8001e6e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d101      	bne.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0x94>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	e14c      	b.n	8008fb6 <HAL_TIM_PWM_ConfigChannel+0x32e>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b0c      	cmp	r3, #12
 8008d28:	f200 813d 	bhi.w	8008fa6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 8008d2c:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8008d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d32:	bf00      	nop
 8008d34:	08008d69 	.word	0x08008d69
 8008d38:	08008fa7 	.word	0x08008fa7
 8008d3c:	08008fa7 	.word	0x08008fa7
 8008d40:	08008fa7 	.word	0x08008fa7
 8008d44:	08008e03 	.word	0x08008e03
 8008d48:	08008fa7 	.word	0x08008fa7
 8008d4c:	08008fa7 	.word	0x08008fa7
 8008d50:	08008fa7 	.word	0x08008fa7
 8008d54:	08008e8b 	.word	0x08008e8b
 8008d58:	08008fa7 	.word	0x08008fa7
 8008d5c:	08008fa7 	.word	0x08008fa7
 8008d60:	08008fa7 	.word	0x08008fa7
 8008d64:	08008f29 	.word	0x08008f29
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a67      	ldr	r2, [pc, #412]	; (8008f0c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d027      	beq.n	8008dc2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d7a:	d022      	beq.n	8008dc2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a63      	ldr	r2, [pc, #396]	; (8008f10 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d01d      	beq.n	8008dc2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a62      	ldr	r2, [pc, #392]	; (8008f14 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d018      	beq.n	8008dc2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a60      	ldr	r2, [pc, #384]	; (8008f18 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d013      	beq.n	8008dc2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a5f      	ldr	r2, [pc, #380]	; (8008f1c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00e      	beq.n	8008dc2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a5d      	ldr	r2, [pc, #372]	; (8008f20 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d009      	beq.n	8008dc2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a5c      	ldr	r2, [pc, #368]	; (8008f24 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d004      	beq.n	8008dc2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008db8:	f241 0184 	movw	r1, #4228	; 0x1084
 8008dbc:	4852      	ldr	r0, [pc, #328]	; (8008f08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008dbe:	f7f9 f856 	bl	8001e6e <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68b9      	ldr	r1, [r7, #8]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 fd0f 	bl	80097ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	699a      	ldr	r2, [r3, #24]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f042 0208 	orr.w	r2, r2, #8
 8008ddc:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699a      	ldr	r2, [r3, #24]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0204 	bic.w	r2, r2, #4
 8008dec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6999      	ldr	r1, [r3, #24]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	691a      	ldr	r2, [r3, #16]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	619a      	str	r2, [r3, #24]
      break;
 8008e00:	e0d4      	b.n	8008fac <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a41      	ldr	r2, [pc, #260]	; (8008f0c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d01d      	beq.n	8008e48 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e14:	d018      	beq.n	8008e48 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a3d      	ldr	r2, [pc, #244]	; (8008f10 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d013      	beq.n	8008e48 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a3b      	ldr	r2, [pc, #236]	; (8008f14 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d00e      	beq.n	8008e48 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a3a      	ldr	r2, [pc, #232]	; (8008f18 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d009      	beq.n	8008e48 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a38      	ldr	r2, [pc, #224]	; (8008f1c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d004      	beq.n	8008e48 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008e3e:	f241 0195 	movw	r1, #4245	; 0x1095
 8008e42:	4831      	ldr	r0, [pc, #196]	; (8008f08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008e44:	f7f9 f813 	bl	8001e6e <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68b9      	ldr	r1, [r7, #8]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fd5c 	bl	800990c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699a      	ldr	r2, [r3, #24]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	699a      	ldr	r2, [r3, #24]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6999      	ldr	r1, [r3, #24]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	021a      	lsls	r2, r3, #8
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	430a      	orrs	r2, r1
 8008e86:	619a      	str	r2, [r3, #24]
      break;
 8008e88:	e090      	b.n	8008fac <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1f      	ldr	r2, [pc, #124]	; (8008f0c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d018      	beq.n	8008ec6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e9c:	d013      	beq.n	8008ec6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a1b      	ldr	r2, [pc, #108]	; (8008f10 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00e      	beq.n	8008ec6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a19      	ldr	r2, [pc, #100]	; (8008f14 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d009      	beq.n	8008ec6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a18      	ldr	r2, [pc, #96]	; (8008f18 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d004      	beq.n	8008ec6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008ebc:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8008ec0:	4811      	ldr	r0, [pc, #68]	; (8008f08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008ec2:	f7f8 ffd4 	bl	8001e6e <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 fdb1 	bl	8009a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 0208 	orr.w	r2, r2, #8
 8008ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69da      	ldr	r2, [r3, #28]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 0204 	bic.w	r2, r2, #4
 8008ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69d9      	ldr	r1, [r3, #28]
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	691a      	ldr	r2, [r3, #16]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	61da      	str	r2, [r3, #28]
      break;
 8008f04:	e052      	b.n	8008fac <HAL_TIM_PWM_ConfigChannel+0x324>
 8008f06:	bf00      	nop
 8008f08:	08011e5c 	.word	0x08011e5c
 8008f0c:	40010000 	.word	0x40010000
 8008f10:	40000400 	.word	0x40000400
 8008f14:	40000800 	.word	0x40000800
 8008f18:	40000c00 	.word	0x40000c00
 8008f1c:	40014000 	.word	0x40014000
 8008f20:	40014400 	.word	0x40014400
 8008f24:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a24      	ldr	r2, [pc, #144]	; (8008fc0 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d018      	beq.n	8008f64 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f3a:	d013      	beq.n	8008f64 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a20      	ldr	r2, [pc, #128]	; (8008fc4 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d00e      	beq.n	8008f64 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a1f      	ldr	r2, [pc, #124]	; (8008fc8 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d009      	beq.n	8008f64 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a1d      	ldr	r2, [pc, #116]	; (8008fcc <HAL_TIM_PWM_ConfigChannel+0x344>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d004      	beq.n	8008f64 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008f5a:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8008f5e:	481c      	ldr	r0, [pc, #112]	; (8008fd0 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8008f60:	f7f8 ff85 	bl	8001e6e <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68b9      	ldr	r1, [r7, #8]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 fdf6 	bl	8009b5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	69da      	ldr	r2, [r3, #28]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f7e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	69da      	ldr	r2, [r3, #28]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	69d9      	ldr	r1, [r3, #28]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	021a      	lsls	r2, r3, #8
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	61da      	str	r2, [r3, #28]
      break;
 8008fa4:	e002      	b.n	8008fac <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8008faa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	40010000 	.word	0x40010000
 8008fc4:	40000400 	.word	0x40000400
 8008fc8:	40000800 	.word	0x40000800
 8008fcc:	40000c00 	.word	0x40000c00
 8008fd0:	08011e5c 	.word	0x08011e5c

08008fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d101      	bne.n	8008ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8008fec:	2302      	movs	r3, #2
 8008fee:	e2f0      	b.n	80095d2 <HAL_TIM_ConfigClockSource+0x5fe>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009008:	d029      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x8a>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b70      	cmp	r3, #112	; 0x70
 8009010:	d025      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x8a>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800901a:	d020      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x8a>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b40      	cmp	r3, #64	; 0x40
 8009022:	d01c      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x8a>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b50      	cmp	r3, #80	; 0x50
 800902a:	d018      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x8a>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b60      	cmp	r3, #96	; 0x60
 8009032:	d014      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x8a>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d010      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x8a>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b10      	cmp	r3, #16
 8009042:	d00c      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x8a>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b20      	cmp	r3, #32
 800904a:	d008      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x8a>
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b30      	cmp	r3, #48	; 0x30
 8009052:	d004      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x8a>
 8009054:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8009058:	487c      	ldr	r0, [pc, #496]	; (800924c <HAL_TIM_ConfigClockSource+0x278>)
 800905a:	f7f8 ff08 	bl	8001e6e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800906c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009074:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009086:	f000 80f1 	beq.w	800926c <HAL_TIM_ConfigClockSource+0x298>
 800908a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800908e:	f200 8293 	bhi.w	80095b8 <HAL_TIM_ConfigClockSource+0x5e4>
 8009092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009096:	d02d      	beq.n	80090f4 <HAL_TIM_ConfigClockSource+0x120>
 8009098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800909c:	f200 828c 	bhi.w	80095b8 <HAL_TIM_ConfigClockSource+0x5e4>
 80090a0:	2b70      	cmp	r3, #112	; 0x70
 80090a2:	d05d      	beq.n	8009160 <HAL_TIM_ConfigClockSource+0x18c>
 80090a4:	2b70      	cmp	r3, #112	; 0x70
 80090a6:	f200 8287 	bhi.w	80095b8 <HAL_TIM_ConfigClockSource+0x5e4>
 80090aa:	2b60      	cmp	r3, #96	; 0x60
 80090ac:	f000 81a0 	beq.w	80093f0 <HAL_TIM_ConfigClockSource+0x41c>
 80090b0:	2b60      	cmp	r3, #96	; 0x60
 80090b2:	f200 8281 	bhi.w	80095b8 <HAL_TIM_ConfigClockSource+0x5e4>
 80090b6:	2b50      	cmp	r3, #80	; 0x50
 80090b8:	f000 8144 	beq.w	8009344 <HAL_TIM_ConfigClockSource+0x370>
 80090bc:	2b50      	cmp	r3, #80	; 0x50
 80090be:	f200 827b 	bhi.w	80095b8 <HAL_TIM_ConfigClockSource+0x5e4>
 80090c2:	2b40      	cmp	r3, #64	; 0x40
 80090c4:	f000 81f6 	beq.w	80094b4 <HAL_TIM_ConfigClockSource+0x4e0>
 80090c8:	2b40      	cmp	r3, #64	; 0x40
 80090ca:	f200 8275 	bhi.w	80095b8 <HAL_TIM_ConfigClockSource+0x5e4>
 80090ce:	2b30      	cmp	r3, #48	; 0x30
 80090d0:	f000 8246 	beq.w	8009560 <HAL_TIM_ConfigClockSource+0x58c>
 80090d4:	2b30      	cmp	r3, #48	; 0x30
 80090d6:	f200 826f 	bhi.w	80095b8 <HAL_TIM_ConfigClockSource+0x5e4>
 80090da:	2b20      	cmp	r3, #32
 80090dc:	f000 8240 	beq.w	8009560 <HAL_TIM_ConfigClockSource+0x58c>
 80090e0:	2b20      	cmp	r3, #32
 80090e2:	f200 8269 	bhi.w	80095b8 <HAL_TIM_ConfigClockSource+0x5e4>
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 823a 	beq.w	8009560 <HAL_TIM_ConfigClockSource+0x58c>
 80090ec:	2b10      	cmp	r3, #16
 80090ee:	f000 8237 	beq.w	8009560 <HAL_TIM_ConfigClockSource+0x58c>
 80090f2:	e261      	b.n	80095b8 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a55      	ldr	r2, [pc, #340]	; (8009250 <HAL_TIM_ConfigClockSource+0x27c>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	f000 825f 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x5ea>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009108:	f000 8259 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x5ea>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a50      	ldr	r2, [pc, #320]	; (8009254 <HAL_TIM_ConfigClockSource+0x280>)
 8009112:	4293      	cmp	r3, r2
 8009114:	f000 8253 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x5ea>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a4e      	ldr	r2, [pc, #312]	; (8009258 <HAL_TIM_ConfigClockSource+0x284>)
 800911e:	4293      	cmp	r3, r2
 8009120:	f000 824d 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x5ea>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a4c      	ldr	r2, [pc, #304]	; (800925c <HAL_TIM_ConfigClockSource+0x288>)
 800912a:	4293      	cmp	r3, r2
 800912c:	f000 8247 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x5ea>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a4a      	ldr	r2, [pc, #296]	; (8009260 <HAL_TIM_ConfigClockSource+0x28c>)
 8009136:	4293      	cmp	r3, r2
 8009138:	f000 8241 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x5ea>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a48      	ldr	r2, [pc, #288]	; (8009264 <HAL_TIM_ConfigClockSource+0x290>)
 8009142:	4293      	cmp	r3, r2
 8009144:	f000 823b 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x5ea>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a46      	ldr	r2, [pc, #280]	; (8009268 <HAL_TIM_ConfigClockSource+0x294>)
 800914e:	4293      	cmp	r3, r2
 8009150:	f000 8235 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x5ea>
 8009154:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8009158:	483c      	ldr	r0, [pc, #240]	; (800924c <HAL_TIM_ConfigClockSource+0x278>)
 800915a:	f7f8 fe88 	bl	8001e6e <assert_failed>
      break;
 800915e:	e22e      	b.n	80095be <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a3a      	ldr	r2, [pc, #232]	; (8009250 <HAL_TIM_ConfigClockSource+0x27c>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d01d      	beq.n	80091a6 <HAL_TIM_ConfigClockSource+0x1d2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009172:	d018      	beq.n	80091a6 <HAL_TIM_ConfigClockSource+0x1d2>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a36      	ldr	r2, [pc, #216]	; (8009254 <HAL_TIM_ConfigClockSource+0x280>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d013      	beq.n	80091a6 <HAL_TIM_ConfigClockSource+0x1d2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a35      	ldr	r2, [pc, #212]	; (8009258 <HAL_TIM_ConfigClockSource+0x284>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d00e      	beq.n	80091a6 <HAL_TIM_ConfigClockSource+0x1d2>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a33      	ldr	r2, [pc, #204]	; (800925c <HAL_TIM_ConfigClockSource+0x288>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d009      	beq.n	80091a6 <HAL_TIM_ConfigClockSource+0x1d2>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a32      	ldr	r2, [pc, #200]	; (8009260 <HAL_TIM_ConfigClockSource+0x28c>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d004      	beq.n	80091a6 <HAL_TIM_ConfigClockSource+0x1d2>
 800919c:	f241 41ca 	movw	r1, #5322	; 0x14ca
 80091a0:	482a      	ldr	r0, [pc, #168]	; (800924c <HAL_TIM_ConfigClockSource+0x278>)
 80091a2:	f7f8 fe64 	bl	8001e6e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d013      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x202>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b6:	d00e      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x202>
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091c0:	d009      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x202>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091ca:	d004      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x202>
 80091cc:	f241 41cd 	movw	r1, #5325	; 0x14cd
 80091d0:	481e      	ldr	r0, [pc, #120]	; (800924c <HAL_TIM_ConfigClockSource+0x278>)
 80091d2:	f7f8 fe4c 	bl	8001e6e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091de:	d014      	beq.n	800920a <HAL_TIM_ConfigClockSource+0x236>
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d010      	beq.n	800920a <HAL_TIM_ConfigClockSource+0x236>
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00c      	beq.n	800920a <HAL_TIM_ConfigClockSource+0x236>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d008      	beq.n	800920a <HAL_TIM_ConfigClockSource+0x236>
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2b0a      	cmp	r3, #10
 80091fe:	d004      	beq.n	800920a <HAL_TIM_ConfigClockSource+0x236>
 8009200:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8009204:	4811      	ldr	r0, [pc, #68]	; (800924c <HAL_TIM_ConfigClockSource+0x278>)
 8009206:	f7f8 fe32 	bl	8001e6e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	2b0f      	cmp	r3, #15
 8009210:	d904      	bls.n	800921c <HAL_TIM_ConfigClockSource+0x248>
 8009212:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8009216:	480d      	ldr	r0, [pc, #52]	; (800924c <HAL_TIM_ConfigClockSource+0x278>)
 8009218:	f7f8 fe29 	bl	8001e6e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6818      	ldr	r0, [r3, #0]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	6899      	ldr	r1, [r3, #8]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	f000 fd6e 	bl	8009d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800923e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	609a      	str	r2, [r3, #8]
      break;
 8009248:	e1ba      	b.n	80095c0 <HAL_TIM_ConfigClockSource+0x5ec>
 800924a:	bf00      	nop
 800924c:	08011e5c 	.word	0x08011e5c
 8009250:	40010000 	.word	0x40010000
 8009254:	40000400 	.word	0x40000400
 8009258:	40000800 	.word	0x40000800
 800925c:	40000c00 	.word	0x40000c00
 8009260:	40014000 	.word	0x40014000
 8009264:	40014400 	.word	0x40014400
 8009268:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a8a      	ldr	r2, [pc, #552]	; (800949c <HAL_TIM_ConfigClockSource+0x4c8>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d018      	beq.n	80092a8 <HAL_TIM_ConfigClockSource+0x2d4>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800927e:	d013      	beq.n	80092a8 <HAL_TIM_ConfigClockSource+0x2d4>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a86      	ldr	r2, [pc, #536]	; (80094a0 <HAL_TIM_ConfigClockSource+0x4cc>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d00e      	beq.n	80092a8 <HAL_TIM_ConfigClockSource+0x2d4>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a85      	ldr	r2, [pc, #532]	; (80094a4 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d009      	beq.n	80092a8 <HAL_TIM_ConfigClockSource+0x2d4>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a83      	ldr	r2, [pc, #524]	; (80094a8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d004      	beq.n	80092a8 <HAL_TIM_ConfigClockSource+0x2d4>
 800929e:	f241 41e2 	movw	r1, #5346	; 0x14e2
 80092a2:	4882      	ldr	r0, [pc, #520]	; (80094ac <HAL_TIM_ConfigClockSource+0x4d8>)
 80092a4:	f7f8 fde3 	bl	8001e6e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d013      	beq.n	80092d8 <HAL_TIM_ConfigClockSource+0x304>
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b8:	d00e      	beq.n	80092d8 <HAL_TIM_ConfigClockSource+0x304>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092c2:	d009      	beq.n	80092d8 <HAL_TIM_ConfigClockSource+0x304>
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092cc:	d004      	beq.n	80092d8 <HAL_TIM_ConfigClockSource+0x304>
 80092ce:	f241 41e5 	movw	r1, #5349	; 0x14e5
 80092d2:	4876      	ldr	r0, [pc, #472]	; (80094ac <HAL_TIM_ConfigClockSource+0x4d8>)
 80092d4:	f7f8 fdcb 	bl	8001e6e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092e0:	d014      	beq.n	800930c <HAL_TIM_ConfigClockSource+0x338>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d010      	beq.n	800930c <HAL_TIM_ConfigClockSource+0x338>
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00c      	beq.n	800930c <HAL_TIM_ConfigClockSource+0x338>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d008      	beq.n	800930c <HAL_TIM_ConfigClockSource+0x338>
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	2b0a      	cmp	r3, #10
 8009300:	d004      	beq.n	800930c <HAL_TIM_ConfigClockSource+0x338>
 8009302:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8009306:	4869      	ldr	r0, [pc, #420]	; (80094ac <HAL_TIM_ConfigClockSource+0x4d8>)
 8009308:	f7f8 fdb1 	bl	8001e6e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	2b0f      	cmp	r3, #15
 8009312:	d904      	bls.n	800931e <HAL_TIM_ConfigClockSource+0x34a>
 8009314:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8009318:	4864      	ldr	r0, [pc, #400]	; (80094ac <HAL_TIM_ConfigClockSource+0x4d8>)
 800931a:	f7f8 fda8 	bl	8001e6e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	6899      	ldr	r1, [r3, #8]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f000 fced 	bl	8009d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009340:	609a      	str	r2, [r3, #8]
      break;
 8009342:	e13d      	b.n	80095c0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a54      	ldr	r2, [pc, #336]	; (800949c <HAL_TIM_ConfigClockSource+0x4c8>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d01d      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x3b6>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009356:	d018      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x3b6>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a50      	ldr	r2, [pc, #320]	; (80094a0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d013      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x3b6>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a4f      	ldr	r2, [pc, #316]	; (80094a4 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00e      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x3b6>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a4d      	ldr	r2, [pc, #308]	; (80094a8 <HAL_TIM_ConfigClockSource+0x4d4>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d009      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x3b6>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a4d      	ldr	r2, [pc, #308]	; (80094b0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d004      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x3b6>
 8009380:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8009384:	4849      	ldr	r0, [pc, #292]	; (80094ac <HAL_TIM_ConfigClockSource+0x4d8>)
 8009386:	f7f8 fd72 	bl	8001e6e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009392:	d014      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x3ea>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d010      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x3ea>
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00c      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x3ea>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d008      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x3ea>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	2b0a      	cmp	r3, #10
 80093b2:	d004      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x3ea>
 80093b4:	f241 41f9 	movw	r1, #5369	; 0x14f9
 80093b8:	483c      	ldr	r0, [pc, #240]	; (80094ac <HAL_TIM_ConfigClockSource+0x4d8>)
 80093ba:	f7f8 fd58 	bl	8001e6e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	2b0f      	cmp	r3, #15
 80093c4:	d904      	bls.n	80093d0 <HAL_TIM_ConfigClockSource+0x3fc>
 80093c6:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80093ca:	4838      	ldr	r0, [pc, #224]	; (80094ac <HAL_TIM_ConfigClockSource+0x4d8>)
 80093cc:	f7f8 fd4f 	bl	8001e6e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6818      	ldr	r0, [r3, #0]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	6859      	ldr	r1, [r3, #4]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	461a      	mov	r2, r3
 80093de:	f000 fc1b 	bl	8009c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2150      	movs	r1, #80	; 0x50
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 fc74 	bl	8009cd6 <TIM_ITRx_SetConfig>
      break;
 80093ee:	e0e7      	b.n	80095c0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a29      	ldr	r2, [pc, #164]	; (800949c <HAL_TIM_ConfigClockSource+0x4c8>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d01d      	beq.n	8009436 <HAL_TIM_ConfigClockSource+0x462>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009402:	d018      	beq.n	8009436 <HAL_TIM_ConfigClockSource+0x462>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a25      	ldr	r2, [pc, #148]	; (80094a0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d013      	beq.n	8009436 <HAL_TIM_ConfigClockSource+0x462>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a24      	ldr	r2, [pc, #144]	; (80094a4 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d00e      	beq.n	8009436 <HAL_TIM_ConfigClockSource+0x462>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a22      	ldr	r2, [pc, #136]	; (80094a8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d009      	beq.n	8009436 <HAL_TIM_ConfigClockSource+0x462>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a22      	ldr	r2, [pc, #136]	; (80094b0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d004      	beq.n	8009436 <HAL_TIM_ConfigClockSource+0x462>
 800942c:	f241 5106 	movw	r1, #5382	; 0x1506
 8009430:	481e      	ldr	r0, [pc, #120]	; (80094ac <HAL_TIM_ConfigClockSource+0x4d8>)
 8009432:	f7f8 fd1c 	bl	8001e6e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800943e:	d014      	beq.n	800946a <HAL_TIM_ConfigClockSource+0x496>
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d010      	beq.n	800946a <HAL_TIM_ConfigClockSource+0x496>
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00c      	beq.n	800946a <HAL_TIM_ConfigClockSource+0x496>
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	2b02      	cmp	r3, #2
 8009456:	d008      	beq.n	800946a <HAL_TIM_ConfigClockSource+0x496>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	2b0a      	cmp	r3, #10
 800945e:	d004      	beq.n	800946a <HAL_TIM_ConfigClockSource+0x496>
 8009460:	f241 5109 	movw	r1, #5385	; 0x1509
 8009464:	4811      	ldr	r0, [pc, #68]	; (80094ac <HAL_TIM_ConfigClockSource+0x4d8>)
 8009466:	f7f8 fd02 	bl	8001e6e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	2b0f      	cmp	r3, #15
 8009470:	d904      	bls.n	800947c <HAL_TIM_ConfigClockSource+0x4a8>
 8009472:	f241 510a 	movw	r1, #5386	; 0x150a
 8009476:	480d      	ldr	r0, [pc, #52]	; (80094ac <HAL_TIM_ConfigClockSource+0x4d8>)
 8009478:	f7f8 fcf9 	bl	8001e6e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6818      	ldr	r0, [r3, #0]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	6859      	ldr	r1, [r3, #4]
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	461a      	mov	r2, r3
 800948a:	f000 fbf4 	bl	8009c76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2160      	movs	r1, #96	; 0x60
 8009494:	4618      	mov	r0, r3
 8009496:	f000 fc1e 	bl	8009cd6 <TIM_ITRx_SetConfig>
      break;
 800949a:	e091      	b.n	80095c0 <HAL_TIM_ConfigClockSource+0x5ec>
 800949c:	40010000 	.word	0x40010000
 80094a0:	40000400 	.word	0x40000400
 80094a4:	40000800 	.word	0x40000800
 80094a8:	40000c00 	.word	0x40000c00
 80094ac:	08011e5c 	.word	0x08011e5c
 80094b0:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a48      	ldr	r2, [pc, #288]	; (80095dc <HAL_TIM_ConfigClockSource+0x608>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d01d      	beq.n	80094fa <HAL_TIM_ConfigClockSource+0x526>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c6:	d018      	beq.n	80094fa <HAL_TIM_ConfigClockSource+0x526>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a44      	ldr	r2, [pc, #272]	; (80095e0 <HAL_TIM_ConfigClockSource+0x60c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d013      	beq.n	80094fa <HAL_TIM_ConfigClockSource+0x526>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a43      	ldr	r2, [pc, #268]	; (80095e4 <HAL_TIM_ConfigClockSource+0x610>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d00e      	beq.n	80094fa <HAL_TIM_ConfigClockSource+0x526>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a41      	ldr	r2, [pc, #260]	; (80095e8 <HAL_TIM_ConfigClockSource+0x614>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d009      	beq.n	80094fa <HAL_TIM_ConfigClockSource+0x526>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a40      	ldr	r2, [pc, #256]	; (80095ec <HAL_TIM_ConfigClockSource+0x618>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d004      	beq.n	80094fa <HAL_TIM_ConfigClockSource+0x526>
 80094f0:	f241 5116 	movw	r1, #5398	; 0x1516
 80094f4:	483e      	ldr	r0, [pc, #248]	; (80095f0 <HAL_TIM_ConfigClockSource+0x61c>)
 80094f6:	f7f8 fcba 	bl	8001e6e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009502:	d014      	beq.n	800952e <HAL_TIM_ConfigClockSource+0x55a>
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d010      	beq.n	800952e <HAL_TIM_ConfigClockSource+0x55a>
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00c      	beq.n	800952e <HAL_TIM_ConfigClockSource+0x55a>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	2b02      	cmp	r3, #2
 800951a:	d008      	beq.n	800952e <HAL_TIM_ConfigClockSource+0x55a>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	2b0a      	cmp	r3, #10
 8009522:	d004      	beq.n	800952e <HAL_TIM_ConfigClockSource+0x55a>
 8009524:	f241 5119 	movw	r1, #5401	; 0x1519
 8009528:	4831      	ldr	r0, [pc, #196]	; (80095f0 <HAL_TIM_ConfigClockSource+0x61c>)
 800952a:	f7f8 fca0 	bl	8001e6e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	2b0f      	cmp	r3, #15
 8009534:	d904      	bls.n	8009540 <HAL_TIM_ConfigClockSource+0x56c>
 8009536:	f241 511a 	movw	r1, #5402	; 0x151a
 800953a:	482d      	ldr	r0, [pc, #180]	; (80095f0 <HAL_TIM_ConfigClockSource+0x61c>)
 800953c:	f7f8 fc97 	bl	8001e6e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	6859      	ldr	r1, [r3, #4]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	461a      	mov	r2, r3
 800954e:	f000 fb63 	bl	8009c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2140      	movs	r1, #64	; 0x40
 8009558:	4618      	mov	r0, r3
 800955a:	f000 fbbc 	bl	8009cd6 <TIM_ITRx_SetConfig>
      break;
 800955e:	e02f      	b.n	80095c0 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a1d      	ldr	r2, [pc, #116]	; (80095dc <HAL_TIM_ConfigClockSource+0x608>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d01d      	beq.n	80095a6 <HAL_TIM_ConfigClockSource+0x5d2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009572:	d018      	beq.n	80095a6 <HAL_TIM_ConfigClockSource+0x5d2>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a19      	ldr	r2, [pc, #100]	; (80095e0 <HAL_TIM_ConfigClockSource+0x60c>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d013      	beq.n	80095a6 <HAL_TIM_ConfigClockSource+0x5d2>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a18      	ldr	r2, [pc, #96]	; (80095e4 <HAL_TIM_ConfigClockSource+0x610>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d00e      	beq.n	80095a6 <HAL_TIM_ConfigClockSource+0x5d2>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a16      	ldr	r2, [pc, #88]	; (80095e8 <HAL_TIM_ConfigClockSource+0x614>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d009      	beq.n	80095a6 <HAL_TIM_ConfigClockSource+0x5d2>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a15      	ldr	r2, [pc, #84]	; (80095ec <HAL_TIM_ConfigClockSource+0x618>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d004      	beq.n	80095a6 <HAL_TIM_ConfigClockSource+0x5d2>
 800959c:	f241 5129 	movw	r1, #5417	; 0x1529
 80095a0:	4813      	ldr	r0, [pc, #76]	; (80095f0 <HAL_TIM_ConfigClockSource+0x61c>)
 80095a2:	f7f8 fc64 	bl	8001e6e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f000 fb90 	bl	8009cd6 <TIM_ITRx_SetConfig>
      break;
 80095b6:	e003      	b.n	80095c0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	73fb      	strb	r3, [r7, #15]
      break;
 80095bc:	e000      	b.n	80095c0 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 80095be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	40010000 	.word	0x40010000
 80095e0:	40000400 	.word	0x40000400
 80095e4:	40000800 	.word	0x40000800
 80095e8:	40000c00 	.word	0x40000c00
 80095ec:	40014000 	.word	0x40014000
 80095f0:	08011e5c 	.word	0x08011e5c

080095f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	429a      	cmp	r2, r3
 800966e:	d107      	bne.n	8009680 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2201      	movs	r2, #1
 8009674:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800967e:	e02a      	b.n	80096d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	429a      	cmp	r2, r3
 8009688:	d107      	bne.n	800969a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2202      	movs	r2, #2
 800968e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009698:	e01d      	b.n	80096d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d107      	bne.n	80096b4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2204      	movs	r2, #4
 80096a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096b2:	e010      	b.n	80096d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d107      	bne.n	80096ce <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2208      	movs	r2, #8
 80096c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096cc:	e003      	b.n	80096d6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f7ff ffb4 	bl	8009644 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	771a      	strb	r2, [r3, #28]
}
 80096e2:	bf00      	nop
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a34      	ldr	r2, [pc, #208]	; (80097d0 <TIM_Base_SetConfig+0xe4>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d00f      	beq.n	8009724 <TIM_Base_SetConfig+0x38>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970a:	d00b      	beq.n	8009724 <TIM_Base_SetConfig+0x38>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a31      	ldr	r2, [pc, #196]	; (80097d4 <TIM_Base_SetConfig+0xe8>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d007      	beq.n	8009724 <TIM_Base_SetConfig+0x38>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a30      	ldr	r2, [pc, #192]	; (80097d8 <TIM_Base_SetConfig+0xec>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d003      	beq.n	8009724 <TIM_Base_SetConfig+0x38>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a2f      	ldr	r2, [pc, #188]	; (80097dc <TIM_Base_SetConfig+0xf0>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d108      	bne.n	8009736 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a25      	ldr	r2, [pc, #148]	; (80097d0 <TIM_Base_SetConfig+0xe4>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d01b      	beq.n	8009776 <TIM_Base_SetConfig+0x8a>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009744:	d017      	beq.n	8009776 <TIM_Base_SetConfig+0x8a>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a22      	ldr	r2, [pc, #136]	; (80097d4 <TIM_Base_SetConfig+0xe8>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d013      	beq.n	8009776 <TIM_Base_SetConfig+0x8a>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a21      	ldr	r2, [pc, #132]	; (80097d8 <TIM_Base_SetConfig+0xec>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d00f      	beq.n	8009776 <TIM_Base_SetConfig+0x8a>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a20      	ldr	r2, [pc, #128]	; (80097dc <TIM_Base_SetConfig+0xf0>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d00b      	beq.n	8009776 <TIM_Base_SetConfig+0x8a>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a1f      	ldr	r2, [pc, #124]	; (80097e0 <TIM_Base_SetConfig+0xf4>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d007      	beq.n	8009776 <TIM_Base_SetConfig+0x8a>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a1e      	ldr	r2, [pc, #120]	; (80097e4 <TIM_Base_SetConfig+0xf8>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d003      	beq.n	8009776 <TIM_Base_SetConfig+0x8a>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a1d      	ldr	r2, [pc, #116]	; (80097e8 <TIM_Base_SetConfig+0xfc>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d108      	bne.n	8009788 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800977c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	4313      	orrs	r3, r2
 8009786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a08      	ldr	r2, [pc, #32]	; (80097d0 <TIM_Base_SetConfig+0xe4>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d103      	bne.n	80097bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	691a      	ldr	r2, [r3, #16]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	615a      	str	r2, [r3, #20]
}
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	40010000 	.word	0x40010000
 80097d4:	40000400 	.word	0x40000400
 80097d8:	40000800 	.word	0x40000800
 80097dc:	40000c00 	.word	0x40000c00
 80097e0:	40014000 	.word	0x40014000
 80097e4:	40014400 	.word	0x40014400
 80097e8:	40014800 	.word	0x40014800

080097ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	f023 0201 	bic.w	r2, r3, #1
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f023 0303 	bic.w	r3, r3, #3
 8009822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	4313      	orrs	r3, r2
 800982c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f023 0302 	bic.w	r3, r3, #2
 8009834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	4313      	orrs	r3, r2
 800983e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a30      	ldr	r2, [pc, #192]	; (8009904 <TIM_OC1_SetConfig+0x118>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d119      	bne.n	800987c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d008      	beq.n	8009862 <TIM_OC1_SetConfig+0x76>
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b08      	cmp	r3, #8
 8009856:	d004      	beq.n	8009862 <TIM_OC1_SetConfig+0x76>
 8009858:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 800985c:	482a      	ldr	r0, [pc, #168]	; (8009908 <TIM_OC1_SetConfig+0x11c>)
 800985e:	f7f8 fb06 	bl	8001e6e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f023 0308 	bic.w	r3, r3, #8
 8009868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	4313      	orrs	r3, r2
 8009872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f023 0304 	bic.w	r3, r3, #4
 800987a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a21      	ldr	r2, [pc, #132]	; (8009904 <TIM_OC1_SetConfig+0x118>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d12d      	bne.n	80098e0 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800988c:	d008      	beq.n	80098a0 <TIM_OC1_SetConfig+0xb4>
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d004      	beq.n	80098a0 <TIM_OC1_SetConfig+0xb4>
 8009896:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 800989a:	481b      	ldr	r0, [pc, #108]	; (8009908 <TIM_OC1_SetConfig+0x11c>)
 800989c:	f7f8 fae7 	bl	8001e6e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098a8:	d008      	beq.n	80098bc <TIM_OC1_SetConfig+0xd0>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d004      	beq.n	80098bc <TIM_OC1_SetConfig+0xd0>
 80098b2:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 80098b6:	4814      	ldr	r0, [pc, #80]	; (8009908 <TIM_OC1_SetConfig+0x11c>)
 80098b8:	f7f8 fad9 	bl	8001e6e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	695b      	ldr	r3, [r3, #20]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	4313      	orrs	r3, r2
 80098de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	621a      	str	r2, [r3, #32]
}
 80098fa:	bf00      	nop
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	40010000 	.word	0x40010000
 8009908:	08011e5c 	.word	0x08011e5c

0800990c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	f023 0210 	bic.w	r2, r3, #16
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800993a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	021b      	lsls	r3, r3, #8
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	4313      	orrs	r3, r2
 800994e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	f023 0320 	bic.w	r3, r3, #32
 8009956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	011b      	lsls	r3, r3, #4
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	4313      	orrs	r3, r2
 8009962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a31      	ldr	r2, [pc, #196]	; (8009a2c <TIM_OC2_SetConfig+0x120>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d11a      	bne.n	80099a2 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d008      	beq.n	8009986 <TIM_OC2_SetConfig+0x7a>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	2b08      	cmp	r3, #8
 800997a:	d004      	beq.n	8009986 <TIM_OC2_SetConfig+0x7a>
 800997c:	f641 3112 	movw	r1, #6930	; 0x1b12
 8009980:	482b      	ldr	r0, [pc, #172]	; (8009a30 <TIM_OC2_SetConfig+0x124>)
 8009982:	f7f8 fa74 	bl	8001e6e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800998c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	011b      	lsls	r3, r3, #4
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	4313      	orrs	r3, r2
 8009998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099a0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a21      	ldr	r2, [pc, #132]	; (8009a2c <TIM_OC2_SetConfig+0x120>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d12f      	bne.n	8009a0a <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099b2:	d008      	beq.n	80099c6 <TIM_OC2_SetConfig+0xba>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d004      	beq.n	80099c6 <TIM_OC2_SetConfig+0xba>
 80099bc:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 80099c0:	481b      	ldr	r0, [pc, #108]	; (8009a30 <TIM_OC2_SetConfig+0x124>)
 80099c2:	f7f8 fa54 	bl	8001e6e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ce:	d008      	beq.n	80099e2 <TIM_OC2_SetConfig+0xd6>
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d004      	beq.n	80099e2 <TIM_OC2_SetConfig+0xd6>
 80099d8:	f641 3121 	movw	r1, #6945	; 0x1b21
 80099dc:	4814      	ldr	r0, [pc, #80]	; (8009a30 <TIM_OC2_SetConfig+0x124>)
 80099de:	f7f8 fa46 	bl	8001e6e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	699b      	ldr	r3, [r3, #24]
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	621a      	str	r2, [r3, #32]
}
 8009a24:	bf00      	nop
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	40010000 	.word	0x40010000
 8009a30:	08011e5c 	.word	0x08011e5c

08009a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	69db      	ldr	r3, [r3, #28]
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f023 0303 	bic.w	r3, r3, #3
 8009a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	021b      	lsls	r3, r3, #8
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a31      	ldr	r2, [pc, #196]	; (8009b54 <TIM_OC3_SetConfig+0x120>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d11a      	bne.n	8009ac8 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d008      	beq.n	8009aac <TIM_OC3_SetConfig+0x78>
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	2b08      	cmp	r3, #8
 8009aa0:	d004      	beq.n	8009aac <TIM_OC3_SetConfig+0x78>
 8009aa2:	f641 315d 	movw	r1, #7005	; 0x1b5d
 8009aa6:	482c      	ldr	r0, [pc, #176]	; (8009b58 <TIM_OC3_SetConfig+0x124>)
 8009aa8:	f7f8 f9e1 	bl	8001e6e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	021b      	lsls	r3, r3, #8
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ac6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a22      	ldr	r2, [pc, #136]	; (8009b54 <TIM_OC3_SetConfig+0x120>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d12f      	bne.n	8009b30 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad8:	d008      	beq.n	8009aec <TIM_OC3_SetConfig+0xb8>
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d004      	beq.n	8009aec <TIM_OC3_SetConfig+0xb8>
 8009ae2:	f641 316a 	movw	r1, #7018	; 0x1b6a
 8009ae6:	481c      	ldr	r0, [pc, #112]	; (8009b58 <TIM_OC3_SetConfig+0x124>)
 8009ae8:	f7f8 f9c1 	bl	8001e6e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009af4:	d008      	beq.n	8009b08 <TIM_OC3_SetConfig+0xd4>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d004      	beq.n	8009b08 <TIM_OC3_SetConfig+0xd4>
 8009afe:	f641 316b 	movw	r1, #7019	; 0x1b6b
 8009b02:	4815      	ldr	r0, [pc, #84]	; (8009b58 <TIM_OC3_SetConfig+0x124>)
 8009b04:	f7f8 f9b3 	bl	8001e6e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	695b      	ldr	r3, [r3, #20]
 8009b1c:	011b      	lsls	r3, r3, #4
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	693a      	ldr	r2, [r7, #16]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	621a      	str	r2, [r3, #32]
}
 8009b4a:	bf00      	nop
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	40010000 	.word	0x40010000
 8009b58:	08011e5c 	.word	0x08011e5c

08009b5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	021b      	lsls	r3, r3, #8
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	031b      	lsls	r3, r3, #12
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a16      	ldr	r2, [pc, #88]	; (8009c10 <TIM_OC4_SetConfig+0xb4>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d117      	bne.n	8009bec <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bc4:	d008      	beq.n	8009bd8 <TIM_OC4_SetConfig+0x7c>
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d004      	beq.n	8009bd8 <TIM_OC4_SetConfig+0x7c>
 8009bce:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 8009bd2:	4810      	ldr	r0, [pc, #64]	; (8009c14 <TIM_OC4_SetConfig+0xb8>)
 8009bd4:	f7f8 f94b 	bl	8001e6e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	019b      	lsls	r3, r3, #6
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	621a      	str	r2, [r3, #32]
}
 8009c06:	bf00      	nop
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	40010000 	.word	0x40010000
 8009c14:	08011e5c 	.word	0x08011e5c

08009c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	f023 0201 	bic.w	r2, r3, #1
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	011b      	lsls	r3, r3, #4
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f023 030a 	bic.w	r3, r3, #10
 8009c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	621a      	str	r2, [r3, #32]
}
 8009c6a:	bf00      	nop
 8009c6c:	371c      	adds	r7, #28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c76:	b480      	push	{r7}
 8009c78:	b087      	sub	sp, #28
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	60f8      	str	r0, [r7, #12]
 8009c7e:	60b9      	str	r1, [r7, #8]
 8009c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	f023 0210 	bic.w	r2, r3, #16
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	031b      	lsls	r3, r3, #12
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	011b      	lsls	r3, r3, #4
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	621a      	str	r2, [r3, #32]
}
 8009cca:	bf00      	nop
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b085      	sub	sp, #20
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	f043 0307 	orr.w	r3, r3, #7
 8009cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	609a      	str	r2, [r3, #8]
}
 8009d00:	bf00      	nop
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
 8009d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	021a      	lsls	r2, r3, #8
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	431a      	orrs	r2, r3
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	697a      	ldr	r2, [r7, #20]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	609a      	str	r2, [r3, #8]
}
 8009d40:	bf00      	nop
 8009d42:	371c      	adds	r7, #28
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4a2a      	ldr	r2, [pc, #168]	; (8009e04 <TIM_CCxChannelCmd+0xb8>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d020      	beq.n	8009da2 <TIM_CCxChannelCmd+0x56>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d66:	d01c      	beq.n	8009da2 <TIM_CCxChannelCmd+0x56>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4a27      	ldr	r2, [pc, #156]	; (8009e08 <TIM_CCxChannelCmd+0xbc>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d018      	beq.n	8009da2 <TIM_CCxChannelCmd+0x56>
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4a26      	ldr	r2, [pc, #152]	; (8009e0c <TIM_CCxChannelCmd+0xc0>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d014      	beq.n	8009da2 <TIM_CCxChannelCmd+0x56>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	4a25      	ldr	r2, [pc, #148]	; (8009e10 <TIM_CCxChannelCmd+0xc4>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d010      	beq.n	8009da2 <TIM_CCxChannelCmd+0x56>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4a24      	ldr	r2, [pc, #144]	; (8009e14 <TIM_CCxChannelCmd+0xc8>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d00c      	beq.n	8009da2 <TIM_CCxChannelCmd+0x56>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	4a23      	ldr	r2, [pc, #140]	; (8009e18 <TIM_CCxChannelCmd+0xcc>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d008      	beq.n	8009da2 <TIM_CCxChannelCmd+0x56>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4a22      	ldr	r2, [pc, #136]	; (8009e1c <TIM_CCxChannelCmd+0xd0>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d004      	beq.n	8009da2 <TIM_CCxChannelCmd+0x56>
 8009d98:	f641 5194 	movw	r1, #7572	; 0x1d94
 8009d9c:	4820      	ldr	r0, [pc, #128]	; (8009e20 <TIM_CCxChannelCmd+0xd4>)
 8009d9e:	f7f8 f866 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d010      	beq.n	8009dca <TIM_CCxChannelCmd+0x7e>
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	2b04      	cmp	r3, #4
 8009dac:	d00d      	beq.n	8009dca <TIM_CCxChannelCmd+0x7e>
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	2b08      	cmp	r3, #8
 8009db2:	d00a      	beq.n	8009dca <TIM_CCxChannelCmd+0x7e>
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	2b0c      	cmp	r3, #12
 8009db8:	d007      	beq.n	8009dca <TIM_CCxChannelCmd+0x7e>
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2b3c      	cmp	r3, #60	; 0x3c
 8009dbe:	d004      	beq.n	8009dca <TIM_CCxChannelCmd+0x7e>
 8009dc0:	f641 5195 	movw	r1, #7573	; 0x1d95
 8009dc4:	4816      	ldr	r0, [pc, #88]	; (8009e20 <TIM_CCxChannelCmd+0xd4>)
 8009dc6:	f7f8 f852 	bl	8001e6e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f003 031f 	and.w	r3, r3, #31
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a1a      	ldr	r2, [r3, #32]
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	43db      	mvns	r3, r3
 8009de0:	401a      	ands	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6a1a      	ldr	r2, [r3, #32]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f003 031f 	and.w	r3, r3, #31
 8009df0:	6879      	ldr	r1, [r7, #4]
 8009df2:	fa01 f303 	lsl.w	r3, r1, r3
 8009df6:	431a      	orrs	r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	621a      	str	r2, [r3, #32]
}
 8009dfc:	bf00      	nop
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	40010000 	.word	0x40010000
 8009e08:	40000400 	.word	0x40000400
 8009e0c:	40000800 	.word	0x40000800
 8009e10:	40000c00 	.word	0x40000c00
 8009e14:	40014000 	.word	0x40014000
 8009e18:	40014400 	.word	0x40014400
 8009e1c:	40014800 	.word	0x40014800
 8009e20:	08011e5c 	.word	0x08011e5c

08009e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a55      	ldr	r2, [pc, #340]	; (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d018      	beq.n	8009e6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e40:	d013      	beq.n	8009e6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a51      	ldr	r2, [pc, #324]	; (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d00e      	beq.n	8009e6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a4f      	ldr	r2, [pc, #316]	; (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d009      	beq.n	8009e6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a4e      	ldr	r2, [pc, #312]	; (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d004      	beq.n	8009e6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009e60:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8009e64:	484c      	ldr	r0, [pc, #304]	; (8009f98 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009e66:	f7f8 f802 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d020      	beq.n	8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b10      	cmp	r3, #16
 8009e78:	d01c      	beq.n	8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	d018      	beq.n	8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b30      	cmp	r3, #48	; 0x30
 8009e88:	d014      	beq.n	8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b40      	cmp	r3, #64	; 0x40
 8009e90:	d010      	beq.n	8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b50      	cmp	r3, #80	; 0x50
 8009e98:	d00c      	beq.n	8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b60      	cmp	r3, #96	; 0x60
 8009ea0:	d008      	beq.n	8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2b70      	cmp	r3, #112	; 0x70
 8009ea8:	d004      	beq.n	8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009eaa:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8009eae:	483a      	ldr	r0, [pc, #232]	; (8009f98 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009eb0:	f7f7 ffdd 	bl	8001e6e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	2b80      	cmp	r3, #128	; 0x80
 8009eba:	d008      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d004      	beq.n	8009ece <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8009ec4:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8009ec8:	4833      	ldr	r0, [pc, #204]	; (8009f98 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009eca:	f7f7 ffd0 	bl	8001e6e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d101      	bne.n	8009edc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ed8:	2302      	movs	r3, #2
 8009eda:	e050      	b.n	8009f7e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a1b      	ldr	r2, [pc, #108]	; (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d018      	beq.n	8009f52 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f28:	d013      	beq.n	8009f52 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a17      	ldr	r2, [pc, #92]	; (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d00e      	beq.n	8009f52 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a15      	ldr	r2, [pc, #84]	; (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d009      	beq.n	8009f52 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a14      	ldr	r2, [pc, #80]	; (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d004      	beq.n	8009f52 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a13      	ldr	r2, [pc, #76]	; (8009f9c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d10c      	bne.n	8009f6c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	40010000 	.word	0x40010000
 8009f8c:	40000400 	.word	0x40000400
 8009f90:	40000800 	.word	0x40000800
 8009f94:	40000c00 	.word	0x40000c00
 8009f98:	08011e94 	.word	0x08011e94
 8009f9c:	40014000 	.word	0x40014000

08009fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009fc8:	b084      	sub	sp, #16
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b084      	sub	sp, #16
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	f107 001c 	add.w	r0, r7, #28
 8009fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d122      	bne.n	800a026 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d105      	bne.n	800a01a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f001 fbee 	bl	800b7fc <USB_CoreReset>
 800a020:	4603      	mov	r3, r0
 800a022:	73fb      	strb	r3, [r7, #15]
 800a024:	e01a      	b.n	800a05c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 fbe2 	bl	800b7fc <USB_CoreReset>
 800a038:	4603      	mov	r3, r0
 800a03a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d106      	bne.n	800a050 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a046:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	639a      	str	r2, [r3, #56]	; 0x38
 800a04e:	e005      	b.n	800a05c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a054:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d10b      	bne.n	800a07a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f043 0206 	orr.w	r2, r3, #6
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f043 0220 	orr.w	r2, r3, #32
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a086:	b004      	add	sp, #16
 800a088:	4770      	bx	lr
	...

0800a08c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b087      	sub	sp, #28
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	4613      	mov	r3, r2
 800a098:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a09a:	79fb      	ldrb	r3, [r7, #7]
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d165      	bne.n	800a16c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	4a41      	ldr	r2, [pc, #260]	; (800a1a8 <USB_SetTurnaroundTime+0x11c>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d906      	bls.n	800a0b6 <USB_SetTurnaroundTime+0x2a>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	4a40      	ldr	r2, [pc, #256]	; (800a1ac <USB_SetTurnaroundTime+0x120>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d202      	bcs.n	800a0b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a0b0:	230f      	movs	r3, #15
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	e062      	b.n	800a17c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	4a3c      	ldr	r2, [pc, #240]	; (800a1ac <USB_SetTurnaroundTime+0x120>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d306      	bcc.n	800a0cc <USB_SetTurnaroundTime+0x40>
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	4a3b      	ldr	r2, [pc, #236]	; (800a1b0 <USB_SetTurnaroundTime+0x124>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d202      	bcs.n	800a0cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a0c6:	230e      	movs	r3, #14
 800a0c8:	617b      	str	r3, [r7, #20]
 800a0ca:	e057      	b.n	800a17c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4a38      	ldr	r2, [pc, #224]	; (800a1b0 <USB_SetTurnaroundTime+0x124>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d306      	bcc.n	800a0e2 <USB_SetTurnaroundTime+0x56>
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	4a37      	ldr	r2, [pc, #220]	; (800a1b4 <USB_SetTurnaroundTime+0x128>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d202      	bcs.n	800a0e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a0dc:	230d      	movs	r3, #13
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	e04c      	b.n	800a17c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	4a33      	ldr	r2, [pc, #204]	; (800a1b4 <USB_SetTurnaroundTime+0x128>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d306      	bcc.n	800a0f8 <USB_SetTurnaroundTime+0x6c>
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	4a32      	ldr	r2, [pc, #200]	; (800a1b8 <USB_SetTurnaroundTime+0x12c>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d802      	bhi.n	800a0f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a0f2:	230c      	movs	r3, #12
 800a0f4:	617b      	str	r3, [r7, #20]
 800a0f6:	e041      	b.n	800a17c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	4a2f      	ldr	r2, [pc, #188]	; (800a1b8 <USB_SetTurnaroundTime+0x12c>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d906      	bls.n	800a10e <USB_SetTurnaroundTime+0x82>
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	4a2e      	ldr	r2, [pc, #184]	; (800a1bc <USB_SetTurnaroundTime+0x130>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d802      	bhi.n	800a10e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a108:	230b      	movs	r3, #11
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	e036      	b.n	800a17c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	4a2a      	ldr	r2, [pc, #168]	; (800a1bc <USB_SetTurnaroundTime+0x130>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d906      	bls.n	800a124 <USB_SetTurnaroundTime+0x98>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	4a29      	ldr	r2, [pc, #164]	; (800a1c0 <USB_SetTurnaroundTime+0x134>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d802      	bhi.n	800a124 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a11e:	230a      	movs	r3, #10
 800a120:	617b      	str	r3, [r7, #20]
 800a122:	e02b      	b.n	800a17c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4a26      	ldr	r2, [pc, #152]	; (800a1c0 <USB_SetTurnaroundTime+0x134>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d906      	bls.n	800a13a <USB_SetTurnaroundTime+0xae>
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	4a25      	ldr	r2, [pc, #148]	; (800a1c4 <USB_SetTurnaroundTime+0x138>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d202      	bcs.n	800a13a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a134:	2309      	movs	r3, #9
 800a136:	617b      	str	r3, [r7, #20]
 800a138:	e020      	b.n	800a17c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	4a21      	ldr	r2, [pc, #132]	; (800a1c4 <USB_SetTurnaroundTime+0x138>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d306      	bcc.n	800a150 <USB_SetTurnaroundTime+0xc4>
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	4a20      	ldr	r2, [pc, #128]	; (800a1c8 <USB_SetTurnaroundTime+0x13c>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d802      	bhi.n	800a150 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a14a:	2308      	movs	r3, #8
 800a14c:	617b      	str	r3, [r7, #20]
 800a14e:	e015      	b.n	800a17c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4a1d      	ldr	r2, [pc, #116]	; (800a1c8 <USB_SetTurnaroundTime+0x13c>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d906      	bls.n	800a166 <USB_SetTurnaroundTime+0xda>
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	4a1c      	ldr	r2, [pc, #112]	; (800a1cc <USB_SetTurnaroundTime+0x140>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d202      	bcs.n	800a166 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a160:	2307      	movs	r3, #7
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	e00a      	b.n	800a17c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a166:	2306      	movs	r3, #6
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	e007      	b.n	800a17c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a16c:	79fb      	ldrb	r3, [r7, #7]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d102      	bne.n	800a178 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a172:	2309      	movs	r3, #9
 800a174:	617b      	str	r3, [r7, #20]
 800a176:	e001      	b.n	800a17c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a178:	2309      	movs	r3, #9
 800a17a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	68da      	ldr	r2, [r3, #12]
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	029b      	lsls	r3, r3, #10
 800a190:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a194:	431a      	orrs	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	371c      	adds	r7, #28
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	00d8acbf 	.word	0x00d8acbf
 800a1ac:	00e4e1c0 	.word	0x00e4e1c0
 800a1b0:	00f42400 	.word	0x00f42400
 800a1b4:	01067380 	.word	0x01067380
 800a1b8:	011a499f 	.word	0x011a499f
 800a1bc:	01312cff 	.word	0x01312cff
 800a1c0:	014ca43f 	.word	0x014ca43f
 800a1c4:	016e3600 	.word	0x016e3600
 800a1c8:	01a6ab1f 	.word	0x01a6ab1f
 800a1cc:	01e84800 	.word	0x01e84800

0800a1d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f043 0201 	orr.w	r2, r3, #1
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b083      	sub	sp, #12
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f023 0201 	bic.w	r2, r3, #1
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	460b      	mov	r3, r1
 800a21e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a220:	2300      	movs	r3, #0
 800a222:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a230:	78fb      	ldrb	r3, [r7, #3]
 800a232:	2b01      	cmp	r3, #1
 800a234:	d115      	bne.n	800a262 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a242:	2001      	movs	r0, #1
 800a244:	f7f8 fe8c 	bl	8002f60 <HAL_Delay>
      ms++;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	3301      	adds	r3, #1
 800a24c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f001 fa45 	bl	800b6de <USB_GetMode>
 800a254:	4603      	mov	r3, r0
 800a256:	2b01      	cmp	r3, #1
 800a258:	d01e      	beq.n	800a298 <USB_SetCurrentMode+0x84>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b31      	cmp	r3, #49	; 0x31
 800a25e:	d9f0      	bls.n	800a242 <USB_SetCurrentMode+0x2e>
 800a260:	e01a      	b.n	800a298 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a262:	78fb      	ldrb	r3, [r7, #3]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d115      	bne.n	800a294 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a274:	2001      	movs	r0, #1
 800a276:	f7f8 fe73 	bl	8002f60 <HAL_Delay>
      ms++;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3301      	adds	r3, #1
 800a27e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f001 fa2c 	bl	800b6de <USB_GetMode>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d005      	beq.n	800a298 <USB_SetCurrentMode+0x84>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2b31      	cmp	r3, #49	; 0x31
 800a290:	d9f0      	bls.n	800a274 <USB_SetCurrentMode+0x60>
 800a292:	e001      	b.n	800a298 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e005      	b.n	800a2a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2b32      	cmp	r3, #50	; 0x32
 800a29c:	d101      	bne.n	800a2a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e000      	b.n	800a2a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b086      	sub	sp, #24
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a2ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	613b      	str	r3, [r7, #16]
 800a2ca:	e009      	b.n	800a2e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	3340      	adds	r3, #64	; 0x40
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	613b      	str	r3, [r7, #16]
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	2b0e      	cmp	r3, #14
 800a2e4:	d9f2      	bls.n	800a2cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a2e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d11c      	bne.n	800a326 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2fa:	f043 0302 	orr.w	r3, r3, #2
 800a2fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a310:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	639a      	str	r2, [r3, #56]	; 0x38
 800a324:	e00b      	b.n	800a33e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a336:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a344:	461a      	mov	r2, r3
 800a346:	2300      	movs	r3, #0
 800a348:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a350:	4619      	mov	r1, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a358:	461a      	mov	r2, r3
 800a35a:	680b      	ldr	r3, [r1, #0]
 800a35c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a360:	2b01      	cmp	r3, #1
 800a362:	d10c      	bne.n	800a37e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a366:	2b00      	cmp	r3, #0
 800a368:	d104      	bne.n	800a374 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a36a:	2100      	movs	r1, #0
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f965 	bl	800a63c <USB_SetDevSpeed>
 800a372:	e008      	b.n	800a386 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a374:	2101      	movs	r1, #1
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f960 	bl	800a63c <USB_SetDevSpeed>
 800a37c:	e003      	b.n	800a386 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a37e:	2103      	movs	r1, #3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f95b 	bl	800a63c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a386:	2110      	movs	r1, #16
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f8f3 	bl	800a574 <USB_FlushTxFifo>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f91f 	bl	800a5dc <USB_FlushRxFifo>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	2300      	movs	r3, #0
 800a3be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	613b      	str	r3, [r7, #16]
 800a3d0:	e043      	b.n	800a45a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3e8:	d118      	bne.n	800a41c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10a      	bne.n	800a406 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	015a      	lsls	r2, r3, #5
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	e013      	b.n	800a42e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a412:	461a      	mov	r2, r3
 800a414:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a418:	6013      	str	r3, [r2, #0]
 800a41a:	e008      	b.n	800a42e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a428:	461a      	mov	r2, r3
 800a42a:	2300      	movs	r3, #0
 800a42c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	015a      	lsls	r2, r3, #5
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	4413      	add	r3, r2
 800a436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a43a:	461a      	mov	r2, r3
 800a43c:	2300      	movs	r3, #0
 800a43e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	015a      	lsls	r2, r3, #5
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	4413      	add	r3, r2
 800a448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44c:	461a      	mov	r2, r3
 800a44e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a452:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	3301      	adds	r3, #1
 800a458:	613b      	str	r3, [r7, #16]
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d3b7      	bcc.n	800a3d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a462:	2300      	movs	r3, #0
 800a464:	613b      	str	r3, [r7, #16]
 800a466:	e043      	b.n	800a4f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a47a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a47e:	d118      	bne.n	800a4b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10a      	bne.n	800a49c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	015a      	lsls	r2, r3, #5
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	4413      	add	r3, r2
 800a48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a492:	461a      	mov	r2, r3
 800a494:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a498:	6013      	str	r3, [r2, #0]
 800a49a:	e013      	b.n	800a4c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	e008      	b.n	800a4c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	015a      	lsls	r2, r3, #5
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4be:	461a      	mov	r2, r3
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a4e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	613b      	str	r3, [r7, #16]
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d3b7      	bcc.n	800a468 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a506:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a50a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a518:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d105      	bne.n	800a52c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	f043 0210 	orr.w	r2, r3, #16
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	699a      	ldr	r2, [r3, #24]
 800a530:	4b0f      	ldr	r3, [pc, #60]	; (800a570 <USB_DevInit+0x2c4>)
 800a532:	4313      	orrs	r3, r2
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d005      	beq.n	800a54a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	f043 0208 	orr.w	r2, r3, #8
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d107      	bne.n	800a560 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a558:	f043 0304 	orr.w	r3, r3, #4
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a560:	7dfb      	ldrb	r3, [r7, #23]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a56c:	b004      	add	sp, #16
 800a56e:	4770      	bx	lr
 800a570:	803c3800 	.word	0x803c3800

0800a574 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3301      	adds	r3, #1
 800a586:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4a13      	ldr	r2, [pc, #76]	; (800a5d8 <USB_FlushTxFifo+0x64>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d901      	bls.n	800a594 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e01b      	b.n	800a5cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	daf2      	bge.n	800a582 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	019b      	lsls	r3, r3, #6
 800a5a4:	f043 0220 	orr.w	r2, r3, #32
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4a08      	ldr	r2, [pc, #32]	; (800a5d8 <USB_FlushTxFifo+0x64>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d901      	bls.n	800a5be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	e006      	b.n	800a5cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b20      	cmp	r3, #32
 800a5c8:	d0f0      	beq.n	800a5ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3714      	adds	r7, #20
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	00030d40 	.word	0x00030d40

0800a5dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4a11      	ldr	r2, [pc, #68]	; (800a638 <USB_FlushRxFifo+0x5c>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d901      	bls.n	800a5fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	e018      	b.n	800a62c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	daf2      	bge.n	800a5e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a602:	2300      	movs	r3, #0
 800a604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2210      	movs	r2, #16
 800a60a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	3301      	adds	r3, #1
 800a610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	4a08      	ldr	r2, [pc, #32]	; (800a638 <USB_FlushRxFifo+0x5c>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d901      	bls.n	800a61e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a61a:	2303      	movs	r3, #3
 800a61c:	e006      	b.n	800a62c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	f003 0310 	and.w	r3, r3, #16
 800a626:	2b10      	cmp	r3, #16
 800a628:	d0f0      	beq.n	800a60c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	00030d40 	.word	0x00030d40

0800a63c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	78fb      	ldrb	r3, [r7, #3]
 800a656:	68f9      	ldr	r1, [r7, #12]
 800a658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a65c:	4313      	orrs	r3, r2
 800a65e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a66e:	b480      	push	{r7}
 800a670:	b087      	sub	sp, #28
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	f003 0306 	and.w	r3, r3, #6
 800a686:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d102      	bne.n	800a694 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a68e:	2300      	movs	r3, #0
 800a690:	75fb      	strb	r3, [r7, #23]
 800a692:	e00a      	b.n	800a6aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d002      	beq.n	800a6a0 <USB_GetDevSpeed+0x32>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b06      	cmp	r3, #6
 800a69e:	d102      	bne.n	800a6a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	75fb      	strb	r3, [r7, #23]
 800a6a4:	e001      	b.n	800a6aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a6a6:	230f      	movs	r3, #15
 800a6a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	371c      	adds	r7, #28
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	785b      	ldrb	r3, [r3, #1]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d13a      	bne.n	800a74a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6da:	69da      	ldr	r2, [r3, #28]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	f003 030f 	and.w	r3, r3, #15
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	68f9      	ldr	r1, [r7, #12]
 800a6ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d155      	bne.n	800a7b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4413      	add	r3, r2
 800a714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	791b      	ldrb	r3, [r3, #4]
 800a726:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a728:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	059b      	lsls	r3, r3, #22
 800a72e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a730:	4313      	orrs	r3, r2
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	0151      	lsls	r1, r2, #5
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	440a      	add	r2, r1
 800a73a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a73e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	e036      	b.n	800a7b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a750:	69da      	ldr	r2, [r3, #28]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	f003 030f 	and.w	r3, r3, #15
 800a75a:	2101      	movs	r1, #1
 800a75c:	fa01 f303 	lsl.w	r3, r1, r3
 800a760:	041b      	lsls	r3, r3, #16
 800a762:	68f9      	ldr	r1, [r7, #12]
 800a764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a768:	4313      	orrs	r3, r2
 800a76a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d11a      	bne.n	800a7b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	015a      	lsls	r2, r3, #5
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	4413      	add	r3, r2
 800a78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	791b      	ldrb	r3, [r3, #4]
 800a79c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a79e:	430b      	orrs	r3, r1
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	0151      	lsls	r1, r2, #5
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	440a      	add	r2, r1
 800a7aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
	...

0800a7c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d161      	bne.n	800a8a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	015a      	lsls	r2, r3, #5
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7fa:	d11f      	bne.n	800a83c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	0151      	lsls	r1, r2, #5
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	440a      	add	r2, r1
 800a812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a816:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a81a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	015a      	lsls	r2, r3, #5
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4413      	add	r3, r2
 800a824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	0151      	lsls	r1, r2, #5
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	440a      	add	r2, r1
 800a832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a83a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	f003 030f 	and.w	r3, r3, #15
 800a84c:	2101      	movs	r1, #1
 800a84e:	fa01 f303 	lsl.w	r3, r1, r3
 800a852:	b29b      	uxth	r3, r3
 800a854:	43db      	mvns	r3, r3
 800a856:	68f9      	ldr	r1, [r7, #12]
 800a858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a85c:	4013      	ands	r3, r2
 800a85e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a866:	69da      	ldr	r2, [r3, #28]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	f003 030f 	and.w	r3, r3, #15
 800a870:	2101      	movs	r1, #1
 800a872:	fa01 f303 	lsl.w	r3, r1, r3
 800a876:	b29b      	uxth	r3, r3
 800a878:	43db      	mvns	r3, r3
 800a87a:	68f9      	ldr	r1, [r7, #12]
 800a87c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a880:	4013      	ands	r3, r2
 800a882:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	015a      	lsls	r2, r3, #5
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	4413      	add	r3, r2
 800a88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	0159      	lsls	r1, r3, #5
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	440b      	add	r3, r1
 800a89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a89e:	4619      	mov	r1, r3
 800a8a0:	4b35      	ldr	r3, [pc, #212]	; (800a978 <USB_DeactivateEndpoint+0x1b0>)
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	600b      	str	r3, [r1, #0]
 800a8a6:	e060      	b.n	800a96a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	015a      	lsls	r2, r3, #5
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8be:	d11f      	bne.n	800a900 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	015a      	lsls	r2, r3, #5
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	0151      	lsls	r1, r2, #5
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	440a      	add	r2, r1
 800a8d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a8de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	015a      	lsls	r2, r3, #5
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	0151      	lsls	r1, r2, #5
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	440a      	add	r2, r1
 800a8f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	f003 030f 	and.w	r3, r3, #15
 800a910:	2101      	movs	r1, #1
 800a912:	fa01 f303 	lsl.w	r3, r1, r3
 800a916:	041b      	lsls	r3, r3, #16
 800a918:	43db      	mvns	r3, r3
 800a91a:	68f9      	ldr	r1, [r7, #12]
 800a91c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a920:	4013      	ands	r3, r2
 800a922:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a92a:	69da      	ldr	r2, [r3, #28]
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	f003 030f 	and.w	r3, r3, #15
 800a934:	2101      	movs	r1, #1
 800a936:	fa01 f303 	lsl.w	r3, r1, r3
 800a93a:	041b      	lsls	r3, r3, #16
 800a93c:	43db      	mvns	r3, r3
 800a93e:	68f9      	ldr	r1, [r7, #12]
 800a940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a944:	4013      	ands	r3, r2
 800a946:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	015a      	lsls	r2, r3, #5
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4413      	add	r3, r2
 800a950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	0159      	lsls	r1, r3, #5
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	440b      	add	r3, r1
 800a95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a962:	4619      	mov	r1, r3
 800a964:	4b05      	ldr	r3, [pc, #20]	; (800a97c <USB_DeactivateEndpoint+0x1b4>)
 800a966:	4013      	ands	r3, r2
 800a968:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	ec337800 	.word	0xec337800
 800a97c:	eff37800 	.word	0xeff37800

0800a980 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b08a      	sub	sp, #40	; 0x28
 800a984:	af02      	add	r7, sp, #8
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	4613      	mov	r3, r2
 800a98c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	785b      	ldrb	r3, [r3, #1]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	f040 815c 	bne.w	800ac5a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d132      	bne.n	800aa10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	69ba      	ldr	r2, [r7, #24]
 800a9ba:	0151      	lsls	r1, r2, #5
 800a9bc:	69fa      	ldr	r2, [r7, #28]
 800a9be:	440a      	add	r2, r1
 800a9c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	015a      	lsls	r2, r3, #5
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	0151      	lsls	r1, r2, #5
 800a9e0:	69fa      	ldr	r2, [r7, #28]
 800a9e2:	440a      	add	r2, r1
 800a9e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	015a      	lsls	r2, r3, #5
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	0151      	lsls	r1, r2, #5
 800aa00:	69fa      	ldr	r2, [r7, #28]
 800aa02:	440a      	add	r2, r1
 800aa04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa08:	0cdb      	lsrs	r3, r3, #19
 800aa0a:	04db      	lsls	r3, r3, #19
 800aa0c:	6113      	str	r3, [r2, #16]
 800aa0e:	e074      	b.n	800aafa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	69ba      	ldr	r2, [r7, #24]
 800aa20:	0151      	lsls	r1, r2, #5
 800aa22:	69fa      	ldr	r2, [r7, #28]
 800aa24:	440a      	add	r2, r1
 800aa26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa2a:	0cdb      	lsrs	r3, r3, #19
 800aa2c:	04db      	lsls	r3, r3, #19
 800aa2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	015a      	lsls	r2, r3, #5
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	4413      	add	r3, r2
 800aa38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	69ba      	ldr	r2, [r7, #24]
 800aa40:	0151      	lsls	r1, r2, #5
 800aa42:	69fa      	ldr	r2, [r7, #28]
 800aa44:	440a      	add	r2, r1
 800aa46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa60:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	6999      	ldr	r1, [r3, #24]
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	440b      	add	r3, r1
 800aa6c:	1e59      	subs	r1, r3, #1
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa76:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aa78:	4b9d      	ldr	r3, [pc, #628]	; (800acf0 <USB_EPStartXfer+0x370>)
 800aa7a:	400b      	ands	r3, r1
 800aa7c:	69b9      	ldr	r1, [r7, #24]
 800aa7e:	0148      	lsls	r0, r1, #5
 800aa80:	69f9      	ldr	r1, [r7, #28]
 800aa82:	4401      	add	r1, r0
 800aa84:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	015a      	lsls	r2, r3, #5
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	4413      	add	r3, r2
 800aa94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa98:	691a      	ldr	r2, [r3, #16]
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaa2:	69b9      	ldr	r1, [r7, #24]
 800aaa4:	0148      	lsls	r0, r1, #5
 800aaa6:	69f9      	ldr	r1, [r7, #28]
 800aaa8:	4401      	add	r1, r0
 800aaaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aaae:	4313      	orrs	r3, r2
 800aab0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	791b      	ldrb	r3, [r3, #4]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d11f      	bne.n	800aafa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	015a      	lsls	r2, r3, #5
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	4413      	add	r3, r2
 800aac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	0151      	lsls	r1, r2, #5
 800aacc:	69fa      	ldr	r2, [r7, #28]
 800aace:	440a      	add	r2, r1
 800aad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aad4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aad8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	015a      	lsls	r2, r3, #5
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	4413      	add	r3, r2
 800aae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	69ba      	ldr	r2, [r7, #24]
 800aaea:	0151      	lsls	r1, r2, #5
 800aaec:	69fa      	ldr	r2, [r7, #28]
 800aaee:	440a      	add	r2, r1
 800aaf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aaf8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800aafa:	79fb      	ldrb	r3, [r7, #7]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d14b      	bne.n	800ab98 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d009      	beq.n	800ab1c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab14:	461a      	mov	r2, r3
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	695b      	ldr	r3, [r3, #20]
 800ab1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	791b      	ldrb	r3, [r3, #4]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d128      	bne.n	800ab76 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d110      	bne.n	800ab56 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	69ba      	ldr	r2, [r7, #24]
 800ab44:	0151      	lsls	r1, r2, #5
 800ab46:	69fa      	ldr	r2, [r7, #28]
 800ab48:	440a      	add	r2, r1
 800ab4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab52:	6013      	str	r3, [r2, #0]
 800ab54:	e00f      	b.n	800ab76 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	015a      	lsls	r2, r3, #5
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	69ba      	ldr	r2, [r7, #24]
 800ab66:	0151      	lsls	r1, r2, #5
 800ab68:	69fa      	ldr	r2, [r7, #28]
 800ab6a:	440a      	add	r2, r1
 800ab6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	015a      	lsls	r2, r3, #5
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	69ba      	ldr	r2, [r7, #24]
 800ab86:	0151      	lsls	r1, r2, #5
 800ab88:	69fa      	ldr	r2, [r7, #28]
 800ab8a:	440a      	add	r2, r1
 800ab8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab94:	6013      	str	r3, [r2, #0]
 800ab96:	e133      	b.n	800ae00 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	015a      	lsls	r2, r3, #5
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	69ba      	ldr	r2, [r7, #24]
 800aba8:	0151      	lsls	r1, r2, #5
 800abaa:	69fa      	ldr	r2, [r7, #28]
 800abac:	440a      	add	r2, r1
 800abae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abb6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	791b      	ldrb	r3, [r3, #4]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d015      	beq.n	800abec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 811b 	beq.w	800ae00 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	f003 030f 	and.w	r3, r3, #15
 800abda:	2101      	movs	r1, #1
 800abdc:	fa01 f303 	lsl.w	r3, r1, r3
 800abe0:	69f9      	ldr	r1, [r7, #28]
 800abe2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abe6:	4313      	orrs	r3, r2
 800abe8:	634b      	str	r3, [r1, #52]	; 0x34
 800abea:	e109      	b.n	800ae00 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d110      	bne.n	800ac1e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	69ba      	ldr	r2, [r7, #24]
 800ac0c:	0151      	lsls	r1, r2, #5
 800ac0e:	69fa      	ldr	r2, [r7, #28]
 800ac10:	440a      	add	r2, r1
 800ac12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac1a:	6013      	str	r3, [r2, #0]
 800ac1c:	e00f      	b.n	800ac3e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	015a      	lsls	r2, r3, #5
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	4413      	add	r3, r2
 800ac26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	0151      	lsls	r1, r2, #5
 800ac30:	69fa      	ldr	r2, [r7, #28]
 800ac32:	440a      	add	r2, r1
 800ac34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac3c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	6919      	ldr	r1, [r3, #16]
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	781a      	ldrb	r2, [r3, #0]
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	b298      	uxth	r0, r3
 800ac4c:	79fb      	ldrb	r3, [r7, #7]
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	4603      	mov	r3, r0
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f000 fade 	bl	800b214 <USB_WritePacket>
 800ac58:	e0d2      	b.n	800ae00 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	015a      	lsls	r2, r3, #5
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	4413      	add	r3, r2
 800ac62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	69ba      	ldr	r2, [r7, #24]
 800ac6a:	0151      	lsls	r1, r2, #5
 800ac6c:	69fa      	ldr	r2, [r7, #28]
 800ac6e:	440a      	add	r2, r1
 800ac70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac74:	0cdb      	lsrs	r3, r3, #19
 800ac76:	04db      	lsls	r3, r3, #19
 800ac78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	015a      	lsls	r2, r3, #5
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	4413      	add	r3, r2
 800ac82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	69ba      	ldr	r2, [r7, #24]
 800ac8a:	0151      	lsls	r1, r2, #5
 800ac8c:	69fa      	ldr	r2, [r7, #28]
 800ac8e:	440a      	add	r2, r1
 800ac90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d126      	bne.n	800acf4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	015a      	lsls	r2, r3, #5
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	4413      	add	r3, r2
 800acae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb2:	691a      	ldr	r2, [r3, #16]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acbc:	69b9      	ldr	r1, [r7, #24]
 800acbe:	0148      	lsls	r0, r1, #5
 800acc0:	69f9      	ldr	r1, [r7, #28]
 800acc2:	4401      	add	r1, r0
 800acc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800acc8:	4313      	orrs	r3, r2
 800acca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	015a      	lsls	r2, r3, #5
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	4413      	add	r3, r2
 800acd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	69ba      	ldr	r2, [r7, #24]
 800acdc:	0151      	lsls	r1, r2, #5
 800acde:	69fa      	ldr	r2, [r7, #28]
 800ace0:	440a      	add	r2, r1
 800ace2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ace6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acea:	6113      	str	r3, [r2, #16]
 800acec:	e03a      	b.n	800ad64 <USB_EPStartXfer+0x3e4>
 800acee:	bf00      	nop
 800acf0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	699a      	ldr	r2, [r3, #24]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	4413      	add	r3, r2
 800acfe:	1e5a      	subs	r2, r3, #1
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad08:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	8afa      	ldrh	r2, [r7, #22]
 800ad10:	fb03 f202 	mul.w	r2, r3, r2
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad24:	691a      	ldr	r2, [r3, #16]
 800ad26:	8afb      	ldrh	r3, [r7, #22]
 800ad28:	04d9      	lsls	r1, r3, #19
 800ad2a:	4b38      	ldr	r3, [pc, #224]	; (800ae0c <USB_EPStartXfer+0x48c>)
 800ad2c:	400b      	ands	r3, r1
 800ad2e:	69b9      	ldr	r1, [r7, #24]
 800ad30:	0148      	lsls	r0, r1, #5
 800ad32:	69f9      	ldr	r1, [r7, #28]
 800ad34:	4401      	add	r1, r0
 800ad36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	015a      	lsls	r2, r3, #5
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad4a:	691a      	ldr	r2, [r3, #16]
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	69db      	ldr	r3, [r3, #28]
 800ad50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad54:	69b9      	ldr	r1, [r7, #24]
 800ad56:	0148      	lsls	r0, r1, #5
 800ad58:	69f9      	ldr	r1, [r7, #28]
 800ad5a:	4401      	add	r1, r0
 800ad5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad60:	4313      	orrs	r3, r2
 800ad62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ad64:	79fb      	ldrb	r3, [r7, #7]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d10d      	bne.n	800ad86 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d009      	beq.n	800ad86 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	6919      	ldr	r1, [r3, #16]
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	015a      	lsls	r2, r3, #5
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad82:	460a      	mov	r2, r1
 800ad84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	791b      	ldrb	r3, [r3, #4]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d128      	bne.n	800ade0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d110      	bne.n	800adc0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	69ba      	ldr	r2, [r7, #24]
 800adae:	0151      	lsls	r1, r2, #5
 800adb0:	69fa      	ldr	r2, [r7, #28]
 800adb2:	440a      	add	r2, r1
 800adb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800adbc:	6013      	str	r3, [r2, #0]
 800adbe:	e00f      	b.n	800ade0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	69ba      	ldr	r2, [r7, #24]
 800add0:	0151      	lsls	r1, r2, #5
 800add2:	69fa      	ldr	r2, [r7, #28]
 800add4:	440a      	add	r2, r1
 800add6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	69ba      	ldr	r2, [r7, #24]
 800adf0:	0151      	lsls	r1, r2, #5
 800adf2:	69fa      	ldr	r2, [r7, #28]
 800adf4:	440a      	add	r2, r1
 800adf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800adfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3720      	adds	r7, #32
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	1ff80000 	.word	0x1ff80000

0800ae10 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b087      	sub	sp, #28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	785b      	ldrb	r3, [r3, #1]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	f040 80ce 	bne.w	800afce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d132      	bne.n	800aea0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	015a      	lsls	r2, r3, #5
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	4413      	add	r3, r2
 800ae42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	0151      	lsls	r1, r2, #5
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	440a      	add	r2, r1
 800ae50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	015a      	lsls	r2, r3, #5
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	4413      	add	r3, r2
 800ae66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	0151      	lsls	r1, r2, #5
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	440a      	add	r2, r1
 800ae74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	0151      	lsls	r1, r2, #5
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	440a      	add	r2, r1
 800ae94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae98:	0cdb      	lsrs	r3, r3, #19
 800ae9a:	04db      	lsls	r3, r3, #19
 800ae9c:	6113      	str	r3, [r2, #16]
 800ae9e:	e04e      	b.n	800af3e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	0151      	lsls	r1, r2, #5
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	440a      	add	r2, r1
 800aeb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeba:	0cdb      	lsrs	r3, r3, #19
 800aebc:	04db      	lsls	r3, r3, #19
 800aebe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	693a      	ldr	r2, [r7, #16]
 800aed0:	0151      	lsls	r1, r2, #5
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	440a      	add	r2, r1
 800aed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aede:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aee2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	699a      	ldr	r2, [r3, #24]
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d903      	bls.n	800aef8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	68da      	ldr	r2, [r3, #12]
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	015a      	lsls	r2, r3, #5
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	4413      	add	r3, r2
 800af00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	0151      	lsls	r1, r2, #5
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	440a      	add	r2, r1
 800af0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	015a      	lsls	r2, r3, #5
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	4413      	add	r3, r2
 800af20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af24:	691a      	ldr	r2, [r3, #16]
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af2e:	6939      	ldr	r1, [r7, #16]
 800af30:	0148      	lsls	r0, r1, #5
 800af32:	6979      	ldr	r1, [r7, #20]
 800af34:	4401      	add	r1, r0
 800af36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af3a:	4313      	orrs	r3, r2
 800af3c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800af3e:	79fb      	ldrb	r3, [r7, #7]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d11e      	bne.n	800af82 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d009      	beq.n	800af60 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	015a      	lsls	r2, r3, #5
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	4413      	add	r3, r2
 800af54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af58:	461a      	mov	r2, r3
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	015a      	lsls	r2, r3, #5
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	4413      	add	r3, r2
 800af68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	0151      	lsls	r1, r2, #5
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	440a      	add	r2, r1
 800af76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af7e:	6013      	str	r3, [r2, #0]
 800af80:	e097      	b.n	800b0b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	015a      	lsls	r2, r3, #5
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	4413      	add	r3, r2
 800af8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	693a      	ldr	r2, [r7, #16]
 800af92:	0151      	lsls	r1, r2, #5
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	440a      	add	r2, r1
 800af98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afa0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 8083 	beq.w	800b0b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	f003 030f 	and.w	r3, r3, #15
 800afbc:	2101      	movs	r1, #1
 800afbe:	fa01 f303 	lsl.w	r3, r1, r3
 800afc2:	6979      	ldr	r1, [r7, #20]
 800afc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afc8:	4313      	orrs	r3, r2
 800afca:	634b      	str	r3, [r1, #52]	; 0x34
 800afcc:	e071      	b.n	800b0b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	015a      	lsls	r2, r3, #5
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	4413      	add	r3, r2
 800afd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	0151      	lsls	r1, r2, #5
 800afe0:	697a      	ldr	r2, [r7, #20]
 800afe2:	440a      	add	r2, r1
 800afe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afe8:	0cdb      	lsrs	r3, r3, #19
 800afea:	04db      	lsls	r3, r3, #19
 800afec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	015a      	lsls	r2, r3, #5
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	4413      	add	r3, r2
 800aff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	0151      	lsls	r1, r2, #5
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	440a      	add	r2, r1
 800b004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b008:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b00c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b010:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d003      	beq.n	800b022 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	68da      	ldr	r2, [r3, #12]
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	015a      	lsls	r2, r3, #5
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	4413      	add	r3, r2
 800b032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	693a      	ldr	r2, [r7, #16]
 800b03a:	0151      	lsls	r1, r2, #5
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	440a      	add	r2, r1
 800b040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b048:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	015a      	lsls	r2, r3, #5
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	4413      	add	r3, r2
 800b052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b056:	691a      	ldr	r2, [r3, #16]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	69db      	ldr	r3, [r3, #28]
 800b05c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b060:	6939      	ldr	r1, [r7, #16]
 800b062:	0148      	lsls	r0, r1, #5
 800b064:	6979      	ldr	r1, [r7, #20]
 800b066:	4401      	add	r1, r0
 800b068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b06c:	4313      	orrs	r3, r2
 800b06e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d10d      	bne.n	800b092 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d009      	beq.n	800b092 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	6919      	ldr	r1, [r3, #16]
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	015a      	lsls	r2, r3, #5
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	4413      	add	r3, r2
 800b08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b08e:	460a      	mov	r2, r1
 800b090:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	015a      	lsls	r2, r3, #5
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	4413      	add	r3, r2
 800b09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	0151      	lsls	r1, r2, #5
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	440a      	add	r2, r1
 800b0a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	371c      	adds	r7, #28
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	785b      	ldrb	r3, [r3, #1]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d14a      	bne.n	800b174 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0f6:	f040 8086 	bne.w	800b206 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	015a      	lsls	r2, r3, #5
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	4413      	add	r3, r2
 800b104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	7812      	ldrb	r2, [r2, #0]
 800b10e:	0151      	lsls	r1, r2, #5
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	440a      	add	r2, r1
 800b114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b118:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b11c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	4413      	add	r3, r2
 800b128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	7812      	ldrb	r2, [r2, #0]
 800b132:	0151      	lsls	r1, r2, #5
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	440a      	add	r2, r1
 800b138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b13c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b140:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3301      	adds	r3, #1
 800b146:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b14e:	4293      	cmp	r3, r2
 800b150:	d902      	bls.n	800b158 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	75fb      	strb	r3, [r7, #23]
          break;
 800b156:	e056      	b.n	800b206 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	015a      	lsls	r2, r3, #5
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	4413      	add	r3, r2
 800b162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b16c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b170:	d0e7      	beq.n	800b142 <USB_EPStopXfer+0x82>
 800b172:	e048      	b.n	800b206 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b18c:	d13b      	bne.n	800b206 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	015a      	lsls	r2, r3, #5
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	4413      	add	r3, r2
 800b198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	683a      	ldr	r2, [r7, #0]
 800b1a0:	7812      	ldrb	r2, [r2, #0]
 800b1a2:	0151      	lsls	r1, r2, #5
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	440a      	add	r2, r1
 800b1a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b1b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	015a      	lsls	r2, r3, #5
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	7812      	ldrb	r2, [r2, #0]
 800b1c6:	0151      	lsls	r1, r2, #5
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	440a      	add	r2, r1
 800b1cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b1d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f242 7210 	movw	r2, #10000	; 0x2710
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d902      	bls.n	800b1ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	75fb      	strb	r3, [r7, #23]
          break;
 800b1ea:	e00c      	b.n	800b206 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	015a      	lsls	r2, r3, #5
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b204:	d0e7      	beq.n	800b1d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b206:	7dfb      	ldrb	r3, [r7, #23]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	371c      	adds	r7, #28
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b214:	b480      	push	{r7}
 800b216:	b089      	sub	sp, #36	; 0x24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	4611      	mov	r1, r2
 800b220:	461a      	mov	r2, r3
 800b222:	460b      	mov	r3, r1
 800b224:	71fb      	strb	r3, [r7, #7]
 800b226:	4613      	mov	r3, r2
 800b228:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b232:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b236:	2b00      	cmp	r3, #0
 800b238:	d123      	bne.n	800b282 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b23a:	88bb      	ldrh	r3, [r7, #4]
 800b23c:	3303      	adds	r3, #3
 800b23e:	089b      	lsrs	r3, r3, #2
 800b240:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b242:	2300      	movs	r3, #0
 800b244:	61bb      	str	r3, [r7, #24]
 800b246:	e018      	b.n	800b27a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b248:	79fb      	ldrb	r3, [r7, #7]
 800b24a:	031a      	lsls	r2, r3, #12
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	4413      	add	r3, r2
 800b250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b254:	461a      	mov	r2, r3
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	3301      	adds	r3, #1
 800b260:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	3301      	adds	r3, #1
 800b266:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	3301      	adds	r3, #1
 800b26c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	3301      	adds	r3, #1
 800b272:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	3301      	adds	r3, #1
 800b278:	61bb      	str	r3, [r7, #24]
 800b27a:	69ba      	ldr	r2, [r7, #24]
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d3e2      	bcc.n	800b248 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3724      	adds	r7, #36	; 0x24
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b290:	b480      	push	{r7}
 800b292:	b08b      	sub	sp, #44	; 0x2c
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	4613      	mov	r3, r2
 800b29c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b2a6:	88fb      	ldrh	r3, [r7, #6]
 800b2a8:	089b      	lsrs	r3, r3, #2
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b2ae:	88fb      	ldrh	r3, [r7, #6]
 800b2b0:	f003 0303 	and.w	r3, r3, #3
 800b2b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	623b      	str	r3, [r7, #32]
 800b2ba:	e014      	b.n	800b2e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2dc:	3301      	adds	r3, #1
 800b2de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b2e0:	6a3b      	ldr	r3, [r7, #32]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	623b      	str	r3, [r7, #32]
 800b2e6:	6a3a      	ldr	r2, [r7, #32]
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d3e6      	bcc.n	800b2bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b2ee:	8bfb      	ldrh	r3, [r7, #30]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d01e      	beq.n	800b332 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2fe:	461a      	mov	r2, r3
 800b300:	f107 0310 	add.w	r3, r7, #16
 800b304:	6812      	ldr	r2, [r2, #0]
 800b306:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	6a3b      	ldr	r3, [r7, #32]
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	00db      	lsls	r3, r3, #3
 800b310:	fa22 f303 	lsr.w	r3, r2, r3
 800b314:	b2da      	uxtb	r2, r3
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	701a      	strb	r2, [r3, #0]
      i++;
 800b31a:	6a3b      	ldr	r3, [r7, #32]
 800b31c:	3301      	adds	r3, #1
 800b31e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b322:	3301      	adds	r3, #1
 800b324:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b326:	8bfb      	ldrh	r3, [r7, #30]
 800b328:	3b01      	subs	r3, #1
 800b32a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b32c:	8bfb      	ldrh	r3, [r7, #30]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1ea      	bne.n	800b308 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b334:	4618      	mov	r0, r3
 800b336:	372c      	adds	r7, #44	; 0x2c
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	785b      	ldrb	r3, [r3, #1]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d12c      	bne.n	800b3b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	015a      	lsls	r2, r3, #5
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	4413      	add	r3, r2
 800b364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	db12      	blt.n	800b394 <USB_EPSetStall+0x54>
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00f      	beq.n	800b394 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	015a      	lsls	r2, r3, #5
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	4413      	add	r3, r2
 800b37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	0151      	lsls	r1, r2, #5
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	440a      	add	r2, r1
 800b38a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b38e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b392:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	015a      	lsls	r2, r3, #5
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	4413      	add	r3, r2
 800b39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	0151      	lsls	r1, r2, #5
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	440a      	add	r2, r1
 800b3aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b3b2:	6013      	str	r3, [r2, #0]
 800b3b4:	e02b      	b.n	800b40e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	015a      	lsls	r2, r3, #5
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	4413      	add	r3, r2
 800b3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	db12      	blt.n	800b3ee <USB_EPSetStall+0xae>
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00f      	beq.n	800b3ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	015a      	lsls	r2, r3, #5
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	0151      	lsls	r1, r2, #5
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	440a      	add	r2, r1
 800b3e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b3ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	0151      	lsls	r1, r2, #5
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	440a      	add	r2, r1
 800b404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b40c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	785b      	ldrb	r3, [r3, #1]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d128      	bne.n	800b48a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	015a      	lsls	r2, r3, #5
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	4413      	add	r3, r2
 800b440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	68ba      	ldr	r2, [r7, #8]
 800b448:	0151      	lsls	r1, r2, #5
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	440a      	add	r2, r1
 800b44e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b452:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b456:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	791b      	ldrb	r3, [r3, #4]
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d003      	beq.n	800b468 <USB_EPClearStall+0x4c>
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	791b      	ldrb	r3, [r3, #4]
 800b464:	2b02      	cmp	r3, #2
 800b466:	d138      	bne.n	800b4da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68ba      	ldr	r2, [r7, #8]
 800b478:	0151      	lsls	r1, r2, #5
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	440a      	add	r2, r1
 800b47e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b486:	6013      	str	r3, [r2, #0]
 800b488:	e027      	b.n	800b4da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	015a      	lsls	r2, r3, #5
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	4413      	add	r3, r2
 800b492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	0151      	lsls	r1, r2, #5
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	440a      	add	r2, r1
 800b4a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	791b      	ldrb	r3, [r3, #4]
 800b4ae:	2b03      	cmp	r3, #3
 800b4b0:	d003      	beq.n	800b4ba <USB_EPClearStall+0x9e>
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	791b      	ldrb	r3, [r3, #4]
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d10f      	bne.n	800b4da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	015a      	lsls	r2, r3, #5
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	0151      	lsls	r1, r2, #5
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	440a      	add	r2, r1
 800b4d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3714      	adds	r7, #20
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b506:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b50a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	78fb      	ldrb	r3, [r7, #3]
 800b516:	011b      	lsls	r3, r3, #4
 800b518:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b51c:	68f9      	ldr	r1, [r7, #12]
 800b51e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b522:	4313      	orrs	r3, r2
 800b524:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b54e:	f023 0303 	bic.w	r3, r3, #3
 800b552:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b562:	f023 0302 	bic.w	r3, r3, #2
 800b566:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3714      	adds	r7, #20
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr

0800b576 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b576:	b480      	push	{r7}
 800b578:	b085      	sub	sp, #20
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b590:	f023 0303 	bic.w	r3, r3, #3
 800b594:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5a4:	f043 0302 	orr.w	r3, r3, #2
 800b5a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3714      	adds	r7, #20
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b085      	sub	sp, #20
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f0:	699b      	ldr	r3, [r3, #24]
 800b5f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5fa:	69db      	ldr	r3, [r3, #28]
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	4013      	ands	r3, r2
 800b600:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	0c1b      	lsrs	r3, r3, #16
}
 800b606:	4618      	mov	r0, r3
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b612:	b480      	push	{r7}
 800b614:	b085      	sub	sp, #20
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b62e:	69db      	ldr	r3, [r3, #28]
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	4013      	ands	r3, r2
 800b634:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	b29b      	uxth	r3, r3
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b646:	b480      	push	{r7}
 800b648:	b085      	sub	sp, #20
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	460b      	mov	r3, r1
 800b650:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b656:	78fb      	ldrb	r3, [r7, #3]
 800b658:	015a      	lsls	r2, r3, #5
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	4413      	add	r3, r2
 800b65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b66c:	695b      	ldr	r3, [r3, #20]
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	4013      	ands	r3, r2
 800b672:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b674:	68bb      	ldr	r3, [r7, #8]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b682:	b480      	push	{r7}
 800b684:	b087      	sub	sp, #28
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	460b      	mov	r3, r1
 800b68c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b6a6:	78fb      	ldrb	r3, [r7, #3]
 800b6a8:	f003 030f 	and.w	r3, r3, #15
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b2:	01db      	lsls	r3, r3, #7
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b6bc:	78fb      	ldrb	r3, [r7, #3]
 800b6be:	015a      	lsls	r2, r3, #5
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b6d0:	68bb      	ldr	r3, [r7, #8]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	371c      	adds	r7, #28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	f003 0301 	and.w	r3, r3, #1
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	370c      	adds	r7, #12
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b085      	sub	sp, #20
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b714:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b718:	f023 0307 	bic.w	r3, r3, #7
 800b71c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b72c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b730:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b740:	b480      	push	{r7}
 800b742:	b087      	sub	sp, #28
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	460b      	mov	r3, r1
 800b74a:	607a      	str	r2, [r7, #4]
 800b74c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	333c      	adds	r3, #60	; 0x3c
 800b756:	3304      	adds	r3, #4
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	4a26      	ldr	r2, [pc, #152]	; (800b7f8 <USB_EP0_OutStart+0xb8>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d90a      	bls.n	800b77a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b774:	d101      	bne.n	800b77a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	e037      	b.n	800b7ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b780:	461a      	mov	r2, r3
 800b782:	2300      	movs	r3, #0
 800b784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7a8:	f043 0318 	orr.w	r3, r3, #24
 800b7ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b7c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b7c2:	7afb      	ldrb	r3, [r7, #11]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d10f      	bne.n	800b7e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	697a      	ldr	r2, [r7, #20]
 800b7de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b7e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	371c      	adds	r7, #28
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	4f54300a 	.word	0x4f54300a

0800b7fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	3301      	adds	r3, #1
 800b80c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	4a13      	ldr	r2, [pc, #76]	; (800b860 <USB_CoreReset+0x64>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d901      	bls.n	800b81a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e01b      	b.n	800b852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	daf2      	bge.n	800b808 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b822:	2300      	movs	r3, #0
 800b824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	691b      	ldr	r3, [r3, #16]
 800b82a:	f043 0201 	orr.w	r2, r3, #1
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3301      	adds	r3, #1
 800b836:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	4a09      	ldr	r2, [pc, #36]	; (800b860 <USB_CoreReset+0x64>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d901      	bls.n	800b844 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b840:	2303      	movs	r3, #3
 800b842:	e006      	b.n	800b852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	f003 0301 	and.w	r3, r3, #1
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d0f0      	beq.n	800b832 <USB_CoreReset+0x36>

  return HAL_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3714      	adds	r7, #20
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	00030d40 	.word	0x00030d40

0800b864 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	460b      	mov	r3, r1
 800b86e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b870:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b874:	f005 fbc8 	bl	8011008 <USBD_static_malloc>
 800b878:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d109      	bne.n	800b894 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	32b0      	adds	r2, #176	; 0xb0
 800b88a:	2100      	movs	r1, #0
 800b88c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b890:	2302      	movs	r3, #2
 800b892:	e0d4      	b.n	800ba3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b894:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b898:	2100      	movs	r1, #0
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f005 fc42 	bl	8011124 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	32b0      	adds	r2, #176	; 0xb0
 800b8aa:	68f9      	ldr	r1, [r7, #12]
 800b8ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	32b0      	adds	r2, #176	; 0xb0
 800b8ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	7c1b      	ldrb	r3, [r3, #16]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d138      	bne.n	800b93e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b8cc:	4b5e      	ldr	r3, [pc, #376]	; (800ba48 <USBD_CDC_Init+0x1e4>)
 800b8ce:	7819      	ldrb	r1, [r3, #0]
 800b8d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f005 fa73 	bl	8010dc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b8dc:	4b5a      	ldr	r3, [pc, #360]	; (800ba48 <USBD_CDC_Init+0x1e4>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	f003 020f 	and.w	r2, r3, #15
 800b8e4:	6879      	ldr	r1, [r7, #4]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	440b      	add	r3, r1
 800b8f0:	3324      	adds	r3, #36	; 0x24
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b8f6:	4b55      	ldr	r3, [pc, #340]	; (800ba4c <USBD_CDC_Init+0x1e8>)
 800b8f8:	7819      	ldrb	r1, [r3, #0]
 800b8fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8fe:	2202      	movs	r2, #2
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f005 fa5e 	bl	8010dc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b906:	4b51      	ldr	r3, [pc, #324]	; (800ba4c <USBD_CDC_Init+0x1e8>)
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	f003 020f 	and.w	r2, r3, #15
 800b90e:	6879      	ldr	r1, [r7, #4]
 800b910:	4613      	mov	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	440b      	add	r3, r1
 800b91a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b91e:	2201      	movs	r2, #1
 800b920:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b922:	4b4b      	ldr	r3, [pc, #300]	; (800ba50 <USBD_CDC_Init+0x1ec>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	f003 020f 	and.w	r2, r3, #15
 800b92a:	6879      	ldr	r1, [r7, #4]
 800b92c:	4613      	mov	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4413      	add	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	440b      	add	r3, r1
 800b936:	3326      	adds	r3, #38	; 0x26
 800b938:	2210      	movs	r2, #16
 800b93a:	801a      	strh	r2, [r3, #0]
 800b93c:	e035      	b.n	800b9aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b93e:	4b42      	ldr	r3, [pc, #264]	; (800ba48 <USBD_CDC_Init+0x1e4>)
 800b940:	7819      	ldrb	r1, [r3, #0]
 800b942:	2340      	movs	r3, #64	; 0x40
 800b944:	2202      	movs	r2, #2
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f005 fa3b 	bl	8010dc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b94c:	4b3e      	ldr	r3, [pc, #248]	; (800ba48 <USBD_CDC_Init+0x1e4>)
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	f003 020f 	and.w	r2, r3, #15
 800b954:	6879      	ldr	r1, [r7, #4]
 800b956:	4613      	mov	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	440b      	add	r3, r1
 800b960:	3324      	adds	r3, #36	; 0x24
 800b962:	2201      	movs	r2, #1
 800b964:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b966:	4b39      	ldr	r3, [pc, #228]	; (800ba4c <USBD_CDC_Init+0x1e8>)
 800b968:	7819      	ldrb	r1, [r3, #0]
 800b96a:	2340      	movs	r3, #64	; 0x40
 800b96c:	2202      	movs	r2, #2
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f005 fa27 	bl	8010dc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b974:	4b35      	ldr	r3, [pc, #212]	; (800ba4c <USBD_CDC_Init+0x1e8>)
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	f003 020f 	and.w	r2, r3, #15
 800b97c:	6879      	ldr	r1, [r7, #4]
 800b97e:	4613      	mov	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	440b      	add	r3, r1
 800b988:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b98c:	2201      	movs	r2, #1
 800b98e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b990:	4b2f      	ldr	r3, [pc, #188]	; (800ba50 <USBD_CDC_Init+0x1ec>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	f003 020f 	and.w	r2, r3, #15
 800b998:	6879      	ldr	r1, [r7, #4]
 800b99a:	4613      	mov	r3, r2
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	440b      	add	r3, r1
 800b9a4:	3326      	adds	r3, #38	; 0x26
 800b9a6:	2210      	movs	r2, #16
 800b9a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b9aa:	4b29      	ldr	r3, [pc, #164]	; (800ba50 <USBD_CDC_Init+0x1ec>)
 800b9ac:	7819      	ldrb	r1, [r3, #0]
 800b9ae:	2308      	movs	r3, #8
 800b9b0:	2203      	movs	r2, #3
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f005 fa05 	bl	8010dc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b9b8:	4b25      	ldr	r3, [pc, #148]	; (800ba50 <USBD_CDC_Init+0x1ec>)
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	f003 020f 	and.w	r2, r3, #15
 800b9c0:	6879      	ldr	r1, [r7, #4]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	440b      	add	r3, r1
 800b9cc:	3324      	adds	r3, #36	; 0x24
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	33b0      	adds	r3, #176	; 0xb0
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d101      	bne.n	800ba0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ba08:	2302      	movs	r3, #2
 800ba0a:	e018      	b.n	800ba3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	7c1b      	ldrb	r3, [r3, #16]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10a      	bne.n	800ba2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba14:	4b0d      	ldr	r3, [pc, #52]	; (800ba4c <USBD_CDC_Init+0x1e8>)
 800ba16:	7819      	ldrb	r1, [r3, #0]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f005 fabc 	bl	8010fa0 <USBD_LL_PrepareReceive>
 800ba28:	e008      	b.n	800ba3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba2a:	4b08      	ldr	r3, [pc, #32]	; (800ba4c <USBD_CDC_Init+0x1e8>)
 800ba2c:	7819      	ldrb	r1, [r3, #0]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba34:	2340      	movs	r3, #64	; 0x40
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f005 fab2 	bl	8010fa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	2000011f 	.word	0x2000011f
 800ba4c:	20000120 	.word	0x20000120
 800ba50:	20000121 	.word	0x20000121

0800ba54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ba60:	4b3a      	ldr	r3, [pc, #232]	; (800bb4c <USBD_CDC_DeInit+0xf8>)
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	4619      	mov	r1, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f005 f9d1 	bl	8010e0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ba6c:	4b37      	ldr	r3, [pc, #220]	; (800bb4c <USBD_CDC_DeInit+0xf8>)
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	f003 020f 	and.w	r2, r3, #15
 800ba74:	6879      	ldr	r1, [r7, #4]
 800ba76:	4613      	mov	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	4413      	add	r3, r2
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	440b      	add	r3, r1
 800ba80:	3324      	adds	r3, #36	; 0x24
 800ba82:	2200      	movs	r2, #0
 800ba84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ba86:	4b32      	ldr	r3, [pc, #200]	; (800bb50 <USBD_CDC_DeInit+0xfc>)
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f005 f9be 	bl	8010e0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ba92:	4b2f      	ldr	r3, [pc, #188]	; (800bb50 <USBD_CDC_DeInit+0xfc>)
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	f003 020f 	and.w	r2, r3, #15
 800ba9a:	6879      	ldr	r1, [r7, #4]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	440b      	add	r3, r1
 800baa6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800baaa:	2200      	movs	r2, #0
 800baac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800baae:	4b29      	ldr	r3, [pc, #164]	; (800bb54 <USBD_CDC_DeInit+0x100>)
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	4619      	mov	r1, r3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f005 f9aa 	bl	8010e0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800baba:	4b26      	ldr	r3, [pc, #152]	; (800bb54 <USBD_CDC_DeInit+0x100>)
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	f003 020f 	and.w	r2, r3, #15
 800bac2:	6879      	ldr	r1, [r7, #4]
 800bac4:	4613      	mov	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4413      	add	r3, r2
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	440b      	add	r3, r1
 800bace:	3324      	adds	r3, #36	; 0x24
 800bad0:	2200      	movs	r2, #0
 800bad2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bad4:	4b1f      	ldr	r3, [pc, #124]	; (800bb54 <USBD_CDC_DeInit+0x100>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	f003 020f 	and.w	r2, r3, #15
 800badc:	6879      	ldr	r1, [r7, #4]
 800bade:	4613      	mov	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	4413      	add	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	440b      	add	r3, r1
 800bae8:	3326      	adds	r3, #38	; 0x26
 800baea:	2200      	movs	r2, #0
 800baec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	32b0      	adds	r2, #176	; 0xb0
 800baf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d01f      	beq.n	800bb40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	33b0      	adds	r3, #176	; 0xb0
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4413      	add	r3, r2
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	32b0      	adds	r2, #176	; 0xb0
 800bb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f005 fa7e 	bl	8011024 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	32b0      	adds	r2, #176	; 0xb0
 800bb32:	2100      	movs	r1, #0
 800bb34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	2000011f 	.word	0x2000011f
 800bb50:	20000120 	.word	0x20000120
 800bb54:	20000121 	.word	0x20000121

0800bb58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	32b0      	adds	r2, #176	; 0xb0
 800bb6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bb72:	2300      	movs	r3, #0
 800bb74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bb76:	2300      	movs	r3, #0
 800bb78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d101      	bne.n	800bb88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bb84:	2303      	movs	r3, #3
 800bb86:	e0bf      	b.n	800bd08 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d050      	beq.n	800bc36 <USBD_CDC_Setup+0xde>
 800bb94:	2b20      	cmp	r3, #32
 800bb96:	f040 80af 	bne.w	800bcf8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	88db      	ldrh	r3, [r3, #6]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d03a      	beq.n	800bc18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	b25b      	sxtb	r3, r3
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	da1b      	bge.n	800bbe4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	33b0      	adds	r3, #176	; 0xb0
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bbc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	88d2      	ldrh	r2, [r2, #6]
 800bbc8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	88db      	ldrh	r3, [r3, #6]
 800bbce:	2b07      	cmp	r3, #7
 800bbd0:	bf28      	it	cs
 800bbd2:	2307      	movcs	r3, #7
 800bbd4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	89fa      	ldrh	r2, [r7, #14]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f001 fd43 	bl	800d668 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bbe2:	e090      	b.n	800bd06 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	785a      	ldrb	r2, [r3, #1]
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	88db      	ldrh	r3, [r3, #6]
 800bbf2:	2b3f      	cmp	r3, #63	; 0x3f
 800bbf4:	d803      	bhi.n	800bbfe <USBD_CDC_Setup+0xa6>
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	88db      	ldrh	r3, [r3, #6]
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	e000      	b.n	800bc00 <USBD_CDC_Setup+0xa8>
 800bbfe:	2240      	movs	r2, #64	; 0x40
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bc06:	6939      	ldr	r1, [r7, #16]
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bc0e:	461a      	mov	r2, r3
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f001 fd55 	bl	800d6c0 <USBD_CtlPrepareRx>
      break;
 800bc16:	e076      	b.n	800bd06 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	33b0      	adds	r3, #176	; 0xb0
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	683a      	ldr	r2, [r7, #0]
 800bc2c:	7850      	ldrb	r0, [r2, #1]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	4798      	blx	r3
      break;
 800bc34:	e067      	b.n	800bd06 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	785b      	ldrb	r3, [r3, #1]
 800bc3a:	2b0b      	cmp	r3, #11
 800bc3c:	d851      	bhi.n	800bce2 <USBD_CDC_Setup+0x18a>
 800bc3e:	a201      	add	r2, pc, #4	; (adr r2, 800bc44 <USBD_CDC_Setup+0xec>)
 800bc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc44:	0800bc75 	.word	0x0800bc75
 800bc48:	0800bcf1 	.word	0x0800bcf1
 800bc4c:	0800bce3 	.word	0x0800bce3
 800bc50:	0800bce3 	.word	0x0800bce3
 800bc54:	0800bce3 	.word	0x0800bce3
 800bc58:	0800bce3 	.word	0x0800bce3
 800bc5c:	0800bce3 	.word	0x0800bce3
 800bc60:	0800bce3 	.word	0x0800bce3
 800bc64:	0800bce3 	.word	0x0800bce3
 800bc68:	0800bce3 	.word	0x0800bce3
 800bc6c:	0800bc9f 	.word	0x0800bc9f
 800bc70:	0800bcc9 	.word	0x0800bcc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d107      	bne.n	800bc90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bc80:	f107 030a 	add.w	r3, r7, #10
 800bc84:	2202      	movs	r2, #2
 800bc86:	4619      	mov	r1, r3
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f001 fced 	bl	800d668 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc8e:	e032      	b.n	800bcf6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc90:	6839      	ldr	r1, [r7, #0]
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f001 fc77 	bl	800d586 <USBD_CtlError>
            ret = USBD_FAIL;
 800bc98:	2303      	movs	r3, #3
 800bc9a:	75fb      	strb	r3, [r7, #23]
          break;
 800bc9c:	e02b      	b.n	800bcf6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d107      	bne.n	800bcba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bcaa:	f107 030d 	add.w	r3, r7, #13
 800bcae:	2201      	movs	r2, #1
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f001 fcd8 	bl	800d668 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bcb8:	e01d      	b.n	800bcf6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bcba:	6839      	ldr	r1, [r7, #0]
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f001 fc62 	bl	800d586 <USBD_CtlError>
            ret = USBD_FAIL;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	75fb      	strb	r3, [r7, #23]
          break;
 800bcc6:	e016      	b.n	800bcf6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	2b03      	cmp	r3, #3
 800bcd2:	d00f      	beq.n	800bcf4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bcd4:	6839      	ldr	r1, [r7, #0]
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f001 fc55 	bl	800d586 <USBD_CtlError>
            ret = USBD_FAIL;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bce0:	e008      	b.n	800bcf4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f001 fc4e 	bl	800d586 <USBD_CtlError>
          ret = USBD_FAIL;
 800bcea:	2303      	movs	r3, #3
 800bcec:	75fb      	strb	r3, [r7, #23]
          break;
 800bcee:	e002      	b.n	800bcf6 <USBD_CDC_Setup+0x19e>
          break;
 800bcf0:	bf00      	nop
 800bcf2:	e008      	b.n	800bd06 <USBD_CDC_Setup+0x1ae>
          break;
 800bcf4:	bf00      	nop
      }
      break;
 800bcf6:	e006      	b.n	800bd06 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f001 fc43 	bl	800d586 <USBD_CtlError>
      ret = USBD_FAIL;
 800bd00:	2303      	movs	r3, #3
 800bd02:	75fb      	strb	r3, [r7, #23]
      break;
 800bd04:	bf00      	nop
  }

  return (uint8_t)ret;
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	32b0      	adds	r2, #176	; 0xb0
 800bd2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d101      	bne.n	800bd3a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e065      	b.n	800be06 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	32b0      	adds	r2, #176	; 0xb0
 800bd44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd4a:	78fb      	ldrb	r3, [r7, #3]
 800bd4c:	f003 020f 	and.w	r2, r3, #15
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	440b      	add	r3, r1
 800bd5c:	3318      	adds	r3, #24
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d02f      	beq.n	800bdc4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bd64:	78fb      	ldrb	r3, [r7, #3]
 800bd66:	f003 020f 	and.w	r2, r3, #15
 800bd6a:	6879      	ldr	r1, [r7, #4]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	440b      	add	r3, r1
 800bd76:	3318      	adds	r3, #24
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	78fb      	ldrb	r3, [r7, #3]
 800bd7c:	f003 010f 	and.w	r1, r3, #15
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	460b      	mov	r3, r1
 800bd84:	00db      	lsls	r3, r3, #3
 800bd86:	440b      	add	r3, r1
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4403      	add	r3, r0
 800bd8c:	3348      	adds	r3, #72	; 0x48
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd94:	fb01 f303 	mul.w	r3, r1, r3
 800bd98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d112      	bne.n	800bdc4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bd9e:	78fb      	ldrb	r3, [r7, #3]
 800bda0:	f003 020f 	and.w	r2, r3, #15
 800bda4:	6879      	ldr	r1, [r7, #4]
 800bda6:	4613      	mov	r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4413      	add	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	440b      	add	r3, r1
 800bdb0:	3318      	adds	r3, #24
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bdb6:	78f9      	ldrb	r1, [r7, #3]
 800bdb8:	2300      	movs	r3, #0
 800bdba:	2200      	movs	r2, #0
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f005 f8ce 	bl	8010f5e <USBD_LL_Transmit>
 800bdc2:	e01f      	b.n	800be04 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	33b0      	adds	r3, #176	; 0xb0
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4413      	add	r3, r2
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d010      	beq.n	800be04 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	33b0      	adds	r3, #176	; 0xb0
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800be00:	78fa      	ldrb	r2, [r7, #3]
 800be02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b084      	sub	sp, #16
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	460b      	mov	r3, r1
 800be18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	32b0      	adds	r2, #176	; 0xb0
 800be24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	32b0      	adds	r2, #176	; 0xb0
 800be34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d101      	bne.n	800be40 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800be3c:	2303      	movs	r3, #3
 800be3e:	e01a      	b.n	800be76 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800be40:	78fb      	ldrb	r3, [r7, #3]
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f005 f8cc 	bl	8010fe2 <USBD_LL_GetRxDataSize>
 800be4a:	4602      	mov	r2, r0
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	33b0      	adds	r3, #176	; 0xb0
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4413      	add	r3, r2
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800be70:	4611      	mov	r1, r2
 800be72:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b084      	sub	sp, #16
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	32b0      	adds	r2, #176	; 0xb0
 800be90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be9c:	2303      	movs	r3, #3
 800be9e:	e025      	b.n	800beec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	33b0      	adds	r3, #176	; 0xb0
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d01a      	beq.n	800beea <USBD_CDC_EP0_RxReady+0x6c>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800beba:	2bff      	cmp	r3, #255	; 0xff
 800bebc:	d015      	beq.n	800beea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	33b0      	adds	r3, #176	; 0xb0
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800bed6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bede:	b292      	uxth	r2, r2
 800bee0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	22ff      	movs	r2, #255	; 0xff
 800bee6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800befc:	2182      	movs	r1, #130	; 0x82
 800befe:	4818      	ldr	r0, [pc, #96]	; (800bf60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf00:	f000 fd09 	bl	800c916 <USBD_GetEpDesc>
 800bf04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf06:	2101      	movs	r1, #1
 800bf08:	4815      	ldr	r0, [pc, #84]	; (800bf60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf0a:	f000 fd04 	bl	800c916 <USBD_GetEpDesc>
 800bf0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf10:	2181      	movs	r1, #129	; 0x81
 800bf12:	4813      	ldr	r0, [pc, #76]	; (800bf60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf14:	f000 fcff 	bl	800c916 <USBD_GetEpDesc>
 800bf18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d002      	beq.n	800bf26 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	2210      	movs	r2, #16
 800bf24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d006      	beq.n	800bf3a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf34:	711a      	strb	r2, [r3, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d006      	beq.n	800bf4e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2200      	movs	r2, #0
 800bf44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf48:	711a      	strb	r2, [r3, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2243      	movs	r2, #67	; 0x43
 800bf52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf54:	4b02      	ldr	r3, [pc, #8]	; (800bf60 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3718      	adds	r7, #24
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	200000dc 	.word	0x200000dc

0800bf64 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b086      	sub	sp, #24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf6c:	2182      	movs	r1, #130	; 0x82
 800bf6e:	4818      	ldr	r0, [pc, #96]	; (800bfd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf70:	f000 fcd1 	bl	800c916 <USBD_GetEpDesc>
 800bf74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf76:	2101      	movs	r1, #1
 800bf78:	4815      	ldr	r0, [pc, #84]	; (800bfd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf7a:	f000 fccc 	bl	800c916 <USBD_GetEpDesc>
 800bf7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf80:	2181      	movs	r1, #129	; 0x81
 800bf82:	4813      	ldr	r0, [pc, #76]	; (800bfd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf84:	f000 fcc7 	bl	800c916 <USBD_GetEpDesc>
 800bf88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	2210      	movs	r2, #16
 800bf94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d006      	beq.n	800bfaa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	711a      	strb	r2, [r3, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f042 0202 	orr.w	r2, r2, #2
 800bfa8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d006      	beq.n	800bfbe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	711a      	strb	r2, [r3, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f042 0202 	orr.w	r2, r2, #2
 800bfbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2243      	movs	r2, #67	; 0x43
 800bfc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bfc4:	4b02      	ldr	r3, [pc, #8]	; (800bfd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3718      	adds	r7, #24
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	200000dc 	.word	0x200000dc

0800bfd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bfdc:	2182      	movs	r1, #130	; 0x82
 800bfde:	4818      	ldr	r0, [pc, #96]	; (800c040 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bfe0:	f000 fc99 	bl	800c916 <USBD_GetEpDesc>
 800bfe4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bfe6:	2101      	movs	r1, #1
 800bfe8:	4815      	ldr	r0, [pc, #84]	; (800c040 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bfea:	f000 fc94 	bl	800c916 <USBD_GetEpDesc>
 800bfee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bff0:	2181      	movs	r1, #129	; 0x81
 800bff2:	4813      	ldr	r0, [pc, #76]	; (800c040 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bff4:	f000 fc8f 	bl	800c916 <USBD_GetEpDesc>
 800bff8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2210      	movs	r2, #16
 800c004:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d006      	beq.n	800c01a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	2200      	movs	r2, #0
 800c010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c014:	711a      	strb	r2, [r3, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d006      	beq.n	800c02e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2200      	movs	r2, #0
 800c024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c028:	711a      	strb	r2, [r3, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2243      	movs	r2, #67	; 0x43
 800c032:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c034:	4b02      	ldr	r3, [pc, #8]	; (800c040 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c036:	4618      	mov	r0, r3
 800c038:	3718      	adds	r7, #24
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	200000dc 	.word	0x200000dc

0800c044 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	220a      	movs	r2, #10
 800c050:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c052:	4b03      	ldr	r3, [pc, #12]	; (800c060 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c054:	4618      	mov	r0, r3
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	20000098 	.word	0x20000098

0800c064 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c074:	2303      	movs	r3, #3
 800c076:	e009      	b.n	800c08c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	33b0      	adds	r3, #176	; 0xb0
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4413      	add	r3, r2
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c098:	b480      	push	{r7}
 800c09a:	b087      	sub	sp, #28
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	32b0      	adds	r2, #176	; 0xb0
 800c0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	e008      	b.n	800c0d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	371c      	adds	r7, #28
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	32b0      	adds	r2, #176	; 0xb0
 800c0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d101      	bne.n	800c100 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c0fc:	2303      	movs	r3, #3
 800c0fe:	e004      	b.n	800c10a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
	...

0800c118 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	32b0      	adds	r2, #176	; 0xb0
 800c12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c12e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	32b0      	adds	r2, #176	; 0xb0
 800c13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d101      	bne.n	800c146 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c142:	2303      	movs	r3, #3
 800c144:	e018      	b.n	800c178 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	7c1b      	ldrb	r3, [r3, #16]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10a      	bne.n	800c164 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c14e:	4b0c      	ldr	r3, [pc, #48]	; (800c180 <USBD_CDC_ReceivePacket+0x68>)
 800c150:	7819      	ldrb	r1, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f004 ff1f 	bl	8010fa0 <USBD_LL_PrepareReceive>
 800c162:	e008      	b.n	800c176 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c164:	4b06      	ldr	r3, [pc, #24]	; (800c180 <USBD_CDC_ReceivePacket+0x68>)
 800c166:	7819      	ldrb	r1, [r3, #0]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c16e:	2340      	movs	r3, #64	; 0x40
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f004 ff15 	bl	8010fa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	20000120 	.word	0x20000120

0800c184 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	4613      	mov	r3, r2
 800c190:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d101      	bne.n	800c19c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c198:	2303      	movs	r3, #3
 800c19a:	e01f      	b.n	800c1dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	79fa      	ldrb	r2, [r7, #7]
 800c1ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f004 fd8f 	bl	8010cf4 <USBD_LL_Init>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c1da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3718      	adds	r7, #24
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c1f8:	2303      	movs	r3, #3
 800c1fa:	e025      	b.n	800c248 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	32ae      	adds	r2, #174	; 0xae
 800c20e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00f      	beq.n	800c238 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	32ae      	adds	r2, #174	; 0xae
 800c222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	f107 020e 	add.w	r2, r7, #14
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	4602      	mov	r2, r0
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c23e:	1c5a      	adds	r2, r3, #1
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f004 fd97 	bl	8010d8c <USBD_LL_Start>
 800c25e:	4603      	mov	r3, r0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c270:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c272:	4618      	mov	r0, r3
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr

0800c27e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b084      	sub	sp, #16
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
 800c286:	460b      	mov	r3, r1
 800c288:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c294:	2b00      	cmp	r3, #0
 800c296:	d009      	beq.n	800c2ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	78fa      	ldrb	r2, [r7, #3]
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	4798      	blx	r3
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b084      	sub	sp, #16
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	460b      	mov	r3, r1
 800c2c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	78fa      	ldrb	r2, [r7, #3]
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	4798      	blx	r3
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d001      	beq.n	800c2e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b084      	sub	sp, #16
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f001 f908 	bl	800d512 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c310:	461a      	mov	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c31e:	f003 031f 	and.w	r3, r3, #31
 800c322:	2b02      	cmp	r3, #2
 800c324:	d01a      	beq.n	800c35c <USBD_LL_SetupStage+0x72>
 800c326:	2b02      	cmp	r3, #2
 800c328:	d822      	bhi.n	800c370 <USBD_LL_SetupStage+0x86>
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d002      	beq.n	800c334 <USBD_LL_SetupStage+0x4a>
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d00a      	beq.n	800c348 <USBD_LL_SetupStage+0x5e>
 800c332:	e01d      	b.n	800c370 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c33a:	4619      	mov	r1, r3
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fb5f 	bl	800ca00 <USBD_StdDevReq>
 800c342:	4603      	mov	r3, r0
 800c344:	73fb      	strb	r3, [r7, #15]
      break;
 800c346:	e020      	b.n	800c38a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c34e:	4619      	mov	r1, r3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fbc7 	bl	800cae4 <USBD_StdItfReq>
 800c356:	4603      	mov	r3, r0
 800c358:	73fb      	strb	r3, [r7, #15]
      break;
 800c35a:	e016      	b.n	800c38a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c362:	4619      	mov	r1, r3
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 fc29 	bl	800cbbc <USBD_StdEPReq>
 800c36a:	4603      	mov	r3, r0
 800c36c:	73fb      	strb	r3, [r7, #15]
      break;
 800c36e:	e00c      	b.n	800c38a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c376:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	4619      	mov	r1, r3
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f004 fd64 	bl	8010e4c <USBD_LL_StallEP>
 800c384:	4603      	mov	r3, r0
 800c386:	73fb      	strb	r3, [r7, #15]
      break;
 800c388:	bf00      	nop
  }

  return ret;
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	460b      	mov	r3, r1
 800c39e:	607a      	str	r2, [r7, #4]
 800c3a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c3a6:	7afb      	ldrb	r3, [r7, #11]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d16e      	bne.n	800c48a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c3b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	f040 8098 	bne.w	800c4f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	689a      	ldr	r2, [r3, #8]
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d913      	bls.n	800c3f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	689a      	ldr	r2, [r3, #8]
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	1ad2      	subs	r2, r2, r3
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	68da      	ldr	r2, [r3, #12]
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	bf28      	it	cs
 800c3e6:	4613      	movcs	r3, r2
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	6879      	ldr	r1, [r7, #4]
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f001 f984 	bl	800d6fa <USBD_CtlContinueRx>
 800c3f2:	e07d      	b.n	800c4f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c3fa:	f003 031f 	and.w	r3, r3, #31
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	d014      	beq.n	800c42c <USBD_LL_DataOutStage+0x98>
 800c402:	2b02      	cmp	r3, #2
 800c404:	d81d      	bhi.n	800c442 <USBD_LL_DataOutStage+0xae>
 800c406:	2b00      	cmp	r3, #0
 800c408:	d002      	beq.n	800c410 <USBD_LL_DataOutStage+0x7c>
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d003      	beq.n	800c416 <USBD_LL_DataOutStage+0x82>
 800c40e:	e018      	b.n	800c442 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c410:	2300      	movs	r3, #0
 800c412:	75bb      	strb	r3, [r7, #22]
            break;
 800c414:	e018      	b.n	800c448 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	4619      	mov	r1, r3
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f000 fa5e 	bl	800c8e2 <USBD_CoreFindIF>
 800c426:	4603      	mov	r3, r0
 800c428:	75bb      	strb	r3, [r7, #22]
            break;
 800c42a:	e00d      	b.n	800c448 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c432:	b2db      	uxtb	r3, r3
 800c434:	4619      	mov	r1, r3
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	f000 fa60 	bl	800c8fc <USBD_CoreFindEP>
 800c43c:	4603      	mov	r3, r0
 800c43e:	75bb      	strb	r3, [r7, #22]
            break;
 800c440:	e002      	b.n	800c448 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c442:	2300      	movs	r3, #0
 800c444:	75bb      	strb	r3, [r7, #22]
            break;
 800c446:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c448:	7dbb      	ldrb	r3, [r7, #22]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d119      	bne.n	800c482 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b03      	cmp	r3, #3
 800c458:	d113      	bne.n	800c482 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c45a:	7dba      	ldrb	r2, [r7, #22]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	32ae      	adds	r2, #174	; 0xae
 800c460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00b      	beq.n	800c482 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c46a:	7dba      	ldrb	r2, [r7, #22]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c472:	7dba      	ldrb	r2, [r7, #22]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	32ae      	adds	r2, #174	; 0xae
 800c478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f001 f94a 	bl	800d71c <USBD_CtlSendStatus>
 800c488:	e032      	b.n	800c4f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c48a:	7afb      	ldrb	r3, [r7, #11]
 800c48c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c490:	b2db      	uxtb	r3, r3
 800c492:	4619      	mov	r1, r3
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f000 fa31 	bl	800c8fc <USBD_CoreFindEP>
 800c49a:	4603      	mov	r3, r0
 800c49c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c49e:	7dbb      	ldrb	r3, [r7, #22]
 800c4a0:	2bff      	cmp	r3, #255	; 0xff
 800c4a2:	d025      	beq.n	800c4f0 <USBD_LL_DataOutStage+0x15c>
 800c4a4:	7dbb      	ldrb	r3, [r7, #22]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d122      	bne.n	800c4f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b03      	cmp	r3, #3
 800c4b4:	d117      	bne.n	800c4e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c4b6:	7dba      	ldrb	r2, [r7, #22]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	32ae      	adds	r2, #174	; 0xae
 800c4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00f      	beq.n	800c4e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c4c6:	7dba      	ldrb	r2, [r7, #22]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c4ce:	7dba      	ldrb	r2, [r7, #22]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	32ae      	adds	r2, #174	; 0xae
 800c4d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	7afa      	ldrb	r2, [r7, #11]
 800c4dc:	4611      	mov	r1, r2
 800c4de:	68f8      	ldr	r0, [r7, #12]
 800c4e0:	4798      	blx	r3
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c4e6:	7dfb      	ldrb	r3, [r7, #23]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d001      	beq.n	800c4f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c4ec:	7dfb      	ldrb	r3, [r7, #23]
 800c4ee:	e000      	b.n	800c4f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c4f0:	2300      	movs	r3, #0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b086      	sub	sp, #24
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	460b      	mov	r3, r1
 800c504:	607a      	str	r2, [r7, #4]
 800c506:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c508:	7afb      	ldrb	r3, [r7, #11]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d16f      	bne.n	800c5ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	3314      	adds	r3, #20
 800c512:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d15a      	bne.n	800c5d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	689a      	ldr	r2, [r3, #8]
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	429a      	cmp	r2, r3
 800c528:	d914      	bls.n	800c554 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	689a      	ldr	r2, [r3, #8]
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	1ad2      	subs	r2, r2, r3
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	461a      	mov	r2, r3
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f001 f8ac 	bl	800d69e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c546:	2300      	movs	r3, #0
 800c548:	2200      	movs	r2, #0
 800c54a:	2100      	movs	r1, #0
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f004 fd27 	bl	8010fa0 <USBD_LL_PrepareReceive>
 800c552:	e03f      	b.n	800c5d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	68da      	ldr	r2, [r3, #12]
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d11c      	bne.n	800c59a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	685a      	ldr	r2, [r3, #4]
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c568:	429a      	cmp	r2, r3
 800c56a:	d316      	bcc.n	800c59a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	685a      	ldr	r2, [r3, #4]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c576:	429a      	cmp	r2, r3
 800c578:	d20f      	bcs.n	800c59a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c57a:	2200      	movs	r2, #0
 800c57c:	2100      	movs	r1, #0
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f001 f88d 	bl	800d69e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c58c:	2300      	movs	r3, #0
 800c58e:	2200      	movs	r2, #0
 800c590:	2100      	movs	r1, #0
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f004 fd04 	bl	8010fa0 <USBD_LL_PrepareReceive>
 800c598:	e01c      	b.n	800c5d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	2b03      	cmp	r3, #3
 800c5a4:	d10f      	bne.n	800c5c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d009      	beq.n	800c5c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5c6:	2180      	movs	r1, #128	; 0x80
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f004 fc3f 	bl	8010e4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f001 f8b7 	bl	800d742 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d03a      	beq.n	800c654 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f7ff fe42 	bl	800c268 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c5ec:	e032      	b.n	800c654 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c5ee:	7afb      	ldrb	r3, [r7, #11]
 800c5f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f000 f97f 	bl	800c8fc <USBD_CoreFindEP>
 800c5fe:	4603      	mov	r3, r0
 800c600:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c602:	7dfb      	ldrb	r3, [r7, #23]
 800c604:	2bff      	cmp	r3, #255	; 0xff
 800c606:	d025      	beq.n	800c654 <USBD_LL_DataInStage+0x15a>
 800c608:	7dfb      	ldrb	r3, [r7, #23]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d122      	bne.n	800c654 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c614:	b2db      	uxtb	r3, r3
 800c616:	2b03      	cmp	r3, #3
 800c618:	d11c      	bne.n	800c654 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c61a:	7dfa      	ldrb	r2, [r7, #23]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	32ae      	adds	r2, #174	; 0xae
 800c620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d014      	beq.n	800c654 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c62a:	7dfa      	ldrb	r2, [r7, #23]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c632:	7dfa      	ldrb	r2, [r7, #23]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	32ae      	adds	r2, #174	; 0xae
 800c638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c63c:	695b      	ldr	r3, [r3, #20]
 800c63e:	7afa      	ldrb	r2, [r7, #11]
 800c640:	4611      	mov	r1, r2
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	4798      	blx	r3
 800c646:	4603      	mov	r3, r0
 800c648:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c64a:	7dbb      	ldrb	r3, [r7, #22]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d001      	beq.n	800c654 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c650:	7dbb      	ldrb	r3, [r7, #22]
 800c652:	e000      	b.n	800c656 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3718      	adds	r7, #24
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b084      	sub	sp, #16
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2201      	movs	r2, #1
 800c66e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c696:	2b00      	cmp	r3, #0
 800c698:	d014      	beq.n	800c6c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00e      	beq.n	800c6c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	6852      	ldr	r2, [r2, #4]
 800c6b2:	b2d2      	uxtb	r2, r2
 800c6b4:	4611      	mov	r1, r2
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	4798      	blx	r3
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6c4:	2340      	movs	r3, #64	; 0x40
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f004 fb79 	bl	8010dc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2240      	movs	r2, #64	; 0x40
 800c6dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6e0:	2340      	movs	r3, #64	; 0x40
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	2180      	movs	r1, #128	; 0x80
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f004 fb6b 	bl	8010dc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2240      	movs	r2, #64	; 0x40
 800c6f6:	621a      	str	r2, [r3, #32]

  return ret;
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c702:	b480      	push	{r7}
 800c704:	b083      	sub	sp, #12
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	460b      	mov	r3, r1
 800c70c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	78fa      	ldrb	r2, [r7, #3]
 800c712:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	370c      	adds	r7, #12
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr

0800c722 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c722:	b480      	push	{r7}
 800c724:	b083      	sub	sp, #12
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c730:	b2da      	uxtb	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2204      	movs	r2, #4
 800c73c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c74e:	b480      	push	{r7}
 800c750:	b083      	sub	sp, #12
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d106      	bne.n	800c770 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c770:	2300      	movs	r3, #0
}
 800c772:	4618      	mov	r0, r3
 800c774:	370c      	adds	r7, #12
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr

0800c77e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c77e:	b580      	push	{r7, lr}
 800c780:	b082      	sub	sp, #8
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	2b03      	cmp	r3, #3
 800c790:	d110      	bne.n	800c7b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00b      	beq.n	800c7b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a2:	69db      	ldr	r3, [r3, #28]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d005      	beq.n	800c7b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ae:	69db      	ldr	r3, [r3, #28]
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b082      	sub	sp, #8
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	32ae      	adds	r2, #174	; 0xae
 800c7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d101      	bne.n	800c7e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	e01c      	b.n	800c81a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b03      	cmp	r3, #3
 800c7ea:	d115      	bne.n	800c818 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	32ae      	adds	r2, #174	; 0xae
 800c7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7fa:	6a1b      	ldr	r3, [r3, #32]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00b      	beq.n	800c818 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	32ae      	adds	r2, #174	; 0xae
 800c80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c80e:	6a1b      	ldr	r3, [r3, #32]
 800c810:	78fa      	ldrb	r2, [r7, #3]
 800c812:	4611      	mov	r1, r2
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	460b      	mov	r3, r1
 800c82c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	32ae      	adds	r2, #174	; 0xae
 800c838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d101      	bne.n	800c844 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c840:	2303      	movs	r3, #3
 800c842:	e01c      	b.n	800c87e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	2b03      	cmp	r3, #3
 800c84e:	d115      	bne.n	800c87c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	32ae      	adds	r2, #174	; 0xae
 800c85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00b      	beq.n	800c87c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	32ae      	adds	r2, #174	; 0xae
 800c86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c874:	78fa      	ldrb	r2, [r7, #3]
 800c876:	4611      	mov	r1, r2
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c886:	b480      	push	{r7}
 800c888:	b083      	sub	sp, #12
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d00e      	beq.n	800c8d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	6852      	ldr	r2, [r2, #4]
 800c8c6:	b2d2      	uxtb	r2, r2
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	4798      	blx	r3
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d001      	beq.n	800c8d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c8e2:	b480      	push	{r7}
 800c8e4:	b083      	sub	sp, #12
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c8ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	460b      	mov	r3, r1
 800c906:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c908:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b086      	sub	sp, #24
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	460b      	mov	r3, r1
 800c920:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c92a:	2300      	movs	r3, #0
 800c92c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	885b      	ldrh	r3, [r3, #2]
 800c932:	b29a      	uxth	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d920      	bls.n	800c980 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	b29b      	uxth	r3, r3
 800c944:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c946:	e013      	b.n	800c970 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c948:	f107 030a 	add.w	r3, r7, #10
 800c94c:	4619      	mov	r1, r3
 800c94e:	6978      	ldr	r0, [r7, #20]
 800c950:	f000 f81b 	bl	800c98a <USBD_GetNextDesc>
 800c954:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	785b      	ldrb	r3, [r3, #1]
 800c95a:	2b05      	cmp	r3, #5
 800c95c:	d108      	bne.n	800c970 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	789b      	ldrb	r3, [r3, #2]
 800c966:	78fa      	ldrb	r2, [r7, #3]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d008      	beq.n	800c97e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c96c:	2300      	movs	r3, #0
 800c96e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	885b      	ldrh	r3, [r3, #2]
 800c974:	b29a      	uxth	r2, r3
 800c976:	897b      	ldrh	r3, [r7, #10]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d8e5      	bhi.n	800c948 <USBD_GetEpDesc+0x32>
 800c97c:	e000      	b.n	800c980 <USBD_GetEpDesc+0x6a>
          break;
 800c97e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c980:	693b      	ldr	r3, [r7, #16]
}
 800c982:	4618      	mov	r0, r3
 800c984:	3718      	adds	r7, #24
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b085      	sub	sp, #20
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	881a      	ldrh	r2, [r3, #0]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	4413      	add	r3, r2
 800c9a4:	b29a      	uxth	r2, r3
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3714      	adds	r7, #20
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b087      	sub	sp, #28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c9e2:	8a3b      	ldrh	r3, [r7, #16]
 800c9e4:	021b      	lsls	r3, r3, #8
 800c9e6:	b21a      	sxth	r2, r3
 800c9e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	b21b      	sxth	r3, r3
 800c9f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c9f2:	89fb      	ldrh	r3, [r7, #14]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	371c      	adds	r7, #28
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca16:	2b40      	cmp	r3, #64	; 0x40
 800ca18:	d005      	beq.n	800ca26 <USBD_StdDevReq+0x26>
 800ca1a:	2b40      	cmp	r3, #64	; 0x40
 800ca1c:	d857      	bhi.n	800cace <USBD_StdDevReq+0xce>
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00f      	beq.n	800ca42 <USBD_StdDevReq+0x42>
 800ca22:	2b20      	cmp	r3, #32
 800ca24:	d153      	bne.n	800cace <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	32ae      	adds	r2, #174	; 0xae
 800ca30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	4798      	blx	r3
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ca40:	e04a      	b.n	800cad8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	785b      	ldrb	r3, [r3, #1]
 800ca46:	2b09      	cmp	r3, #9
 800ca48:	d83b      	bhi.n	800cac2 <USBD_StdDevReq+0xc2>
 800ca4a:	a201      	add	r2, pc, #4	; (adr r2, 800ca50 <USBD_StdDevReq+0x50>)
 800ca4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca50:	0800caa5 	.word	0x0800caa5
 800ca54:	0800cab9 	.word	0x0800cab9
 800ca58:	0800cac3 	.word	0x0800cac3
 800ca5c:	0800caaf 	.word	0x0800caaf
 800ca60:	0800cac3 	.word	0x0800cac3
 800ca64:	0800ca83 	.word	0x0800ca83
 800ca68:	0800ca79 	.word	0x0800ca79
 800ca6c:	0800cac3 	.word	0x0800cac3
 800ca70:	0800ca9b 	.word	0x0800ca9b
 800ca74:	0800ca8d 	.word	0x0800ca8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca78:	6839      	ldr	r1, [r7, #0]
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 fa3c 	bl	800cef8 <USBD_GetDescriptor>
          break;
 800ca80:	e024      	b.n	800cacc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fba1 	bl	800d1cc <USBD_SetAddress>
          break;
 800ca8a:	e01f      	b.n	800cacc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fbe0 	bl	800d254 <USBD_SetConfig>
 800ca94:	4603      	mov	r3, r0
 800ca96:	73fb      	strb	r3, [r7, #15]
          break;
 800ca98:	e018      	b.n	800cacc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca9a:	6839      	ldr	r1, [r7, #0]
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 fc83 	bl	800d3a8 <USBD_GetConfig>
          break;
 800caa2:	e013      	b.n	800cacc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800caa4:	6839      	ldr	r1, [r7, #0]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fcb4 	bl	800d414 <USBD_GetStatus>
          break;
 800caac:	e00e      	b.n	800cacc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fce3 	bl	800d47c <USBD_SetFeature>
          break;
 800cab6:	e009      	b.n	800cacc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cab8:	6839      	ldr	r1, [r7, #0]
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 fd07 	bl	800d4ce <USBD_ClrFeature>
          break;
 800cac0:	e004      	b.n	800cacc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cac2:	6839      	ldr	r1, [r7, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fd5e 	bl	800d586 <USBD_CtlError>
          break;
 800caca:	bf00      	nop
      }
      break;
 800cacc:	e004      	b.n	800cad8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cace:	6839      	ldr	r1, [r7, #0]
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 fd58 	bl	800d586 <USBD_CtlError>
      break;
 800cad6:	bf00      	nop
  }

  return ret;
 800cad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop

0800cae4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cafa:	2b40      	cmp	r3, #64	; 0x40
 800cafc:	d005      	beq.n	800cb0a <USBD_StdItfReq+0x26>
 800cafe:	2b40      	cmp	r3, #64	; 0x40
 800cb00:	d852      	bhi.n	800cba8 <USBD_StdItfReq+0xc4>
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d001      	beq.n	800cb0a <USBD_StdItfReq+0x26>
 800cb06:	2b20      	cmp	r3, #32
 800cb08:	d14e      	bne.n	800cba8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	3b01      	subs	r3, #1
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d840      	bhi.n	800cb9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	889b      	ldrh	r3, [r3, #4]
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d836      	bhi.n	800cb90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	889b      	ldrh	r3, [r3, #4]
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7ff fed9 	bl	800c8e2 <USBD_CoreFindIF>
 800cb30:	4603      	mov	r3, r0
 800cb32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb34:	7bbb      	ldrb	r3, [r7, #14]
 800cb36:	2bff      	cmp	r3, #255	; 0xff
 800cb38:	d01d      	beq.n	800cb76 <USBD_StdItfReq+0x92>
 800cb3a:	7bbb      	ldrb	r3, [r7, #14]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d11a      	bne.n	800cb76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cb40:	7bba      	ldrb	r2, [r7, #14]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	32ae      	adds	r2, #174	; 0xae
 800cb46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d00f      	beq.n	800cb70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cb50:	7bba      	ldrb	r2, [r7, #14]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cb58:	7bba      	ldrb	r2, [r7, #14]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	32ae      	adds	r2, #174	; 0xae
 800cb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	6839      	ldr	r1, [r7, #0]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	4798      	blx	r3
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cb6e:	e004      	b.n	800cb7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cb70:	2303      	movs	r3, #3
 800cb72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cb74:	e001      	b.n	800cb7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cb76:	2303      	movs	r3, #3
 800cb78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	88db      	ldrh	r3, [r3, #6]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d110      	bne.n	800cba4 <USBD_StdItfReq+0xc0>
 800cb82:	7bfb      	ldrb	r3, [r7, #15]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10d      	bne.n	800cba4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fdc7 	bl	800d71c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb8e:	e009      	b.n	800cba4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cb90:	6839      	ldr	r1, [r7, #0]
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fcf7 	bl	800d586 <USBD_CtlError>
          break;
 800cb98:	e004      	b.n	800cba4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cb9a:	6839      	ldr	r1, [r7, #0]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 fcf2 	bl	800d586 <USBD_CtlError>
          break;
 800cba2:	e000      	b.n	800cba6 <USBD_StdItfReq+0xc2>
          break;
 800cba4:	bf00      	nop
      }
      break;
 800cba6:	e004      	b.n	800cbb2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cba8:	6839      	ldr	r1, [r7, #0]
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 fceb 	bl	800d586 <USBD_CtlError>
      break;
 800cbb0:	bf00      	nop
  }

  return ret;
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	889b      	ldrh	r3, [r3, #4]
 800cbce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbd8:	2b40      	cmp	r3, #64	; 0x40
 800cbda:	d007      	beq.n	800cbec <USBD_StdEPReq+0x30>
 800cbdc:	2b40      	cmp	r3, #64	; 0x40
 800cbde:	f200 817f 	bhi.w	800cee0 <USBD_StdEPReq+0x324>
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d02a      	beq.n	800cc3c <USBD_StdEPReq+0x80>
 800cbe6:	2b20      	cmp	r3, #32
 800cbe8:	f040 817a 	bne.w	800cee0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cbec:	7bbb      	ldrb	r3, [r7, #14]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f7ff fe83 	bl	800c8fc <USBD_CoreFindEP>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cbfa:	7b7b      	ldrb	r3, [r7, #13]
 800cbfc:	2bff      	cmp	r3, #255	; 0xff
 800cbfe:	f000 8174 	beq.w	800ceea <USBD_StdEPReq+0x32e>
 800cc02:	7b7b      	ldrb	r3, [r7, #13]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	f040 8170 	bne.w	800ceea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cc0a:	7b7a      	ldrb	r2, [r7, #13]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cc12:	7b7a      	ldrb	r2, [r7, #13]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	32ae      	adds	r2, #174	; 0xae
 800cc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f000 8163 	beq.w	800ceea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cc24:	7b7a      	ldrb	r2, [r7, #13]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	32ae      	adds	r2, #174	; 0xae
 800cc2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	6839      	ldr	r1, [r7, #0]
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	4798      	blx	r3
 800cc36:	4603      	mov	r3, r0
 800cc38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cc3a:	e156      	b.n	800ceea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	785b      	ldrb	r3, [r3, #1]
 800cc40:	2b03      	cmp	r3, #3
 800cc42:	d008      	beq.n	800cc56 <USBD_StdEPReq+0x9a>
 800cc44:	2b03      	cmp	r3, #3
 800cc46:	f300 8145 	bgt.w	800ced4 <USBD_StdEPReq+0x318>
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	f000 809b 	beq.w	800cd86 <USBD_StdEPReq+0x1ca>
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d03c      	beq.n	800ccce <USBD_StdEPReq+0x112>
 800cc54:	e13e      	b.n	800ced4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	d002      	beq.n	800cc68 <USBD_StdEPReq+0xac>
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d016      	beq.n	800cc94 <USBD_StdEPReq+0xd8>
 800cc66:	e02c      	b.n	800ccc2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc68:	7bbb      	ldrb	r3, [r7, #14]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00d      	beq.n	800cc8a <USBD_StdEPReq+0xce>
 800cc6e:	7bbb      	ldrb	r3, [r7, #14]
 800cc70:	2b80      	cmp	r3, #128	; 0x80
 800cc72:	d00a      	beq.n	800cc8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc74:	7bbb      	ldrb	r3, [r7, #14]
 800cc76:	4619      	mov	r1, r3
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f004 f8e7 	bl	8010e4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc7e:	2180      	movs	r1, #128	; 0x80
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f004 f8e3 	bl	8010e4c <USBD_LL_StallEP>
 800cc86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc88:	e020      	b.n	800cccc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fc7a 	bl	800d586 <USBD_CtlError>
              break;
 800cc92:	e01b      	b.n	800cccc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	885b      	ldrh	r3, [r3, #2]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10e      	bne.n	800ccba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc9c:	7bbb      	ldrb	r3, [r7, #14]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d00b      	beq.n	800ccba <USBD_StdEPReq+0xfe>
 800cca2:	7bbb      	ldrb	r3, [r7, #14]
 800cca4:	2b80      	cmp	r3, #128	; 0x80
 800cca6:	d008      	beq.n	800ccba <USBD_StdEPReq+0xfe>
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	88db      	ldrh	r3, [r3, #6]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d104      	bne.n	800ccba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ccb0:	7bbb      	ldrb	r3, [r7, #14]
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f004 f8c9 	bl	8010e4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fd2e 	bl	800d71c <USBD_CtlSendStatus>

              break;
 800ccc0:	e004      	b.n	800cccc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ccc2:	6839      	ldr	r1, [r7, #0]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fc5e 	bl	800d586 <USBD_CtlError>
              break;
 800ccca:	bf00      	nop
          }
          break;
 800cccc:	e107      	b.n	800cede <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	d002      	beq.n	800cce0 <USBD_StdEPReq+0x124>
 800ccda:	2b03      	cmp	r3, #3
 800ccdc:	d016      	beq.n	800cd0c <USBD_StdEPReq+0x150>
 800ccde:	e04b      	b.n	800cd78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cce0:	7bbb      	ldrb	r3, [r7, #14]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00d      	beq.n	800cd02 <USBD_StdEPReq+0x146>
 800cce6:	7bbb      	ldrb	r3, [r7, #14]
 800cce8:	2b80      	cmp	r3, #128	; 0x80
 800ccea:	d00a      	beq.n	800cd02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ccec:	7bbb      	ldrb	r3, [r7, #14]
 800ccee:	4619      	mov	r1, r3
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f004 f8ab 	bl	8010e4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccf6:	2180      	movs	r1, #128	; 0x80
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f004 f8a7 	bl	8010e4c <USBD_LL_StallEP>
 800ccfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd00:	e040      	b.n	800cd84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cd02:	6839      	ldr	r1, [r7, #0]
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fc3e 	bl	800d586 <USBD_CtlError>
              break;
 800cd0a:	e03b      	b.n	800cd84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	885b      	ldrh	r3, [r3, #2]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d136      	bne.n	800cd82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cd14:	7bbb      	ldrb	r3, [r7, #14]
 800cd16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d004      	beq.n	800cd28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cd1e:	7bbb      	ldrb	r3, [r7, #14]
 800cd20:	4619      	mov	r1, r3
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f004 f8b1 	bl	8010e8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 fcf7 	bl	800d71c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cd2e:	7bbb      	ldrb	r3, [r7, #14]
 800cd30:	4619      	mov	r1, r3
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff fde2 	bl	800c8fc <USBD_CoreFindEP>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd3c:	7b7b      	ldrb	r3, [r7, #13]
 800cd3e:	2bff      	cmp	r3, #255	; 0xff
 800cd40:	d01f      	beq.n	800cd82 <USBD_StdEPReq+0x1c6>
 800cd42:	7b7b      	ldrb	r3, [r7, #13]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d11c      	bne.n	800cd82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cd48:	7b7a      	ldrb	r2, [r7, #13]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cd50:	7b7a      	ldrb	r2, [r7, #13]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	32ae      	adds	r2, #174	; 0xae
 800cd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d010      	beq.n	800cd82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cd60:	7b7a      	ldrb	r2, [r7, #13]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	32ae      	adds	r2, #174	; 0xae
 800cd66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	6839      	ldr	r1, [r7, #0]
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	4798      	blx	r3
 800cd72:	4603      	mov	r3, r0
 800cd74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cd76:	e004      	b.n	800cd82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cd78:	6839      	ldr	r1, [r7, #0]
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 fc03 	bl	800d586 <USBD_CtlError>
              break;
 800cd80:	e000      	b.n	800cd84 <USBD_StdEPReq+0x1c8>
              break;
 800cd82:	bf00      	nop
          }
          break;
 800cd84:	e0ab      	b.n	800cede <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d002      	beq.n	800cd98 <USBD_StdEPReq+0x1dc>
 800cd92:	2b03      	cmp	r3, #3
 800cd94:	d032      	beq.n	800cdfc <USBD_StdEPReq+0x240>
 800cd96:	e097      	b.n	800cec8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd98:	7bbb      	ldrb	r3, [r7, #14]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d007      	beq.n	800cdae <USBD_StdEPReq+0x1f2>
 800cd9e:	7bbb      	ldrb	r3, [r7, #14]
 800cda0:	2b80      	cmp	r3, #128	; 0x80
 800cda2:	d004      	beq.n	800cdae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cda4:	6839      	ldr	r1, [r7, #0]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 fbed 	bl	800d586 <USBD_CtlError>
                break;
 800cdac:	e091      	b.n	800ced2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	da0b      	bge.n	800cdce <USBD_StdEPReq+0x212>
 800cdb6:	7bbb      	ldrb	r3, [r7, #14]
 800cdb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	4413      	add	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	3310      	adds	r3, #16
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	4413      	add	r3, r2
 800cdca:	3304      	adds	r3, #4
 800cdcc:	e00b      	b.n	800cde6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cdce:	7bbb      	ldrb	r3, [r7, #14]
 800cdd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	4413      	add	r3, r2
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	4413      	add	r3, r2
 800cde4:	3304      	adds	r3, #4
 800cde6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2200      	movs	r2, #0
 800cdec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	2202      	movs	r2, #2
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 fc37 	bl	800d668 <USBD_CtlSendData>
              break;
 800cdfa:	e06a      	b.n	800ced2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cdfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	da11      	bge.n	800ce28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ce04:	7bbb      	ldrb	r3, [r7, #14]
 800ce06:	f003 020f 	and.w	r2, r3, #15
 800ce0a:	6879      	ldr	r1, [r7, #4]
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	440b      	add	r3, r1
 800ce16:	3324      	adds	r3, #36	; 0x24
 800ce18:	881b      	ldrh	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d117      	bne.n	800ce4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ce1e:	6839      	ldr	r1, [r7, #0]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 fbb0 	bl	800d586 <USBD_CtlError>
                  break;
 800ce26:	e054      	b.n	800ced2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ce28:	7bbb      	ldrb	r3, [r7, #14]
 800ce2a:	f003 020f 	and.w	r2, r3, #15
 800ce2e:	6879      	ldr	r1, [r7, #4]
 800ce30:	4613      	mov	r3, r2
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	4413      	add	r3, r2
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	440b      	add	r3, r1
 800ce3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ce3e:	881b      	ldrh	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d104      	bne.n	800ce4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ce44:	6839      	ldr	r1, [r7, #0]
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 fb9d 	bl	800d586 <USBD_CtlError>
                  break;
 800ce4c:	e041      	b.n	800ced2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	da0b      	bge.n	800ce6e <USBD_StdEPReq+0x2b2>
 800ce56:	7bbb      	ldrb	r3, [r7, #14]
 800ce58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	3310      	adds	r3, #16
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	4413      	add	r3, r2
 800ce6a:	3304      	adds	r3, #4
 800ce6c:	e00b      	b.n	800ce86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce6e:	7bbb      	ldrb	r3, [r7, #14]
 800ce70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce74:	4613      	mov	r3, r2
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	4413      	add	r3, r2
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	4413      	add	r3, r2
 800ce84:	3304      	adds	r3, #4
 800ce86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ce88:	7bbb      	ldrb	r3, [r7, #14]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d002      	beq.n	800ce94 <USBD_StdEPReq+0x2d8>
 800ce8e:	7bbb      	ldrb	r3, [r7, #14]
 800ce90:	2b80      	cmp	r3, #128	; 0x80
 800ce92:	d103      	bne.n	800ce9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	2200      	movs	r2, #0
 800ce98:	601a      	str	r2, [r3, #0]
 800ce9a:	e00e      	b.n	800ceba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ce9c:	7bbb      	ldrb	r3, [r7, #14]
 800ce9e:	4619      	mov	r1, r3
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f004 f811 	bl	8010ec8 <USBD_LL_IsStallEP>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	601a      	str	r2, [r3, #0]
 800ceb2:	e002      	b.n	800ceba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	2202      	movs	r2, #2
 800cebe:	4619      	mov	r1, r3
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 fbd1 	bl	800d668 <USBD_CtlSendData>
              break;
 800cec6:	e004      	b.n	800ced2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 fb5b 	bl	800d586 <USBD_CtlError>
              break;
 800ced0:	bf00      	nop
          }
          break;
 800ced2:	e004      	b.n	800cede <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 fb55 	bl	800d586 <USBD_CtlError>
          break;
 800cedc:	bf00      	nop
      }
      break;
 800cede:	e005      	b.n	800ceec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cee0:	6839      	ldr	r1, [r7, #0]
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 fb4f 	bl	800d586 <USBD_CtlError>
      break;
 800cee8:	e000      	b.n	800ceec <USBD_StdEPReq+0x330>
      break;
 800ceea:	bf00      	nop
  }

  return ret;
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
	...

0800cef8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf02:	2300      	movs	r3, #0
 800cf04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cf06:	2300      	movs	r3, #0
 800cf08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	885b      	ldrh	r3, [r3, #2]
 800cf12:	0a1b      	lsrs	r3, r3, #8
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	3b01      	subs	r3, #1
 800cf18:	2b06      	cmp	r3, #6
 800cf1a:	f200 8128 	bhi.w	800d16e <USBD_GetDescriptor+0x276>
 800cf1e:	a201      	add	r2, pc, #4	; (adr r2, 800cf24 <USBD_GetDescriptor+0x2c>)
 800cf20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf24:	0800cf41 	.word	0x0800cf41
 800cf28:	0800cf59 	.word	0x0800cf59
 800cf2c:	0800cf99 	.word	0x0800cf99
 800cf30:	0800d16f 	.word	0x0800d16f
 800cf34:	0800d16f 	.word	0x0800d16f
 800cf38:	0800d10f 	.word	0x0800d10f
 800cf3c:	0800d13b 	.word	0x0800d13b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	7c12      	ldrb	r2, [r2, #16]
 800cf4c:	f107 0108 	add.w	r1, r7, #8
 800cf50:	4610      	mov	r0, r2
 800cf52:	4798      	blx	r3
 800cf54:	60f8      	str	r0, [r7, #12]
      break;
 800cf56:	e112      	b.n	800d17e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	7c1b      	ldrb	r3, [r3, #16]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10d      	bne.n	800cf7c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf68:	f107 0208 	add.w	r2, r7, #8
 800cf6c:	4610      	mov	r0, r2
 800cf6e:	4798      	blx	r3
 800cf70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3301      	adds	r3, #1
 800cf76:	2202      	movs	r2, #2
 800cf78:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cf7a:	e100      	b.n	800d17e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf84:	f107 0208 	add.w	r2, r7, #8
 800cf88:	4610      	mov	r0, r2
 800cf8a:	4798      	blx	r3
 800cf8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	3301      	adds	r3, #1
 800cf92:	2202      	movs	r2, #2
 800cf94:	701a      	strb	r2, [r3, #0]
      break;
 800cf96:	e0f2      	b.n	800d17e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	885b      	ldrh	r3, [r3, #2]
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	2b05      	cmp	r3, #5
 800cfa0:	f200 80ac 	bhi.w	800d0fc <USBD_GetDescriptor+0x204>
 800cfa4:	a201      	add	r2, pc, #4	; (adr r2, 800cfac <USBD_GetDescriptor+0xb4>)
 800cfa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfaa:	bf00      	nop
 800cfac:	0800cfc5 	.word	0x0800cfc5
 800cfb0:	0800cff9 	.word	0x0800cff9
 800cfb4:	0800d02d 	.word	0x0800d02d
 800cfb8:	0800d061 	.word	0x0800d061
 800cfbc:	0800d095 	.word	0x0800d095
 800cfc0:	0800d0c9 	.word	0x0800d0c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00b      	beq.n	800cfe8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	7c12      	ldrb	r2, [r2, #16]
 800cfdc:	f107 0108 	add.w	r1, r7, #8
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	4798      	blx	r3
 800cfe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfe6:	e091      	b.n	800d10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 facb 	bl	800d586 <USBD_CtlError>
            err++;
 800cff0:	7afb      	ldrb	r3, [r7, #11]
 800cff2:	3301      	adds	r3, #1
 800cff4:	72fb      	strb	r3, [r7, #11]
          break;
 800cff6:	e089      	b.n	800d10c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00b      	beq.n	800d01c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	7c12      	ldrb	r2, [r2, #16]
 800d010:	f107 0108 	add.w	r1, r7, #8
 800d014:	4610      	mov	r0, r2
 800d016:	4798      	blx	r3
 800d018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d01a:	e077      	b.n	800d10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d01c:	6839      	ldr	r1, [r7, #0]
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fab1 	bl	800d586 <USBD_CtlError>
            err++;
 800d024:	7afb      	ldrb	r3, [r7, #11]
 800d026:	3301      	adds	r3, #1
 800d028:	72fb      	strb	r3, [r7, #11]
          break;
 800d02a:	e06f      	b.n	800d10c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d00b      	beq.n	800d050 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	7c12      	ldrb	r2, [r2, #16]
 800d044:	f107 0108 	add.w	r1, r7, #8
 800d048:	4610      	mov	r0, r2
 800d04a:	4798      	blx	r3
 800d04c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d04e:	e05d      	b.n	800d10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d050:	6839      	ldr	r1, [r7, #0]
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 fa97 	bl	800d586 <USBD_CtlError>
            err++;
 800d058:	7afb      	ldrb	r3, [r7, #11]
 800d05a:	3301      	adds	r3, #1
 800d05c:	72fb      	strb	r3, [r7, #11]
          break;
 800d05e:	e055      	b.n	800d10c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d066:	691b      	ldr	r3, [r3, #16]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00b      	beq.n	800d084 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	7c12      	ldrb	r2, [r2, #16]
 800d078:	f107 0108 	add.w	r1, r7, #8
 800d07c:	4610      	mov	r0, r2
 800d07e:	4798      	blx	r3
 800d080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d082:	e043      	b.n	800d10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d084:	6839      	ldr	r1, [r7, #0]
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 fa7d 	bl	800d586 <USBD_CtlError>
            err++;
 800d08c:	7afb      	ldrb	r3, [r7, #11]
 800d08e:	3301      	adds	r3, #1
 800d090:	72fb      	strb	r3, [r7, #11]
          break;
 800d092:	e03b      	b.n	800d10c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d09a:	695b      	ldr	r3, [r3, #20]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00b      	beq.n	800d0b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0a6:	695b      	ldr	r3, [r3, #20]
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	7c12      	ldrb	r2, [r2, #16]
 800d0ac:	f107 0108 	add.w	r1, r7, #8
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	4798      	blx	r3
 800d0b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0b6:	e029      	b.n	800d10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0b8:	6839      	ldr	r1, [r7, #0]
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 fa63 	bl	800d586 <USBD_CtlError>
            err++;
 800d0c0:	7afb      	ldrb	r3, [r7, #11]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	72fb      	strb	r3, [r7, #11]
          break;
 800d0c6:	e021      	b.n	800d10c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0ce:	699b      	ldr	r3, [r3, #24]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d00b      	beq.n	800d0ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	7c12      	ldrb	r2, [r2, #16]
 800d0e0:	f107 0108 	add.w	r1, r7, #8
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	4798      	blx	r3
 800d0e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0ea:	e00f      	b.n	800d10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 fa49 	bl	800d586 <USBD_CtlError>
            err++;
 800d0f4:	7afb      	ldrb	r3, [r7, #11]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	72fb      	strb	r3, [r7, #11]
          break;
 800d0fa:	e007      	b.n	800d10c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d0fc:	6839      	ldr	r1, [r7, #0]
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fa41 	bl	800d586 <USBD_CtlError>
          err++;
 800d104:	7afb      	ldrb	r3, [r7, #11]
 800d106:	3301      	adds	r3, #1
 800d108:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d10a:	bf00      	nop
      }
      break;
 800d10c:	e037      	b.n	800d17e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	7c1b      	ldrb	r3, [r3, #16]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d109      	bne.n	800d12a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d11e:	f107 0208 	add.w	r2, r7, #8
 800d122:	4610      	mov	r0, r2
 800d124:	4798      	blx	r3
 800d126:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d128:	e029      	b.n	800d17e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d12a:	6839      	ldr	r1, [r7, #0]
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fa2a 	bl	800d586 <USBD_CtlError>
        err++;
 800d132:	7afb      	ldrb	r3, [r7, #11]
 800d134:	3301      	adds	r3, #1
 800d136:	72fb      	strb	r3, [r7, #11]
      break;
 800d138:	e021      	b.n	800d17e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	7c1b      	ldrb	r3, [r3, #16]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d10d      	bne.n	800d15e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d14a:	f107 0208 	add.w	r2, r7, #8
 800d14e:	4610      	mov	r0, r2
 800d150:	4798      	blx	r3
 800d152:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	3301      	adds	r3, #1
 800d158:	2207      	movs	r2, #7
 800d15a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d15c:	e00f      	b.n	800d17e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 fa10 	bl	800d586 <USBD_CtlError>
        err++;
 800d166:	7afb      	ldrb	r3, [r7, #11]
 800d168:	3301      	adds	r3, #1
 800d16a:	72fb      	strb	r3, [r7, #11]
      break;
 800d16c:	e007      	b.n	800d17e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d16e:	6839      	ldr	r1, [r7, #0]
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 fa08 	bl	800d586 <USBD_CtlError>
      err++;
 800d176:	7afb      	ldrb	r3, [r7, #11]
 800d178:	3301      	adds	r3, #1
 800d17a:	72fb      	strb	r3, [r7, #11]
      break;
 800d17c:	bf00      	nop
  }

  if (err != 0U)
 800d17e:	7afb      	ldrb	r3, [r7, #11]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d11e      	bne.n	800d1c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	88db      	ldrh	r3, [r3, #6]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d016      	beq.n	800d1ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d18c:	893b      	ldrh	r3, [r7, #8]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00e      	beq.n	800d1b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	88da      	ldrh	r2, [r3, #6]
 800d196:	893b      	ldrh	r3, [r7, #8]
 800d198:	4293      	cmp	r3, r2
 800d19a:	bf28      	it	cs
 800d19c:	4613      	movcs	r3, r2
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d1a2:	893b      	ldrh	r3, [r7, #8]
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	68f9      	ldr	r1, [r7, #12]
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 fa5d 	bl	800d668 <USBD_CtlSendData>
 800d1ae:	e009      	b.n	800d1c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 f9e7 	bl	800d586 <USBD_CtlError>
 800d1b8:	e004      	b.n	800d1c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 faae 	bl	800d71c <USBD_CtlSendStatus>
 800d1c0:	e000      	b.n	800d1c4 <USBD_GetDescriptor+0x2cc>
    return;
 800d1c2:	bf00      	nop
  }
}
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop

0800d1cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	889b      	ldrh	r3, [r3, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d131      	bne.n	800d242 <USBD_SetAddress+0x76>
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	88db      	ldrh	r3, [r3, #6]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d12d      	bne.n	800d242 <USBD_SetAddress+0x76>
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	885b      	ldrh	r3, [r3, #2]
 800d1ea:	2b7f      	cmp	r3, #127	; 0x7f
 800d1ec:	d829      	bhi.n	800d242 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	885b      	ldrh	r3, [r3, #2]
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d200:	b2db      	uxtb	r3, r3
 800d202:	2b03      	cmp	r3, #3
 800d204:	d104      	bne.n	800d210 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d206:	6839      	ldr	r1, [r7, #0]
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 f9bc 	bl	800d586 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d20e:	e01d      	b.n	800d24c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	7bfa      	ldrb	r2, [r7, #15]
 800d214:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d218:	7bfb      	ldrb	r3, [r7, #15]
 800d21a:	4619      	mov	r1, r3
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f003 fe7f 	bl	8010f20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 fa7a 	bl	800d71c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d228:	7bfb      	ldrb	r3, [r7, #15]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d004      	beq.n	800d238 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2202      	movs	r2, #2
 800d232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d236:	e009      	b.n	800d24c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d240:	e004      	b.n	800d24c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d242:	6839      	ldr	r1, [r7, #0]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 f99e 	bl	800d586 <USBD_CtlError>
  }
}
 800d24a:	bf00      	nop
 800d24c:	bf00      	nop
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d25e:	2300      	movs	r3, #0
 800d260:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	885b      	ldrh	r3, [r3, #2]
 800d266:	b2da      	uxtb	r2, r3
 800d268:	4b4e      	ldr	r3, [pc, #312]	; (800d3a4 <USBD_SetConfig+0x150>)
 800d26a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d26c:	4b4d      	ldr	r3, [pc, #308]	; (800d3a4 <USBD_SetConfig+0x150>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	2b01      	cmp	r3, #1
 800d272:	d905      	bls.n	800d280 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d274:	6839      	ldr	r1, [r7, #0]
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 f985 	bl	800d586 <USBD_CtlError>
    return USBD_FAIL;
 800d27c:	2303      	movs	r3, #3
 800d27e:	e08c      	b.n	800d39a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d286:	b2db      	uxtb	r3, r3
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d002      	beq.n	800d292 <USBD_SetConfig+0x3e>
 800d28c:	2b03      	cmp	r3, #3
 800d28e:	d029      	beq.n	800d2e4 <USBD_SetConfig+0x90>
 800d290:	e075      	b.n	800d37e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d292:	4b44      	ldr	r3, [pc, #272]	; (800d3a4 <USBD_SetConfig+0x150>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d020      	beq.n	800d2dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d29a:	4b42      	ldr	r3, [pc, #264]	; (800d3a4 <USBD_SetConfig+0x150>)
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d2a4:	4b3f      	ldr	r3, [pc, #252]	; (800d3a4 <USBD_SetConfig+0x150>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7fe ffe7 	bl	800c27e <USBD_SetClassConfig>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d2b4:	7bfb      	ldrb	r3, [r7, #15]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d008      	beq.n	800d2cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d2ba:	6839      	ldr	r1, [r7, #0]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f962 	bl	800d586 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d2ca:	e065      	b.n	800d398 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 fa25 	bl	800d71c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2203      	movs	r2, #3
 800d2d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d2da:	e05d      	b.n	800d398 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 fa1d 	bl	800d71c <USBD_CtlSendStatus>
      break;
 800d2e2:	e059      	b.n	800d398 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d2e4:	4b2f      	ldr	r3, [pc, #188]	; (800d3a4 <USBD_SetConfig+0x150>)
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d112      	bne.n	800d312 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d2f4:	4b2b      	ldr	r3, [pc, #172]	; (800d3a4 <USBD_SetConfig+0x150>)
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d2fe:	4b29      	ldr	r3, [pc, #164]	; (800d3a4 <USBD_SetConfig+0x150>)
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	4619      	mov	r1, r3
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f7fe ffd6 	bl	800c2b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 fa06 	bl	800d71c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d310:	e042      	b.n	800d398 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d312:	4b24      	ldr	r3, [pc, #144]	; (800d3a4 <USBD_SetConfig+0x150>)
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	461a      	mov	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d02a      	beq.n	800d376 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	b2db      	uxtb	r3, r3
 800d326:	4619      	mov	r1, r3
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7fe ffc4 	bl	800c2b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d32e:	4b1d      	ldr	r3, [pc, #116]	; (800d3a4 <USBD_SetConfig+0x150>)
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d338:	4b1a      	ldr	r3, [pc, #104]	; (800d3a4 <USBD_SetConfig+0x150>)
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	4619      	mov	r1, r3
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7fe ff9d 	bl	800c27e <USBD_SetClassConfig>
 800d344:	4603      	mov	r3, r0
 800d346:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d348:	7bfb      	ldrb	r3, [r7, #15]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00f      	beq.n	800d36e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d34e:	6839      	ldr	r1, [r7, #0]
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 f918 	bl	800d586 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	4619      	mov	r1, r3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7fe ffa9 	bl	800c2b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2202      	movs	r2, #2
 800d368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d36c:	e014      	b.n	800d398 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f9d4 	bl	800d71c <USBD_CtlSendStatus>
      break;
 800d374:	e010      	b.n	800d398 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 f9d0 	bl	800d71c <USBD_CtlSendStatus>
      break;
 800d37c:	e00c      	b.n	800d398 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 f900 	bl	800d586 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d386:	4b07      	ldr	r3, [pc, #28]	; (800d3a4 <USBD_SetConfig+0x150>)
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	4619      	mov	r1, r3
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f7fe ff92 	bl	800c2b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d392:	2303      	movs	r3, #3
 800d394:	73fb      	strb	r3, [r7, #15]
      break;
 800d396:	bf00      	nop
  }

  return ret;
 800d398:	7bfb      	ldrb	r3, [r7, #15]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	200005fc 	.word	0x200005fc

0800d3a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	88db      	ldrh	r3, [r3, #6]
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d004      	beq.n	800d3c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 f8e2 	bl	800d586 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d3c2:	e023      	b.n	800d40c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	dc02      	bgt.n	800d3d6 <USBD_GetConfig+0x2e>
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	dc03      	bgt.n	800d3dc <USBD_GetConfig+0x34>
 800d3d4:	e015      	b.n	800d402 <USBD_GetConfig+0x5a>
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	d00b      	beq.n	800d3f2 <USBD_GetConfig+0x4a>
 800d3da:	e012      	b.n	800d402 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	3308      	adds	r3, #8
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 f93c 	bl	800d668 <USBD_CtlSendData>
        break;
 800d3f0:	e00c      	b.n	800d40c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 f934 	bl	800d668 <USBD_CtlSendData>
        break;
 800d400:	e004      	b.n	800d40c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d402:	6839      	ldr	r1, [r7, #0]
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 f8be 	bl	800d586 <USBD_CtlError>
        break;
 800d40a:	bf00      	nop
}
 800d40c:	bf00      	nop
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d424:	b2db      	uxtb	r3, r3
 800d426:	3b01      	subs	r3, #1
 800d428:	2b02      	cmp	r3, #2
 800d42a:	d81e      	bhi.n	800d46a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	88db      	ldrh	r3, [r3, #6]
 800d430:	2b02      	cmp	r3, #2
 800d432:	d004      	beq.n	800d43e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d434:	6839      	ldr	r1, [r7, #0]
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 f8a5 	bl	800d586 <USBD_CtlError>
        break;
 800d43c:	e01a      	b.n	800d474 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2201      	movs	r2, #1
 800d442:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d005      	beq.n	800d45a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	f043 0202 	orr.w	r2, r3, #2
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	330c      	adds	r3, #12
 800d45e:	2202      	movs	r2, #2
 800d460:	4619      	mov	r1, r3
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 f900 	bl	800d668 <USBD_CtlSendData>
      break;
 800d468:	e004      	b.n	800d474 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d46a:	6839      	ldr	r1, [r7, #0]
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 f88a 	bl	800d586 <USBD_CtlError>
      break;
 800d472:	bf00      	nop
  }
}
 800d474:	bf00      	nop
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	885b      	ldrh	r3, [r3, #2]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d107      	bne.n	800d49e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2201      	movs	r2, #1
 800d492:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 f940 	bl	800d71c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d49c:	e013      	b.n	800d4c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	885b      	ldrh	r3, [r3, #2]
 800d4a2:	2b02      	cmp	r3, #2
 800d4a4:	d10b      	bne.n	800d4be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	889b      	ldrh	r3, [r3, #4]
 800d4aa:	0a1b      	lsrs	r3, r3, #8
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 f930 	bl	800d71c <USBD_CtlSendStatus>
}
 800d4bc:	e003      	b.n	800d4c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d4be:	6839      	ldr	r1, [r7, #0]
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 f860 	bl	800d586 <USBD_CtlError>
}
 800d4c6:	bf00      	nop
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b082      	sub	sp, #8
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
 800d4d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	2b02      	cmp	r3, #2
 800d4e4:	d80b      	bhi.n	800d4fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	885b      	ldrh	r3, [r3, #2]
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d10c      	bne.n	800d508 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 f910 	bl	800d71c <USBD_CtlSendStatus>
      }
      break;
 800d4fc:	e004      	b.n	800d508 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d4fe:	6839      	ldr	r1, [r7, #0]
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 f840 	bl	800d586 <USBD_CtlError>
      break;
 800d506:	e000      	b.n	800d50a <USBD_ClrFeature+0x3c>
      break;
 800d508:	bf00      	nop
  }
}
 800d50a:	bf00      	nop
 800d50c:	3708      	adds	r7, #8
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b084      	sub	sp, #16
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
 800d51a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	781a      	ldrb	r2, [r3, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	3301      	adds	r3, #1
 800d52c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	781a      	ldrb	r2, [r3, #0]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	3301      	adds	r3, #1
 800d53a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	f7ff fa41 	bl	800c9c4 <SWAPBYTE>
 800d542:	4603      	mov	r3, r0
 800d544:	461a      	mov	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	3301      	adds	r3, #1
 800d54e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	3301      	adds	r3, #1
 800d554:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f7ff fa34 	bl	800c9c4 <SWAPBYTE>
 800d55c:	4603      	mov	r3, r0
 800d55e:	461a      	mov	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	3301      	adds	r3, #1
 800d568:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	3301      	adds	r3, #1
 800d56e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f7ff fa27 	bl	800c9c4 <SWAPBYTE>
 800d576:	4603      	mov	r3, r0
 800d578:	461a      	mov	r2, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	80da      	strh	r2, [r3, #6]
}
 800d57e:	bf00      	nop
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b082      	sub	sp, #8
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
 800d58e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d590:	2180      	movs	r1, #128	; 0x80
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f003 fc5a 	bl	8010e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d598:	2100      	movs	r1, #0
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f003 fc56 	bl	8010e4c <USBD_LL_StallEP>
}
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d036      	beq.n	800d62c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d5c2:	6938      	ldr	r0, [r7, #16]
 800d5c4:	f000 f836 	bl	800d634 <USBD_GetLen>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	005b      	lsls	r3, r3, #1
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d5d6:	7dfb      	ldrb	r3, [r7, #23]
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	4413      	add	r3, r2
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	7812      	ldrb	r2, [r2, #0]
 800d5e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d5e2:	7dfb      	ldrb	r3, [r7, #23]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d5e8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	4413      	add	r3, r2
 800d5ee:	2203      	movs	r2, #3
 800d5f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d5f2:	7dfb      	ldrb	r3, [r7, #23]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d5f8:	e013      	b.n	800d622 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d5fa:	7dfb      	ldrb	r3, [r7, #23]
 800d5fc:	68ba      	ldr	r2, [r7, #8]
 800d5fe:	4413      	add	r3, r2
 800d600:	693a      	ldr	r2, [r7, #16]
 800d602:	7812      	ldrb	r2, [r2, #0]
 800d604:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	3301      	adds	r3, #1
 800d60a:	613b      	str	r3, [r7, #16]
    idx++;
 800d60c:	7dfb      	ldrb	r3, [r7, #23]
 800d60e:	3301      	adds	r3, #1
 800d610:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d612:	7dfb      	ldrb	r3, [r7, #23]
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	4413      	add	r3, r2
 800d618:	2200      	movs	r2, #0
 800d61a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d61c:	7dfb      	ldrb	r3, [r7, #23]
 800d61e:	3301      	adds	r3, #1
 800d620:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d1e7      	bne.n	800d5fa <USBD_GetString+0x52>
 800d62a:	e000      	b.n	800d62e <USBD_GetString+0x86>
    return;
 800d62c:	bf00      	nop
  }
}
 800d62e:	3718      	adds	r7, #24
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d634:	b480      	push	{r7}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d63c:	2300      	movs	r3, #0
 800d63e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d644:	e005      	b.n	800d652 <USBD_GetLen+0x1e>
  {
    len++;
 800d646:	7bfb      	ldrb	r3, [r7, #15]
 800d648:	3301      	adds	r3, #1
 800d64a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	3301      	adds	r3, #1
 800d650:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1f5      	bne.n	800d646 <USBD_GetLen+0x12>
  }

  return len;
 800d65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3714      	adds	r7, #20
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2202      	movs	r2, #2
 800d678:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	68ba      	ldr	r2, [r7, #8]
 800d68c:	2100      	movs	r1, #0
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f003 fc65 	bl	8010f5e <USBD_LL_Transmit>

  return USBD_OK;
 800d694:	2300      	movs	r3, #0
}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b084      	sub	sp, #16
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	60f8      	str	r0, [r7, #12]
 800d6a6:	60b9      	str	r1, [r7, #8]
 800d6a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	68ba      	ldr	r2, [r7, #8]
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	68f8      	ldr	r0, [r7, #12]
 800d6b2:	f003 fc54 	bl	8010f5e <USBD_LL_Transmit>

  return USBD_OK;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3710      	adds	r7, #16
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2203      	movs	r2, #3
 800d6d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68ba      	ldr	r2, [r7, #8]
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f003 fc58 	bl	8010fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d6f0:	2300      	movs	r3, #0
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b084      	sub	sp, #16
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	60f8      	str	r0, [r7, #12]
 800d702:	60b9      	str	r1, [r7, #8]
 800d704:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	68ba      	ldr	r2, [r7, #8]
 800d70a:	2100      	movs	r1, #0
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f003 fc47 	bl	8010fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d712:	2300      	movs	r3, #0
}
 800d714:	4618      	mov	r0, r3
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2204      	movs	r2, #4
 800d728:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d72c:	2300      	movs	r3, #0
 800d72e:	2200      	movs	r2, #0
 800d730:	2100      	movs	r1, #0
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f003 fc13 	bl	8010f5e <USBD_LL_Transmit>

  return USBD_OK;
 800d738:	2300      	movs	r3, #0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b082      	sub	sp, #8
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2205      	movs	r2, #5
 800d74e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d752:	2300      	movs	r3, #0
 800d754:	2200      	movs	r2, #0
 800d756:	2100      	movs	r1, #0
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f003 fc21 	bl	8010fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <__NVIC_SetPriority>:
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	4603      	mov	r3, r0
 800d770:	6039      	str	r1, [r7, #0]
 800d772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	db0a      	blt.n	800d792 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	b2da      	uxtb	r2, r3
 800d780:	490c      	ldr	r1, [pc, #48]	; (800d7b4 <__NVIC_SetPriority+0x4c>)
 800d782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d786:	0112      	lsls	r2, r2, #4
 800d788:	b2d2      	uxtb	r2, r2
 800d78a:	440b      	add	r3, r1
 800d78c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d790:	e00a      	b.n	800d7a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	b2da      	uxtb	r2, r3
 800d796:	4908      	ldr	r1, [pc, #32]	; (800d7b8 <__NVIC_SetPriority+0x50>)
 800d798:	79fb      	ldrb	r3, [r7, #7]
 800d79a:	f003 030f 	and.w	r3, r3, #15
 800d79e:	3b04      	subs	r3, #4
 800d7a0:	0112      	lsls	r2, r2, #4
 800d7a2:	b2d2      	uxtb	r2, r2
 800d7a4:	440b      	add	r3, r1
 800d7a6:	761a      	strb	r2, [r3, #24]
}
 800d7a8:	bf00      	nop
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr
 800d7b4:	e000e100 	.word	0xe000e100
 800d7b8:	e000ed00 	.word	0xe000ed00

0800d7bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d7c0:	4b05      	ldr	r3, [pc, #20]	; (800d7d8 <SysTick_Handler+0x1c>)
 800d7c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d7c4:	f001 ff12 	bl	800f5ec <xTaskGetSchedulerState>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d001      	beq.n	800d7d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d7ce:	f002 fcfb 	bl	80101c8 <xPortSysTickHandler>
  }
}
 800d7d2:	bf00      	nop
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	e000e010 	.word	0xe000e010

0800d7dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d7e0:	2100      	movs	r1, #0
 800d7e2:	f06f 0004 	mvn.w	r0, #4
 800d7e6:	f7ff ffbf 	bl	800d768 <__NVIC_SetPriority>
#endif
}
 800d7ea:	bf00      	nop
 800d7ec:	bd80      	pop	{r7, pc}
	...

0800d7f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7f6:	f3ef 8305 	mrs	r3, IPSR
 800d7fa:	603b      	str	r3, [r7, #0]
  return(result);
 800d7fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d003      	beq.n	800d80a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d802:	f06f 0305 	mvn.w	r3, #5
 800d806:	607b      	str	r3, [r7, #4]
 800d808:	e00c      	b.n	800d824 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d80a:	4b0a      	ldr	r3, [pc, #40]	; (800d834 <osKernelInitialize+0x44>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d105      	bne.n	800d81e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d812:	4b08      	ldr	r3, [pc, #32]	; (800d834 <osKernelInitialize+0x44>)
 800d814:	2201      	movs	r2, #1
 800d816:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d818:	2300      	movs	r3, #0
 800d81a:	607b      	str	r3, [r7, #4]
 800d81c:	e002      	b.n	800d824 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d81e:	f04f 33ff 	mov.w	r3, #4294967295
 800d822:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d824:	687b      	ldr	r3, [r7, #4]
}
 800d826:	4618      	mov	r0, r3
 800d828:	370c      	adds	r7, #12
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	20000600 	.word	0x20000600

0800d838 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d83e:	f3ef 8305 	mrs	r3, IPSR
 800d842:	603b      	str	r3, [r7, #0]
  return(result);
 800d844:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d846:	2b00      	cmp	r3, #0
 800d848:	d003      	beq.n	800d852 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d84a:	f06f 0305 	mvn.w	r3, #5
 800d84e:	607b      	str	r3, [r7, #4]
 800d850:	e010      	b.n	800d874 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d852:	4b0b      	ldr	r3, [pc, #44]	; (800d880 <osKernelStart+0x48>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d109      	bne.n	800d86e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d85a:	f7ff ffbf 	bl	800d7dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d85e:	4b08      	ldr	r3, [pc, #32]	; (800d880 <osKernelStart+0x48>)
 800d860:	2202      	movs	r2, #2
 800d862:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d864:	f001 fa66 	bl	800ed34 <vTaskStartScheduler>
      stat = osOK;
 800d868:	2300      	movs	r3, #0
 800d86a:	607b      	str	r3, [r7, #4]
 800d86c:	e002      	b.n	800d874 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d86e:	f04f 33ff 	mov.w	r3, #4294967295
 800d872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d874:	687b      	ldr	r3, [r7, #4]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	20000600 	.word	0x20000600

0800d884 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d884:	b580      	push	{r7, lr}
 800d886:	b08e      	sub	sp, #56	; 0x38
 800d888:	af04      	add	r7, sp, #16
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d890:	2300      	movs	r3, #0
 800d892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d894:	f3ef 8305 	mrs	r3, IPSR
 800d898:	617b      	str	r3, [r7, #20]
  return(result);
 800d89a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d17e      	bne.n	800d99e <osThreadNew+0x11a>
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d07b      	beq.n	800d99e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d8a6:	2380      	movs	r3, #128	; 0x80
 800d8a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d8aa:	2318      	movs	r3, #24
 800d8ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d045      	beq.n	800d94a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d002      	beq.n	800d8cc <osThreadNew+0x48>
        name = attr->name;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	699b      	ldr	r3, [r3, #24]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d002      	beq.n	800d8da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	699b      	ldr	r3, [r3, #24]
 800d8d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d008      	beq.n	800d8f2 <osThreadNew+0x6e>
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	2b38      	cmp	r3, #56	; 0x38
 800d8e4:	d805      	bhi.n	800d8f2 <osThreadNew+0x6e>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	f003 0301 	and.w	r3, r3, #1
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <osThreadNew+0x72>
        return (NULL);
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	e054      	b.n	800d9a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	695b      	ldr	r3, [r3, #20]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d003      	beq.n	800d906 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	695b      	ldr	r3, [r3, #20]
 800d902:	089b      	lsrs	r3, r3, #2
 800d904:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00e      	beq.n	800d92c <osThreadNew+0xa8>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	2bbb      	cmp	r3, #187	; 0xbb
 800d914:	d90a      	bls.n	800d92c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d006      	beq.n	800d92c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	695b      	ldr	r3, [r3, #20]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d002      	beq.n	800d92c <osThreadNew+0xa8>
        mem = 1;
 800d926:	2301      	movs	r3, #1
 800d928:	61bb      	str	r3, [r7, #24]
 800d92a:	e010      	b.n	800d94e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10c      	bne.n	800d94e <osThreadNew+0xca>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d108      	bne.n	800d94e <osThreadNew+0xca>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	691b      	ldr	r3, [r3, #16]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d104      	bne.n	800d94e <osThreadNew+0xca>
          mem = 0;
 800d944:	2300      	movs	r3, #0
 800d946:	61bb      	str	r3, [r7, #24]
 800d948:	e001      	b.n	800d94e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d94a:	2300      	movs	r3, #0
 800d94c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	2b01      	cmp	r3, #1
 800d952:	d110      	bne.n	800d976 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d95c:	9202      	str	r2, [sp, #8]
 800d95e:	9301      	str	r3, [sp, #4]
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	6a3a      	ldr	r2, [r7, #32]
 800d968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f000 fff6 	bl	800e95c <xTaskCreateStatic>
 800d970:	4603      	mov	r3, r0
 800d972:	613b      	str	r3, [r7, #16]
 800d974:	e013      	b.n	800d99e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d110      	bne.n	800d99e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d97c:	6a3b      	ldr	r3, [r7, #32]
 800d97e:	b29a      	uxth	r2, r3
 800d980:	f107 0310 	add.w	r3, r7, #16
 800d984:	9301      	str	r3, [sp, #4]
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f001 f841 	bl	800ea16 <xTaskCreate>
 800d994:	4603      	mov	r3, r0
 800d996:	2b01      	cmp	r3, #1
 800d998:	d001      	beq.n	800d99e <osThreadNew+0x11a>
            hTask = NULL;
 800d99a:	2300      	movs	r3, #0
 800d99c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d99e:	693b      	ldr	r3, [r7, #16]
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3728      	adds	r7, #40	; 0x28
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9b0:	f3ef 8305 	mrs	r3, IPSR
 800d9b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d003      	beq.n	800d9c4 <osDelay+0x1c>
    stat = osErrorISR;
 800d9bc:	f06f 0305 	mvn.w	r3, #5
 800d9c0:	60fb      	str	r3, [r7, #12]
 800d9c2:	e007      	b.n	800d9d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d002      	beq.n	800d9d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f001 f97c 	bl	800eccc <vTaskDelay>
    }
  }

  return (stat);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b08a      	sub	sp, #40	; 0x28
 800d9e2:	af02      	add	r7, sp, #8
 800d9e4:	60f8      	str	r0, [r7, #12]
 800d9e6:	60b9      	str	r1, [r7, #8]
 800d9e8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9ee:	f3ef 8305 	mrs	r3, IPSR
 800d9f2:	613b      	str	r3, [r7, #16]
  return(result);
 800d9f4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d15f      	bne.n	800daba <osMessageQueueNew+0xdc>
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d05c      	beq.n	800daba <osMessageQueueNew+0xdc>
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d059      	beq.n	800daba <osMessageQueueNew+0xdc>
    mem = -1;
 800da06:	f04f 33ff 	mov.w	r3, #4294967295
 800da0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d029      	beq.n	800da66 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d012      	beq.n	800da40 <osMessageQueueNew+0x62>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	2b4f      	cmp	r3, #79	; 0x4f
 800da20:	d90e      	bls.n	800da40 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800da26:	2b00      	cmp	r3, #0
 800da28:	d00a      	beq.n	800da40 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	695a      	ldr	r2, [r3, #20]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	68b9      	ldr	r1, [r7, #8]
 800da32:	fb01 f303 	mul.w	r3, r1, r3
 800da36:	429a      	cmp	r2, r3
 800da38:	d302      	bcc.n	800da40 <osMessageQueueNew+0x62>
        mem = 1;
 800da3a:	2301      	movs	r3, #1
 800da3c:	61bb      	str	r3, [r7, #24]
 800da3e:	e014      	b.n	800da6a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d110      	bne.n	800da6a <osMessageQueueNew+0x8c>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d10c      	bne.n	800da6a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800da54:	2b00      	cmp	r3, #0
 800da56:	d108      	bne.n	800da6a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	695b      	ldr	r3, [r3, #20]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d104      	bne.n	800da6a <osMessageQueueNew+0x8c>
          mem = 0;
 800da60:	2300      	movs	r3, #0
 800da62:	61bb      	str	r3, [r7, #24]
 800da64:	e001      	b.n	800da6a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800da66:	2300      	movs	r3, #0
 800da68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d10b      	bne.n	800da88 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	691a      	ldr	r2, [r3, #16]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	2100      	movs	r1, #0
 800da7a:	9100      	str	r1, [sp, #0]
 800da7c:	68b9      	ldr	r1, [r7, #8]
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f000 fa2e 	bl	800dee0 <xQueueGenericCreateStatic>
 800da84:	61f8      	str	r0, [r7, #28]
 800da86:	e008      	b.n	800da9a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d105      	bne.n	800da9a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800da8e:	2200      	movs	r2, #0
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f000 fa9c 	bl	800dfd0 <xQueueGenericCreate>
 800da98:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00c      	beq.n	800daba <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d003      	beq.n	800daae <osMessageQueueNew+0xd0>
        name = attr->name;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	617b      	str	r3, [r7, #20]
 800daac:	e001      	b.n	800dab2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800daae:	2300      	movs	r3, #0
 800dab0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dab2:	6979      	ldr	r1, [r7, #20]
 800dab4:	69f8      	ldr	r0, [r7, #28]
 800dab6:	f000 fef3 	bl	800e8a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800daba:	69fb      	ldr	r3, [r7, #28]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3720      	adds	r7, #32
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b088      	sub	sp, #32
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	603b      	str	r3, [r7, #0]
 800dad0:	4613      	mov	r3, r2
 800dad2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dad8:	2300      	movs	r3, #0
 800dada:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dadc:	f3ef 8305 	mrs	r3, IPSR
 800dae0:	617b      	str	r3, [r7, #20]
  return(result);
 800dae2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d028      	beq.n	800db3a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d005      	beq.n	800dafa <osMessageQueuePut+0x36>
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <osMessageQueuePut+0x36>
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d003      	beq.n	800db02 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dafa:	f06f 0303 	mvn.w	r3, #3
 800dafe:	61fb      	str	r3, [r7, #28]
 800db00:	e038      	b.n	800db74 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800db02:	2300      	movs	r3, #0
 800db04:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800db06:	f107 0210 	add.w	r2, r7, #16
 800db0a:	2300      	movs	r3, #0
 800db0c:	68b9      	ldr	r1, [r7, #8]
 800db0e:	69b8      	ldr	r0, [r7, #24]
 800db10:	f000 fbba 	bl	800e288 <xQueueGenericSendFromISR>
 800db14:	4603      	mov	r3, r0
 800db16:	2b01      	cmp	r3, #1
 800db18:	d003      	beq.n	800db22 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800db1a:	f06f 0302 	mvn.w	r3, #2
 800db1e:	61fb      	str	r3, [r7, #28]
 800db20:	e028      	b.n	800db74 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d025      	beq.n	800db74 <osMessageQueuePut+0xb0>
 800db28:	4b15      	ldr	r3, [pc, #84]	; (800db80 <osMessageQueuePut+0xbc>)
 800db2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db2e:	601a      	str	r2, [r3, #0]
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	e01c      	b.n	800db74 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d002      	beq.n	800db46 <osMessageQueuePut+0x82>
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d103      	bne.n	800db4e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800db46:	f06f 0303 	mvn.w	r3, #3
 800db4a:	61fb      	str	r3, [r7, #28]
 800db4c:	e012      	b.n	800db74 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800db4e:	2300      	movs	r3, #0
 800db50:	683a      	ldr	r2, [r7, #0]
 800db52:	68b9      	ldr	r1, [r7, #8]
 800db54:	69b8      	ldr	r0, [r7, #24]
 800db56:	f000 fa99 	bl	800e08c <xQueueGenericSend>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d009      	beq.n	800db74 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d003      	beq.n	800db6e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800db66:	f06f 0301 	mvn.w	r3, #1
 800db6a:	61fb      	str	r3, [r7, #28]
 800db6c:	e002      	b.n	800db74 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800db6e:	f06f 0302 	mvn.w	r3, #2
 800db72:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800db74:	69fb      	ldr	r3, [r7, #28]
}
 800db76:	4618      	mov	r0, r3
 800db78:	3720      	adds	r7, #32
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	e000ed04 	.word	0xe000ed04

0800db84 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800db84:	b580      	push	{r7, lr}
 800db86:	b088      	sub	sp, #32
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	607a      	str	r2, [r7, #4]
 800db90:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800db96:	2300      	movs	r3, #0
 800db98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db9a:	f3ef 8305 	mrs	r3, IPSR
 800db9e:	617b      	str	r3, [r7, #20]
  return(result);
 800dba0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d028      	beq.n	800dbf8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dba6:	69bb      	ldr	r3, [r7, #24]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d005      	beq.n	800dbb8 <osMessageQueueGet+0x34>
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d002      	beq.n	800dbb8 <osMessageQueueGet+0x34>
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d003      	beq.n	800dbc0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dbb8:	f06f 0303 	mvn.w	r3, #3
 800dbbc:	61fb      	str	r3, [r7, #28]
 800dbbe:	e037      	b.n	800dc30 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dbc4:	f107 0310 	add.w	r3, r7, #16
 800dbc8:	461a      	mov	r2, r3
 800dbca:	68b9      	ldr	r1, [r7, #8]
 800dbcc:	69b8      	ldr	r0, [r7, #24]
 800dbce:	f000 fcd7 	bl	800e580 <xQueueReceiveFromISR>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d003      	beq.n	800dbe0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dbd8:	f06f 0302 	mvn.w	r3, #2
 800dbdc:	61fb      	str	r3, [r7, #28]
 800dbde:	e027      	b.n	800dc30 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d024      	beq.n	800dc30 <osMessageQueueGet+0xac>
 800dbe6:	4b15      	ldr	r3, [pc, #84]	; (800dc3c <osMessageQueueGet+0xb8>)
 800dbe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbec:	601a      	str	r2, [r3, #0]
 800dbee:	f3bf 8f4f 	dsb	sy
 800dbf2:	f3bf 8f6f 	isb	sy
 800dbf6:	e01b      	b.n	800dc30 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d002      	beq.n	800dc04 <osMessageQueueGet+0x80>
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d103      	bne.n	800dc0c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800dc04:	f06f 0303 	mvn.w	r3, #3
 800dc08:	61fb      	str	r3, [r7, #28]
 800dc0a:	e011      	b.n	800dc30 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dc0c:	683a      	ldr	r2, [r7, #0]
 800dc0e:	68b9      	ldr	r1, [r7, #8]
 800dc10:	69b8      	ldr	r0, [r7, #24]
 800dc12:	f000 fbd5 	bl	800e3c0 <xQueueReceive>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d009      	beq.n	800dc30 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d003      	beq.n	800dc2a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800dc22:	f06f 0301 	mvn.w	r3, #1
 800dc26:	61fb      	str	r3, [r7, #28]
 800dc28:	e002      	b.n	800dc30 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800dc2a:	f06f 0302 	mvn.w	r3, #2
 800dc2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dc30:	69fb      	ldr	r3, [r7, #28]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3720      	adds	r7, #32
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	e000ed04 	.word	0xe000ed04

0800dc40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dc40:	b480      	push	{r7}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	4a07      	ldr	r2, [pc, #28]	; (800dc6c <vApplicationGetIdleTaskMemory+0x2c>)
 800dc50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	4a06      	ldr	r2, [pc, #24]	; (800dc70 <vApplicationGetIdleTaskMemory+0x30>)
 800dc56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2280      	movs	r2, #128	; 0x80
 800dc5c:	601a      	str	r2, [r3, #0]
}
 800dc5e:	bf00      	nop
 800dc60:	3714      	adds	r7, #20
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr
 800dc6a:	bf00      	nop
 800dc6c:	20000604 	.word	0x20000604
 800dc70:	200006c0 	.word	0x200006c0

0800dc74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	4a07      	ldr	r2, [pc, #28]	; (800dca0 <vApplicationGetTimerTaskMemory+0x2c>)
 800dc84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	4a06      	ldr	r2, [pc, #24]	; (800dca4 <vApplicationGetTimerTaskMemory+0x30>)
 800dc8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc92:	601a      	str	r2, [r3, #0]
}
 800dc94:	bf00      	nop
 800dc96:	3714      	adds	r7, #20
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr
 800dca0:	200008c0 	.word	0x200008c0
 800dca4:	2000097c 	.word	0x2000097c

0800dca8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f103 0208 	add.w	r2, r3, #8
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f04f 32ff 	mov.w	r2, #4294967295
 800dcc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f103 0208 	add.w	r2, r3, #8
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f103 0208 	add.w	r2, r3, #8
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dcdc:	bf00      	nop
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dcf6:	bf00      	nop
 800dcf8:	370c      	adds	r7, #12
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd02:	b480      	push	{r7}
 800dd04:	b085      	sub	sp, #20
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	689a      	ldr	r2, [r3, #8]
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	689b      	ldr	r3, [r3, #8]
 800dd24:	683a      	ldr	r2, [r7, #0]
 800dd26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	683a      	ldr	r2, [r7, #0]
 800dd2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	1c5a      	adds	r2, r3, #1
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	601a      	str	r2, [r3, #0]
}
 800dd3e:	bf00      	nop
 800dd40:	3714      	adds	r7, #20
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr

0800dd4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd4a:	b480      	push	{r7}
 800dd4c:	b085      	sub	sp, #20
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd60:	d103      	bne.n	800dd6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	691b      	ldr	r3, [r3, #16]
 800dd66:	60fb      	str	r3, [r7, #12]
 800dd68:	e00c      	b.n	800dd84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	3308      	adds	r3, #8
 800dd6e:	60fb      	str	r3, [r7, #12]
 800dd70:	e002      	b.n	800dd78 <vListInsert+0x2e>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	60fb      	str	r3, [r7, #12]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d2f6      	bcs.n	800dd72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	683a      	ldr	r2, [r7, #0]
 800dd92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	68fa      	ldr	r2, [r7, #12]
 800dd98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	683a      	ldr	r2, [r7, #0]
 800dd9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	1c5a      	adds	r2, r3, #1
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	601a      	str	r2, [r3, #0]
}
 800ddb0:	bf00      	nop
 800ddb2:	3714      	adds	r7, #20
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	691b      	ldr	r3, [r3, #16]
 800ddc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	6892      	ldr	r2, [r2, #8]
 800ddd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	689b      	ldr	r3, [r3, #8]
 800ddd8:	687a      	ldr	r2, [r7, #4]
 800ddda:	6852      	ldr	r2, [r2, #4]
 800dddc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d103      	bne.n	800ddf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	689a      	ldr	r2, [r3, #8]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	1e5a      	subs	r2, r3, #1
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
}
 800de04:	4618      	mov	r0, r3
 800de06:	3714      	adds	r7, #20
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d10a      	bne.n	800de3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800de24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de28:	f383 8811 	msr	BASEPRI, r3
 800de2c:	f3bf 8f6f 	isb	sy
 800de30:	f3bf 8f4f 	dsb	sy
 800de34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800de36:	bf00      	nop
 800de38:	e7fe      	b.n	800de38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800de3a:	f002 f933 	bl	80100a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de46:	68f9      	ldr	r1, [r7, #12]
 800de48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800de4a:	fb01 f303 	mul.w	r3, r1, r3
 800de4e:	441a      	add	r2, r3
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2200      	movs	r2, #0
 800de58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de6a:	3b01      	subs	r3, #1
 800de6c:	68f9      	ldr	r1, [r7, #12]
 800de6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800de70:	fb01 f303 	mul.w	r3, r1, r3
 800de74:	441a      	add	r2, r3
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	22ff      	movs	r2, #255	; 0xff
 800de7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	22ff      	movs	r2, #255	; 0xff
 800de86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d114      	bne.n	800deba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	691b      	ldr	r3, [r3, #16]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d01a      	beq.n	800dece <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	3310      	adds	r3, #16
 800de9c:	4618      	mov	r0, r3
 800de9e:	f001 f9e3 	bl	800f268 <xTaskRemoveFromEventList>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d012      	beq.n	800dece <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dea8:	4b0c      	ldr	r3, [pc, #48]	; (800dedc <xQueueGenericReset+0xcc>)
 800deaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deae:	601a      	str	r2, [r3, #0]
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	e009      	b.n	800dece <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	3310      	adds	r3, #16
 800debe:	4618      	mov	r0, r3
 800dec0:	f7ff fef2 	bl	800dca8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3324      	adds	r3, #36	; 0x24
 800dec8:	4618      	mov	r0, r3
 800deca:	f7ff feed 	bl	800dca8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dece:	f002 f919 	bl	8010104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ded2:	2301      	movs	r3, #1
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	e000ed04 	.word	0xe000ed04

0800dee0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08e      	sub	sp, #56	; 0x38
 800dee4:	af02      	add	r7, sp, #8
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10a      	bne.n	800df0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800def4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def8:	f383 8811 	msr	BASEPRI, r3
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800df06:	bf00      	nop
 800df08:	e7fe      	b.n	800df08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10a      	bne.n	800df26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800df10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df14:	f383 8811 	msr	BASEPRI, r3
 800df18:	f3bf 8f6f 	isb	sy
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	627b      	str	r3, [r7, #36]	; 0x24
}
 800df22:	bf00      	nop
 800df24:	e7fe      	b.n	800df24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d002      	beq.n	800df32 <xQueueGenericCreateStatic+0x52>
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d001      	beq.n	800df36 <xQueueGenericCreateStatic+0x56>
 800df32:	2301      	movs	r3, #1
 800df34:	e000      	b.n	800df38 <xQueueGenericCreateStatic+0x58>
 800df36:	2300      	movs	r3, #0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10a      	bne.n	800df52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800df3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df40:	f383 8811 	msr	BASEPRI, r3
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	623b      	str	r3, [r7, #32]
}
 800df4e:	bf00      	nop
 800df50:	e7fe      	b.n	800df50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d102      	bne.n	800df5e <xQueueGenericCreateStatic+0x7e>
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d101      	bne.n	800df62 <xQueueGenericCreateStatic+0x82>
 800df5e:	2301      	movs	r3, #1
 800df60:	e000      	b.n	800df64 <xQueueGenericCreateStatic+0x84>
 800df62:	2300      	movs	r3, #0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10a      	bne.n	800df7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800df68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	61fb      	str	r3, [r7, #28]
}
 800df7a:	bf00      	nop
 800df7c:	e7fe      	b.n	800df7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800df7e:	2350      	movs	r3, #80	; 0x50
 800df80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	2b50      	cmp	r3, #80	; 0x50
 800df86:	d00a      	beq.n	800df9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800df88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8c:	f383 8811 	msr	BASEPRI, r3
 800df90:	f3bf 8f6f 	isb	sy
 800df94:	f3bf 8f4f 	dsb	sy
 800df98:	61bb      	str	r3, [r7, #24]
}
 800df9a:	bf00      	nop
 800df9c:	e7fe      	b.n	800df9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800df9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00d      	beq.n	800dfc6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfac:	2201      	movs	r2, #1
 800dfae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dfb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	4613      	mov	r3, r2
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	68b9      	ldr	r1, [r7, #8]
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f000 f83f 	bl	800e044 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3730      	adds	r7, #48	; 0x30
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b08a      	sub	sp, #40	; 0x28
 800dfd4:	af02      	add	r7, sp, #8
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	4613      	mov	r3, r2
 800dfdc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d10a      	bne.n	800dffa <xQueueGenericCreate+0x2a>
	__asm volatile
 800dfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe8:	f383 8811 	msr	BASEPRI, r3
 800dfec:	f3bf 8f6f 	isb	sy
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	613b      	str	r3, [r7, #16]
}
 800dff6:	bf00      	nop
 800dff8:	e7fe      	b.n	800dff8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	68ba      	ldr	r2, [r7, #8]
 800dffe:	fb02 f303 	mul.w	r3, r2, r3
 800e002:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	3350      	adds	r3, #80	; 0x50
 800e008:	4618      	mov	r0, r3
 800e00a:	f002 f96d 	bl	80102e8 <pvPortMalloc>
 800e00e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d011      	beq.n	800e03a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	3350      	adds	r3, #80	; 0x50
 800e01e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	2200      	movs	r2, #0
 800e024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e028:	79fa      	ldrb	r2, [r7, #7]
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	4613      	mov	r3, r2
 800e030:	697a      	ldr	r2, [r7, #20]
 800e032:	68b9      	ldr	r1, [r7, #8]
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f000 f805 	bl	800e044 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e03a:	69bb      	ldr	r3, [r7, #24]
	}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3720      	adds	r7, #32
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
 800e050:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d103      	bne.n	800e060 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	69ba      	ldr	r2, [r7, #24]
 800e05c:	601a      	str	r2, [r3, #0]
 800e05e:	e002      	b.n	800e066 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e060:	69bb      	ldr	r3, [r7, #24]
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e06c:	69bb      	ldr	r3, [r7, #24]
 800e06e:	68ba      	ldr	r2, [r7, #8]
 800e070:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e072:	2101      	movs	r1, #1
 800e074:	69b8      	ldr	r0, [r7, #24]
 800e076:	f7ff fecb 	bl	800de10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e07a:	69bb      	ldr	r3, [r7, #24]
 800e07c:	78fa      	ldrb	r2, [r7, #3]
 800e07e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e082:	bf00      	nop
 800e084:	3710      	adds	r7, #16
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
	...

0800e08c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b08e      	sub	sp, #56	; 0x38
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
 800e098:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e09a:	2300      	movs	r3, #0
 800e09c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10a      	bne.n	800e0be <xQueueGenericSend+0x32>
	__asm volatile
 800e0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ac:	f383 8811 	msr	BASEPRI, r3
 800e0b0:	f3bf 8f6f 	isb	sy
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e0ba:	bf00      	nop
 800e0bc:	e7fe      	b.n	800e0bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d103      	bne.n	800e0cc <xQueueGenericSend+0x40>
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d101      	bne.n	800e0d0 <xQueueGenericSend+0x44>
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	e000      	b.n	800e0d2 <xQueueGenericSend+0x46>
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d10a      	bne.n	800e0ec <xQueueGenericSend+0x60>
	__asm volatile
 800e0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0da:	f383 8811 	msr	BASEPRI, r3
 800e0de:	f3bf 8f6f 	isb	sy
 800e0e2:	f3bf 8f4f 	dsb	sy
 800e0e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e0e8:	bf00      	nop
 800e0ea:	e7fe      	b.n	800e0ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	2b02      	cmp	r3, #2
 800e0f0:	d103      	bne.n	800e0fa <xQueueGenericSend+0x6e>
 800e0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d101      	bne.n	800e0fe <xQueueGenericSend+0x72>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e000      	b.n	800e100 <xQueueGenericSend+0x74>
 800e0fe:	2300      	movs	r3, #0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d10a      	bne.n	800e11a <xQueueGenericSend+0x8e>
	__asm volatile
 800e104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e108:	f383 8811 	msr	BASEPRI, r3
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	623b      	str	r3, [r7, #32]
}
 800e116:	bf00      	nop
 800e118:	e7fe      	b.n	800e118 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e11a:	f001 fa67 	bl	800f5ec <xTaskGetSchedulerState>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d102      	bne.n	800e12a <xQueueGenericSend+0x9e>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d101      	bne.n	800e12e <xQueueGenericSend+0xa2>
 800e12a:	2301      	movs	r3, #1
 800e12c:	e000      	b.n	800e130 <xQueueGenericSend+0xa4>
 800e12e:	2300      	movs	r3, #0
 800e130:	2b00      	cmp	r3, #0
 800e132:	d10a      	bne.n	800e14a <xQueueGenericSend+0xbe>
	__asm volatile
 800e134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e138:	f383 8811 	msr	BASEPRI, r3
 800e13c:	f3bf 8f6f 	isb	sy
 800e140:	f3bf 8f4f 	dsb	sy
 800e144:	61fb      	str	r3, [r7, #28]
}
 800e146:	bf00      	nop
 800e148:	e7fe      	b.n	800e148 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e14a:	f001 ffab 	bl	80100a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e156:	429a      	cmp	r2, r3
 800e158:	d302      	bcc.n	800e160 <xQueueGenericSend+0xd4>
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	2b02      	cmp	r3, #2
 800e15e:	d129      	bne.n	800e1b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e160:	683a      	ldr	r2, [r7, #0]
 800e162:	68b9      	ldr	r1, [r7, #8]
 800e164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e166:	f000 fa8b 	bl	800e680 <prvCopyDataToQueue>
 800e16a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e170:	2b00      	cmp	r3, #0
 800e172:	d010      	beq.n	800e196 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e176:	3324      	adds	r3, #36	; 0x24
 800e178:	4618      	mov	r0, r3
 800e17a:	f001 f875 	bl	800f268 <xTaskRemoveFromEventList>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d013      	beq.n	800e1ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e184:	4b3f      	ldr	r3, [pc, #252]	; (800e284 <xQueueGenericSend+0x1f8>)
 800e186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e18a:	601a      	str	r2, [r3, #0]
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	f3bf 8f6f 	isb	sy
 800e194:	e00a      	b.n	800e1ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d007      	beq.n	800e1ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e19c:	4b39      	ldr	r3, [pc, #228]	; (800e284 <xQueueGenericSend+0x1f8>)
 800e19e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1a2:	601a      	str	r2, [r3, #0]
 800e1a4:	f3bf 8f4f 	dsb	sy
 800e1a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e1ac:	f001 ffaa 	bl	8010104 <vPortExitCritical>
				return pdPASS;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	e063      	b.n	800e27c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d103      	bne.n	800e1c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e1ba:	f001 ffa3 	bl	8010104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e05c      	b.n	800e27c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d106      	bne.n	800e1d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e1c8:	f107 0314 	add.w	r3, r7, #20
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f001 f8af 	bl	800f330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e1d6:	f001 ff95 	bl	8010104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e1da:	f000 fe1b 	bl	800ee14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e1de:	f001 ff61 	bl	80100a4 <vPortEnterCritical>
 800e1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e1e8:	b25b      	sxtb	r3, r3
 800e1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ee:	d103      	bne.n	800e1f8 <xQueueGenericSend+0x16c>
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e1fe:	b25b      	sxtb	r3, r3
 800e200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e204:	d103      	bne.n	800e20e <xQueueGenericSend+0x182>
 800e206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e20e:	f001 ff79 	bl	8010104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e212:	1d3a      	adds	r2, r7, #4
 800e214:	f107 0314 	add.w	r3, r7, #20
 800e218:	4611      	mov	r1, r2
 800e21a:	4618      	mov	r0, r3
 800e21c:	f001 f89e 	bl	800f35c <xTaskCheckForTimeOut>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d124      	bne.n	800e270 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e228:	f000 fb22 	bl	800e870 <prvIsQueueFull>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d018      	beq.n	800e264 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e234:	3310      	adds	r3, #16
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	4611      	mov	r1, r2
 800e23a:	4618      	mov	r0, r3
 800e23c:	f000 ffc4 	bl	800f1c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e242:	f000 faad 	bl	800e7a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e246:	f000 fdf3 	bl	800ee30 <xTaskResumeAll>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f47f af7c 	bne.w	800e14a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e252:	4b0c      	ldr	r3, [pc, #48]	; (800e284 <xQueueGenericSend+0x1f8>)
 800e254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e258:	601a      	str	r2, [r3, #0]
 800e25a:	f3bf 8f4f 	dsb	sy
 800e25e:	f3bf 8f6f 	isb	sy
 800e262:	e772      	b.n	800e14a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e266:	f000 fa9b 	bl	800e7a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e26a:	f000 fde1 	bl	800ee30 <xTaskResumeAll>
 800e26e:	e76c      	b.n	800e14a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e272:	f000 fa95 	bl	800e7a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e276:	f000 fddb 	bl	800ee30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e27a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3738      	adds	r7, #56	; 0x38
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	e000ed04 	.word	0xe000ed04

0800e288 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b090      	sub	sp, #64	; 0x40
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	607a      	str	r2, [r7, #4]
 800e294:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d10a      	bne.n	800e2b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a4:	f383 8811 	msr	BASEPRI, r3
 800e2a8:	f3bf 8f6f 	isb	sy
 800e2ac:	f3bf 8f4f 	dsb	sy
 800e2b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e2b2:	bf00      	nop
 800e2b4:	e7fe      	b.n	800e2b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d103      	bne.n	800e2c4 <xQueueGenericSendFromISR+0x3c>
 800e2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d101      	bne.n	800e2c8 <xQueueGenericSendFromISR+0x40>
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	e000      	b.n	800e2ca <xQueueGenericSendFromISR+0x42>
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10a      	bne.n	800e2e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e2e0:	bf00      	nop
 800e2e2:	e7fe      	b.n	800e2e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d103      	bne.n	800e2f2 <xQueueGenericSendFromISR+0x6a>
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d101      	bne.n	800e2f6 <xQueueGenericSendFromISR+0x6e>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e000      	b.n	800e2f8 <xQueueGenericSendFromISR+0x70>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d10a      	bne.n	800e312 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e300:	f383 8811 	msr	BASEPRI, r3
 800e304:	f3bf 8f6f 	isb	sy
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	623b      	str	r3, [r7, #32]
}
 800e30e:	bf00      	nop
 800e310:	e7fe      	b.n	800e310 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e312:	f001 ffa9 	bl	8010268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e316:	f3ef 8211 	mrs	r2, BASEPRI
 800e31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	61fa      	str	r2, [r7, #28]
 800e32c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e32e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e330:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d302      	bcc.n	800e344 <xQueueGenericSendFromISR+0xbc>
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	2b02      	cmp	r3, #2
 800e342:	d12f      	bne.n	800e3a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e352:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e354:	683a      	ldr	r2, [r7, #0]
 800e356:	68b9      	ldr	r1, [r7, #8]
 800e358:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e35a:	f000 f991 	bl	800e680 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e35e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e366:	d112      	bne.n	800e38e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d016      	beq.n	800e39e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e372:	3324      	adds	r3, #36	; 0x24
 800e374:	4618      	mov	r0, r3
 800e376:	f000 ff77 	bl	800f268 <xTaskRemoveFromEventList>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d00e      	beq.n	800e39e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00b      	beq.n	800e39e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2201      	movs	r2, #1
 800e38a:	601a      	str	r2, [r3, #0]
 800e38c:	e007      	b.n	800e39e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e38e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e392:	3301      	adds	r3, #1
 800e394:	b2db      	uxtb	r3, r3
 800e396:	b25a      	sxtb	r2, r3
 800e398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e3a2:	e001      	b.n	800e3a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e3b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3740      	adds	r7, #64	; 0x40
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
	...

0800e3c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b08c      	sub	sp, #48	; 0x30
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d10a      	bne.n	800e3f0 <xQueueReceive+0x30>
	__asm volatile
 800e3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3de:	f383 8811 	msr	BASEPRI, r3
 800e3e2:	f3bf 8f6f 	isb	sy
 800e3e6:	f3bf 8f4f 	dsb	sy
 800e3ea:	623b      	str	r3, [r7, #32]
}
 800e3ec:	bf00      	nop
 800e3ee:	e7fe      	b.n	800e3ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d103      	bne.n	800e3fe <xQueueReceive+0x3e>
 800e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d101      	bne.n	800e402 <xQueueReceive+0x42>
 800e3fe:	2301      	movs	r3, #1
 800e400:	e000      	b.n	800e404 <xQueueReceive+0x44>
 800e402:	2300      	movs	r3, #0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10a      	bne.n	800e41e <xQueueReceive+0x5e>
	__asm volatile
 800e408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40c:	f383 8811 	msr	BASEPRI, r3
 800e410:	f3bf 8f6f 	isb	sy
 800e414:	f3bf 8f4f 	dsb	sy
 800e418:	61fb      	str	r3, [r7, #28]
}
 800e41a:	bf00      	nop
 800e41c:	e7fe      	b.n	800e41c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e41e:	f001 f8e5 	bl	800f5ec <xTaskGetSchedulerState>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d102      	bne.n	800e42e <xQueueReceive+0x6e>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d101      	bne.n	800e432 <xQueueReceive+0x72>
 800e42e:	2301      	movs	r3, #1
 800e430:	e000      	b.n	800e434 <xQueueReceive+0x74>
 800e432:	2300      	movs	r3, #0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10a      	bne.n	800e44e <xQueueReceive+0x8e>
	__asm volatile
 800e438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43c:	f383 8811 	msr	BASEPRI, r3
 800e440:	f3bf 8f6f 	isb	sy
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	61bb      	str	r3, [r7, #24]
}
 800e44a:	bf00      	nop
 800e44c:	e7fe      	b.n	800e44c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e44e:	f001 fe29 	bl	80100a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e456:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d01f      	beq.n	800e49e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e45e:	68b9      	ldr	r1, [r7, #8]
 800e460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e462:	f000 f977 	bl	800e754 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e468:	1e5a      	subs	r2, r3, #1
 800e46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e470:	691b      	ldr	r3, [r3, #16]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00f      	beq.n	800e496 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e478:	3310      	adds	r3, #16
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 fef4 	bl	800f268 <xTaskRemoveFromEventList>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d007      	beq.n	800e496 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e486:	4b3d      	ldr	r3, [pc, #244]	; (800e57c <xQueueReceive+0x1bc>)
 800e488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e48c:	601a      	str	r2, [r3, #0]
 800e48e:	f3bf 8f4f 	dsb	sy
 800e492:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e496:	f001 fe35 	bl	8010104 <vPortExitCritical>
				return pdPASS;
 800e49a:	2301      	movs	r3, #1
 800e49c:	e069      	b.n	800e572 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d103      	bne.n	800e4ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e4a4:	f001 fe2e 	bl	8010104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e062      	b.n	800e572 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d106      	bne.n	800e4c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4b2:	f107 0310 	add.w	r3, r7, #16
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f000 ff3a 	bl	800f330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4c0:	f001 fe20 	bl	8010104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4c4:	f000 fca6 	bl	800ee14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4c8:	f001 fdec 	bl	80100a4 <vPortEnterCritical>
 800e4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4d2:	b25b      	sxtb	r3, r3
 800e4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d8:	d103      	bne.n	800e4e2 <xQueueReceive+0x122>
 800e4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4e8:	b25b      	sxtb	r3, r3
 800e4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ee:	d103      	bne.n	800e4f8 <xQueueReceive+0x138>
 800e4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e4f8:	f001 fe04 	bl	8010104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e4fc:	1d3a      	adds	r2, r7, #4
 800e4fe:	f107 0310 	add.w	r3, r7, #16
 800e502:	4611      	mov	r1, r2
 800e504:	4618      	mov	r0, r3
 800e506:	f000 ff29 	bl	800f35c <xTaskCheckForTimeOut>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d123      	bne.n	800e558 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e512:	f000 f997 	bl	800e844 <prvIsQueueEmpty>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d017      	beq.n	800e54c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51e:	3324      	adds	r3, #36	; 0x24
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	4611      	mov	r1, r2
 800e524:	4618      	mov	r0, r3
 800e526:	f000 fe4f 	bl	800f1c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e52a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e52c:	f000 f938 	bl	800e7a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e530:	f000 fc7e 	bl	800ee30 <xTaskResumeAll>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d189      	bne.n	800e44e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e53a:	4b10      	ldr	r3, [pc, #64]	; (800e57c <xQueueReceive+0x1bc>)
 800e53c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e540:	601a      	str	r2, [r3, #0]
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	e780      	b.n	800e44e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e54c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e54e:	f000 f927 	bl	800e7a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e552:	f000 fc6d 	bl	800ee30 <xTaskResumeAll>
 800e556:	e77a      	b.n	800e44e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e55a:	f000 f921 	bl	800e7a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e55e:	f000 fc67 	bl	800ee30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e564:	f000 f96e 	bl	800e844 <prvIsQueueEmpty>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	f43f af6f 	beq.w	800e44e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e570:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e572:	4618      	mov	r0, r3
 800e574:	3730      	adds	r7, #48	; 0x30
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	e000ed04 	.word	0xe000ed04

0800e580 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b08e      	sub	sp, #56	; 0x38
 800e584:	af00      	add	r7, sp, #0
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	60b9      	str	r1, [r7, #8]
 800e58a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e592:	2b00      	cmp	r3, #0
 800e594:	d10a      	bne.n	800e5ac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59a:	f383 8811 	msr	BASEPRI, r3
 800e59e:	f3bf 8f6f 	isb	sy
 800e5a2:	f3bf 8f4f 	dsb	sy
 800e5a6:	623b      	str	r3, [r7, #32]
}
 800e5a8:	bf00      	nop
 800e5aa:	e7fe      	b.n	800e5aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d103      	bne.n	800e5ba <xQueueReceiveFromISR+0x3a>
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d101      	bne.n	800e5be <xQueueReceiveFromISR+0x3e>
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e000      	b.n	800e5c0 <xQueueReceiveFromISR+0x40>
 800e5be:	2300      	movs	r3, #0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d10a      	bne.n	800e5da <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c8:	f383 8811 	msr	BASEPRI, r3
 800e5cc:	f3bf 8f6f 	isb	sy
 800e5d0:	f3bf 8f4f 	dsb	sy
 800e5d4:	61fb      	str	r3, [r7, #28]
}
 800e5d6:	bf00      	nop
 800e5d8:	e7fe      	b.n	800e5d8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e5da:	f001 fe45 	bl	8010268 <vPortValidateInterruptPriority>
	__asm volatile
 800e5de:	f3ef 8211 	mrs	r2, BASEPRI
 800e5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e6:	f383 8811 	msr	BASEPRI, r3
 800e5ea:	f3bf 8f6f 	isb	sy
 800e5ee:	f3bf 8f4f 	dsb	sy
 800e5f2:	61ba      	str	r2, [r7, #24]
 800e5f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e5f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e602:	2b00      	cmp	r3, #0
 800e604:	d02f      	beq.n	800e666 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e60c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e610:	68b9      	ldr	r1, [r7, #8]
 800e612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e614:	f000 f89e 	bl	800e754 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61a:	1e5a      	subs	r2, r3, #1
 800e61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e620:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e628:	d112      	bne.n	800e650 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62c:	691b      	ldr	r3, [r3, #16]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d016      	beq.n	800e660 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e634:	3310      	adds	r3, #16
 800e636:	4618      	mov	r0, r3
 800e638:	f000 fe16 	bl	800f268 <xTaskRemoveFromEventList>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d00e      	beq.n	800e660 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00b      	beq.n	800e660 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2201      	movs	r2, #1
 800e64c:	601a      	str	r2, [r3, #0]
 800e64e:	e007      	b.n	800e660 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e654:	3301      	adds	r3, #1
 800e656:	b2db      	uxtb	r3, r3
 800e658:	b25a      	sxtb	r2, r3
 800e65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e660:	2301      	movs	r3, #1
 800e662:	637b      	str	r3, [r7, #52]	; 0x34
 800e664:	e001      	b.n	800e66a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e666:	2300      	movs	r3, #0
 800e668:	637b      	str	r3, [r7, #52]	; 0x34
 800e66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	f383 8811 	msr	BASEPRI, r3
}
 800e674:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3738      	adds	r7, #56	; 0x38
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b086      	sub	sp, #24
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e68c:	2300      	movs	r3, #0
 800e68e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e694:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d10d      	bne.n	800e6ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d14d      	bne.n	800e742 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	689b      	ldr	r3, [r3, #8]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f000 ffbc 	bl	800f628 <xTaskPriorityDisinherit>
 800e6b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	609a      	str	r2, [r3, #8]
 800e6b8:	e043      	b.n	800e742 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d119      	bne.n	800e6f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	6858      	ldr	r0, [r3, #4]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	68b9      	ldr	r1, [r7, #8]
 800e6cc:	f002 fd1c 	bl	8011108 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	685a      	ldr	r2, [r3, #4]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d8:	441a      	add	r2, r3
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	685a      	ldr	r2, [r3, #4]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d32b      	bcc.n	800e742 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	605a      	str	r2, [r3, #4]
 800e6f2:	e026      	b.n	800e742 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	68d8      	ldr	r0, [r3, #12]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	68b9      	ldr	r1, [r7, #8]
 800e700:	f002 fd02 	bl	8011108 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	68da      	ldr	r2, [r3, #12]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e70c:	425b      	negs	r3, r3
 800e70e:	441a      	add	r2, r3
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	68da      	ldr	r2, [r3, #12]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d207      	bcs.n	800e730 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	689a      	ldr	r2, [r3, #8]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e728:	425b      	negs	r3, r3
 800e72a:	441a      	add	r2, r3
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2b02      	cmp	r3, #2
 800e734:	d105      	bne.n	800e742 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d002      	beq.n	800e742 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	3b01      	subs	r3, #1
 800e740:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	1c5a      	adds	r2, r3, #1
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e74a:	697b      	ldr	r3, [r7, #20]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e762:	2b00      	cmp	r3, #0
 800e764:	d018      	beq.n	800e798 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	68da      	ldr	r2, [r3, #12]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e76e:	441a      	add	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	68da      	ldr	r2, [r3, #12]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d303      	bcc.n	800e788 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	68d9      	ldr	r1, [r3, #12]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e790:	461a      	mov	r2, r3
 800e792:	6838      	ldr	r0, [r7, #0]
 800e794:	f002 fcb8 	bl	8011108 <memcpy>
	}
}
 800e798:	bf00      	nop
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e7a8:	f001 fc7c 	bl	80100a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e7b4:	e011      	b.n	800e7da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d012      	beq.n	800e7e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	3324      	adds	r3, #36	; 0x24
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f000 fd50 	bl	800f268 <xTaskRemoveFromEventList>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d001      	beq.n	800e7d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e7ce:	f000 fe27 	bl	800f420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e7d2:	7bfb      	ldrb	r3, [r7, #15]
 800e7d4:	3b01      	subs	r3, #1
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e7da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	dce9      	bgt.n	800e7b6 <prvUnlockQueue+0x16>
 800e7e2:	e000      	b.n	800e7e6 <prvUnlockQueue+0x46>
					break;
 800e7e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	22ff      	movs	r2, #255	; 0xff
 800e7ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e7ee:	f001 fc89 	bl	8010104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e7f2:	f001 fc57 	bl	80100a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e7fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e7fe:	e011      	b.n	800e824 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	691b      	ldr	r3, [r3, #16]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d012      	beq.n	800e82e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	3310      	adds	r3, #16
 800e80c:	4618      	mov	r0, r3
 800e80e:	f000 fd2b 	bl	800f268 <xTaskRemoveFromEventList>
 800e812:	4603      	mov	r3, r0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d001      	beq.n	800e81c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e818:	f000 fe02 	bl	800f420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e81c:	7bbb      	ldrb	r3, [r7, #14]
 800e81e:	3b01      	subs	r3, #1
 800e820:	b2db      	uxtb	r3, r3
 800e822:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	dce9      	bgt.n	800e800 <prvUnlockQueue+0x60>
 800e82c:	e000      	b.n	800e830 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e82e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	22ff      	movs	r2, #255	; 0xff
 800e834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e838:	f001 fc64 	bl	8010104 <vPortExitCritical>
}
 800e83c:	bf00      	nop
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e84c:	f001 fc2a 	bl	80100a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e854:	2b00      	cmp	r3, #0
 800e856:	d102      	bne.n	800e85e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e858:	2301      	movs	r3, #1
 800e85a:	60fb      	str	r3, [r7, #12]
 800e85c:	e001      	b.n	800e862 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e85e:	2300      	movs	r3, #0
 800e860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e862:	f001 fc4f 	bl	8010104 <vPortExitCritical>

	return xReturn;
 800e866:	68fb      	ldr	r3, [r7, #12]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e878:	f001 fc14 	bl	80100a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e884:	429a      	cmp	r2, r3
 800e886:	d102      	bne.n	800e88e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e888:	2301      	movs	r3, #1
 800e88a:	60fb      	str	r3, [r7, #12]
 800e88c:	e001      	b.n	800e892 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e88e:	2300      	movs	r3, #0
 800e890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e892:	f001 fc37 	bl	8010104 <vPortExitCritical>

	return xReturn;
 800e896:	68fb      	ldr	r3, [r7, #12]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	60fb      	str	r3, [r7, #12]
 800e8ae:	e014      	b.n	800e8da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e8b0:	4a0f      	ldr	r2, [pc, #60]	; (800e8f0 <vQueueAddToRegistry+0x50>)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d10b      	bne.n	800e8d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e8bc:	490c      	ldr	r1, [pc, #48]	; (800e8f0 <vQueueAddToRegistry+0x50>)
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	683a      	ldr	r2, [r7, #0]
 800e8c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e8c6:	4a0a      	ldr	r2, [pc, #40]	; (800e8f0 <vQueueAddToRegistry+0x50>)
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	00db      	lsls	r3, r3, #3
 800e8cc:	4413      	add	r3, r2
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e8d2:	e006      	b.n	800e8e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	60fb      	str	r3, [r7, #12]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2b07      	cmp	r3, #7
 800e8de:	d9e7      	bls.n	800e8b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e8e0:	bf00      	nop
 800e8e2:	bf00      	nop
 800e8e4:	3714      	adds	r7, #20
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	20000d7c 	.word	0x20000d7c

0800e8f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b086      	sub	sp, #24
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e904:	f001 fbce 	bl	80100a4 <vPortEnterCritical>
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e90e:	b25b      	sxtb	r3, r3
 800e910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e914:	d103      	bne.n	800e91e <vQueueWaitForMessageRestricted+0x2a>
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	2200      	movs	r2, #0
 800e91a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e924:	b25b      	sxtb	r3, r3
 800e926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e92a:	d103      	bne.n	800e934 <vQueueWaitForMessageRestricted+0x40>
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	2200      	movs	r2, #0
 800e930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e934:	f001 fbe6 	bl	8010104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d106      	bne.n	800e94e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	3324      	adds	r3, #36	; 0x24
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	68b9      	ldr	r1, [r7, #8]
 800e948:	4618      	mov	r0, r3
 800e94a:	f000 fc61 	bl	800f210 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e94e:	6978      	ldr	r0, [r7, #20]
 800e950:	f7ff ff26 	bl	800e7a0 <prvUnlockQueue>
	}
 800e954:	bf00      	nop
 800e956:	3718      	adds	r7, #24
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b08e      	sub	sp, #56	; 0x38
 800e960:	af04      	add	r7, sp, #16
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	607a      	str	r2, [r7, #4]
 800e968:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d10a      	bne.n	800e986 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e974:	f383 8811 	msr	BASEPRI, r3
 800e978:	f3bf 8f6f 	isb	sy
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	623b      	str	r3, [r7, #32]
}
 800e982:	bf00      	nop
 800e984:	e7fe      	b.n	800e984 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d10a      	bne.n	800e9a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800e98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e990:	f383 8811 	msr	BASEPRI, r3
 800e994:	f3bf 8f6f 	isb	sy
 800e998:	f3bf 8f4f 	dsb	sy
 800e99c:	61fb      	str	r3, [r7, #28]
}
 800e99e:	bf00      	nop
 800e9a0:	e7fe      	b.n	800e9a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e9a2:	23bc      	movs	r3, #188	; 0xbc
 800e9a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	2bbc      	cmp	r3, #188	; 0xbc
 800e9aa:	d00a      	beq.n	800e9c2 <xTaskCreateStatic+0x66>
	__asm volatile
 800e9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b0:	f383 8811 	msr	BASEPRI, r3
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	f3bf 8f4f 	dsb	sy
 800e9bc:	61bb      	str	r3, [r7, #24]
}
 800e9be:	bf00      	nop
 800e9c0:	e7fe      	b.n	800e9c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e9c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d01e      	beq.n	800ea08 <xTaskCreateStatic+0xac>
 800e9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d01b      	beq.n	800ea08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9dc:	2202      	movs	r2, #2
 800e9de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	9303      	str	r3, [sp, #12]
 800e9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e8:	9302      	str	r3, [sp, #8]
 800e9ea:	f107 0314 	add.w	r3, r7, #20
 800e9ee:	9301      	str	r3, [sp, #4]
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	68b9      	ldr	r1, [r7, #8]
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f000 f850 	bl	800eaa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea02:	f000 f8f3 	bl	800ebec <prvAddNewTaskToReadyList>
 800ea06:	e001      	b.n	800ea0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ea0c:	697b      	ldr	r3, [r7, #20]
	}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3728      	adds	r7, #40	; 0x28
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}

0800ea16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b08c      	sub	sp, #48	; 0x30
 800ea1a:	af04      	add	r7, sp, #16
 800ea1c:	60f8      	str	r0, [r7, #12]
 800ea1e:	60b9      	str	r1, [r7, #8]
 800ea20:	603b      	str	r3, [r7, #0]
 800ea22:	4613      	mov	r3, r2
 800ea24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ea26:	88fb      	ldrh	r3, [r7, #6]
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f001 fc5c 	bl	80102e8 <pvPortMalloc>
 800ea30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d00e      	beq.n	800ea56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ea38:	20bc      	movs	r0, #188	; 0xbc
 800ea3a:	f001 fc55 	bl	80102e8 <pvPortMalloc>
 800ea3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d003      	beq.n	800ea4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ea46:	69fb      	ldr	r3, [r7, #28]
 800ea48:	697a      	ldr	r2, [r7, #20]
 800ea4a:	631a      	str	r2, [r3, #48]	; 0x30
 800ea4c:	e005      	b.n	800ea5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ea4e:	6978      	ldr	r0, [r7, #20]
 800ea50:	f001 fd16 	bl	8010480 <vPortFree>
 800ea54:	e001      	b.n	800ea5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ea56:	2300      	movs	r3, #0
 800ea58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d017      	beq.n	800ea90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	2200      	movs	r2, #0
 800ea64:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ea68:	88fa      	ldrh	r2, [r7, #6]
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	9303      	str	r3, [sp, #12]
 800ea6e:	69fb      	ldr	r3, [r7, #28]
 800ea70:	9302      	str	r3, [sp, #8]
 800ea72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea74:	9301      	str	r3, [sp, #4]
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	9300      	str	r3, [sp, #0]
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	68b9      	ldr	r1, [r7, #8]
 800ea7e:	68f8      	ldr	r0, [r7, #12]
 800ea80:	f000 f80e 	bl	800eaa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea84:	69f8      	ldr	r0, [r7, #28]
 800ea86:	f000 f8b1 	bl	800ebec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	61bb      	str	r3, [r7, #24]
 800ea8e:	e002      	b.n	800ea96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ea90:	f04f 33ff 	mov.w	r3, #4294967295
 800ea94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ea96:	69bb      	ldr	r3, [r7, #24]
	}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3720      	adds	r7, #32
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b088      	sub	sp, #32
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	461a      	mov	r2, r3
 800eab8:	21a5      	movs	r1, #165	; 0xa5
 800eaba:	f002 fb33 	bl	8011124 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eac8:	3b01      	subs	r3, #1
 800eaca:	009b      	lsls	r3, r3, #2
 800eacc:	4413      	add	r3, r2
 800eace:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	f023 0307 	bic.w	r3, r3, #7
 800ead6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ead8:	69bb      	ldr	r3, [r7, #24]
 800eada:	f003 0307 	and.w	r3, r3, #7
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00a      	beq.n	800eaf8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800eae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	617b      	str	r3, [r7, #20]
}
 800eaf4:	bf00      	nop
 800eaf6:	e7fe      	b.n	800eaf6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d01f      	beq.n	800eb3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eafe:	2300      	movs	r3, #0
 800eb00:	61fb      	str	r3, [r7, #28]
 800eb02:	e012      	b.n	800eb2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eb04:	68ba      	ldr	r2, [r7, #8]
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	4413      	add	r3, r2
 800eb0a:	7819      	ldrb	r1, [r3, #0]
 800eb0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	4413      	add	r3, r2
 800eb12:	3334      	adds	r3, #52	; 0x34
 800eb14:	460a      	mov	r2, r1
 800eb16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eb18:	68ba      	ldr	r2, [r7, #8]
 800eb1a:	69fb      	ldr	r3, [r7, #28]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d006      	beq.n	800eb32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	3301      	adds	r3, #1
 800eb28:	61fb      	str	r3, [r7, #28]
 800eb2a:	69fb      	ldr	r3, [r7, #28]
 800eb2c:	2b0f      	cmp	r3, #15
 800eb2e:	d9e9      	bls.n	800eb04 <prvInitialiseNewTask+0x64>
 800eb30:	e000      	b.n	800eb34 <prvInitialiseNewTask+0x94>
			{
				break;
 800eb32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb36:	2200      	movs	r2, #0
 800eb38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eb3c:	e003      	b.n	800eb46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	2200      	movs	r2, #0
 800eb42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb48:	2b37      	cmp	r3, #55	; 0x37
 800eb4a:	d901      	bls.n	800eb50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eb4c:	2337      	movs	r3, #55	; 0x37
 800eb4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800eb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5e:	2200      	movs	r2, #0
 800eb60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb64:	3304      	adds	r3, #4
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff f8be 	bl	800dce8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6e:	3318      	adds	r3, #24
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7ff f8b9 	bl	800dce8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb96:	2200      	movs	r2, #0
 800eb98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9e:	3354      	adds	r3, #84	; 0x54
 800eba0:	2260      	movs	r2, #96	; 0x60
 800eba2:	2100      	movs	r1, #0
 800eba4:	4618      	mov	r0, r3
 800eba6:	f002 fabd 	bl	8011124 <memset>
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebac:	4a0c      	ldr	r2, [pc, #48]	; (800ebe0 <prvInitialiseNewTask+0x140>)
 800ebae:	659a      	str	r2, [r3, #88]	; 0x58
 800ebb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb2:	4a0c      	ldr	r2, [pc, #48]	; (800ebe4 <prvInitialiseNewTask+0x144>)
 800ebb4:	65da      	str	r2, [r3, #92]	; 0x5c
 800ebb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb8:	4a0b      	ldr	r2, [pc, #44]	; (800ebe8 <prvInitialiseNewTask+0x148>)
 800ebba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ebbc:	683a      	ldr	r2, [r7, #0]
 800ebbe:	68f9      	ldr	r1, [r7, #12]
 800ebc0:	69b8      	ldr	r0, [r7, #24]
 800ebc2:	f001 f941 	bl	800fe48 <pxPortInitialiseStack>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ebcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d002      	beq.n	800ebd8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ebd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebd8:	bf00      	nop
 800ebda:	3720      	adds	r7, #32
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	0801412c 	.word	0x0801412c
 800ebe4:	0801414c 	.word	0x0801414c
 800ebe8:	0801410c 	.word	0x0801410c

0800ebec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ebf4:	f001 fa56 	bl	80100a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ebf8:	4b2d      	ldr	r3, [pc, #180]	; (800ecb0 <prvAddNewTaskToReadyList+0xc4>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	4a2c      	ldr	r2, [pc, #176]	; (800ecb0 <prvAddNewTaskToReadyList+0xc4>)
 800ec00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ec02:	4b2c      	ldr	r3, [pc, #176]	; (800ecb4 <prvAddNewTaskToReadyList+0xc8>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d109      	bne.n	800ec1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ec0a:	4a2a      	ldr	r2, [pc, #168]	; (800ecb4 <prvAddNewTaskToReadyList+0xc8>)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ec10:	4b27      	ldr	r3, [pc, #156]	; (800ecb0 <prvAddNewTaskToReadyList+0xc4>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d110      	bne.n	800ec3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ec18:	f000 fc26 	bl	800f468 <prvInitialiseTaskLists>
 800ec1c:	e00d      	b.n	800ec3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ec1e:	4b26      	ldr	r3, [pc, #152]	; (800ecb8 <prvAddNewTaskToReadyList+0xcc>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d109      	bne.n	800ec3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ec26:	4b23      	ldr	r3, [pc, #140]	; (800ecb4 <prvAddNewTaskToReadyList+0xc8>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d802      	bhi.n	800ec3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ec34:	4a1f      	ldr	r2, [pc, #124]	; (800ecb4 <prvAddNewTaskToReadyList+0xc8>)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ec3a:	4b20      	ldr	r3, [pc, #128]	; (800ecbc <prvAddNewTaskToReadyList+0xd0>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	3301      	adds	r3, #1
 800ec40:	4a1e      	ldr	r2, [pc, #120]	; (800ecbc <prvAddNewTaskToReadyList+0xd0>)
 800ec42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ec44:	4b1d      	ldr	r3, [pc, #116]	; (800ecbc <prvAddNewTaskToReadyList+0xd0>)
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec50:	4b1b      	ldr	r3, [pc, #108]	; (800ecc0 <prvAddNewTaskToReadyList+0xd4>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d903      	bls.n	800ec60 <prvAddNewTaskToReadyList+0x74>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5c:	4a18      	ldr	r2, [pc, #96]	; (800ecc0 <prvAddNewTaskToReadyList+0xd4>)
 800ec5e:	6013      	str	r3, [r2, #0]
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec64:	4613      	mov	r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4413      	add	r3, r2
 800ec6a:	009b      	lsls	r3, r3, #2
 800ec6c:	4a15      	ldr	r2, [pc, #84]	; (800ecc4 <prvAddNewTaskToReadyList+0xd8>)
 800ec6e:	441a      	add	r2, r3
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	3304      	adds	r3, #4
 800ec74:	4619      	mov	r1, r3
 800ec76:	4610      	mov	r0, r2
 800ec78:	f7ff f843 	bl	800dd02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ec7c:	f001 fa42 	bl	8010104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ec80:	4b0d      	ldr	r3, [pc, #52]	; (800ecb8 <prvAddNewTaskToReadyList+0xcc>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d00e      	beq.n	800eca6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ec88:	4b0a      	ldr	r3, [pc, #40]	; (800ecb4 <prvAddNewTaskToReadyList+0xc8>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d207      	bcs.n	800eca6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ec96:	4b0c      	ldr	r3, [pc, #48]	; (800ecc8 <prvAddNewTaskToReadyList+0xdc>)
 800ec98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec9c:	601a      	str	r2, [r3, #0]
 800ec9e:	f3bf 8f4f 	dsb	sy
 800eca2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eca6:	bf00      	nop
 800eca8:	3708      	adds	r7, #8
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	20001290 	.word	0x20001290
 800ecb4:	20000dbc 	.word	0x20000dbc
 800ecb8:	2000129c 	.word	0x2000129c
 800ecbc:	200012ac 	.word	0x200012ac
 800ecc0:	20001298 	.word	0x20001298
 800ecc4:	20000dc0 	.word	0x20000dc0
 800ecc8:	e000ed04 	.word	0xe000ed04

0800eccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d017      	beq.n	800ed0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ecde:	4b13      	ldr	r3, [pc, #76]	; (800ed2c <vTaskDelay+0x60>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00a      	beq.n	800ecfc <vTaskDelay+0x30>
	__asm volatile
 800ece6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecea:	f383 8811 	msr	BASEPRI, r3
 800ecee:	f3bf 8f6f 	isb	sy
 800ecf2:	f3bf 8f4f 	dsb	sy
 800ecf6:	60bb      	str	r3, [r7, #8]
}
 800ecf8:	bf00      	nop
 800ecfa:	e7fe      	b.n	800ecfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ecfc:	f000 f88a 	bl	800ee14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ed00:	2100      	movs	r1, #0
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 fcfe 	bl	800f704 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ed08:	f000 f892 	bl	800ee30 <xTaskResumeAll>
 800ed0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d107      	bne.n	800ed24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ed14:	4b06      	ldr	r3, [pc, #24]	; (800ed30 <vTaskDelay+0x64>)
 800ed16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed1a:	601a      	str	r2, [r3, #0]
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed24:	bf00      	nop
 800ed26:	3710      	adds	r7, #16
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	200012b8 	.word	0x200012b8
 800ed30:	e000ed04 	.word	0xe000ed04

0800ed34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b08a      	sub	sp, #40	; 0x28
 800ed38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ed42:	463a      	mov	r2, r7
 800ed44:	1d39      	adds	r1, r7, #4
 800ed46:	f107 0308 	add.w	r3, r7, #8
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fe ff78 	bl	800dc40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ed50:	6839      	ldr	r1, [r7, #0]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	68ba      	ldr	r2, [r7, #8]
 800ed56:	9202      	str	r2, [sp, #8]
 800ed58:	9301      	str	r3, [sp, #4]
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	9300      	str	r3, [sp, #0]
 800ed5e:	2300      	movs	r3, #0
 800ed60:	460a      	mov	r2, r1
 800ed62:	4924      	ldr	r1, [pc, #144]	; (800edf4 <vTaskStartScheduler+0xc0>)
 800ed64:	4824      	ldr	r0, [pc, #144]	; (800edf8 <vTaskStartScheduler+0xc4>)
 800ed66:	f7ff fdf9 	bl	800e95c <xTaskCreateStatic>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	4a23      	ldr	r2, [pc, #140]	; (800edfc <vTaskStartScheduler+0xc8>)
 800ed6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ed70:	4b22      	ldr	r3, [pc, #136]	; (800edfc <vTaskStartScheduler+0xc8>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d002      	beq.n	800ed7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	617b      	str	r3, [r7, #20]
 800ed7c:	e001      	b.n	800ed82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	2b01      	cmp	r3, #1
 800ed86:	d102      	bne.n	800ed8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ed88:	f000 fd10 	bl	800f7ac <xTimerCreateTimerTask>
 800ed8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d11b      	bne.n	800edcc <vTaskStartScheduler+0x98>
	__asm volatile
 800ed94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed98:	f383 8811 	msr	BASEPRI, r3
 800ed9c:	f3bf 8f6f 	isb	sy
 800eda0:	f3bf 8f4f 	dsb	sy
 800eda4:	613b      	str	r3, [r7, #16]
}
 800eda6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eda8:	4b15      	ldr	r3, [pc, #84]	; (800ee00 <vTaskStartScheduler+0xcc>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	3354      	adds	r3, #84	; 0x54
 800edae:	4a15      	ldr	r2, [pc, #84]	; (800ee04 <vTaskStartScheduler+0xd0>)
 800edb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800edb2:	4b15      	ldr	r3, [pc, #84]	; (800ee08 <vTaskStartScheduler+0xd4>)
 800edb4:	f04f 32ff 	mov.w	r2, #4294967295
 800edb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800edba:	4b14      	ldr	r3, [pc, #80]	; (800ee0c <vTaskStartScheduler+0xd8>)
 800edbc:	2201      	movs	r2, #1
 800edbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800edc0:	4b13      	ldr	r3, [pc, #76]	; (800ee10 <vTaskStartScheduler+0xdc>)
 800edc2:	2200      	movs	r2, #0
 800edc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800edc6:	f001 f8cb 	bl	800ff60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800edca:	e00e      	b.n	800edea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edd2:	d10a      	bne.n	800edea <vTaskStartScheduler+0xb6>
	__asm volatile
 800edd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd8:	f383 8811 	msr	BASEPRI, r3
 800eddc:	f3bf 8f6f 	isb	sy
 800ede0:	f3bf 8f4f 	dsb	sy
 800ede4:	60fb      	str	r3, [r7, #12]
}
 800ede6:	bf00      	nop
 800ede8:	e7fe      	b.n	800ede8 <vTaskStartScheduler+0xb4>
}
 800edea:	bf00      	nop
 800edec:	3718      	adds	r7, #24
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	08011ed0 	.word	0x08011ed0
 800edf8:	0800f439 	.word	0x0800f439
 800edfc:	200012b4 	.word	0x200012b4
 800ee00:	20000dbc 	.word	0x20000dbc
 800ee04:	2000018c 	.word	0x2000018c
 800ee08:	200012b0 	.word	0x200012b0
 800ee0c:	2000129c 	.word	0x2000129c
 800ee10:	20001294 	.word	0x20001294

0800ee14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ee14:	b480      	push	{r7}
 800ee16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ee18:	4b04      	ldr	r3, [pc, #16]	; (800ee2c <vTaskSuspendAll+0x18>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	4a03      	ldr	r2, [pc, #12]	; (800ee2c <vTaskSuspendAll+0x18>)
 800ee20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ee22:	bf00      	nop
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr
 800ee2c:	200012b8 	.word	0x200012b8

0800ee30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b084      	sub	sp, #16
 800ee34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ee36:	2300      	movs	r3, #0
 800ee38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ee3e:	4b42      	ldr	r3, [pc, #264]	; (800ef48 <xTaskResumeAll+0x118>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d10a      	bne.n	800ee5c <xTaskResumeAll+0x2c>
	__asm volatile
 800ee46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4a:	f383 8811 	msr	BASEPRI, r3
 800ee4e:	f3bf 8f6f 	isb	sy
 800ee52:	f3bf 8f4f 	dsb	sy
 800ee56:	603b      	str	r3, [r7, #0]
}
 800ee58:	bf00      	nop
 800ee5a:	e7fe      	b.n	800ee5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ee5c:	f001 f922 	bl	80100a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ee60:	4b39      	ldr	r3, [pc, #228]	; (800ef48 <xTaskResumeAll+0x118>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	3b01      	subs	r3, #1
 800ee66:	4a38      	ldr	r2, [pc, #224]	; (800ef48 <xTaskResumeAll+0x118>)
 800ee68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee6a:	4b37      	ldr	r3, [pc, #220]	; (800ef48 <xTaskResumeAll+0x118>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d162      	bne.n	800ef38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ee72:	4b36      	ldr	r3, [pc, #216]	; (800ef4c <xTaskResumeAll+0x11c>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d05e      	beq.n	800ef38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee7a:	e02f      	b.n	800eedc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee7c:	4b34      	ldr	r3, [pc, #208]	; (800ef50 <xTaskResumeAll+0x120>)
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	3318      	adds	r3, #24
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fe ff97 	bl	800ddbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	3304      	adds	r3, #4
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fe ff92 	bl	800ddbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee9c:	4b2d      	ldr	r3, [pc, #180]	; (800ef54 <xTaskResumeAll+0x124>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d903      	bls.n	800eeac <xTaskResumeAll+0x7c>
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea8:	4a2a      	ldr	r2, [pc, #168]	; (800ef54 <xTaskResumeAll+0x124>)
 800eeaa:	6013      	str	r3, [r2, #0]
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	4413      	add	r3, r2
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	4a27      	ldr	r2, [pc, #156]	; (800ef58 <xTaskResumeAll+0x128>)
 800eeba:	441a      	add	r2, r3
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	3304      	adds	r3, #4
 800eec0:	4619      	mov	r1, r3
 800eec2:	4610      	mov	r0, r2
 800eec4:	f7fe ff1d 	bl	800dd02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eecc:	4b23      	ldr	r3, [pc, #140]	; (800ef5c <xTaskResumeAll+0x12c>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d302      	bcc.n	800eedc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800eed6:	4b22      	ldr	r3, [pc, #136]	; (800ef60 <xTaskResumeAll+0x130>)
 800eed8:	2201      	movs	r2, #1
 800eeda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eedc:	4b1c      	ldr	r3, [pc, #112]	; (800ef50 <xTaskResumeAll+0x120>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d1cb      	bne.n	800ee7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d001      	beq.n	800eeee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eeea:	f000 fb5f 	bl	800f5ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eeee:	4b1d      	ldr	r3, [pc, #116]	; (800ef64 <xTaskResumeAll+0x134>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d010      	beq.n	800ef1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eefa:	f000 f847 	bl	800ef8c <xTaskIncrementTick>
 800eefe:	4603      	mov	r3, r0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d002      	beq.n	800ef0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ef04:	4b16      	ldr	r3, [pc, #88]	; (800ef60 <xTaskResumeAll+0x130>)
 800ef06:	2201      	movs	r2, #1
 800ef08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d1f1      	bne.n	800eefa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ef16:	4b13      	ldr	r3, [pc, #76]	; (800ef64 <xTaskResumeAll+0x134>)
 800ef18:	2200      	movs	r2, #0
 800ef1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ef1c:	4b10      	ldr	r3, [pc, #64]	; (800ef60 <xTaskResumeAll+0x130>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d009      	beq.n	800ef38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ef24:	2301      	movs	r3, #1
 800ef26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ef28:	4b0f      	ldr	r3, [pc, #60]	; (800ef68 <xTaskResumeAll+0x138>)
 800ef2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef2e:	601a      	str	r2, [r3, #0]
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef38:	f001 f8e4 	bl	8010104 <vPortExitCritical>

	return xAlreadyYielded;
 800ef3c:	68bb      	ldr	r3, [r7, #8]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	200012b8 	.word	0x200012b8
 800ef4c:	20001290 	.word	0x20001290
 800ef50:	20001250 	.word	0x20001250
 800ef54:	20001298 	.word	0x20001298
 800ef58:	20000dc0 	.word	0x20000dc0
 800ef5c:	20000dbc 	.word	0x20000dbc
 800ef60:	200012a4 	.word	0x200012a4
 800ef64:	200012a0 	.word	0x200012a0
 800ef68:	e000ed04 	.word	0xe000ed04

0800ef6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ef72:	4b05      	ldr	r3, [pc, #20]	; (800ef88 <xTaskGetTickCount+0x1c>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ef78:	687b      	ldr	r3, [r7, #4]
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	370c      	adds	r7, #12
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr
 800ef86:	bf00      	nop
 800ef88:	20001294 	.word	0x20001294

0800ef8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ef92:	2300      	movs	r3, #0
 800ef94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef96:	4b4f      	ldr	r3, [pc, #316]	; (800f0d4 <xTaskIncrementTick+0x148>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f040 808f 	bne.w	800f0be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800efa0:	4b4d      	ldr	r3, [pc, #308]	; (800f0d8 <xTaskIncrementTick+0x14c>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	3301      	adds	r3, #1
 800efa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800efa8:	4a4b      	ldr	r2, [pc, #300]	; (800f0d8 <xTaskIncrementTick+0x14c>)
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d120      	bne.n	800eff6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800efb4:	4b49      	ldr	r3, [pc, #292]	; (800f0dc <xTaskIncrementTick+0x150>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00a      	beq.n	800efd4 <xTaskIncrementTick+0x48>
	__asm volatile
 800efbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	603b      	str	r3, [r7, #0]
}
 800efd0:	bf00      	nop
 800efd2:	e7fe      	b.n	800efd2 <xTaskIncrementTick+0x46>
 800efd4:	4b41      	ldr	r3, [pc, #260]	; (800f0dc <xTaskIncrementTick+0x150>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	60fb      	str	r3, [r7, #12]
 800efda:	4b41      	ldr	r3, [pc, #260]	; (800f0e0 <xTaskIncrementTick+0x154>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4a3f      	ldr	r2, [pc, #252]	; (800f0dc <xTaskIncrementTick+0x150>)
 800efe0:	6013      	str	r3, [r2, #0]
 800efe2:	4a3f      	ldr	r2, [pc, #252]	; (800f0e0 <xTaskIncrementTick+0x154>)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	4b3e      	ldr	r3, [pc, #248]	; (800f0e4 <xTaskIncrementTick+0x158>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	3301      	adds	r3, #1
 800efee:	4a3d      	ldr	r2, [pc, #244]	; (800f0e4 <xTaskIncrementTick+0x158>)
 800eff0:	6013      	str	r3, [r2, #0]
 800eff2:	f000 fadb 	bl	800f5ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eff6:	4b3c      	ldr	r3, [pc, #240]	; (800f0e8 <xTaskIncrementTick+0x15c>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	693a      	ldr	r2, [r7, #16]
 800effc:	429a      	cmp	r2, r3
 800effe:	d349      	bcc.n	800f094 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f000:	4b36      	ldr	r3, [pc, #216]	; (800f0dc <xTaskIncrementTick+0x150>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d104      	bne.n	800f014 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f00a:	4b37      	ldr	r3, [pc, #220]	; (800f0e8 <xTaskIncrementTick+0x15c>)
 800f00c:	f04f 32ff 	mov.w	r2, #4294967295
 800f010:	601a      	str	r2, [r3, #0]
					break;
 800f012:	e03f      	b.n	800f094 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f014:	4b31      	ldr	r3, [pc, #196]	; (800f0dc <xTaskIncrementTick+0x150>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f024:	693a      	ldr	r2, [r7, #16]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d203      	bcs.n	800f034 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f02c:	4a2e      	ldr	r2, [pc, #184]	; (800f0e8 <xTaskIncrementTick+0x15c>)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f032:	e02f      	b.n	800f094 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	3304      	adds	r3, #4
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fe febf 	bl	800ddbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f042:	2b00      	cmp	r3, #0
 800f044:	d004      	beq.n	800f050 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	3318      	adds	r3, #24
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fe feb6 	bl	800ddbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f054:	4b25      	ldr	r3, [pc, #148]	; (800f0ec <xTaskIncrementTick+0x160>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d903      	bls.n	800f064 <xTaskIncrementTick+0xd8>
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f060:	4a22      	ldr	r2, [pc, #136]	; (800f0ec <xTaskIncrementTick+0x160>)
 800f062:	6013      	str	r3, [r2, #0]
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f068:	4613      	mov	r3, r2
 800f06a:	009b      	lsls	r3, r3, #2
 800f06c:	4413      	add	r3, r2
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	4a1f      	ldr	r2, [pc, #124]	; (800f0f0 <xTaskIncrementTick+0x164>)
 800f072:	441a      	add	r2, r3
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	3304      	adds	r3, #4
 800f078:	4619      	mov	r1, r3
 800f07a:	4610      	mov	r0, r2
 800f07c:	f7fe fe41 	bl	800dd02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f084:	4b1b      	ldr	r3, [pc, #108]	; (800f0f4 <xTaskIncrementTick+0x168>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d3b8      	bcc.n	800f000 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f08e:	2301      	movs	r3, #1
 800f090:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f092:	e7b5      	b.n	800f000 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f094:	4b17      	ldr	r3, [pc, #92]	; (800f0f4 <xTaskIncrementTick+0x168>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f09a:	4915      	ldr	r1, [pc, #84]	; (800f0f0 <xTaskIncrementTick+0x164>)
 800f09c:	4613      	mov	r3, r2
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	4413      	add	r3, r2
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	440b      	add	r3, r1
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d901      	bls.n	800f0b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f0b0:	4b11      	ldr	r3, [pc, #68]	; (800f0f8 <xTaskIncrementTick+0x16c>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d007      	beq.n	800f0c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	617b      	str	r3, [r7, #20]
 800f0bc:	e004      	b.n	800f0c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f0be:	4b0f      	ldr	r3, [pc, #60]	; (800f0fc <xTaskIncrementTick+0x170>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	4a0d      	ldr	r2, [pc, #52]	; (800f0fc <xTaskIncrementTick+0x170>)
 800f0c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f0c8:	697b      	ldr	r3, [r7, #20]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3718      	adds	r7, #24
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	200012b8 	.word	0x200012b8
 800f0d8:	20001294 	.word	0x20001294
 800f0dc:	20001248 	.word	0x20001248
 800f0e0:	2000124c 	.word	0x2000124c
 800f0e4:	200012a8 	.word	0x200012a8
 800f0e8:	200012b0 	.word	0x200012b0
 800f0ec:	20001298 	.word	0x20001298
 800f0f0:	20000dc0 	.word	0x20000dc0
 800f0f4:	20000dbc 	.word	0x20000dbc
 800f0f8:	200012a4 	.word	0x200012a4
 800f0fc:	200012a0 	.word	0x200012a0

0800f100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f106:	4b2a      	ldr	r3, [pc, #168]	; (800f1b0 <vTaskSwitchContext+0xb0>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d003      	beq.n	800f116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f10e:	4b29      	ldr	r3, [pc, #164]	; (800f1b4 <vTaskSwitchContext+0xb4>)
 800f110:	2201      	movs	r2, #1
 800f112:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f114:	e046      	b.n	800f1a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f116:	4b27      	ldr	r3, [pc, #156]	; (800f1b4 <vTaskSwitchContext+0xb4>)
 800f118:	2200      	movs	r2, #0
 800f11a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f11c:	4b26      	ldr	r3, [pc, #152]	; (800f1b8 <vTaskSwitchContext+0xb8>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	60fb      	str	r3, [r7, #12]
 800f122:	e010      	b.n	800f146 <vTaskSwitchContext+0x46>
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d10a      	bne.n	800f140 <vTaskSwitchContext+0x40>
	__asm volatile
 800f12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12e:	f383 8811 	msr	BASEPRI, r3
 800f132:	f3bf 8f6f 	isb	sy
 800f136:	f3bf 8f4f 	dsb	sy
 800f13a:	607b      	str	r3, [r7, #4]
}
 800f13c:	bf00      	nop
 800f13e:	e7fe      	b.n	800f13e <vTaskSwitchContext+0x3e>
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	3b01      	subs	r3, #1
 800f144:	60fb      	str	r3, [r7, #12]
 800f146:	491d      	ldr	r1, [pc, #116]	; (800f1bc <vTaskSwitchContext+0xbc>)
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	4613      	mov	r3, r2
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	4413      	add	r3, r2
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	440b      	add	r3, r1
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d0e4      	beq.n	800f124 <vTaskSwitchContext+0x24>
 800f15a:	68fa      	ldr	r2, [r7, #12]
 800f15c:	4613      	mov	r3, r2
 800f15e:	009b      	lsls	r3, r3, #2
 800f160:	4413      	add	r3, r2
 800f162:	009b      	lsls	r3, r3, #2
 800f164:	4a15      	ldr	r2, [pc, #84]	; (800f1bc <vTaskSwitchContext+0xbc>)
 800f166:	4413      	add	r3, r2
 800f168:	60bb      	str	r3, [r7, #8]
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	685a      	ldr	r2, [r3, #4]
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	605a      	str	r2, [r3, #4]
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	685a      	ldr	r2, [r3, #4]
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	3308      	adds	r3, #8
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d104      	bne.n	800f18a <vTaskSwitchContext+0x8a>
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	685a      	ldr	r2, [r3, #4]
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	605a      	str	r2, [r3, #4]
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	4a0b      	ldr	r2, [pc, #44]	; (800f1c0 <vTaskSwitchContext+0xc0>)
 800f192:	6013      	str	r3, [r2, #0]
 800f194:	4a08      	ldr	r2, [pc, #32]	; (800f1b8 <vTaskSwitchContext+0xb8>)
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f19a:	4b09      	ldr	r3, [pc, #36]	; (800f1c0 <vTaskSwitchContext+0xc0>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	3354      	adds	r3, #84	; 0x54
 800f1a0:	4a08      	ldr	r2, [pc, #32]	; (800f1c4 <vTaskSwitchContext+0xc4>)
 800f1a2:	6013      	str	r3, [r2, #0]
}
 800f1a4:	bf00      	nop
 800f1a6:	3714      	adds	r7, #20
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr
 800f1b0:	200012b8 	.word	0x200012b8
 800f1b4:	200012a4 	.word	0x200012a4
 800f1b8:	20001298 	.word	0x20001298
 800f1bc:	20000dc0 	.word	0x20000dc0
 800f1c0:	20000dbc 	.word	0x20000dbc
 800f1c4:	2000018c 	.word	0x2000018c

0800f1c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10a      	bne.n	800f1ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	60fb      	str	r3, [r7, #12]
}
 800f1ea:	bf00      	nop
 800f1ec:	e7fe      	b.n	800f1ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1ee:	4b07      	ldr	r3, [pc, #28]	; (800f20c <vTaskPlaceOnEventList+0x44>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	3318      	adds	r3, #24
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7fe fda7 	bl	800dd4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f1fc:	2101      	movs	r1, #1
 800f1fe:	6838      	ldr	r0, [r7, #0]
 800f200:	f000 fa80 	bl	800f704 <prvAddCurrentTaskToDelayedList>
}
 800f204:	bf00      	nop
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	20000dbc 	.word	0x20000dbc

0800f210 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f210:	b580      	push	{r7, lr}
 800f212:	b086      	sub	sp, #24
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d10a      	bne.n	800f238 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f226:	f383 8811 	msr	BASEPRI, r3
 800f22a:	f3bf 8f6f 	isb	sy
 800f22e:	f3bf 8f4f 	dsb	sy
 800f232:	617b      	str	r3, [r7, #20]
}
 800f234:	bf00      	nop
 800f236:	e7fe      	b.n	800f236 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f238:	4b0a      	ldr	r3, [pc, #40]	; (800f264 <vTaskPlaceOnEventListRestricted+0x54>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	3318      	adds	r3, #24
 800f23e:	4619      	mov	r1, r3
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f7fe fd5e 	bl	800dd02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f24c:	f04f 33ff 	mov.w	r3, #4294967295
 800f250:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f252:	6879      	ldr	r1, [r7, #4]
 800f254:	68b8      	ldr	r0, [r7, #8]
 800f256:	f000 fa55 	bl	800f704 <prvAddCurrentTaskToDelayedList>
	}
 800f25a:	bf00      	nop
 800f25c:	3718      	adds	r7, #24
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	20000dbc 	.word	0x20000dbc

0800f268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	68db      	ldr	r3, [r3, #12]
 800f274:	68db      	ldr	r3, [r3, #12]
 800f276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d10a      	bne.n	800f294 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f282:	f383 8811 	msr	BASEPRI, r3
 800f286:	f3bf 8f6f 	isb	sy
 800f28a:	f3bf 8f4f 	dsb	sy
 800f28e:	60fb      	str	r3, [r7, #12]
}
 800f290:	bf00      	nop
 800f292:	e7fe      	b.n	800f292 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	3318      	adds	r3, #24
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fe fd8f 	bl	800ddbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f29e:	4b1e      	ldr	r3, [pc, #120]	; (800f318 <xTaskRemoveFromEventList+0xb0>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d11d      	bne.n	800f2e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	3304      	adds	r3, #4
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fe fd86 	bl	800ddbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2b4:	4b19      	ldr	r3, [pc, #100]	; (800f31c <xTaskRemoveFromEventList+0xb4>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d903      	bls.n	800f2c4 <xTaskRemoveFromEventList+0x5c>
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c0:	4a16      	ldr	r2, [pc, #88]	; (800f31c <xTaskRemoveFromEventList+0xb4>)
 800f2c2:	6013      	str	r3, [r2, #0]
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	4413      	add	r3, r2
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	4a13      	ldr	r2, [pc, #76]	; (800f320 <xTaskRemoveFromEventList+0xb8>)
 800f2d2:	441a      	add	r2, r3
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	3304      	adds	r3, #4
 800f2d8:	4619      	mov	r1, r3
 800f2da:	4610      	mov	r0, r2
 800f2dc:	f7fe fd11 	bl	800dd02 <vListInsertEnd>
 800f2e0:	e005      	b.n	800f2ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	3318      	adds	r3, #24
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	480e      	ldr	r0, [pc, #56]	; (800f324 <xTaskRemoveFromEventList+0xbc>)
 800f2ea:	f7fe fd0a 	bl	800dd02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2f2:	4b0d      	ldr	r3, [pc, #52]	; (800f328 <xTaskRemoveFromEventList+0xc0>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d905      	bls.n	800f308 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f300:	4b0a      	ldr	r3, [pc, #40]	; (800f32c <xTaskRemoveFromEventList+0xc4>)
 800f302:	2201      	movs	r2, #1
 800f304:	601a      	str	r2, [r3, #0]
 800f306:	e001      	b.n	800f30c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f308:	2300      	movs	r3, #0
 800f30a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f30c:	697b      	ldr	r3, [r7, #20]
}
 800f30e:	4618      	mov	r0, r3
 800f310:	3718      	adds	r7, #24
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	200012b8 	.word	0x200012b8
 800f31c:	20001298 	.word	0x20001298
 800f320:	20000dc0 	.word	0x20000dc0
 800f324:	20001250 	.word	0x20001250
 800f328:	20000dbc 	.word	0x20000dbc
 800f32c:	200012a4 	.word	0x200012a4

0800f330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f330:	b480      	push	{r7}
 800f332:	b083      	sub	sp, #12
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f338:	4b06      	ldr	r3, [pc, #24]	; (800f354 <vTaskInternalSetTimeOutState+0x24>)
 800f33a:	681a      	ldr	r2, [r3, #0]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f340:	4b05      	ldr	r3, [pc, #20]	; (800f358 <vTaskInternalSetTimeOutState+0x28>)
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	605a      	str	r2, [r3, #4]
}
 800f348:	bf00      	nop
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr
 800f354:	200012a8 	.word	0x200012a8
 800f358:	20001294 	.word	0x20001294

0800f35c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b088      	sub	sp, #32
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d10a      	bne.n	800f382 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f370:	f383 8811 	msr	BASEPRI, r3
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	f3bf 8f4f 	dsb	sy
 800f37c:	613b      	str	r3, [r7, #16]
}
 800f37e:	bf00      	nop
 800f380:	e7fe      	b.n	800f380 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d10a      	bne.n	800f39e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f38c:	f383 8811 	msr	BASEPRI, r3
 800f390:	f3bf 8f6f 	isb	sy
 800f394:	f3bf 8f4f 	dsb	sy
 800f398:	60fb      	str	r3, [r7, #12]
}
 800f39a:	bf00      	nop
 800f39c:	e7fe      	b.n	800f39c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f39e:	f000 fe81 	bl	80100a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f3a2:	4b1d      	ldr	r3, [pc, #116]	; (800f418 <xTaskCheckForTimeOut+0xbc>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	69ba      	ldr	r2, [r7, #24]
 800f3ae:	1ad3      	subs	r3, r2, r3
 800f3b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ba:	d102      	bne.n	800f3c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	61fb      	str	r3, [r7, #28]
 800f3c0:	e023      	b.n	800f40a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	4b15      	ldr	r3, [pc, #84]	; (800f41c <xTaskCheckForTimeOut+0xc0>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d007      	beq.n	800f3de <xTaskCheckForTimeOut+0x82>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	69ba      	ldr	r2, [r7, #24]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d302      	bcc.n	800f3de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	61fb      	str	r3, [r7, #28]
 800f3dc:	e015      	b.n	800f40a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d20b      	bcs.n	800f400 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	1ad2      	subs	r2, r2, r3
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f7ff ff9b 	bl	800f330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	61fb      	str	r3, [r7, #28]
 800f3fe:	e004      	b.n	800f40a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	2200      	movs	r2, #0
 800f404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f406:	2301      	movs	r3, #1
 800f408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f40a:	f000 fe7b 	bl	8010104 <vPortExitCritical>

	return xReturn;
 800f40e:	69fb      	ldr	r3, [r7, #28]
}
 800f410:	4618      	mov	r0, r3
 800f412:	3720      	adds	r7, #32
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}
 800f418:	20001294 	.word	0x20001294
 800f41c:	200012a8 	.word	0x200012a8

0800f420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f420:	b480      	push	{r7}
 800f422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f424:	4b03      	ldr	r3, [pc, #12]	; (800f434 <vTaskMissedYield+0x14>)
 800f426:	2201      	movs	r2, #1
 800f428:	601a      	str	r2, [r3, #0]
}
 800f42a:	bf00      	nop
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr
 800f434:	200012a4 	.word	0x200012a4

0800f438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f440:	f000 f852 	bl	800f4e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f444:	4b06      	ldr	r3, [pc, #24]	; (800f460 <prvIdleTask+0x28>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2b01      	cmp	r3, #1
 800f44a:	d9f9      	bls.n	800f440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f44c:	4b05      	ldr	r3, [pc, #20]	; (800f464 <prvIdleTask+0x2c>)
 800f44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f452:	601a      	str	r2, [r3, #0]
 800f454:	f3bf 8f4f 	dsb	sy
 800f458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f45c:	e7f0      	b.n	800f440 <prvIdleTask+0x8>
 800f45e:	bf00      	nop
 800f460:	20000dc0 	.word	0x20000dc0
 800f464:	e000ed04 	.word	0xe000ed04

0800f468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f46e:	2300      	movs	r3, #0
 800f470:	607b      	str	r3, [r7, #4]
 800f472:	e00c      	b.n	800f48e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	4613      	mov	r3, r2
 800f478:	009b      	lsls	r3, r3, #2
 800f47a:	4413      	add	r3, r2
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	4a12      	ldr	r2, [pc, #72]	; (800f4c8 <prvInitialiseTaskLists+0x60>)
 800f480:	4413      	add	r3, r2
 800f482:	4618      	mov	r0, r3
 800f484:	f7fe fc10 	bl	800dca8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	3301      	adds	r3, #1
 800f48c:	607b      	str	r3, [r7, #4]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2b37      	cmp	r3, #55	; 0x37
 800f492:	d9ef      	bls.n	800f474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f494:	480d      	ldr	r0, [pc, #52]	; (800f4cc <prvInitialiseTaskLists+0x64>)
 800f496:	f7fe fc07 	bl	800dca8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f49a:	480d      	ldr	r0, [pc, #52]	; (800f4d0 <prvInitialiseTaskLists+0x68>)
 800f49c:	f7fe fc04 	bl	800dca8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f4a0:	480c      	ldr	r0, [pc, #48]	; (800f4d4 <prvInitialiseTaskLists+0x6c>)
 800f4a2:	f7fe fc01 	bl	800dca8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f4a6:	480c      	ldr	r0, [pc, #48]	; (800f4d8 <prvInitialiseTaskLists+0x70>)
 800f4a8:	f7fe fbfe 	bl	800dca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f4ac:	480b      	ldr	r0, [pc, #44]	; (800f4dc <prvInitialiseTaskLists+0x74>)
 800f4ae:	f7fe fbfb 	bl	800dca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f4b2:	4b0b      	ldr	r3, [pc, #44]	; (800f4e0 <prvInitialiseTaskLists+0x78>)
 800f4b4:	4a05      	ldr	r2, [pc, #20]	; (800f4cc <prvInitialiseTaskLists+0x64>)
 800f4b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f4b8:	4b0a      	ldr	r3, [pc, #40]	; (800f4e4 <prvInitialiseTaskLists+0x7c>)
 800f4ba:	4a05      	ldr	r2, [pc, #20]	; (800f4d0 <prvInitialiseTaskLists+0x68>)
 800f4bc:	601a      	str	r2, [r3, #0]
}
 800f4be:	bf00      	nop
 800f4c0:	3708      	adds	r7, #8
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	20000dc0 	.word	0x20000dc0
 800f4cc:	20001220 	.word	0x20001220
 800f4d0:	20001234 	.word	0x20001234
 800f4d4:	20001250 	.word	0x20001250
 800f4d8:	20001264 	.word	0x20001264
 800f4dc:	2000127c 	.word	0x2000127c
 800f4e0:	20001248 	.word	0x20001248
 800f4e4:	2000124c 	.word	0x2000124c

0800f4e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f4ee:	e019      	b.n	800f524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f4f0:	f000 fdd8 	bl	80100a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4f4:	4b10      	ldr	r3, [pc, #64]	; (800f538 <prvCheckTasksWaitingTermination+0x50>)
 800f4f6:	68db      	ldr	r3, [r3, #12]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	3304      	adds	r3, #4
 800f500:	4618      	mov	r0, r3
 800f502:	f7fe fc5b 	bl	800ddbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f506:	4b0d      	ldr	r3, [pc, #52]	; (800f53c <prvCheckTasksWaitingTermination+0x54>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	3b01      	subs	r3, #1
 800f50c:	4a0b      	ldr	r2, [pc, #44]	; (800f53c <prvCheckTasksWaitingTermination+0x54>)
 800f50e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f510:	4b0b      	ldr	r3, [pc, #44]	; (800f540 <prvCheckTasksWaitingTermination+0x58>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	3b01      	subs	r3, #1
 800f516:	4a0a      	ldr	r2, [pc, #40]	; (800f540 <prvCheckTasksWaitingTermination+0x58>)
 800f518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f51a:	f000 fdf3 	bl	8010104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f000 f810 	bl	800f544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f524:	4b06      	ldr	r3, [pc, #24]	; (800f540 <prvCheckTasksWaitingTermination+0x58>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d1e1      	bne.n	800f4f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f52c:	bf00      	nop
 800f52e:	bf00      	nop
 800f530:	3708      	adds	r7, #8
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	20001264 	.word	0x20001264
 800f53c:	20001290 	.word	0x20001290
 800f540:	20001278 	.word	0x20001278

0800f544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3354      	adds	r3, #84	; 0x54
 800f550:	4618      	mov	r0, r3
 800f552:	f001 fedd 	bl	8011310 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d108      	bne.n	800f572 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f564:	4618      	mov	r0, r3
 800f566:	f000 ff8b 	bl	8010480 <vPortFree>
				vPortFree( pxTCB );
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 ff88 	bl	8010480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f570:	e018      	b.n	800f5a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d103      	bne.n	800f584 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 ff7f 	bl	8010480 <vPortFree>
	}
 800f582:	e00f      	b.n	800f5a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f58a:	2b02      	cmp	r3, #2
 800f58c:	d00a      	beq.n	800f5a4 <prvDeleteTCB+0x60>
	__asm volatile
 800f58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f592:	f383 8811 	msr	BASEPRI, r3
 800f596:	f3bf 8f6f 	isb	sy
 800f59a:	f3bf 8f4f 	dsb	sy
 800f59e:	60fb      	str	r3, [r7, #12]
}
 800f5a0:	bf00      	nop
 800f5a2:	e7fe      	b.n	800f5a2 <prvDeleteTCB+0x5e>
	}
 800f5a4:	bf00      	nop
 800f5a6:	3710      	adds	r7, #16
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5b2:	4b0c      	ldr	r3, [pc, #48]	; (800f5e4 <prvResetNextTaskUnblockTime+0x38>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d104      	bne.n	800f5c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f5bc:	4b0a      	ldr	r3, [pc, #40]	; (800f5e8 <prvResetNextTaskUnblockTime+0x3c>)
 800f5be:	f04f 32ff 	mov.w	r2, #4294967295
 800f5c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f5c4:	e008      	b.n	800f5d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5c6:	4b07      	ldr	r3, [pc, #28]	; (800f5e4 <prvResetNextTaskUnblockTime+0x38>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	4a04      	ldr	r2, [pc, #16]	; (800f5e8 <prvResetNextTaskUnblockTime+0x3c>)
 800f5d6:	6013      	str	r3, [r2, #0]
}
 800f5d8:	bf00      	nop
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr
 800f5e4:	20001248 	.word	0x20001248
 800f5e8:	200012b0 	.word	0x200012b0

0800f5ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f5f2:	4b0b      	ldr	r3, [pc, #44]	; (800f620 <xTaskGetSchedulerState+0x34>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d102      	bne.n	800f600 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	607b      	str	r3, [r7, #4]
 800f5fe:	e008      	b.n	800f612 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f600:	4b08      	ldr	r3, [pc, #32]	; (800f624 <xTaskGetSchedulerState+0x38>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d102      	bne.n	800f60e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f608:	2302      	movs	r3, #2
 800f60a:	607b      	str	r3, [r7, #4]
 800f60c:	e001      	b.n	800f612 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f60e:	2300      	movs	r3, #0
 800f610:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f612:	687b      	ldr	r3, [r7, #4]
	}
 800f614:	4618      	mov	r0, r3
 800f616:	370c      	adds	r7, #12
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr
 800f620:	2000129c 	.word	0x2000129c
 800f624:	200012b8 	.word	0x200012b8

0800f628 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b086      	sub	sp, #24
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f634:	2300      	movs	r3, #0
 800f636:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d056      	beq.n	800f6ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f63e:	4b2e      	ldr	r3, [pc, #184]	; (800f6f8 <xTaskPriorityDisinherit+0xd0>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	693a      	ldr	r2, [r7, #16]
 800f644:	429a      	cmp	r2, r3
 800f646:	d00a      	beq.n	800f65e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f64c:	f383 8811 	msr	BASEPRI, r3
 800f650:	f3bf 8f6f 	isb	sy
 800f654:	f3bf 8f4f 	dsb	sy
 800f658:	60fb      	str	r3, [r7, #12]
}
 800f65a:	bf00      	nop
 800f65c:	e7fe      	b.n	800f65c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f662:	2b00      	cmp	r3, #0
 800f664:	d10a      	bne.n	800f67c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66a:	f383 8811 	msr	BASEPRI, r3
 800f66e:	f3bf 8f6f 	isb	sy
 800f672:	f3bf 8f4f 	dsb	sy
 800f676:	60bb      	str	r3, [r7, #8]
}
 800f678:	bf00      	nop
 800f67a:	e7fe      	b.n	800f67a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f680:	1e5a      	subs	r2, r3, #1
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f68e:	429a      	cmp	r2, r3
 800f690:	d02c      	beq.n	800f6ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f696:	2b00      	cmp	r3, #0
 800f698:	d128      	bne.n	800f6ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	3304      	adds	r3, #4
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fe fb8c 	bl	800ddbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6bc:	4b0f      	ldr	r3, [pc, #60]	; (800f6fc <xTaskPriorityDisinherit+0xd4>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d903      	bls.n	800f6cc <xTaskPriorityDisinherit+0xa4>
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c8:	4a0c      	ldr	r2, [pc, #48]	; (800f6fc <xTaskPriorityDisinherit+0xd4>)
 800f6ca:	6013      	str	r3, [r2, #0]
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	4413      	add	r3, r2
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	4a09      	ldr	r2, [pc, #36]	; (800f700 <xTaskPriorityDisinherit+0xd8>)
 800f6da:	441a      	add	r2, r3
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	3304      	adds	r3, #4
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	f7fe fb0d 	bl	800dd02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f6ec:	697b      	ldr	r3, [r7, #20]
	}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3718      	adds	r7, #24
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	20000dbc 	.word	0x20000dbc
 800f6fc:	20001298 	.word	0x20001298
 800f700:	20000dc0 	.word	0x20000dc0

0800f704 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b084      	sub	sp, #16
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f70e:	4b21      	ldr	r3, [pc, #132]	; (800f794 <prvAddCurrentTaskToDelayedList+0x90>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f714:	4b20      	ldr	r3, [pc, #128]	; (800f798 <prvAddCurrentTaskToDelayedList+0x94>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	3304      	adds	r3, #4
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7fe fb4e 	bl	800ddbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f726:	d10a      	bne.n	800f73e <prvAddCurrentTaskToDelayedList+0x3a>
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d007      	beq.n	800f73e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f72e:	4b1a      	ldr	r3, [pc, #104]	; (800f798 <prvAddCurrentTaskToDelayedList+0x94>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	3304      	adds	r3, #4
 800f734:	4619      	mov	r1, r3
 800f736:	4819      	ldr	r0, [pc, #100]	; (800f79c <prvAddCurrentTaskToDelayedList+0x98>)
 800f738:	f7fe fae3 	bl	800dd02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f73c:	e026      	b.n	800f78c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f73e:	68fa      	ldr	r2, [r7, #12]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	4413      	add	r3, r2
 800f744:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f746:	4b14      	ldr	r3, [pc, #80]	; (800f798 <prvAddCurrentTaskToDelayedList+0x94>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	68ba      	ldr	r2, [r7, #8]
 800f74c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f74e:	68ba      	ldr	r2, [r7, #8]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	429a      	cmp	r2, r3
 800f754:	d209      	bcs.n	800f76a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f756:	4b12      	ldr	r3, [pc, #72]	; (800f7a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	4b0f      	ldr	r3, [pc, #60]	; (800f798 <prvAddCurrentTaskToDelayedList+0x94>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	3304      	adds	r3, #4
 800f760:	4619      	mov	r1, r3
 800f762:	4610      	mov	r0, r2
 800f764:	f7fe faf1 	bl	800dd4a <vListInsert>
}
 800f768:	e010      	b.n	800f78c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f76a:	4b0e      	ldr	r3, [pc, #56]	; (800f7a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f76c:	681a      	ldr	r2, [r3, #0]
 800f76e:	4b0a      	ldr	r3, [pc, #40]	; (800f798 <prvAddCurrentTaskToDelayedList+0x94>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	3304      	adds	r3, #4
 800f774:	4619      	mov	r1, r3
 800f776:	4610      	mov	r0, r2
 800f778:	f7fe fae7 	bl	800dd4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f77c:	4b0a      	ldr	r3, [pc, #40]	; (800f7a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	68ba      	ldr	r2, [r7, #8]
 800f782:	429a      	cmp	r2, r3
 800f784:	d202      	bcs.n	800f78c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f786:	4a08      	ldr	r2, [pc, #32]	; (800f7a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	6013      	str	r3, [r2, #0]
}
 800f78c:	bf00      	nop
 800f78e:	3710      	adds	r7, #16
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	20001294 	.word	0x20001294
 800f798:	20000dbc 	.word	0x20000dbc
 800f79c:	2000127c 	.word	0x2000127c
 800f7a0:	2000124c 	.word	0x2000124c
 800f7a4:	20001248 	.word	0x20001248
 800f7a8:	200012b0 	.word	0x200012b0

0800f7ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b08a      	sub	sp, #40	; 0x28
 800f7b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f7b6:	f000 fb07 	bl	800fdc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f7ba:	4b1c      	ldr	r3, [pc, #112]	; (800f82c <xTimerCreateTimerTask+0x80>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d021      	beq.n	800f806 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f7ca:	1d3a      	adds	r2, r7, #4
 800f7cc:	f107 0108 	add.w	r1, r7, #8
 800f7d0:	f107 030c 	add.w	r3, r7, #12
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7fe fa4d 	bl	800dc74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f7da:	6879      	ldr	r1, [r7, #4]
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	68fa      	ldr	r2, [r7, #12]
 800f7e0:	9202      	str	r2, [sp, #8]
 800f7e2:	9301      	str	r3, [sp, #4]
 800f7e4:	2302      	movs	r3, #2
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	460a      	mov	r2, r1
 800f7ec:	4910      	ldr	r1, [pc, #64]	; (800f830 <xTimerCreateTimerTask+0x84>)
 800f7ee:	4811      	ldr	r0, [pc, #68]	; (800f834 <xTimerCreateTimerTask+0x88>)
 800f7f0:	f7ff f8b4 	bl	800e95c <xTaskCreateStatic>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	4a10      	ldr	r2, [pc, #64]	; (800f838 <xTimerCreateTimerTask+0x8c>)
 800f7f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f7fa:	4b0f      	ldr	r3, [pc, #60]	; (800f838 <xTimerCreateTimerTask+0x8c>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d001      	beq.n	800f806 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f802:	2301      	movs	r3, #1
 800f804:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d10a      	bne.n	800f822 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f810:	f383 8811 	msr	BASEPRI, r3
 800f814:	f3bf 8f6f 	isb	sy
 800f818:	f3bf 8f4f 	dsb	sy
 800f81c:	613b      	str	r3, [r7, #16]
}
 800f81e:	bf00      	nop
 800f820:	e7fe      	b.n	800f820 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f822:	697b      	ldr	r3, [r7, #20]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3718      	adds	r7, #24
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	200012ec 	.word	0x200012ec
 800f830:	08011ed8 	.word	0x08011ed8
 800f834:	0800f971 	.word	0x0800f971
 800f838:	200012f0 	.word	0x200012f0

0800f83c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b08a      	sub	sp, #40	; 0x28
 800f840:	af00      	add	r7, sp, #0
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	60b9      	str	r1, [r7, #8]
 800f846:	607a      	str	r2, [r7, #4]
 800f848:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f84a:	2300      	movs	r3, #0
 800f84c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d10a      	bne.n	800f86a <xTimerGenericCommand+0x2e>
	__asm volatile
 800f854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f858:	f383 8811 	msr	BASEPRI, r3
 800f85c:	f3bf 8f6f 	isb	sy
 800f860:	f3bf 8f4f 	dsb	sy
 800f864:	623b      	str	r3, [r7, #32]
}
 800f866:	bf00      	nop
 800f868:	e7fe      	b.n	800f868 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f86a:	4b1a      	ldr	r3, [pc, #104]	; (800f8d4 <xTimerGenericCommand+0x98>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d02a      	beq.n	800f8c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	2b05      	cmp	r3, #5
 800f882:	dc18      	bgt.n	800f8b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f884:	f7ff feb2 	bl	800f5ec <xTaskGetSchedulerState>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b02      	cmp	r3, #2
 800f88c:	d109      	bne.n	800f8a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f88e:	4b11      	ldr	r3, [pc, #68]	; (800f8d4 <xTimerGenericCommand+0x98>)
 800f890:	6818      	ldr	r0, [r3, #0]
 800f892:	f107 0110 	add.w	r1, r7, #16
 800f896:	2300      	movs	r3, #0
 800f898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f89a:	f7fe fbf7 	bl	800e08c <xQueueGenericSend>
 800f89e:	6278      	str	r0, [r7, #36]	; 0x24
 800f8a0:	e012      	b.n	800f8c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f8a2:	4b0c      	ldr	r3, [pc, #48]	; (800f8d4 <xTimerGenericCommand+0x98>)
 800f8a4:	6818      	ldr	r0, [r3, #0]
 800f8a6:	f107 0110 	add.w	r1, r7, #16
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	f7fe fbed 	bl	800e08c <xQueueGenericSend>
 800f8b2:	6278      	str	r0, [r7, #36]	; 0x24
 800f8b4:	e008      	b.n	800f8c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f8b6:	4b07      	ldr	r3, [pc, #28]	; (800f8d4 <xTimerGenericCommand+0x98>)
 800f8b8:	6818      	ldr	r0, [r3, #0]
 800f8ba:	f107 0110 	add.w	r1, r7, #16
 800f8be:	2300      	movs	r3, #0
 800f8c0:	683a      	ldr	r2, [r7, #0]
 800f8c2:	f7fe fce1 	bl	800e288 <xQueueGenericSendFromISR>
 800f8c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3728      	adds	r7, #40	; 0x28
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	200012ec 	.word	0x200012ec

0800f8d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b088      	sub	sp, #32
 800f8dc:	af02      	add	r7, sp, #8
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8e2:	4b22      	ldr	r3, [pc, #136]	; (800f96c <prvProcessExpiredTimer+0x94>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	3304      	adds	r3, #4
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7fe fa63 	bl	800ddbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8fc:	f003 0304 	and.w	r3, r3, #4
 800f900:	2b00      	cmp	r3, #0
 800f902:	d022      	beq.n	800f94a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	699a      	ldr	r2, [r3, #24]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	18d1      	adds	r1, r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	683a      	ldr	r2, [r7, #0]
 800f910:	6978      	ldr	r0, [r7, #20]
 800f912:	f000 f8d1 	bl	800fab8 <prvInsertTimerInActiveList>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d01f      	beq.n	800f95c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f91c:	2300      	movs	r3, #0
 800f91e:	9300      	str	r3, [sp, #0]
 800f920:	2300      	movs	r3, #0
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	2100      	movs	r1, #0
 800f926:	6978      	ldr	r0, [r7, #20]
 800f928:	f7ff ff88 	bl	800f83c <xTimerGenericCommand>
 800f92c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d113      	bne.n	800f95c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f938:	f383 8811 	msr	BASEPRI, r3
 800f93c:	f3bf 8f6f 	isb	sy
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	60fb      	str	r3, [r7, #12]
}
 800f946:	bf00      	nop
 800f948:	e7fe      	b.n	800f948 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f950:	f023 0301 	bic.w	r3, r3, #1
 800f954:	b2da      	uxtb	r2, r3
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	6a1b      	ldr	r3, [r3, #32]
 800f960:	6978      	ldr	r0, [r7, #20]
 800f962:	4798      	blx	r3
}
 800f964:	bf00      	nop
 800f966:	3718      	adds	r7, #24
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	200012e4 	.word	0x200012e4

0800f970 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f978:	f107 0308 	add.w	r3, r7, #8
 800f97c:	4618      	mov	r0, r3
 800f97e:	f000 f857 	bl	800fa30 <prvGetNextExpireTime>
 800f982:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	4619      	mov	r1, r3
 800f988:	68f8      	ldr	r0, [r7, #12]
 800f98a:	f000 f803 	bl	800f994 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f98e:	f000 f8d5 	bl	800fb3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f992:	e7f1      	b.n	800f978 <prvTimerTask+0x8>

0800f994 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f99e:	f7ff fa39 	bl	800ee14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9a2:	f107 0308 	add.w	r3, r7, #8
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f000 f866 	bl	800fa78 <prvSampleTimeNow>
 800f9ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d130      	bne.n	800fa16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d10a      	bne.n	800f9d0 <prvProcessTimerOrBlockTask+0x3c>
 800f9ba:	687a      	ldr	r2, [r7, #4]
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d806      	bhi.n	800f9d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f9c2:	f7ff fa35 	bl	800ee30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f9c6:	68f9      	ldr	r1, [r7, #12]
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f7ff ff85 	bl	800f8d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f9ce:	e024      	b.n	800fa1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d008      	beq.n	800f9e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f9d6:	4b13      	ldr	r3, [pc, #76]	; (800fa24 <prvProcessTimerOrBlockTask+0x90>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d101      	bne.n	800f9e4 <prvProcessTimerOrBlockTask+0x50>
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	e000      	b.n	800f9e6 <prvProcessTimerOrBlockTask+0x52>
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f9e8:	4b0f      	ldr	r3, [pc, #60]	; (800fa28 <prvProcessTimerOrBlockTask+0x94>)
 800f9ea:	6818      	ldr	r0, [r3, #0]
 800f9ec:	687a      	ldr	r2, [r7, #4]
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	683a      	ldr	r2, [r7, #0]
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	f7fe ff7d 	bl	800e8f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f9fa:	f7ff fa19 	bl	800ee30 <xTaskResumeAll>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d10a      	bne.n	800fa1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fa04:	4b09      	ldr	r3, [pc, #36]	; (800fa2c <prvProcessTimerOrBlockTask+0x98>)
 800fa06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa0a:	601a      	str	r2, [r3, #0]
 800fa0c:	f3bf 8f4f 	dsb	sy
 800fa10:	f3bf 8f6f 	isb	sy
}
 800fa14:	e001      	b.n	800fa1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fa16:	f7ff fa0b 	bl	800ee30 <xTaskResumeAll>
}
 800fa1a:	bf00      	nop
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	200012e8 	.word	0x200012e8
 800fa28:	200012ec 	.word	0x200012ec
 800fa2c:	e000ed04 	.word	0xe000ed04

0800fa30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fa30:	b480      	push	{r7}
 800fa32:	b085      	sub	sp, #20
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa38:	4b0e      	ldr	r3, [pc, #56]	; (800fa74 <prvGetNextExpireTime+0x44>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d101      	bne.n	800fa46 <prvGetNextExpireTime+0x16>
 800fa42:	2201      	movs	r2, #1
 800fa44:	e000      	b.n	800fa48 <prvGetNextExpireTime+0x18>
 800fa46:	2200      	movs	r2, #0
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d105      	bne.n	800fa60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa54:	4b07      	ldr	r3, [pc, #28]	; (800fa74 <prvGetNextExpireTime+0x44>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	60fb      	str	r3, [r7, #12]
 800fa5e:	e001      	b.n	800fa64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fa60:	2300      	movs	r3, #0
 800fa62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fa64:	68fb      	ldr	r3, [r7, #12]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3714      	adds	r7, #20
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr
 800fa72:	bf00      	nop
 800fa74:	200012e4 	.word	0x200012e4

0800fa78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fa80:	f7ff fa74 	bl	800ef6c <xTaskGetTickCount>
 800fa84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fa86:	4b0b      	ldr	r3, [pc, #44]	; (800fab4 <prvSampleTimeNow+0x3c>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	68fa      	ldr	r2, [r7, #12]
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d205      	bcs.n	800fa9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fa90:	f000 f936 	bl	800fd00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2201      	movs	r2, #1
 800fa98:	601a      	str	r2, [r3, #0]
 800fa9a:	e002      	b.n	800faa2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800faa2:	4a04      	ldr	r2, [pc, #16]	; (800fab4 <prvSampleTimeNow+0x3c>)
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800faa8:	68fb      	ldr	r3, [r7, #12]
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3710      	adds	r7, #16
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}
 800fab2:	bf00      	nop
 800fab4:	200012f4 	.word	0x200012f4

0800fab8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b086      	sub	sp, #24
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
 800fac4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fac6:	2300      	movs	r3, #0
 800fac8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	68ba      	ldr	r2, [r7, #8]
 800face:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fad6:	68ba      	ldr	r2, [r7, #8]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d812      	bhi.n	800fb04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fade:	687a      	ldr	r2, [r7, #4]
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	1ad2      	subs	r2, r2, r3
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	699b      	ldr	r3, [r3, #24]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d302      	bcc.n	800faf2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800faec:	2301      	movs	r3, #1
 800faee:	617b      	str	r3, [r7, #20]
 800faf0:	e01b      	b.n	800fb2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800faf2:	4b10      	ldr	r3, [pc, #64]	; (800fb34 <prvInsertTimerInActiveList+0x7c>)
 800faf4:	681a      	ldr	r2, [r3, #0]
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	3304      	adds	r3, #4
 800fafa:	4619      	mov	r1, r3
 800fafc:	4610      	mov	r0, r2
 800fafe:	f7fe f924 	bl	800dd4a <vListInsert>
 800fb02:	e012      	b.n	800fb2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d206      	bcs.n	800fb1a <prvInsertTimerInActiveList+0x62>
 800fb0c:	68ba      	ldr	r2, [r7, #8]
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d302      	bcc.n	800fb1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fb14:	2301      	movs	r3, #1
 800fb16:	617b      	str	r3, [r7, #20]
 800fb18:	e007      	b.n	800fb2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb1a:	4b07      	ldr	r3, [pc, #28]	; (800fb38 <prvInsertTimerInActiveList+0x80>)
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	3304      	adds	r3, #4
 800fb22:	4619      	mov	r1, r3
 800fb24:	4610      	mov	r0, r2
 800fb26:	f7fe f910 	bl	800dd4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fb2a:	697b      	ldr	r3, [r7, #20]
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3718      	adds	r7, #24
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	200012e8 	.word	0x200012e8
 800fb38:	200012e4 	.word	0x200012e4

0800fb3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b08e      	sub	sp, #56	; 0x38
 800fb40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb42:	e0ca      	b.n	800fcda <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	da18      	bge.n	800fb7c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fb4a:	1d3b      	adds	r3, r7, #4
 800fb4c:	3304      	adds	r3, #4
 800fb4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d10a      	bne.n	800fb6c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5a:	f383 8811 	msr	BASEPRI, r3
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	61fb      	str	r3, [r7, #28]
}
 800fb68:	bf00      	nop
 800fb6a:	e7fe      	b.n	800fb6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb72:	6850      	ldr	r0, [r2, #4]
 800fb74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb76:	6892      	ldr	r2, [r2, #8]
 800fb78:	4611      	mov	r1, r2
 800fb7a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	f2c0 80aa 	blt.w	800fcd8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb8a:	695b      	ldr	r3, [r3, #20]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d004      	beq.n	800fb9a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb92:	3304      	adds	r3, #4
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fe f911 	bl	800ddbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb9a:	463b      	mov	r3, r7
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7ff ff6b 	bl	800fa78 <prvSampleTimeNow>
 800fba2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b09      	cmp	r3, #9
 800fba8:	f200 8097 	bhi.w	800fcda <prvProcessReceivedCommands+0x19e>
 800fbac:	a201      	add	r2, pc, #4	; (adr r2, 800fbb4 <prvProcessReceivedCommands+0x78>)
 800fbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb2:	bf00      	nop
 800fbb4:	0800fbdd 	.word	0x0800fbdd
 800fbb8:	0800fbdd 	.word	0x0800fbdd
 800fbbc:	0800fbdd 	.word	0x0800fbdd
 800fbc0:	0800fc51 	.word	0x0800fc51
 800fbc4:	0800fc65 	.word	0x0800fc65
 800fbc8:	0800fcaf 	.word	0x0800fcaf
 800fbcc:	0800fbdd 	.word	0x0800fbdd
 800fbd0:	0800fbdd 	.word	0x0800fbdd
 800fbd4:	0800fc51 	.word	0x0800fc51
 800fbd8:	0800fc65 	.word	0x0800fc65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbe2:	f043 0301 	orr.w	r3, r3, #1
 800fbe6:	b2da      	uxtb	r2, r3
 800fbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fbee:	68ba      	ldr	r2, [r7, #8]
 800fbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf2:	699b      	ldr	r3, [r3, #24]
 800fbf4:	18d1      	adds	r1, r2, r3
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbfc:	f7ff ff5c 	bl	800fab8 <prvInsertTimerInActiveList>
 800fc00:	4603      	mov	r3, r0
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d069      	beq.n	800fcda <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc08:	6a1b      	ldr	r3, [r3, #32]
 800fc0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc14:	f003 0304 	and.w	r3, r3, #4
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d05e      	beq.n	800fcda <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc20:	699b      	ldr	r3, [r3, #24]
 800fc22:	441a      	add	r2, r3
 800fc24:	2300      	movs	r3, #0
 800fc26:	9300      	str	r3, [sp, #0]
 800fc28:	2300      	movs	r3, #0
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc2e:	f7ff fe05 	bl	800f83c <xTimerGenericCommand>
 800fc32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fc34:	6a3b      	ldr	r3, [r7, #32]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d14f      	bne.n	800fcda <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3e:	f383 8811 	msr	BASEPRI, r3
 800fc42:	f3bf 8f6f 	isb	sy
 800fc46:	f3bf 8f4f 	dsb	sy
 800fc4a:	61bb      	str	r3, [r7, #24]
}
 800fc4c:	bf00      	nop
 800fc4e:	e7fe      	b.n	800fc4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc56:	f023 0301 	bic.w	r3, r3, #1
 800fc5a:	b2da      	uxtb	r2, r3
 800fc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fc62:	e03a      	b.n	800fcda <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc6a:	f043 0301 	orr.w	r3, r3, #1
 800fc6e:	b2da      	uxtb	r2, r3
 800fc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fc76:	68ba      	ldr	r2, [r7, #8]
 800fc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7e:	699b      	ldr	r3, [r3, #24]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d10a      	bne.n	800fc9a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc88:	f383 8811 	msr	BASEPRI, r3
 800fc8c:	f3bf 8f6f 	isb	sy
 800fc90:	f3bf 8f4f 	dsb	sy
 800fc94:	617b      	str	r3, [r7, #20]
}
 800fc96:	bf00      	nop
 800fc98:	e7fe      	b.n	800fc98 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc9c:	699a      	ldr	r2, [r3, #24]
 800fc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca0:	18d1      	adds	r1, r2, r3
 800fca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fca8:	f7ff ff06 	bl	800fab8 <prvInsertTimerInActiveList>
					break;
 800fcac:	e015      	b.n	800fcda <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcb4:	f003 0302 	and.w	r3, r3, #2
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d103      	bne.n	800fcc4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fcbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcbe:	f000 fbdf 	bl	8010480 <vPortFree>
 800fcc2:	e00a      	b.n	800fcda <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcca:	f023 0301 	bic.w	r3, r3, #1
 800fcce:	b2da      	uxtb	r2, r3
 800fcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fcd6:	e000      	b.n	800fcda <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fcd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fcda:	4b08      	ldr	r3, [pc, #32]	; (800fcfc <prvProcessReceivedCommands+0x1c0>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	1d39      	adds	r1, r7, #4
 800fce0:	2200      	movs	r2, #0
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7fe fb6c 	bl	800e3c0 <xQueueReceive>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	f47f af2a 	bne.w	800fb44 <prvProcessReceivedCommands+0x8>
	}
}
 800fcf0:	bf00      	nop
 800fcf2:	bf00      	nop
 800fcf4:	3730      	adds	r7, #48	; 0x30
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	200012ec 	.word	0x200012ec

0800fd00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b088      	sub	sp, #32
 800fd04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd06:	e048      	b.n	800fd9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd08:	4b2d      	ldr	r3, [pc, #180]	; (800fdc0 <prvSwitchTimerLists+0xc0>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd12:	4b2b      	ldr	r3, [pc, #172]	; (800fdc0 <prvSwitchTimerLists+0xc0>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	68db      	ldr	r3, [r3, #12]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	3304      	adds	r3, #4
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fe f84b 	bl	800ddbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	6a1b      	ldr	r3, [r3, #32]
 800fd2a:	68f8      	ldr	r0, [r7, #12]
 800fd2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd34:	f003 0304 	and.w	r3, r3, #4
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d02e      	beq.n	800fd9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	699b      	ldr	r3, [r3, #24]
 800fd40:	693a      	ldr	r2, [r7, #16]
 800fd42:	4413      	add	r3, r2
 800fd44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fd46:	68ba      	ldr	r2, [r7, #8]
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d90e      	bls.n	800fd6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	68ba      	ldr	r2, [r7, #8]
 800fd52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	68fa      	ldr	r2, [r7, #12]
 800fd58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd5a:	4b19      	ldr	r3, [pc, #100]	; (800fdc0 <prvSwitchTimerLists+0xc0>)
 800fd5c:	681a      	ldr	r2, [r3, #0]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	3304      	adds	r3, #4
 800fd62:	4619      	mov	r1, r3
 800fd64:	4610      	mov	r0, r2
 800fd66:	f7fd fff0 	bl	800dd4a <vListInsert>
 800fd6a:	e016      	b.n	800fd9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	9300      	str	r3, [sp, #0]
 800fd70:	2300      	movs	r3, #0
 800fd72:	693a      	ldr	r2, [r7, #16]
 800fd74:	2100      	movs	r1, #0
 800fd76:	68f8      	ldr	r0, [r7, #12]
 800fd78:	f7ff fd60 	bl	800f83c <xTimerGenericCommand>
 800fd7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d10a      	bne.n	800fd9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd88:	f383 8811 	msr	BASEPRI, r3
 800fd8c:	f3bf 8f6f 	isb	sy
 800fd90:	f3bf 8f4f 	dsb	sy
 800fd94:	603b      	str	r3, [r7, #0]
}
 800fd96:	bf00      	nop
 800fd98:	e7fe      	b.n	800fd98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd9a:	4b09      	ldr	r3, [pc, #36]	; (800fdc0 <prvSwitchTimerLists+0xc0>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d1b1      	bne.n	800fd08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fda4:	4b06      	ldr	r3, [pc, #24]	; (800fdc0 <prvSwitchTimerLists+0xc0>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fdaa:	4b06      	ldr	r3, [pc, #24]	; (800fdc4 <prvSwitchTimerLists+0xc4>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	4a04      	ldr	r2, [pc, #16]	; (800fdc0 <prvSwitchTimerLists+0xc0>)
 800fdb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fdb2:	4a04      	ldr	r2, [pc, #16]	; (800fdc4 <prvSwitchTimerLists+0xc4>)
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	6013      	str	r3, [r2, #0]
}
 800fdb8:	bf00      	nop
 800fdba:	3718      	adds	r7, #24
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	200012e4 	.word	0x200012e4
 800fdc4:	200012e8 	.word	0x200012e8

0800fdc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fdce:	f000 f969 	bl	80100a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fdd2:	4b15      	ldr	r3, [pc, #84]	; (800fe28 <prvCheckForValidListAndQueue+0x60>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d120      	bne.n	800fe1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fdda:	4814      	ldr	r0, [pc, #80]	; (800fe2c <prvCheckForValidListAndQueue+0x64>)
 800fddc:	f7fd ff64 	bl	800dca8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fde0:	4813      	ldr	r0, [pc, #76]	; (800fe30 <prvCheckForValidListAndQueue+0x68>)
 800fde2:	f7fd ff61 	bl	800dca8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fde6:	4b13      	ldr	r3, [pc, #76]	; (800fe34 <prvCheckForValidListAndQueue+0x6c>)
 800fde8:	4a10      	ldr	r2, [pc, #64]	; (800fe2c <prvCheckForValidListAndQueue+0x64>)
 800fdea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fdec:	4b12      	ldr	r3, [pc, #72]	; (800fe38 <prvCheckForValidListAndQueue+0x70>)
 800fdee:	4a10      	ldr	r2, [pc, #64]	; (800fe30 <prvCheckForValidListAndQueue+0x68>)
 800fdf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	9300      	str	r3, [sp, #0]
 800fdf6:	4b11      	ldr	r3, [pc, #68]	; (800fe3c <prvCheckForValidListAndQueue+0x74>)
 800fdf8:	4a11      	ldr	r2, [pc, #68]	; (800fe40 <prvCheckForValidListAndQueue+0x78>)
 800fdfa:	2110      	movs	r1, #16
 800fdfc:	200a      	movs	r0, #10
 800fdfe:	f7fe f86f 	bl	800dee0 <xQueueGenericCreateStatic>
 800fe02:	4603      	mov	r3, r0
 800fe04:	4a08      	ldr	r2, [pc, #32]	; (800fe28 <prvCheckForValidListAndQueue+0x60>)
 800fe06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fe08:	4b07      	ldr	r3, [pc, #28]	; (800fe28 <prvCheckForValidListAndQueue+0x60>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d005      	beq.n	800fe1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fe10:	4b05      	ldr	r3, [pc, #20]	; (800fe28 <prvCheckForValidListAndQueue+0x60>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	490b      	ldr	r1, [pc, #44]	; (800fe44 <prvCheckForValidListAndQueue+0x7c>)
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7fe fd42 	bl	800e8a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe1c:	f000 f972 	bl	8010104 <vPortExitCritical>
}
 800fe20:	bf00      	nop
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	200012ec 	.word	0x200012ec
 800fe2c:	200012bc 	.word	0x200012bc
 800fe30:	200012d0 	.word	0x200012d0
 800fe34:	200012e4 	.word	0x200012e4
 800fe38:	200012e8 	.word	0x200012e8
 800fe3c:	20001398 	.word	0x20001398
 800fe40:	200012f8 	.word	0x200012f8
 800fe44:	08011ee0 	.word	0x08011ee0

0800fe48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	60b9      	str	r1, [r7, #8]
 800fe52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	3b04      	subs	r3, #4
 800fe58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fe60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	3b04      	subs	r3, #4
 800fe66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	f023 0201 	bic.w	r2, r3, #1
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	3b04      	subs	r3, #4
 800fe76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fe78:	4a0c      	ldr	r2, [pc, #48]	; (800feac <pxPortInitialiseStack+0x64>)
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	3b14      	subs	r3, #20
 800fe82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	3b04      	subs	r3, #4
 800fe8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f06f 0202 	mvn.w	r2, #2
 800fe96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	3b20      	subs	r3, #32
 800fe9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3714      	adds	r7, #20
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr
 800feac:	0800feb1 	.word	0x0800feb1

0800feb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800feb0:	b480      	push	{r7}
 800feb2:	b085      	sub	sp, #20
 800feb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800feb6:	2300      	movs	r3, #0
 800feb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800feba:	4b12      	ldr	r3, [pc, #72]	; (800ff04 <prvTaskExitError+0x54>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fec2:	d00a      	beq.n	800feda <prvTaskExitError+0x2a>
	__asm volatile
 800fec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec8:	f383 8811 	msr	BASEPRI, r3
 800fecc:	f3bf 8f6f 	isb	sy
 800fed0:	f3bf 8f4f 	dsb	sy
 800fed4:	60fb      	str	r3, [r7, #12]
}
 800fed6:	bf00      	nop
 800fed8:	e7fe      	b.n	800fed8 <prvTaskExitError+0x28>
	__asm volatile
 800feda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fede:	f383 8811 	msr	BASEPRI, r3
 800fee2:	f3bf 8f6f 	isb	sy
 800fee6:	f3bf 8f4f 	dsb	sy
 800feea:	60bb      	str	r3, [r7, #8]
}
 800feec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800feee:	bf00      	nop
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d0fc      	beq.n	800fef0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fef6:	bf00      	nop
 800fef8:	bf00      	nop
 800fefa:	3714      	adds	r7, #20
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr
 800ff04:	20000124 	.word	0x20000124
	...

0800ff10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ff10:	4b07      	ldr	r3, [pc, #28]	; (800ff30 <pxCurrentTCBConst2>)
 800ff12:	6819      	ldr	r1, [r3, #0]
 800ff14:	6808      	ldr	r0, [r1, #0]
 800ff16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff1a:	f380 8809 	msr	PSP, r0
 800ff1e:	f3bf 8f6f 	isb	sy
 800ff22:	f04f 0000 	mov.w	r0, #0
 800ff26:	f380 8811 	msr	BASEPRI, r0
 800ff2a:	4770      	bx	lr
 800ff2c:	f3af 8000 	nop.w

0800ff30 <pxCurrentTCBConst2>:
 800ff30:	20000dbc 	.word	0x20000dbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ff34:	bf00      	nop
 800ff36:	bf00      	nop

0800ff38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ff38:	4808      	ldr	r0, [pc, #32]	; (800ff5c <prvPortStartFirstTask+0x24>)
 800ff3a:	6800      	ldr	r0, [r0, #0]
 800ff3c:	6800      	ldr	r0, [r0, #0]
 800ff3e:	f380 8808 	msr	MSP, r0
 800ff42:	f04f 0000 	mov.w	r0, #0
 800ff46:	f380 8814 	msr	CONTROL, r0
 800ff4a:	b662      	cpsie	i
 800ff4c:	b661      	cpsie	f
 800ff4e:	f3bf 8f4f 	dsb	sy
 800ff52:	f3bf 8f6f 	isb	sy
 800ff56:	df00      	svc	0
 800ff58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ff5a:	bf00      	nop
 800ff5c:	e000ed08 	.word	0xe000ed08

0800ff60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b086      	sub	sp, #24
 800ff64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ff66:	4b46      	ldr	r3, [pc, #280]	; (8010080 <xPortStartScheduler+0x120>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	4a46      	ldr	r2, [pc, #280]	; (8010084 <xPortStartScheduler+0x124>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d10a      	bne.n	800ff86 <xPortStartScheduler+0x26>
	__asm volatile
 800ff70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff74:	f383 8811 	msr	BASEPRI, r3
 800ff78:	f3bf 8f6f 	isb	sy
 800ff7c:	f3bf 8f4f 	dsb	sy
 800ff80:	613b      	str	r3, [r7, #16]
}
 800ff82:	bf00      	nop
 800ff84:	e7fe      	b.n	800ff84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ff86:	4b3e      	ldr	r3, [pc, #248]	; (8010080 <xPortStartScheduler+0x120>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a3f      	ldr	r2, [pc, #252]	; (8010088 <xPortStartScheduler+0x128>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d10a      	bne.n	800ffa6 <xPortStartScheduler+0x46>
	__asm volatile
 800ff90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff94:	f383 8811 	msr	BASEPRI, r3
 800ff98:	f3bf 8f6f 	isb	sy
 800ff9c:	f3bf 8f4f 	dsb	sy
 800ffa0:	60fb      	str	r3, [r7, #12]
}
 800ffa2:	bf00      	nop
 800ffa4:	e7fe      	b.n	800ffa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ffa6:	4b39      	ldr	r3, [pc, #228]	; (801008c <xPortStartScheduler+0x12c>)
 800ffa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	b2db      	uxtb	r3, r3
 800ffb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	22ff      	movs	r2, #255	; 0xff
 800ffb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	b2db      	uxtb	r3, r3
 800ffbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ffc0:	78fb      	ldrb	r3, [r7, #3]
 800ffc2:	b2db      	uxtb	r3, r3
 800ffc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ffc8:	b2da      	uxtb	r2, r3
 800ffca:	4b31      	ldr	r3, [pc, #196]	; (8010090 <xPortStartScheduler+0x130>)
 800ffcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ffce:	4b31      	ldr	r3, [pc, #196]	; (8010094 <xPortStartScheduler+0x134>)
 800ffd0:	2207      	movs	r2, #7
 800ffd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ffd4:	e009      	b.n	800ffea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ffd6:	4b2f      	ldr	r3, [pc, #188]	; (8010094 <xPortStartScheduler+0x134>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	3b01      	subs	r3, #1
 800ffdc:	4a2d      	ldr	r2, [pc, #180]	; (8010094 <xPortStartScheduler+0x134>)
 800ffde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ffe0:	78fb      	ldrb	r3, [r7, #3]
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	005b      	lsls	r3, r3, #1
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ffea:	78fb      	ldrb	r3, [r7, #3]
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fff2:	2b80      	cmp	r3, #128	; 0x80
 800fff4:	d0ef      	beq.n	800ffd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fff6:	4b27      	ldr	r3, [pc, #156]	; (8010094 <xPortStartScheduler+0x134>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f1c3 0307 	rsb	r3, r3, #7
 800fffe:	2b04      	cmp	r3, #4
 8010000:	d00a      	beq.n	8010018 <xPortStartScheduler+0xb8>
	__asm volatile
 8010002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010006:	f383 8811 	msr	BASEPRI, r3
 801000a:	f3bf 8f6f 	isb	sy
 801000e:	f3bf 8f4f 	dsb	sy
 8010012:	60bb      	str	r3, [r7, #8]
}
 8010014:	bf00      	nop
 8010016:	e7fe      	b.n	8010016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010018:	4b1e      	ldr	r3, [pc, #120]	; (8010094 <xPortStartScheduler+0x134>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	021b      	lsls	r3, r3, #8
 801001e:	4a1d      	ldr	r2, [pc, #116]	; (8010094 <xPortStartScheduler+0x134>)
 8010020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010022:	4b1c      	ldr	r3, [pc, #112]	; (8010094 <xPortStartScheduler+0x134>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801002a:	4a1a      	ldr	r2, [pc, #104]	; (8010094 <xPortStartScheduler+0x134>)
 801002c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	b2da      	uxtb	r2, r3
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010036:	4b18      	ldr	r3, [pc, #96]	; (8010098 <xPortStartScheduler+0x138>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	4a17      	ldr	r2, [pc, #92]	; (8010098 <xPortStartScheduler+0x138>)
 801003c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010042:	4b15      	ldr	r3, [pc, #84]	; (8010098 <xPortStartScheduler+0x138>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a14      	ldr	r2, [pc, #80]	; (8010098 <xPortStartScheduler+0x138>)
 8010048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801004c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801004e:	f000 f8dd 	bl	801020c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010052:	4b12      	ldr	r3, [pc, #72]	; (801009c <xPortStartScheduler+0x13c>)
 8010054:	2200      	movs	r2, #0
 8010056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010058:	f000 f8fc 	bl	8010254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801005c:	4b10      	ldr	r3, [pc, #64]	; (80100a0 <xPortStartScheduler+0x140>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a0f      	ldr	r2, [pc, #60]	; (80100a0 <xPortStartScheduler+0x140>)
 8010062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010068:	f7ff ff66 	bl	800ff38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801006c:	f7ff f848 	bl	800f100 <vTaskSwitchContext>
	prvTaskExitError();
 8010070:	f7ff ff1e 	bl	800feb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010074:	2300      	movs	r3, #0
}
 8010076:	4618      	mov	r0, r3
 8010078:	3718      	adds	r7, #24
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	e000ed00 	.word	0xe000ed00
 8010084:	410fc271 	.word	0x410fc271
 8010088:	410fc270 	.word	0x410fc270
 801008c:	e000e400 	.word	0xe000e400
 8010090:	200013e8 	.word	0x200013e8
 8010094:	200013ec 	.word	0x200013ec
 8010098:	e000ed20 	.word	0xe000ed20
 801009c:	20000124 	.word	0x20000124
 80100a0:	e000ef34 	.word	0xe000ef34

080100a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
	__asm volatile
 80100aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ae:	f383 8811 	msr	BASEPRI, r3
 80100b2:	f3bf 8f6f 	isb	sy
 80100b6:	f3bf 8f4f 	dsb	sy
 80100ba:	607b      	str	r3, [r7, #4]
}
 80100bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80100be:	4b0f      	ldr	r3, [pc, #60]	; (80100fc <vPortEnterCritical+0x58>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	3301      	adds	r3, #1
 80100c4:	4a0d      	ldr	r2, [pc, #52]	; (80100fc <vPortEnterCritical+0x58>)
 80100c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80100c8:	4b0c      	ldr	r3, [pc, #48]	; (80100fc <vPortEnterCritical+0x58>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2b01      	cmp	r3, #1
 80100ce:	d10f      	bne.n	80100f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80100d0:	4b0b      	ldr	r3, [pc, #44]	; (8010100 <vPortEnterCritical+0x5c>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d00a      	beq.n	80100f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80100da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100de:	f383 8811 	msr	BASEPRI, r3
 80100e2:	f3bf 8f6f 	isb	sy
 80100e6:	f3bf 8f4f 	dsb	sy
 80100ea:	603b      	str	r3, [r7, #0]
}
 80100ec:	bf00      	nop
 80100ee:	e7fe      	b.n	80100ee <vPortEnterCritical+0x4a>
	}
}
 80100f0:	bf00      	nop
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	20000124 	.word	0x20000124
 8010100:	e000ed04 	.word	0xe000ed04

08010104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801010a:	4b12      	ldr	r3, [pc, #72]	; (8010154 <vPortExitCritical+0x50>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d10a      	bne.n	8010128 <vPortExitCritical+0x24>
	__asm volatile
 8010112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010116:	f383 8811 	msr	BASEPRI, r3
 801011a:	f3bf 8f6f 	isb	sy
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	607b      	str	r3, [r7, #4]
}
 8010124:	bf00      	nop
 8010126:	e7fe      	b.n	8010126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010128:	4b0a      	ldr	r3, [pc, #40]	; (8010154 <vPortExitCritical+0x50>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	3b01      	subs	r3, #1
 801012e:	4a09      	ldr	r2, [pc, #36]	; (8010154 <vPortExitCritical+0x50>)
 8010130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010132:	4b08      	ldr	r3, [pc, #32]	; (8010154 <vPortExitCritical+0x50>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d105      	bne.n	8010146 <vPortExitCritical+0x42>
 801013a:	2300      	movs	r3, #0
 801013c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	f383 8811 	msr	BASEPRI, r3
}
 8010144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010146:	bf00      	nop
 8010148:	370c      	adds	r7, #12
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop
 8010154:	20000124 	.word	0x20000124
	...

08010160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010160:	f3ef 8009 	mrs	r0, PSP
 8010164:	f3bf 8f6f 	isb	sy
 8010168:	4b15      	ldr	r3, [pc, #84]	; (80101c0 <pxCurrentTCBConst>)
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	f01e 0f10 	tst.w	lr, #16
 8010170:	bf08      	it	eq
 8010172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017a:	6010      	str	r0, [r2, #0]
 801017c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010184:	f380 8811 	msr	BASEPRI, r0
 8010188:	f3bf 8f4f 	dsb	sy
 801018c:	f3bf 8f6f 	isb	sy
 8010190:	f7fe ffb6 	bl	800f100 <vTaskSwitchContext>
 8010194:	f04f 0000 	mov.w	r0, #0
 8010198:	f380 8811 	msr	BASEPRI, r0
 801019c:	bc09      	pop	{r0, r3}
 801019e:	6819      	ldr	r1, [r3, #0]
 80101a0:	6808      	ldr	r0, [r1, #0]
 80101a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a6:	f01e 0f10 	tst.w	lr, #16
 80101aa:	bf08      	it	eq
 80101ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80101b0:	f380 8809 	msr	PSP, r0
 80101b4:	f3bf 8f6f 	isb	sy
 80101b8:	4770      	bx	lr
 80101ba:	bf00      	nop
 80101bc:	f3af 8000 	nop.w

080101c0 <pxCurrentTCBConst>:
 80101c0:	20000dbc 	.word	0x20000dbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80101c4:	bf00      	nop
 80101c6:	bf00      	nop

080101c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
	__asm volatile
 80101ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d2:	f383 8811 	msr	BASEPRI, r3
 80101d6:	f3bf 8f6f 	isb	sy
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	607b      	str	r3, [r7, #4]
}
 80101e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80101e2:	f7fe fed3 	bl	800ef8c <xTaskIncrementTick>
 80101e6:	4603      	mov	r3, r0
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d003      	beq.n	80101f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80101ec:	4b06      	ldr	r3, [pc, #24]	; (8010208 <xPortSysTickHandler+0x40>)
 80101ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101f2:	601a      	str	r2, [r3, #0]
 80101f4:	2300      	movs	r3, #0
 80101f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	f383 8811 	msr	BASEPRI, r3
}
 80101fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010200:	bf00      	nop
 8010202:	3708      	adds	r7, #8
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	e000ed04 	.word	0xe000ed04

0801020c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801020c:	b480      	push	{r7}
 801020e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010210:	4b0b      	ldr	r3, [pc, #44]	; (8010240 <vPortSetupTimerInterrupt+0x34>)
 8010212:	2200      	movs	r2, #0
 8010214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010216:	4b0b      	ldr	r3, [pc, #44]	; (8010244 <vPortSetupTimerInterrupt+0x38>)
 8010218:	2200      	movs	r2, #0
 801021a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801021c:	4b0a      	ldr	r3, [pc, #40]	; (8010248 <vPortSetupTimerInterrupt+0x3c>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4a0a      	ldr	r2, [pc, #40]	; (801024c <vPortSetupTimerInterrupt+0x40>)
 8010222:	fba2 2303 	umull	r2, r3, r2, r3
 8010226:	099b      	lsrs	r3, r3, #6
 8010228:	4a09      	ldr	r2, [pc, #36]	; (8010250 <vPortSetupTimerInterrupt+0x44>)
 801022a:	3b01      	subs	r3, #1
 801022c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801022e:	4b04      	ldr	r3, [pc, #16]	; (8010240 <vPortSetupTimerInterrupt+0x34>)
 8010230:	2207      	movs	r2, #7
 8010232:	601a      	str	r2, [r3, #0]
}
 8010234:	bf00      	nop
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr
 801023e:	bf00      	nop
 8010240:	e000e010 	.word	0xe000e010
 8010244:	e000e018 	.word	0xe000e018
 8010248:	2000008c 	.word	0x2000008c
 801024c:	10624dd3 	.word	0x10624dd3
 8010250:	e000e014 	.word	0xe000e014

08010254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010264 <vPortEnableVFP+0x10>
 8010258:	6801      	ldr	r1, [r0, #0]
 801025a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801025e:	6001      	str	r1, [r0, #0]
 8010260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010262:	bf00      	nop
 8010264:	e000ed88 	.word	0xe000ed88

08010268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010268:	b480      	push	{r7}
 801026a:	b085      	sub	sp, #20
 801026c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801026e:	f3ef 8305 	mrs	r3, IPSR
 8010272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2b0f      	cmp	r3, #15
 8010278:	d914      	bls.n	80102a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801027a:	4a17      	ldr	r2, [pc, #92]	; (80102d8 <vPortValidateInterruptPriority+0x70>)
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	4413      	add	r3, r2
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010284:	4b15      	ldr	r3, [pc, #84]	; (80102dc <vPortValidateInterruptPriority+0x74>)
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	7afa      	ldrb	r2, [r7, #11]
 801028a:	429a      	cmp	r2, r3
 801028c:	d20a      	bcs.n	80102a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801028e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010292:	f383 8811 	msr	BASEPRI, r3
 8010296:	f3bf 8f6f 	isb	sy
 801029a:	f3bf 8f4f 	dsb	sy
 801029e:	607b      	str	r3, [r7, #4]
}
 80102a0:	bf00      	nop
 80102a2:	e7fe      	b.n	80102a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80102a4:	4b0e      	ldr	r3, [pc, #56]	; (80102e0 <vPortValidateInterruptPriority+0x78>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80102ac:	4b0d      	ldr	r3, [pc, #52]	; (80102e4 <vPortValidateInterruptPriority+0x7c>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d90a      	bls.n	80102ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80102b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b8:	f383 8811 	msr	BASEPRI, r3
 80102bc:	f3bf 8f6f 	isb	sy
 80102c0:	f3bf 8f4f 	dsb	sy
 80102c4:	603b      	str	r3, [r7, #0]
}
 80102c6:	bf00      	nop
 80102c8:	e7fe      	b.n	80102c8 <vPortValidateInterruptPriority+0x60>
	}
 80102ca:	bf00      	nop
 80102cc:	3714      	adds	r7, #20
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	e000e3f0 	.word	0xe000e3f0
 80102dc:	200013e8 	.word	0x200013e8
 80102e0:	e000ed0c 	.word	0xe000ed0c
 80102e4:	200013ec 	.word	0x200013ec

080102e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b08a      	sub	sp, #40	; 0x28
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80102f0:	2300      	movs	r3, #0
 80102f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80102f4:	f7fe fd8e 	bl	800ee14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80102f8:	4b5b      	ldr	r3, [pc, #364]	; (8010468 <pvPortMalloc+0x180>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d101      	bne.n	8010304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010300:	f000 f920 	bl	8010544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010304:	4b59      	ldr	r3, [pc, #356]	; (801046c <pvPortMalloc+0x184>)
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	4013      	ands	r3, r2
 801030c:	2b00      	cmp	r3, #0
 801030e:	f040 8093 	bne.w	8010438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d01d      	beq.n	8010354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010318:	2208      	movs	r2, #8
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4413      	add	r3, r2
 801031e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f003 0307 	and.w	r3, r3, #7
 8010326:	2b00      	cmp	r3, #0
 8010328:	d014      	beq.n	8010354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f023 0307 	bic.w	r3, r3, #7
 8010330:	3308      	adds	r3, #8
 8010332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f003 0307 	and.w	r3, r3, #7
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00a      	beq.n	8010354 <pvPortMalloc+0x6c>
	__asm volatile
 801033e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010342:	f383 8811 	msr	BASEPRI, r3
 8010346:	f3bf 8f6f 	isb	sy
 801034a:	f3bf 8f4f 	dsb	sy
 801034e:	617b      	str	r3, [r7, #20]
}
 8010350:	bf00      	nop
 8010352:	e7fe      	b.n	8010352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d06e      	beq.n	8010438 <pvPortMalloc+0x150>
 801035a:	4b45      	ldr	r3, [pc, #276]	; (8010470 <pvPortMalloc+0x188>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	429a      	cmp	r2, r3
 8010362:	d869      	bhi.n	8010438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010364:	4b43      	ldr	r3, [pc, #268]	; (8010474 <pvPortMalloc+0x18c>)
 8010366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010368:	4b42      	ldr	r3, [pc, #264]	; (8010474 <pvPortMalloc+0x18c>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801036e:	e004      	b.n	801037a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801037a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	429a      	cmp	r2, r3
 8010382:	d903      	bls.n	801038c <pvPortMalloc+0xa4>
 8010384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d1f1      	bne.n	8010370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801038c:	4b36      	ldr	r3, [pc, #216]	; (8010468 <pvPortMalloc+0x180>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010392:	429a      	cmp	r2, r3
 8010394:	d050      	beq.n	8010438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010396:	6a3b      	ldr	r3, [r7, #32]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	2208      	movs	r2, #8
 801039c:	4413      	add	r3, r2
 801039e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80103a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a2:	681a      	ldr	r2, [r3, #0]
 80103a4:	6a3b      	ldr	r3, [r7, #32]
 80103a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80103a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103aa:	685a      	ldr	r2, [r3, #4]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	1ad2      	subs	r2, r2, r3
 80103b0:	2308      	movs	r3, #8
 80103b2:	005b      	lsls	r3, r3, #1
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d91f      	bls.n	80103f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80103b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	4413      	add	r3, r2
 80103be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80103c0:	69bb      	ldr	r3, [r7, #24]
 80103c2:	f003 0307 	and.w	r3, r3, #7
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d00a      	beq.n	80103e0 <pvPortMalloc+0xf8>
	__asm volatile
 80103ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ce:	f383 8811 	msr	BASEPRI, r3
 80103d2:	f3bf 8f6f 	isb	sy
 80103d6:	f3bf 8f4f 	dsb	sy
 80103da:	613b      	str	r3, [r7, #16]
}
 80103dc:	bf00      	nop
 80103de:	e7fe      	b.n	80103de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80103e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e2:	685a      	ldr	r2, [r3, #4]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	1ad2      	subs	r2, r2, r3
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80103ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80103f2:	69b8      	ldr	r0, [r7, #24]
 80103f4:	f000 f908 	bl	8010608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80103f8:	4b1d      	ldr	r3, [pc, #116]	; (8010470 <pvPortMalloc+0x188>)
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	1ad3      	subs	r3, r2, r3
 8010402:	4a1b      	ldr	r2, [pc, #108]	; (8010470 <pvPortMalloc+0x188>)
 8010404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010406:	4b1a      	ldr	r3, [pc, #104]	; (8010470 <pvPortMalloc+0x188>)
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	4b1b      	ldr	r3, [pc, #108]	; (8010478 <pvPortMalloc+0x190>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	429a      	cmp	r2, r3
 8010410:	d203      	bcs.n	801041a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010412:	4b17      	ldr	r3, [pc, #92]	; (8010470 <pvPortMalloc+0x188>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	4a18      	ldr	r2, [pc, #96]	; (8010478 <pvPortMalloc+0x190>)
 8010418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801041a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041c:	685a      	ldr	r2, [r3, #4]
 801041e:	4b13      	ldr	r3, [pc, #76]	; (801046c <pvPortMalloc+0x184>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	431a      	orrs	r2, r3
 8010424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042a:	2200      	movs	r2, #0
 801042c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801042e:	4b13      	ldr	r3, [pc, #76]	; (801047c <pvPortMalloc+0x194>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	3301      	adds	r3, #1
 8010434:	4a11      	ldr	r2, [pc, #68]	; (801047c <pvPortMalloc+0x194>)
 8010436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010438:	f7fe fcfa 	bl	800ee30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	f003 0307 	and.w	r3, r3, #7
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00a      	beq.n	801045c <pvPortMalloc+0x174>
	__asm volatile
 8010446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801044a:	f383 8811 	msr	BASEPRI, r3
 801044e:	f3bf 8f6f 	isb	sy
 8010452:	f3bf 8f4f 	dsb	sy
 8010456:	60fb      	str	r3, [r7, #12]
}
 8010458:	bf00      	nop
 801045a:	e7fe      	b.n	801045a <pvPortMalloc+0x172>
	return pvReturn;
 801045c:	69fb      	ldr	r3, [r7, #28]
}
 801045e:	4618      	mov	r0, r3
 8010460:	3728      	adds	r7, #40	; 0x28
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
 8010466:	bf00      	nop
 8010468:	20004ff8 	.word	0x20004ff8
 801046c:	2000500c 	.word	0x2000500c
 8010470:	20004ffc 	.word	0x20004ffc
 8010474:	20004ff0 	.word	0x20004ff0
 8010478:	20005000 	.word	0x20005000
 801047c:	20005004 	.word	0x20005004

08010480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b086      	sub	sp, #24
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d04d      	beq.n	801052e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010492:	2308      	movs	r3, #8
 8010494:	425b      	negs	r3, r3
 8010496:	697a      	ldr	r2, [r7, #20]
 8010498:	4413      	add	r3, r2
 801049a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	685a      	ldr	r2, [r3, #4]
 80104a4:	4b24      	ldr	r3, [pc, #144]	; (8010538 <vPortFree+0xb8>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4013      	ands	r3, r2
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d10a      	bne.n	80104c4 <vPortFree+0x44>
	__asm volatile
 80104ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b2:	f383 8811 	msr	BASEPRI, r3
 80104b6:	f3bf 8f6f 	isb	sy
 80104ba:	f3bf 8f4f 	dsb	sy
 80104be:	60fb      	str	r3, [r7, #12]
}
 80104c0:	bf00      	nop
 80104c2:	e7fe      	b.n	80104c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d00a      	beq.n	80104e2 <vPortFree+0x62>
	__asm volatile
 80104cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d0:	f383 8811 	msr	BASEPRI, r3
 80104d4:	f3bf 8f6f 	isb	sy
 80104d8:	f3bf 8f4f 	dsb	sy
 80104dc:	60bb      	str	r3, [r7, #8]
}
 80104de:	bf00      	nop
 80104e0:	e7fe      	b.n	80104e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	685a      	ldr	r2, [r3, #4]
 80104e6:	4b14      	ldr	r3, [pc, #80]	; (8010538 <vPortFree+0xb8>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	4013      	ands	r3, r2
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d01e      	beq.n	801052e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d11a      	bne.n	801052e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	685a      	ldr	r2, [r3, #4]
 80104fc:	4b0e      	ldr	r3, [pc, #56]	; (8010538 <vPortFree+0xb8>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	43db      	mvns	r3, r3
 8010502:	401a      	ands	r2, r3
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010508:	f7fe fc84 	bl	800ee14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	685a      	ldr	r2, [r3, #4]
 8010510:	4b0a      	ldr	r3, [pc, #40]	; (801053c <vPortFree+0xbc>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4413      	add	r3, r2
 8010516:	4a09      	ldr	r2, [pc, #36]	; (801053c <vPortFree+0xbc>)
 8010518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801051a:	6938      	ldr	r0, [r7, #16]
 801051c:	f000 f874 	bl	8010608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010520:	4b07      	ldr	r3, [pc, #28]	; (8010540 <vPortFree+0xc0>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	3301      	adds	r3, #1
 8010526:	4a06      	ldr	r2, [pc, #24]	; (8010540 <vPortFree+0xc0>)
 8010528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801052a:	f7fe fc81 	bl	800ee30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801052e:	bf00      	nop
 8010530:	3718      	adds	r7, #24
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop
 8010538:	2000500c 	.word	0x2000500c
 801053c:	20004ffc 	.word	0x20004ffc
 8010540:	20005008 	.word	0x20005008

08010544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801054a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801054e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010550:	4b27      	ldr	r3, [pc, #156]	; (80105f0 <prvHeapInit+0xac>)
 8010552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f003 0307 	and.w	r3, r3, #7
 801055a:	2b00      	cmp	r3, #0
 801055c:	d00c      	beq.n	8010578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	3307      	adds	r3, #7
 8010562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f023 0307 	bic.w	r3, r3, #7
 801056a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801056c:	68ba      	ldr	r2, [r7, #8]
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	1ad3      	subs	r3, r2, r3
 8010572:	4a1f      	ldr	r2, [pc, #124]	; (80105f0 <prvHeapInit+0xac>)
 8010574:	4413      	add	r3, r2
 8010576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801057c:	4a1d      	ldr	r2, [pc, #116]	; (80105f4 <prvHeapInit+0xb0>)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010582:	4b1c      	ldr	r3, [pc, #112]	; (80105f4 <prvHeapInit+0xb0>)
 8010584:	2200      	movs	r2, #0
 8010586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	68ba      	ldr	r2, [r7, #8]
 801058c:	4413      	add	r3, r2
 801058e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010590:	2208      	movs	r2, #8
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	1a9b      	subs	r3, r3, r2
 8010596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f023 0307 	bic.w	r3, r3, #7
 801059e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	4a15      	ldr	r2, [pc, #84]	; (80105f8 <prvHeapInit+0xb4>)
 80105a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80105a6:	4b14      	ldr	r3, [pc, #80]	; (80105f8 <prvHeapInit+0xb4>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2200      	movs	r2, #0
 80105ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80105ae:	4b12      	ldr	r3, [pc, #72]	; (80105f8 <prvHeapInit+0xb4>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2200      	movs	r2, #0
 80105b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	68fa      	ldr	r2, [r7, #12]
 80105be:	1ad2      	subs	r2, r2, r3
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80105c4:	4b0c      	ldr	r3, [pc, #48]	; (80105f8 <prvHeapInit+0xb4>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	4a0a      	ldr	r2, [pc, #40]	; (80105fc <prvHeapInit+0xb8>)
 80105d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	4a09      	ldr	r2, [pc, #36]	; (8010600 <prvHeapInit+0xbc>)
 80105da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80105dc:	4b09      	ldr	r3, [pc, #36]	; (8010604 <prvHeapInit+0xc0>)
 80105de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80105e2:	601a      	str	r2, [r3, #0]
}
 80105e4:	bf00      	nop
 80105e6:	3714      	adds	r7, #20
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr
 80105f0:	200013f0 	.word	0x200013f0
 80105f4:	20004ff0 	.word	0x20004ff0
 80105f8:	20004ff8 	.word	0x20004ff8
 80105fc:	20005000 	.word	0x20005000
 8010600:	20004ffc 	.word	0x20004ffc
 8010604:	2000500c 	.word	0x2000500c

08010608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010610:	4b28      	ldr	r3, [pc, #160]	; (80106b4 <prvInsertBlockIntoFreeList+0xac>)
 8010612:	60fb      	str	r3, [r7, #12]
 8010614:	e002      	b.n	801061c <prvInsertBlockIntoFreeList+0x14>
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	60fb      	str	r3, [r7, #12]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	687a      	ldr	r2, [r7, #4]
 8010622:	429a      	cmp	r2, r3
 8010624:	d8f7      	bhi.n	8010616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	4413      	add	r3, r2
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	429a      	cmp	r2, r3
 8010636:	d108      	bne.n	801064a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	441a      	add	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	68ba      	ldr	r2, [r7, #8]
 8010654:	441a      	add	r2, r3
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	429a      	cmp	r2, r3
 801065c:	d118      	bne.n	8010690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	4b15      	ldr	r3, [pc, #84]	; (80106b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	429a      	cmp	r2, r3
 8010668:	d00d      	beq.n	8010686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	685a      	ldr	r2, [r3, #4]
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	441a      	add	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	601a      	str	r2, [r3, #0]
 8010684:	e008      	b.n	8010698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010686:	4b0c      	ldr	r3, [pc, #48]	; (80106b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	601a      	str	r2, [r3, #0]
 801068e:	e003      	b.n	8010698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	429a      	cmp	r2, r3
 801069e:	d002      	beq.n	80106a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106a6:	bf00      	nop
 80106a8:	3714      	adds	r7, #20
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	20004ff0 	.word	0x20004ff0
 80106b8:	20004ff8 	.word	0x20004ff8

080106bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80106c0:	2200      	movs	r2, #0
 80106c2:	4912      	ldr	r1, [pc, #72]	; (801070c <MX_USB_DEVICE_Init+0x50>)
 80106c4:	4812      	ldr	r0, [pc, #72]	; (8010710 <MX_USB_DEVICE_Init+0x54>)
 80106c6:	f7fb fd5d 	bl	800c184 <USBD_Init>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d001      	beq.n	80106d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80106d0:	f7f1 fbc8 	bl	8001e64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80106d4:	490f      	ldr	r1, [pc, #60]	; (8010714 <MX_USB_DEVICE_Init+0x58>)
 80106d6:	480e      	ldr	r0, [pc, #56]	; (8010710 <MX_USB_DEVICE_Init+0x54>)
 80106d8:	f7fb fd84 	bl	800c1e4 <USBD_RegisterClass>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80106e2:	f7f1 fbbf 	bl	8001e64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80106e6:	490c      	ldr	r1, [pc, #48]	; (8010718 <MX_USB_DEVICE_Init+0x5c>)
 80106e8:	4809      	ldr	r0, [pc, #36]	; (8010710 <MX_USB_DEVICE_Init+0x54>)
 80106ea:	f7fb fcbb 	bl	800c064 <USBD_CDC_RegisterInterface>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d001      	beq.n	80106f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80106f4:	f7f1 fbb6 	bl	8001e64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80106f8:	4805      	ldr	r0, [pc, #20]	; (8010710 <MX_USB_DEVICE_Init+0x54>)
 80106fa:	f7fb fda9 	bl	800c250 <USBD_Start>
 80106fe:	4603      	mov	r3, r0
 8010700:	2b00      	cmp	r3, #0
 8010702:	d001      	beq.n	8010708 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010704:	f7f1 fbae 	bl	8001e64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010708:	bf00      	nop
 801070a:	bd80      	pop	{r7, pc}
 801070c:	2000013c 	.word	0x2000013c
 8010710:	20005010 	.word	0x20005010
 8010714:	200000a4 	.word	0x200000a4
 8010718:	20000128 	.word	0x20000128

0801071c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010720:	2200      	movs	r2, #0
 8010722:	4905      	ldr	r1, [pc, #20]	; (8010738 <CDC_Init_FS+0x1c>)
 8010724:	4805      	ldr	r0, [pc, #20]	; (801073c <CDC_Init_FS+0x20>)
 8010726:	f7fb fcb7 	bl	800c098 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801072a:	4905      	ldr	r1, [pc, #20]	; (8010740 <CDC_Init_FS+0x24>)
 801072c:	4803      	ldr	r0, [pc, #12]	; (801073c <CDC_Init_FS+0x20>)
 801072e:	f7fb fcd5 	bl	800c0dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010732:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010734:	4618      	mov	r0, r3
 8010736:	bd80      	pop	{r7, pc}
 8010738:	20005aec 	.word	0x20005aec
 801073c:	20005010 	.word	0x20005010
 8010740:	200052ec 	.word	0x200052ec

08010744 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010744:	b480      	push	{r7}
 8010746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010748:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801074a:	4618      	mov	r0, r3
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr

08010754 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	4603      	mov	r3, r0
 801075c:	6039      	str	r1, [r7, #0]
 801075e:	71fb      	strb	r3, [r7, #7]
 8010760:	4613      	mov	r3, r2
 8010762:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010764:	79fb      	ldrb	r3, [r7, #7]
 8010766:	2b23      	cmp	r3, #35	; 0x23
 8010768:	d84a      	bhi.n	8010800 <CDC_Control_FS+0xac>
 801076a:	a201      	add	r2, pc, #4	; (adr r2, 8010770 <CDC_Control_FS+0x1c>)
 801076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010770:	08010801 	.word	0x08010801
 8010774:	08010801 	.word	0x08010801
 8010778:	08010801 	.word	0x08010801
 801077c:	08010801 	.word	0x08010801
 8010780:	08010801 	.word	0x08010801
 8010784:	08010801 	.word	0x08010801
 8010788:	08010801 	.word	0x08010801
 801078c:	08010801 	.word	0x08010801
 8010790:	08010801 	.word	0x08010801
 8010794:	08010801 	.word	0x08010801
 8010798:	08010801 	.word	0x08010801
 801079c:	08010801 	.word	0x08010801
 80107a0:	08010801 	.word	0x08010801
 80107a4:	08010801 	.word	0x08010801
 80107a8:	08010801 	.word	0x08010801
 80107ac:	08010801 	.word	0x08010801
 80107b0:	08010801 	.word	0x08010801
 80107b4:	08010801 	.word	0x08010801
 80107b8:	08010801 	.word	0x08010801
 80107bc:	08010801 	.word	0x08010801
 80107c0:	08010801 	.word	0x08010801
 80107c4:	08010801 	.word	0x08010801
 80107c8:	08010801 	.word	0x08010801
 80107cc:	08010801 	.word	0x08010801
 80107d0:	08010801 	.word	0x08010801
 80107d4:	08010801 	.word	0x08010801
 80107d8:	08010801 	.word	0x08010801
 80107dc:	08010801 	.word	0x08010801
 80107e0:	08010801 	.word	0x08010801
 80107e4:	08010801 	.word	0x08010801
 80107e8:	08010801 	.word	0x08010801
 80107ec:	08010801 	.word	0x08010801
 80107f0:	08010801 	.word	0x08010801
 80107f4:	08010801 	.word	0x08010801
 80107f8:	08010801 	.word	0x08010801
 80107fc:	08010801 	.word	0x08010801
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010800:	bf00      	nop
  }

  return (USBD_OK);
 8010802:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010804:	4618      	mov	r0, r3
 8010806:	370c      	adds	r7, #12
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801081a:	6879      	ldr	r1, [r7, #4]
 801081c:	4805      	ldr	r0, [pc, #20]	; (8010834 <CDC_Receive_FS+0x24>)
 801081e:	f7fb fc5d 	bl	800c0dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010822:	4804      	ldr	r0, [pc, #16]	; (8010834 <CDC_Receive_FS+0x24>)
 8010824:	f7fb fc78 	bl	800c118 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010828:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801082a:	4618      	mov	r0, r3
 801082c:	3708      	adds	r7, #8
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}
 8010832:	bf00      	nop
 8010834:	20005010 	.word	0x20005010

08010838 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010838:	b480      	push	{r7}
 801083a:	b087      	sub	sp, #28
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	4613      	mov	r3, r2
 8010844:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801084a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801084e:	4618      	mov	r0, r3
 8010850:	371c      	adds	r7, #28
 8010852:	46bd      	mov	sp, r7
 8010854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010858:	4770      	bx	lr
	...

0801085c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801085c:	b480      	push	{r7}
 801085e:	b083      	sub	sp, #12
 8010860:	af00      	add	r7, sp, #0
 8010862:	4603      	mov	r3, r0
 8010864:	6039      	str	r1, [r7, #0]
 8010866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	2212      	movs	r2, #18
 801086c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801086e:	4b03      	ldr	r3, [pc, #12]	; (801087c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010870:	4618      	mov	r0, r3
 8010872:	370c      	adds	r7, #12
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	20000158 	.word	0x20000158

08010880 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010880:	b480      	push	{r7}
 8010882:	b083      	sub	sp, #12
 8010884:	af00      	add	r7, sp, #0
 8010886:	4603      	mov	r3, r0
 8010888:	6039      	str	r1, [r7, #0]
 801088a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	2204      	movs	r2, #4
 8010890:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010892:	4b03      	ldr	r3, [pc, #12]	; (80108a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010894:	4618      	mov	r0, r3
 8010896:	370c      	adds	r7, #12
 8010898:	46bd      	mov	sp, r7
 801089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089e:	4770      	bx	lr
 80108a0:	2000016c 	.word	0x2000016c

080108a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	4603      	mov	r3, r0
 80108ac:	6039      	str	r1, [r7, #0]
 80108ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80108b0:	79fb      	ldrb	r3, [r7, #7]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d105      	bne.n	80108c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80108b6:	683a      	ldr	r2, [r7, #0]
 80108b8:	4907      	ldr	r1, [pc, #28]	; (80108d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80108ba:	4808      	ldr	r0, [pc, #32]	; (80108dc <USBD_FS_ProductStrDescriptor+0x38>)
 80108bc:	f7fc fe74 	bl	800d5a8 <USBD_GetString>
 80108c0:	e004      	b.n	80108cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	4904      	ldr	r1, [pc, #16]	; (80108d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80108c6:	4805      	ldr	r0, [pc, #20]	; (80108dc <USBD_FS_ProductStrDescriptor+0x38>)
 80108c8:	f7fc fe6e 	bl	800d5a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80108cc:	4b02      	ldr	r3, [pc, #8]	; (80108d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	200062ec 	.word	0x200062ec
 80108dc:	08011ee8 	.word	0x08011ee8

080108e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	4603      	mov	r3, r0
 80108e8:	6039      	str	r1, [r7, #0]
 80108ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80108ec:	683a      	ldr	r2, [r7, #0]
 80108ee:	4904      	ldr	r1, [pc, #16]	; (8010900 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80108f0:	4804      	ldr	r0, [pc, #16]	; (8010904 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80108f2:	f7fc fe59 	bl	800d5a8 <USBD_GetString>
  return USBD_StrDesc;
 80108f6:	4b02      	ldr	r3, [pc, #8]	; (8010900 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	200062ec 	.word	0x200062ec
 8010904:	08011f00 	.word	0x08011f00

08010908 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
 801090e:	4603      	mov	r3, r0
 8010910:	6039      	str	r1, [r7, #0]
 8010912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	221a      	movs	r2, #26
 8010918:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801091a:	f000 f843 	bl	80109a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801091e:	4b02      	ldr	r3, [pc, #8]	; (8010928 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010920:	4618      	mov	r0, r3
 8010922:	3708      	adds	r7, #8
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}
 8010928:	20000170 	.word	0x20000170

0801092c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
 8010932:	4603      	mov	r3, r0
 8010934:	6039      	str	r1, [r7, #0]
 8010936:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010938:	79fb      	ldrb	r3, [r7, #7]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d105      	bne.n	801094a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801093e:	683a      	ldr	r2, [r7, #0]
 8010940:	4907      	ldr	r1, [pc, #28]	; (8010960 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010942:	4808      	ldr	r0, [pc, #32]	; (8010964 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010944:	f7fc fe30 	bl	800d5a8 <USBD_GetString>
 8010948:	e004      	b.n	8010954 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801094a:	683a      	ldr	r2, [r7, #0]
 801094c:	4904      	ldr	r1, [pc, #16]	; (8010960 <USBD_FS_ConfigStrDescriptor+0x34>)
 801094e:	4805      	ldr	r0, [pc, #20]	; (8010964 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010950:	f7fc fe2a 	bl	800d5a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010954:	4b02      	ldr	r3, [pc, #8]	; (8010960 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010956:	4618      	mov	r0, r3
 8010958:	3708      	adds	r7, #8
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	200062ec 	.word	0x200062ec
 8010964:	08011f14 	.word	0x08011f14

08010968 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	4603      	mov	r3, r0
 8010970:	6039      	str	r1, [r7, #0]
 8010972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010974:	79fb      	ldrb	r3, [r7, #7]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d105      	bne.n	8010986 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801097a:	683a      	ldr	r2, [r7, #0]
 801097c:	4907      	ldr	r1, [pc, #28]	; (801099c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801097e:	4808      	ldr	r0, [pc, #32]	; (80109a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010980:	f7fc fe12 	bl	800d5a8 <USBD_GetString>
 8010984:	e004      	b.n	8010990 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010986:	683a      	ldr	r2, [r7, #0]
 8010988:	4904      	ldr	r1, [pc, #16]	; (801099c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801098a:	4805      	ldr	r0, [pc, #20]	; (80109a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801098c:	f7fc fe0c 	bl	800d5a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010990:	4b02      	ldr	r3, [pc, #8]	; (801099c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010992:	4618      	mov	r0, r3
 8010994:	3708      	adds	r7, #8
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	200062ec 	.word	0x200062ec
 80109a0:	08011f20 	.word	0x08011f20

080109a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80109aa:	4b0f      	ldr	r3, [pc, #60]	; (80109e8 <Get_SerialNum+0x44>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80109b0:	4b0e      	ldr	r3, [pc, #56]	; (80109ec <Get_SerialNum+0x48>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80109b6:	4b0e      	ldr	r3, [pc, #56]	; (80109f0 <Get_SerialNum+0x4c>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80109bc:	68fa      	ldr	r2, [r7, #12]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4413      	add	r3, r2
 80109c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d009      	beq.n	80109de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80109ca:	2208      	movs	r2, #8
 80109cc:	4909      	ldr	r1, [pc, #36]	; (80109f4 <Get_SerialNum+0x50>)
 80109ce:	68f8      	ldr	r0, [r7, #12]
 80109d0:	f000 f814 	bl	80109fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80109d4:	2204      	movs	r2, #4
 80109d6:	4908      	ldr	r1, [pc, #32]	; (80109f8 <Get_SerialNum+0x54>)
 80109d8:	68b8      	ldr	r0, [r7, #8]
 80109da:	f000 f80f 	bl	80109fc <IntToUnicode>
  }
}
 80109de:	bf00      	nop
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	1fff7a10 	.word	0x1fff7a10
 80109ec:	1fff7a14 	.word	0x1fff7a14
 80109f0:	1fff7a18 	.word	0x1fff7a18
 80109f4:	20000172 	.word	0x20000172
 80109f8:	20000182 	.word	0x20000182

080109fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b087      	sub	sp, #28
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	4613      	mov	r3, r2
 8010a08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010a0e:	2300      	movs	r3, #0
 8010a10:	75fb      	strb	r3, [r7, #23]
 8010a12:	e027      	b.n	8010a64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	0f1b      	lsrs	r3, r3, #28
 8010a18:	2b09      	cmp	r3, #9
 8010a1a:	d80b      	bhi.n	8010a34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	0f1b      	lsrs	r3, r3, #28
 8010a20:	b2da      	uxtb	r2, r3
 8010a22:	7dfb      	ldrb	r3, [r7, #23]
 8010a24:	005b      	lsls	r3, r3, #1
 8010a26:	4619      	mov	r1, r3
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	440b      	add	r3, r1
 8010a2c:	3230      	adds	r2, #48	; 0x30
 8010a2e:	b2d2      	uxtb	r2, r2
 8010a30:	701a      	strb	r2, [r3, #0]
 8010a32:	e00a      	b.n	8010a4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	0f1b      	lsrs	r3, r3, #28
 8010a38:	b2da      	uxtb	r2, r3
 8010a3a:	7dfb      	ldrb	r3, [r7, #23]
 8010a3c:	005b      	lsls	r3, r3, #1
 8010a3e:	4619      	mov	r1, r3
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	440b      	add	r3, r1
 8010a44:	3237      	adds	r2, #55	; 0x37
 8010a46:	b2d2      	uxtb	r2, r2
 8010a48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	011b      	lsls	r3, r3, #4
 8010a4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010a50:	7dfb      	ldrb	r3, [r7, #23]
 8010a52:	005b      	lsls	r3, r3, #1
 8010a54:	3301      	adds	r3, #1
 8010a56:	68ba      	ldr	r2, [r7, #8]
 8010a58:	4413      	add	r3, r2
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010a5e:	7dfb      	ldrb	r3, [r7, #23]
 8010a60:	3301      	adds	r3, #1
 8010a62:	75fb      	strb	r3, [r7, #23]
 8010a64:	7dfa      	ldrb	r2, [r7, #23]
 8010a66:	79fb      	ldrb	r3, [r7, #7]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d3d3      	bcc.n	8010a14 <IntToUnicode+0x18>
  }
}
 8010a6c:	bf00      	nop
 8010a6e:	bf00      	nop
 8010a70:	371c      	adds	r7, #28
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr
	...

08010a7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b08a      	sub	sp, #40	; 0x28
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a84:	f107 0314 	add.w	r3, r7, #20
 8010a88:	2200      	movs	r2, #0
 8010a8a:	601a      	str	r2, [r3, #0]
 8010a8c:	605a      	str	r2, [r3, #4]
 8010a8e:	609a      	str	r2, [r3, #8]
 8010a90:	60da      	str	r2, [r3, #12]
 8010a92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010a9c:	d13a      	bne.n	8010b14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	613b      	str	r3, [r7, #16]
 8010aa2:	4b1e      	ldr	r3, [pc, #120]	; (8010b1c <HAL_PCD_MspInit+0xa0>)
 8010aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aa6:	4a1d      	ldr	r2, [pc, #116]	; (8010b1c <HAL_PCD_MspInit+0xa0>)
 8010aa8:	f043 0301 	orr.w	r3, r3, #1
 8010aac:	6313      	str	r3, [r2, #48]	; 0x30
 8010aae:	4b1b      	ldr	r3, [pc, #108]	; (8010b1c <HAL_PCD_MspInit+0xa0>)
 8010ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ab2:	f003 0301 	and.w	r3, r3, #1
 8010ab6:	613b      	str	r3, [r7, #16]
 8010ab8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010aba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ac0:	2302      	movs	r3, #2
 8010ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ac8:	2303      	movs	r3, #3
 8010aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010acc:	230a      	movs	r3, #10
 8010ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ad0:	f107 0314 	add.w	r3, r7, #20
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	4812      	ldr	r0, [pc, #72]	; (8010b20 <HAL_PCD_MspInit+0xa4>)
 8010ad8:	f7f3 fc8c 	bl	80043f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010adc:	4b0f      	ldr	r3, [pc, #60]	; (8010b1c <HAL_PCD_MspInit+0xa0>)
 8010ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ae0:	4a0e      	ldr	r2, [pc, #56]	; (8010b1c <HAL_PCD_MspInit+0xa0>)
 8010ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ae6:	6353      	str	r3, [r2, #52]	; 0x34
 8010ae8:	2300      	movs	r3, #0
 8010aea:	60fb      	str	r3, [r7, #12]
 8010aec:	4b0b      	ldr	r3, [pc, #44]	; (8010b1c <HAL_PCD_MspInit+0xa0>)
 8010aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010af0:	4a0a      	ldr	r2, [pc, #40]	; (8010b1c <HAL_PCD_MspInit+0xa0>)
 8010af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010af6:	6453      	str	r3, [r2, #68]	; 0x44
 8010af8:	4b08      	ldr	r3, [pc, #32]	; (8010b1c <HAL_PCD_MspInit+0xa0>)
 8010afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b00:	60fb      	str	r3, [r7, #12]
 8010b02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010b04:	2200      	movs	r2, #0
 8010b06:	2105      	movs	r1, #5
 8010b08:	2043      	movs	r0, #67	; 0x43
 8010b0a:	f7f2 fef9 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010b0e:	2043      	movs	r0, #67	; 0x43
 8010b10:	f7f2 ff22 	bl	8003958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010b14:	bf00      	nop
 8010b16:	3728      	adds	r7, #40	; 0x28
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}
 8010b1c:	40023800 	.word	0x40023800
 8010b20:	40020000 	.word	0x40020000

08010b24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010b38:	4619      	mov	r1, r3
 8010b3a:	4610      	mov	r0, r2
 8010b3c:	f7fb fbd5 	bl	800c2ea <USBD_LL_SetupStage>
}
 8010b40:	bf00      	nop
 8010b42:	3708      	adds	r7, #8
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}

08010b48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	460b      	mov	r3, r1
 8010b52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010b5a:	78fa      	ldrb	r2, [r7, #3]
 8010b5c:	6879      	ldr	r1, [r7, #4]
 8010b5e:	4613      	mov	r3, r2
 8010b60:	00db      	lsls	r3, r3, #3
 8010b62:	4413      	add	r3, r2
 8010b64:	009b      	lsls	r3, r3, #2
 8010b66:	440b      	add	r3, r1
 8010b68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	78fb      	ldrb	r3, [r7, #3]
 8010b70:	4619      	mov	r1, r3
 8010b72:	f7fb fc0f 	bl	800c394 <USBD_LL_DataOutStage>
}
 8010b76:	bf00      	nop
 8010b78:	3708      	adds	r7, #8
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}

08010b7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b7e:	b580      	push	{r7, lr}
 8010b80:	b082      	sub	sp, #8
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6078      	str	r0, [r7, #4]
 8010b86:	460b      	mov	r3, r1
 8010b88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010b90:	78fa      	ldrb	r2, [r7, #3]
 8010b92:	6879      	ldr	r1, [r7, #4]
 8010b94:	4613      	mov	r3, r2
 8010b96:	00db      	lsls	r3, r3, #3
 8010b98:	4413      	add	r3, r2
 8010b9a:	009b      	lsls	r3, r3, #2
 8010b9c:	440b      	add	r3, r1
 8010b9e:	334c      	adds	r3, #76	; 0x4c
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	78fb      	ldrb	r3, [r7, #3]
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	f7fb fca8 	bl	800c4fa <USBD_LL_DataInStage>
}
 8010baa:	bf00      	nop
 8010bac:	3708      	adds	r7, #8
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b082      	sub	sp, #8
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fb fddc 	bl	800c77e <USBD_LL_SOF>
}
 8010bc6:	bf00      	nop
 8010bc8:	3708      	adds	r7, #8
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b084      	sub	sp, #16
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	2b02      	cmp	r3, #2
 8010be0:	d001      	beq.n	8010be6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010be2:	f7f1 f93f 	bl	8001e64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010bec:	7bfa      	ldrb	r2, [r7, #15]
 8010bee:	4611      	mov	r1, r2
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fb fd86 	bl	800c702 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fb fd2e 	bl	800c65e <USBD_LL_Reset>
}
 8010c02:	bf00      	nop
 8010c04:	3710      	adds	r7, #16
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
	...

08010c0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7fb fd81 	bl	800c722 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	687a      	ldr	r2, [r7, #4]
 8010c2c:	6812      	ldr	r2, [r2, #0]
 8010c2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c32:	f043 0301 	orr.w	r3, r3, #1
 8010c36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6a1b      	ldr	r3, [r3, #32]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d005      	beq.n	8010c4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c40:	4b04      	ldr	r3, [pc, #16]	; (8010c54 <HAL_PCD_SuspendCallback+0x48>)
 8010c42:	691b      	ldr	r3, [r3, #16]
 8010c44:	4a03      	ldr	r2, [pc, #12]	; (8010c54 <HAL_PCD_SuspendCallback+0x48>)
 8010c46:	f043 0306 	orr.w	r3, r3, #6
 8010c4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010c4c:	bf00      	nop
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	e000ed00 	.word	0xe000ed00

08010c58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7fb fd71 	bl	800c74e <USBD_LL_Resume>
}
 8010c6c:	bf00      	nop
 8010c6e:	3708      	adds	r7, #8
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c86:	78fa      	ldrb	r2, [r7, #3]
 8010c88:	4611      	mov	r1, r2
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7fb fdc9 	bl	800c822 <USBD_LL_IsoOUTIncomplete>
}
 8010c90:	bf00      	nop
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	460b      	mov	r3, r1
 8010ca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010caa:	78fa      	ldrb	r2, [r7, #3]
 8010cac:	4611      	mov	r1, r2
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7fb fd85 	bl	800c7be <USBD_LL_IsoINIncomplete>
}
 8010cb4:	bf00      	nop
 8010cb6:	3708      	adds	r7, #8
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7fb fddb 	bl	800c886 <USBD_LL_DevConnected>
}
 8010cd0:	bf00      	nop
 8010cd2:	3708      	adds	r7, #8
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f7fb fdd8 	bl	800c89c <USBD_LL_DevDisconnected>
}
 8010cec:	bf00      	nop
 8010cee:	3708      	adds	r7, #8
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b082      	sub	sp, #8
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d13c      	bne.n	8010d7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010d04:	4a20      	ldr	r2, [pc, #128]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	4a1e      	ldr	r2, [pc, #120]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d10:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010d14:	4b1c      	ldr	r3, [pc, #112]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010d1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010d1c:	4b1a      	ldr	r3, [pc, #104]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d1e:	2204      	movs	r2, #4
 8010d20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010d22:	4b19      	ldr	r3, [pc, #100]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d24:	2202      	movs	r2, #2
 8010d26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010d28:	4b17      	ldr	r3, [pc, #92]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010d2e:	4b16      	ldr	r3, [pc, #88]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d30:	2202      	movs	r2, #2
 8010d32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010d34:	4b14      	ldr	r3, [pc, #80]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d36:	2200      	movs	r2, #0
 8010d38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010d3a:	4b13      	ldr	r3, [pc, #76]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010d40:	4b11      	ldr	r3, [pc, #68]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d42:	2200      	movs	r2, #0
 8010d44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010d46:	4b10      	ldr	r3, [pc, #64]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d48:	2200      	movs	r2, #0
 8010d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010d4c:	4b0e      	ldr	r3, [pc, #56]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d4e:	2200      	movs	r2, #0
 8010d50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010d52:	480d      	ldr	r0, [pc, #52]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d54:	f7f3 fffe 	bl	8004d54 <HAL_PCD_Init>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d001      	beq.n	8010d62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010d5e:	f7f1 f881 	bl	8001e64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010d62:	2180      	movs	r1, #128	; 0x80
 8010d64:	4808      	ldr	r0, [pc, #32]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d66:	f7f5 fa60 	bl	800622a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010d6a:	2240      	movs	r2, #64	; 0x40
 8010d6c:	2100      	movs	r1, #0
 8010d6e:	4806      	ldr	r0, [pc, #24]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d70:	f7f5 fa14 	bl	800619c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010d74:	2280      	movs	r2, #128	; 0x80
 8010d76:	2101      	movs	r1, #1
 8010d78:	4803      	ldr	r0, [pc, #12]	; (8010d88 <USBD_LL_Init+0x94>)
 8010d7a:	f7f5 fa0f 	bl	800619c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010d7e:	2300      	movs	r3, #0
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	200064ec 	.word	0x200064ec

08010d8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d94:	2300      	movs	r3, #0
 8010d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010da2:	4618      	mov	r0, r3
 8010da4:	f7f4 f8fe 	bl	8004fa4 <HAL_PCD_Start>
 8010da8:	4603      	mov	r3, r0
 8010daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010dac:	7bfb      	ldrb	r3, [r7, #15]
 8010dae:	4618      	mov	r0, r3
 8010db0:	f000 f942 	bl	8011038 <USBD_Get_USB_Status>
 8010db4:	4603      	mov	r3, r0
 8010db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3710      	adds	r7, #16
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}

08010dc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010dc2:	b580      	push	{r7, lr}
 8010dc4:	b084      	sub	sp, #16
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
 8010dca:	4608      	mov	r0, r1
 8010dcc:	4611      	mov	r1, r2
 8010dce:	461a      	mov	r2, r3
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	70fb      	strb	r3, [r7, #3]
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	70bb      	strb	r3, [r7, #2]
 8010dd8:	4613      	mov	r3, r2
 8010dda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010de0:	2300      	movs	r3, #0
 8010de2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010dea:	78bb      	ldrb	r3, [r7, #2]
 8010dec:	883a      	ldrh	r2, [r7, #0]
 8010dee:	78f9      	ldrb	r1, [r7, #3]
 8010df0:	f7f4 fdcf 	bl	8005992 <HAL_PCD_EP_Open>
 8010df4:	4603      	mov	r3, r0
 8010df6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010df8:	7bfb      	ldrb	r3, [r7, #15]
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f000 f91c 	bl	8011038 <USBD_Get_USB_Status>
 8010e00:	4603      	mov	r3, r0
 8010e02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3710      	adds	r7, #16
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}

08010e0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b084      	sub	sp, #16
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
 8010e16:	460b      	mov	r3, r1
 8010e18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e28:	78fa      	ldrb	r2, [r7, #3]
 8010e2a:	4611      	mov	r1, r2
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7f4 fe18 	bl	8005a62 <HAL_PCD_EP_Close>
 8010e32:	4603      	mov	r3, r0
 8010e34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e36:	7bfb      	ldrb	r3, [r7, #15]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f000 f8fd 	bl	8011038 <USBD_Get_USB_Status>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e42:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3710      	adds	r7, #16
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b084      	sub	sp, #16
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	460b      	mov	r3, r1
 8010e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e66:	78fa      	ldrb	r2, [r7, #3]
 8010e68:	4611      	mov	r1, r2
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7f4 fef0 	bl	8005c50 <HAL_PCD_EP_SetStall>
 8010e70:	4603      	mov	r3, r0
 8010e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e74:	7bfb      	ldrb	r3, [r7, #15]
 8010e76:	4618      	mov	r0, r3
 8010e78:	f000 f8de 	bl	8011038 <USBD_Get_USB_Status>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3710      	adds	r7, #16
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b084      	sub	sp, #16
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
 8010e92:	460b      	mov	r3, r1
 8010e94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e96:	2300      	movs	r3, #0
 8010e98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010ea4:	78fa      	ldrb	r2, [r7, #3]
 8010ea6:	4611      	mov	r1, r2
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7f4 ff35 	bl	8005d18 <HAL_PCD_EP_ClrStall>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010eb2:	7bfb      	ldrb	r3, [r7, #15]
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f000 f8bf 	bl	8011038 <USBD_Get_USB_Status>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ebe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3710      	adds	r7, #16
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}

08010ec8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ec8:	b480      	push	{r7}
 8010eca:	b085      	sub	sp, #20
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010eda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	da0b      	bge.n	8010efc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010ee4:	78fb      	ldrb	r3, [r7, #3]
 8010ee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010eea:	68f9      	ldr	r1, [r7, #12]
 8010eec:	4613      	mov	r3, r2
 8010eee:	00db      	lsls	r3, r3, #3
 8010ef0:	4413      	add	r3, r2
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	440b      	add	r3, r1
 8010ef6:	333e      	adds	r3, #62	; 0x3e
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	e00b      	b.n	8010f14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010efc:	78fb      	ldrb	r3, [r7, #3]
 8010efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f02:	68f9      	ldr	r1, [r7, #12]
 8010f04:	4613      	mov	r3, r2
 8010f06:	00db      	lsls	r3, r3, #3
 8010f08:	4413      	add	r3, r2
 8010f0a:	009b      	lsls	r3, r3, #2
 8010f0c:	440b      	add	r3, r1
 8010f0e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010f12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3714      	adds	r7, #20
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr

08010f20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	460b      	mov	r3, r1
 8010f2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f30:	2300      	movs	r3, #0
 8010f32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f3a:	78fa      	ldrb	r2, [r7, #3]
 8010f3c:	4611      	mov	r1, r2
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7f4 fd02 	bl	8005948 <HAL_PCD_SetAddress>
 8010f44:	4603      	mov	r3, r0
 8010f46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f48:	7bfb      	ldrb	r3, [r7, #15]
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f000 f874 	bl	8011038 <USBD_Get_USB_Status>
 8010f50:	4603      	mov	r3, r0
 8010f52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}

08010f5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010f5e:	b580      	push	{r7, lr}
 8010f60:	b086      	sub	sp, #24
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	60f8      	str	r0, [r7, #12]
 8010f66:	607a      	str	r2, [r7, #4]
 8010f68:	603b      	str	r3, [r7, #0]
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f72:	2300      	movs	r3, #0
 8010f74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010f7c:	7af9      	ldrb	r1, [r7, #11]
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	f7f4 fe1b 	bl	8005bbc <HAL_PCD_EP_Transmit>
 8010f86:	4603      	mov	r3, r0
 8010f88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f8a:	7dfb      	ldrb	r3, [r7, #23]
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f000 f853 	bl	8011038 <USBD_Get_USB_Status>
 8010f92:	4603      	mov	r3, r0
 8010f94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010f96:	7dbb      	ldrb	r3, [r7, #22]
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3718      	adds	r7, #24
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b086      	sub	sp, #24
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	60f8      	str	r0, [r7, #12]
 8010fa8:	607a      	str	r2, [r7, #4]
 8010faa:	603b      	str	r3, [r7, #0]
 8010fac:	460b      	mov	r3, r1
 8010fae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010fbe:	7af9      	ldrb	r1, [r7, #11]
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	687a      	ldr	r2, [r7, #4]
 8010fc4:	f7f4 fd97 	bl	8005af6 <HAL_PCD_EP_Receive>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fcc:	7dfb      	ldrb	r3, [r7, #23]
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f000 f832 	bl	8011038 <USBD_Get_USB_Status>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010fd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3718      	adds	r7, #24
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}

08010fe2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010fe2:	b580      	push	{r7, lr}
 8010fe4:	b082      	sub	sp, #8
 8010fe6:	af00      	add	r7, sp, #0
 8010fe8:	6078      	str	r0, [r7, #4]
 8010fea:	460b      	mov	r3, r1
 8010fec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010ff4:	78fa      	ldrb	r2, [r7, #3]
 8010ff6:	4611      	mov	r1, r2
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7f4 fdc7 	bl	8005b8c <HAL_PCD_EP_GetRxCount>
 8010ffe:	4603      	mov	r3, r0
}
 8011000:	4618      	mov	r0, r3
 8011002:	3708      	adds	r7, #8
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}

08011008 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011008:	b480      	push	{r7}
 801100a:	b083      	sub	sp, #12
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011010:	4b03      	ldr	r3, [pc, #12]	; (8011020 <USBD_static_malloc+0x18>)
}
 8011012:	4618      	mov	r0, r3
 8011014:	370c      	adds	r7, #12
 8011016:	46bd      	mov	sp, r7
 8011018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101c:	4770      	bx	lr
 801101e:	bf00      	nop
 8011020:	200069f8 	.word	0x200069f8

08011024 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]

}
 801102c:	bf00      	nop
 801102e:	370c      	adds	r7, #12
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011038:	b480      	push	{r7}
 801103a:	b085      	sub	sp, #20
 801103c:	af00      	add	r7, sp, #0
 801103e:	4603      	mov	r3, r0
 8011040:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011042:	2300      	movs	r3, #0
 8011044:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011046:	79fb      	ldrb	r3, [r7, #7]
 8011048:	2b03      	cmp	r3, #3
 801104a:	d817      	bhi.n	801107c <USBD_Get_USB_Status+0x44>
 801104c:	a201      	add	r2, pc, #4	; (adr r2, 8011054 <USBD_Get_USB_Status+0x1c>)
 801104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011052:	bf00      	nop
 8011054:	08011065 	.word	0x08011065
 8011058:	0801106b 	.word	0x0801106b
 801105c:	08011071 	.word	0x08011071
 8011060:	08011077 	.word	0x08011077
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011064:	2300      	movs	r3, #0
 8011066:	73fb      	strb	r3, [r7, #15]
    break;
 8011068:	e00b      	b.n	8011082 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801106a:	2303      	movs	r3, #3
 801106c:	73fb      	strb	r3, [r7, #15]
    break;
 801106e:	e008      	b.n	8011082 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011070:	2301      	movs	r3, #1
 8011072:	73fb      	strb	r3, [r7, #15]
    break;
 8011074:	e005      	b.n	8011082 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011076:	2303      	movs	r3, #3
 8011078:	73fb      	strb	r3, [r7, #15]
    break;
 801107a:	e002      	b.n	8011082 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801107c:	2303      	movs	r3, #3
 801107e:	73fb      	strb	r3, [r7, #15]
    break;
 8011080:	bf00      	nop
  }
  return usb_status;
 8011082:	7bfb      	ldrb	r3, [r7, #15]
}
 8011084:	4618      	mov	r0, r3
 8011086:	3714      	adds	r7, #20
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr

08011090 <__errno>:
 8011090:	4b01      	ldr	r3, [pc, #4]	; (8011098 <__errno+0x8>)
 8011092:	6818      	ldr	r0, [r3, #0]
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop
 8011098:	2000018c 	.word	0x2000018c

0801109c <__libc_init_array>:
 801109c:	b570      	push	{r4, r5, r6, lr}
 801109e:	4d0d      	ldr	r5, [pc, #52]	; (80110d4 <__libc_init_array+0x38>)
 80110a0:	4c0d      	ldr	r4, [pc, #52]	; (80110d8 <__libc_init_array+0x3c>)
 80110a2:	1b64      	subs	r4, r4, r5
 80110a4:	10a4      	asrs	r4, r4, #2
 80110a6:	2600      	movs	r6, #0
 80110a8:	42a6      	cmp	r6, r4
 80110aa:	d109      	bne.n	80110c0 <__libc_init_array+0x24>
 80110ac:	4d0b      	ldr	r5, [pc, #44]	; (80110dc <__libc_init_array+0x40>)
 80110ae:	4c0c      	ldr	r4, [pc, #48]	; (80110e0 <__libc_init_array+0x44>)
 80110b0:	f000 fd08 	bl	8011ac4 <_init>
 80110b4:	1b64      	subs	r4, r4, r5
 80110b6:	10a4      	asrs	r4, r4, #2
 80110b8:	2600      	movs	r6, #0
 80110ba:	42a6      	cmp	r6, r4
 80110bc:	d105      	bne.n	80110ca <__libc_init_array+0x2e>
 80110be:	bd70      	pop	{r4, r5, r6, pc}
 80110c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80110c4:	4798      	blx	r3
 80110c6:	3601      	adds	r6, #1
 80110c8:	e7ee      	b.n	80110a8 <__libc_init_array+0xc>
 80110ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80110ce:	4798      	blx	r3
 80110d0:	3601      	adds	r6, #1
 80110d2:	e7f2      	b.n	80110ba <__libc_init_array+0x1e>
 80110d4:	080141a8 	.word	0x080141a8
 80110d8:	080141a8 	.word	0x080141a8
 80110dc:	080141a8 	.word	0x080141a8
 80110e0:	080141ac 	.word	0x080141ac

080110e4 <__retarget_lock_acquire_recursive>:
 80110e4:	4770      	bx	lr

080110e6 <__retarget_lock_release_recursive>:
 80110e6:	4770      	bx	lr

080110e8 <malloc>:
 80110e8:	4b02      	ldr	r3, [pc, #8]	; (80110f4 <malloc+0xc>)
 80110ea:	4601      	mov	r1, r0
 80110ec:	6818      	ldr	r0, [r3, #0]
 80110ee:	f000 b88d 	b.w	801120c <_malloc_r>
 80110f2:	bf00      	nop
 80110f4:	2000018c 	.word	0x2000018c

080110f8 <free>:
 80110f8:	4b02      	ldr	r3, [pc, #8]	; (8011104 <free+0xc>)
 80110fa:	4601      	mov	r1, r0
 80110fc:	6818      	ldr	r0, [r3, #0]
 80110fe:	f000 b819 	b.w	8011134 <_free_r>
 8011102:	bf00      	nop
 8011104:	2000018c 	.word	0x2000018c

08011108 <memcpy>:
 8011108:	440a      	add	r2, r1
 801110a:	4291      	cmp	r1, r2
 801110c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011110:	d100      	bne.n	8011114 <memcpy+0xc>
 8011112:	4770      	bx	lr
 8011114:	b510      	push	{r4, lr}
 8011116:	f811 4b01 	ldrb.w	r4, [r1], #1
 801111a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801111e:	4291      	cmp	r1, r2
 8011120:	d1f9      	bne.n	8011116 <memcpy+0xe>
 8011122:	bd10      	pop	{r4, pc}

08011124 <memset>:
 8011124:	4402      	add	r2, r0
 8011126:	4603      	mov	r3, r0
 8011128:	4293      	cmp	r3, r2
 801112a:	d100      	bne.n	801112e <memset+0xa>
 801112c:	4770      	bx	lr
 801112e:	f803 1b01 	strb.w	r1, [r3], #1
 8011132:	e7f9      	b.n	8011128 <memset+0x4>

08011134 <_free_r>:
 8011134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011136:	2900      	cmp	r1, #0
 8011138:	d044      	beq.n	80111c4 <_free_r+0x90>
 801113a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801113e:	9001      	str	r0, [sp, #4]
 8011140:	2b00      	cmp	r3, #0
 8011142:	f1a1 0404 	sub.w	r4, r1, #4
 8011146:	bfb8      	it	lt
 8011148:	18e4      	addlt	r4, r4, r3
 801114a:	f000 f96d 	bl	8011428 <__malloc_lock>
 801114e:	4a1e      	ldr	r2, [pc, #120]	; (80111c8 <_free_r+0x94>)
 8011150:	9801      	ldr	r0, [sp, #4]
 8011152:	6813      	ldr	r3, [r2, #0]
 8011154:	b933      	cbnz	r3, 8011164 <_free_r+0x30>
 8011156:	6063      	str	r3, [r4, #4]
 8011158:	6014      	str	r4, [r2, #0]
 801115a:	b003      	add	sp, #12
 801115c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011160:	f000 b968 	b.w	8011434 <__malloc_unlock>
 8011164:	42a3      	cmp	r3, r4
 8011166:	d908      	bls.n	801117a <_free_r+0x46>
 8011168:	6825      	ldr	r5, [r4, #0]
 801116a:	1961      	adds	r1, r4, r5
 801116c:	428b      	cmp	r3, r1
 801116e:	bf01      	itttt	eq
 8011170:	6819      	ldreq	r1, [r3, #0]
 8011172:	685b      	ldreq	r3, [r3, #4]
 8011174:	1949      	addeq	r1, r1, r5
 8011176:	6021      	streq	r1, [r4, #0]
 8011178:	e7ed      	b.n	8011156 <_free_r+0x22>
 801117a:	461a      	mov	r2, r3
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	b10b      	cbz	r3, 8011184 <_free_r+0x50>
 8011180:	42a3      	cmp	r3, r4
 8011182:	d9fa      	bls.n	801117a <_free_r+0x46>
 8011184:	6811      	ldr	r1, [r2, #0]
 8011186:	1855      	adds	r5, r2, r1
 8011188:	42a5      	cmp	r5, r4
 801118a:	d10b      	bne.n	80111a4 <_free_r+0x70>
 801118c:	6824      	ldr	r4, [r4, #0]
 801118e:	4421      	add	r1, r4
 8011190:	1854      	adds	r4, r2, r1
 8011192:	42a3      	cmp	r3, r4
 8011194:	6011      	str	r1, [r2, #0]
 8011196:	d1e0      	bne.n	801115a <_free_r+0x26>
 8011198:	681c      	ldr	r4, [r3, #0]
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	6053      	str	r3, [r2, #4]
 801119e:	4421      	add	r1, r4
 80111a0:	6011      	str	r1, [r2, #0]
 80111a2:	e7da      	b.n	801115a <_free_r+0x26>
 80111a4:	d902      	bls.n	80111ac <_free_r+0x78>
 80111a6:	230c      	movs	r3, #12
 80111a8:	6003      	str	r3, [r0, #0]
 80111aa:	e7d6      	b.n	801115a <_free_r+0x26>
 80111ac:	6825      	ldr	r5, [r4, #0]
 80111ae:	1961      	adds	r1, r4, r5
 80111b0:	428b      	cmp	r3, r1
 80111b2:	bf04      	itt	eq
 80111b4:	6819      	ldreq	r1, [r3, #0]
 80111b6:	685b      	ldreq	r3, [r3, #4]
 80111b8:	6063      	str	r3, [r4, #4]
 80111ba:	bf04      	itt	eq
 80111bc:	1949      	addeq	r1, r1, r5
 80111be:	6021      	streq	r1, [r4, #0]
 80111c0:	6054      	str	r4, [r2, #4]
 80111c2:	e7ca      	b.n	801115a <_free_r+0x26>
 80111c4:	b003      	add	sp, #12
 80111c6:	bd30      	pop	{r4, r5, pc}
 80111c8:	20006c1c 	.word	0x20006c1c

080111cc <sbrk_aligned>:
 80111cc:	b570      	push	{r4, r5, r6, lr}
 80111ce:	4e0e      	ldr	r6, [pc, #56]	; (8011208 <sbrk_aligned+0x3c>)
 80111d0:	460c      	mov	r4, r1
 80111d2:	6831      	ldr	r1, [r6, #0]
 80111d4:	4605      	mov	r5, r0
 80111d6:	b911      	cbnz	r1, 80111de <sbrk_aligned+0x12>
 80111d8:	f000 f8f6 	bl	80113c8 <_sbrk_r>
 80111dc:	6030      	str	r0, [r6, #0]
 80111de:	4621      	mov	r1, r4
 80111e0:	4628      	mov	r0, r5
 80111e2:	f000 f8f1 	bl	80113c8 <_sbrk_r>
 80111e6:	1c43      	adds	r3, r0, #1
 80111e8:	d00a      	beq.n	8011200 <sbrk_aligned+0x34>
 80111ea:	1cc4      	adds	r4, r0, #3
 80111ec:	f024 0403 	bic.w	r4, r4, #3
 80111f0:	42a0      	cmp	r0, r4
 80111f2:	d007      	beq.n	8011204 <sbrk_aligned+0x38>
 80111f4:	1a21      	subs	r1, r4, r0
 80111f6:	4628      	mov	r0, r5
 80111f8:	f000 f8e6 	bl	80113c8 <_sbrk_r>
 80111fc:	3001      	adds	r0, #1
 80111fe:	d101      	bne.n	8011204 <sbrk_aligned+0x38>
 8011200:	f04f 34ff 	mov.w	r4, #4294967295
 8011204:	4620      	mov	r0, r4
 8011206:	bd70      	pop	{r4, r5, r6, pc}
 8011208:	20006c20 	.word	0x20006c20

0801120c <_malloc_r>:
 801120c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011210:	1ccd      	adds	r5, r1, #3
 8011212:	f025 0503 	bic.w	r5, r5, #3
 8011216:	3508      	adds	r5, #8
 8011218:	2d0c      	cmp	r5, #12
 801121a:	bf38      	it	cc
 801121c:	250c      	movcc	r5, #12
 801121e:	2d00      	cmp	r5, #0
 8011220:	4607      	mov	r7, r0
 8011222:	db01      	blt.n	8011228 <_malloc_r+0x1c>
 8011224:	42a9      	cmp	r1, r5
 8011226:	d905      	bls.n	8011234 <_malloc_r+0x28>
 8011228:	230c      	movs	r3, #12
 801122a:	603b      	str	r3, [r7, #0]
 801122c:	2600      	movs	r6, #0
 801122e:	4630      	mov	r0, r6
 8011230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011234:	4e2e      	ldr	r6, [pc, #184]	; (80112f0 <_malloc_r+0xe4>)
 8011236:	f000 f8f7 	bl	8011428 <__malloc_lock>
 801123a:	6833      	ldr	r3, [r6, #0]
 801123c:	461c      	mov	r4, r3
 801123e:	bb34      	cbnz	r4, 801128e <_malloc_r+0x82>
 8011240:	4629      	mov	r1, r5
 8011242:	4638      	mov	r0, r7
 8011244:	f7ff ffc2 	bl	80111cc <sbrk_aligned>
 8011248:	1c43      	adds	r3, r0, #1
 801124a:	4604      	mov	r4, r0
 801124c:	d14d      	bne.n	80112ea <_malloc_r+0xde>
 801124e:	6834      	ldr	r4, [r6, #0]
 8011250:	4626      	mov	r6, r4
 8011252:	2e00      	cmp	r6, #0
 8011254:	d140      	bne.n	80112d8 <_malloc_r+0xcc>
 8011256:	6823      	ldr	r3, [r4, #0]
 8011258:	4631      	mov	r1, r6
 801125a:	4638      	mov	r0, r7
 801125c:	eb04 0803 	add.w	r8, r4, r3
 8011260:	f000 f8b2 	bl	80113c8 <_sbrk_r>
 8011264:	4580      	cmp	r8, r0
 8011266:	d13a      	bne.n	80112de <_malloc_r+0xd2>
 8011268:	6821      	ldr	r1, [r4, #0]
 801126a:	3503      	adds	r5, #3
 801126c:	1a6d      	subs	r5, r5, r1
 801126e:	f025 0503 	bic.w	r5, r5, #3
 8011272:	3508      	adds	r5, #8
 8011274:	2d0c      	cmp	r5, #12
 8011276:	bf38      	it	cc
 8011278:	250c      	movcc	r5, #12
 801127a:	4629      	mov	r1, r5
 801127c:	4638      	mov	r0, r7
 801127e:	f7ff ffa5 	bl	80111cc <sbrk_aligned>
 8011282:	3001      	adds	r0, #1
 8011284:	d02b      	beq.n	80112de <_malloc_r+0xd2>
 8011286:	6823      	ldr	r3, [r4, #0]
 8011288:	442b      	add	r3, r5
 801128a:	6023      	str	r3, [r4, #0]
 801128c:	e00e      	b.n	80112ac <_malloc_r+0xa0>
 801128e:	6822      	ldr	r2, [r4, #0]
 8011290:	1b52      	subs	r2, r2, r5
 8011292:	d41e      	bmi.n	80112d2 <_malloc_r+0xc6>
 8011294:	2a0b      	cmp	r2, #11
 8011296:	d916      	bls.n	80112c6 <_malloc_r+0xba>
 8011298:	1961      	adds	r1, r4, r5
 801129a:	42a3      	cmp	r3, r4
 801129c:	6025      	str	r5, [r4, #0]
 801129e:	bf18      	it	ne
 80112a0:	6059      	strne	r1, [r3, #4]
 80112a2:	6863      	ldr	r3, [r4, #4]
 80112a4:	bf08      	it	eq
 80112a6:	6031      	streq	r1, [r6, #0]
 80112a8:	5162      	str	r2, [r4, r5]
 80112aa:	604b      	str	r3, [r1, #4]
 80112ac:	4638      	mov	r0, r7
 80112ae:	f104 060b 	add.w	r6, r4, #11
 80112b2:	f000 f8bf 	bl	8011434 <__malloc_unlock>
 80112b6:	f026 0607 	bic.w	r6, r6, #7
 80112ba:	1d23      	adds	r3, r4, #4
 80112bc:	1af2      	subs	r2, r6, r3
 80112be:	d0b6      	beq.n	801122e <_malloc_r+0x22>
 80112c0:	1b9b      	subs	r3, r3, r6
 80112c2:	50a3      	str	r3, [r4, r2]
 80112c4:	e7b3      	b.n	801122e <_malloc_r+0x22>
 80112c6:	6862      	ldr	r2, [r4, #4]
 80112c8:	42a3      	cmp	r3, r4
 80112ca:	bf0c      	ite	eq
 80112cc:	6032      	streq	r2, [r6, #0]
 80112ce:	605a      	strne	r2, [r3, #4]
 80112d0:	e7ec      	b.n	80112ac <_malloc_r+0xa0>
 80112d2:	4623      	mov	r3, r4
 80112d4:	6864      	ldr	r4, [r4, #4]
 80112d6:	e7b2      	b.n	801123e <_malloc_r+0x32>
 80112d8:	4634      	mov	r4, r6
 80112da:	6876      	ldr	r6, [r6, #4]
 80112dc:	e7b9      	b.n	8011252 <_malloc_r+0x46>
 80112de:	230c      	movs	r3, #12
 80112e0:	603b      	str	r3, [r7, #0]
 80112e2:	4638      	mov	r0, r7
 80112e4:	f000 f8a6 	bl	8011434 <__malloc_unlock>
 80112e8:	e7a1      	b.n	801122e <_malloc_r+0x22>
 80112ea:	6025      	str	r5, [r4, #0]
 80112ec:	e7de      	b.n	80112ac <_malloc_r+0xa0>
 80112ee:	bf00      	nop
 80112f0:	20006c1c 	.word	0x20006c1c

080112f4 <cleanup_glue>:
 80112f4:	b538      	push	{r3, r4, r5, lr}
 80112f6:	460c      	mov	r4, r1
 80112f8:	6809      	ldr	r1, [r1, #0]
 80112fa:	4605      	mov	r5, r0
 80112fc:	b109      	cbz	r1, 8011302 <cleanup_glue+0xe>
 80112fe:	f7ff fff9 	bl	80112f4 <cleanup_glue>
 8011302:	4621      	mov	r1, r4
 8011304:	4628      	mov	r0, r5
 8011306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801130a:	f7ff bf13 	b.w	8011134 <_free_r>
	...

08011310 <_reclaim_reent>:
 8011310:	4b2c      	ldr	r3, [pc, #176]	; (80113c4 <_reclaim_reent+0xb4>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	4283      	cmp	r3, r0
 8011316:	b570      	push	{r4, r5, r6, lr}
 8011318:	4604      	mov	r4, r0
 801131a:	d051      	beq.n	80113c0 <_reclaim_reent+0xb0>
 801131c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801131e:	b143      	cbz	r3, 8011332 <_reclaim_reent+0x22>
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d14a      	bne.n	80113bc <_reclaim_reent+0xac>
 8011326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011328:	6819      	ldr	r1, [r3, #0]
 801132a:	b111      	cbz	r1, 8011332 <_reclaim_reent+0x22>
 801132c:	4620      	mov	r0, r4
 801132e:	f7ff ff01 	bl	8011134 <_free_r>
 8011332:	6961      	ldr	r1, [r4, #20]
 8011334:	b111      	cbz	r1, 801133c <_reclaim_reent+0x2c>
 8011336:	4620      	mov	r0, r4
 8011338:	f7ff fefc 	bl	8011134 <_free_r>
 801133c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801133e:	b111      	cbz	r1, 8011346 <_reclaim_reent+0x36>
 8011340:	4620      	mov	r0, r4
 8011342:	f7ff fef7 	bl	8011134 <_free_r>
 8011346:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011348:	b111      	cbz	r1, 8011350 <_reclaim_reent+0x40>
 801134a:	4620      	mov	r0, r4
 801134c:	f7ff fef2 	bl	8011134 <_free_r>
 8011350:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011352:	b111      	cbz	r1, 801135a <_reclaim_reent+0x4a>
 8011354:	4620      	mov	r0, r4
 8011356:	f7ff feed 	bl	8011134 <_free_r>
 801135a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801135c:	b111      	cbz	r1, 8011364 <_reclaim_reent+0x54>
 801135e:	4620      	mov	r0, r4
 8011360:	f7ff fee8 	bl	8011134 <_free_r>
 8011364:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011366:	b111      	cbz	r1, 801136e <_reclaim_reent+0x5e>
 8011368:	4620      	mov	r0, r4
 801136a:	f7ff fee3 	bl	8011134 <_free_r>
 801136e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011370:	b111      	cbz	r1, 8011378 <_reclaim_reent+0x68>
 8011372:	4620      	mov	r0, r4
 8011374:	f7ff fede 	bl	8011134 <_free_r>
 8011378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801137a:	b111      	cbz	r1, 8011382 <_reclaim_reent+0x72>
 801137c:	4620      	mov	r0, r4
 801137e:	f7ff fed9 	bl	8011134 <_free_r>
 8011382:	69a3      	ldr	r3, [r4, #24]
 8011384:	b1e3      	cbz	r3, 80113c0 <_reclaim_reent+0xb0>
 8011386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011388:	4620      	mov	r0, r4
 801138a:	4798      	blx	r3
 801138c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801138e:	b1b9      	cbz	r1, 80113c0 <_reclaim_reent+0xb0>
 8011390:	4620      	mov	r0, r4
 8011392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011396:	f7ff bfad 	b.w	80112f4 <cleanup_glue>
 801139a:	5949      	ldr	r1, [r1, r5]
 801139c:	b941      	cbnz	r1, 80113b0 <_reclaim_reent+0xa0>
 801139e:	3504      	adds	r5, #4
 80113a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113a2:	2d80      	cmp	r5, #128	; 0x80
 80113a4:	68d9      	ldr	r1, [r3, #12]
 80113a6:	d1f8      	bne.n	801139a <_reclaim_reent+0x8a>
 80113a8:	4620      	mov	r0, r4
 80113aa:	f7ff fec3 	bl	8011134 <_free_r>
 80113ae:	e7ba      	b.n	8011326 <_reclaim_reent+0x16>
 80113b0:	680e      	ldr	r6, [r1, #0]
 80113b2:	4620      	mov	r0, r4
 80113b4:	f7ff febe 	bl	8011134 <_free_r>
 80113b8:	4631      	mov	r1, r6
 80113ba:	e7ef      	b.n	801139c <_reclaim_reent+0x8c>
 80113bc:	2500      	movs	r5, #0
 80113be:	e7ef      	b.n	80113a0 <_reclaim_reent+0x90>
 80113c0:	bd70      	pop	{r4, r5, r6, pc}
 80113c2:	bf00      	nop
 80113c4:	2000018c 	.word	0x2000018c

080113c8 <_sbrk_r>:
 80113c8:	b538      	push	{r3, r4, r5, lr}
 80113ca:	4d06      	ldr	r5, [pc, #24]	; (80113e4 <_sbrk_r+0x1c>)
 80113cc:	2300      	movs	r3, #0
 80113ce:	4604      	mov	r4, r0
 80113d0:	4608      	mov	r0, r1
 80113d2:	602b      	str	r3, [r5, #0]
 80113d4:	f7f1 fa62 	bl	800289c <_sbrk>
 80113d8:	1c43      	adds	r3, r0, #1
 80113da:	d102      	bne.n	80113e2 <_sbrk_r+0x1a>
 80113dc:	682b      	ldr	r3, [r5, #0]
 80113de:	b103      	cbz	r3, 80113e2 <_sbrk_r+0x1a>
 80113e0:	6023      	str	r3, [r4, #0]
 80113e2:	bd38      	pop	{r3, r4, r5, pc}
 80113e4:	20006c24 	.word	0x20006c24

080113e8 <siprintf>:
 80113e8:	b40e      	push	{r1, r2, r3}
 80113ea:	b500      	push	{lr}
 80113ec:	b09c      	sub	sp, #112	; 0x70
 80113ee:	ab1d      	add	r3, sp, #116	; 0x74
 80113f0:	9002      	str	r0, [sp, #8]
 80113f2:	9006      	str	r0, [sp, #24]
 80113f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80113f8:	4809      	ldr	r0, [pc, #36]	; (8011420 <siprintf+0x38>)
 80113fa:	9107      	str	r1, [sp, #28]
 80113fc:	9104      	str	r1, [sp, #16]
 80113fe:	4909      	ldr	r1, [pc, #36]	; (8011424 <siprintf+0x3c>)
 8011400:	f853 2b04 	ldr.w	r2, [r3], #4
 8011404:	9105      	str	r1, [sp, #20]
 8011406:	6800      	ldr	r0, [r0, #0]
 8011408:	9301      	str	r3, [sp, #4]
 801140a:	a902      	add	r1, sp, #8
 801140c:	f000 f874 	bl	80114f8 <_svfiprintf_r>
 8011410:	9b02      	ldr	r3, [sp, #8]
 8011412:	2200      	movs	r2, #0
 8011414:	701a      	strb	r2, [r3, #0]
 8011416:	b01c      	add	sp, #112	; 0x70
 8011418:	f85d eb04 	ldr.w	lr, [sp], #4
 801141c:	b003      	add	sp, #12
 801141e:	4770      	bx	lr
 8011420:	2000018c 	.word	0x2000018c
 8011424:	ffff0208 	.word	0xffff0208

08011428 <__malloc_lock>:
 8011428:	4801      	ldr	r0, [pc, #4]	; (8011430 <__malloc_lock+0x8>)
 801142a:	f7ff be5b 	b.w	80110e4 <__retarget_lock_acquire_recursive>
 801142e:	bf00      	nop
 8011430:	20006c18 	.word	0x20006c18

08011434 <__malloc_unlock>:
 8011434:	4801      	ldr	r0, [pc, #4]	; (801143c <__malloc_unlock+0x8>)
 8011436:	f7ff be56 	b.w	80110e6 <__retarget_lock_release_recursive>
 801143a:	bf00      	nop
 801143c:	20006c18 	.word	0x20006c18

08011440 <__ssputs_r>:
 8011440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011444:	688e      	ldr	r6, [r1, #8]
 8011446:	429e      	cmp	r6, r3
 8011448:	4682      	mov	sl, r0
 801144a:	460c      	mov	r4, r1
 801144c:	4690      	mov	r8, r2
 801144e:	461f      	mov	r7, r3
 8011450:	d838      	bhi.n	80114c4 <__ssputs_r+0x84>
 8011452:	898a      	ldrh	r2, [r1, #12]
 8011454:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011458:	d032      	beq.n	80114c0 <__ssputs_r+0x80>
 801145a:	6825      	ldr	r5, [r4, #0]
 801145c:	6909      	ldr	r1, [r1, #16]
 801145e:	eba5 0901 	sub.w	r9, r5, r1
 8011462:	6965      	ldr	r5, [r4, #20]
 8011464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801146c:	3301      	adds	r3, #1
 801146e:	444b      	add	r3, r9
 8011470:	106d      	asrs	r5, r5, #1
 8011472:	429d      	cmp	r5, r3
 8011474:	bf38      	it	cc
 8011476:	461d      	movcc	r5, r3
 8011478:	0553      	lsls	r3, r2, #21
 801147a:	d531      	bpl.n	80114e0 <__ssputs_r+0xa0>
 801147c:	4629      	mov	r1, r5
 801147e:	f7ff fec5 	bl	801120c <_malloc_r>
 8011482:	4606      	mov	r6, r0
 8011484:	b950      	cbnz	r0, 801149c <__ssputs_r+0x5c>
 8011486:	230c      	movs	r3, #12
 8011488:	f8ca 3000 	str.w	r3, [sl]
 801148c:	89a3      	ldrh	r3, [r4, #12]
 801148e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011492:	81a3      	strh	r3, [r4, #12]
 8011494:	f04f 30ff 	mov.w	r0, #4294967295
 8011498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801149c:	6921      	ldr	r1, [r4, #16]
 801149e:	464a      	mov	r2, r9
 80114a0:	f7ff fe32 	bl	8011108 <memcpy>
 80114a4:	89a3      	ldrh	r3, [r4, #12]
 80114a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80114aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114ae:	81a3      	strh	r3, [r4, #12]
 80114b0:	6126      	str	r6, [r4, #16]
 80114b2:	6165      	str	r5, [r4, #20]
 80114b4:	444e      	add	r6, r9
 80114b6:	eba5 0509 	sub.w	r5, r5, r9
 80114ba:	6026      	str	r6, [r4, #0]
 80114bc:	60a5      	str	r5, [r4, #8]
 80114be:	463e      	mov	r6, r7
 80114c0:	42be      	cmp	r6, r7
 80114c2:	d900      	bls.n	80114c6 <__ssputs_r+0x86>
 80114c4:	463e      	mov	r6, r7
 80114c6:	6820      	ldr	r0, [r4, #0]
 80114c8:	4632      	mov	r2, r6
 80114ca:	4641      	mov	r1, r8
 80114cc:	f000 faa8 	bl	8011a20 <memmove>
 80114d0:	68a3      	ldr	r3, [r4, #8]
 80114d2:	1b9b      	subs	r3, r3, r6
 80114d4:	60a3      	str	r3, [r4, #8]
 80114d6:	6823      	ldr	r3, [r4, #0]
 80114d8:	4433      	add	r3, r6
 80114da:	6023      	str	r3, [r4, #0]
 80114dc:	2000      	movs	r0, #0
 80114de:	e7db      	b.n	8011498 <__ssputs_r+0x58>
 80114e0:	462a      	mov	r2, r5
 80114e2:	f000 fab7 	bl	8011a54 <_realloc_r>
 80114e6:	4606      	mov	r6, r0
 80114e8:	2800      	cmp	r0, #0
 80114ea:	d1e1      	bne.n	80114b0 <__ssputs_r+0x70>
 80114ec:	6921      	ldr	r1, [r4, #16]
 80114ee:	4650      	mov	r0, sl
 80114f0:	f7ff fe20 	bl	8011134 <_free_r>
 80114f4:	e7c7      	b.n	8011486 <__ssputs_r+0x46>
	...

080114f8 <_svfiprintf_r>:
 80114f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114fc:	4698      	mov	r8, r3
 80114fe:	898b      	ldrh	r3, [r1, #12]
 8011500:	061b      	lsls	r3, r3, #24
 8011502:	b09d      	sub	sp, #116	; 0x74
 8011504:	4607      	mov	r7, r0
 8011506:	460d      	mov	r5, r1
 8011508:	4614      	mov	r4, r2
 801150a:	d50e      	bpl.n	801152a <_svfiprintf_r+0x32>
 801150c:	690b      	ldr	r3, [r1, #16]
 801150e:	b963      	cbnz	r3, 801152a <_svfiprintf_r+0x32>
 8011510:	2140      	movs	r1, #64	; 0x40
 8011512:	f7ff fe7b 	bl	801120c <_malloc_r>
 8011516:	6028      	str	r0, [r5, #0]
 8011518:	6128      	str	r0, [r5, #16]
 801151a:	b920      	cbnz	r0, 8011526 <_svfiprintf_r+0x2e>
 801151c:	230c      	movs	r3, #12
 801151e:	603b      	str	r3, [r7, #0]
 8011520:	f04f 30ff 	mov.w	r0, #4294967295
 8011524:	e0d1      	b.n	80116ca <_svfiprintf_r+0x1d2>
 8011526:	2340      	movs	r3, #64	; 0x40
 8011528:	616b      	str	r3, [r5, #20]
 801152a:	2300      	movs	r3, #0
 801152c:	9309      	str	r3, [sp, #36]	; 0x24
 801152e:	2320      	movs	r3, #32
 8011530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011534:	f8cd 800c 	str.w	r8, [sp, #12]
 8011538:	2330      	movs	r3, #48	; 0x30
 801153a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80116e4 <_svfiprintf_r+0x1ec>
 801153e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011542:	f04f 0901 	mov.w	r9, #1
 8011546:	4623      	mov	r3, r4
 8011548:	469a      	mov	sl, r3
 801154a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801154e:	b10a      	cbz	r2, 8011554 <_svfiprintf_r+0x5c>
 8011550:	2a25      	cmp	r2, #37	; 0x25
 8011552:	d1f9      	bne.n	8011548 <_svfiprintf_r+0x50>
 8011554:	ebba 0b04 	subs.w	fp, sl, r4
 8011558:	d00b      	beq.n	8011572 <_svfiprintf_r+0x7a>
 801155a:	465b      	mov	r3, fp
 801155c:	4622      	mov	r2, r4
 801155e:	4629      	mov	r1, r5
 8011560:	4638      	mov	r0, r7
 8011562:	f7ff ff6d 	bl	8011440 <__ssputs_r>
 8011566:	3001      	adds	r0, #1
 8011568:	f000 80aa 	beq.w	80116c0 <_svfiprintf_r+0x1c8>
 801156c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801156e:	445a      	add	r2, fp
 8011570:	9209      	str	r2, [sp, #36]	; 0x24
 8011572:	f89a 3000 	ldrb.w	r3, [sl]
 8011576:	2b00      	cmp	r3, #0
 8011578:	f000 80a2 	beq.w	80116c0 <_svfiprintf_r+0x1c8>
 801157c:	2300      	movs	r3, #0
 801157e:	f04f 32ff 	mov.w	r2, #4294967295
 8011582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011586:	f10a 0a01 	add.w	sl, sl, #1
 801158a:	9304      	str	r3, [sp, #16]
 801158c:	9307      	str	r3, [sp, #28]
 801158e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011592:	931a      	str	r3, [sp, #104]	; 0x68
 8011594:	4654      	mov	r4, sl
 8011596:	2205      	movs	r2, #5
 8011598:	f814 1b01 	ldrb.w	r1, [r4], #1
 801159c:	4851      	ldr	r0, [pc, #324]	; (80116e4 <_svfiprintf_r+0x1ec>)
 801159e:	f7ee fe1f 	bl	80001e0 <memchr>
 80115a2:	9a04      	ldr	r2, [sp, #16]
 80115a4:	b9d8      	cbnz	r0, 80115de <_svfiprintf_r+0xe6>
 80115a6:	06d0      	lsls	r0, r2, #27
 80115a8:	bf44      	itt	mi
 80115aa:	2320      	movmi	r3, #32
 80115ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115b0:	0711      	lsls	r1, r2, #28
 80115b2:	bf44      	itt	mi
 80115b4:	232b      	movmi	r3, #43	; 0x2b
 80115b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115ba:	f89a 3000 	ldrb.w	r3, [sl]
 80115be:	2b2a      	cmp	r3, #42	; 0x2a
 80115c0:	d015      	beq.n	80115ee <_svfiprintf_r+0xf6>
 80115c2:	9a07      	ldr	r2, [sp, #28]
 80115c4:	4654      	mov	r4, sl
 80115c6:	2000      	movs	r0, #0
 80115c8:	f04f 0c0a 	mov.w	ip, #10
 80115cc:	4621      	mov	r1, r4
 80115ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115d2:	3b30      	subs	r3, #48	; 0x30
 80115d4:	2b09      	cmp	r3, #9
 80115d6:	d94e      	bls.n	8011676 <_svfiprintf_r+0x17e>
 80115d8:	b1b0      	cbz	r0, 8011608 <_svfiprintf_r+0x110>
 80115da:	9207      	str	r2, [sp, #28]
 80115dc:	e014      	b.n	8011608 <_svfiprintf_r+0x110>
 80115de:	eba0 0308 	sub.w	r3, r0, r8
 80115e2:	fa09 f303 	lsl.w	r3, r9, r3
 80115e6:	4313      	orrs	r3, r2
 80115e8:	9304      	str	r3, [sp, #16]
 80115ea:	46a2      	mov	sl, r4
 80115ec:	e7d2      	b.n	8011594 <_svfiprintf_r+0x9c>
 80115ee:	9b03      	ldr	r3, [sp, #12]
 80115f0:	1d19      	adds	r1, r3, #4
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	9103      	str	r1, [sp, #12]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	bfbb      	ittet	lt
 80115fa:	425b      	neglt	r3, r3
 80115fc:	f042 0202 	orrlt.w	r2, r2, #2
 8011600:	9307      	strge	r3, [sp, #28]
 8011602:	9307      	strlt	r3, [sp, #28]
 8011604:	bfb8      	it	lt
 8011606:	9204      	strlt	r2, [sp, #16]
 8011608:	7823      	ldrb	r3, [r4, #0]
 801160a:	2b2e      	cmp	r3, #46	; 0x2e
 801160c:	d10c      	bne.n	8011628 <_svfiprintf_r+0x130>
 801160e:	7863      	ldrb	r3, [r4, #1]
 8011610:	2b2a      	cmp	r3, #42	; 0x2a
 8011612:	d135      	bne.n	8011680 <_svfiprintf_r+0x188>
 8011614:	9b03      	ldr	r3, [sp, #12]
 8011616:	1d1a      	adds	r2, r3, #4
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	9203      	str	r2, [sp, #12]
 801161c:	2b00      	cmp	r3, #0
 801161e:	bfb8      	it	lt
 8011620:	f04f 33ff 	movlt.w	r3, #4294967295
 8011624:	3402      	adds	r4, #2
 8011626:	9305      	str	r3, [sp, #20]
 8011628:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80116f4 <_svfiprintf_r+0x1fc>
 801162c:	7821      	ldrb	r1, [r4, #0]
 801162e:	2203      	movs	r2, #3
 8011630:	4650      	mov	r0, sl
 8011632:	f7ee fdd5 	bl	80001e0 <memchr>
 8011636:	b140      	cbz	r0, 801164a <_svfiprintf_r+0x152>
 8011638:	2340      	movs	r3, #64	; 0x40
 801163a:	eba0 000a 	sub.w	r0, r0, sl
 801163e:	fa03 f000 	lsl.w	r0, r3, r0
 8011642:	9b04      	ldr	r3, [sp, #16]
 8011644:	4303      	orrs	r3, r0
 8011646:	3401      	adds	r4, #1
 8011648:	9304      	str	r3, [sp, #16]
 801164a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801164e:	4826      	ldr	r0, [pc, #152]	; (80116e8 <_svfiprintf_r+0x1f0>)
 8011650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011654:	2206      	movs	r2, #6
 8011656:	f7ee fdc3 	bl	80001e0 <memchr>
 801165a:	2800      	cmp	r0, #0
 801165c:	d038      	beq.n	80116d0 <_svfiprintf_r+0x1d8>
 801165e:	4b23      	ldr	r3, [pc, #140]	; (80116ec <_svfiprintf_r+0x1f4>)
 8011660:	bb1b      	cbnz	r3, 80116aa <_svfiprintf_r+0x1b2>
 8011662:	9b03      	ldr	r3, [sp, #12]
 8011664:	3307      	adds	r3, #7
 8011666:	f023 0307 	bic.w	r3, r3, #7
 801166a:	3308      	adds	r3, #8
 801166c:	9303      	str	r3, [sp, #12]
 801166e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011670:	4433      	add	r3, r6
 8011672:	9309      	str	r3, [sp, #36]	; 0x24
 8011674:	e767      	b.n	8011546 <_svfiprintf_r+0x4e>
 8011676:	fb0c 3202 	mla	r2, ip, r2, r3
 801167a:	460c      	mov	r4, r1
 801167c:	2001      	movs	r0, #1
 801167e:	e7a5      	b.n	80115cc <_svfiprintf_r+0xd4>
 8011680:	2300      	movs	r3, #0
 8011682:	3401      	adds	r4, #1
 8011684:	9305      	str	r3, [sp, #20]
 8011686:	4619      	mov	r1, r3
 8011688:	f04f 0c0a 	mov.w	ip, #10
 801168c:	4620      	mov	r0, r4
 801168e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011692:	3a30      	subs	r2, #48	; 0x30
 8011694:	2a09      	cmp	r2, #9
 8011696:	d903      	bls.n	80116a0 <_svfiprintf_r+0x1a8>
 8011698:	2b00      	cmp	r3, #0
 801169a:	d0c5      	beq.n	8011628 <_svfiprintf_r+0x130>
 801169c:	9105      	str	r1, [sp, #20]
 801169e:	e7c3      	b.n	8011628 <_svfiprintf_r+0x130>
 80116a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80116a4:	4604      	mov	r4, r0
 80116a6:	2301      	movs	r3, #1
 80116a8:	e7f0      	b.n	801168c <_svfiprintf_r+0x194>
 80116aa:	ab03      	add	r3, sp, #12
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	462a      	mov	r2, r5
 80116b0:	4b0f      	ldr	r3, [pc, #60]	; (80116f0 <_svfiprintf_r+0x1f8>)
 80116b2:	a904      	add	r1, sp, #16
 80116b4:	4638      	mov	r0, r7
 80116b6:	f3af 8000 	nop.w
 80116ba:	1c42      	adds	r2, r0, #1
 80116bc:	4606      	mov	r6, r0
 80116be:	d1d6      	bne.n	801166e <_svfiprintf_r+0x176>
 80116c0:	89ab      	ldrh	r3, [r5, #12]
 80116c2:	065b      	lsls	r3, r3, #25
 80116c4:	f53f af2c 	bmi.w	8011520 <_svfiprintf_r+0x28>
 80116c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116ca:	b01d      	add	sp, #116	; 0x74
 80116cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116d0:	ab03      	add	r3, sp, #12
 80116d2:	9300      	str	r3, [sp, #0]
 80116d4:	462a      	mov	r2, r5
 80116d6:	4b06      	ldr	r3, [pc, #24]	; (80116f0 <_svfiprintf_r+0x1f8>)
 80116d8:	a904      	add	r1, sp, #16
 80116da:	4638      	mov	r0, r7
 80116dc:	f000 f87a 	bl	80117d4 <_printf_i>
 80116e0:	e7eb      	b.n	80116ba <_svfiprintf_r+0x1c2>
 80116e2:	bf00      	nop
 80116e4:	0801416c 	.word	0x0801416c
 80116e8:	08014176 	.word	0x08014176
 80116ec:	00000000 	.word	0x00000000
 80116f0:	08011441 	.word	0x08011441
 80116f4:	08014172 	.word	0x08014172

080116f8 <_printf_common>:
 80116f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116fc:	4616      	mov	r6, r2
 80116fe:	4699      	mov	r9, r3
 8011700:	688a      	ldr	r2, [r1, #8]
 8011702:	690b      	ldr	r3, [r1, #16]
 8011704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011708:	4293      	cmp	r3, r2
 801170a:	bfb8      	it	lt
 801170c:	4613      	movlt	r3, r2
 801170e:	6033      	str	r3, [r6, #0]
 8011710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011714:	4607      	mov	r7, r0
 8011716:	460c      	mov	r4, r1
 8011718:	b10a      	cbz	r2, 801171e <_printf_common+0x26>
 801171a:	3301      	adds	r3, #1
 801171c:	6033      	str	r3, [r6, #0]
 801171e:	6823      	ldr	r3, [r4, #0]
 8011720:	0699      	lsls	r1, r3, #26
 8011722:	bf42      	ittt	mi
 8011724:	6833      	ldrmi	r3, [r6, #0]
 8011726:	3302      	addmi	r3, #2
 8011728:	6033      	strmi	r3, [r6, #0]
 801172a:	6825      	ldr	r5, [r4, #0]
 801172c:	f015 0506 	ands.w	r5, r5, #6
 8011730:	d106      	bne.n	8011740 <_printf_common+0x48>
 8011732:	f104 0a19 	add.w	sl, r4, #25
 8011736:	68e3      	ldr	r3, [r4, #12]
 8011738:	6832      	ldr	r2, [r6, #0]
 801173a:	1a9b      	subs	r3, r3, r2
 801173c:	42ab      	cmp	r3, r5
 801173e:	dc26      	bgt.n	801178e <_printf_common+0x96>
 8011740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011744:	1e13      	subs	r3, r2, #0
 8011746:	6822      	ldr	r2, [r4, #0]
 8011748:	bf18      	it	ne
 801174a:	2301      	movne	r3, #1
 801174c:	0692      	lsls	r2, r2, #26
 801174e:	d42b      	bmi.n	80117a8 <_printf_common+0xb0>
 8011750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011754:	4649      	mov	r1, r9
 8011756:	4638      	mov	r0, r7
 8011758:	47c0      	blx	r8
 801175a:	3001      	adds	r0, #1
 801175c:	d01e      	beq.n	801179c <_printf_common+0xa4>
 801175e:	6823      	ldr	r3, [r4, #0]
 8011760:	68e5      	ldr	r5, [r4, #12]
 8011762:	6832      	ldr	r2, [r6, #0]
 8011764:	f003 0306 	and.w	r3, r3, #6
 8011768:	2b04      	cmp	r3, #4
 801176a:	bf08      	it	eq
 801176c:	1aad      	subeq	r5, r5, r2
 801176e:	68a3      	ldr	r3, [r4, #8]
 8011770:	6922      	ldr	r2, [r4, #16]
 8011772:	bf0c      	ite	eq
 8011774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011778:	2500      	movne	r5, #0
 801177a:	4293      	cmp	r3, r2
 801177c:	bfc4      	itt	gt
 801177e:	1a9b      	subgt	r3, r3, r2
 8011780:	18ed      	addgt	r5, r5, r3
 8011782:	2600      	movs	r6, #0
 8011784:	341a      	adds	r4, #26
 8011786:	42b5      	cmp	r5, r6
 8011788:	d11a      	bne.n	80117c0 <_printf_common+0xc8>
 801178a:	2000      	movs	r0, #0
 801178c:	e008      	b.n	80117a0 <_printf_common+0xa8>
 801178e:	2301      	movs	r3, #1
 8011790:	4652      	mov	r2, sl
 8011792:	4649      	mov	r1, r9
 8011794:	4638      	mov	r0, r7
 8011796:	47c0      	blx	r8
 8011798:	3001      	adds	r0, #1
 801179a:	d103      	bne.n	80117a4 <_printf_common+0xac>
 801179c:	f04f 30ff 	mov.w	r0, #4294967295
 80117a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117a4:	3501      	adds	r5, #1
 80117a6:	e7c6      	b.n	8011736 <_printf_common+0x3e>
 80117a8:	18e1      	adds	r1, r4, r3
 80117aa:	1c5a      	adds	r2, r3, #1
 80117ac:	2030      	movs	r0, #48	; 0x30
 80117ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80117b2:	4422      	add	r2, r4
 80117b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80117b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80117bc:	3302      	adds	r3, #2
 80117be:	e7c7      	b.n	8011750 <_printf_common+0x58>
 80117c0:	2301      	movs	r3, #1
 80117c2:	4622      	mov	r2, r4
 80117c4:	4649      	mov	r1, r9
 80117c6:	4638      	mov	r0, r7
 80117c8:	47c0      	blx	r8
 80117ca:	3001      	adds	r0, #1
 80117cc:	d0e6      	beq.n	801179c <_printf_common+0xa4>
 80117ce:	3601      	adds	r6, #1
 80117d0:	e7d9      	b.n	8011786 <_printf_common+0x8e>
	...

080117d4 <_printf_i>:
 80117d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117d8:	7e0f      	ldrb	r7, [r1, #24]
 80117da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80117dc:	2f78      	cmp	r7, #120	; 0x78
 80117de:	4691      	mov	r9, r2
 80117e0:	4680      	mov	r8, r0
 80117e2:	460c      	mov	r4, r1
 80117e4:	469a      	mov	sl, r3
 80117e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80117ea:	d807      	bhi.n	80117fc <_printf_i+0x28>
 80117ec:	2f62      	cmp	r7, #98	; 0x62
 80117ee:	d80a      	bhi.n	8011806 <_printf_i+0x32>
 80117f0:	2f00      	cmp	r7, #0
 80117f2:	f000 80d8 	beq.w	80119a6 <_printf_i+0x1d2>
 80117f6:	2f58      	cmp	r7, #88	; 0x58
 80117f8:	f000 80a3 	beq.w	8011942 <_printf_i+0x16e>
 80117fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011804:	e03a      	b.n	801187c <_printf_i+0xa8>
 8011806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801180a:	2b15      	cmp	r3, #21
 801180c:	d8f6      	bhi.n	80117fc <_printf_i+0x28>
 801180e:	a101      	add	r1, pc, #4	; (adr r1, 8011814 <_printf_i+0x40>)
 8011810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011814:	0801186d 	.word	0x0801186d
 8011818:	08011881 	.word	0x08011881
 801181c:	080117fd 	.word	0x080117fd
 8011820:	080117fd 	.word	0x080117fd
 8011824:	080117fd 	.word	0x080117fd
 8011828:	080117fd 	.word	0x080117fd
 801182c:	08011881 	.word	0x08011881
 8011830:	080117fd 	.word	0x080117fd
 8011834:	080117fd 	.word	0x080117fd
 8011838:	080117fd 	.word	0x080117fd
 801183c:	080117fd 	.word	0x080117fd
 8011840:	0801198d 	.word	0x0801198d
 8011844:	080118b1 	.word	0x080118b1
 8011848:	0801196f 	.word	0x0801196f
 801184c:	080117fd 	.word	0x080117fd
 8011850:	080117fd 	.word	0x080117fd
 8011854:	080119af 	.word	0x080119af
 8011858:	080117fd 	.word	0x080117fd
 801185c:	080118b1 	.word	0x080118b1
 8011860:	080117fd 	.word	0x080117fd
 8011864:	080117fd 	.word	0x080117fd
 8011868:	08011977 	.word	0x08011977
 801186c:	682b      	ldr	r3, [r5, #0]
 801186e:	1d1a      	adds	r2, r3, #4
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	602a      	str	r2, [r5, #0]
 8011874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801187c:	2301      	movs	r3, #1
 801187e:	e0a3      	b.n	80119c8 <_printf_i+0x1f4>
 8011880:	6820      	ldr	r0, [r4, #0]
 8011882:	6829      	ldr	r1, [r5, #0]
 8011884:	0606      	lsls	r6, r0, #24
 8011886:	f101 0304 	add.w	r3, r1, #4
 801188a:	d50a      	bpl.n	80118a2 <_printf_i+0xce>
 801188c:	680e      	ldr	r6, [r1, #0]
 801188e:	602b      	str	r3, [r5, #0]
 8011890:	2e00      	cmp	r6, #0
 8011892:	da03      	bge.n	801189c <_printf_i+0xc8>
 8011894:	232d      	movs	r3, #45	; 0x2d
 8011896:	4276      	negs	r6, r6
 8011898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801189c:	485e      	ldr	r0, [pc, #376]	; (8011a18 <_printf_i+0x244>)
 801189e:	230a      	movs	r3, #10
 80118a0:	e019      	b.n	80118d6 <_printf_i+0x102>
 80118a2:	680e      	ldr	r6, [r1, #0]
 80118a4:	602b      	str	r3, [r5, #0]
 80118a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80118aa:	bf18      	it	ne
 80118ac:	b236      	sxthne	r6, r6
 80118ae:	e7ef      	b.n	8011890 <_printf_i+0xbc>
 80118b0:	682b      	ldr	r3, [r5, #0]
 80118b2:	6820      	ldr	r0, [r4, #0]
 80118b4:	1d19      	adds	r1, r3, #4
 80118b6:	6029      	str	r1, [r5, #0]
 80118b8:	0601      	lsls	r1, r0, #24
 80118ba:	d501      	bpl.n	80118c0 <_printf_i+0xec>
 80118bc:	681e      	ldr	r6, [r3, #0]
 80118be:	e002      	b.n	80118c6 <_printf_i+0xf2>
 80118c0:	0646      	lsls	r6, r0, #25
 80118c2:	d5fb      	bpl.n	80118bc <_printf_i+0xe8>
 80118c4:	881e      	ldrh	r6, [r3, #0]
 80118c6:	4854      	ldr	r0, [pc, #336]	; (8011a18 <_printf_i+0x244>)
 80118c8:	2f6f      	cmp	r7, #111	; 0x6f
 80118ca:	bf0c      	ite	eq
 80118cc:	2308      	moveq	r3, #8
 80118ce:	230a      	movne	r3, #10
 80118d0:	2100      	movs	r1, #0
 80118d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80118d6:	6865      	ldr	r5, [r4, #4]
 80118d8:	60a5      	str	r5, [r4, #8]
 80118da:	2d00      	cmp	r5, #0
 80118dc:	bfa2      	ittt	ge
 80118de:	6821      	ldrge	r1, [r4, #0]
 80118e0:	f021 0104 	bicge.w	r1, r1, #4
 80118e4:	6021      	strge	r1, [r4, #0]
 80118e6:	b90e      	cbnz	r6, 80118ec <_printf_i+0x118>
 80118e8:	2d00      	cmp	r5, #0
 80118ea:	d04d      	beq.n	8011988 <_printf_i+0x1b4>
 80118ec:	4615      	mov	r5, r2
 80118ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80118f2:	fb03 6711 	mls	r7, r3, r1, r6
 80118f6:	5dc7      	ldrb	r7, [r0, r7]
 80118f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80118fc:	4637      	mov	r7, r6
 80118fe:	42bb      	cmp	r3, r7
 8011900:	460e      	mov	r6, r1
 8011902:	d9f4      	bls.n	80118ee <_printf_i+0x11a>
 8011904:	2b08      	cmp	r3, #8
 8011906:	d10b      	bne.n	8011920 <_printf_i+0x14c>
 8011908:	6823      	ldr	r3, [r4, #0]
 801190a:	07de      	lsls	r6, r3, #31
 801190c:	d508      	bpl.n	8011920 <_printf_i+0x14c>
 801190e:	6923      	ldr	r3, [r4, #16]
 8011910:	6861      	ldr	r1, [r4, #4]
 8011912:	4299      	cmp	r1, r3
 8011914:	bfde      	ittt	le
 8011916:	2330      	movle	r3, #48	; 0x30
 8011918:	f805 3c01 	strble.w	r3, [r5, #-1]
 801191c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011920:	1b52      	subs	r2, r2, r5
 8011922:	6122      	str	r2, [r4, #16]
 8011924:	f8cd a000 	str.w	sl, [sp]
 8011928:	464b      	mov	r3, r9
 801192a:	aa03      	add	r2, sp, #12
 801192c:	4621      	mov	r1, r4
 801192e:	4640      	mov	r0, r8
 8011930:	f7ff fee2 	bl	80116f8 <_printf_common>
 8011934:	3001      	adds	r0, #1
 8011936:	d14c      	bne.n	80119d2 <_printf_i+0x1fe>
 8011938:	f04f 30ff 	mov.w	r0, #4294967295
 801193c:	b004      	add	sp, #16
 801193e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011942:	4835      	ldr	r0, [pc, #212]	; (8011a18 <_printf_i+0x244>)
 8011944:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011948:	6829      	ldr	r1, [r5, #0]
 801194a:	6823      	ldr	r3, [r4, #0]
 801194c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011950:	6029      	str	r1, [r5, #0]
 8011952:	061d      	lsls	r5, r3, #24
 8011954:	d514      	bpl.n	8011980 <_printf_i+0x1ac>
 8011956:	07df      	lsls	r7, r3, #31
 8011958:	bf44      	itt	mi
 801195a:	f043 0320 	orrmi.w	r3, r3, #32
 801195e:	6023      	strmi	r3, [r4, #0]
 8011960:	b91e      	cbnz	r6, 801196a <_printf_i+0x196>
 8011962:	6823      	ldr	r3, [r4, #0]
 8011964:	f023 0320 	bic.w	r3, r3, #32
 8011968:	6023      	str	r3, [r4, #0]
 801196a:	2310      	movs	r3, #16
 801196c:	e7b0      	b.n	80118d0 <_printf_i+0xfc>
 801196e:	6823      	ldr	r3, [r4, #0]
 8011970:	f043 0320 	orr.w	r3, r3, #32
 8011974:	6023      	str	r3, [r4, #0]
 8011976:	2378      	movs	r3, #120	; 0x78
 8011978:	4828      	ldr	r0, [pc, #160]	; (8011a1c <_printf_i+0x248>)
 801197a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801197e:	e7e3      	b.n	8011948 <_printf_i+0x174>
 8011980:	0659      	lsls	r1, r3, #25
 8011982:	bf48      	it	mi
 8011984:	b2b6      	uxthmi	r6, r6
 8011986:	e7e6      	b.n	8011956 <_printf_i+0x182>
 8011988:	4615      	mov	r5, r2
 801198a:	e7bb      	b.n	8011904 <_printf_i+0x130>
 801198c:	682b      	ldr	r3, [r5, #0]
 801198e:	6826      	ldr	r6, [r4, #0]
 8011990:	6961      	ldr	r1, [r4, #20]
 8011992:	1d18      	adds	r0, r3, #4
 8011994:	6028      	str	r0, [r5, #0]
 8011996:	0635      	lsls	r5, r6, #24
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	d501      	bpl.n	80119a0 <_printf_i+0x1cc>
 801199c:	6019      	str	r1, [r3, #0]
 801199e:	e002      	b.n	80119a6 <_printf_i+0x1d2>
 80119a0:	0670      	lsls	r0, r6, #25
 80119a2:	d5fb      	bpl.n	801199c <_printf_i+0x1c8>
 80119a4:	8019      	strh	r1, [r3, #0]
 80119a6:	2300      	movs	r3, #0
 80119a8:	6123      	str	r3, [r4, #16]
 80119aa:	4615      	mov	r5, r2
 80119ac:	e7ba      	b.n	8011924 <_printf_i+0x150>
 80119ae:	682b      	ldr	r3, [r5, #0]
 80119b0:	1d1a      	adds	r2, r3, #4
 80119b2:	602a      	str	r2, [r5, #0]
 80119b4:	681d      	ldr	r5, [r3, #0]
 80119b6:	6862      	ldr	r2, [r4, #4]
 80119b8:	2100      	movs	r1, #0
 80119ba:	4628      	mov	r0, r5
 80119bc:	f7ee fc10 	bl	80001e0 <memchr>
 80119c0:	b108      	cbz	r0, 80119c6 <_printf_i+0x1f2>
 80119c2:	1b40      	subs	r0, r0, r5
 80119c4:	6060      	str	r0, [r4, #4]
 80119c6:	6863      	ldr	r3, [r4, #4]
 80119c8:	6123      	str	r3, [r4, #16]
 80119ca:	2300      	movs	r3, #0
 80119cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119d0:	e7a8      	b.n	8011924 <_printf_i+0x150>
 80119d2:	6923      	ldr	r3, [r4, #16]
 80119d4:	462a      	mov	r2, r5
 80119d6:	4649      	mov	r1, r9
 80119d8:	4640      	mov	r0, r8
 80119da:	47d0      	blx	sl
 80119dc:	3001      	adds	r0, #1
 80119de:	d0ab      	beq.n	8011938 <_printf_i+0x164>
 80119e0:	6823      	ldr	r3, [r4, #0]
 80119e2:	079b      	lsls	r3, r3, #30
 80119e4:	d413      	bmi.n	8011a0e <_printf_i+0x23a>
 80119e6:	68e0      	ldr	r0, [r4, #12]
 80119e8:	9b03      	ldr	r3, [sp, #12]
 80119ea:	4298      	cmp	r0, r3
 80119ec:	bfb8      	it	lt
 80119ee:	4618      	movlt	r0, r3
 80119f0:	e7a4      	b.n	801193c <_printf_i+0x168>
 80119f2:	2301      	movs	r3, #1
 80119f4:	4632      	mov	r2, r6
 80119f6:	4649      	mov	r1, r9
 80119f8:	4640      	mov	r0, r8
 80119fa:	47d0      	blx	sl
 80119fc:	3001      	adds	r0, #1
 80119fe:	d09b      	beq.n	8011938 <_printf_i+0x164>
 8011a00:	3501      	adds	r5, #1
 8011a02:	68e3      	ldr	r3, [r4, #12]
 8011a04:	9903      	ldr	r1, [sp, #12]
 8011a06:	1a5b      	subs	r3, r3, r1
 8011a08:	42ab      	cmp	r3, r5
 8011a0a:	dcf2      	bgt.n	80119f2 <_printf_i+0x21e>
 8011a0c:	e7eb      	b.n	80119e6 <_printf_i+0x212>
 8011a0e:	2500      	movs	r5, #0
 8011a10:	f104 0619 	add.w	r6, r4, #25
 8011a14:	e7f5      	b.n	8011a02 <_printf_i+0x22e>
 8011a16:	bf00      	nop
 8011a18:	0801417d 	.word	0x0801417d
 8011a1c:	0801418e 	.word	0x0801418e

08011a20 <memmove>:
 8011a20:	4288      	cmp	r0, r1
 8011a22:	b510      	push	{r4, lr}
 8011a24:	eb01 0402 	add.w	r4, r1, r2
 8011a28:	d902      	bls.n	8011a30 <memmove+0x10>
 8011a2a:	4284      	cmp	r4, r0
 8011a2c:	4623      	mov	r3, r4
 8011a2e:	d807      	bhi.n	8011a40 <memmove+0x20>
 8011a30:	1e43      	subs	r3, r0, #1
 8011a32:	42a1      	cmp	r1, r4
 8011a34:	d008      	beq.n	8011a48 <memmove+0x28>
 8011a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a3e:	e7f8      	b.n	8011a32 <memmove+0x12>
 8011a40:	4402      	add	r2, r0
 8011a42:	4601      	mov	r1, r0
 8011a44:	428a      	cmp	r2, r1
 8011a46:	d100      	bne.n	8011a4a <memmove+0x2a>
 8011a48:	bd10      	pop	{r4, pc}
 8011a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a52:	e7f7      	b.n	8011a44 <memmove+0x24>

08011a54 <_realloc_r>:
 8011a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a58:	4680      	mov	r8, r0
 8011a5a:	4614      	mov	r4, r2
 8011a5c:	460e      	mov	r6, r1
 8011a5e:	b921      	cbnz	r1, 8011a6a <_realloc_r+0x16>
 8011a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a64:	4611      	mov	r1, r2
 8011a66:	f7ff bbd1 	b.w	801120c <_malloc_r>
 8011a6a:	b92a      	cbnz	r2, 8011a78 <_realloc_r+0x24>
 8011a6c:	f7ff fb62 	bl	8011134 <_free_r>
 8011a70:	4625      	mov	r5, r4
 8011a72:	4628      	mov	r0, r5
 8011a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a78:	f000 f81b 	bl	8011ab2 <_malloc_usable_size_r>
 8011a7c:	4284      	cmp	r4, r0
 8011a7e:	4607      	mov	r7, r0
 8011a80:	d802      	bhi.n	8011a88 <_realloc_r+0x34>
 8011a82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011a86:	d812      	bhi.n	8011aae <_realloc_r+0x5a>
 8011a88:	4621      	mov	r1, r4
 8011a8a:	4640      	mov	r0, r8
 8011a8c:	f7ff fbbe 	bl	801120c <_malloc_r>
 8011a90:	4605      	mov	r5, r0
 8011a92:	2800      	cmp	r0, #0
 8011a94:	d0ed      	beq.n	8011a72 <_realloc_r+0x1e>
 8011a96:	42bc      	cmp	r4, r7
 8011a98:	4622      	mov	r2, r4
 8011a9a:	4631      	mov	r1, r6
 8011a9c:	bf28      	it	cs
 8011a9e:	463a      	movcs	r2, r7
 8011aa0:	f7ff fb32 	bl	8011108 <memcpy>
 8011aa4:	4631      	mov	r1, r6
 8011aa6:	4640      	mov	r0, r8
 8011aa8:	f7ff fb44 	bl	8011134 <_free_r>
 8011aac:	e7e1      	b.n	8011a72 <_realloc_r+0x1e>
 8011aae:	4635      	mov	r5, r6
 8011ab0:	e7df      	b.n	8011a72 <_realloc_r+0x1e>

08011ab2 <_malloc_usable_size_r>:
 8011ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ab6:	1f18      	subs	r0, r3, #4
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	bfbc      	itt	lt
 8011abc:	580b      	ldrlt	r3, [r1, r0]
 8011abe:	18c0      	addlt	r0, r0, r3
 8011ac0:	4770      	bx	lr
	...

08011ac4 <_init>:
 8011ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ac6:	bf00      	nop
 8011ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aca:	bc08      	pop	{r3}
 8011acc:	469e      	mov	lr, r3
 8011ace:	4770      	bx	lr

08011ad0 <_fini>:
 8011ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ad2:	bf00      	nop
 8011ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ad6:	bc08      	pop	{r3}
 8011ad8:	469e      	mov	lr, r3
 8011ada:	4770      	bx	lr

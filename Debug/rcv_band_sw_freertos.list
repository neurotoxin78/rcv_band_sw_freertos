
rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002674  08011458  08011458  00021458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013acc  08013acc  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08013acc  08013acc  00023acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ad4  08013ad4  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ad4  08013ad4  00023ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013ad8  08013ad8  00023ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08013adc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001cd6c  200001f0  08013ccc  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2001cf5c  08013ccc  0003cf5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028f2a  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000066e4  00000000  00000000  0005914a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002060  00000000  00000000  0005f830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d80  00000000  00000000  00061890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4e1  00000000  00000000  00063610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b8d5  00000000  00000000  00082af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5547  00000000  00000000  000ae3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015390d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a60  00000000  00000000  00153960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011440 	.word	0x08011440

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08011440 	.word	0x08011440

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <ARGB_Init>:
/**
 * @brief Init timer & prescalers
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8000ba6:	f005 fafd 	bl	80061a4 <HAL_RCC_GetPCLK2Freq>
 8000baa:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <ARGB_Init+0xd8>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <ARGB_Init+0x1c>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <ARGB_Init+0x1e>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	fb02 f303 	mul.w	r3, r2, r3
 8000bc6:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	4a2b      	ldr	r2, [pc, #172]	; (8000c7c <ARGB_Init+0xdc>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	607b      	str	r3, [r7, #4]
#endif

    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <ARGB_Init+0xe0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	3b01      	subs	r3, #1
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <ARGB_Init+0xe0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <ARGB_Init+0xe0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fdb7 	bl	8000768 <__aeabi_ui2d>
 8000bfa:	a31b      	add	r3, pc, #108	; (adr r3, 8000c68 <ARGB_Init+0xc8>)
 8000bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c00:	f7ff fb46 	bl	8000290 <__aeabi_dmul>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	4610      	mov	r0, r2
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f7ff fe26 	bl	800085c <__aeabi_d2uiz>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	3b01      	subs	r3, #1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <ARGB_Init+0xe4>)
 8000c1a:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fda3 	bl	8000768 <__aeabi_ui2d>
 8000c22:	a313      	add	r3, pc, #76	; (adr r3, 8000c70 <ARGB_Init+0xd0>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	f7ff fb32 	bl	8000290 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff fe12 	bl	800085c <__aeabi_d2uiz>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <ARGB_Init+0xe8>)
 8000c42:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <ARGB_Init+0xec>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <ARGB_Init+0xe0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2108      	movs	r1, #8
 8000c52:	4618      	mov	r0, r3
 8000c54:	f008 fa88 	bl	8009168 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f002 f931 	bl	8002ec0 <HAL_Delay>
    return ARGB_OK;
 8000c5e:	2302      	movs	r3, #2
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	1eb851ec 	.word	0x1eb851ec
 8000c6c:	3fe1eb85 	.word	0x3fe1eb85
 8000c70:	1eb851ec 	.word	0x1eb851ec
 8000c74:	3fd1eb85 	.word	0x3fd1eb85
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	014f8b59 	.word	0x014f8b59
 8000c80:	2000146c 	.word	0x2000146c
 8000c84:	2000020c 	.word	0x2000020c
 8000c88:	2000020d 	.word	0x2000020d
 8000c8c:	200002d6 	.word	0x200002d6

08000c90 <ARGB_Clear>:
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Clear(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f000 f873 	bl	8000d84 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
    return ARGB_OK;
 8000c9e:	2302      	movs	r3, #2
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <ARGB_SetRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4604      	mov	r4, r0
 8000cac:	4608      	mov	r0, r1
 8000cae:	4611      	mov	r1, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4623      	mov	r3, r4
 8000cb4:	80fb      	strh	r3, [r7, #6]
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	717b      	strb	r3, [r7, #5]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	713b      	strb	r3, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d005      	beq.n	8000cd4 <ARGB_SetRGB+0x30>
        u16_t _i = i / NUM_PIXELS;
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000ccc:	88fa      	ldrh	r2, [r7, #6]
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	80fb      	strh	r3, [r7, #6]
    }

    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <ARGB_SetRGB+0xd8>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	3301      	adds	r3, #1
 8000cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ce4:	797a      	ldrb	r2, [r7, #5]
 8000ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cea:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <ARGB_SetRGB+0xd8>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cfc:	793a      	ldrb	r2, [r7, #4]
 8000cfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d02:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <ARGB_SetRGB+0xd8>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d10:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d14:	78fa      	ldrb	r2, [r7, #3]
 8000d16:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d1a:	70fb      	strb	r3, [r7, #3]

#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000d1c:	793b      	ldrb	r3, [r7, #4]
 8000d1e:	21b0      	movs	r1, #176	; 0xb0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f9cb 	bl	80010bc <scale8>
 8000d26:	4603      	mov	r3, r0
 8000d28:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	21f0      	movs	r1, #240	; 0xf0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f9c4 	bl	80010bc <scale8>
 8000d34:	4603      	mov	r3, r0
 8000d36:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8000d38:	793b      	ldrb	r3, [r7, #4]
 8000d3a:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8000d3c:	797b      	ldrb	r3, [r7, #5]
 8000d3e:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8000d44:	88fa      	ldrh	r2, [r7, #6]
 8000d46:	4613      	mov	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <ARGB_SetRGB+0xdc>)
 8000d4e:	7b7a      	ldrb	r2, [r7, #13]
 8000d50:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000d52:	88fa      	ldrh	r2, [r7, #6]
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	4908      	ldr	r1, [pc, #32]	; (8000d80 <ARGB_SetRGB+0xdc>)
 8000d5e:	7b3a      	ldrb	r2, [r7, #12]
 8000d60:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000d62:	88fa      	ldrh	r2, [r7, #6]
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	4904      	ldr	r1, [pc, #16]	; (8000d80 <ARGB_SetRGB+0xdc>)
 8000d6e:	7afa      	ldrb	r2, [r7, #11]
 8000d70:	54ca      	strb	r2, [r1, r3]
#endif
    return ARGB_OK;
 8000d72:	2302      	movs	r3, #2
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd90      	pop	{r4, r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000210 	.word	0x20000210

08000d84 <ARGB_FillRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	71bb      	strb	r3, [r7, #6]
 8000d92:	4613      	mov	r3, r2
 8000d94:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	81fb      	strh	r3, [r7, #14]
 8000d9a:	e00b      	b.n	8000db4 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8000d9c:	89fb      	ldrh	r3, [r7, #14]
 8000d9e:	b298      	uxth	r0, r3
 8000da0:	797b      	ldrb	r3, [r7, #5]
 8000da2:	79ba      	ldrb	r2, [r7, #6]
 8000da4:	79f9      	ldrb	r1, [r7, #7]
 8000da6:	f7ff ff7d 	bl	8000ca4 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	81fb      	strh	r3, [r7, #14]
 8000db4:	89fb      	ldrh	r3, [r7, #14]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0ef      	beq.n	8000d9c <ARGB_FillRGB+0x18>
    return ARGB_OK;
 8000dbc:	2302      	movs	r3, #2
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8000dce:	4b9d      	ldr	r3, [pc, #628]	; (8001044 <ARGB_Show+0x27c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8000dd4:	4b9c      	ldr	r3, [pc, #624]	; (8001048 <ARGB_Show+0x280>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d105      	bne.n	8000dea <ARGB_Show+0x22>
 8000dde:	4b9b      	ldr	r3, [pc, #620]	; (800104c <ARGB_Show+0x284>)
 8000de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d001      	beq.n	8000dee <ARGB_Show+0x26>
        return ARGB_BUSY;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e15e      	b.n	80010ac <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	e0a6      	b.n	8000f42 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000df4:	4b96      	ldr	r3, [pc, #600]	; (8001050 <ARGB_Show+0x288>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	dd04      	ble.n	8000e16 <ARGB_Show+0x4e>
 8000e0c:	4b91      	ldr	r3, [pc, #580]	; (8001054 <ARGB_Show+0x28c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	e003      	b.n	8000e1e <ARGB_Show+0x56>
 8000e16:	4b90      	ldr	r3, [pc, #576]	; (8001058 <ARGB_Show+0x290>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4619      	mov	r1, r3
 8000e24:	4b8d      	ldr	r3, [pc, #564]	; (800105c <ARGB_Show+0x294>)
 8000e26:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e2a:	4b89      	ldr	r3, [pc, #548]	; (8001050 <ARGB_Show+0x288>)
 8000e2c:	785b      	ldrb	r3, [r3, #1]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dd04      	ble.n	8000e4c <ARGB_Show+0x84>
 8000e42:	4b84      	ldr	r3, [pc, #528]	; (8001054 <ARGB_Show+0x28c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	e003      	b.n	8000e54 <ARGB_Show+0x8c>
 8000e4c:	4b82      	ldr	r3, [pc, #520]	; (8001058 <ARGB_Show+0x290>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	3308      	adds	r3, #8
 8000e5a:	4a80      	ldr	r2, [pc, #512]	; (800105c <ARGB_Show+0x294>)
 8000e5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e60:	4b7b      	ldr	r3, [pc, #492]	; (8001050 <ARGB_Show+0x288>)
 8000e62:	789b      	ldrb	r3, [r3, #2]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	461a      	mov	r2, r3
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	dd04      	ble.n	8000e82 <ARGB_Show+0xba>
 8000e78:	4b76      	ldr	r3, [pc, #472]	; (8001054 <ARGB_Show+0x28c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4619      	mov	r1, r3
 8000e80:	e003      	b.n	8000e8a <ARGB_Show+0xc2>
 8000e82:	4b75      	ldr	r3, [pc, #468]	; (8001058 <ARGB_Show+0x290>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4619      	mov	r1, r3
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	3310      	adds	r3, #16
 8000e90:	4a72      	ldr	r2, [pc, #456]	; (800105c <ARGB_Show+0x294>)
 8000e92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e96:	4b6e      	ldr	r3, [pc, #440]	; (8001050 <ARGB_Show+0x288>)
 8000e98:	78db      	ldrb	r3, [r3, #3]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	dd04      	ble.n	8000eb8 <ARGB_Show+0xf0>
 8000eae:	4b69      	ldr	r3, [pc, #420]	; (8001054 <ARGB_Show+0x28c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	e003      	b.n	8000ec0 <ARGB_Show+0xf8>
 8000eb8:	4b67      	ldr	r3, [pc, #412]	; (8001058 <ARGB_Show+0x290>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	3318      	adds	r3, #24
 8000ec6:	4a65      	ldr	r2, [pc, #404]	; (800105c <ARGB_Show+0x294>)
 8000ec8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000ecc:	4b60      	ldr	r3, [pc, #384]	; (8001050 <ARGB_Show+0x288>)
 8000ece:	791b      	ldrb	r3, [r3, #4]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dd04      	ble.n	8000eee <ARGB_Show+0x126>
 8000ee4:	4b5b      	ldr	r3, [pc, #364]	; (8001054 <ARGB_Show+0x28c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4619      	mov	r1, r3
 8000eec:	e003      	b.n	8000ef6 <ARGB_Show+0x12e>
 8000eee:	4b5a      	ldr	r3, [pc, #360]	; (8001058 <ARGB_Show+0x290>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3320      	adds	r3, #32
 8000efc:	4a57      	ldr	r2, [pc, #348]	; (800105c <ARGB_Show+0x294>)
 8000efe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000f02:	4b53      	ldr	r3, [pc, #332]	; (8001050 <ARGB_Show+0x288>)
 8000f04:	795b      	ldrb	r3, [r3, #5]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	dd04      	ble.n	8000f24 <ARGB_Show+0x15c>
 8000f1a:	4b4e      	ldr	r3, [pc, #312]	; (8001054 <ARGB_Show+0x28c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4619      	mov	r1, r3
 8000f22:	e003      	b.n	8000f2c <ARGB_Show+0x164>
 8000f24:	4b4c      	ldr	r3, [pc, #304]	; (8001058 <ARGB_Show+0x290>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	3328      	adds	r3, #40	; 0x28
 8000f32:	4a4a      	ldr	r2, [pc, #296]	; (800105c <ARGB_Show+0x294>)
 8000f34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b07      	cmp	r3, #7
 8000f48:	f67f af54 	bls.w	8000df4 <ARGB_Show+0x2c>
#endif
        }

        //HAL_TIM_DMABurst_WriteStart(&TIM_HANDLE, TIM_DMABASE_ARR)

        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000f50:	e0a4      	b.n	800109c <ARGB_Show+0x2d4>

            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8000f52:	4b43      	ldr	r3, [pc, #268]	; (8001060 <ARGB_Show+0x298>)
 8000f54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d102      	bne.n	8000f64 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	73fb      	strb	r3, [r7, #15]
                continue;
 8000f62:	e09b      	b.n	800109c <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8000f64:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <ARGB_Show+0x298>)
 8000f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d11d      	bne.n	8000fac <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8000f70:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <ARGB_Show+0x298>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8000f78:	4b39      	ldr	r3, [pc, #228]	; (8001060 <ARGB_Show+0x298>)
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	4a39      	ldr	r2, [pc, #228]	; (8001064 <ARGB_Show+0x29c>)
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8000f80:	4b37      	ldr	r3, [pc, #220]	; (8001060 <ARGB_Show+0x298>)
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	4a38      	ldr	r2, [pc, #224]	; (8001068 <ARGB_Show+0x2a0>)
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8000f88:	4b35      	ldr	r3, [pc, #212]	; (8001060 <ARGB_Show+0x298>)
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	4a37      	ldr	r2, [pc, #220]	; (800106c <ARGB_Show+0x2a4>)
 8000f8e:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <ARGB_Show+0x298>)
 8000f92:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000f94:	4931      	ldr	r1, [pc, #196]	; (800105c <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8000f96:	4b32      	ldr	r3, [pc, #200]	; (8001060 <ARGB_Show+0x298>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	2330      	movs	r3, #48	; 0x30
 8000fa0:	f002 fade 	bl	8003560 <HAL_DMA_Start_IT>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <ARGB_Show+0x1f0>
 8000faa:	e002      	b.n	8000fb2 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fb0:	e074      	b.n	800109c <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fb6:	e071      	b.n	800109c <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8000fb8:	4b29      	ldr	r3, [pc, #164]	; (8001060 <ARGB_Show+0x298>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <ARGB_Show+0x298>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fc6:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8000fc8:	4b25      	ldr	r3, [pc, #148]	; (8001060 <ARGB_Show+0x298>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a28      	ldr	r2, [pc, #160]	; (8001070 <ARGB_Show+0x2a8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d107      	bne.n	8000fe2 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <ARGB_Show+0x298>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <ARGB_Show+0x298>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fe0:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <ARGB_Show+0x298>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a22      	ldr	r2, [pc, #136]	; (8001070 <ARGB_Show+0x2a8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d018      	beq.n	800101e <ARGB_Show+0x256>
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <ARGB_Show+0x298>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff4:	d013      	beq.n	800101e <ARGB_Show+0x256>
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <ARGB_Show+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <ARGB_Show+0x2ac>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00e      	beq.n	800101e <ARGB_Show+0x256>
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <ARGB_Show+0x298>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <ARGB_Show+0x2b0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d009      	beq.n	800101e <ARGB_Show+0x256>
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <ARGB_Show+0x298>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1b      	ldr	r2, [pc, #108]	; (800107c <ARGB_Show+0x2b4>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d004      	beq.n	800101e <ARGB_Show+0x256>
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <ARGB_Show+0x298>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a19      	ldr	r2, [pc, #100]	; (8001080 <ARGB_Show+0x2b8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d132      	bne.n	8001084 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <ARGB_Show+0x298>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	2b06      	cmp	r3, #6
 800102e:	d032      	beq.n	8001096 <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <ARGB_Show+0x298>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <ARGB_Show+0x298>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 0201 	orr.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001040:	e029      	b.n	8001096 <ARGB_Show+0x2ce>
 8001042:	bf00      	nop
 8001044:	200002d6 	.word	0x200002d6
 8001048:	200002d4 	.word	0x200002d4
 800104c:	200014b4 	.word	0x200014b4
 8001050:	20000210 	.word	0x20000210
 8001054:	2000020c 	.word	0x2000020c
 8001058:	2000020d 	.word	0x2000020d
 800105c:	20000214 	.word	0x20000214
 8001060:	2000146c 	.word	0x2000146c
 8001064:	080010e5 	.word	0x080010e5
 8001068:	08001365 	.word	0x08001365
 800106c:	08008a75 	.word	0x08008a75
 8001070:	40010000 	.word	0x40010000
 8001074:	40000400 	.word	0x40000400
 8001078:	40000800 	.word	0x40000800
 800107c:	40000c00 	.word	0x40000c00
 8001080:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <ARGB_Show+0x2ec>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <ARGB_Show+0x2ec>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e000      	b.n	8001098 <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001096:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f47f af57 	bne.w	8000f52 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <ARGB_Show+0x2f0>)
 80010a6:	2202      	movs	r2, #2
 80010a8:	801a      	strh	r2, [r3, #0]

        return ARGB_OK;
 80010aa:	2302      	movs	r3, #2
    }
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000146c 	.word	0x2000146c
 80010b8:	200002d4 	.word	0x200002d4

080010bc <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	79ba      	ldrb	r2, [r7, #6]
 80010d0:	fb02 f303 	mul.w	r3, r2, r3
 80010d4:	121b      	asrs	r3, r3, #8
 80010d6:	b2db      	uxtb	r3, r3
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f0:	60fb      	str	r3, [r7, #12]

    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d10b      	bne.n	8001114 <ARGB_TIM_DMADelayPulseCplt+0x30>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2201      	movs	r2, #1
 8001100:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d136      	bne.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001112:	e031      	b.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	d10b      	bne.n	8001136 <ARGB_TIM_DMADelayPulseCplt+0x52>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2202      	movs	r2, #2
 8001122:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d125      	bne.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001134:	e020      	b.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	429a      	cmp	r2, r3
 800113e:	d10b      	bne.n	8001158 <ARGB_TIM_DMADelayPulseCplt+0x74>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2204      	movs	r2, #4
 8001144:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d114      	bne.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001156:	e00f      	b.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	429a      	cmp	r2, r3
 8001160:	d10a      	bne.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2208      	movs	r2, #8
 8001166:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001178:	4b72      	ldr	r3, [pc, #456]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d17b      	bne.n	800127a <ARGB_TIM_DMADelayPulseCplt+0x196>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001182:	2300      	movs	r3, #0
 8001184:	72fb      	strb	r3, [r7, #11]
 8001186:	e06c      	b.n	8001262 <ARGB_TIM_DMADelayPulseCplt+0x17e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001188:	4b6e      	ldr	r3, [pc, #440]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	4a6c      	ldr	r2, [pc, #432]	; (8001348 <ARGB_TIM_DMADelayPulseCplt+0x264>)
 8001198:	5cd3      	ldrb	r3, [r2, r3]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dd04      	ble.n	80011b8 <ARGB_TIM_DMADelayPulseCplt+0xd4>
 80011ae:	4b67      	ldr	r3, [pc, #412]	; (800134c <ARGB_TIM_DMADelayPulseCplt+0x268>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4619      	mov	r1, r3
 80011b6:	e003      	b.n	80011c0 <ARGB_TIM_DMADelayPulseCplt+0xdc>
 80011b8:	4b65      	ldr	r3, [pc, #404]	; (8001350 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4619      	mov	r1, r3
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	3318      	adds	r3, #24
 80011c6:	4a63      	ldr	r2, [pc, #396]	; (8001354 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 80011c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011cc:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	3301      	adds	r3, #1
 80011dc:	4a5a      	ldr	r2, [pc, #360]	; (8001348 <ARGB_TIM_DMADelayPulseCplt+0x264>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	dd04      	ble.n	80011fe <ARGB_TIM_DMADelayPulseCplt+0x11a>
 80011f4:	4b55      	ldr	r3, [pc, #340]	; (800134c <ARGB_TIM_DMADelayPulseCplt+0x268>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	e003      	b.n	8001206 <ARGB_TIM_DMADelayPulseCplt+0x122>
 80011fe:	4b54      	ldr	r3, [pc, #336]	; (8001350 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4619      	mov	r1, r3
 8001206:	7afb      	ldrb	r3, [r7, #11]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3320      	adds	r3, #32
 800120c:	4a51      	ldr	r2, [pc, #324]	; (8001354 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 800120e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001212:	4b4c      	ldr	r3, [pc, #304]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	3302      	adds	r3, #2
 8001222:	4a49      	ldr	r2, [pc, #292]	; (8001348 <ARGB_TIM_DMADelayPulseCplt+0x264>)
 8001224:	5cd3      	ldrb	r3, [r2, r3]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	2b00      	cmp	r3, #0
 8001238:	dd04      	ble.n	8001244 <ARGB_TIM_DMADelayPulseCplt+0x160>
 800123a:	4b44      	ldr	r3, [pc, #272]	; (800134c <ARGB_TIM_DMADelayPulseCplt+0x268>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	e003      	b.n	800124c <ARGB_TIM_DMADelayPulseCplt+0x168>
 8001244:	4b42      	ldr	r3, [pc, #264]	; (8001350 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4619      	mov	r1, r3
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	3328      	adds	r3, #40	; 0x28
 8001252:	4a40      	ldr	r2, [pc, #256]	; (8001354 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 8001254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	3301      	adds	r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	72fb      	strb	r3, [r7, #11]
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b07      	cmp	r3, #7
 8001268:	d98e      	bls.n	8001188 <ARGB_TIM_DMADelayPulseCplt+0xa4>
#endif
        }
        BUF_COUNTER++;
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b29a      	uxth	r2, r3
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001276:	801a      	strh	r2, [r3, #0]
 8001278:	e05d      	b.n	8001336 <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800127a:	4b32      	ldr	r3, [pc, #200]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d80c      	bhi.n	800129e <ARGB_TIM_DMADelayPulseCplt+0x1ba>
        memset((u32_t *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // second part
 8001284:	2260      	movs	r2, #96	; 0x60
 8001286:	2100      	movs	r1, #0
 8001288:	4833      	ldr	r0, [pc, #204]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x274>)
 800128a:	f00f fc01 	bl	8010a90 <memset>
        BUF_COUNTER++;
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	3301      	adds	r3, #1
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e04b      	b.n	8001336 <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012b2:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 f9b7 	bl	800362c <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a26      	ldr	r2, [pc, #152]	; (800135c <ARGB_TIM_DMADelayPulseCplt+0x278>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d117      	bne.n	80012f8 <ARGB_TIM_DMADelayPulseCplt+0x214>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a1a      	ldr	r2, [r3, #32]
 80012ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10f      	bne.n	80012f8 <ARGB_TIM_DMADelayPulseCplt+0x214>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6a1a      	ldr	r2, [r3, #32]
 80012de:	f240 4344 	movw	r3, #1092	; 0x444
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d107      	bne.n	80012f8 <ARGB_TIM_DMADelayPulseCplt+0x214>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012f6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6a1a      	ldr	r2, [r3, #32]
 80012fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10f      	bne.n	8001328 <ARGB_TIM_DMADelayPulseCplt+0x244>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6a1a      	ldr	r2, [r3, #32]
 800130e:	f240 4344 	movw	r3, #1092	; 0x444
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d107      	bne.n	8001328 <ARGB_TIM_DMADelayPulseCplt+0x244>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST = ARGB_READY;
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <ARGB_TIM_DMADelayPulseCplt+0x27c>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
    }

    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	771a      	strb	r2, [r3, #28]
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200002d4 	.word	0x200002d4
 8001348:	20000210 	.word	0x20000210
 800134c:	2000020c 	.word	0x2000020c
 8001350:	2000020d 	.word	0x2000020d
 8001354:	20000214 	.word	0x20000214
 8001358:	20000274 	.word	0x20000274
 800135c:	40010000 	.word	0x40010000
 8001360:	200002d6 	.word	0x200002d6

08001364 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001370:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <ARGB_TIM_DMADelayPulseHalfCplt+0x150>)
 8001376:	4293      	cmp	r3, r2
 8001378:	f040 8098 	bne.w	80014ac <ARGB_TIM_DMADelayPulseHalfCplt+0x148>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>)
 8001380:	4293      	cmp	r3, r2
 8001382:	f040 8093 	bne.w	80014ac <ARGB_TIM_DMADelayPulseHalfCplt+0x148>

    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001386:	4b4d      	ldr	r3, [pc, #308]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d17b      	bne.n	8001488 <ARGB_TIM_DMADelayPulseHalfCplt+0x124>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001390:	2300      	movs	r3, #0
 8001392:	72fb      	strb	r3, [r7, #11]
 8001394:	e06c      	b.n	8001470 <ARGB_TIM_DMADelayPulseHalfCplt+0x10c>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001396:	4b49      	ldr	r3, [pc, #292]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	4a46      	ldr	r2, [pc, #280]	; (80014c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	7afb      	ldrb	r3, [r7, #11]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	dd04      	ble.n	80013c6 <ARGB_TIM_DMADelayPulseHalfCplt+0x62>
 80013bc:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	e003      	b.n	80013ce <ARGB_TIM_DMADelayPulseHalfCplt+0x6a>
 80013c6:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	7afb      	ldrb	r3, [r7, #11]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4619      	mov	r1, r3
 80013d4:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013d6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a35      	ldr	r2, [pc, #212]	; (80014c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	7afb      	ldrb	r3, [r7, #11]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dd04      	ble.n	800140c <ARGB_TIM_DMADelayPulseHalfCplt+0xa8>
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	4619      	mov	r1, r3
 800140a:	e003      	b.n	8001414 <ARGB_TIM_DMADelayPulseHalfCplt+0xb0>
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4619      	mov	r1, r3
 8001414:	7afb      	ldrb	r3, [r7, #11]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	3308      	adds	r3, #8
 800141a:	4a2c      	ldr	r2, [pc, #176]	; (80014cc <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800141c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	3302      	adds	r3, #2
 8001430:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001444:	2b00      	cmp	r3, #0
 8001446:	dd04      	ble.n	8001452 <ARGB_TIM_DMADelayPulseHalfCplt+0xee>
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	e003      	b.n	800145a <ARGB_TIM_DMADelayPulseHalfCplt+0xf6>
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4619      	mov	r1, r3
 800145a:	7afb      	ldrb	r3, [r7, #11]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3310      	adds	r3, #16
 8001460:	4a1a      	ldr	r2, [pc, #104]	; (80014cc <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001462:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001466:	7afb      	ldrb	r3, [r7, #11]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	3301      	adds	r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	72fb      	strb	r3, [r7, #11]
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b07      	cmp	r3, #7
 8001476:	d98e      	bls.n	8001396 <ARGB_TIM_DMADelayPulseHalfCplt+0x32>
#endif
        }
        BUF_COUNTER++;
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	3301      	adds	r3, #1
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001484:	801a      	strh	r2, [r3, #0]
 8001486:	e012      	b.n	80014ae <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d80d      	bhi.n	80014ae <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
        memset((u32_t*) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // first part
 8001492:	2260      	movs	r2, #96	; 0x60
 8001494:	2100      	movs	r1, #0
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001498:	f00f fafa 	bl	8010a90 <memset>
        BUF_COUNTER++;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014a8:	801a      	strh	r2, [r3, #0]
 80014aa:	e000      	b.n	80014ae <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80014ac:	bf00      	nop
    }
}
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200014b4 	.word	0x200014b4
 80014b8:	2000146c 	.word	0x2000146c
 80014bc:	200002d4 	.word	0x200002d4
 80014c0:	20000210 	.word	0x20000210
 80014c4:	2000020c 	.word	0x2000020c
 80014c8:	2000020d 	.word	0x2000020d
 80014cc:	20000214 	.word	0x20000214

080014d0 <displayBand>:
int currentBand = 0;                          // First band. For this case, AM is the current band.
char buff[20];
uint32_t ticks;

void displayBand(int band_index)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af04      	add	r7, sp, #16
 80014d6:	6078      	str	r0, [r7, #4]
    if(band_index != lastBand + 1 )
 80014d8:	2304      	movs	r3, #4
 80014da:	3301      	adds	r3, #1
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d07d      	beq.n	80015de <displayBand+0x10e>
    {
        ST7735_FillRectangleFast(0,0,160,80,ST7735_COLOR565(10, 10, 10));
 80014e2:	f640 0341 	movw	r3, #2113	; 0x841
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2350      	movs	r3, #80	; 0x50
 80014ea:	22a0      	movs	r2, #160	; 0xa0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 ffbe 	bl	8002470 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,64,160,16,ST7735_COLOR565(50, 50, 50));
 80014f4:	f243 1386 	movw	r3, #12678	; 0x3186
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2310      	movs	r3, #16
 80014fc:	22a0      	movs	r2, #160	; 0xa0
 80014fe:	2140      	movs	r1, #64	; 0x40
 8001500:	2000      	movs	r0, #0
 8001502:	f000 ffb5 	bl	8002470 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,0,160,26,ST7735_COLOR565(50, 50, 50));
 8001506:	f243 1386 	movw	r3, #12678	; 0x3186
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	231a      	movs	r3, #26
 800150e:	22a0      	movs	r2, #160	; 0xa0
 8001510:	2100      	movs	r1, #0
 8001512:	2000      	movs	r0, #0
 8001514:	f000 ffac 	bl	8002470 <ST7735_FillRectangleFast>
        ST7735_WriteString(1, 2, band[band_index].name, Font_16x26, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(50, 50, 50));
 8001518:	4933      	ldr	r1, [pc, #204]	; (80015e8 <displayBand+0x118>)
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	6819      	ldr	r1, [r3, #0]
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <displayBand+0x11c>)
 800152a:	f243 1286 	movw	r2, #12678	; 0x3186
 800152e:	9202      	str	r2, [sp, #8]
 8001530:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8001534:	9201      	str	r2, [sp, #4]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	9200      	str	r2, [sp, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	460a      	mov	r2, r1
 800153e:	2102      	movs	r1, #2
 8001540:	2001      	movs	r0, #1
 8001542:	f000 fed8 	bl	80022f6 <ST7735_WriteString>
        // freq
       	sprintf(buff, "%s - %s", band[band_index].WminFreq, band[band_index].WmaxFreq);
 8001546:	4928      	ldr	r1, [pc, #160]	; (80015e8 <displayBand+0x118>)
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	440b      	add	r3, r1
 8001554:	3304      	adds	r3, #4
 8001556:	6819      	ldr	r1, [r3, #0]
 8001558:	4823      	ldr	r0, [pc, #140]	; (80015e8 <displayBand+0x118>)
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4403      	add	r3, r0
 8001566:	3308      	adds	r3, #8
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	460a      	mov	r2, r1
 800156c:	4920      	ldr	r1, [pc, #128]	; (80015f0 <displayBand+0x120>)
 800156e:	4821      	ldr	r0, [pc, #132]	; (80015f4 <displayBand+0x124>)
 8001570:	f00f fbf0 	bl	8010d54 <siprintf>
       	ST7735_WriteString(0, 29, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <displayBand+0x128>)
 8001576:	f640 0241 	movw	r2, #2113	; 0x841
 800157a:	9202      	str	r2, [sp, #8]
 800157c:	f244 52df 	movw	r2, #17887	; 0x45df
 8001580:	9201      	str	r2, [sp, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	9200      	str	r2, [sp, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a1a      	ldr	r2, [pc, #104]	; (80015f4 <displayBand+0x124>)
 800158a:	211d      	movs	r1, #29
 800158c:	2000      	movs	r0, #0
 800158e:	f000 feb2 	bl	80022f6 <ST7735_WriteString>
       	sprintf(buff, "%s - %s", band[band_index].NminFreq, band[band_index].NmaxFreq);
 8001592:	4915      	ldr	r1, [pc, #84]	; (80015e8 <displayBand+0x118>)
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	330c      	adds	r3, #12
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <displayBand+0x118>)
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4403      	add	r3, r0
 80015b2:	3310      	adds	r3, #16
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	460a      	mov	r2, r1
 80015b8:	490d      	ldr	r1, [pc, #52]	; (80015f0 <displayBand+0x120>)
 80015ba:	480e      	ldr	r0, [pc, #56]	; (80015f4 <displayBand+0x124>)
 80015bc:	f00f fbca 	bl	8010d54 <siprintf>
       	ST7735_WriteString(0, 46, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <displayBand+0x128>)
 80015c2:	f640 0241 	movw	r2, #2113	; 0x841
 80015c6:	9202      	str	r2, [sp, #8]
 80015c8:	f244 52df 	movw	r2, #17887	; 0x45df
 80015cc:	9201      	str	r2, [sp, #4]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	9200      	str	r2, [sp, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <displayBand+0x124>)
 80015d6:	212e      	movs	r1, #46	; 0x2e
 80015d8:	2000      	movs	r0, #0
 80015da:	f000 fe8c 	bl	80022f6 <ST7735_WriteString>
    }

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000004 	.word	0x20000004
 80015ec:	20000084 	.word	0x20000084
 80015f0:	080114fc 	.word	0x080114fc
 80015f4:	200002d8 	.word	0x200002d8
 80015f8:	2000007c 	.word	0x2000007c

080015fc <setBand>:
    HAL_GPIO_WritePin(GPIOB, CHIP, GPIO_PIN_SET); // HIGH
	delay_us(300);
}

void setBand(int band_index)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af04      	add	r7, sp, #16
 8001602:	6078      	str	r0, [r7, #4]
	ticks = band[band_index].ticks; //- START_RESISTANCE_KOM;
 8001604:	4912      	ldr	r1, [pc, #72]	; (8001650 <setBand+0x54>)
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	3314      	adds	r3, #20
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a0f      	ldr	r2, [pc, #60]	; (8001654 <setBand+0x58>)
 8001618:	6013      	str	r3, [r2, #0]
	sprintf(buff, "R:%ld", ticks);
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <setBand+0x58>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	490d      	ldr	r1, [pc, #52]	; (8001658 <setBand+0x5c>)
 8001622:	480e      	ldr	r0, [pc, #56]	; (800165c <setBand+0x60>)
 8001624:	f00f fb96 	bl	8010d54 <siprintf>
	ST7735_WriteString(0, 64, buff, Font_11x18, ST7735_COLOR565(165, 214, 2), ST7735_COLOR565(50, 50, 50));
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <setBand+0x64>)
 800162a:	f243 1286 	movw	r2, #12678	; 0x3186
 800162e:	9202      	str	r2, [sp, #8]
 8001630:	f24a 62a0 	movw	r2, #42656	; 0xa6a0
 8001634:	9201      	str	r2, [sp, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	9200      	str	r2, [sp, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <setBand+0x60>)
 800163e:	2140      	movs	r1, #64	; 0x40
 8001640:	2000      	movs	r0, #0
 8001642:	f000 fe58 	bl	80022f6 <ST7735_WriteString>
	//setResistanceUP(CS_PIN, ticks, false);
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000004 	.word	0x20000004
 8001654:	200002ec 	.word	0x200002ec
 8001658:	08011504 	.word	0x08011504
 800165c:	200002d8 	.word	0x200002d8
 8001660:	2000007c 	.word	0x2000007c

08001664 <fadeIN>:
    ARGB_Clear(); // Clear stirp
    while (ARGB_Show() != ARGB_OK); // Update - Option 1
}

void fadeIN(uint8_t min, uint8_t max, uint8_t speed)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
 800166e:	460b      	mov	r3, r1
 8001670:	71bb      	strb	r3, [r7, #6]
 8001672:	4613      	mov	r3, r2
 8001674:	717b      	strb	r3, [r7, #5]
	uint16_t j;
	for (j = min; j < max; j++) {
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	81fb      	strh	r3, [r7, #14]
 800167a:	e01b      	b.n	80016b4 <fadeIN+0x50>
	    ARGB_FillRGB(0, 0, j); // Fill all the strip with Red
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	2100      	movs	r1, #0
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fb7d 	bl	8000d84 <ARGB_FillRGB>
	    while (!ARGB_Show());
 800168a:	bf00      	nop
 800168c:	f7ff fb9c 	bl	8000dc8 <ARGB_Show>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0fa      	beq.n	800168c <fadeIN+0x28>
	    delay_us(speed * 1000);
 8001696:	797b      	ldrb	r3, [r7, #5]
 8001698:	b29b      	uxth	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	0152      	lsls	r2, r2, #5
 800169e:	1ad2      	subs	r2, r2, r3
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fb6d 	bl	8001d88 <delay_us>
	for (j = min; j < max; j++) {
 80016ae:	89fb      	ldrh	r3, [r7, #14]
 80016b0:	3301      	adds	r3, #1
 80016b2:	81fb      	strh	r3, [r7, #14]
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	89fa      	ldrh	r2, [r7, #14]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d3de      	bcc.n	800167c <fadeIN+0x18>
	}
	ARGB_Clear(); // Clear stirp
 80016be:	f7ff fae7 	bl	8000c90 <ARGB_Clear>
	while (ARGB_Show() != ARGB_OK); // Update - Option 1
 80016c2:	bf00      	nop
 80016c4:	f7ff fb80 	bl	8000dc8 <ARGB_Show>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d1fa      	bne.n	80016c4 <fadeIN+0x60>
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <fadeOUT>:
void fadeOUT(uint8_t min, uint8_t max, uint8_t speed)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	460b      	mov	r3, r1
 80016e4:	71bb      	strb	r3, [r7, #6]
 80016e6:	4613      	mov	r3, r2
 80016e8:	717b      	strb	r3, [r7, #5]
	uint16_t j;
	for (j = max; j > min; j--) {
 80016ea:	79bb      	ldrb	r3, [r7, #6]
 80016ec:	81fb      	strh	r3, [r7, #14]
 80016ee:	e01b      	b.n	8001728 <fadeOUT+0x50>
	    ARGB_FillRGB(0, 0, j); // Fill all the strip with Red
 80016f0:	89fb      	ldrh	r3, [r7, #14]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	2100      	movs	r1, #0
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fb43 	bl	8000d84 <ARGB_FillRGB>
	    while (!ARGB_Show());
 80016fe:	bf00      	nop
 8001700:	f7ff fb62 	bl	8000dc8 <ARGB_Show>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0fa      	beq.n	8001700 <fadeOUT+0x28>
	    delay_us(speed * 1000);
 800170a:	797b      	ldrb	r3, [r7, #5]
 800170c:	b29b      	uxth	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	0152      	lsls	r2, r2, #5
 8001712:	1ad2      	subs	r2, r2, r3
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	b29b      	uxth	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fb33 	bl	8001d88 <delay_us>
	for (j = max; j > min; j--) {
 8001722:	89fb      	ldrh	r3, [r7, #14]
 8001724:	3b01      	subs	r3, #1
 8001726:	81fb      	strh	r3, [r7, #14]
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	b29b      	uxth	r3, r3
 800172c:	89fa      	ldrh	r2, [r7, #14]
 800172e:	429a      	cmp	r2, r3
 8001730:	d8de      	bhi.n	80016f0 <fadeOUT+0x18>
	}
	ARGB_Clear(); // Clear stirp
 8001732:	f7ff faad 	bl	8000c90 <ARGB_Clear>
	while (ARGB_Show() != ARGB_OK); // Update - Option 1
 8001736:	bf00      	nop
 8001738:	f7ff fb46 	bl	8000dc8 <ARGB_Show>
 800173c:	4603      	mov	r3, r0
 800173e:	2b02      	cmp	r3, #2
 8001740:	d1fa      	bne.n	8001738 <fadeOUT+0x60>
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <MX_DMA_Init+0x3c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <MX_DMA_Init+0x3c>)
 800175c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <MX_DMA_Init+0x3c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2105      	movs	r1, #5
 8001772:	202f      	movs	r0, #47	; 0x2f
 8001774:	f001 fc96 	bl	80030a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001778:	202f      	movs	r0, #47	; 0x2f
 800177a:	f001 fcbf 	bl	80030fc <HAL_NVIC_EnableIRQ>

}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800

0800178c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <getRunTimeCounterValue+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20001308 	.word	0x20001308

080017b4 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	vTaskList(taskListStatus);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <vApplicationIdleHook+0x10>)
 80017ba:	f00d fbc5 	bl	800ef48 <vTaskList>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200002f0 	.word	0x200002f0

080017c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &EncoderQueue_attributes);
 80017cc:	4a18      	ldr	r2, [pc, #96]	; (8001830 <MX_FREERTOS_Init+0x68>)
 80017ce:	2102      	movs	r1, #2
 80017d0:	2001      	movs	r0, #1
 80017d2:	f00b fb12 	bl	800cdfa <osMessageQueueNew>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a16      	ldr	r2, [pc, #88]	; (8001834 <MX_FREERTOS_Init+0x6c>)
 80017da:	6013      	str	r3, [r2, #0]

  /* creation of ButtonQueue */
  ButtonQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &ButtonQueue_attributes);
 80017dc:	4a16      	ldr	r2, [pc, #88]	; (8001838 <MX_FREERTOS_Init+0x70>)
 80017de:	2102      	movs	r1, #2
 80017e0:	2001      	movs	r0, #1
 80017e2:	f00b fb0a 	bl	800cdfa <osMessageQueueNew>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <MX_FREERTOS_Init+0x74>)
 80017ea:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017ec:	4a14      	ldr	r2, [pc, #80]	; (8001840 <MX_FREERTOS_Init+0x78>)
 80017ee:	2100      	movs	r1, #0
 80017f0:	4814      	ldr	r0, [pc, #80]	; (8001844 <MX_FREERTOS_Init+0x7c>)
 80017f2:	f00b fa55 	bl	800cca0 <osThreadNew>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <MX_FREERTOS_Init+0x80>)
 80017fa:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 80017fc:	4a13      	ldr	r2, [pc, #76]	; (800184c <MX_FREERTOS_Init+0x84>)
 80017fe:	2100      	movs	r1, #0
 8001800:	4813      	ldr	r0, [pc, #76]	; (8001850 <MX_FREERTOS_Init+0x88>)
 8001802:	f00b fa4d 	bl	800cca0 <osThreadNew>
 8001806:	4603      	mov	r3, r0
 8001808:	4a12      	ldr	r2, [pc, #72]	; (8001854 <MX_FREERTOS_Init+0x8c>)
 800180a:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <MX_FREERTOS_Init+0x90>)
 800180e:	2100      	movs	r1, #0
 8001810:	4812      	ldr	r0, [pc, #72]	; (800185c <MX_FREERTOS_Init+0x94>)
 8001812:	f00b fa45 	bl	800cca0 <osThreadNew>
 8001816:	4603      	mov	r3, r0
 8001818:	4a11      	ldr	r2, [pc, #68]	; (8001860 <MX_FREERTOS_Init+0x98>)
 800181a:	6013      	str	r3, [r2, #0]

  /* creation of beaconTask */
  beaconTaskHandle = osThreadNew(StartBeaconTask, NULL, &beaconTask_attributes);
 800181c:	4a11      	ldr	r2, [pc, #68]	; (8001864 <MX_FREERTOS_Init+0x9c>)
 800181e:	2100      	movs	r1, #0
 8001820:	4811      	ldr	r0, [pc, #68]	; (8001868 <MX_FREERTOS_Init+0xa0>)
 8001822:	f00b fa3d 	bl	800cca0 <osThreadNew>
 8001826:	4603      	mov	r3, r0
 8001828:	4a10      	ldr	r2, [pc, #64]	; (800186c <MX_FREERTOS_Init+0xa4>)
 800182a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	08013970 	.word	0x08013970
 8001834:	20001300 	.word	0x20001300
 8001838:	08013988 	.word	0x08013988
 800183c:	20001304 	.word	0x20001304
 8001840:	080138e0 	.word	0x080138e0
 8001844:	08001871 	.word	0x08001871
 8001848:	200012f0 	.word	0x200012f0
 800184c:	08013904 	.word	0x08013904
 8001850:	08001889 	.word	0x08001889
 8001854:	200012f4 	.word	0x200012f4
 8001858:	08013928 	.word	0x08013928
 800185c:	08001945 	.word	0x08001945
 8001860:	200012f8 	.word	0x200012f8
 8001864:	0801394c 	.word	0x0801394c
 8001868:	08001a35 	.word	0x08001a35
 800186c:	200012fc 	.word	0x200012fc

08001870 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001878:	f00e fbd8 	bl	801002c <MX_USB_DEVICE_Init>
		//CDC_Transmit_FS(buff, sizeof(buff));
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		//delay_us(1000);
		//fadeIN(0,100,2);
		//fadeOUT(0,100,2);
		osDelay(1000);
 800187c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001880:	f00b faa0 	bl	800cdc4 <osDelay>
 8001884:	e7fa      	b.n	800187c <StartDefaultTask+0xc>
	...

08001888 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	osStatus_t taskMessageHandler;
	int32_t counter = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
	int16_t button = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	81fb      	strh	r3, [r7, #14]
	int32_t last_counter = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
	int16_t max_index = 5;
 800189c:	2305      	movs	r3, #5
 800189e:	837b      	strh	r3, [r7, #26]
	ST7735_FillScreenFast(ST7735_BLACK);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f000 fe7a 	bl	800259a <ST7735_FillScreenFast>
	displayBand(last_counter);
 80018a6:	69f8      	ldr	r0, [r7, #28]
 80018a8:	f7ff fe12 	bl	80014d0 <displayBand>
	setBand(last_counter);
 80018ac:	69f8      	ldr	r0, [r7, #28]
 80018ae:	f7ff fea5 	bl	80015fc <setBand>
	for (;;) {
		//Encoder Rotate
		taskMessageHandler = osMessageQueueGet(EncoderQueueHandle, &counter, 0,
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <StartDisplayTask+0xb4>)
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	f107 0110 	add.w	r1, r7, #16
 80018ba:	2300      	movs	r3, #0
 80018bc:	2200      	movs	r2, #0
 80018be:	f00b fb6f 	bl	800cfa0 <osMessageQueueGet>
 80018c2:	6178      	str	r0, [r7, #20]
				0);
		if (taskMessageHandler == osOK)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d12b      	bne.n	8001922 <StartDisplayTask+0x9a>
		{
			if (counter == 2) {
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d113      	bne.n	80018f8 <StartDisplayTask+0x70>
				if (last_counter != max_index - 1) {
 80018d0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d005      	beq.n	80018e8 <StartDisplayTask+0x60>
					last_counter += 1;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	3301      	adds	r3, #1
 80018e0:	61fb      	str	r3, [r7, #28]
					counter = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	e003      	b.n	80018f0 <StartDisplayTask+0x68>
				} else {
					last_counter = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
					counter = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
				}
				displayBand(last_counter);
 80018f0:	69f8      	ldr	r0, [r7, #28]
 80018f2:	f7ff fded 	bl	80014d0 <displayBand>
 80018f6:	e014      	b.n	8001922 <StartDisplayTask+0x9a>
				//setBand(last_counter);
			} else if (counter == 1) {
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d111      	bne.n	8001922 <StartDisplayTask+0x9a>
				if (last_counter != 0) {
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <StartDisplayTask+0x88>
					last_counter -= 1;
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3b01      	subs	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
					counter = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	e005      	b.n	800191c <StartDisplayTask+0x94>
				} else {
					last_counter = max_index - 1;
 8001910:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001914:	3b01      	subs	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
					counter = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
				}
				displayBand(last_counter);
 800191c:	69f8      	ldr	r0, [r7, #28]
 800191e:	f7ff fdd7 	bl	80014d0 <displayBand>
			} else {

			}
		}
		//Button click
		osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <StartDisplayTask+0xb8>)
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	f107 010e 	add.w	r1, r7, #14
 800192a:	2300      	movs	r3, #0
 800192c:	2200      	movs	r2, #0
 800192e:	f00b fb37 	bl	800cfa0 <osMessageQueueGet>
		if (button) {

		}
		osDelay(1000);
 8001932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001936:	f00b fa45 	bl	800cdc4 <osDelay>
		taskMessageHandler = osMessageQueueGet(EncoderQueueHandle, &counter, 0,
 800193a:	e7ba      	b.n	80018b2 <StartDisplayTask+0x2a>
 800193c:	20001300 	.word	0x20001300
 8001940:	20001304 	.word	0x20001304

08001944 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
	int32_t counter = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	76fb      	strb	r3, [r7, #27]
	uint8_t buttonSend = 1;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <StartEncoderTask+0xe0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	617b      	str	r3, [r7, #20]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3b01      	subs	r3, #1
 8001968:	b29b      	uxth	r3, r3
 800196a:	0fda      	lsrs	r2, r3, #31
 800196c:	4413      	add	r3, r2
 800196e:	105b      	asrs	r3, r3, #1
 8001970:	425b      	negs	r3, r3
 8001972:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001976:	337f      	adds	r3, #127	; 0x7f
 8001978:	617b      	str	r3, [r7, #20]
		if (currCounter != prevCounter) {
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	429a      	cmp	r2, r3
 8001980:	d038      	beq.n	80019f4 <StartEncoderTask+0xb0>
			if (currCounter > prevCounter) {
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	429a      	cmp	r2, r3
 8001988:	dd17      	ble.n	80019ba <StartEncoderTask+0x76>
				counter = 1;
 800198a:	2301      	movs	r3, #1
 800198c:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <StartEncoderTask+0xe4>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	f107 0110 	add.w	r1, r7, #16
 8001996:	2300      	movs	r3, #0
 8001998:	2200      	movs	r2, #0
 800199a:	f00b faa1 	bl	800cee0 <osMessageQueuePut>
				osDelay(250);
 800199e:	20fa      	movs	r0, #250	; 0xfa
 80019a0:	f00b fa10 	bl	800cdc4 <osDelay>
				fadeIN(0,100,1);
 80019a4:	2201      	movs	r2, #1
 80019a6:	2164      	movs	r1, #100	; 0x64
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff fe5b 	bl	8001664 <fadeIN>
				fadeOUT(0,100,1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	2164      	movs	r1, #100	; 0x64
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff fe90 	bl	80016d8 <fadeOUT>
 80019b8:	e01a      	b.n	80019f0 <StartEncoderTask+0xac>
			} else if (currCounter < prevCounter) {
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	429a      	cmp	r2, r3
 80019c0:	da16      	bge.n	80019f0 <StartEncoderTask+0xac>
				counter = 2;
 80019c2:	2302      	movs	r3, #2
 80019c4:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <StartEncoderTask+0xe4>)
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	f107 0110 	add.w	r1, r7, #16
 80019ce:	2300      	movs	r3, #0
 80019d0:	2200      	movs	r2, #0
 80019d2:	f00b fa85 	bl	800cee0 <osMessageQueuePut>
				osDelay(250);
 80019d6:	20fa      	movs	r0, #250	; 0xfa
 80019d8:	f00b f9f4 	bl	800cdc4 <osDelay>
				fadeIN(0,100,1);
 80019dc:	2201      	movs	r2, #1
 80019de:	2164      	movs	r1, #100	; 0x64
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff fe3f 	bl	8001664 <fadeIN>
				fadeOUT(0,100,1);
 80019e6:	2201      	movs	r2, #1
 80019e8:	2164      	movs	r1, #100	; 0x64
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fe74 	bl	80016d8 <fadeOUT>
			} else {

			}
			prevCounter = currCounter;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if (buttonPressed[buttonNumber]) {
 80019f4:	7efb      	ldrb	r3, [r7, #27]
 80019f6:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <StartEncoderTask+0xe8>)
 80019f8:	5cd3      	ldrb	r3, [r2, r3]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00b      	beq.n	8001a18 <StartEncoderTask+0xd4>
			buttonPressed[buttonNumber] = 0;
 8001a00:	7efb      	ldrb	r3, [r7, #27]
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <StartEncoderTask+0xe8>)
 8001a04:	2100      	movs	r1, #0
 8001a06:	54d1      	strb	r1, [r2, r3]
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <StartEncoderTask+0xec>)
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	f107 010f 	add.w	r1, r7, #15
 8001a10:	2300      	movs	r3, #0
 8001a12:	2200      	movs	r2, #0
 8001a14:	f00b fa64 	bl	800cee0 <osMessageQueuePut>
		}
		osDelay(500);
 8001a18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a1c:	f00b f9d2 	bl	800cdc4 <osDelay>
	for (;;) {
 8001a20:	e79c      	b.n	800195c <StartEncoderTask+0x18>
 8001a22:	bf00      	nop
 8001a24:	20001424 	.word	0x20001424
 8001a28:	20001300 	.word	0x20001300
 8001a2c:	200013cc 	.word	0x200013cc
 8001a30:	20001304 	.word	0x20001304

08001a34 <StartBeaconTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBeaconTask */
void StartBeaconTask(void *argument)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBeaconTask */
  /* Infinite loop */
  for(;;)
  {
		fadeIN(0,100,1);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2164      	movs	r1, #100	; 0x64
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff fe0f 	bl	8001664 <fadeIN>
		fadeOUT(0,100,1);
 8001a46:	2201      	movs	r2, #1
 8001a48:	2164      	movs	r1, #100	; 0x64
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fe44 	bl	80016d8 <fadeOUT>
		osDelay(5000);
 8001a50:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a54:	f00b f9b6 	bl	800cdc4 <osDelay>
		fadeIN(0,100,1);
 8001a58:	e7f0      	b.n	8001a3c <StartBeaconTask+0x8>
	...

08001a5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b4f      	ldr	r3, [pc, #316]	; (8001bb4 <MX_GPIO_Init+0x158>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a4e      	ldr	r2, [pc, #312]	; (8001bb4 <MX_GPIO_Init+0x158>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <MX_GPIO_Init+0x158>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <MX_GPIO_Init+0x158>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a47      	ldr	r2, [pc, #284]	; (8001bb4 <MX_GPIO_Init+0x158>)
 8001a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b45      	ldr	r3, [pc, #276]	; (8001bb4 <MX_GPIO_Init+0x158>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <MX_GPIO_Init+0x158>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a40      	ldr	r2, [pc, #256]	; (8001bb4 <MX_GPIO_Init+0x158>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <MX_GPIO_Init+0x158>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <MX_GPIO_Init+0x158>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a39      	ldr	r2, [pc, #228]	; (8001bb4 <MX_GPIO_Init+0x158>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <MX_GPIO_Init+0x158>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae8:	4833      	ldr	r0, [pc, #204]	; (8001bb8 <MX_GPIO_Init+0x15c>)
 8001aea:	f002 fac5 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLK_GPIO_Port, BLK_Pin, GPIO_PIN_SET);
 8001aee:	2201      	movs	r2, #1
 8001af0:	2102      	movs	r1, #2
 8001af2:	4832      	ldr	r0, [pc, #200]	; (8001bbc <MX_GPIO_Init+0x160>)
 8001af4:	f002 fac0 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	211c      	movs	r1, #28
 8001afc:	482f      	ldr	r0, [pc, #188]	; (8001bbc <MX_GPIO_Init+0x160>)
 8001afe:	f002 fabb 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DP_INC_Pin|DP_UD_Pin|DP_CS_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001b08:	482d      	ldr	r0, [pc, #180]	; (8001bc0 <MX_GPIO_Init+0x164>)
 8001b0a:	f002 fab5 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	4824      	ldr	r0, [pc, #144]	; (8001bb8 <MX_GPIO_Init+0x15c>)
 8001b28:	f002 f80c 	bl	8003b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	481e      	ldr	r0, [pc, #120]	; (8001bbc <MX_GPIO_Init+0x160>)
 8001b42:	f001 ffff 	bl	8003b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLK_Pin;
 8001b46:	2302      	movs	r3, #2
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b52:	2302      	movs	r3, #2
 8001b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4817      	ldr	r0, [pc, #92]	; (8001bbc <MX_GPIO_Init+0x160>)
 8001b5e:	f001 fff1 	bl	8003b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8001b62:	231c      	movs	r3, #28
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4810      	ldr	r0, [pc, #64]	; (8001bbc <MX_GPIO_Init+0x160>)
 8001b7a:	f001 ffe3 	bl	8003b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DP_INC_Pin|DP_UD_Pin|DP_CS_Pin;
 8001b7e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <MX_GPIO_Init+0x164>)
 8001b98:	f001 ffd4 	bl	8003b44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2105      	movs	r1, #5
 8001ba0:	2006      	movs	r0, #6
 8001ba2:	f001 fa7f 	bl	80030a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ba6:	2006      	movs	r0, #6
 8001ba8:	f001 faa8 	bl	80030fc <HAL_NVIC_EnableIRQ>

}
 8001bac:	bf00      	nop
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <Pixel_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Pixel_Init(void){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
    ARGB_Init();  // Initialization
 8001bc8:	f7fe ffea 	bl	8000ba0 <ARGB_Init>
    ARGB_Clear(); // Clear stirp
 8001bcc:	f7ff f860 	bl	8000c90 <ARGB_Clear>
    while (ARGB_Show() != ARGB_OK); // Update - Option 1
 8001bd0:	bf00      	nop
 8001bd2:	f7ff f8f9 	bl	8000dc8 <ARGB_Show>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d1fa      	bne.n	8001bd2 <Pixel_Init+0xe>
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <Display_Init>:

void Display_Init() {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af04      	add	r7, sp, #16
    ST7735_Init();
 8001bea:	f000 faf3 	bl	80021d4 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f000 fcc2 	bl	8002578 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <Display_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	9202      	str	r2, [sp, #8]
 8001bfa:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8001bfe:	9201      	str	r2, [sp, #4]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	9200      	str	r2, [sp, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <Display_Init+0x5c>)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f000 fb73 	bl	80022f6 <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <Display_Init+0x60>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	9202      	str	r2, [sp, #8]
 8001c16:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8001c1a:	9201      	str	r2, [sp, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	9200      	str	r2, [sp, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <Display_Init+0x64>)
 8001c24:	2119      	movs	r1, #25
 8001c26:	2022      	movs	r0, #34	; 0x22
 8001c28:	f000 fb65 	bl	80022f6 <ST7735_WriteString>
    HAL_Delay(2000);
 8001c2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c30:	f001 f946 	bl	8002ec0 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000084 	.word	0x20000084
 8001c40:	08011558 	.word	0x08011558
 8001c44:	2000007c 	.word	0x2000007c
 8001c48:	08011564 	.word	0x08011564

08001c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c50:	f001 f8f4 	bl	8002e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c54:	f000 f82e 	bl	8001cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c58:	f7ff ff00 	bl	8001a5c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c5c:	f000 f956 	bl	8001f0c <MX_SPI1_Init>
  MX_TIM3_Init();
 8001c60:	f000 fe58 	bl	8002914 <MX_TIM3_Init>
  MX_DMA_Init();
 8001c64:	f7ff fd72 	bl	800174c <MX_DMA_Init>
  MX_RTC_Init();
 8001c68:	f000 f8ca 	bl	8001e00 <MX_RTC_Init>
  MX_TIM4_Init();
 8001c6c:	f000 fea6 	bl	80029bc <MX_TIM4_Init>
  MX_TIM1_Init();
 8001c70:	f000 fe00 	bl	8002874 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8001c74:	f00e f9da 	bl	801002c <MX_USB_DEVICE_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001c78:	213c      	movs	r1, #60	; 0x3c
 8001c7a:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <main+0x5c>)
 8001c7c:	f006 f84c 	bl	8007d18 <HAL_TIM_Encoder_Start>
  //HAL_TIM_Base_Init(&htim1);
  HAL_TIM_Base_Start_IT(&htim1);
 8001c80:	480a      	ldr	r0, [pc, #40]	; (8001cac <main+0x60>)
 8001c82:	f005 fd4d 	bl	8007720 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c8a:	4809      	ldr	r0, [pc, #36]	; (8001cb0 <main+0x64>)
 8001c8c:	f002 fa26 	bl	80040dc <HAL_GPIO_TogglePin>
  //HAL_TIM_Base_Start(&htim11);
  Pixel_Init();
 8001c90:	f7ff ff98 	bl	8001bc4 <Pixel_Init>
  Display_Init();
 8001c94:	f7ff ffa6 	bl	8001be4 <Display_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c98:	f00a ffb8 	bl	800cc0c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c9c:	f7ff fd94 	bl	80017c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ca0:	f00a ffd8 	bl	800cc54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <main+0x58>
 8001ca6:	bf00      	nop
 8001ca8:	20001424 	.word	0x20001424
 8001cac:	200013dc 	.word	0x200013dc
 8001cb0:	40020800 	.word	0x40020800

08001cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b094      	sub	sp, #80	; 0x50
 8001cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cba:	f107 0320 	add.w	r3, r7, #32
 8001cbe:	2230      	movs	r2, #48	; 0x30
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f00e fee4 	bl	8010a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <SystemClock_Config+0xcc>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <SystemClock_Config+0xcc>)
 8001ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <SystemClock_Config+0xcc>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <SystemClock_Config+0xd0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <SystemClock_Config+0xd0>)
 8001cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <SystemClock_Config+0xd0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001d10:	2305      	movs	r3, #5
 8001d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d28:	2319      	movs	r3, #25
 8001d2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001d2c:	23c0      	movs	r3, #192	; 0xc0
 8001d2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d30:	2302      	movs	r3, #2
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d34:	2304      	movs	r3, #4
 8001d36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d38:	f107 0320 	add.w	r3, r7, #32
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 fc95 	bl	800566c <HAL_RCC_OscConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d48:	f000 f84a 	bl	8001de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d50:	2302      	movs	r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2101      	movs	r1, #1
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 ffa8 	bl	8005cbc <HAL_RCC_ClockConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d72:	f000 f835 	bl	8001de0 <Error_Handler>
  }
}
 8001d76:	bf00      	nop
 8001d78:	3750      	adds	r7, #80	; 0x50
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000

08001d88 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us (uint16_t us)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <delay_us+0x30>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2200      	movs	r2, #0
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8001d9a:	bf00      	nop
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <delay_us+0x30>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d3f9      	bcc.n	8001d9c <delay_us+0x14>
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	200013dc 	.word	0x200013dc

08001dbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {

  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dce:	f001 f857 	bl	8002e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40000c00 	.word	0x40000c00

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <Error_Handler+0x8>

08001dea <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e14:	2300      	movs	r3, #0
 8001e16:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <MX_RTC_Init+0xac>)
 8001e1a:	4a25      	ldr	r2, [pc, #148]	; (8001eb0 <MX_RTC_Init+0xb0>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <MX_RTC_Init+0xac>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <MX_RTC_Init+0xac>)
 8001e26:	227f      	movs	r2, #127	; 0x7f
 8001e28:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <MX_RTC_Init+0xac>)
 8001e2c:	22ff      	movs	r2, #255	; 0xff
 8001e2e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <MX_RTC_Init+0xac>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <MX_RTC_Init+0xac>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <MX_RTC_Init+0xac>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e42:	481a      	ldr	r0, [pc, #104]	; (8001eac <MX_RTC_Init+0xac>)
 8001e44:	f004 fc0a 	bl	800665c <HAL_RTC_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001e4e:	f7ff ffc7 	bl	8001de0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480f      	ldr	r0, [pc, #60]	; (8001eac <MX_RTC_Init+0xac>)
 8001e6e:	f004 fccd 	bl	800680c <HAL_RTC_SetTime>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001e78:	f7ff ffb2 	bl	8001de0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001e7c:	2305      	movs	r3, #5
 8001e7e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001e80:	2305      	movs	r3, #5
 8001e82:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8001e84:	2307      	movs	r3, #7
 8001e86:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8001e88:	2316      	movs	r3, #22
 8001e8a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4619      	mov	r1, r3
 8001e92:	4806      	ldr	r0, [pc, #24]	; (8001eac <MX_RTC_Init+0xac>)
 8001e94:	f004 fe02 	bl	8006a9c <HAL_RTC_SetDate>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001e9e:	f7ff ff9f 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000130c 	.word	0x2000130c
 8001eb0:	40002800 	.word	0x40002800

08001eb4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
 8001ecc:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <HAL_RTC_MspInit+0x50>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d111      	bne.n	8001efc <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 f9a2 	bl	8006230 <HAL_RCCEx_PeriphCLKConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001ef2:	f7ff ff75 	bl	8001de0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <HAL_RTC_MspInit+0x54>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40002800 	.word	0x40002800
 8001f08:	42470e3c 	.word	0x42470e3c

08001f0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <MX_SPI1_Init+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f58:	220a      	movs	r2, #10
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	; (8001f70 <MX_SPI1_Init+0x64>)
 8001f5e:	f004 ff67 	bl	8006e30 <HAL_SPI_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f68:	f7ff ff3a 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	2000132c 	.word	0x2000132c
 8001f74:	40013000 	.word	0x40013000

08001f78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <HAL_SPI_MspInit+0x84>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d12b      	bne.n	8001ff2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_SPI_MspInit+0x88>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_SPI_MspInit+0x88>)
 8001fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_SPI_MspInit+0x88>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_SPI_MspInit+0x88>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <HAL_SPI_MspInit+0x88>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_SPI_MspInit+0x88>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001fd2:	23a0      	movs	r3, #160	; 0xa0
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fe2:	2305      	movs	r3, #5
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	4805      	ldr	r0, [pc, #20]	; (8002004 <HAL_SPI_MspInit+0x8c>)
 8001fee:	f001 fda9 	bl	8003b44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3728      	adds	r7, #40	; 0x28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40013000 	.word	0x40013000
 8002000:	40023800 	.word	0x40023800
 8002004:	40020000 	.word	0x40020000

08002008 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	2110      	movs	r1, #16
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <ST7735_Select+0x14>)
 8002012:	f002 f831 	bl	8004078 <HAL_GPIO_WritePin>
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40020000 	.word	0x40020000

08002020 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002024:	2201      	movs	r2, #1
 8002026:	2110      	movs	r1, #16
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <ST7735_Unselect+0x14>)
 800202a:	f002 f825 	bl	8004078 <HAL_GPIO_WritePin>
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40020000 	.word	0x40020000

08002038 <ST7735_Reset>:

static void ST7735_Reset() {
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	2108      	movs	r1, #8
 8002040:	4806      	ldr	r0, [pc, #24]	; (800205c <ST7735_Reset+0x24>)
 8002042:	f002 f819 	bl	8004078 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002046:	2005      	movs	r0, #5
 8002048:	f000 ff3a 	bl	8002ec0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	2108      	movs	r1, #8
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <ST7735_Reset+0x24>)
 8002052:	f002 f811 	bl	8004078 <HAL_GPIO_WritePin>
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40020000 	.word	0x40020000

08002060 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	2104      	movs	r1, #4
 800206e:	4807      	ldr	r0, [pc, #28]	; (800208c <ST7735_WriteCommand+0x2c>)
 8002070:	f002 f802 	bl	8004078 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002074:	1df9      	adds	r1, r7, #7
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	2201      	movs	r2, #1
 800207c:	4804      	ldr	r0, [pc, #16]	; (8002090 <ST7735_WriteCommand+0x30>)
 800207e:	f005 f873 	bl	8007168 <HAL_SPI_Transmit>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40020000 	.word	0x40020000
 8002090:	2000132c 	.word	0x2000132c

08002094 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	2104      	movs	r1, #4
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <ST7735_WriteData+0x2c>)
 80020a4:	f001 ffe8 	bl	8004078 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4804      	ldr	r0, [pc, #16]	; (80020c4 <ST7735_WriteData+0x30>)
 80020b4:	f005 f858 	bl	8007168 <HAL_SPI_Transmit>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40020000 	.word	0x40020000
 80020c4:	2000132c 	.word	0x2000132c

080020c8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80020da:	e034      	b.n	8002146 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80020e6:	7afb      	ldrb	r3, [r7, #11]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ffb9 	bl	8002060 <ST7735_WriteCommand>

        numArgs = *addr++;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80020f8:	7abb      	ldrb	r3, [r7, #10]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002102:	7abb      	ldrb	r3, [r7, #10]
 8002104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002108:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800210a:	7abb      	ldrb	r3, [r7, #10]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002110:	7abb      	ldrb	r3, [r7, #10]
 8002112:	4619      	mov	r1, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ffbd 	bl	8002094 <ST7735_WriteData>
            addr += numArgs;
 800211a:	7abb      	ldrb	r3, [r7, #10]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4413      	add	r3, r2
 8002120:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002122:	89bb      	ldrh	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00e      	beq.n	8002146 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002132:	89bb      	ldrh	r3, [r7, #12]
 8002134:	2bff      	cmp	r3, #255	; 0xff
 8002136:	d102      	bne.n	800213e <ST7735_ExecuteCommandList+0x76>
 8002138:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800213c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800213e:	89bb      	ldrh	r3, [r7, #12]
 8002140:	4618      	mov	r0, r3
 8002142:	f000 febd 	bl	8002ec0 <HAL_Delay>
    while(numCommands--) {
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	1e5a      	subs	r2, r3, #1
 800214a:	73fa      	strb	r2, [r7, #15]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1c5      	bne.n	80020dc <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800215a:	b590      	push	{r4, r7, lr}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	4604      	mov	r4, r0
 8002162:	4608      	mov	r0, r1
 8002164:	4611      	mov	r1, r2
 8002166:	461a      	mov	r2, r3
 8002168:	4623      	mov	r3, r4
 800216a:	71fb      	strb	r3, [r7, #7]
 800216c:	4603      	mov	r3, r0
 800216e:	71bb      	strb	r3, [r7, #6]
 8002170:	460b      	mov	r3, r1
 8002172:	717b      	strb	r3, [r7, #5]
 8002174:	4613      	mov	r3, r2
 8002176:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002178:	202a      	movs	r0, #42	; 0x2a
 800217a:	f7ff ff71 	bl	8002060 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800217e:	2300      	movs	r3, #0
 8002180:	733b      	strb	r3, [r7, #12]
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	3301      	adds	r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	737b      	strb	r3, [r7, #13]
 800218a:	2300      	movs	r3, #0
 800218c:	73bb      	strb	r3, [r7, #14]
 800218e:	797b      	ldrb	r3, [r7, #5]
 8002190:	3301      	adds	r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	2104      	movs	r1, #4
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff79 	bl	8002094 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80021a2:	202b      	movs	r0, #43	; 0x2b
 80021a4:	f7ff ff5c 	bl	8002060 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80021a8:	79bb      	ldrb	r3, [r7, #6]
 80021aa:	331a      	adds	r3, #26
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80021b0:	793b      	ldrb	r3, [r7, #4]
 80021b2:	331a      	adds	r3, #26
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	2104      	movs	r1, #4
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff68 	bl	8002094 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80021c4:	202c      	movs	r0, #44	; 0x2c
 80021c6:	f7ff ff4b 	bl	8002060 <ST7735_WriteCommand>
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd90      	pop	{r4, r7, pc}
	...

080021d4 <ST7735_Init>:

void ST7735_Init() {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
    ST7735_Select();
 80021d8:	f7ff ff16 	bl	8002008 <ST7735_Select>
    ST7735_Reset();
 80021dc:	f7ff ff2c 	bl	8002038 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80021e0:	4806      	ldr	r0, [pc, #24]	; (80021fc <ST7735_Init+0x28>)
 80021e2:	f7ff ff71 	bl	80020c8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80021e6:	4806      	ldr	r0, [pc, #24]	; (8002200 <ST7735_Init+0x2c>)
 80021e8:	f7ff ff6e 	bl	80020c8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80021ec:	4805      	ldr	r0, [pc, #20]	; (8002204 <ST7735_Init+0x30>)
 80021ee:	f7ff ff6b 	bl	80020c8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80021f2:	f7ff ff15 	bl	8002020 <ST7735_Unselect>
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	080139a0 	.word	0x080139a0
 8002200:	080139dc 	.word	0x080139dc
 8002204:	080139ec 	.word	0x080139ec

08002208 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002208:	b082      	sub	sp, #8
 800220a:	b590      	push	{r4, r7, lr}
 800220c:	b089      	sub	sp, #36	; 0x24
 800220e:	af00      	add	r7, sp, #0
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
 8002212:	4603      	mov	r3, r0
 8002214:	80fb      	strh	r3, [r7, #6]
 8002216:	460b      	mov	r3, r1
 8002218:	80bb      	strh	r3, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	b2d8      	uxtb	r0, r3
 8002222:	88bb      	ldrh	r3, [r7, #4]
 8002224:	b2d9      	uxtb	r1, r3
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800222e:	4413      	add	r3, r2
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b2dc      	uxtb	r4, r3
 8002236:	88bb      	ldrh	r3, [r7, #4]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800223e:	4413      	add	r3, r2
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	4622      	mov	r2, r4
 8002248:	f7ff ff87 	bl	800215a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	e043      	b.n	80022da <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8002252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	3b20      	subs	r3, #32
 8002258:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4619      	mov	r1, r3
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	440b      	add	r3, r1
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	e029      	b.n	80022c8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00e      	beq.n	80022a2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002284:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	b29b      	uxth	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	743b      	strb	r3, [r7, #16]
 800228e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002290:	b2db      	uxtb	r3, r3
 8002292:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	2102      	movs	r1, #2
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fefa 	bl	8002094 <ST7735_WriteData>
 80022a0:	e00f      	b.n	80022c2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80022a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	733b      	strb	r3, [r7, #12]
 80022ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	2102      	movs	r1, #2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fee9 	bl	8002094 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022cc:	461a      	mov	r2, r3
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d3cf      	bcc.n	8002274 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	3301      	adds	r3, #1
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022de:	461a      	mov	r2, r3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d3b5      	bcc.n	8002252 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	3724      	adds	r7, #36	; 0x24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80022f2:	b002      	add	sp, #8
 80022f4:	4770      	bx	lr

080022f6 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80022f6:	b082      	sub	sp, #8
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af04      	add	r7, sp, #16
 80022fe:	603a      	str	r2, [r7, #0]
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	4603      	mov	r3, r0
 8002304:	80fb      	strh	r3, [r7, #6]
 8002306:	460b      	mov	r3, r1
 8002308:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800230a:	f7ff fe7d 	bl	8002008 <ST7735_Select>

    while(*str) {
 800230e:	e02d      	b.n	800236c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	7d3a      	ldrb	r2, [r7, #20]
 8002314:	4413      	add	r3, r2
 8002316:	2b9f      	cmp	r3, #159	; 0x9f
 8002318:	dd13      	ble.n	8002342 <ST7735_WriteString+0x4c>
            x = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800231e:	7d7b      	ldrb	r3, [r7, #21]
 8002320:	b29a      	uxth	r2, r3
 8002322:	88bb      	ldrh	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002328:	88bb      	ldrh	r3, [r7, #4]
 800232a:	7d7a      	ldrb	r2, [r7, #21]
 800232c:	4413      	add	r3, r2
 800232e:	2b4f      	cmp	r3, #79	; 0x4f
 8002330:	dc21      	bgt.n	8002376 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b20      	cmp	r3, #32
 8002338:	d103      	bne.n	8002342 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	603b      	str	r3, [r7, #0]
                continue;
 8002340:	e014      	b.n	800236c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	88b9      	ldrh	r1, [r7, #4]
 8002348:	88f8      	ldrh	r0, [r7, #6]
 800234a:	8c3b      	ldrh	r3, [r7, #32]
 800234c:	9302      	str	r3, [sp, #8]
 800234e:	8bbb      	ldrh	r3, [r7, #28]
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f7ff ff56 	bl	8002208 <ST7735_WriteChar>
        x += font.width;
 800235c:	7d3b      	ldrb	r3, [r7, #20]
 800235e:	b29a      	uxth	r2, r3
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	4413      	add	r3, r2
 8002364:	80fb      	strh	r3, [r7, #6]
        str++;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1cd      	bne.n	8002310 <ST7735_WriteString+0x1a>
 8002374:	e000      	b.n	8002378 <ST7735_WriteString+0x82>
                break;
 8002376:	bf00      	nop
    }

    ST7735_Unselect();
 8002378:	f7ff fe52 	bl	8002020 <ST7735_Unselect>
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002386:	b002      	add	sp, #8
 8002388:	4770      	bx	lr
	...

0800238c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4623      	mov	r3, r4
 800239c:	80fb      	strh	r3, [r7, #6]
 800239e:	4603      	mov	r3, r0
 80023a0:	80bb      	strh	r3, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]
 80023a6:	4613      	mov	r3, r2
 80023a8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b9f      	cmp	r3, #159	; 0x9f
 80023ae:	d857      	bhi.n	8002460 <ST7735_FillRectangle+0xd4>
 80023b0:	88bb      	ldrh	r3, [r7, #4]
 80023b2:	2b4f      	cmp	r3, #79	; 0x4f
 80023b4:	d854      	bhi.n	8002460 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80023b6:	88fa      	ldrh	r2, [r7, #6]
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	4413      	add	r3, r2
 80023bc:	2ba0      	cmp	r3, #160	; 0xa0
 80023be:	dd03      	ble.n	80023c8 <ST7735_FillRectangle+0x3c>
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80023c6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80023c8:	88ba      	ldrh	r2, [r7, #4]
 80023ca:	883b      	ldrh	r3, [r7, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	2b50      	cmp	r3, #80	; 0x50
 80023d0:	dd03      	ble.n	80023da <ST7735_FillRectangle+0x4e>
 80023d2:	88bb      	ldrh	r3, [r7, #4]
 80023d4:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80023d8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80023da:	f7ff fe15 	bl	8002008 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	b2d8      	uxtb	r0, r3
 80023e2:	88bb      	ldrh	r3, [r7, #4]
 80023e4:	b2d9      	uxtb	r1, r3
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b2dc      	uxtb	r4, r3
 80023f6:	88bb      	ldrh	r3, [r7, #4]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	883b      	ldrh	r3, [r7, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	4413      	add	r3, r2
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4622      	mov	r2, r4
 8002408:	f7ff fea7 	bl	800215a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800240c:	8c3b      	ldrh	r3, [r7, #32]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	b29b      	uxth	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	733b      	strb	r3, [r7, #12]
 8002416:	8c3b      	ldrh	r3, [r7, #32]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800241c:	2201      	movs	r2, #1
 800241e:	2104      	movs	r1, #4
 8002420:	4811      	ldr	r0, [pc, #68]	; (8002468 <ST7735_FillRectangle+0xdc>)
 8002422:	f001 fe29 	bl	8004078 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002426:	883b      	ldrh	r3, [r7, #0]
 8002428:	80bb      	strh	r3, [r7, #4]
 800242a:	e013      	b.n	8002454 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	80fb      	strh	r3, [r7, #6]
 8002430:	e00a      	b.n	8002448 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002432:	f107 010c 	add.w	r1, r7, #12
 8002436:	f04f 33ff 	mov.w	r3, #4294967295
 800243a:	2202      	movs	r2, #2
 800243c:	480b      	ldr	r0, [pc, #44]	; (800246c <ST7735_FillRectangle+0xe0>)
 800243e:	f004 fe93 	bl	8007168 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	3b01      	subs	r3, #1
 8002446:	80fb      	strh	r3, [r7, #6]
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f1      	bne.n	8002432 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800244e:	88bb      	ldrh	r3, [r7, #4]
 8002450:	3b01      	subs	r3, #1
 8002452:	80bb      	strh	r3, [r7, #4]
 8002454:	88bb      	ldrh	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1e8      	bne.n	800242c <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800245a:	f7ff fde1 	bl	8002020 <ST7735_Unselect>
 800245e:	e000      	b.n	8002462 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002460:	bf00      	nop
}
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}
 8002468:	40020000 	.word	0x40020000
 800246c:	2000132c 	.word	0x2000132c

08002470 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	4604      	mov	r4, r0
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	461a      	mov	r2, r3
 800247e:	4623      	mov	r3, r4
 8002480:	80fb      	strh	r3, [r7, #6]
 8002482:	4603      	mov	r3, r0
 8002484:	80bb      	strh	r3, [r7, #4]
 8002486:	460b      	mov	r3, r1
 8002488:	807b      	strh	r3, [r7, #2]
 800248a:	4613      	mov	r3, r2
 800248c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	2b9f      	cmp	r3, #159	; 0x9f
 8002492:	d869      	bhi.n	8002568 <ST7735_FillRectangleFast+0xf8>
 8002494:	88bb      	ldrh	r3, [r7, #4]
 8002496:	2b4f      	cmp	r3, #79	; 0x4f
 8002498:	d866      	bhi.n	8002568 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800249a:	88fa      	ldrh	r2, [r7, #6]
 800249c:	887b      	ldrh	r3, [r7, #2]
 800249e:	4413      	add	r3, r2
 80024a0:	2ba0      	cmp	r3, #160	; 0xa0
 80024a2:	dd03      	ble.n	80024ac <ST7735_FillRectangleFast+0x3c>
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80024aa:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80024ac:	88ba      	ldrh	r2, [r7, #4]
 80024ae:	883b      	ldrh	r3, [r7, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	2b50      	cmp	r3, #80	; 0x50
 80024b4:	dd03      	ble.n	80024be <ST7735_FillRectangleFast+0x4e>
 80024b6:	88bb      	ldrh	r3, [r7, #4]
 80024b8:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80024bc:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80024be:	f7ff fda3 	bl	8002008 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	b2d8      	uxtb	r0, r3
 80024c6:	88bb      	ldrh	r3, [r7, #4]
 80024c8:	b2d9      	uxtb	r1, r3
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	887b      	ldrh	r3, [r7, #2]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b2dc      	uxtb	r4, r3
 80024da:	88bb      	ldrh	r3, [r7, #4]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	883b      	ldrh	r3, [r7, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	4622      	mov	r2, r4
 80024ec:	f7ff fe35 	bl	800215a <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80024f0:	8c3b      	ldrh	r3, [r7, #32]
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	723b      	strb	r3, [r7, #8]
 80024fa:	8c3b      	ldrh	r3, [r7, #32]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4618      	mov	r0, r3
 8002506:	f00e faa5 	bl	8010a54 <malloc>
 800250a:	4603      	mov	r3, r0
 800250c:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 800250e:	2300      	movs	r3, #0
 8002510:	80fb      	strh	r3, [r7, #6]
 8002512:	e008      	b.n	8002526 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	893a      	ldrh	r2, [r7, #8]
 800251e:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	3301      	adds	r3, #1
 8002524:	80fb      	strh	r3, [r7, #6]
 8002526:	88fa      	ldrh	r2, [r7, #6]
 8002528:	887b      	ldrh	r3, [r7, #2]
 800252a:	429a      	cmp	r2, r3
 800252c:	d3f2      	bcc.n	8002514 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800252e:	2201      	movs	r2, #1
 8002530:	2104      	movs	r1, #4
 8002532:	480f      	ldr	r0, [pc, #60]	; (8002570 <ST7735_FillRectangleFast+0x100>)
 8002534:	f001 fda0 	bl	8004078 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8002538:	883b      	ldrh	r3, [r7, #0]
 800253a:	80bb      	strh	r3, [r7, #4]
 800253c:	e00b      	b.n	8002556 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800253e:	887b      	ldrh	r3, [r7, #2]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
 8002548:	68f9      	ldr	r1, [r7, #12]
 800254a:	480a      	ldr	r0, [pc, #40]	; (8002574 <ST7735_FillRectangleFast+0x104>)
 800254c:	f004 fe0c 	bl	8007168 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8002550:	88bb      	ldrh	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	80bb      	strh	r3, [r7, #4]
 8002556:	88bb      	ldrh	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <ST7735_FillRectangleFast+0xce>

    free(line);
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f00e fa81 	bl	8010a64 <free>
    ST7735_Unselect();
 8002562:	f7ff fd5d 	bl	8002020 <ST7735_Unselect>
 8002566:	e000      	b.n	800256a <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002568:	bf00      	nop
}
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	40020000 	.word	0x40020000
 8002574:	2000132c 	.word	0x2000132c

08002578 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af02      	add	r7, sp, #8
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2350      	movs	r3, #80	; 0x50
 8002588:	22a0      	movs	r2, #160	; 0xa0
 800258a:	2100      	movs	r1, #0
 800258c:	2000      	movs	r0, #0
 800258e:	f7ff fefd 	bl	800238c <ST7735_FillRectangle>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af02      	add	r7, sp, #8
 80025a0:	4603      	mov	r3, r0
 80025a2:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2350      	movs	r3, #80	; 0x50
 80025aa:	22a0      	movs	r2, #160	; 0xa0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7ff ff5e 	bl	8002470 <ST7735_FillRectangleFast>
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_MspInit+0x54>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a11      	ldr	r2, [pc, #68]	; (8002610 <HAL_MspInit+0x54>)
 80025cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <HAL_MspInit+0x54>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_MspInit+0x54>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <HAL_MspInit+0x54>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_MspInit+0x54>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	210f      	movs	r1, #15
 80025fe:	f06f 0001 	mvn.w	r0, #1
 8002602:	f000 fd4f 	bl	80030a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800

08002614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	; 0x30
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002624:	2200      	movs	r2, #0
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	2032      	movs	r0, #50	; 0x32
 800262a:	f000 fd3b 	bl	80030a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800262e:	2032      	movs	r0, #50	; 0x32
 8002630:	f000 fd64 	bl	80030fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_InitTick+0xa0>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_InitTick+0xa0>)
 800263e:	f043 0308 	orr.w	r3, r3, #8
 8002642:	6413      	str	r3, [r2, #64]	; 0x40
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_InitTick+0xa0>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002650:	f107 0210 	add.w	r2, r7, #16
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f003 fdb6 	bl	80061cc <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002660:	f003 fd8c 	bl	800617c <HAL_RCC_GetPCLK1Freq>
 8002664:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	4a13      	ldr	r2, [pc, #76]	; (80026b8 <HAL_InitTick+0xa4>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9b      	lsrs	r3, r3, #18
 8002670:	3b01      	subs	r3, #1
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_InitTick+0xa8>)
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <HAL_InitTick+0xac>)
 8002678:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_InitTick+0xa8>)
 800267c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002680:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002682:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <HAL_InitTick+0xa8>)
 8002684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002686:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <HAL_InitTick+0xa8>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_InitTick+0xa8>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002694:	4809      	ldr	r0, [pc, #36]	; (80026bc <HAL_InitTick+0xa8>)
 8002696:	f004 ff7d 	bl	8007594 <HAL_TIM_Base_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d104      	bne.n	80026aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80026a0:	4806      	ldr	r0, [pc, #24]	; (80026bc <HAL_InitTick+0xa8>)
 80026a2:	f005 f83d 	bl	8007720 <HAL_TIM_Base_Start_IT>
 80026a6:	4603      	mov	r3, r0
 80026a8:	e000      	b.n	80026ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3730      	adds	r7, #48	; 0x30
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40023800 	.word	0x40023800
 80026b8:	431bde83 	.word	0x431bde83
 80026bc:	20001384 	.word	0x20001384
 80026c0:	40000c00 	.word	0x40000c00

080026c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <NMI_Handler+0x4>

080026ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <HardFault_Handler+0x4>

080026d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <MemManage_Handler+0x4>

080026d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026da:	e7fe      	b.n	80026da <BusFault_Handler+0x4>

080026dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <UsageFault_Handler+0x4>

080026e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80026f4:	2001      	movs	r0, #1
 80026f6:	f001 fd19 	bl	800412c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002704:	4804      	ldr	r0, [pc, #16]	; (8002718 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002706:	f005 fbc5 	bl	8007e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	4a02      	ldr	r2, [pc, #8]	; (800271c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8002712:	6013      	str	r3, [r2, #0]
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200013dc 	.word	0x200013dc
 800271c:	20001308 	.word	0x20001308

08002720 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002724:	4808      	ldr	r0, [pc, #32]	; (8002748 <TIM3_IRQHandler+0x28>)
 8002726:	f005 fbb5 	bl	8007e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <TIM3_IRQHandler+0x2c>)
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <TIM3_IRQHandler+0x2c>)
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	4a04      	ldr	r2, [pc, #16]	; (800274c <TIM3_IRQHandler+0x2c>)
 800273c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002740:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20001424 	.word	0x20001424
 800274c:	40000400 	.word	0x40000400

08002750 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <DMA1_Stream7_IRQHandler+0x10>)
 8002756:	f000 ff8b 	bl	8003670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200014b4 	.word	0x200014b4

08002764 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <TIM5_IRQHandler+0x10>)
 800276a:	f005 fb93 	bl	8007e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20001384 	.word	0x20001384

08002778 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <OTG_FS_IRQHandler+0x10>)
 800277e:	f001 fe48 	bl	8004412 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	2001c824 	.word	0x2001c824

0800278c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 8002796:	23ff      	movs	r3, #255	; 0xff
 8002798:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 80027a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	db11      	blt.n	80027d0 <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 80027ac:	f000 fb7c 	bl	8002ea8 <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_GPIO_EXTI_Callback+0x50>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b63      	cmp	r3, #99	; 0x63
 80027bc:	d90a      	bls.n	80027d4 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 80027be:	4a07      	ldr	r2, [pc, #28]	; (80027dc <HAL_GPIO_EXTI_Callback+0x50>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 80027c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c8:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x54>)
 80027ca:	2101      	movs	r1, #1
 80027cc:	54d1      	strb	r1, [r2, r3]
 80027ce:	e002      	b.n	80027d6 <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 80027d0:	bf00      	nop
 80027d2:	e000      	b.n	80027d6 <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 80027d4:	bf00      	nop
}
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200013d4 	.word	0x200013d4
 80027e0:	200013cc 	.word	0x200013cc

080027e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ec:	4a14      	ldr	r2, [pc, #80]	; (8002840 <_sbrk+0x5c>)
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <_sbrk+0x60>)
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <_sbrk+0x64>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <_sbrk+0x64>)
 8002802:	4a12      	ldr	r2, [pc, #72]	; (800284c <_sbrk+0x68>)
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	429a      	cmp	r2, r3
 8002812:	d207      	bcs.n	8002824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002814:	f00e f8f4 	bl	8010a00 <__errno>
 8002818:	4603      	mov	r3, r0
 800281a:	220c      	movs	r2, #12
 800281c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	e009      	b.n	8002838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <_sbrk+0x64>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <_sbrk+0x64>)
 8002834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20020000 	.word	0x20020000
 8002844:	00000800 	.word	0x00000800
 8002848:	200013d8 	.word	0x200013d8
 800284c:	2001cf60 	.word	0x2001cf60

08002850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <SystemInit+0x20>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <SystemInit+0x20>)
 800285c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287a:	f107 0308 	add.w	r3, r7, #8
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002888:	463b      	mov	r3, r7
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002890:	4b1e      	ldr	r3, [pc, #120]	; (800290c <MX_TIM1_Init+0x98>)
 8002892:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <MX_TIM1_Init+0x9c>)
 8002894:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <MX_TIM1_Init+0x98>)
 8002898:	222f      	movs	r2, #47	; 0x2f
 800289a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <MX_TIM1_Init+0x98>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <MX_TIM1_Init+0x98>)
 80028a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80028a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <MX_TIM1_Init+0x98>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <MX_TIM1_Init+0x98>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <MX_TIM1_Init+0x98>)
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028bc:	4813      	ldr	r0, [pc, #76]	; (800290c <MX_TIM1_Init+0x98>)
 80028be:	f004 fe69 	bl	8007594 <HAL_TIM_Base_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80028c8:	f7ff fa8a 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	4619      	mov	r1, r3
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <MX_TIM1_Init+0x98>)
 80028da:	f005 fd89 	bl	80083f0 <HAL_TIM_ConfigClockSource>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80028e4:	f7ff fa7c 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028e8:	2320      	movs	r3, #32
 80028ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028f0:	463b      	mov	r3, r7
 80028f2:	4619      	mov	r1, r3
 80028f4:	4805      	ldr	r0, [pc, #20]	; (800290c <MX_TIM1_Init+0x98>)
 80028f6:	f006 fca3 	bl	8009240 <HAL_TIMEx_MasterConfigSynchronization>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002900:	f7ff fa6e 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002904:	bf00      	nop
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	200013dc 	.word	0x200013dc
 8002910:	40010000 	.word	0x40010000

08002914 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08c      	sub	sp, #48	; 0x30
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800291a:	f107 030c 	add.w	r3, r7, #12
 800291e:	2224      	movs	r2, #36	; 0x24
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f00e f8b4 	bl	8010a90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002930:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <MX_TIM3_Init+0xa0>)
 8002932:	4a21      	ldr	r2, [pc, #132]	; (80029b8 <MX_TIM3_Init+0xa4>)
 8002934:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002936:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <MX_TIM3_Init+0xa0>)
 8002938:	2200      	movs	r2, #0
 800293a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <MX_TIM3_Init+0xa0>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <MX_TIM3_Init+0xa0>)
 8002944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002948:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <MX_TIM3_Init+0xa0>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <MX_TIM3_Init+0xa0>)
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002956:	2301      	movs	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800295e:	2301      	movs	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8002966:	2306      	movs	r3, #6
 8002968:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800296a:	2300      	movs	r3, #0
 800296c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800296e:	2301      	movs	r3, #1
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002972:	2300      	movs	r3, #0
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8002976:	2306      	movs	r3, #6
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	4619      	mov	r1, r3
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <MX_TIM3_Init+0xa0>)
 8002982:	f005 f82f 	bl	80079e4 <HAL_TIM_Encoder_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800298c:	f7ff fa28 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002990:	2300      	movs	r3, #0
 8002992:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	4619      	mov	r1, r3
 800299c:	4805      	ldr	r0, [pc, #20]	; (80029b4 <MX_TIM3_Init+0xa0>)
 800299e:	f006 fc4f 	bl	8009240 <HAL_TIMEx_MasterConfigSynchronization>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80029a8:	f7ff fa1a 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029ac:	bf00      	nop
 80029ae:	3730      	adds	r7, #48	; 0x30
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20001424 	.word	0x20001424
 80029b8:	40000400 	.word	0x40000400

080029bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08e      	sub	sp, #56	; 0x38
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d0:	f107 0320 	add.w	r3, r7, #32
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
 80029e8:	615a      	str	r2, [r3, #20]
 80029ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029ec:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <MX_TIM4_Init+0xe4>)
 80029ee:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <MX_TIM4_Init+0xe8>)
 80029f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <MX_TIM4_Init+0xe4>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f8:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <MX_TIM4_Init+0xe4>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 80029fe:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <MX_TIM4_Init+0xe4>)
 8002a00:	223c      	movs	r2, #60	; 0x3c
 8002a02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002a04:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <MX_TIM4_Init+0xe4>)
 8002a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <MX_TIM4_Init+0xe4>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a12:	4823      	ldr	r0, [pc, #140]	; (8002aa0 <MX_TIM4_Init+0xe4>)
 8002a14:	f004 fdbe 	bl	8007594 <HAL_TIM_Base_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002a1e:	f7ff f9df 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	481c      	ldr	r0, [pc, #112]	; (8002aa0 <MX_TIM4_Init+0xe4>)
 8002a30:	f005 fcde 	bl	80083f0 <HAL_TIM_ConfigClockSource>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002a3a:	f7ff f9d1 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a3e:	4818      	ldr	r0, [pc, #96]	; (8002aa0 <MX_TIM4_Init+0xe4>)
 8002a40:	f004 ff00 	bl	8007844 <HAL_TIM_PWM_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002a4a:	f7ff f9c9 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a56:	f107 0320 	add.w	r3, r7, #32
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4810      	ldr	r0, [pc, #64]	; (8002aa0 <MX_TIM4_Init+0xe4>)
 8002a5e:	f006 fbef 	bl	8009240 <HAL_TIMEx_MasterConfigSynchronization>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002a68:	f7ff f9ba 	bl	8001de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a6c:	2360      	movs	r3, #96	; 0x60
 8002a6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	2208      	movs	r2, #8
 8002a80:	4619      	mov	r1, r3
 8002a82:	4807      	ldr	r0, [pc, #28]	; (8002aa0 <MX_TIM4_Init+0xe4>)
 8002a84:	f005 fb0e 	bl	80080a4 <HAL_TIM_PWM_ConfigChannel>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002a8e:	f7ff f9a7 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a92:	4803      	ldr	r0, [pc, #12]	; (8002aa0 <MX_TIM4_Init+0xe4>)
 8002a94:	f000 f8ec 	bl	8002c70 <HAL_TIM_MspPostInit>

}
 8002a98:	bf00      	nop
 8002a9a:	3738      	adds	r7, #56	; 0x38
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	2000146c 	.word	0x2000146c
 8002aa4:	40000800 	.word	0x40000800

08002aa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a31      	ldr	r2, [pc, #196]	; (8002b7c <HAL_TIM_Base_MspInit+0xd4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d116      	bne.n	8002ae8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <HAL_TIM_Base_MspInit+0xd8>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a2f      	ldr	r2, [pc, #188]	; (8002b80 <HAL_TIM_Base_MspInit+0xd8>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_TIM_Base_MspInit+0xd8>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2105      	movs	r1, #5
 8002ada:	2019      	movs	r0, #25
 8002adc:	f000 fae2 	bl	80030a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ae0:	2019      	movs	r0, #25
 8002ae2:	f000 fb0b 	bl	80030fc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002ae6:	e044      	b.n	8002b72 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM4)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <HAL_TIM_Base_MspInit+0xdc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d13f      	bne.n	8002b72 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <HAL_TIM_Base_MspInit+0xd8>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a21      	ldr	r2, [pc, #132]	; (8002b80 <HAL_TIM_Base_MspInit+0xd8>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <HAL_TIM_Base_MspInit+0xd8>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b10:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <HAL_TIM_Base_MspInit+0xe4>)
 8002b12:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002b14:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b1a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b1e:	2240      	movs	r2, #64	; 0x40
 8002b20:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002b28:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b2e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b30:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b36:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b3e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b46:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b4a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b4e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b50:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002b56:	480c      	ldr	r0, [pc, #48]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b58:	f000 fae8 	bl	800312c <HAL_DMA_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 8002b62:	f7ff f93d 	bl	8001de0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a07      	ldr	r2, [pc, #28]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b6c:	4a06      	ldr	r2, [pc, #24]	; (8002b88 <HAL_TIM_Base_MspInit+0xe0>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40000800 	.word	0x40000800
 8002b88:	200014b4 	.word	0x200014b4
 8002b8c:	400260b8 	.word	0x400260b8

08002b90 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2c      	ldr	r2, [pc, #176]	; (8002c60 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d151      	bne.n	8002c56 <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc2:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8002c06:	2340      	movs	r3, #64	; 0x40
 8002c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c16:	2302      	movs	r3, #2
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4811      	ldr	r0, [pc, #68]	; (8002c68 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002c22:	f000 ff8f 	bl	8003b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8002c26:	2320      	movs	r3, #32
 8002c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c32:	2303      	movs	r3, #3
 8002c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c36:	2302      	movs	r3, #2
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8002c3a:	f107 0314 	add.w	r3, r7, #20
 8002c3e:	4619      	mov	r1, r3
 8002c40:	480a      	ldr	r0, [pc, #40]	; (8002c6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002c42:	f000 ff7f 	bl	8003b44 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2105      	movs	r1, #5
 8002c4a:	201d      	movs	r0, #29
 8002c4c:	f000 fa2a 	bl	80030a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c50:	201d      	movs	r0, #29
 8002c52:	f000 fa53 	bl	80030fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c56:	bf00      	nop
 8002c58:	3728      	adds	r7, #40	; 0x28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40020400 	.word	0x40020400

08002c70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 030c 	add.w	r3, r7, #12
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <HAL_TIM_MspPostInit+0x68>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d11e      	bne.n	8002cd0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <HAL_TIM_MspPostInit+0x6c>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a10      	ldr	r2, [pc, #64]	; (8002cdc <HAL_TIM_MspPostInit+0x6c>)
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <HAL_TIM_MspPostInit+0x6c>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <HAL_TIM_MspPostInit+0x70>)
 8002ccc:	f000 ff3a 	bl	8003b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002cd0:	bf00      	nop
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40000800 	.word	0x40000800
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40020400 	.word	0x40020400

08002ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ce8:	480d      	ldr	r0, [pc, #52]	; (8002d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cea:	490e      	ldr	r1, [pc, #56]	; (8002d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cec:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf0:	e002      	b.n	8002cf8 <LoopCopyDataInit>

08002cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cf6:	3304      	adds	r3, #4

08002cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cfc:	d3f9      	bcc.n	8002cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cfe:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d00:	4c0b      	ldr	r4, [pc, #44]	; (8002d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d04:	e001      	b.n	8002d0a <LoopFillZerobss>

08002d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d08:	3204      	adds	r2, #4

08002d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d0c:	d3fb      	bcc.n	8002d06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d0e:	f7ff fd9f 	bl	8002850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d12:	f00d fe7b 	bl	8010a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d16:	f7fe ff99 	bl	8001c4c <main>
  bx  lr    
 8002d1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d24:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002d28:	08013adc 	.word	0x08013adc
  ldr r2, =_sbss
 8002d2c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002d30:	2001cf5c 	.word	0x2001cf5c

08002d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d34:	e7fe      	b.n	8002d34 <ADC_IRQHandler>

08002d36 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d44:	b672      	cpsid	i
}
 8002d46:	bf00      	nop
 8002d48:	f7ff f84a 	bl	8001de0 <Error_Handler>
 8002d4c:	e7fe      	b.n	8002d4c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7a1b      	ldrb	r3, [r3, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d904      	bls.n	8002d60 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d56:	b672      	cpsid	i
}
 8002d58:	bf00      	nop
 8002d5a:	f7ff f841 	bl	8001de0 <Error_Handler>
 8002d5e:	e7fe      	b.n	8002d5e <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7a1b      	ldrb	r3, [r3, #8]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	b2d1      	uxtb	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	7211      	strb	r1, [r2, #8]
 8002d6c:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d6e:	f3ef 8211 	mrs	r2, BASEPRI
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	60fa      	str	r2, [r7, #12]
 8002d84:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002da4:	b672      	cpsid	i
}
 8002da6:	bf00      	nop
 8002da8:	f7ff f81a 	bl	8001de0 <Error_Handler>
 8002dac:	e7fe      	b.n	8002dac <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7a1b      	ldrb	r3, [r3, #8]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7a1b      	ldrb	r3, [r3, #8]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d904      	bls.n	8002dcc <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc2:	b672      	cpsid	i
}
 8002dc4:	bf00      	nop
 8002dc6:	f7ff f80b 	bl	8001de0 <Error_Handler>
 8002dca:	e7fe      	b.n	8002dca <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7a1b      	ldrb	r3, [r3, #8]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002de0:	bf00      	nop
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d104      	bne.n	8002e02 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002df8:	b672      	cpsid	i
}
 8002dfa:	bf00      	nop
 8002dfc:	f7fe fff0 	bl	8001de0 <Error_Handler>
 8002e00:	e7fe      	b.n	8002e00 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff96 	bl	8002d36 <stm32_lock_acquire>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e20:	b672      	cpsid	i
}
 8002e22:	bf00      	nop
 8002e24:	f7fe ffdc 	bl	8001de0 <Error_Handler>
 8002e28:	e7fe      	b.n	8002e28 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ffb2 	bl	8002d96 <stm32_lock_release>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e40:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_Init+0x40>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <HAL_Init+0x40>)
 8002e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_Init+0x40>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <HAL_Init+0x40>)
 8002e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_Init+0x40>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <HAL_Init+0x40>)
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e64:	2003      	movs	r0, #3
 8002e66:	f000 f8fd 	bl	8003064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e6a:	200f      	movs	r0, #15
 8002e6c:	f7ff fbd2 	bl	8002614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e70:	f7ff fba4 	bl	80025bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023c00 	.word	0x40023c00

08002e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_IncTick+0x20>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_IncTick+0x24>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_IncTick+0x24>)
 8002e92:	6013      	str	r3, [r2, #0]
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000094 	.word	0x20000094
 8002ea4:	20001520 	.word	0x20001520

08002ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_GetTick+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20001520 	.word	0x20001520

08002ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec8:	f7ff ffee 	bl	8002ea8 <HAL_GetTick>
 8002ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d005      	beq.n	8002ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <HAL_Delay+0x44>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ee6:	bf00      	nop
 8002ee8:	f7ff ffde 	bl	8002ea8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d8f7      	bhi.n	8002ee8 <HAL_Delay+0x28>
  {
  }
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000094 	.word	0x20000094

08002f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <__NVIC_SetPriorityGrouping+0x44>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f24:	4013      	ands	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f3a:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	60d3      	str	r3, [r2, #12]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <__NVIC_GetPriorityGrouping+0x18>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	f003 0307 	and.w	r3, r3, #7
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	db0b      	blt.n	8002f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	4907      	ldr	r1, [pc, #28]	; (8002fa4 <__NVIC_EnableIRQ+0x38>)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	e000e100 	.word	0xe000e100

08002fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	6039      	str	r1, [r7, #0]
 8002fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	db0a      	blt.n	8002fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	490c      	ldr	r1, [pc, #48]	; (8002ff4 <__NVIC_SetPriority+0x4c>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	0112      	lsls	r2, r2, #4
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd0:	e00a      	b.n	8002fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4908      	ldr	r1, [pc, #32]	; (8002ff8 <__NVIC_SetPriority+0x50>)
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3b04      	subs	r3, #4
 8002fe0:	0112      	lsls	r2, r2, #4
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	761a      	strb	r2, [r3, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f1c3 0307 	rsb	r3, r3, #7
 8003016:	2b04      	cmp	r3, #4
 8003018:	bf28      	it	cs
 800301a:	2304      	movcs	r3, #4
 800301c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3304      	adds	r3, #4
 8003022:	2b06      	cmp	r3, #6
 8003024:	d902      	bls.n	800302c <NVIC_EncodePriority+0x30>
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3b03      	subs	r3, #3
 800302a:	e000      	b.n	800302e <NVIC_EncodePriority+0x32>
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	f04f 32ff 	mov.w	r2, #4294967295
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	401a      	ands	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43d9      	mvns	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	4313      	orrs	r3, r2
         );
}
 8003056:	4618      	mov	r0, r3
 8003058:	3724      	adds	r7, #36	; 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b07      	cmp	r3, #7
 8003070:	d00f      	beq.n	8003092 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b06      	cmp	r3, #6
 8003076:	d00c      	beq.n	8003092 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b05      	cmp	r3, #5
 800307c:	d009      	beq.n	8003092 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b04      	cmp	r3, #4
 8003082:	d006      	beq.n	8003092 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d003      	beq.n	8003092 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800308a:	2190      	movs	r1, #144	; 0x90
 800308c:	4804      	ldr	r0, [pc, #16]	; (80030a0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800308e:	f7fe feac 	bl	8001dea <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff ff38 	bl	8002f08 <__NVIC_SetPriorityGrouping>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	08011570 	.word	0x08011570

080030a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b0f      	cmp	r3, #15
 80030ba:	d903      	bls.n	80030c4 <HAL_NVIC_SetPriority+0x20>
 80030bc:	21a8      	movs	r1, #168	; 0xa8
 80030be:	480e      	ldr	r0, [pc, #56]	; (80030f8 <HAL_NVIC_SetPriority+0x54>)
 80030c0:	f7fe fe93 	bl	8001dea <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b0f      	cmp	r3, #15
 80030c8:	d903      	bls.n	80030d2 <HAL_NVIC_SetPriority+0x2e>
 80030ca:	21a9      	movs	r1, #169	; 0xa9
 80030cc:	480a      	ldr	r0, [pc, #40]	; (80030f8 <HAL_NVIC_SetPriority+0x54>)
 80030ce:	f7fe fe8c 	bl	8001dea <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030d2:	f7ff ff3d 	bl	8002f50 <__NVIC_GetPriorityGrouping>
 80030d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	6978      	ldr	r0, [r7, #20]
 80030de:	f7ff ff8d 	bl	8002ffc <NVIC_EncodePriority>
 80030e2:	4602      	mov	r2, r0
 80030e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ff5c 	bl	8002fa8 <__NVIC_SetPriority>
}
 80030f0:	bf00      	nop
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	08011570 	.word	0x08011570

080030fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	2b00      	cmp	r3, #0
 800310c:	da03      	bge.n	8003116 <HAL_NVIC_EnableIRQ+0x1a>
 800310e:	21bc      	movs	r1, #188	; 0xbc
 8003110:	4805      	ldr	r0, [pc, #20]	; (8003128 <HAL_NVIC_EnableIRQ+0x2c>)
 8003112:	f7fe fe6a 	bl	8001dea <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff26 	bl	8002f6c <__NVIC_EnableIRQ>
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	08011570 	.word	0x08011570

0800312c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003138:	f7ff feb6 	bl	8002ea8 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e203      	b.n	8003550 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a8b      	ldr	r2, [pc, #556]	; (800337c <HAL_DMA_Init+0x250>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d04e      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a8a      	ldr	r2, [pc, #552]	; (8003380 <HAL_DMA_Init+0x254>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d049      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a88      	ldr	r2, [pc, #544]	; (8003384 <HAL_DMA_Init+0x258>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d044      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a87      	ldr	r2, [pc, #540]	; (8003388 <HAL_DMA_Init+0x25c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d03f      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a85      	ldr	r2, [pc, #532]	; (800338c <HAL_DMA_Init+0x260>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d03a      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a84      	ldr	r2, [pc, #528]	; (8003390 <HAL_DMA_Init+0x264>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d035      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a82      	ldr	r2, [pc, #520]	; (8003394 <HAL_DMA_Init+0x268>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d030      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a81      	ldr	r2, [pc, #516]	; (8003398 <HAL_DMA_Init+0x26c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d02b      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a7f      	ldr	r2, [pc, #508]	; (800339c <HAL_DMA_Init+0x270>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d026      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a7e      	ldr	r2, [pc, #504]	; (80033a0 <HAL_DMA_Init+0x274>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d021      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a7c      	ldr	r2, [pc, #496]	; (80033a4 <HAL_DMA_Init+0x278>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01c      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a7b      	ldr	r2, [pc, #492]	; (80033a8 <HAL_DMA_Init+0x27c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d017      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a79      	ldr	r2, [pc, #484]	; (80033ac <HAL_DMA_Init+0x280>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d012      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a78      	ldr	r2, [pc, #480]	; (80033b0 <HAL_DMA_Init+0x284>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00d      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a76      	ldr	r2, [pc, #472]	; (80033b4 <HAL_DMA_Init+0x288>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d008      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a75      	ldr	r2, [pc, #468]	; (80033b8 <HAL_DMA_Init+0x28c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <HAL_DMA_Init+0xc4>
 80031e8:	21b7      	movs	r1, #183	; 0xb7
 80031ea:	4874      	ldr	r0, [pc, #464]	; (80033bc <HAL_DMA_Init+0x290>)
 80031ec:	f7fe fdfd 	bl	8001dea <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d026      	beq.n	8003246 <HAL_DMA_Init+0x11a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003200:	d021      	beq.n	8003246 <HAL_DMA_Init+0x11a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800320a:	d01c      	beq.n	8003246 <HAL_DMA_Init+0x11a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003214:	d017      	beq.n	8003246 <HAL_DMA_Init+0x11a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321e:	d012      	beq.n	8003246 <HAL_DMA_Init+0x11a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003228:	d00d      	beq.n	8003246 <HAL_DMA_Init+0x11a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003232:	d008      	beq.n	8003246 <HAL_DMA_Init+0x11a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800323c:	d003      	beq.n	8003246 <HAL_DMA_Init+0x11a>
 800323e:	21b8      	movs	r1, #184	; 0xb8
 8003240:	485e      	ldr	r0, [pc, #376]	; (80033bc <HAL_DMA_Init+0x290>)
 8003242:	f7fe fdd2 	bl	8001dea <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_DMA_Init+0x13a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d007      	beq.n	8003266 <HAL_DMA_Init+0x13a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b80      	cmp	r3, #128	; 0x80
 800325c:	d003      	beq.n	8003266 <HAL_DMA_Init+0x13a>
 800325e:	21b9      	movs	r1, #185	; 0xb9
 8003260:	4856      	ldr	r0, [pc, #344]	; (80033bc <HAL_DMA_Init+0x290>)
 8003262:	f7fe fdc2 	bl	8001dea <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800326e:	d007      	beq.n	8003280 <HAL_DMA_Init+0x154>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_DMA_Init+0x154>
 8003278:	21ba      	movs	r1, #186	; 0xba
 800327a:	4850      	ldr	r0, [pc, #320]	; (80033bc <HAL_DMA_Init+0x290>)
 800327c:	f7fe fdb5 	bl	8001dea <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003288:	d007      	beq.n	800329a <HAL_DMA_Init+0x16e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_DMA_Init+0x16e>
 8003292:	21bb      	movs	r1, #187	; 0xbb
 8003294:	4849      	ldr	r0, [pc, #292]	; (80033bc <HAL_DMA_Init+0x290>)
 8003296:	f7fe fda8 	bl	8001dea <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <HAL_DMA_Init+0x192>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032aa:	d008      	beq.n	80032be <HAL_DMA_Init+0x192>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b4:	d003      	beq.n	80032be <HAL_DMA_Init+0x192>
 80032b6:	21bc      	movs	r1, #188	; 0xbc
 80032b8:	4840      	ldr	r0, [pc, #256]	; (80033bc <HAL_DMA_Init+0x290>)
 80032ba:	f7fe fd96 	bl	8001dea <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <HAL_DMA_Init+0x1b6>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ce:	d008      	beq.n	80032e2 <HAL_DMA_Init+0x1b6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032d8:	d003      	beq.n	80032e2 <HAL_DMA_Init+0x1b6>
 80032da:	21bd      	movs	r1, #189	; 0xbd
 80032dc:	4837      	ldr	r0, [pc, #220]	; (80033bc <HAL_DMA_Init+0x290>)
 80032de:	f7fe fd84 	bl	8001dea <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00c      	beq.n	8003304 <HAL_DMA_Init+0x1d8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f2:	d007      	beq.n	8003304 <HAL_DMA_Init+0x1d8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d003      	beq.n	8003304 <HAL_DMA_Init+0x1d8>
 80032fc:	21be      	movs	r1, #190	; 0xbe
 80032fe:	482f      	ldr	r0, [pc, #188]	; (80033bc <HAL_DMA_Init+0x290>)
 8003300:	f7fe fd73 	bl	8001dea <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d012      	beq.n	8003332 <HAL_DMA_Init+0x206>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003314:	d00d      	beq.n	8003332 <HAL_DMA_Init+0x206>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800331e:	d008      	beq.n	8003332 <HAL_DMA_Init+0x206>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003328:	d003      	beq.n	8003332 <HAL_DMA_Init+0x206>
 800332a:	21bf      	movs	r1, #191	; 0xbf
 800332c:	4823      	ldr	r0, [pc, #140]	; (80033bc <HAL_DMA_Init+0x290>)
 800332e:	f7fe fd5c 	bl	8001dea <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_DMA_Init+0x21e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	2b04      	cmp	r3, #4
 8003340:	d003      	beq.n	800334a <HAL_DMA_Init+0x21e>
 8003342:	21c0      	movs	r1, #192	; 0xc0
 8003344:	481d      	ldr	r0, [pc, #116]	; (80033bc <HAL_DMA_Init+0x290>)
 8003346:	f7fe fd50 	bl	8001dea <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b00      	cmp	r3, #0
 8003350:	d064      	beq.n	800341c <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	2b00      	cmp	r3, #0
 8003358:	d032      	beq.n	80033c0 <HAL_DMA_Init+0x294>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	2b01      	cmp	r3, #1
 8003360:	d02e      	beq.n	80033c0 <HAL_DMA_Init+0x294>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	2b02      	cmp	r3, #2
 8003368:	d02a      	beq.n	80033c0 <HAL_DMA_Init+0x294>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	2b03      	cmp	r3, #3
 8003370:	d026      	beq.n	80033c0 <HAL_DMA_Init+0x294>
 8003372:	21c5      	movs	r1, #197	; 0xc5
 8003374:	4811      	ldr	r0, [pc, #68]	; (80033bc <HAL_DMA_Init+0x290>)
 8003376:	f7fe fd38 	bl	8001dea <assert_failed>
 800337a:	e021      	b.n	80033c0 <HAL_DMA_Init+0x294>
 800337c:	40026010 	.word	0x40026010
 8003380:	40026028 	.word	0x40026028
 8003384:	40026040 	.word	0x40026040
 8003388:	40026058 	.word	0x40026058
 800338c:	40026070 	.word	0x40026070
 8003390:	40026088 	.word	0x40026088
 8003394:	400260a0 	.word	0x400260a0
 8003398:	400260b8 	.word	0x400260b8
 800339c:	40026410 	.word	0x40026410
 80033a0:	40026428 	.word	0x40026428
 80033a4:	40026440 	.word	0x40026440
 80033a8:	40026458 	.word	0x40026458
 80033ac:	40026470 	.word	0x40026470
 80033b0:	40026488 	.word	0x40026488
 80033b4:	400264a0 	.word	0x400264a0
 80033b8:	400264b8 	.word	0x400264b8
 80033bc:	080115ac 	.word	0x080115ac
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d012      	beq.n	80033ee <HAL_DMA_Init+0x2c2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033d0:	d00d      	beq.n	80033ee <HAL_DMA_Init+0x2c2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033da:	d008      	beq.n	80033ee <HAL_DMA_Init+0x2c2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033e4:	d003      	beq.n	80033ee <HAL_DMA_Init+0x2c2>
 80033e6:	21c6      	movs	r1, #198	; 0xc6
 80033e8:	485b      	ldr	r0, [pc, #364]	; (8003558 <HAL_DMA_Init+0x42c>)
 80033ea:	f7fe fcfe 	bl	8001dea <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d012      	beq.n	800341c <HAL_DMA_Init+0x2f0>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033fe:	d00d      	beq.n	800341c <HAL_DMA_Init+0x2f0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003408:	d008      	beq.n	800341c <HAL_DMA_Init+0x2f0>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003412:	d003      	beq.n	800341c <HAL_DMA_Init+0x2f0>
 8003414:	21c7      	movs	r1, #199	; 0xc7
 8003416:	4850      	ldr	r0, [pc, #320]	; (8003558 <HAL_DMA_Init+0x42c>)
 8003418:	f7fe fce7 	bl	8001dea <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800343c:	e00f      	b.n	800345e <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800343e:	f7ff fd33 	bl	8002ea8 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b05      	cmp	r3, #5
 800344a:	d908      	bls.n	800345e <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2203      	movs	r2, #3
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e078      	b.n	8003550 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e8      	bne.n	800343e <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <HAL_DMA_Init+0x430>)
 8003478:	4013      	ands	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800348a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d107      	bne.n	80034c8 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	4313      	orrs	r3, r2
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 0307 	bic.w	r3, r3, #7
 80034de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d117      	bne.n	8003522 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00e      	beq.n	8003522 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 faa1 	bl	8003a4c <DMA_CheckFifoParam>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2240      	movs	r2, #64	; 0x40
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800351e:	2301      	movs	r3, #1
 8003520:	e016      	b.n	8003550 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa58 	bl	80039e0 <DMA_CalcBaseAndBitshift>
 8003530:	4603      	mov	r3, r0
 8003532:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	223f      	movs	r2, #63	; 0x3f
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	080115ac 	.word	0x080115ac
 800355c:	f010803f 	.word	0xf010803f

08003560 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003576:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_DMA_Start_IT+0x26>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d304      	bcc.n	8003590 <HAL_DMA_Start_IT+0x30>
 8003586:	f240 11cb 	movw	r1, #459	; 0x1cb
 800358a:	4827      	ldr	r0, [pc, #156]	; (8003628 <HAL_DMA_Start_IT+0xc8>)
 800358c:	f7fe fc2d 	bl	8001dea <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_DMA_Start_IT+0x3e>
 800359a:	2302      	movs	r3, #2
 800359c:	e040      	b.n	8003620 <HAL_DMA_Start_IT+0xc0>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d12f      	bne.n	8003612 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2202      	movs	r2, #2
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f9dc 	bl	8003984 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	223f      	movs	r2, #63	; 0x3f
 80035d2:	409a      	lsls	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0216 	orr.w	r2, r2, #22
 80035e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d007      	beq.n	8003600 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0208 	orr.w	r2, r2, #8
 80035fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e005      	b.n	800361e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800361a:	2302      	movs	r3, #2
 800361c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800361e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	080115ac 	.word	0x080115ac

0800362c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d004      	beq.n	800364a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e00c      	b.n	8003664 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2205      	movs	r2, #5
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800367c:	4b8e      	ldr	r3, [pc, #568]	; (80038b8 <HAL_DMA_IRQHandler+0x248>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a8e      	ldr	r2, [pc, #568]	; (80038bc <HAL_DMA_IRQHandler+0x24c>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	0a9b      	lsrs	r3, r3, #10
 8003688:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	2208      	movs	r2, #8
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01a      	beq.n	80036dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d013      	beq.n	80036dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0204 	bic.w	r2, r2, #4
 80036c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	2208      	movs	r2, #8
 80036ca:	409a      	lsls	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	f043 0201 	orr.w	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	2201      	movs	r2, #1
 80036e2:	409a      	lsls	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d012      	beq.n	8003712 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	2201      	movs	r2, #1
 8003700:	409a      	lsls	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	f043 0202 	orr.w	r2, r3, #2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003716:	2204      	movs	r2, #4
 8003718:	409a      	lsls	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d012      	beq.n	8003748 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	2204      	movs	r2, #4
 8003736:	409a      	lsls	r2, r3
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	f043 0204 	orr.w	r2, r3, #4
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374c:	2210      	movs	r2, #16
 800374e:	409a      	lsls	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d043      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d03c      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	2210      	movs	r2, #16
 800376c:	409a      	lsls	r2, r3
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d018      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d108      	bne.n	80037a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d024      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
 800379e:	e01f      	b.n	80037e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01b      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
 80037b0:	e016      	b.n	80037e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d107      	bne.n	80037d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0208 	bic.w	r2, r2, #8
 80037ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	2220      	movs	r2, #32
 80037e6:	409a      	lsls	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 808f 	beq.w	8003910 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8087 	beq.w	8003910 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	2220      	movs	r2, #32
 8003808:	409a      	lsls	r2, r3
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b05      	cmp	r3, #5
 8003818:	d136      	bne.n	8003888 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0216 	bic.w	r2, r2, #22
 8003828:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695a      	ldr	r2, [r3, #20]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003838:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <HAL_DMA_IRQHandler+0x1da>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0208 	bic.w	r2, r2, #8
 8003858:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385e:	223f      	movs	r2, #63	; 0x3f
 8003860:	409a      	lsls	r2, r3
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387a:	2b00      	cmp	r3, #0
 800387c:	d07e      	beq.n	800397c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
        }
        return;
 8003886:	e079      	b.n	800397c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d01d      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10d      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d031      	beq.n	8003910 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
 80038b4:	e02c      	b.n	8003910 <HAL_DMA_IRQHandler+0x2a0>
 80038b6:	bf00      	nop
 80038b8:	2000008c 	.word	0x2000008c
 80038bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d023      	beq.n	8003910 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
 80038d0:	e01e      	b.n	8003910 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10f      	bne.n	8003900 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0210 	bic.w	r2, r2, #16
 80038ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	2b00      	cmp	r3, #0
 8003916:	d032      	beq.n	800397e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d022      	beq.n	800396a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2205      	movs	r2, #5
 8003928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	3301      	adds	r3, #1
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	429a      	cmp	r2, r3
 8003946:	d307      	bcc.n	8003958 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f2      	bne.n	800393c <HAL_DMA_IRQHandler+0x2cc>
 8003956:	e000      	b.n	800395a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003958:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
 800397a:	e000      	b.n	800397e <HAL_DMA_IRQHandler+0x30e>
        return;
 800397c:	bf00      	nop
    }
  }
}
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b40      	cmp	r3, #64	; 0x40
 80039b0:	d108      	bne.n	80039c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039c2:	e007      	b.n	80039d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	3b10      	subs	r3, #16
 80039f0:	4a14      	ldr	r2, [pc, #80]	; (8003a44 <DMA_CalcBaseAndBitshift+0x64>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039fa:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <DMA_CalcBaseAndBitshift+0x68>)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d909      	bls.n	8003a22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a16:	f023 0303 	bic.w	r3, r3, #3
 8003a1a:	1d1a      	adds	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	659a      	str	r2, [r3, #88]	; 0x58
 8003a20:	e007      	b.n	8003a32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	aaaaaaab 	.word	0xaaaaaaab
 8003a48:	08013a30 	.word	0x08013a30

08003a4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11f      	bne.n	8003aa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d856      	bhi.n	8003b1a <DMA_CheckFifoParam+0xce>
 8003a6c:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <DMA_CheckFifoParam+0x28>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003a85 	.word	0x08003a85
 8003a78:	08003a97 	.word	0x08003a97
 8003a7c:	08003a85 	.word	0x08003a85
 8003a80:	08003b1b 	.word	0x08003b1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d046      	beq.n	8003b1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a94:	e043      	b.n	8003b1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a9e:	d140      	bne.n	8003b22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa4:	e03d      	b.n	8003b22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aae:	d121      	bne.n	8003af4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d837      	bhi.n	8003b26 <DMA_CheckFifoParam+0xda>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <DMA_CheckFifoParam+0x70>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003ad3 	.word	0x08003ad3
 8003ac4:	08003acd 	.word	0x08003acd
 8003ac8:	08003ae5 	.word	0x08003ae5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad0:	e030      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d025      	beq.n	8003b2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae2:	e022      	b.n	8003b2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aec:	d11f      	bne.n	8003b2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003af2:	e01c      	b.n	8003b2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d903      	bls.n	8003b02 <DMA_CheckFifoParam+0xb6>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d003      	beq.n	8003b08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b00:	e018      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
      break;
 8003b06:	e015      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00e      	beq.n	8003b32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
      break;
 8003b18:	e00b      	b.n	8003b32 <DMA_CheckFifoParam+0xe6>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e00a      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e008      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
      break;
 8003b22:	bf00      	nop
 8003b24:	e006      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
      break;
 8003b26:	bf00      	nop
 8003b28:	e004      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e002      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b2e:	bf00      	nop
 8003b30:	e000      	b.n	8003b34 <DMA_CheckFifoParam+0xe8>
      break;
 8003b32:	bf00      	nop
    }
  } 
  
  return status; 
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop

08003b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a33      	ldr	r2, [pc, #204]	; (8003c2c <HAL_GPIO_Init+0xe8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d017      	beq.n	8003b92 <HAL_GPIO_Init+0x4e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a32      	ldr	r2, [pc, #200]	; (8003c30 <HAL_GPIO_Init+0xec>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <HAL_GPIO_Init+0x4e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a31      	ldr	r2, [pc, #196]	; (8003c34 <HAL_GPIO_Init+0xf0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00f      	beq.n	8003b92 <HAL_GPIO_Init+0x4e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a30      	ldr	r2, [pc, #192]	; (8003c38 <HAL_GPIO_Init+0xf4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <HAL_GPIO_Init+0x4e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a2f      	ldr	r2, [pc, #188]	; (8003c3c <HAL_GPIO_Init+0xf8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <HAL_GPIO_Init+0x4e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2e      	ldr	r2, [pc, #184]	; (8003c40 <HAL_GPIO_Init+0xfc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_Init+0x4e>
 8003b8a:	21ac      	movs	r1, #172	; 0xac
 8003b8c:	482d      	ldr	r0, [pc, #180]	; (8003c44 <HAL_GPIO_Init+0x100>)
 8003b8e:	f7fe f92c 	bl	8001dea <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_GPIO_Init+0x64>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x6c>
 8003ba8:	21ad      	movs	r1, #173	; 0xad
 8003baa:	4826      	ldr	r0, [pc, #152]	; (8003c44 <HAL_GPIO_Init+0x100>)
 8003bac:	f7fe f91d 	bl	8001dea <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d035      	beq.n	8003c24 <HAL_GPIO_Init+0xe0>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d031      	beq.n	8003c24 <HAL_GPIO_Init+0xe0>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b11      	cmp	r3, #17
 8003bc6:	d02d      	beq.n	8003c24 <HAL_GPIO_Init+0xe0>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d029      	beq.n	8003c24 <HAL_GPIO_Init+0xe0>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b12      	cmp	r3, #18
 8003bd6:	d025      	beq.n	8003c24 <HAL_GPIO_Init+0xe0>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003be0:	d020      	beq.n	8003c24 <HAL_GPIO_Init+0xe0>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003bea:	d01b      	beq.n	8003c24 <HAL_GPIO_Init+0xe0>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003bf4:	d016      	beq.n	8003c24 <HAL_GPIO_Init+0xe0>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003bfe:	d011      	beq.n	8003c24 <HAL_GPIO_Init+0xe0>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003c08:	d00c      	beq.n	8003c24 <HAL_GPIO_Init+0xe0>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003c12:	d007      	beq.n	8003c24 <HAL_GPIO_Init+0xe0>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0xe0>
 8003c1c:	21ae      	movs	r1, #174	; 0xae
 8003c1e:	4809      	ldr	r0, [pc, #36]	; (8003c44 <HAL_GPIO_Init+0x100>)
 8003c20:	f7fe f8e3 	bl	8001dea <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c24:	2300      	movs	r3, #0
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	e20c      	b.n	8004044 <HAL_GPIO_Init+0x500>
 8003c2a:	bf00      	nop
 8003c2c:	40020000 	.word	0x40020000
 8003c30:	40020400 	.word	0x40020400
 8003c34:	40020800 	.word	0x40020800
 8003c38:	40020c00 	.word	0x40020c00
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40021c00 	.word	0x40021c00
 8003c44:	080115e4 	.word	0x080115e4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c48:	2201      	movs	r2, #1
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	f040 81ec 	bne.w	800403e <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d005      	beq.n	8003c7e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d144      	bne.n	8003d08 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00f      	beq.n	8003ca6 <HAL_GPIO_Init+0x162>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_GPIO_Init+0x162>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d007      	beq.n	8003ca6 <HAL_GPIO_Init+0x162>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x162>
 8003c9e:	21c0      	movs	r1, #192	; 0xc0
 8003ca0:	4884      	ldr	r0, [pc, #528]	; (8003eb4 <HAL_GPIO_Init+0x370>)
 8003ca2:	f7fe f8a2 	bl	8001dea <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cdc:	2201      	movs	r2, #1
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	f003 0201 	and.w	r2, r3, #1
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d027      	beq.n	8003d64 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_GPIO_Init+0x1f0>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d007      	beq.n	8003d34 <HAL_GPIO_Init+0x1f0>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d003      	beq.n	8003d34 <HAL_GPIO_Init+0x1f0>
 8003d2c:	21d1      	movs	r1, #209	; 0xd1
 8003d2e:	4861      	ldr	r0, [pc, #388]	; (8003eb4 <HAL_GPIO_Init+0x370>)
 8003d30:	f7fe f85b 	bl	8001dea <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	f040 80a3 	bne.w	8003eb8 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d077      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b09      	cmp	r3, #9
 8003d80:	d073      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d06f      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d06b      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d067      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d063      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d05f      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d05b      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d057      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d053      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d04f      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d04b      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d047      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d043      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d03f      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	d03b      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b05      	cmp	r3, #5
 8003df8:	d037      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d033      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d02f      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d02b      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b06      	cmp	r3, #6
 8003e18:	d027      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b07      	cmp	r3, #7
 8003e20:	d023      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b07      	cmp	r3, #7
 8003e28:	d01f      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b07      	cmp	r3, #7
 8003e30:	d01b      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d017      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b0a      	cmp	r3, #10
 8003e40:	d013      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b09      	cmp	r3, #9
 8003e48:	d00f      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b09      	cmp	r3, #9
 8003e50:	d00b      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b0c      	cmp	r3, #12
 8003e58:	d007      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b0f      	cmp	r3, #15
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x326>
 8003e62:	21de      	movs	r1, #222	; 0xde
 8003e64:	4813      	ldr	r0, [pc, #76]	; (8003eb4 <HAL_GPIO_Init+0x370>)
 8003e66:	f7fd ffc0 	bl	8001dea <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	08da      	lsrs	r2, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3208      	adds	r2, #8
 8003e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	220f      	movs	r2, #15
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	08da      	lsrs	r2, r3, #3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3208      	adds	r2, #8
 8003eac:	69b9      	ldr	r1, [r7, #24]
 8003eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003eb2:	e001      	b.n	8003eb8 <HAL_GPIO_Init+0x374>
 8003eb4:	080115e4 	.word	0x080115e4
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0203 	and.w	r2, r3, #3
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80a2 	beq.w	800403e <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	4b56      	ldr	r3, [pc, #344]	; (8004058 <HAL_GPIO_Init+0x514>)
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	4a55      	ldr	r2, [pc, #340]	; (8004058 <HAL_GPIO_Init+0x514>)
 8003f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f08:	6453      	str	r3, [r2, #68]	; 0x44
 8003f0a:	4b53      	ldr	r3, [pc, #332]	; (8004058 <HAL_GPIO_Init+0x514>)
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f16:	4a51      	ldr	r2, [pc, #324]	; (800405c <HAL_GPIO_Init+0x518>)
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	089b      	lsrs	r3, r3, #2
 8003f1c:	3302      	adds	r3, #2
 8003f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	220f      	movs	r2, #15
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4013      	ands	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a48      	ldr	r2, [pc, #288]	; (8004060 <HAL_GPIO_Init+0x51c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d019      	beq.n	8003f76 <HAL_GPIO_Init+0x432>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a47      	ldr	r2, [pc, #284]	; (8004064 <HAL_GPIO_Init+0x520>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <HAL_GPIO_Init+0x42e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a46      	ldr	r2, [pc, #280]	; (8004068 <HAL_GPIO_Init+0x524>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00d      	beq.n	8003f6e <HAL_GPIO_Init+0x42a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a45      	ldr	r2, [pc, #276]	; (800406c <HAL_GPIO_Init+0x528>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <HAL_GPIO_Init+0x426>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a44      	ldr	r2, [pc, #272]	; (8004070 <HAL_GPIO_Init+0x52c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <HAL_GPIO_Init+0x422>
 8003f62:	2304      	movs	r3, #4
 8003f64:	e008      	b.n	8003f78 <HAL_GPIO_Init+0x434>
 8003f66:	2307      	movs	r3, #7
 8003f68:	e006      	b.n	8003f78 <HAL_GPIO_Init+0x434>
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e004      	b.n	8003f78 <HAL_GPIO_Init+0x434>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e002      	b.n	8003f78 <HAL_GPIO_Init+0x434>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <HAL_GPIO_Init+0x434>
 8003f76:	2300      	movs	r3, #0
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	f002 0203 	and.w	r2, r2, #3
 8003f7e:	0092      	lsls	r2, r2, #2
 8003f80:	4093      	lsls	r3, r2
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f88:	4934      	ldr	r1, [pc, #208]	; (800405c <HAL_GPIO_Init+0x518>)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	089b      	lsrs	r3, r3, #2
 8003f8e:	3302      	adds	r3, #2
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f96:	4b37      	ldr	r3, [pc, #220]	; (8004074 <HAL_GPIO_Init+0x530>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fba:	4a2e      	ldr	r2, [pc, #184]	; (8004074 <HAL_GPIO_Init+0x530>)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fc0:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <HAL_GPIO_Init+0x530>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fe4:	4a23      	ldr	r2, [pc, #140]	; (8004074 <HAL_GPIO_Init+0x530>)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_GPIO_Init+0x530>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800400e:	4a19      	ldr	r2, [pc, #100]	; (8004074 <HAL_GPIO_Init+0x530>)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <HAL_GPIO_Init+0x530>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004038:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <HAL_GPIO_Init+0x530>)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3301      	adds	r3, #1
 8004042:	61fb      	str	r3, [r7, #28]
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	2b0f      	cmp	r3, #15
 8004048:	f67f adfe 	bls.w	8003c48 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	40013800 	.word	0x40013800
 8004060:	40020000 	.word	0x40020000
 8004064:	40020400 	.word	0x40020400
 8004068:	40020800 	.word	0x40020800
 800406c:	40020c00 	.word	0x40020c00
 8004070:	40021000 	.word	0x40021000
 8004074:	40013c00 	.word	0x40013c00

08004078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004088:	887b      	ldrh	r3, [r7, #2]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <HAL_GPIO_WritePin+0x20>
 800408e:	887b      	ldrh	r3, [r7, #2]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	d004      	beq.n	80040a2 <HAL_GPIO_WritePin+0x2a>
 8004098:	f240 119d 	movw	r1, #413	; 0x19d
 800409c:	480e      	ldr	r0, [pc, #56]	; (80040d8 <HAL_GPIO_WritePin+0x60>)
 800409e:	f7fd fea4 	bl	8001dea <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80040a2:	787b      	ldrb	r3, [r7, #1]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <HAL_GPIO_WritePin+0x40>
 80040a8:	787b      	ldrb	r3, [r7, #1]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d004      	beq.n	80040b8 <HAL_GPIO_WritePin+0x40>
 80040ae:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80040b2:	4809      	ldr	r0, [pc, #36]	; (80040d8 <HAL_GPIO_WritePin+0x60>)
 80040b4:	f7fd fe99 	bl	8001dea <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80040b8:	787b      	ldrb	r3, [r7, #1]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040c4:	e003      	b.n	80040ce <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040c6:	887b      	ldrh	r3, [r7, #2]
 80040c8:	041a      	lsls	r2, r3, #16
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	619a      	str	r2, [r3, #24]
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	080115e4 	.word	0x080115e4

080040dc <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80040e8:	887b      	ldrh	r3, [r7, #2]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d004      	beq.n	80040f8 <HAL_GPIO_TogglePin+0x1c>
 80040ee:	887b      	ldrh	r3, [r7, #2]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d004      	beq.n	8004102 <HAL_GPIO_TogglePin+0x26>
 80040f8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80040fc:	480a      	ldr	r0, [pc, #40]	; (8004128 <HAL_GPIO_TogglePin+0x4c>)
 80040fe:	f7fd fe74 	bl	8001dea <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004108:	887a      	ldrh	r2, [r7, #2]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4013      	ands	r3, r2
 800410e:	041a      	lsls	r2, r3, #16
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	43d9      	mvns	r1, r3
 8004114:	887b      	ldrh	r3, [r7, #2]
 8004116:	400b      	ands	r3, r1
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	619a      	str	r2, [r3, #24]
}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	080115e4 	.word	0x080115e4

0800412c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004142:	4a05      	ldr	r2, [pc, #20]	; (8004158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe fb1e 	bl	800278c <HAL_GPIO_EXTI_Callback>
  }
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40013c00 	.word	0x40013c00

0800415c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800415c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800415e:	b08f      	sub	sp, #60	; 0x3c
 8004160:	af0a      	add	r7, sp, #40	; 0x28
 8004162:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e118      	b.n	80043a0 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004176:	d003      	beq.n	8004180 <HAL_PCD_Init+0x24>
 8004178:	2187      	movs	r1, #135	; 0x87
 800417a:	488b      	ldr	r0, [pc, #556]	; (80043a8 <HAL_PCD_Init+0x24c>)
 800417c:	f7fd fe35 	bl	8001dea <assert_failed>

  USBx = hpcd->Instance;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f00c f926 	bl	80103ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2203      	movs	r2, #3
 80041a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f005 fa25 	bl	800960e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	687e      	ldr	r6, [r7, #4]
 80041cc:	466d      	mov	r5, sp
 80041ce:	f106 0410 	add.w	r4, r6, #16
 80041d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041de:	e885 0003 	stmia.w	r5, {r0, r1}
 80041e2:	1d33      	adds	r3, r6, #4
 80041e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041e6:	6838      	ldr	r0, [r7, #0]
 80041e8:	f005 f8fc 	bl	80093e4 <USB_CoreInit>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0d0      	b.n	80043a0 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2100      	movs	r1, #0
 8004204:	4618      	mov	r0, r3
 8004206:	f005 fa13 	bl	8009630 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
 800420e:	e04a      	b.n	80042a6 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004210:	7bfa      	ldrb	r2, [r7, #15]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	333d      	adds	r3, #61	; 0x3d
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	333c      	adds	r3, #60	; 0x3c
 8004234:	7bfa      	ldrb	r2, [r7, #15]
 8004236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	b298      	uxth	r0, r3
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	3344      	adds	r3, #68	; 0x44
 800424c:	4602      	mov	r2, r0
 800424e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	3340      	adds	r3, #64	; 0x40
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	3348      	adds	r3, #72	; 0x48
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	334c      	adds	r3, #76	; 0x4c
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800428c:	7bfa      	ldrb	r2, [r7, #15]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	3354      	adds	r3, #84	; 0x54
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	3301      	adds	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d3af      	bcc.n	8004210 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e044      	b.n	8004340 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042b6:	7bfa      	ldrb	r2, [r7, #15]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042cc:	7bfa      	ldrb	r2, [r7, #15]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042f8:	7bfa      	ldrb	r2, [r7, #15]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800430e:	7bfa      	ldrb	r2, [r7, #15]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004324:	7bfa      	ldrb	r2, [r7, #15]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	3301      	adds	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
 8004340:	7bfa      	ldrb	r2, [r7, #15]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d3b5      	bcc.n	80042b6 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	687e      	ldr	r6, [r7, #4]
 8004352:	466d      	mov	r5, sp
 8004354:	f106 0410 	add.w	r4, r6, #16
 8004358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800435a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800435c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800435e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004360:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004364:	e885 0003 	stmia.w	r5, {r0, r1}
 8004368:	1d33      	adds	r3, r6, #4
 800436a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800436c:	6838      	ldr	r0, [r7, #0]
 800436e:	f005 f9ab 	bl	80096c8 <USB_DevInit>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e00d      	b.n	80043a0 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f006 fafa 	bl	800a992 <USB_DevDisconnect>

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a8:	08011620 	.word	0x08011620

080043ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_PCD_Start+0x1c>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e020      	b.n	800440a <HAL_PCD_Start+0x5e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d109      	bne.n	80043ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d005      	beq.n	80043ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f005 f8fb 	bl	80095ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f006 faa8 	bl	800a950 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004412:	b590      	push	{r4, r7, lr}
 8004414:	b08d      	sub	sp, #52	; 0x34
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f006 fb66 	bl	800aafa <USB_GetMode>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 848a 	bne.w	8004d4a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f006 faca 	bl	800a9d4 <USB_ReadInterrupts>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8480 	beq.w	8004d48 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	0a1b      	lsrs	r3, r3, #8
 8004452:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f006 fab7 	bl	800a9d4 <USB_ReadInterrupts>
 8004466:	4603      	mov	r3, r0
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b02      	cmp	r3, #2
 800446e:	d107      	bne.n	8004480 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f002 0202 	and.w	r2, r2, #2
 800447e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f006 faa5 	bl	800a9d4 <USB_ReadInterrupts>
 800448a:	4603      	mov	r3, r0
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b10      	cmp	r3, #16
 8004492:	d161      	bne.n	8004558 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0210 	bic.w	r2, r2, #16
 80044a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f003 020f 	and.w	r2, r3, #15
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	4413      	add	r3, r2
 80044c0:	3304      	adds	r3, #4
 80044c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	0c5b      	lsrs	r3, r3, #17
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d124      	bne.n	800451a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d035      	beq.n	8004548 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	6a38      	ldr	r0, [r7, #32]
 80044f0:	f006 f8dc 	bl	800a6ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004500:	441a      	add	r2, r3
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004512:	441a      	add	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	621a      	str	r2, [r3, #32]
 8004518:	e016      	b.n	8004548 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	0c5b      	lsrs	r3, r3, #17
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	2b06      	cmp	r3, #6
 8004524:	d110      	bne.n	8004548 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800452c:	2208      	movs	r2, #8
 800452e:	4619      	mov	r1, r3
 8004530:	6a38      	ldr	r0, [r7, #32]
 8004532:	f006 f8bb 	bl	800a6ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6a1a      	ldr	r2, [r3, #32]
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004542:	441a      	add	r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0210 	orr.w	r2, r2, #16
 8004556:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f006 fa39 	bl	800a9d4 <USB_ReadInterrupts>
 8004562:	4603      	mov	r3, r0
 8004564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004568:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800456c:	f040 80a7 	bne.w	80046be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f006 fa3e 	bl	800a9fa <USB_ReadDevAllOutEpInterrupt>
 800457e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004580:	e099      	b.n	80046b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 808e 	beq.w	80046aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f006 fa62 	bl	800aa62 <USB_ReadDevOutEPInterrupt>
 800459e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00c      	beq.n	80045c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b6:	461a      	mov	r2, r3
 80045b8:	2301      	movs	r3, #1
 80045ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80045bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fec2 	bl	8005348 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00c      	beq.n	80045e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	461a      	mov	r2, r3
 80045dc:	2308      	movs	r3, #8
 80045de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 ff98 	bl	8005518 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fe:	461a      	mov	r2, r3
 8004600:	2310      	movs	r3, #16
 8004602:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d030      	beq.n	8004670 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d109      	bne.n	800462e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800462c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800462e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4413      	add	r3, r2
 8004640:	3304      	adds	r3, #4
 8004642:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	78db      	ldrb	r3, [r3, #3]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d108      	bne.n	800465e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2200      	movs	r2, #0
 8004650:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	b2db      	uxtb	r3, r3
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f00b ffc3 	bl	80105e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	2302      	movs	r3, #2
 800466e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	461a      	mov	r2, r3
 8004688:	2320      	movs	r3, #32
 800468a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	461a      	mov	r2, r3
 80046a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	3301      	adds	r3, #1
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f47f af62 	bne.w	8004582 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f006 f986 	bl	800a9d4 <USB_ReadInterrupts>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046d2:	f040 80db 	bne.w	800488c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f006 f9a7 	bl	800aa2e <USB_ReadDevAllInEpInterrupt>
 80046e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80046e6:	e0cd      	b.n	8004884 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80c2 	beq.w	8004878 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f006 f9cd 	bl	800aa9e <USB_ReadDevInEPInterrupt>
 8004704:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d057      	beq.n	80047c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	2201      	movs	r2, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	43db      	mvns	r3, r3
 800472a:	69f9      	ldr	r1, [r7, #28]
 800472c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004730:	4013      	ands	r3, r2
 8004732:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	461a      	mov	r2, r3
 8004742:	2301      	movs	r3, #1
 8004744:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d132      	bne.n	80047b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004752:	4613      	mov	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	334c      	adds	r3, #76	; 0x4c
 800475e:	6819      	ldr	r1, [r3, #0]
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4403      	add	r3, r0
 800476e:	3348      	adds	r3, #72	; 0x48
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4419      	add	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4403      	add	r3, r0
 8004782:	334c      	adds	r3, #76	; 0x4c
 8004784:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	2b00      	cmp	r3, #0
 800478a:	d113      	bne.n	80047b4 <HAL_PCD_IRQHandler+0x3a2>
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	3354      	adds	r3, #84	; 0x54
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d108      	bne.n	80047b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047ac:	461a      	mov	r2, r3
 80047ae:	2101      	movs	r1, #1
 80047b0:	f006 f9d4 	bl	800ab5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f00b fe97 	bl	80104ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	461a      	mov	r2, r3
 80047d8:	2308      	movs	r3, #8
 80047da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f2:	461a      	mov	r2, r3
 80047f4:	2310      	movs	r3, #16
 80047f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480e:	461a      	mov	r2, r3
 8004810:	2340      	movs	r3, #64	; 0x40
 8004812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d023      	beq.n	8004866 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800481e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004820:	6a38      	ldr	r0, [r7, #32]
 8004822:	f005 f8b5 	bl	8009990 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	3338      	adds	r3, #56	; 0x38
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	3304      	adds	r3, #4
 8004838:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	78db      	ldrb	r3, [r3, #3]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d108      	bne.n	8004854 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2200      	movs	r2, #0
 8004846:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	b2db      	uxtb	r3, r3
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f00b feda 	bl	8010608 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004860:	461a      	mov	r2, r3
 8004862:	2302      	movs	r3, #2
 8004864:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fcdb 	bl	800522e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	3301      	adds	r3, #1
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	f47f af2e 	bne.w	80046e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f006 f89f 	bl	800a9d4 <USB_ReadInterrupts>
 8004896:	4603      	mov	r3, r0
 8004898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800489c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048a0:	d122      	bne.n	80048e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d108      	bne.n	80048d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048c8:	2100      	movs	r1, #0
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fec2 	bl	8005654 <HAL_PCDEx_LPM_Callback>
 80048d0:	e002      	b.n	80048d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f00b fe78 	bl	80105c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80048e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f006 f871 	bl	800a9d4 <USB_ReadInterrupts>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048fc:	d112      	bne.n	8004924 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b01      	cmp	r3, #1
 800490c:	d102      	bne.n	8004914 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f00b fe34 	bl	801057c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004922:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f006 f853 	bl	800a9d4 <USB_ReadInterrupts>
 800492e:	4603      	mov	r3, r0
 8004930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004938:	f040 80b7 	bne.w	8004aaa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2110      	movs	r1, #16
 8004956:	4618      	mov	r0, r3
 8004958:	f005 f81a 	bl	8009990 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800495c:	2300      	movs	r3, #0
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004960:	e046      	b.n	80049f0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	461a      	mov	r2, r3
 8004970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004974:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	440a      	add	r2, r1
 800498c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004990:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004994:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a2:	461a      	mov	r2, r3
 80049a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ec:	3301      	adds	r3, #1
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d3b3      	bcc.n	8004962 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a08:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004a0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d016      	beq.n	8004a44 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a26:	f043 030b 	orr.w	r3, r3, #11
 8004a2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3c:	f043 030b 	orr.w	r3, r3, #11
 8004a40:	6453      	str	r3, [r2, #68]	; 0x44
 8004a42:	e015      	b.n	8004a70 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a56:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004a5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a6a:	f043 030b 	orr.w	r3, r3, #11
 8004a6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a94:	461a      	mov	r2, r3
 8004a96:	f006 f861 	bl	800ab5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695a      	ldr	r2, [r3, #20]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f005 ff90 	bl	800a9d4 <USB_ReadInterrupts>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004abe:	d124      	bne.n	8004b0a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f006 f826 	bl	800ab16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f004 ffdb 	bl	8009a8a <USB_GetDevSpeed>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681c      	ldr	r4, [r3, #0]
 8004ae0:	f001 fb40 	bl	8006164 <HAL_RCC_GetHCLKFreq>
 8004ae4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	4620      	mov	r0, r4
 8004af0:	f004 fcda 	bl	80094a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f00b fd22 	bl	801053e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f005 ff60 	bl	800a9d4 <USB_ReadInterrupts>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d10a      	bne.n	8004b34 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f00b fcff 	bl	8010522 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f002 0208 	and.w	r2, r2, #8
 8004b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f005 ff4b 	bl	800a9d4 <USB_ReadInterrupts>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d122      	bne.n	8004b8e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b54:	2301      	movs	r3, #1
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
 8004b58:	e014      	b.n	8004b84 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d105      	bne.n	8004b7e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fb27 	bl	80051cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	3301      	adds	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d3e5      	bcc.n	8004b5a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f005 ff1e 	bl	800a9d4 <USB_ReadInterrupts>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba2:	d13b      	bne.n	8004c1c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba8:	e02b      	b.n	8004c02 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3340      	adds	r3, #64	; 0x40
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d115      	bne.n	8004bfc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004bd0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	da12      	bge.n	8004bfc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bda:	4613      	mov	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	333f      	adds	r3, #63	; 0x3f
 8004be6:	2201      	movs	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fae8 	bl	80051cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	3301      	adds	r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3ce      	bcc.n	8004baa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f005 fed7 	bl	800a9d4 <USB_ReadInterrupts>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c30:	d155      	bne.n	8004cde <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c32:	2301      	movs	r3, #1
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
 8004c36:	e045      	b.n	8004cc4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d12e      	bne.n	8004cbe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	da2b      	bge.n	8004cbe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004c72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d121      	bne.n	8004cbe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7e:	4613      	mov	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cba:	6053      	str	r3, [r2, #4]
            break;
 8004cbc:	e007      	b.n	8004cce <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d3b4      	bcc.n	8004c38 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695a      	ldr	r2, [r3, #20]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f005 fe76 	bl	800a9d4 <USB_ReadInterrupts>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf2:	d10a      	bne.n	8004d0a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f00b fc99 	bl	801062c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f005 fe60 	bl	800a9d4 <USB_ReadInterrupts>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d115      	bne.n	8004d4a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f00b fc89 	bl	8010648 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	e000      	b.n	8004d4a <HAL_PCD_IRQHandler+0x938>
      return;
 8004d48:	bf00      	nop
    }
  }
}
 8004d4a:	3734      	adds	r7, #52	; 0x34
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd90      	pop	{r4, r7, pc}

08004d50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_PCD_SetAddress+0x1a>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e013      	b.n	8004d92 <HAL_PCD_SetAddress+0x42>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f005 fdbe 	bl	800a904 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	4608      	mov	r0, r1
 8004da4:	4611      	mov	r1, r2
 8004da6:	461a      	mov	r2, r3
 8004da8:	4603      	mov	r3, r0
 8004daa:	70fb      	strb	r3, [r7, #3]
 8004dac:	460b      	mov	r3, r1
 8004dae:	803b      	strh	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	da0f      	bge.n	8004de0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	f003 020f 	and.w	r2, r3, #15
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	3338      	adds	r3, #56	; 0x38
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	705a      	strb	r2, [r3, #1]
 8004dde:	e00f      	b.n	8004e00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	f003 020f 	and.w	r2, r3, #15
 8004de6:	4613      	mov	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4413      	add	r3, r2
 8004df6:	3304      	adds	r3, #4
 8004df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e0c:	883a      	ldrh	r2, [r7, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	78ba      	ldrb	r2, [r7, #2]
 8004e16:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d004      	beq.n	8004e2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e2a:	78bb      	ldrb	r3, [r7, #2]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d102      	bne.n	8004e36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_PCD_EP_Open+0xaa>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e00e      	b.n	8004e62 <HAL_PCD_EP_Open+0xc8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68f9      	ldr	r1, [r7, #12]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f004 fe3e 	bl	8009ad4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004e60:	7afb      	ldrb	r3, [r7, #11]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	da0f      	bge.n	8004e9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	f003 020f 	and.w	r2, r3, #15
 8004e84:	4613      	mov	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	3338      	adds	r3, #56	; 0x38
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	3304      	adds	r3, #4
 8004e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	705a      	strb	r2, [r3, #1]
 8004e9c:	e00f      	b.n	8004ebe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e9e:	78fb      	ldrb	r3, [r7, #3]
 8004ea0:	f003 020f 	and.w	r2, r3, #15
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_PCD_EP_Close+0x6e>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e00e      	b.n	8004ef6 <HAL_PCD_EP_Close+0x8c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f004 fe7c 	bl	8009be4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b086      	sub	sp, #24
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f0e:	7afb      	ldrb	r3, [r7, #11]
 8004f10:	f003 020f 	and.w	r2, r3, #15
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	3304      	adds	r3, #4
 8004f26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2200      	movs	r2, #0
 8004f38:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f40:	7afb      	ldrb	r3, [r7, #11]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d102      	bne.n	8004f5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f5a:	7afb      	ldrb	r3, [r7, #11]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d109      	bne.n	8004f78 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6979      	ldr	r1, [r7, #20]
 8004f72:	f005 f95b 	bl	800a22c <USB_EP0StartXfer>
 8004f76:	e008      	b.n	8004f8a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	6979      	ldr	r1, [r7, #20]
 8004f86:	f004 ff09 	bl	8009d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	f003 020f 	and.w	r2, r3, #15
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	4413      	add	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004fb6:	681b      	ldr	r3, [r3, #0]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	607a      	str	r2, [r7, #4]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fd4:	7afb      	ldrb	r3, [r7, #11]
 8004fd6:	f003 020f 	and.w	r2, r3, #15
 8004fda:	4613      	mov	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	3338      	adds	r3, #56	; 0x38
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	3304      	adds	r3, #4
 8004fea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2201      	movs	r2, #1
 8005002:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005004:	7afb      	ldrb	r3, [r7, #11]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	b2da      	uxtb	r2, r3
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d102      	bne.n	800501e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800501e:	7afb      	ldrb	r3, [r7, #11]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	461a      	mov	r2, r3
 8005034:	6979      	ldr	r1, [r7, #20]
 8005036:	f005 f8f9 	bl	800a22c <USB_EP0StartXfer>
 800503a:	e008      	b.n	800504e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	6979      	ldr	r1, [r7, #20]
 800504a:	f004 fea7 	bl	8009d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	f003 020f 	and.w	r2, r3, #15
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	429a      	cmp	r2, r3
 8005070:	d901      	bls.n	8005076 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e050      	b.n	8005118 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800507a:	2b00      	cmp	r3, #0
 800507c:	da0f      	bge.n	800509e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	f003 020f 	and.w	r2, r3, #15
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	3338      	adds	r3, #56	; 0x38
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	4413      	add	r3, r2
 8005092:	3304      	adds	r3, #4
 8005094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	705a      	strb	r2, [r3, #1]
 800509c:	e00d      	b.n	80050ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800509e:	78fa      	ldrb	r2, [r7, #3]
 80050a0:	4613      	mov	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	4413      	add	r3, r2
 80050b0:	3304      	adds	r3, #4
 80050b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_PCD_EP_SetStall+0x82>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e01e      	b.n	8005118 <HAL_PCD_EP_SetStall+0xc0>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f005 fb37 	bl	800a75c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	b2d9      	uxtb	r1, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005108:	461a      	mov	r2, r3
 800510a:	f005 fd27 	bl	800ab5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	f003 020f 	and.w	r2, r3, #15
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	429a      	cmp	r2, r3
 8005138:	d901      	bls.n	800513e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e042      	b.n	80051c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800513e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005142:	2b00      	cmp	r3, #0
 8005144:	da0f      	bge.n	8005166 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	f003 020f 	and.w	r2, r3, #15
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	3338      	adds	r3, #56	; 0x38
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	4413      	add	r3, r2
 800515a:	3304      	adds	r3, #4
 800515c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	705a      	strb	r2, [r3, #1]
 8005164:	e00f      	b.n	8005186 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	f003 020f 	and.w	r2, r3, #15
 800516c:	4613      	mov	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	4413      	add	r3, r2
 800517c:	3304      	adds	r3, #4
 800517e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	b2da      	uxtb	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_PCD_EP_ClrStall+0x86>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e00e      	b.n	80051c4 <HAL_PCD_EP_ClrStall+0xa4>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68f9      	ldr	r1, [r7, #12]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f005 fb3f 	bl	800a838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80051d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	da0c      	bge.n	80051fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	f003 020f 	and.w	r2, r3, #15
 80051e6:	4613      	mov	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	3338      	adds	r3, #56	; 0x38
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	3304      	adds	r3, #4
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e00c      	b.n	8005214 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	f003 020f 	and.w	r2, r3, #15
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	4413      	add	r3, r2
 8005210:	3304      	adds	r3, #4
 8005212:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68f9      	ldr	r1, [r7, #12]
 800521a:	4618      	mov	r0, r3
 800521c:	f005 f95e 	bl	800a4dc <USB_EPStopXfer>
 8005220:	4603      	mov	r3, r0
 8005222:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005224:	7afb      	ldrb	r3, [r7, #11]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b08a      	sub	sp, #40	; 0x28
 8005232:	af02      	add	r7, sp, #8
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	3338      	adds	r3, #56	; 0x38
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	3304      	adds	r3, #4
 8005254:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1a      	ldr	r2, [r3, #32]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	429a      	cmp	r2, r3
 8005260:	d901      	bls.n	8005266 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e06c      	b.n	8005340 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	429a      	cmp	r2, r3
 800527a:	d902      	bls.n	8005282 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3303      	adds	r3, #3
 8005286:	089b      	lsrs	r3, r3, #2
 8005288:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800528a:	e02b      	b.n	80052e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d902      	bls.n	80052a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	3303      	adds	r3, #3
 80052ac:	089b      	lsrs	r3, r3, #2
 80052ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6919      	ldr	r1, [r3, #16]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	4603      	mov	r3, r0
 80052c6:	6978      	ldr	r0, [r7, #20]
 80052c8:	f005 f9b2 	bl	800a630 <USB_WritePacket>

    ep->xfer_buff  += len;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	441a      	add	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	441a      	add	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d809      	bhi.n	800530e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005302:	429a      	cmp	r2, r3
 8005304:	d203      	bcs.n	800530e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1be      	bne.n	800528c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	429a      	cmp	r2, r3
 8005318:	d811      	bhi.n	800533e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	2201      	movs	r2, #1
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	43db      	mvns	r3, r3
 8005334:	6939      	ldr	r1, [r7, #16]
 8005336:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800533a:	4013      	ands	r3, r2
 800533c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	333c      	adds	r3, #60	; 0x3c
 8005360:	3304      	adds	r3, #4
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d17b      	bne.n	8005476 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d015      	beq.n	80053b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4a61      	ldr	r2, [pc, #388]	; (8005510 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	f240 80b9 	bls.w	8005504 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80b3 	beq.w	8005504 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	461a      	mov	r2, r3
 80053ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053b0:	6093      	str	r3, [r2, #8]
 80053b2:	e0a7      	b.n	8005504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	461a      	mov	r2, r3
 80053cc:	2320      	movs	r3, #32
 80053ce:	6093      	str	r3, [r2, #8]
 80053d0:	e098      	b.n	8005504 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f040 8093 	bne.w	8005504 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	4a4b      	ldr	r2, [pc, #300]	; (8005510 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d90f      	bls.n	8005406 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	461a      	mov	r2, r3
 80053fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005402:	6093      	str	r3, [r2, #8]
 8005404:	e07e      	b.n	8005504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	4413      	add	r3, r2
 8005418:	3304      	adds	r3, #4
 800541a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	0159      	lsls	r1, r3, #5
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	440b      	add	r3, r1
 8005428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005432:	1ad2      	subs	r2, r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d114      	bne.n	8005468 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005450:	461a      	mov	r2, r3
 8005452:	2101      	movs	r1, #1
 8005454:	f005 fb82 	bl	800ab5c <USB_EP0_OutStart>
 8005458:	e006      	b.n	8005468 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	441a      	add	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f00b f822 	bl	80104b8 <HAL_PCD_DataOutStageCallback>
 8005474:	e046      	b.n	8005504 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	4a26      	ldr	r2, [pc, #152]	; (8005514 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d124      	bne.n	80054c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005494:	461a      	mov	r2, r3
 8005496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800549a:	6093      	str	r3, [r2, #8]
 800549c:	e032      	b.n	8005504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	461a      	mov	r2, r3
 80054b6:	2320      	movs	r3, #32
 80054b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f00a fff9 	bl	80104b8 <HAL_PCD_DataOutStageCallback>
 80054c6:	e01d      	b.n	8005504 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d114      	bne.n	80054f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	4613      	mov	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d108      	bne.n	80054f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054f0:	461a      	mov	r2, r3
 80054f2:	2100      	movs	r1, #0
 80054f4:	f005 fb32 	bl	800ab5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f00a ffda 	bl	80104b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3720      	adds	r7, #32
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	4f54300a 	.word	0x4f54300a
 8005514:	4f54310a 	.word	0x4f54310a

08005518 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	333c      	adds	r3, #60	; 0x3c
 8005530:	3304      	adds	r3, #4
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4a15      	ldr	r2, [pc, #84]	; (80055a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d90e      	bls.n	800556c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005554:	2b00      	cmp	r3, #0
 8005556:	d009      	beq.n	800556c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005564:	461a      	mov	r2, r3
 8005566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800556a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f00a ff91 	bl	8010494 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a0a      	ldr	r2, [pc, #40]	; (80055a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d90c      	bls.n	8005594 <PCD_EP_OutSetupPacket_int+0x7c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d108      	bne.n	8005594 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800558c:	461a      	mov	r2, r3
 800558e:	2101      	movs	r1, #1
 8005590:	f005 fae4 	bl	800ab5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	4f54300a 	.word	0x4f54300a

080055a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	70fb      	strb	r3, [r7, #3]
 80055b0:	4613      	mov	r3, r2
 80055b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d107      	bne.n	80055d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80055c2:	883b      	ldrh	r3, [r7, #0]
 80055c4:	0419      	lsls	r1, r3, #16
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28
 80055d0:	e028      	b.n	8005624 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	0c1b      	lsrs	r3, r3, #16
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	4413      	add	r3, r2
 80055de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055e0:	2300      	movs	r3, #0
 80055e2:	73fb      	strb	r3, [r7, #15]
 80055e4:	e00d      	b.n	8005602 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
 80055ec:	3340      	adds	r3, #64	; 0x40
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	0c1b      	lsrs	r3, r3, #16
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	4413      	add	r3, r2
 80055fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	3301      	adds	r3, #1
 8005600:	73fb      	strb	r3, [r7, #15]
 8005602:	7bfa      	ldrb	r2, [r7, #15]
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	3b01      	subs	r3, #1
 8005608:	429a      	cmp	r2, r3
 800560a:	d3ec      	bcc.n	80055e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800560c:	883b      	ldrh	r3, [r7, #0]
 800560e:	0418      	lsls	r0, r3, #16
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	3b01      	subs	r3, #1
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	4302      	orrs	r2, r0
 800561c:	3340      	adds	r3, #64	; 0x40
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	460b      	mov	r3, r1
 800563c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	887a      	ldrh	r2, [r7, #2]
 8005644:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e314      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b0f      	cmp	r3, #15
 8005684:	d903      	bls.n	800568e <HAL_RCC_OscConfig+0x22>
 8005686:	21e6      	movs	r1, #230	; 0xe6
 8005688:	4897      	ldr	r0, [pc, #604]	; (80058e8 <HAL_RCC_OscConfig+0x27c>)
 800568a:	f7fc fbae 	bl	8001dea <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 8088 	beq.w	80057ac <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00d      	beq.n	80056c0 <HAL_RCC_OscConfig+0x54>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ac:	d008      	beq.n	80056c0 <HAL_RCC_OscConfig+0x54>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056b6:	d003      	beq.n	80056c0 <HAL_RCC_OscConfig+0x54>
 80056b8:	21eb      	movs	r1, #235	; 0xeb
 80056ba:	488b      	ldr	r0, [pc, #556]	; (80058e8 <HAL_RCC_OscConfig+0x27c>)
 80056bc:	f7fc fb95 	bl	8001dea <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056c0:	4b8a      	ldr	r3, [pc, #552]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 030c 	and.w	r3, r3, #12
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d00c      	beq.n	80056e6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056cc:	4b87      	ldr	r3, [pc, #540]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d112      	bne.n	80056fe <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056d8:	4b84      	ldr	r3, [pc, #528]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e4:	d10b      	bne.n	80056fe <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e6:	4b81      	ldr	r3, [pc, #516]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d05b      	beq.n	80057aa <HAL_RCC_OscConfig+0x13e>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d157      	bne.n	80057aa <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e2d4      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005706:	d106      	bne.n	8005716 <HAL_RCC_OscConfig+0xaa>
 8005708:	4b78      	ldr	r3, [pc, #480]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a77      	ldr	r2, [pc, #476]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 800570e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	e01d      	b.n	8005752 <HAL_RCC_OscConfig+0xe6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800571e:	d10c      	bne.n	800573a <HAL_RCC_OscConfig+0xce>
 8005720:	4b72      	ldr	r3, [pc, #456]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a71      	ldr	r2, [pc, #452]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 8005726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	4b6f      	ldr	r3, [pc, #444]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a6e      	ldr	r2, [pc, #440]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 8005732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	e00b      	b.n	8005752 <HAL_RCC_OscConfig+0xe6>
 800573a:	4b6c      	ldr	r3, [pc, #432]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a6b      	ldr	r2, [pc, #428]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 8005740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	4b69      	ldr	r3, [pc, #420]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a68      	ldr	r2, [pc, #416]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 800574c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005750:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d013      	beq.n	8005782 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575a:	f7fd fba5 	bl	8002ea8 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005762:	f7fd fba1 	bl	8002ea8 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b64      	cmp	r3, #100	; 0x64
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e299      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005774:	4b5d      	ldr	r3, [pc, #372]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCC_OscConfig+0xf6>
 8005780:	e014      	b.n	80057ac <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005782:	f7fd fb91 	bl	8002ea8 <HAL_GetTick>
 8005786:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005788:	e008      	b.n	800579c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800578a:	f7fd fb8d 	bl	8002ea8 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b64      	cmp	r3, #100	; 0x64
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e285      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800579c:	4b53      	ldr	r3, [pc, #332]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1f0      	bne.n	800578a <HAL_RCC_OscConfig+0x11e>
 80057a8:	e000      	b.n	80057ac <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d079      	beq.n	80058ac <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_RCC_OscConfig+0x166>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d004      	beq.n	80057d2 <HAL_RCC_OscConfig+0x166>
 80057c8:	f240 111d 	movw	r1, #285	; 0x11d
 80057cc:	4846      	ldr	r0, [pc, #280]	; (80058e8 <HAL_RCC_OscConfig+0x27c>)
 80057ce:	f7fc fb0c 	bl	8001dea <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b1f      	cmp	r3, #31
 80057d8:	d904      	bls.n	80057e4 <HAL_RCC_OscConfig+0x178>
 80057da:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80057de:	4842      	ldr	r0, [pc, #264]	; (80058e8 <HAL_RCC_OscConfig+0x27c>)
 80057e0:	f7fc fb03 	bl	8001dea <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057e4:	4b41      	ldr	r3, [pc, #260]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 030c 	and.w	r3, r3, #12
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00b      	beq.n	8005808 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057f0:	4b3e      	ldr	r3, [pc, #248]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d11c      	bne.n	8005836 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057fc:	4b3b      	ldr	r3, [pc, #236]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d116      	bne.n	8005836 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005808:	4b38      	ldr	r3, [pc, #224]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <HAL_RCC_OscConfig+0x1b4>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d001      	beq.n	8005820 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e243      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005820:	4b32      	ldr	r3, [pc, #200]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	492f      	ldr	r1, [pc, #188]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 8005830:	4313      	orrs	r3, r2
 8005832:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005834:	e03a      	b.n	80058ac <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d020      	beq.n	8005880 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800583e:	4b2c      	ldr	r3, [pc, #176]	; (80058f0 <HAL_RCC_OscConfig+0x284>)
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7fd fb30 	bl	8002ea8 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800584c:	f7fd fb2c 	bl	8002ea8 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e224      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800585e:	4b23      	ldr	r3, [pc, #140]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0f0      	beq.n	800584c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586a:	4b20      	ldr	r3, [pc, #128]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	491c      	ldr	r1, [pc, #112]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 800587a:	4313      	orrs	r3, r2
 800587c:	600b      	str	r3, [r1, #0]
 800587e:	e015      	b.n	80058ac <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005880:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <HAL_RCC_OscConfig+0x284>)
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fd fb0f 	bl	8002ea8 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588c:	e008      	b.n	80058a0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800588e:	f7fd fb0b 	bl	8002ea8 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e203      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058a0:	4b12      	ldr	r3, [pc, #72]	; (80058ec <HAL_RCC_OscConfig+0x280>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f0      	bne.n	800588e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d045      	beq.n	8005944 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <HAL_RCC_OscConfig+0x266>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d004      	beq.n	80058d2 <HAL_RCC_OscConfig+0x266>
 80058c8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80058cc:	4806      	ldr	r0, [pc, #24]	; (80058e8 <HAL_RCC_OscConfig+0x27c>)
 80058ce:	f7fc fa8c 	bl	8001dea <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01e      	beq.n	8005918 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058da:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <HAL_RCC_OscConfig+0x288>)
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e0:	f7fd fae2 	bl	8002ea8 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e6:	e010      	b.n	800590a <HAL_RCC_OscConfig+0x29e>
 80058e8:	08011658 	.word	0x08011658
 80058ec:	40023800 	.word	0x40023800
 80058f0:	42470000 	.word	0x42470000
 80058f4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058f8:	f7fd fad6 	bl	8002ea8 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e1ce      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800590a:	4b5e      	ldr	r3, [pc, #376]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 800590c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0x28c>
 8005916:	e015      	b.n	8005944 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005918:	4b5b      	ldr	r3, [pc, #364]	; (8005a88 <HAL_RCC_OscConfig+0x41c>)
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800591e:	f7fd fac3 	bl	8002ea8 <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005926:	f7fd fabf 	bl	8002ea8 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e1b7      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005938:	4b52      	ldr	r3, [pc, #328]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 800593a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1f0      	bne.n	8005926 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80b0 	beq.w	8005ab2 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005952:	2300      	movs	r3, #0
 8005954:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00c      	beq.n	8005978 <HAL_RCC_OscConfig+0x30c>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d008      	beq.n	8005978 <HAL_RCC_OscConfig+0x30c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b05      	cmp	r3, #5
 800596c:	d004      	beq.n	8005978 <HAL_RCC_OscConfig+0x30c>
 800596e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8005972:	4846      	ldr	r0, [pc, #280]	; (8005a8c <HAL_RCC_OscConfig+0x420>)
 8005974:	f7fc fa39 	bl	8001dea <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005978:	4b42      	ldr	r3, [pc, #264]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10f      	bne.n	80059a4 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005984:	2300      	movs	r3, #0
 8005986:	60bb      	str	r3, [r7, #8]
 8005988:	4b3e      	ldr	r3, [pc, #248]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	4a3d      	ldr	r2, [pc, #244]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 800598e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005992:	6413      	str	r3, [r2, #64]	; 0x40
 8005994:	4b3b      	ldr	r3, [pc, #236]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a0:	2301      	movs	r3, #1
 80059a2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a4:	4b3a      	ldr	r3, [pc, #232]	; (8005a90 <HAL_RCC_OscConfig+0x424>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d118      	bne.n	80059e2 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059b0:	4b37      	ldr	r3, [pc, #220]	; (8005a90 <HAL_RCC_OscConfig+0x424>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a36      	ldr	r2, [pc, #216]	; (8005a90 <HAL_RCC_OscConfig+0x424>)
 80059b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059bc:	f7fd fa74 	bl	8002ea8 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c4:	f7fd fa70 	bl	8002ea8 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e168      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <HAL_RCC_OscConfig+0x424>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0f0      	beq.n	80059c4 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d106      	bne.n	80059f8 <HAL_RCC_OscConfig+0x38c>
 80059ea:	4b26      	ldr	r3, [pc, #152]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 80059ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ee:	4a25      	ldr	r2, [pc, #148]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 80059f0:	f043 0301 	orr.w	r3, r3, #1
 80059f4:	6713      	str	r3, [r2, #112]	; 0x70
 80059f6:	e01c      	b.n	8005a32 <HAL_RCC_OscConfig+0x3c6>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b05      	cmp	r3, #5
 80059fe:	d10c      	bne.n	8005a1a <HAL_RCC_OscConfig+0x3ae>
 8005a00:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a04:	4a1f      	ldr	r2, [pc, #124]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 8005a06:	f043 0304 	orr.w	r3, r3, #4
 8005a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0c:	4b1d      	ldr	r3, [pc, #116]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	4a1c      	ldr	r2, [pc, #112]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 8005a12:	f043 0301 	orr.w	r3, r3, #1
 8005a16:	6713      	str	r3, [r2, #112]	; 0x70
 8005a18:	e00b      	b.n	8005a32 <HAL_RCC_OscConfig+0x3c6>
 8005a1a:	4b1a      	ldr	r3, [pc, #104]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1e:	4a19      	ldr	r2, [pc, #100]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	6713      	str	r3, [r2, #112]	; 0x70
 8005a26:	4b17      	ldr	r3, [pc, #92]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 8005a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2a:	4a16      	ldr	r2, [pc, #88]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 8005a2c:	f023 0304 	bic.w	r3, r3, #4
 8005a30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d015      	beq.n	8005a66 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3a:	f7fd fa35 	bl	8002ea8 <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a40:	e00a      	b.n	8005a58 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a42:	f7fd fa31 	bl	8002ea8 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e127      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <HAL_RCC_OscConfig+0x418>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0ee      	beq.n	8005a42 <HAL_RCC_OscConfig+0x3d6>
 8005a64:	e01c      	b.n	8005aa0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a66:	f7fd fa1f 	bl	8002ea8 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a6c:	e012      	b.n	8005a94 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a6e:	f7fd fa1b 	bl	8002ea8 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d909      	bls.n	8005a94 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e111      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
 8005a84:	40023800 	.word	0x40023800
 8005a88:	42470e80 	.word	0x42470e80
 8005a8c:	08011658 	.word	0x08011658
 8005a90:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a94:	4b86      	ldr	r3, [pc, #536]	; (8005cb0 <HAL_RCC_OscConfig+0x644>)
 8005a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e6      	bne.n	8005a6e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d105      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aa6:	4b82      	ldr	r3, [pc, #520]	; (8005cb0 <HAL_RCC_OscConfig+0x644>)
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	4a81      	ldr	r2, [pc, #516]	; (8005cb0 <HAL_RCC_OscConfig+0x644>)
 8005aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00c      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x468>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d008      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x468>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x468>
 8005aca:	f240 11cd 	movw	r1, #461	; 0x1cd
 8005ace:	4879      	ldr	r0, [pc, #484]	; (8005cb4 <HAL_RCC_OscConfig+0x648>)
 8005ad0:	f7fc f98b 	bl	8001dea <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80e4 	beq.w	8005ca6 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ade:	4b74      	ldr	r3, [pc, #464]	; (8005cb0 <HAL_RCC_OscConfig+0x644>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 030c 	and.w	r3, r3, #12
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	f000 80a5 	beq.w	8005c36 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	f040 8089 	bne.w	8005c08 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <HAL_RCC_OscConfig+0x4a6>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b06:	d004      	beq.n	8005b12 <HAL_RCC_OscConfig+0x4a6>
 8005b08:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8005b0c:	4869      	ldr	r0, [pc, #420]	; (8005cb4 <HAL_RCC_OscConfig+0x648>)
 8005b0e:	f7fc f96c 	bl	8001dea <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	2b3f      	cmp	r3, #63	; 0x3f
 8005b18:	d904      	bls.n	8005b24 <HAL_RCC_OscConfig+0x4b8>
 8005b1a:	f240 11d7 	movw	r1, #471	; 0x1d7
 8005b1e:	4865      	ldr	r0, [pc, #404]	; (8005cb4 <HAL_RCC_OscConfig+0x648>)
 8005b20:	f7fc f963 	bl	8001dea <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	2b31      	cmp	r3, #49	; 0x31
 8005b2a:	d904      	bls.n	8005b36 <HAL_RCC_OscConfig+0x4ca>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005b34:	d904      	bls.n	8005b40 <HAL_RCC_OscConfig+0x4d4>
 8005b36:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8005b3a:	485e      	ldr	r0, [pc, #376]	; (8005cb4 <HAL_RCC_OscConfig+0x648>)
 8005b3c:	f7fc f955 	bl	8001dea <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d010      	beq.n	8005b6a <HAL_RCC_OscConfig+0x4fe>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d00c      	beq.n	8005b6a <HAL_RCC_OscConfig+0x4fe>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	2b06      	cmp	r3, #6
 8005b56:	d008      	beq.n	8005b6a <HAL_RCC_OscConfig+0x4fe>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d004      	beq.n	8005b6a <HAL_RCC_OscConfig+0x4fe>
 8005b60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b64:	4853      	ldr	r0, [pc, #332]	; (8005cb4 <HAL_RCC_OscConfig+0x648>)
 8005b66:	f7fc f940 	bl	8001dea <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d903      	bls.n	8005b7a <HAL_RCC_OscConfig+0x50e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	2b0f      	cmp	r3, #15
 8005b78:	d904      	bls.n	8005b84 <HAL_RCC_OscConfig+0x518>
 8005b7a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005b7e:	484d      	ldr	r0, [pc, #308]	; (8005cb4 <HAL_RCC_OscConfig+0x648>)
 8005b80:	f7fc f933 	bl	8001dea <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b84:	4b4c      	ldr	r3, [pc, #304]	; (8005cb8 <HAL_RCC_OscConfig+0x64c>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8a:	f7fd f98d 	bl	8002ea8 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b92:	f7fd f989 	bl	8002ea8 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e081      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba4:	4b42      	ldr	r3, [pc, #264]	; (8005cb0 <HAL_RCC_OscConfig+0x644>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1f0      	bne.n	8005b92 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	019b      	lsls	r3, r3, #6
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	041b      	lsls	r3, r3, #16
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	061b      	lsls	r3, r3, #24
 8005bd4:	4936      	ldr	r1, [pc, #216]	; (8005cb0 <HAL_RCC_OscConfig+0x644>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bda:	4b37      	ldr	r3, [pc, #220]	; (8005cb8 <HAL_RCC_OscConfig+0x64c>)
 8005bdc:	2201      	movs	r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be0:	f7fd f962 	bl	8002ea8 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be8:	f7fd f95e 	bl	8002ea8 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e056      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bfa:	4b2d      	ldr	r3, [pc, #180]	; (8005cb0 <HAL_RCC_OscConfig+0x644>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0f0      	beq.n	8005be8 <HAL_RCC_OscConfig+0x57c>
 8005c06:	e04e      	b.n	8005ca6 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c08:	4b2b      	ldr	r3, [pc, #172]	; (8005cb8 <HAL_RCC_OscConfig+0x64c>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0e:	f7fd f94b 	bl	8002ea8 <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c16:	f7fd f947 	bl	8002ea8 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e03f      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c28:	4b21      	ldr	r3, [pc, #132]	; (8005cb0 <HAL_RCC_OscConfig+0x644>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1f0      	bne.n	8005c16 <HAL_RCC_OscConfig+0x5aa>
 8005c34:	e037      	b.n	8005ca6 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e032      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c42:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <HAL_RCC_OscConfig+0x644>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d028      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d121      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d11a      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c72:	4013      	ands	r3, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d111      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d107      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d001      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	08011658 	.word	0x08011658
 8005cb8:	42470060 	.word	0x42470060

08005cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e174      	b.n	8005fba <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x24>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b0f      	cmp	r3, #15
 8005cde:	d904      	bls.n	8005cea <HAL_RCC_ClockConfig+0x2e>
 8005ce0:	f240 215a 	movw	r1, #602	; 0x25a
 8005ce4:	487b      	ldr	r0, [pc, #492]	; (8005ed4 <HAL_RCC_ClockConfig+0x218>)
 8005ce6:	f7fc f880 	bl	8001dea <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d019      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x68>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d016      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x68>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d013      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x68>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d010      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x68>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d00d      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x68>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x68>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b06      	cmp	r3, #6
 8005d12:	d007      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x68>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b07      	cmp	r3, #7
 8005d18:	d004      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x68>
 8005d1a:	f240 215b 	movw	r1, #603	; 0x25b
 8005d1e:	486d      	ldr	r0, [pc, #436]	; (8005ed4 <HAL_RCC_ClockConfig+0x218>)
 8005d20:	f7fc f863 	bl	8001dea <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d24:	4b6c      	ldr	r3, [pc, #432]	; (8005ed8 <HAL_RCC_ClockConfig+0x21c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d90c      	bls.n	8005d4c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d32:	4b69      	ldr	r3, [pc, #420]	; (8005ed8 <HAL_RCC_ClockConfig+0x21c>)
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3a:	4b67      	ldr	r3, [pc, #412]	; (8005ed8 <HAL_RCC_ClockConfig+0x21c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d001      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e136      	b.n	8005fba <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d049      	beq.n	8005dec <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d64:	4b5d      	ldr	r3, [pc, #372]	; (8005edc <HAL_RCC_ClockConfig+0x220>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	4a5c      	ldr	r2, [pc, #368]	; (8005edc <HAL_RCC_ClockConfig+0x220>)
 8005d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d7c:	4b57      	ldr	r3, [pc, #348]	; (8005edc <HAL_RCC_ClockConfig+0x220>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4a56      	ldr	r2, [pc, #344]	; (8005edc <HAL_RCC_ClockConfig+0x220>)
 8005d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d024      	beq.n	8005dda <HAL_RCC_ClockConfig+0x11e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	2b80      	cmp	r3, #128	; 0x80
 8005d96:	d020      	beq.n	8005dda <HAL_RCC_ClockConfig+0x11e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b90      	cmp	r3, #144	; 0x90
 8005d9e:	d01c      	beq.n	8005dda <HAL_RCC_ClockConfig+0x11e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2ba0      	cmp	r3, #160	; 0xa0
 8005da6:	d018      	beq.n	8005dda <HAL_RCC_ClockConfig+0x11e>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2bb0      	cmp	r3, #176	; 0xb0
 8005dae:	d014      	beq.n	8005dda <HAL_RCC_ClockConfig+0x11e>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	2bc0      	cmp	r3, #192	; 0xc0
 8005db6:	d010      	beq.n	8005dda <HAL_RCC_ClockConfig+0x11e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	2bd0      	cmp	r3, #208	; 0xd0
 8005dbe:	d00c      	beq.n	8005dda <HAL_RCC_ClockConfig+0x11e>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	2be0      	cmp	r3, #224	; 0xe0
 8005dc6:	d008      	beq.n	8005dda <HAL_RCC_ClockConfig+0x11e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2bf0      	cmp	r3, #240	; 0xf0
 8005dce:	d004      	beq.n	8005dda <HAL_RCC_ClockConfig+0x11e>
 8005dd0:	f240 217e 	movw	r1, #638	; 0x27e
 8005dd4:	483f      	ldr	r0, [pc, #252]	; (8005ed4 <HAL_RCC_ClockConfig+0x218>)
 8005dd6:	f7fc f808 	bl	8001dea <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dda:	4b40      	ldr	r3, [pc, #256]	; (8005edc <HAL_RCC_ClockConfig+0x220>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	493d      	ldr	r1, [pc, #244]	; (8005edc <HAL_RCC_ClockConfig+0x220>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d059      	beq.n	8005eac <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d010      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x166>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d00c      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x166>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d008      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x166>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d004      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x166>
 8005e18:	f240 2185 	movw	r1, #645	; 0x285
 8005e1c:	482d      	ldr	r0, [pc, #180]	; (8005ed4 <HAL_RCC_ClockConfig+0x218>)
 8005e1e:	f7fb ffe4 	bl	8001dea <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d107      	bne.n	8005e3a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2a:	4b2c      	ldr	r3, [pc, #176]	; (8005edc <HAL_RCC_ClockConfig+0x220>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d119      	bne.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e0bf      	b.n	8005fba <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d003      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d107      	bne.n	8005e5a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e4a:	4b24      	ldr	r3, [pc, #144]	; (8005edc <HAL_RCC_ClockConfig+0x220>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d109      	bne.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e0af      	b.n	8005fba <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e5a:	4b20      	ldr	r3, [pc, #128]	; (8005edc <HAL_RCC_ClockConfig+0x220>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e0a7      	b.n	8005fba <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e6a:	4b1c      	ldr	r3, [pc, #112]	; (8005edc <HAL_RCC_ClockConfig+0x220>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f023 0203 	bic.w	r2, r3, #3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	4919      	ldr	r1, [pc, #100]	; (8005edc <HAL_RCC_ClockConfig+0x220>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e7c:	f7fd f814 	bl	8002ea8 <HAL_GetTick>
 8005e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e82:	e00a      	b.n	8005e9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e84:	f7fd f810 	bl	8002ea8 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e08f      	b.n	8005fba <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9a:	4b10      	ldr	r3, [pc, #64]	; (8005edc <HAL_RCC_ClockConfig+0x220>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 020c 	and.w	r2, r3, #12
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d1eb      	bne.n	8005e84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005eac:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <HAL_RCC_ClockConfig+0x21c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d212      	bcs.n	8005ee0 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eba:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <HAL_RCC_ClockConfig+0x21c>)
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ec2:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <HAL_RCC_ClockConfig+0x21c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d007      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e072      	b.n	8005fba <HAL_RCC_ClockConfig+0x2fe>
 8005ed4:	08011658 	.word	0x08011658
 8005ed8:	40023c00 	.word	0x40023c00
 8005edc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d025      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d018      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x26a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efc:	d013      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x26a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f06:	d00e      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x26a>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005f10:	d009      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x26a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005f1a:	d004      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x26a>
 8005f1c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005f20:	4828      	ldr	r0, [pc, #160]	; (8005fc4 <HAL_RCC_ClockConfig+0x308>)
 8005f22:	f7fb ff62 	bl	8001dea <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f26:	4b28      	ldr	r3, [pc, #160]	; (8005fc8 <HAL_RCC_ClockConfig+0x30c>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	4925      	ldr	r1, [pc, #148]	; (8005fc8 <HAL_RCC_ClockConfig+0x30c>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d026      	beq.n	8005f92 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d018      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x2c2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f54:	d013      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x2c2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f5e:	d00e      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x2c2>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005f68:	d009      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x2c2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005f72:	d004      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x2c2>
 8005f74:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005f78:	4812      	ldr	r0, [pc, #72]	; (8005fc4 <HAL_RCC_ClockConfig+0x308>)
 8005f7a:	f7fb ff36 	bl	8001dea <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f7e:	4b12      	ldr	r3, [pc, #72]	; (8005fc8 <HAL_RCC_ClockConfig+0x30c>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	490e      	ldr	r1, [pc, #56]	; (8005fc8 <HAL_RCC_ClockConfig+0x30c>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f92:	f000 f821 	bl	8005fd8 <HAL_RCC_GetSysClockFreq>
 8005f96:	4602      	mov	r2, r0
 8005f98:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <HAL_RCC_ClockConfig+0x30c>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	490a      	ldr	r1, [pc, #40]	; (8005fcc <HAL_RCC_ClockConfig+0x310>)
 8005fa4:	5ccb      	ldrb	r3, [r1, r3]
 8005fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8005faa:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <HAL_RCC_ClockConfig+0x314>)
 8005fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fae:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <HAL_RCC_ClockConfig+0x318>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fc fb2e 	bl	8002614 <HAL_InitTick>

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	08011658 	.word	0x08011658
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	08013a18 	.word	0x08013a18
 8005fd0:	2000008c 	.word	0x2000008c
 8005fd4:	20000090 	.word	0x20000090

08005fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fdc:	b090      	sub	sp, #64	; 0x40
 8005fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fe8:	2300      	movs	r3, #0
 8005fea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ff0:	4b59      	ldr	r3, [pc, #356]	; (8006158 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f003 030c 	and.w	r3, r3, #12
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d00d      	beq.n	8006018 <HAL_RCC_GetSysClockFreq+0x40>
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	f200 80a1 	bhi.w	8006144 <HAL_RCC_GetSysClockFreq+0x16c>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <HAL_RCC_GetSysClockFreq+0x34>
 8006006:	2b04      	cmp	r3, #4
 8006008:	d003      	beq.n	8006012 <HAL_RCC_GetSysClockFreq+0x3a>
 800600a:	e09b      	b.n	8006144 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800600c:	4b53      	ldr	r3, [pc, #332]	; (800615c <HAL_RCC_GetSysClockFreq+0x184>)
 800600e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006010:	e09b      	b.n	800614a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006012:	4b53      	ldr	r3, [pc, #332]	; (8006160 <HAL_RCC_GetSysClockFreq+0x188>)
 8006014:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006016:	e098      	b.n	800614a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006018:	4b4f      	ldr	r3, [pc, #316]	; (8006158 <HAL_RCC_GetSysClockFreq+0x180>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006022:	4b4d      	ldr	r3, [pc, #308]	; (8006158 <HAL_RCC_GetSysClockFreq+0x180>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d028      	beq.n	8006080 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800602e:	4b4a      	ldr	r3, [pc, #296]	; (8006158 <HAL_RCC_GetSysClockFreq+0x180>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	099b      	lsrs	r3, r3, #6
 8006034:	2200      	movs	r2, #0
 8006036:	623b      	str	r3, [r7, #32]
 8006038:	627a      	str	r2, [r7, #36]	; 0x24
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006040:	2100      	movs	r1, #0
 8006042:	4b47      	ldr	r3, [pc, #284]	; (8006160 <HAL_RCC_GetSysClockFreq+0x188>)
 8006044:	fb03 f201 	mul.w	r2, r3, r1
 8006048:	2300      	movs	r3, #0
 800604a:	fb00 f303 	mul.w	r3, r0, r3
 800604e:	4413      	add	r3, r2
 8006050:	4a43      	ldr	r2, [pc, #268]	; (8006160 <HAL_RCC_GetSysClockFreq+0x188>)
 8006052:	fba0 1202 	umull	r1, r2, r0, r2
 8006056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006058:	460a      	mov	r2, r1
 800605a:	62ba      	str	r2, [r7, #40]	; 0x28
 800605c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800605e:	4413      	add	r3, r2
 8006060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006064:	2200      	movs	r2, #0
 8006066:	61bb      	str	r3, [r7, #24]
 8006068:	61fa      	str	r2, [r7, #28]
 800606a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800606e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006072:	f7fa fc13 	bl	800089c <__aeabi_uldivmod>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4613      	mov	r3, r2
 800607c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800607e:	e053      	b.n	8006128 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006080:	4b35      	ldr	r3, [pc, #212]	; (8006158 <HAL_RCC_GetSysClockFreq+0x180>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	099b      	lsrs	r3, r3, #6
 8006086:	2200      	movs	r2, #0
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	617a      	str	r2, [r7, #20]
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006092:	f04f 0b00 	mov.w	fp, #0
 8006096:	4652      	mov	r2, sl
 8006098:	465b      	mov	r3, fp
 800609a:	f04f 0000 	mov.w	r0, #0
 800609e:	f04f 0100 	mov.w	r1, #0
 80060a2:	0159      	lsls	r1, r3, #5
 80060a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060a8:	0150      	lsls	r0, r2, #5
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	ebb2 080a 	subs.w	r8, r2, sl
 80060b2:	eb63 090b 	sbc.w	r9, r3, fp
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80060c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80060c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80060ca:	ebb2 0408 	subs.w	r4, r2, r8
 80060ce:	eb63 0509 	sbc.w	r5, r3, r9
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	00eb      	lsls	r3, r5, #3
 80060dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060e0:	00e2      	lsls	r2, r4, #3
 80060e2:	4614      	mov	r4, r2
 80060e4:	461d      	mov	r5, r3
 80060e6:	eb14 030a 	adds.w	r3, r4, sl
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	eb45 030b 	adc.w	r3, r5, fp
 80060f0:	607b      	str	r3, [r7, #4]
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060fe:	4629      	mov	r1, r5
 8006100:	028b      	lsls	r3, r1, #10
 8006102:	4621      	mov	r1, r4
 8006104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006108:	4621      	mov	r1, r4
 800610a:	028a      	lsls	r2, r1, #10
 800610c:	4610      	mov	r0, r2
 800610e:	4619      	mov	r1, r3
 8006110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006112:	2200      	movs	r2, #0
 8006114:	60bb      	str	r3, [r7, #8]
 8006116:	60fa      	str	r2, [r7, #12]
 8006118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800611c:	f7fa fbbe 	bl	800089c <__aeabi_uldivmod>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4613      	mov	r3, r2
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <HAL_RCC_GetSysClockFreq+0x180>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	0c1b      	lsrs	r3, r3, #16
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	3301      	adds	r3, #1
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006140:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006142:	e002      	b.n	800614a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <HAL_RCC_GetSysClockFreq+0x184>)
 8006146:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800614c:	4618      	mov	r0, r3
 800614e:	3740      	adds	r7, #64	; 0x40
 8006150:	46bd      	mov	sp, r7
 8006152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006156:	bf00      	nop
 8006158:	40023800 	.word	0x40023800
 800615c:	00f42400 	.word	0x00f42400
 8006160:	017d7840 	.word	0x017d7840

08006164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006168:	4b03      	ldr	r3, [pc, #12]	; (8006178 <HAL_RCC_GetHCLKFreq+0x14>)
 800616a:	681b      	ldr	r3, [r3, #0]
}
 800616c:	4618      	mov	r0, r3
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	2000008c 	.word	0x2000008c

0800617c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006180:	f7ff fff0 	bl	8006164 <HAL_RCC_GetHCLKFreq>
 8006184:	4602      	mov	r2, r0
 8006186:	4b05      	ldr	r3, [pc, #20]	; (800619c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	0a9b      	lsrs	r3, r3, #10
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	4903      	ldr	r1, [pc, #12]	; (80061a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006192:	5ccb      	ldrb	r3, [r1, r3]
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006198:	4618      	mov	r0, r3
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40023800 	.word	0x40023800
 80061a0:	08013a28 	.word	0x08013a28

080061a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061a8:	f7ff ffdc 	bl	8006164 <HAL_RCC_GetHCLKFreq>
 80061ac:	4602      	mov	r2, r0
 80061ae:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	0b5b      	lsrs	r3, r3, #13
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	4903      	ldr	r1, [pc, #12]	; (80061c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ba:	5ccb      	ldrb	r3, [r1, r3]
 80061bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40023800 	.word	0x40023800
 80061c8:	08013a28 	.word	0x08013a28

080061cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	220f      	movs	r2, #15
 80061da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061dc:	4b12      	ldr	r3, [pc, #72]	; (8006228 <HAL_RCC_GetClockConfig+0x5c>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 0203 	and.w	r2, r3, #3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80061e8:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <HAL_RCC_GetClockConfig+0x5c>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061f4:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <HAL_RCC_GetClockConfig+0x5c>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006200:	4b09      	ldr	r3, [pc, #36]	; (8006228 <HAL_RCC_GetClockConfig+0x5c>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	08db      	lsrs	r3, r3, #3
 8006206:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800620e:	4b07      	ldr	r3, [pc, #28]	; (800622c <HAL_RCC_GetClockConfig+0x60>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0207 	and.w	r2, r3, #7
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	601a      	str	r2, [r3, #0]
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40023800 	.word	0x40023800
 800622c:	40023c00 	.word	0x40023c00

08006230 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b0f      	cmp	r3, #15
 800624e:	d904      	bls.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006250:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8006254:	4834      	ldr	r0, [pc, #208]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006256:	f7fb fdc8 	bl	8001dea <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d105      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800626e:	2b00      	cmp	r3, #0
 8006270:	d066      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d903      	bls.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b07      	cmp	r3, #7
 8006280:	d904      	bls.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006282:	f640 11de 	movw	r1, #2526	; 0x9de
 8006286:	4828      	ldr	r0, [pc, #160]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006288:	f7fb fdaf 	bl	8001dea <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b31      	cmp	r3, #49	; 0x31
 8006292:	d904      	bls.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800629c:	d904      	bls.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800629e:	f640 11df 	movw	r1, #2527	; 0x9df
 80062a2:	4821      	ldr	r0, [pc, #132]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80062a4:	f7fb fda1 	bl	8001dea <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d903      	bls.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b3f      	cmp	r3, #63	; 0x3f
 80062b6:	d904      	bls.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x92>
 80062b8:	f640 11e1 	movw	r1, #2529	; 0x9e1
 80062bc:	481a      	ldr	r0, [pc, #104]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80062be:	f7fb fd94 	bl	8001dea <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062c2:	4b1a      	ldr	r3, [pc, #104]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062c8:	f7fc fdee 	bl	8002ea8 <HAL_GetTick>
 80062cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062ce:	e008      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062d0:	f7fc fdea 	bl	8002ea8 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e1b3      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062e2:	4b13      	ldr	r3, [pc, #76]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1f0      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	019b      	lsls	r3, r3, #6
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	071b      	lsls	r3, r3, #28
 8006300:	490b      	ldr	r1, [pc, #44]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006308:	4b08      	ldr	r3, [pc, #32]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800630a:	2201      	movs	r2, #1
 800630c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800630e:	f7fc fdcb 	bl	8002ea8 <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006314:	e00e      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006316:	f7fc fdc7 	bl	8002ea8 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d907      	bls.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e190      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006328:	08011690 	.word	0x08011690
 800632c:	42470068 	.word	0x42470068
 8006330:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006334:	4b88      	ldr	r3, [pc, #544]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0ea      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8173 	beq.w	8006634 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006356:	f000 80a6 	beq.w	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006362:	f000 80a0 	beq.w	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	4a7c      	ldr	r2, [pc, #496]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	f000 809a 	beq.w	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	4a7a      	ldr	r2, [pc, #488]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006378:	4293      	cmp	r3, r2
 800637a:	f000 8094 	beq.w	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	4a78      	ldr	r2, [pc, #480]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006384:	4293      	cmp	r3, r2
 8006386:	f000 808e 	beq.w	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	4a76      	ldr	r2, [pc, #472]	; (8006568 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006390:	4293      	cmp	r3, r2
 8006392:	f000 8088 	beq.w	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	4a74      	ldr	r2, [pc, #464]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	f000 8082 	beq.w	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	4a72      	ldr	r2, [pc, #456]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d07c      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	4a70      	ldr	r2, [pc, #448]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d077      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	4a6f      	ldr	r2, [pc, #444]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d072      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	4a6d      	ldr	r2, [pc, #436]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d06d      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	4a6c      	ldr	r2, [pc, #432]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d068      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	4a6a      	ldr	r2, [pc, #424]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d063      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	4a69      	ldr	r2, [pc, #420]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d05e      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	4a67      	ldr	r2, [pc, #412]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d059      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	4a66      	ldr	r2, [pc, #408]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d054      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	4a64      	ldr	r2, [pc, #400]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d04f      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	4a63      	ldr	r2, [pc, #396]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d04a      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	4a61      	ldr	r2, [pc, #388]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d045      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	4a60      	ldr	r2, [pc, #384]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d040      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	4a5e      	ldr	r2, [pc, #376]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d03b      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	4a5d      	ldr	r2, [pc, #372]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d036      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	4a5b      	ldr	r2, [pc, #364]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d031      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	4a5a      	ldr	r2, [pc, #360]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d02c      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	4a58      	ldr	r2, [pc, #352]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d027      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	4a57      	ldr	r2, [pc, #348]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d022      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	4a55      	ldr	r2, [pc, #340]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d01d      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	4a54      	ldr	r2, [pc, #336]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d018      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	4a52      	ldr	r2, [pc, #328]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d013      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	4a51      	ldr	r2, [pc, #324]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00e      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	4a4f      	ldr	r2, [pc, #316]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d009      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	4a4e      	ldr	r2, [pc, #312]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d004      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800649c:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 80064a0:	484c      	ldr	r0, [pc, #304]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80064a2:	f7fb fca2 	bl	8001dea <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064a6:	2300      	movs	r3, #0
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	4b2b      	ldr	r3, [pc, #172]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	4a2a      	ldr	r2, [pc, #168]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80064b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b4:	6413      	str	r3, [r2, #64]	; 0x40
 80064b6:	4b28      	ldr	r3, [pc, #160]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80064c2:	4b45      	ldr	r3, [pc, #276]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a44      	ldr	r2, [pc, #272]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80064c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064ce:	f7fc fceb 	bl	8002ea8 <HAL_GetTick>
 80064d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064d4:	e008      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064d6:	f7fc fce7 	bl	8002ea8 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e0b0      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064e8:	4b3b      	ldr	r3, [pc, #236]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f0      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064f4:	4b18      	ldr	r3, [pc, #96]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d073      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	429a      	cmp	r2, r3
 8006510:	d06c      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006512:	4b11      	ldr	r3, [pc, #68]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800651c:	4b2f      	ldr	r3, [pc, #188]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800651e:	2201      	movs	r2, #1
 8006520:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006522:	4b2e      	ldr	r3, [pc, #184]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006528:	4a0b      	ldr	r2, [pc, #44]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800652e:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b01      	cmp	r3, #1
 8006538:	d158      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800653a:	f7fc fcb5 	bl	8002ea8 <HAL_GetTick>
 800653e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006540:	e04e      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006542:	f7fc fcb1 	bl	8002ea8 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006550:	4293      	cmp	r3, r2
 8006552:	d945      	bls.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e078      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006558:	40023800 	.word	0x40023800
 800655c:	00020300 	.word	0x00020300
 8006560:	00030300 	.word	0x00030300
 8006564:	00040300 	.word	0x00040300
 8006568:	00050300 	.word	0x00050300
 800656c:	00060300 	.word	0x00060300
 8006570:	00070300 	.word	0x00070300
 8006574:	00080300 	.word	0x00080300
 8006578:	00090300 	.word	0x00090300
 800657c:	000a0300 	.word	0x000a0300
 8006580:	000b0300 	.word	0x000b0300
 8006584:	000c0300 	.word	0x000c0300
 8006588:	000d0300 	.word	0x000d0300
 800658c:	000e0300 	.word	0x000e0300
 8006590:	000f0300 	.word	0x000f0300
 8006594:	00100300 	.word	0x00100300
 8006598:	00110300 	.word	0x00110300
 800659c:	00120300 	.word	0x00120300
 80065a0:	00130300 	.word	0x00130300
 80065a4:	00140300 	.word	0x00140300
 80065a8:	00150300 	.word	0x00150300
 80065ac:	00160300 	.word	0x00160300
 80065b0:	00170300 	.word	0x00170300
 80065b4:	00180300 	.word	0x00180300
 80065b8:	00190300 	.word	0x00190300
 80065bc:	001a0300 	.word	0x001a0300
 80065c0:	001b0300 	.word	0x001b0300
 80065c4:	001c0300 	.word	0x001c0300
 80065c8:	001d0300 	.word	0x001d0300
 80065cc:	001e0300 	.word	0x001e0300
 80065d0:	001f0300 	.word	0x001f0300
 80065d4:	08011690 	.word	0x08011690
 80065d8:	40007000 	.word	0x40007000
 80065dc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065e0:	4b1c      	ldr	r3, [pc, #112]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80065e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0aa      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065f8:	d10d      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80065fa:	4b16      	ldr	r3, [pc, #88]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800660a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800660e:	4911      	ldr	r1, [pc, #68]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006610:	4313      	orrs	r3, r2
 8006612:	608b      	str	r3, [r1, #8]
 8006614:	e005      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	4a0e      	ldr	r2, [pc, #56]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800661c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006620:	6093      	str	r3, [r2, #8]
 8006622:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800662e:	4909      	ldr	r1, [pc, #36]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006630:	4313      	orrs	r3, r2
 8006632:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7d1a      	ldrb	r2, [r3, #20]
 8006644:	4b04      	ldr	r3, [pc, #16]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006646:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40023800 	.word	0x40023800
 8006658:	424711e0 	.word	0x424711e0

0800665c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e0c4      	b.n	80067fc <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a63      	ldr	r2, [pc, #396]	; (8006804 <HAL_RTC_Init+0x1a8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <HAL_RTC_Init+0x2a>
 800667c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006680:	4861      	ldr	r0, [pc, #388]	; (8006808 <HAL_RTC_Init+0x1ac>)
 8006682:	f7fb fbb2 	bl	8001dea <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b40      	cmp	r3, #64	; 0x40
 800668c:	d008      	beq.n	80066a0 <HAL_RTC_Init+0x44>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <HAL_RTC_Init+0x44>
 8006696:	f240 1105 	movw	r1, #261	; 0x105
 800669a:	485b      	ldr	r0, [pc, #364]	; (8006808 <HAL_RTC_Init+0x1ac>)
 800669c:	f7fb fba5 	bl	8001dea <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	2b7f      	cmp	r3, #127	; 0x7f
 80066a6:	d904      	bls.n	80066b2 <HAL_RTC_Init+0x56>
 80066a8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80066ac:	4856      	ldr	r0, [pc, #344]	; (8006808 <HAL_RTC_Init+0x1ac>)
 80066ae:	f7fb fb9c 	bl	8001dea <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ba:	d304      	bcc.n	80066c6 <HAL_RTC_Init+0x6a>
 80066bc:	f240 1107 	movw	r1, #263	; 0x107
 80066c0:	4851      	ldr	r0, [pc, #324]	; (8006808 <HAL_RTC_Init+0x1ac>)
 80066c2:	f7fb fb92 	bl	8001dea <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d013      	beq.n	80066f6 <HAL_RTC_Init+0x9a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066d6:	d00e      	beq.n	80066f6 <HAL_RTC_Init+0x9a>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066e0:	d009      	beq.n	80066f6 <HAL_RTC_Init+0x9a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066ea:	d004      	beq.n	80066f6 <HAL_RTC_Init+0x9a>
 80066ec:	f44f 7184 	mov.w	r1, #264	; 0x108
 80066f0:	4845      	ldr	r0, [pc, #276]	; (8006808 <HAL_RTC_Init+0x1ac>)
 80066f2:	f7fb fb7a 	bl	8001dea <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <HAL_RTC_Init+0xb6>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006706:	d004      	beq.n	8006712 <HAL_RTC_Init+0xb6>
 8006708:	f240 1109 	movw	r1, #265	; 0x109
 800670c:	483e      	ldr	r0, [pc, #248]	; (8006808 <HAL_RTC_Init+0x1ac>)
 800670e:	f7fb fb6c 	bl	8001dea <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d009      	beq.n	800672e <HAL_RTC_Init+0xd2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006722:	d004      	beq.n	800672e <HAL_RTC_Init+0xd2>
 8006724:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006728:	4837      	ldr	r0, [pc, #220]	; (8006808 <HAL_RTC_Init+0x1ac>)
 800672a:	f7fb fb5e 	bl	8001dea <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	7f5b      	ldrb	r3, [r3, #29]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d105      	bne.n	8006744 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fb fbb8 	bl	8001eb4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	22ca      	movs	r2, #202	; 0xca
 8006750:	625a      	str	r2, [r3, #36]	; 0x24
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2253      	movs	r2, #83	; 0x53
 8006758:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fad2 	bl	8006d04 <RTC_EnterInitMode>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d12c      	bne.n	80067c4 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6812      	ldr	r2, [r2, #0]
 8006774:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800677c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6899      	ldr	r1, [r3, #8]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	68d2      	ldr	r2, [r2, #12]
 80067a4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6919      	ldr	r1, [r3, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	041a      	lsls	r2, r3, #16
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fad9 	bl	8006d72 <RTC_ExitInitMode>
 80067c0:	4603      	mov	r3, r0
 80067c2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d113      	bne.n	80067f2 <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067d8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	699a      	ldr	r2, [r3, #24]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	22ff      	movs	r2, #255	; 0xff
 80067f8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	40002800 	.word	0x40002800
 8006808:	080116cc 	.word	0x080116cc

0800680c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800680c:	b590      	push	{r4, r7, lr}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d007      	beq.n	8006832 <HAL_RTC_SetTime+0x26>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d004      	beq.n	8006832 <HAL_RTC_SetTime+0x26>
 8006828:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 800682c:	489a      	ldr	r0, [pc, #616]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 800682e:	f7fb fadc 	bl	8001dea <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800683a:	d00d      	beq.n	8006858 <HAL_RTC_SetTime+0x4c>
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006844:	d008      	beq.n	8006858 <HAL_RTC_SetTime+0x4c>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d004      	beq.n	8006858 <HAL_RTC_SetTime+0x4c>
 800684e:	f240 21b5 	movw	r1, #693	; 0x2b5
 8006852:	4891      	ldr	r0, [pc, #580]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 8006854:	f7fb fac9 	bl	8001dea <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d009      	beq.n	8006874 <HAL_RTC_SetTime+0x68>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006868:	d004      	beq.n	8006874 <HAL_RTC_SetTime+0x68>
 800686a:	f240 21b6 	movw	r1, #694	; 0x2b6
 800686e:	488a      	ldr	r0, [pc, #552]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 8006870:	f7fb fabb 	bl	8001dea <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	7f1b      	ldrb	r3, [r3, #28]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_RTC_SetTime+0x74>
 800687c:	2302      	movs	r3, #2
 800687e:	e107      	b.n	8006a90 <HAL_RTC_SetTime+0x284>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2202      	movs	r2, #2
 800688a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d15c      	bne.n	800694c <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01a      	beq.n	80068d6 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <HAL_RTC_SetTime+0xa4>
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b0c      	cmp	r3, #12
 80068ae:	d904      	bls.n	80068ba <HAL_RTC_SetTime+0xae>
 80068b0:	f240 21c1 	movw	r1, #705	; 0x2c1
 80068b4:	4878      	ldr	r0, [pc, #480]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 80068b6:	f7fb fa98 	bl	8001dea <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	78db      	ldrb	r3, [r3, #3]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d015      	beq.n	80068ee <HAL_RTC_SetTime+0xe2>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	78db      	ldrb	r3, [r3, #3]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d011      	beq.n	80068ee <HAL_RTC_SetTime+0xe2>
 80068ca:	f240 21c2 	movw	r1, #706	; 0x2c2
 80068ce:	4872      	ldr	r0, [pc, #456]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 80068d0:	f7fb fa8b 	bl	8001dea <assert_failed>
 80068d4:	e00b      	b.n	80068ee <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2200      	movs	r2, #0
 80068da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b17      	cmp	r3, #23
 80068e2:	d904      	bls.n	80068ee <HAL_RTC_SetTime+0xe2>
 80068e4:	f240 21c7 	movw	r1, #711	; 0x2c7
 80068e8:	486b      	ldr	r0, [pc, #428]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 80068ea:	f7fb fa7e 	bl	8001dea <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	785b      	ldrb	r3, [r3, #1]
 80068f2:	2b3b      	cmp	r3, #59	; 0x3b
 80068f4:	d904      	bls.n	8006900 <HAL_RTC_SetTime+0xf4>
 80068f6:	f240 21c9 	movw	r1, #713	; 0x2c9
 80068fa:	4867      	ldr	r0, [pc, #412]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 80068fc:	f7fb fa75 	bl	8001dea <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	789b      	ldrb	r3, [r3, #2]
 8006904:	2b3b      	cmp	r3, #59	; 0x3b
 8006906:	d904      	bls.n	8006912 <HAL_RTC_SetTime+0x106>
 8006908:	f240 21ca 	movw	r1, #714	; 0x2ca
 800690c:	4862      	ldr	r0, [pc, #392]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 800690e:	f7fb fa6c 	bl	8001dea <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fa50 	bl	8006dbc <RTC_ByteToBcd2>
 800691c:	4603      	mov	r3, r0
 800691e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	785b      	ldrb	r3, [r3, #1]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fa49 	bl	8006dbc <RTC_ByteToBcd2>
 800692a:	4603      	mov	r3, r0
 800692c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800692e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	789b      	ldrb	r3, [r3, #2]
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fa41 	bl	8006dbc <RTC_ByteToBcd2>
 800693a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800693c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	78db      	ldrb	r3, [r3, #3]
 8006944:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	e062      	b.n	8006a12 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d022      	beq.n	80069a0 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fa49 	bl	8006df6 <RTC_Bcd2ToByte>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d007      	beq.n	800697a <HAL_RTC_SetTime+0x16e>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fa41 	bl	8006df6 <RTC_Bcd2ToByte>
 8006974:	4603      	mov	r3, r0
 8006976:	2b0c      	cmp	r3, #12
 8006978:	d904      	bls.n	8006984 <HAL_RTC_SetTime+0x178>
 800697a:	f240 21d5 	movw	r1, #725	; 0x2d5
 800697e:	4846      	ldr	r0, [pc, #280]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 8006980:	f7fb fa33 	bl	8001dea <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	78db      	ldrb	r3, [r3, #3]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d019      	beq.n	80069c0 <HAL_RTC_SetTime+0x1b4>
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	78db      	ldrb	r3, [r3, #3]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d015      	beq.n	80069c0 <HAL_RTC_SetTime+0x1b4>
 8006994:	f240 21d6 	movw	r1, #726	; 0x2d6
 8006998:	483f      	ldr	r0, [pc, #252]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 800699a:	f7fb fa26 	bl	8001dea <assert_failed>
 800699e:	e00f      	b.n	80069c0 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2200      	movs	r2, #0
 80069a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fa23 	bl	8006df6 <RTC_Bcd2ToByte>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b17      	cmp	r3, #23
 80069b4:	d904      	bls.n	80069c0 <HAL_RTC_SetTime+0x1b4>
 80069b6:	f240 21db 	movw	r1, #731	; 0x2db
 80069ba:	4837      	ldr	r0, [pc, #220]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 80069bc:	f7fb fa15 	bl	8001dea <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fa16 	bl	8006df6 <RTC_Bcd2ToByte>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b3b      	cmp	r3, #59	; 0x3b
 80069ce:	d904      	bls.n	80069da <HAL_RTC_SetTime+0x1ce>
 80069d0:	f240 21dd 	movw	r1, #733	; 0x2dd
 80069d4:	4830      	ldr	r0, [pc, #192]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 80069d6:	f7fb fa08 	bl	8001dea <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	789b      	ldrb	r3, [r3, #2]
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fa09 	bl	8006df6 <RTC_Bcd2ToByte>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b3b      	cmp	r3, #59	; 0x3b
 80069e8:	d904      	bls.n	80069f4 <HAL_RTC_SetTime+0x1e8>
 80069ea:	f240 21de 	movw	r1, #734	; 0x2de
 80069ee:	482a      	ldr	r0, [pc, #168]	; (8006a98 <HAL_RTC_SetTime+0x28c>)
 80069f0:	f7fb f9fb 	bl	8001dea <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a00:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006a06:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	78db      	ldrb	r3, [r3, #3]
 8006a0c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	22ca      	movs	r2, #202	; 0xca
 8006a18:	625a      	str	r2, [r3, #36]	; 0x24
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2253      	movs	r2, #83	; 0x53
 8006a20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f96e 	bl	8006d04 <RTC_EnterInitMode>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006a2c:	7cfb      	ldrb	r3, [r7, #19]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d120      	bne.n	8006a74 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006a3c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006a40:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a50:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6899      	ldr	r1, [r3, #8]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	431a      	orrs	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f981 	bl	8006d72 <RTC_ExitInitMode>
 8006a70:	4603      	mov	r3, r0
 8006a72:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006a74:	7cfb      	ldrb	r3, [r7, #19]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d102      	bne.n	8006a80 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	22ff      	movs	r2, #255	; 0xff
 8006a86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	771a      	strb	r2, [r3, #28]

  return status;
 8006a8e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd90      	pop	{r4, r7, pc}
 8006a98:	080116cc 	.word	0x080116cc

08006a9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a9c:	b590      	push	{r4, r7, lr}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <HAL_RTC_SetDate+0x26>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d004      	beq.n	8006ac2 <HAL_RTC_SetDate+0x26>
 8006ab8:	f240 3153 	movw	r1, #851	; 0x353
 8006abc:	487c      	ldr	r0, [pc, #496]	; (8006cb0 <HAL_RTC_SetDate+0x214>)
 8006abe:	f7fb f994 	bl	8001dea <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	7f1b      	ldrb	r3, [r3, #28]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <HAL_RTC_SetDate+0x32>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e0ec      	b.n	8006ca8 <HAL_RTC_SetDate+0x20c>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10e      	bne.n	8006afe <HAL_RTC_SetDate+0x62>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	785b      	ldrb	r3, [r3, #1]
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	f023 0310 	bic.w	r3, r3, #16
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	330a      	adds	r3, #10
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d01c      	beq.n	8006b40 <HAL_RTC_SetDate+0xa4>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d018      	beq.n	8006b40 <HAL_RTC_SetDate+0xa4>
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d014      	beq.n	8006b40 <HAL_RTC_SetDate+0xa4>
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d010      	beq.n	8006b40 <HAL_RTC_SetDate+0xa4>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	d00c      	beq.n	8006b40 <HAL_RTC_SetDate+0xa4>
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b06      	cmp	r3, #6
 8006b2c:	d008      	beq.n	8006b40 <HAL_RTC_SetDate+0xa4>
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b07      	cmp	r3, #7
 8006b34:	d004      	beq.n	8006b40 <HAL_RTC_SetDate+0xa4>
 8006b36:	f240 315f 	movw	r1, #863	; 0x35f
 8006b3a:	485d      	ldr	r0, [pc, #372]	; (8006cb0 <HAL_RTC_SetDate+0x214>)
 8006b3c:	f7fb f955 	bl	8001dea <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d13f      	bne.n	8006bc6 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	78db      	ldrb	r3, [r3, #3]
 8006b4a:	2b63      	cmp	r3, #99	; 0x63
 8006b4c:	d904      	bls.n	8006b58 <HAL_RTC_SetDate+0xbc>
 8006b4e:	f240 3163 	movw	r1, #867	; 0x363
 8006b52:	4857      	ldr	r0, [pc, #348]	; (8006cb0 <HAL_RTC_SetDate+0x214>)
 8006b54:	f7fb f949 	bl	8001dea <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <HAL_RTC_SetDate+0xcc>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	2b0c      	cmp	r3, #12
 8006b66:	d904      	bls.n	8006b72 <HAL_RTC_SetDate+0xd6>
 8006b68:	f44f 7159 	mov.w	r1, #868	; 0x364
 8006b6c:	4850      	ldr	r0, [pc, #320]	; (8006cb0 <HAL_RTC_SetDate+0x214>)
 8006b6e:	f7fb f93c 	bl	8001dea <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	789b      	ldrb	r3, [r3, #2]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_RTC_SetDate+0xe6>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	789b      	ldrb	r3, [r3, #2]
 8006b7e:	2b1f      	cmp	r3, #31
 8006b80:	d904      	bls.n	8006b8c <HAL_RTC_SetDate+0xf0>
 8006b82:	f240 3165 	movw	r1, #869	; 0x365
 8006b86:	484a      	ldr	r0, [pc, #296]	; (8006cb0 <HAL_RTC_SetDate+0x214>)
 8006b88:	f7fb f92f 	bl	8001dea <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	78db      	ldrb	r3, [r3, #3]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 f913 	bl	8006dbc <RTC_ByteToBcd2>
 8006b96:	4603      	mov	r3, r0
 8006b98:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	785b      	ldrb	r3, [r3, #1]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 f90c 	bl	8006dbc <RTC_ByteToBcd2>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006ba8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	789b      	ldrb	r3, [r3, #2]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 f904 	bl	8006dbc <RTC_ByteToBcd2>
 8006bb4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006bb6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e045      	b.n	8006c52 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	78db      	ldrb	r3, [r3, #3]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f913 	bl	8006df6 <RTC_Bcd2ToByte>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b63      	cmp	r3, #99	; 0x63
 8006bd4:	d904      	bls.n	8006be0 <HAL_RTC_SetDate+0x144>
 8006bd6:	f240 316e 	movw	r1, #878	; 0x36e
 8006bda:	4835      	ldr	r0, [pc, #212]	; (8006cb0 <HAL_RTC_SetDate+0x214>)
 8006bdc:	f7fb f905 	bl	8001dea <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 f906 	bl	8006df6 <RTC_Bcd2ToByte>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d007      	beq.n	8006c00 <HAL_RTC_SetDate+0x164>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 f8fe 	bl	8006df6 <RTC_Bcd2ToByte>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b0c      	cmp	r3, #12
 8006bfe:	d904      	bls.n	8006c0a <HAL_RTC_SetDate+0x16e>
 8006c00:	f240 316f 	movw	r1, #879	; 0x36f
 8006c04:	482a      	ldr	r0, [pc, #168]	; (8006cb0 <HAL_RTC_SetDate+0x214>)
 8006c06:	f7fb f8f0 	bl	8001dea <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	789b      	ldrb	r3, [r3, #2]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 f8f1 	bl	8006df6 <RTC_Bcd2ToByte>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d007      	beq.n	8006c2a <HAL_RTC_SetDate+0x18e>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	789b      	ldrb	r3, [r3, #2]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 f8e9 	bl	8006df6 <RTC_Bcd2ToByte>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b1f      	cmp	r3, #31
 8006c28:	d904      	bls.n	8006c34 <HAL_RTC_SetDate+0x198>
 8006c2a:	f44f 715c 	mov.w	r1, #880	; 0x370
 8006c2e:	4820      	ldr	r0, [pc, #128]	; (8006cb0 <HAL_RTC_SetDate+0x214>)
 8006c30:	f7fb f8db 	bl	8001dea <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	78db      	ldrb	r3, [r3, #3]
 8006c38:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	785b      	ldrb	r3, [r3, #1]
 8006c3e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c40:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006c46:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	22ca      	movs	r2, #202	; 0xca
 8006c58:	625a      	str	r2, [r3, #36]	; 0x24
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2253      	movs	r2, #83	; 0x53
 8006c60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 f84e 	bl	8006d04 <RTC_EnterInitMode>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006c6c:	7cfb      	ldrb	r3, [r7, #19]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10c      	bne.n	8006c8c <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c80:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f875 	bl	8006d72 <RTC_ExitInitMode>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006c8c:	7cfb      	ldrb	r3, [r7, #19]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d102      	bne.n	8006c98 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	22ff      	movs	r2, #255	; 0xff
 8006c9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	771a      	strb	r2, [r3, #28]

  return status;
 8006ca6:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd90      	pop	{r4, r7, pc}
 8006cb0:	080116cc 	.word	0x080116cc

08006cb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006cce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cd0:	f7fc f8ea 	bl	8002ea8 <HAL_GetTick>
 8006cd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006cd6:	e009      	b.n	8006cec <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006cd8:	f7fc f8e6 	bl	8002ea8 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ce6:	d901      	bls.n	8006cec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e007      	b.n	8006cfc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0ee      	beq.n	8006cd8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d122      	bne.n	8006d68 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d30:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d32:	f7fc f8b9 	bl	8002ea8 <HAL_GetTick>
 8006d36:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006d38:	e00c      	b.n	8006d54 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d3a:	f7fc f8b5 	bl	8002ea8 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d48:	d904      	bls.n	8006d54 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2204      	movs	r2, #4
 8006d4e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d102      	bne.n	8006d68 <RTC_EnterInitMode+0x64>
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d1e8      	bne.n	8006d3a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d8c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f003 0320 	and.w	r3, r3, #32
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff ff89 	bl	8006cb4 <HAL_RTC_WaitForSynchro>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d004      	beq.n	8006db2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2204      	movs	r2, #4
 8006dac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006dca:	e005      	b.n	8006dd8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006dd2:	79fb      	ldrb	r3, [r7, #7]
 8006dd4:	3b0a      	subs	r3, #10
 8006dd6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	2b09      	cmp	r3, #9
 8006ddc:	d8f6      	bhi.n	8006dcc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	b2db      	uxtb	r3, r3
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006e04:	79fb      	ldrb	r3, [r7, #7]
 8006e06:	091b      	lsrs	r3, r3, #4
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	0092      	lsls	r2, r2, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	4413      	add	r3, r2
 8006e20:	b2db      	uxtb	r3, r3
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
	...

08006e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e18c      	b.n	800715c <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a75      	ldr	r2, [pc, #468]	; (800701c <HAL_SPI_Init+0x1ec>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d018      	beq.n	8006e7e <HAL_SPI_Init+0x4e>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a73      	ldr	r2, [pc, #460]	; (8007020 <HAL_SPI_Init+0x1f0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d013      	beq.n	8006e7e <HAL_SPI_Init+0x4e>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a72      	ldr	r2, [pc, #456]	; (8007024 <HAL_SPI_Init+0x1f4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00e      	beq.n	8006e7e <HAL_SPI_Init+0x4e>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a70      	ldr	r2, [pc, #448]	; (8007028 <HAL_SPI_Init+0x1f8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d009      	beq.n	8006e7e <HAL_SPI_Init+0x4e>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a6f      	ldr	r2, [pc, #444]	; (800702c <HAL_SPI_Init+0x1fc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d004      	beq.n	8006e7e <HAL_SPI_Init+0x4e>
 8006e74:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e78:	486d      	ldr	r0, [pc, #436]	; (8007030 <HAL_SPI_Init+0x200>)
 8006e7a:	f7fa ffb6 	bl	8001dea <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d009      	beq.n	8006e9a <HAL_SPI_Init+0x6a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e8e:	d004      	beq.n	8006e9a <HAL_SPI_Init+0x6a>
 8006e90:	f240 1141 	movw	r1, #321	; 0x141
 8006e94:	4866      	ldr	r0, [pc, #408]	; (8007030 <HAL_SPI_Init+0x200>)
 8006e96:	f7fa ffa8 	bl	8001dea <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_SPI_Init+0x90>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eaa:	d009      	beq.n	8006ec0 <HAL_SPI_Init+0x90>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb4:	d004      	beq.n	8006ec0 <HAL_SPI_Init+0x90>
 8006eb6:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006eba:	485d      	ldr	r0, [pc, #372]	; (8007030 <HAL_SPI_Init+0x200>)
 8006ebc:	f7fa ff95 	bl	8001dea <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec8:	d008      	beq.n	8006edc <HAL_SPI_Init+0xac>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <HAL_SPI_Init+0xac>
 8006ed2:	f240 1143 	movw	r1, #323	; 0x143
 8006ed6:	4856      	ldr	r0, [pc, #344]	; (8007030 <HAL_SPI_Init+0x200>)
 8006ed8:	f7fa ff87 	bl	8001dea <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee4:	d00d      	beq.n	8006f02 <HAL_SPI_Init+0xd2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <HAL_SPI_Init+0xd2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ef6:	d004      	beq.n	8006f02 <HAL_SPI_Init+0xd2>
 8006ef8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006efc:	484c      	ldr	r0, [pc, #304]	; (8007030 <HAL_SPI_Init+0x200>)
 8006efe:	f7fa ff74 	bl	8001dea <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d020      	beq.n	8006f4c <HAL_SPI_Init+0x11c>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d01c      	beq.n	8006f4c <HAL_SPI_Init+0x11c>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	2b10      	cmp	r3, #16
 8006f18:	d018      	beq.n	8006f4c <HAL_SPI_Init+0x11c>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	2b18      	cmp	r3, #24
 8006f20:	d014      	beq.n	8006f4c <HAL_SPI_Init+0x11c>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d010      	beq.n	8006f4c <HAL_SPI_Init+0x11c>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	2b28      	cmp	r3, #40	; 0x28
 8006f30:	d00c      	beq.n	8006f4c <HAL_SPI_Init+0x11c>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	2b30      	cmp	r3, #48	; 0x30
 8006f38:	d008      	beq.n	8006f4c <HAL_SPI_Init+0x11c>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	2b38      	cmp	r3, #56	; 0x38
 8006f40:	d004      	beq.n	8006f4c <HAL_SPI_Init+0x11c>
 8006f42:	f240 1145 	movw	r1, #325	; 0x145
 8006f46:	483a      	ldr	r0, [pc, #232]	; (8007030 <HAL_SPI_Init+0x200>)
 8006f48:	f7fa ff4f 	bl	8001dea <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d008      	beq.n	8006f66 <HAL_SPI_Init+0x136>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	2b80      	cmp	r3, #128	; 0x80
 8006f5a:	d004      	beq.n	8006f66 <HAL_SPI_Init+0x136>
 8006f5c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006f60:	4833      	ldr	r0, [pc, #204]	; (8007030 <HAL_SPI_Init+0x200>)
 8006f62:	f7fa ff42 	bl	8001dea <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d008      	beq.n	8006f80 <HAL_SPI_Init+0x150>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	2b10      	cmp	r3, #16
 8006f74:	d004      	beq.n	8006f80 <HAL_SPI_Init+0x150>
 8006f76:	f240 1147 	movw	r1, #327	; 0x147
 8006f7a:	482d      	ldr	r0, [pc, #180]	; (8007030 <HAL_SPI_Init+0x200>)
 8006f7c:	f7fa ff35 	bl	8001dea <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d155      	bne.n	8007034 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d008      	beq.n	8006fa2 <HAL_SPI_Init+0x172>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d004      	beq.n	8006fa2 <HAL_SPI_Init+0x172>
 8006f98:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8006f9c:	4824      	ldr	r0, [pc, #144]	; (8007030 <HAL_SPI_Init+0x200>)
 8006f9e:	f7fa ff24 	bl	8001dea <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d008      	beq.n	8006fbc <HAL_SPI_Init+0x18c>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d004      	beq.n	8006fbc <HAL_SPI_Init+0x18c>
 8006fb2:	f240 114b 	movw	r1, #331	; 0x14b
 8006fb6:	481e      	ldr	r0, [pc, #120]	; (8007030 <HAL_SPI_Init+0x200>)
 8006fb8:	f7fa ff17 	bl	8001dea <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fc4:	d125      	bne.n	8007012 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d05d      	beq.n	800708a <HAL_SPI_Init+0x25a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d059      	beq.n	800708a <HAL_SPI_Init+0x25a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	2b10      	cmp	r3, #16
 8006fdc:	d055      	beq.n	800708a <HAL_SPI_Init+0x25a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	2b18      	cmp	r3, #24
 8006fe4:	d051      	beq.n	800708a <HAL_SPI_Init+0x25a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d04d      	beq.n	800708a <HAL_SPI_Init+0x25a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	2b28      	cmp	r3, #40	; 0x28
 8006ff4:	d049      	beq.n	800708a <HAL_SPI_Init+0x25a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	2b30      	cmp	r3, #48	; 0x30
 8006ffc:	d045      	beq.n	800708a <HAL_SPI_Init+0x25a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	2b38      	cmp	r3, #56	; 0x38
 8007004:	d041      	beq.n	800708a <HAL_SPI_Init+0x25a>
 8007006:	f240 114f 	movw	r1, #335	; 0x14f
 800700a:	4809      	ldr	r0, [pc, #36]	; (8007030 <HAL_SPI_Init+0x200>)
 800700c:	f7fa feed 	bl	8001dea <assert_failed>
 8007010:	e03b      	b.n	800708a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	61da      	str	r2, [r3, #28]
 8007018:	e037      	b.n	800708a <HAL_SPI_Init+0x25a>
 800701a:	bf00      	nop
 800701c:	40013000 	.word	0x40013000
 8007020:	40003800 	.word	0x40003800
 8007024:	40003c00 	.word	0x40003c00
 8007028:	40013400 	.word	0x40013400
 800702c:	40015000 	.word	0x40015000
 8007030:	08011704 	.word	0x08011704
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d020      	beq.n	800707e <HAL_SPI_Init+0x24e>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	2b08      	cmp	r3, #8
 8007042:	d01c      	beq.n	800707e <HAL_SPI_Init+0x24e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	2b10      	cmp	r3, #16
 800704a:	d018      	beq.n	800707e <HAL_SPI_Init+0x24e>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	2b18      	cmp	r3, #24
 8007052:	d014      	beq.n	800707e <HAL_SPI_Init+0x24e>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	2b20      	cmp	r3, #32
 800705a:	d010      	beq.n	800707e <HAL_SPI_Init+0x24e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	2b28      	cmp	r3, #40	; 0x28
 8007062:	d00c      	beq.n	800707e <HAL_SPI_Init+0x24e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	2b30      	cmp	r3, #48	; 0x30
 800706a:	d008      	beq.n	800707e <HAL_SPI_Init+0x24e>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	2b38      	cmp	r3, #56	; 0x38
 8007072:	d004      	beq.n	800707e <HAL_SPI_Init+0x24e>
 8007074:	f240 1159 	movw	r1, #345	; 0x159
 8007078:	483a      	ldr	r0, [pc, #232]	; (8007164 <HAL_SPI_Init+0x334>)
 800707a:	f7fa feb6 	bl	8001dea <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fa ff67 	bl	8001f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2202      	movs	r2, #2
 80070ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	431a      	orrs	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710e:	ea42 0103 	orr.w	r1, r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	0c1b      	lsrs	r3, r3, #16
 8007128:	f003 0104 	and.w	r1, r3, #4
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	f003 0210 	and.w	r2, r3, #16
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69da      	ldr	r2, [r3, #28]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800714a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	08011704 	.word	0x08011704

08007168 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	4613      	mov	r3, r2
 8007176:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <HAL_SPI_Transmit+0x30>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800718c:	d004      	beq.n	8007198 <HAL_SPI_Transmit+0x30>
 800718e:	f44f 7142 	mov.w	r1, #776	; 0x308
 8007192:	4880      	ldr	r0, [pc, #512]	; (8007394 <HAL_SPI_Transmit+0x22c>)
 8007194:	f7fa fe29 	bl	8001dea <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d101      	bne.n	80071a6 <HAL_SPI_Transmit+0x3e>
 80071a2:	2302      	movs	r3, #2
 80071a4:	e128      	b.n	80073f8 <HAL_SPI_Transmit+0x290>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071ae:	f7fb fe7b 	bl	8002ea8 <HAL_GetTick>
 80071b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80071b4:	88fb      	ldrh	r3, [r7, #6]
 80071b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d002      	beq.n	80071ca <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80071c4:	2302      	movs	r3, #2
 80071c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071c8:	e10d      	b.n	80073e6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <HAL_SPI_Transmit+0x6e>
 80071d0:	88fb      	ldrh	r3, [r7, #6]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d102      	bne.n	80071dc <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071da:	e104      	b.n	80073e6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2203      	movs	r2, #3
 80071e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	88fa      	ldrh	r2, [r7, #6]
 80071f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	88fa      	ldrh	r2, [r7, #6]
 80071fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007222:	d10f      	bne.n	8007244 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007232:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007242:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724e:	2b40      	cmp	r3, #64	; 0x40
 8007250:	d007      	beq.n	8007262 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007260:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800726a:	d14b      	bne.n	8007304 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <HAL_SPI_Transmit+0x112>
 8007274:	8afb      	ldrh	r3, [r7, #22]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d13e      	bne.n	80072f8 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727e:	881a      	ldrh	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728a:	1c9a      	adds	r2, r3, #2
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007294:	b29b      	uxth	r3, r3
 8007296:	3b01      	subs	r3, #1
 8007298:	b29a      	uxth	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800729e:	e02b      	b.n	80072f8 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d112      	bne.n	80072d4 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	881a      	ldrh	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072be:	1c9a      	adds	r2, r3, #2
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80072d2:	e011      	b.n	80072f8 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072d4:	f7fb fde8 	bl	8002ea8 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d803      	bhi.n	80072ec <HAL_SPI_Transmit+0x184>
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ea:	d102      	bne.n	80072f2 <HAL_SPI_Transmit+0x18a>
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80072f6:	e076      	b.n	80073e6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1ce      	bne.n	80072a0 <HAL_SPI_Transmit+0x138>
 8007302:	e04e      	b.n	80073a2 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <HAL_SPI_Transmit+0x1aa>
 800730c:	8afb      	ldrh	r3, [r7, #22]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d142      	bne.n	8007398 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	330c      	adds	r3, #12
 800731c:	7812      	ldrb	r2, [r2, #0]
 800731e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007338:	e02e      	b.n	8007398 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b02      	cmp	r3, #2
 8007346:	d113      	bne.n	8007370 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	330c      	adds	r3, #12
 8007352:	7812      	ldrb	r2, [r2, #0]
 8007354:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007364:	b29b      	uxth	r3, r3
 8007366:	3b01      	subs	r3, #1
 8007368:	b29a      	uxth	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	86da      	strh	r2, [r3, #54]	; 0x36
 800736e:	e013      	b.n	8007398 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007370:	f7fb fd9a 	bl	8002ea8 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d803      	bhi.n	8007388 <HAL_SPI_Transmit+0x220>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007386:	d102      	bne.n	800738e <HAL_SPI_Transmit+0x226>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d104      	bne.n	8007398 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007392:	e028      	b.n	80073e6 <HAL_SPI_Transmit+0x27e>
 8007394:	08011704 	.word	0x08011704
    while (hspi->TxXferCount > 0U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1cb      	bne.n	800733a <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 f8b2 	bl	8007510 <SPI_EndRxTxTransaction>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2220      	movs	r2, #32
 80073b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073c0:	2300      	movs	r3, #0
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	613b      	str	r3, [r7, #16]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	77fb      	strb	r3, [r7, #31]
 80073e2:	e000      	b.n	80073e6 <HAL_SPI_Transmit+0x27e>
  }

error:
 80073e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	4613      	mov	r3, r2
 800740e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007410:	f7fb fd4a 	bl	8002ea8 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007418:	1a9b      	subs	r3, r3, r2
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	4413      	add	r3, r2
 800741e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007420:	f7fb fd42 	bl	8002ea8 <HAL_GetTick>
 8007424:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007426:	4b39      	ldr	r3, [pc, #228]	; (800750c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	015b      	lsls	r3, r3, #5
 800742c:	0d1b      	lsrs	r3, r3, #20
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	fb02 f303 	mul.w	r3, r2, r3
 8007434:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007436:	e054      	b.n	80074e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743e:	d050      	beq.n	80074e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007440:	f7fb fd32 	bl	8002ea8 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	429a      	cmp	r2, r3
 800744e:	d902      	bls.n	8007456 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d13d      	bne.n	80074d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800746e:	d111      	bne.n	8007494 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007478:	d004      	beq.n	8007484 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007482:	d107      	bne.n	8007494 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007492:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800749c:	d10f      	bne.n	80074be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e017      	b.n	8007502 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	3b01      	subs	r3, #1
 80074e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4013      	ands	r3, r2
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	bf0c      	ite	eq
 80074f2:	2301      	moveq	r3, #1
 80074f4:	2300      	movne	r3, #0
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	461a      	mov	r2, r3
 80074fa:	79fb      	ldrb	r3, [r7, #7]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d19b      	bne.n	8007438 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3720      	adds	r7, #32
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	2000008c 	.word	0x2000008c

08007510 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800751c:	4b1b      	ldr	r3, [pc, #108]	; (800758c <SPI_EndRxTxTransaction+0x7c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1b      	ldr	r2, [pc, #108]	; (8007590 <SPI_EndRxTxTransaction+0x80>)
 8007522:	fba2 2303 	umull	r2, r3, r2, r3
 8007526:	0d5b      	lsrs	r3, r3, #21
 8007528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800752c:	fb02 f303 	mul.w	r3, r2, r3
 8007530:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800753a:	d112      	bne.n	8007562 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2200      	movs	r2, #0
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff ff5a 	bl	8007400 <SPI_WaitFlagStateUntilTimeout>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d016      	beq.n	8007580 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007556:	f043 0220 	orr.w	r2, r3, #32
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e00f      	b.n	8007582 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	3b01      	subs	r3, #1
 800756c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007578:	2b80      	cmp	r3, #128	; 0x80
 800757a:	d0f2      	beq.n	8007562 <SPI_EndRxTxTransaction+0x52>
 800757c:	e000      	b.n	8007580 <SPI_EndRxTxTransaction+0x70>
        break;
 800757e:	bf00      	nop
  }

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3718      	adds	r7, #24
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	2000008c 	.word	0x2000008c
 8007590:	165e9f81 	.word	0x165e9f81

08007594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e0a7      	b.n	80076f6 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a55      	ldr	r2, [pc, #340]	; (8007700 <HAL_TIM_Base_Init+0x16c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d027      	beq.n	8007600 <HAL_TIM_Base_Init+0x6c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b8:	d022      	beq.n	8007600 <HAL_TIM_Base_Init+0x6c>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a51      	ldr	r2, [pc, #324]	; (8007704 <HAL_TIM_Base_Init+0x170>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d01d      	beq.n	8007600 <HAL_TIM_Base_Init+0x6c>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a4f      	ldr	r2, [pc, #316]	; (8007708 <HAL_TIM_Base_Init+0x174>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d018      	beq.n	8007600 <HAL_TIM_Base_Init+0x6c>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a4e      	ldr	r2, [pc, #312]	; (800770c <HAL_TIM_Base_Init+0x178>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d013      	beq.n	8007600 <HAL_TIM_Base_Init+0x6c>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a4c      	ldr	r2, [pc, #304]	; (8007710 <HAL_TIM_Base_Init+0x17c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00e      	beq.n	8007600 <HAL_TIM_Base_Init+0x6c>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a4b      	ldr	r2, [pc, #300]	; (8007714 <HAL_TIM_Base_Init+0x180>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d009      	beq.n	8007600 <HAL_TIM_Base_Init+0x6c>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a49      	ldr	r2, [pc, #292]	; (8007718 <HAL_TIM_Base_Init+0x184>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d004      	beq.n	8007600 <HAL_TIM_Base_Init+0x6c>
 80075f6:	f240 1113 	movw	r1, #275	; 0x113
 80075fa:	4848      	ldr	r0, [pc, #288]	; (800771c <HAL_TIM_Base_Init+0x188>)
 80075fc:	f7fa fbf5 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d014      	beq.n	8007632 <HAL_TIM_Base_Init+0x9e>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2b10      	cmp	r3, #16
 800760e:	d010      	beq.n	8007632 <HAL_TIM_Base_Init+0x9e>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2b20      	cmp	r3, #32
 8007616:	d00c      	beq.n	8007632 <HAL_TIM_Base_Init+0x9e>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	d008      	beq.n	8007632 <HAL_TIM_Base_Init+0x9e>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	2b60      	cmp	r3, #96	; 0x60
 8007626:	d004      	beq.n	8007632 <HAL_TIM_Base_Init+0x9e>
 8007628:	f44f 718a 	mov.w	r1, #276	; 0x114
 800762c:	483b      	ldr	r0, [pc, #236]	; (800771c <HAL_TIM_Base_Init+0x188>)
 800762e:	f7fa fbdc 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00e      	beq.n	8007658 <HAL_TIM_Base_Init+0xc4>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007642:	d009      	beq.n	8007658 <HAL_TIM_Base_Init+0xc4>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800764c:	d004      	beq.n	8007658 <HAL_TIM_Base_Init+0xc4>
 800764e:	f240 1115 	movw	r1, #277	; 0x115
 8007652:	4832      	ldr	r0, [pc, #200]	; (800771c <HAL_TIM_Base_Init+0x188>)
 8007654:	f7fa fbc9 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d008      	beq.n	8007672 <HAL_TIM_Base_Init+0xde>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	2b80      	cmp	r3, #128	; 0x80
 8007666:	d004      	beq.n	8007672 <HAL_TIM_Base_Init+0xde>
 8007668:	f44f 718b 	mov.w	r1, #278	; 0x116
 800766c:	482b      	ldr	r0, [pc, #172]	; (800771c <HAL_TIM_Base_Init+0x188>)
 800766e:	f7fa fbbc 	bl	8001dea <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7fb fa0e 	bl	8002aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3304      	adds	r3, #4
 800769c:	4619      	mov	r1, r3
 800769e:	4610      	mov	r0, r2
 80076a0:	f001 fa32 	bl	8008b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	40010000 	.word	0x40010000
 8007704:	40000400 	.word	0x40000400
 8007708:	40000800 	.word	0x40000800
 800770c:	40000c00 	.word	0x40000c00
 8007710:	40014000 	.word	0x40014000
 8007714:	40014400 	.word	0x40014400
 8007718:	40014800 	.word	0x40014800
 800771c:	0801173c 	.word	0x0801173c

08007720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a3d      	ldr	r2, [pc, #244]	; (8007824 <HAL_TIM_Base_Start_IT+0x104>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d027      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x62>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773a:	d022      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x62>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a39      	ldr	r2, [pc, #228]	; (8007828 <HAL_TIM_Base_Start_IT+0x108>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d01d      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x62>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a38      	ldr	r2, [pc, #224]	; (800782c <HAL_TIM_Base_Start_IT+0x10c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d018      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x62>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a36      	ldr	r2, [pc, #216]	; (8007830 <HAL_TIM_Base_Start_IT+0x110>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d013      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x62>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a35      	ldr	r2, [pc, #212]	; (8007834 <HAL_TIM_Base_Start_IT+0x114>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00e      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x62>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a33      	ldr	r2, [pc, #204]	; (8007838 <HAL_TIM_Base_Start_IT+0x118>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d009      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x62>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a32      	ldr	r2, [pc, #200]	; (800783c <HAL_TIM_Base_Start_IT+0x11c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d004      	beq.n	8007782 <HAL_TIM_Base_Start_IT+0x62>
 8007778:	f240 11cf 	movw	r1, #463	; 0x1cf
 800777c:	4830      	ldr	r0, [pc, #192]	; (8007840 <HAL_TIM_Base_Start_IT+0x120>)
 800777e:	f7fa fb34 	bl	8001dea <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b01      	cmp	r3, #1
 800778c:	d001      	beq.n	8007792 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e044      	b.n	800781c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0201 	orr.w	r2, r2, #1
 80077a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a1d      	ldr	r2, [pc, #116]	; (8007824 <HAL_TIM_Base_Start_IT+0x104>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d018      	beq.n	80077e6 <HAL_TIM_Base_Start_IT+0xc6>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077bc:	d013      	beq.n	80077e6 <HAL_TIM_Base_Start_IT+0xc6>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a19      	ldr	r2, [pc, #100]	; (8007828 <HAL_TIM_Base_Start_IT+0x108>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00e      	beq.n	80077e6 <HAL_TIM_Base_Start_IT+0xc6>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a17      	ldr	r2, [pc, #92]	; (800782c <HAL_TIM_Base_Start_IT+0x10c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d009      	beq.n	80077e6 <HAL_TIM_Base_Start_IT+0xc6>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a16      	ldr	r2, [pc, #88]	; (8007830 <HAL_TIM_Base_Start_IT+0x110>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d004      	beq.n	80077e6 <HAL_TIM_Base_Start_IT+0xc6>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a14      	ldr	r2, [pc, #80]	; (8007834 <HAL_TIM_Base_Start_IT+0x114>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d111      	bne.n	800780a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b06      	cmp	r3, #6
 80077f6:	d010      	beq.n	800781a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0201 	orr.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007808:	e007      	b.n	800781a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0201 	orr.w	r2, r2, #1
 8007818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40010000 	.word	0x40010000
 8007828:	40000400 	.word	0x40000400
 800782c:	40000800 	.word	0x40000800
 8007830:	40000c00 	.word	0x40000c00
 8007834:	40014000 	.word	0x40014000
 8007838:	40014400 	.word	0x40014400
 800783c:	40014800 	.word	0x40014800
 8007840:	0801173c 	.word	0x0801173c

08007844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e0a7      	b.n	80079a6 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a55      	ldr	r2, [pc, #340]	; (80079b0 <HAL_TIM_PWM_Init+0x16c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d027      	beq.n	80078b0 <HAL_TIM_PWM_Init+0x6c>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007868:	d022      	beq.n	80078b0 <HAL_TIM_PWM_Init+0x6c>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a51      	ldr	r2, [pc, #324]	; (80079b4 <HAL_TIM_PWM_Init+0x170>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d01d      	beq.n	80078b0 <HAL_TIM_PWM_Init+0x6c>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a4f      	ldr	r2, [pc, #316]	; (80079b8 <HAL_TIM_PWM_Init+0x174>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d018      	beq.n	80078b0 <HAL_TIM_PWM_Init+0x6c>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a4e      	ldr	r2, [pc, #312]	; (80079bc <HAL_TIM_PWM_Init+0x178>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d013      	beq.n	80078b0 <HAL_TIM_PWM_Init+0x6c>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a4c      	ldr	r2, [pc, #304]	; (80079c0 <HAL_TIM_PWM_Init+0x17c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00e      	beq.n	80078b0 <HAL_TIM_PWM_Init+0x6c>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a4b      	ldr	r2, [pc, #300]	; (80079c4 <HAL_TIM_PWM_Init+0x180>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d009      	beq.n	80078b0 <HAL_TIM_PWM_Init+0x6c>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a49      	ldr	r2, [pc, #292]	; (80079c8 <HAL_TIM_PWM_Init+0x184>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d004      	beq.n	80078b0 <HAL_TIM_PWM_Init+0x6c>
 80078a6:	f240 5129 	movw	r1, #1321	; 0x529
 80078aa:	4848      	ldr	r0, [pc, #288]	; (80079cc <HAL_TIM_PWM_Init+0x188>)
 80078ac:	f7fa fa9d 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d014      	beq.n	80078e2 <HAL_TIM_PWM_Init+0x9e>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b10      	cmp	r3, #16
 80078be:	d010      	beq.n	80078e2 <HAL_TIM_PWM_Init+0x9e>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d00c      	beq.n	80078e2 <HAL_TIM_PWM_Init+0x9e>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	2b40      	cmp	r3, #64	; 0x40
 80078ce:	d008      	beq.n	80078e2 <HAL_TIM_PWM_Init+0x9e>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	2b60      	cmp	r3, #96	; 0x60
 80078d6:	d004      	beq.n	80078e2 <HAL_TIM_PWM_Init+0x9e>
 80078d8:	f240 512a 	movw	r1, #1322	; 0x52a
 80078dc:	483b      	ldr	r0, [pc, #236]	; (80079cc <HAL_TIM_PWM_Init+0x188>)
 80078de:	f7fa fa84 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00e      	beq.n	8007908 <HAL_TIM_PWM_Init+0xc4>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f2:	d009      	beq.n	8007908 <HAL_TIM_PWM_Init+0xc4>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078fc:	d004      	beq.n	8007908 <HAL_TIM_PWM_Init+0xc4>
 80078fe:	f240 512b 	movw	r1, #1323	; 0x52b
 8007902:	4832      	ldr	r0, [pc, #200]	; (80079cc <HAL_TIM_PWM_Init+0x188>)
 8007904:	f7fa fa71 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d008      	beq.n	8007922 <HAL_TIM_PWM_Init+0xde>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	2b80      	cmp	r3, #128	; 0x80
 8007916:	d004      	beq.n	8007922 <HAL_TIM_PWM_Init+0xde>
 8007918:	f240 512c 	movw	r1, #1324	; 0x52c
 800791c:	482b      	ldr	r0, [pc, #172]	; (80079cc <HAL_TIM_PWM_Init+0x188>)
 800791e:	f7fa fa64 	bl	8001dea <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d106      	bne.n	800793c <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f84a 	bl	80079d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3304      	adds	r3, #4
 800794c:	4619      	mov	r1, r3
 800794e:	4610      	mov	r0, r2
 8007950:	f001 f8da 	bl	8008b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40010000 	.word	0x40010000
 80079b4:	40000400 	.word	0x40000400
 80079b8:	40000800 	.word	0x40000800
 80079bc:	40000c00 	.word	0x40000c00
 80079c0:	40014000 	.word	0x40014000
 80079c4:	40014400 	.word	0x40014400
 80079c8:	40014800 	.word	0x40014800
 80079cc:	0801173c 	.word	0x0801173c

080079d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e18a      	b.n	8007d0e <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a78      	ldr	r2, [pc, #480]	; (8007be0 <HAL_TIM_Encoder_Init+0x1fc>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d01d      	beq.n	8007a3e <HAL_TIM_Encoder_Init+0x5a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a0a:	d018      	beq.n	8007a3e <HAL_TIM_Encoder_Init+0x5a>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a74      	ldr	r2, [pc, #464]	; (8007be4 <HAL_TIM_Encoder_Init+0x200>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d013      	beq.n	8007a3e <HAL_TIM_Encoder_Init+0x5a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a73      	ldr	r2, [pc, #460]	; (8007be8 <HAL_TIM_Encoder_Init+0x204>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00e      	beq.n	8007a3e <HAL_TIM_Encoder_Init+0x5a>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a71      	ldr	r2, [pc, #452]	; (8007bec <HAL_TIM_Encoder_Init+0x208>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d009      	beq.n	8007a3e <HAL_TIM_Encoder_Init+0x5a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a70      	ldr	r2, [pc, #448]	; (8007bf0 <HAL_TIM_Encoder_Init+0x20c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d004      	beq.n	8007a3e <HAL_TIM_Encoder_Init+0x5a>
 8007a34:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8007a38:	486e      	ldr	r0, [pc, #440]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007a3a:	f7fa f9d6 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d014      	beq.n	8007a70 <HAL_TIM_Encoder_Init+0x8c>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	2b10      	cmp	r3, #16
 8007a4c:	d010      	beq.n	8007a70 <HAL_TIM_Encoder_Init+0x8c>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	d00c      	beq.n	8007a70 <HAL_TIM_Encoder_Init+0x8c>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	2b40      	cmp	r3, #64	; 0x40
 8007a5c:	d008      	beq.n	8007a70 <HAL_TIM_Encoder_Init+0x8c>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	2b60      	cmp	r3, #96	; 0x60
 8007a64:	d004      	beq.n	8007a70 <HAL_TIM_Encoder_Init+0x8c>
 8007a66:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8007a6a:	4862      	ldr	r0, [pc, #392]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007a6c:	f7fa f9bd 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00e      	beq.n	8007a96 <HAL_TIM_Encoder_Init+0xb2>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a80:	d009      	beq.n	8007a96 <HAL_TIM_Encoder_Init+0xb2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a8a:	d004      	beq.n	8007a96 <HAL_TIM_Encoder_Init+0xb2>
 8007a8c:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8007a90:	4858      	ldr	r0, [pc, #352]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007a92:	f7fa f9aa 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d008      	beq.n	8007ab0 <HAL_TIM_Encoder_Init+0xcc>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	2b80      	cmp	r3, #128	; 0x80
 8007aa4:	d004      	beq.n	8007ab0 <HAL_TIM_Encoder_Init+0xcc>
 8007aa6:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8007aaa:	4852      	ldr	r0, [pc, #328]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007aac:	f7fa f99d 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d00c      	beq.n	8007ad2 <HAL_TIM_Encoder_Init+0xee>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d008      	beq.n	8007ad2 <HAL_TIM_Encoder_Init+0xee>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d004      	beq.n	8007ad2 <HAL_TIM_Encoder_Init+0xee>
 8007ac8:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8007acc:	4849      	ldr	r0, [pc, #292]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007ace:	f7fa f98c 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d00c      	beq.n	8007af4 <HAL_TIM_Encoder_Init+0x110>
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d008      	beq.n	8007af4 <HAL_TIM_Encoder_Init+0x110>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d004      	beq.n	8007af4 <HAL_TIM_Encoder_Init+0x110>
 8007aea:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8007aee:	4841      	ldr	r0, [pc, #260]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007af0:	f7fa f97b 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d00c      	beq.n	8007b16 <HAL_TIM_Encoder_Init+0x132>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d008      	beq.n	8007b16 <HAL_TIM_Encoder_Init+0x132>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d004      	beq.n	8007b16 <HAL_TIM_Encoder_Init+0x132>
 8007b0c:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8007b10:	4838      	ldr	r0, [pc, #224]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007b12:	f7fa f96a 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d008      	beq.n	8007b30 <HAL_TIM_Encoder_Init+0x14c>
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d004      	beq.n	8007b30 <HAL_TIM_Encoder_Init+0x14c>
 8007b26:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8007b2a:	4832      	ldr	r0, [pc, #200]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007b2c:	f7fa f95d 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d008      	beq.n	8007b4a <HAL_TIM_Encoder_Init+0x166>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d004      	beq.n	8007b4a <HAL_TIM_Encoder_Init+0x166>
 8007b40:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8007b44:	482b      	ldr	r0, [pc, #172]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007b46:	f7fa f950 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d010      	beq.n	8007b74 <HAL_TIM_Encoder_Init+0x190>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	d00c      	beq.n	8007b74 <HAL_TIM_Encoder_Init+0x190>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d008      	beq.n	8007b74 <HAL_TIM_Encoder_Init+0x190>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	2b0c      	cmp	r3, #12
 8007b68:	d004      	beq.n	8007b74 <HAL_TIM_Encoder_Init+0x190>
 8007b6a:	f640 31da 	movw	r1, #3034	; 0xbda
 8007b6e:	4821      	ldr	r0, [pc, #132]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007b70:	f7fa f93b 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d010      	beq.n	8007b9e <HAL_TIM_Encoder_Init+0x1ba>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d00c      	beq.n	8007b9e <HAL_TIM_Encoder_Init+0x1ba>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d008      	beq.n	8007b9e <HAL_TIM_Encoder_Init+0x1ba>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	2b0c      	cmp	r3, #12
 8007b92:	d004      	beq.n	8007b9e <HAL_TIM_Encoder_Init+0x1ba>
 8007b94:	f640 31db 	movw	r1, #3035	; 0xbdb
 8007b98:	4816      	ldr	r0, [pc, #88]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007b9a:	f7fa f926 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b0f      	cmp	r3, #15
 8007ba4:	d904      	bls.n	8007bb0 <HAL_TIM_Encoder_Init+0x1cc>
 8007ba6:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8007baa:	4812      	ldr	r0, [pc, #72]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007bac:	f7fa f91d 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	2b0f      	cmp	r3, #15
 8007bb6:	d904      	bls.n	8007bc2 <HAL_TIM_Encoder_Init+0x1de>
 8007bb8:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8007bbc:	480d      	ldr	r0, [pc, #52]	; (8007bf4 <HAL_TIM_Encoder_Init+0x210>)
 8007bbe:	f7fa f914 	bl	8001dea <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d114      	bne.n	8007bf8 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fa ffda 	bl	8002b90 <HAL_TIM_Encoder_MspInit>
 8007bdc:	e00c      	b.n	8007bf8 <HAL_TIM_Encoder_Init+0x214>
 8007bde:	bf00      	nop
 8007be0:	40010000 	.word	0x40010000
 8007be4:	40000400 	.word	0x40000400
 8007be8:	40000800 	.word	0x40000800
 8007bec:	40000c00 	.word	0x40000c00
 8007bf0:	40014000 	.word	0x40014000
 8007bf4:	0801173c 	.word	0x0801173c
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c0e:	f023 0307 	bic.w	r3, r3, #7
 8007c12:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f000 ff72 	bl	8008b08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4c:	f023 0303 	bic.w	r3, r3, #3
 8007c50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	021b      	lsls	r3, r3, #8
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c6a:	f023 030c 	bic.w	r3, r3, #12
 8007c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	4313      	orrs	r3, r2
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	011a      	lsls	r2, r3, #4
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	031b      	lsls	r3, r3, #12
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007ca8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007cb0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop

08007d18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a4d      	ldr	r2, [pc, #308]	; (8007e7c <HAL_TIM_Encoder_Start+0x164>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d01d      	beq.n	8007d88 <HAL_TIM_Encoder_Start+0x70>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d54:	d018      	beq.n	8007d88 <HAL_TIM_Encoder_Start+0x70>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a49      	ldr	r2, [pc, #292]	; (8007e80 <HAL_TIM_Encoder_Start+0x168>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d013      	beq.n	8007d88 <HAL_TIM_Encoder_Start+0x70>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a47      	ldr	r2, [pc, #284]	; (8007e84 <HAL_TIM_Encoder_Start+0x16c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d00e      	beq.n	8007d88 <HAL_TIM_Encoder_Start+0x70>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a46      	ldr	r2, [pc, #280]	; (8007e88 <HAL_TIM_Encoder_Start+0x170>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d009      	beq.n	8007d88 <HAL_TIM_Encoder_Start+0x70>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a44      	ldr	r2, [pc, #272]	; (8007e8c <HAL_TIM_Encoder_Start+0x174>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d004      	beq.n	8007d88 <HAL_TIM_Encoder_Start+0x70>
 8007d7e:	f640 418e 	movw	r1, #3214	; 0xc8e
 8007d82:	4843      	ldr	r0, [pc, #268]	; (8007e90 <HAL_TIM_Encoder_Start+0x178>)
 8007d84:	f7fa f831 	bl	8001dea <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d110      	bne.n	8007db0 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d102      	bne.n	8007d9a <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d94:	7b7b      	ldrb	r3, [r7, #13]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d001      	beq.n	8007d9e <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e069      	b.n	8007e72 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2202      	movs	r2, #2
 8007da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2202      	movs	r2, #2
 8007daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dae:	e031      	b.n	8007e14 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d110      	bne.n	8007dd8 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d102      	bne.n	8007dc2 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007dbc:	7b3b      	ldrb	r3, [r7, #12]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d001      	beq.n	8007dc6 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e055      	b.n	8007e72 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007dd6:	e01d      	b.n	8007e14 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d108      	bne.n	8007df0 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d105      	bne.n	8007df0 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007de4:	7b7b      	ldrb	r3, [r7, #13]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d102      	bne.n	8007df0 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007dea:	7b3b      	ldrb	r3, [r7, #12]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d001      	beq.n	8007df4 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e03e      	b.n	8007e72 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_TIM_Encoder_Start+0x10a>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d008      	beq.n	8007e32 <HAL_TIM_Encoder_Start+0x11a>
 8007e20:	e00f      	b.n	8007e42 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2201      	movs	r2, #1
 8007e28:	2100      	movs	r1, #0
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f001 f99c 	bl	8009168 <TIM_CCxChannelCmd>
      break;
 8007e30:	e016      	b.n	8007e60 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2201      	movs	r2, #1
 8007e38:	2104      	movs	r1, #4
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f001 f994 	bl	8009168 <TIM_CCxChannelCmd>
      break;
 8007e40:	e00e      	b.n	8007e60 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2201      	movs	r2, #1
 8007e48:	2100      	movs	r1, #0
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f001 f98c 	bl	8009168 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2201      	movs	r2, #1
 8007e56:	2104      	movs	r1, #4
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f001 f985 	bl	8009168 <TIM_CCxChannelCmd>
      break;
 8007e5e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0201 	orr.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	40010000 	.word	0x40010000
 8007e80:	40000400 	.word	0x40000400
 8007e84:	40000800 	.word	0x40000800
 8007e88:	40000c00 	.word	0x40000c00
 8007e8c:	40014000 	.word	0x40014000
 8007e90:	0801173c 	.word	0x0801173c

08007e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d122      	bne.n	8007ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d11b      	bne.n	8007ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f06f 0202 	mvn.w	r2, #2
 8007ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fda4 	bl	8008a24 <HAL_TIM_IC_CaptureCallback>
 8007edc:	e005      	b.n	8007eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fd96 	bl	8008a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fda7 	bl	8008a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d122      	bne.n	8007f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d11b      	bne.n	8007f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f06f 0204 	mvn.w	r2, #4
 8007f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fd7a 	bl	8008a24 <HAL_TIM_IC_CaptureCallback>
 8007f30:	e005      	b.n	8007f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fd6c 	bl	8008a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fd7d 	bl	8008a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b08      	cmp	r3, #8
 8007f50:	d122      	bne.n	8007f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d11b      	bne.n	8007f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f06f 0208 	mvn.w	r2, #8
 8007f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2204      	movs	r2, #4
 8007f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fd50 	bl	8008a24 <HAL_TIM_IC_CaptureCallback>
 8007f84:	e005      	b.n	8007f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fd42 	bl	8008a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fd53 	bl	8008a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	f003 0310 	and.w	r3, r3, #16
 8007fa2:	2b10      	cmp	r3, #16
 8007fa4:	d122      	bne.n	8007fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f003 0310 	and.w	r3, r3, #16
 8007fb0:	2b10      	cmp	r3, #16
 8007fb2:	d11b      	bne.n	8007fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f06f 0210 	mvn.w	r2, #16
 8007fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fd26 	bl	8008a24 <HAL_TIM_IC_CaptureCallback>
 8007fd8:	e005      	b.n	8007fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fd18 	bl	8008a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fd29 	bl	8008a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d10e      	bne.n	8008018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b01      	cmp	r3, #1
 8008006:	d107      	bne.n	8008018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f06f 0201 	mvn.w	r2, #1
 8008010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7f9 fed2 	bl	8001dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008022:	2b80      	cmp	r3, #128	; 0x80
 8008024:	d10e      	bne.n	8008044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008030:	2b80      	cmp	r3, #128	; 0x80
 8008032:	d107      	bne.n	8008044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800803c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 f9c6 	bl	80093d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804e:	2b40      	cmp	r3, #64	; 0x40
 8008050:	d10e      	bne.n	8008070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805c:	2b40      	cmp	r3, #64	; 0x40
 800805e:	d107      	bne.n	8008070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fcee 	bl	8008a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b20      	cmp	r3, #32
 800807c:	d10e      	bne.n	800809c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	2b20      	cmp	r3, #32
 800808a:	d107      	bne.n	800809c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0220 	mvn.w	r2, #32
 8008094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 f990 	bl	80093bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d010      	beq.n	80080dc <HAL_TIM_PWM_ConfigChannel+0x38>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b04      	cmp	r3, #4
 80080be:	d00d      	beq.n	80080dc <HAL_TIM_PWM_ConfigChannel+0x38>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b08      	cmp	r3, #8
 80080c4:	d00a      	beq.n	80080dc <HAL_TIM_PWM_ConfigChannel+0x38>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b0c      	cmp	r3, #12
 80080ca:	d007      	beq.n	80080dc <HAL_TIM_PWM_ConfigChannel+0x38>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b3c      	cmp	r3, #60	; 0x3c
 80080d0:	d004      	beq.n	80080dc <HAL_TIM_PWM_ConfigChannel+0x38>
 80080d2:	f241 0177 	movw	r1, #4215	; 0x1077
 80080d6:	4893      	ldr	r0, [pc, #588]	; (8008324 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80080d8:	f7f9 fe87 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b60      	cmp	r3, #96	; 0x60
 80080e2:	d008      	beq.n	80080f6 <HAL_TIM_PWM_ConfigChannel+0x52>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b70      	cmp	r3, #112	; 0x70
 80080ea:	d004      	beq.n	80080f6 <HAL_TIM_PWM_ConfigChannel+0x52>
 80080ec:	f241 0178 	movw	r1, #4216	; 0x1078
 80080f0:	488c      	ldr	r0, [pc, #560]	; (8008324 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80080f2:	f7f9 fe7a 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d008      	beq.n	8008110 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d004      	beq.n	8008110 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8008106:	f241 0179 	movw	r1, #4217	; 0x1079
 800810a:	4886      	ldr	r0, [pc, #536]	; (8008324 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800810c:	f7f9 fe6d 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d008      	beq.n	800812a <HAL_TIM_PWM_ConfigChannel+0x86>
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	2b04      	cmp	r3, #4
 800811e:	d004      	beq.n	800812a <HAL_TIM_PWM_ConfigChannel+0x86>
 8008120:	f241 017a 	movw	r1, #4218	; 0x107a
 8008124:	487f      	ldr	r0, [pc, #508]	; (8008324 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008126:	f7f9 fe60 	bl	8001dea <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008130:	2b01      	cmp	r3, #1
 8008132:	d101      	bne.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008134:	2302      	movs	r3, #2
 8008136:	e14c      	b.n	80083d2 <HAL_TIM_PWM_ConfigChannel+0x32e>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b0c      	cmp	r3, #12
 8008144:	f200 813d 	bhi.w	80083c2 <HAL_TIM_PWM_ConfigChannel+0x31e>
 8008148:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800814a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814e:	bf00      	nop
 8008150:	08008185 	.word	0x08008185
 8008154:	080083c3 	.word	0x080083c3
 8008158:	080083c3 	.word	0x080083c3
 800815c:	080083c3 	.word	0x080083c3
 8008160:	0800821f 	.word	0x0800821f
 8008164:	080083c3 	.word	0x080083c3
 8008168:	080083c3 	.word	0x080083c3
 800816c:	080083c3 	.word	0x080083c3
 8008170:	080082a7 	.word	0x080082a7
 8008174:	080083c3 	.word	0x080083c3
 8008178:	080083c3 	.word	0x080083c3
 800817c:	080083c3 	.word	0x080083c3
 8008180:	08008345 	.word	0x08008345
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a67      	ldr	r2, [pc, #412]	; (8008328 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d027      	beq.n	80081de <HAL_TIM_PWM_ConfigChannel+0x13a>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008196:	d022      	beq.n	80081de <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a63      	ldr	r2, [pc, #396]	; (800832c <HAL_TIM_PWM_ConfigChannel+0x288>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d01d      	beq.n	80081de <HAL_TIM_PWM_ConfigChannel+0x13a>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a62      	ldr	r2, [pc, #392]	; (8008330 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d018      	beq.n	80081de <HAL_TIM_PWM_ConfigChannel+0x13a>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a60      	ldr	r2, [pc, #384]	; (8008334 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d013      	beq.n	80081de <HAL_TIM_PWM_ConfigChannel+0x13a>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a5f      	ldr	r2, [pc, #380]	; (8008338 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d00e      	beq.n	80081de <HAL_TIM_PWM_ConfigChannel+0x13a>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a5d      	ldr	r2, [pc, #372]	; (800833c <HAL_TIM_PWM_ConfigChannel+0x298>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d009      	beq.n	80081de <HAL_TIM_PWM_ConfigChannel+0x13a>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a5c      	ldr	r2, [pc, #368]	; (8008340 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d004      	beq.n	80081de <HAL_TIM_PWM_ConfigChannel+0x13a>
 80081d4:	f241 0184 	movw	r1, #4228	; 0x1084
 80081d8:	4852      	ldr	r0, [pc, #328]	; (8008324 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80081da:	f7f9 fe06 	bl	8001dea <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68b9      	ldr	r1, [r7, #8]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 fd0f 	bl	8008c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699a      	ldr	r2, [r3, #24]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f042 0208 	orr.w	r2, r2, #8
 80081f8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	699a      	ldr	r2, [r3, #24]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0204 	bic.w	r2, r2, #4
 8008208:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6999      	ldr	r1, [r3, #24]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	430a      	orrs	r2, r1
 800821a:	619a      	str	r2, [r3, #24]
      break;
 800821c:	e0d4      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a41      	ldr	r2, [pc, #260]	; (8008328 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d01d      	beq.n	8008264 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008230:	d018      	beq.n	8008264 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a3d      	ldr	r2, [pc, #244]	; (800832c <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d013      	beq.n	8008264 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a3b      	ldr	r2, [pc, #236]	; (8008330 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d00e      	beq.n	8008264 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a3a      	ldr	r2, [pc, #232]	; (8008334 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d009      	beq.n	8008264 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a38      	ldr	r2, [pc, #224]	; (8008338 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d004      	beq.n	8008264 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800825a:	f241 0195 	movw	r1, #4245	; 0x1095
 800825e:	4831      	ldr	r0, [pc, #196]	; (8008324 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008260:	f7f9 fdc3 	bl	8001dea <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68b9      	ldr	r1, [r7, #8]
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fd5c 	bl	8008d28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800827e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699a      	ldr	r2, [r3, #24]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800828e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6999      	ldr	r1, [r3, #24]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	021a      	lsls	r2, r3, #8
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	619a      	str	r2, [r3, #24]
      break;
 80082a4:	e090      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a1f      	ldr	r2, [pc, #124]	; (8008328 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d018      	beq.n	80082e2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b8:	d013      	beq.n	80082e2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a1b      	ldr	r2, [pc, #108]	; (800832c <HAL_TIM_PWM_ConfigChannel+0x288>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d00e      	beq.n	80082e2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a19      	ldr	r2, [pc, #100]	; (8008330 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d009      	beq.n	80082e2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a18      	ldr	r2, [pc, #96]	; (8008334 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d004      	beq.n	80082e2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 80082d8:	f241 01a6 	movw	r1, #4262	; 0x10a6
 80082dc:	4811      	ldr	r0, [pc, #68]	; (8008324 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80082de:	f7f9 fd84 	bl	8001dea <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fdb1 	bl	8008e50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69da      	ldr	r2, [r3, #28]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f042 0208 	orr.w	r2, r2, #8
 80082fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	69da      	ldr	r2, [r3, #28]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0204 	bic.w	r2, r2, #4
 800830c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69d9      	ldr	r1, [r3, #28]
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	61da      	str	r2, [r3, #28]
      break;
 8008320:	e052      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x324>
 8008322:	bf00      	nop
 8008324:	0801173c 	.word	0x0801173c
 8008328:	40010000 	.word	0x40010000
 800832c:	40000400 	.word	0x40000400
 8008330:	40000800 	.word	0x40000800
 8008334:	40000c00 	.word	0x40000c00
 8008338:	40014000 	.word	0x40014000
 800833c:	40014400 	.word	0x40014400
 8008340:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a24      	ldr	r2, [pc, #144]	; (80083dc <HAL_TIM_PWM_ConfigChannel+0x338>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d018      	beq.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008356:	d013      	beq.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a20      	ldr	r2, [pc, #128]	; (80083e0 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00e      	beq.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a1f      	ldr	r2, [pc, #124]	; (80083e4 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d009      	beq.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a1d      	ldr	r2, [pc, #116]	; (80083e8 <HAL_TIM_PWM_ConfigChannel+0x344>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d004      	beq.n	8008380 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008376:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800837a:	481c      	ldr	r0, [pc, #112]	; (80083ec <HAL_TIM_PWM_ConfigChannel+0x348>)
 800837c:	f7f9 fd35 	bl	8001dea <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68b9      	ldr	r1, [r7, #8]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fdf6 	bl	8008f78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	69da      	ldr	r2, [r3, #28]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800839a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	69da      	ldr	r2, [r3, #28]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	69d9      	ldr	r1, [r3, #28]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	021a      	lsls	r2, r3, #8
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	430a      	orrs	r2, r1
 80083be:	61da      	str	r2, [r3, #28]
      break;
 80083c0:	e002      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	75fb      	strb	r3, [r7, #23]
      break;
 80083c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	40010000 	.word	0x40010000
 80083e0:	40000400 	.word	0x40000400
 80083e4:	40000800 	.word	0x40000800
 80083e8:	40000c00 	.word	0x40000c00
 80083ec:	0801173c 	.word	0x0801173c

080083f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_TIM_ConfigClockSource+0x1c>
 8008408:	2302      	movs	r3, #2
 800840a:	e2f0      	b.n	80089ee <HAL_TIM_ConfigClockSource+0x5fe>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008424:	d029      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x8a>
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b70      	cmp	r3, #112	; 0x70
 800842c:	d025      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x8a>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008436:	d020      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x8a>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b40      	cmp	r3, #64	; 0x40
 800843e:	d01c      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x8a>
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b50      	cmp	r3, #80	; 0x50
 8008446:	d018      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x8a>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b60      	cmp	r3, #96	; 0x60
 800844e:	d014      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x8a>
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d010      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x8a>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b10      	cmp	r3, #16
 800845e:	d00c      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x8a>
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b20      	cmp	r3, #32
 8008466:	d008      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x8a>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b30      	cmp	r3, #48	; 0x30
 800846e:	d004      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x8a>
 8008470:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8008474:	487c      	ldr	r0, [pc, #496]	; (8008668 <HAL_TIM_ConfigClockSource+0x278>)
 8008476:	f7f9 fcb8 	bl	8001dea <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008488:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008490:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a2:	f000 80f1 	beq.w	8008688 <HAL_TIM_ConfigClockSource+0x298>
 80084a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084aa:	f200 8293 	bhi.w	80089d4 <HAL_TIM_ConfigClockSource+0x5e4>
 80084ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b2:	d02d      	beq.n	8008510 <HAL_TIM_ConfigClockSource+0x120>
 80084b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b8:	f200 828c 	bhi.w	80089d4 <HAL_TIM_ConfigClockSource+0x5e4>
 80084bc:	2b70      	cmp	r3, #112	; 0x70
 80084be:	d05d      	beq.n	800857c <HAL_TIM_ConfigClockSource+0x18c>
 80084c0:	2b70      	cmp	r3, #112	; 0x70
 80084c2:	f200 8287 	bhi.w	80089d4 <HAL_TIM_ConfigClockSource+0x5e4>
 80084c6:	2b60      	cmp	r3, #96	; 0x60
 80084c8:	f000 81a0 	beq.w	800880c <HAL_TIM_ConfigClockSource+0x41c>
 80084cc:	2b60      	cmp	r3, #96	; 0x60
 80084ce:	f200 8281 	bhi.w	80089d4 <HAL_TIM_ConfigClockSource+0x5e4>
 80084d2:	2b50      	cmp	r3, #80	; 0x50
 80084d4:	f000 8144 	beq.w	8008760 <HAL_TIM_ConfigClockSource+0x370>
 80084d8:	2b50      	cmp	r3, #80	; 0x50
 80084da:	f200 827b 	bhi.w	80089d4 <HAL_TIM_ConfigClockSource+0x5e4>
 80084de:	2b40      	cmp	r3, #64	; 0x40
 80084e0:	f000 81f6 	beq.w	80088d0 <HAL_TIM_ConfigClockSource+0x4e0>
 80084e4:	2b40      	cmp	r3, #64	; 0x40
 80084e6:	f200 8275 	bhi.w	80089d4 <HAL_TIM_ConfigClockSource+0x5e4>
 80084ea:	2b30      	cmp	r3, #48	; 0x30
 80084ec:	f000 8246 	beq.w	800897c <HAL_TIM_ConfigClockSource+0x58c>
 80084f0:	2b30      	cmp	r3, #48	; 0x30
 80084f2:	f200 826f 	bhi.w	80089d4 <HAL_TIM_ConfigClockSource+0x5e4>
 80084f6:	2b20      	cmp	r3, #32
 80084f8:	f000 8240 	beq.w	800897c <HAL_TIM_ConfigClockSource+0x58c>
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	f200 8269 	bhi.w	80089d4 <HAL_TIM_ConfigClockSource+0x5e4>
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 823a 	beq.w	800897c <HAL_TIM_ConfigClockSource+0x58c>
 8008508:	2b10      	cmp	r3, #16
 800850a:	f000 8237 	beq.w	800897c <HAL_TIM_ConfigClockSource+0x58c>
 800850e:	e261      	b.n	80089d4 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a55      	ldr	r2, [pc, #340]	; (800866c <HAL_TIM_ConfigClockSource+0x27c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	f000 825f 	beq.w	80089da <HAL_TIM_ConfigClockSource+0x5ea>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008524:	f000 8259 	beq.w	80089da <HAL_TIM_ConfigClockSource+0x5ea>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a50      	ldr	r2, [pc, #320]	; (8008670 <HAL_TIM_ConfigClockSource+0x280>)
 800852e:	4293      	cmp	r3, r2
 8008530:	f000 8253 	beq.w	80089da <HAL_TIM_ConfigClockSource+0x5ea>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a4e      	ldr	r2, [pc, #312]	; (8008674 <HAL_TIM_ConfigClockSource+0x284>)
 800853a:	4293      	cmp	r3, r2
 800853c:	f000 824d 	beq.w	80089da <HAL_TIM_ConfigClockSource+0x5ea>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a4c      	ldr	r2, [pc, #304]	; (8008678 <HAL_TIM_ConfigClockSource+0x288>)
 8008546:	4293      	cmp	r3, r2
 8008548:	f000 8247 	beq.w	80089da <HAL_TIM_ConfigClockSource+0x5ea>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a4a      	ldr	r2, [pc, #296]	; (800867c <HAL_TIM_ConfigClockSource+0x28c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	f000 8241 	beq.w	80089da <HAL_TIM_ConfigClockSource+0x5ea>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a48      	ldr	r2, [pc, #288]	; (8008680 <HAL_TIM_ConfigClockSource+0x290>)
 800855e:	4293      	cmp	r3, r2
 8008560:	f000 823b 	beq.w	80089da <HAL_TIM_ConfigClockSource+0x5ea>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a46      	ldr	r2, [pc, #280]	; (8008684 <HAL_TIM_ConfigClockSource+0x294>)
 800856a:	4293      	cmp	r3, r2
 800856c:	f000 8235 	beq.w	80089da <HAL_TIM_ConfigClockSource+0x5ea>
 8008570:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8008574:	483c      	ldr	r0, [pc, #240]	; (8008668 <HAL_TIM_ConfigClockSource+0x278>)
 8008576:	f7f9 fc38 	bl	8001dea <assert_failed>
      break;
 800857a:	e22e      	b.n	80089da <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a3a      	ldr	r2, [pc, #232]	; (800866c <HAL_TIM_ConfigClockSource+0x27c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d01d      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0x1d2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858e:	d018      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0x1d2>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a36      	ldr	r2, [pc, #216]	; (8008670 <HAL_TIM_ConfigClockSource+0x280>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d013      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0x1d2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a35      	ldr	r2, [pc, #212]	; (8008674 <HAL_TIM_ConfigClockSource+0x284>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00e      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0x1d2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a33      	ldr	r2, [pc, #204]	; (8008678 <HAL_TIM_ConfigClockSource+0x288>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d009      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0x1d2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a32      	ldr	r2, [pc, #200]	; (800867c <HAL_TIM_ConfigClockSource+0x28c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d004      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0x1d2>
 80085b8:	f241 41ca 	movw	r1, #5322	; 0x14ca
 80085bc:	482a      	ldr	r0, [pc, #168]	; (8008668 <HAL_TIM_ConfigClockSource+0x278>)
 80085be:	f7f9 fc14 	bl	8001dea <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d013      	beq.n	80085f2 <HAL_TIM_ConfigClockSource+0x202>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d2:	d00e      	beq.n	80085f2 <HAL_TIM_ConfigClockSource+0x202>
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085dc:	d009      	beq.n	80085f2 <HAL_TIM_ConfigClockSource+0x202>
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085e6:	d004      	beq.n	80085f2 <HAL_TIM_ConfigClockSource+0x202>
 80085e8:	f241 41cd 	movw	r1, #5325	; 0x14cd
 80085ec:	481e      	ldr	r0, [pc, #120]	; (8008668 <HAL_TIM_ConfigClockSource+0x278>)
 80085ee:	f7f9 fbfc 	bl	8001dea <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085fa:	d014      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x236>
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d010      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x236>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00c      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x236>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2b02      	cmp	r3, #2
 8008612:	d008      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x236>
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	2b0a      	cmp	r3, #10
 800861a:	d004      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x236>
 800861c:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8008620:	4811      	ldr	r0, [pc, #68]	; (8008668 <HAL_TIM_ConfigClockSource+0x278>)
 8008622:	f7f9 fbe2 	bl	8001dea <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	2b0f      	cmp	r3, #15
 800862c:	d904      	bls.n	8008638 <HAL_TIM_ConfigClockSource+0x248>
 800862e:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8008632:	480d      	ldr	r0, [pc, #52]	; (8008668 <HAL_TIM_ConfigClockSource+0x278>)
 8008634:	f7f9 fbd9 	bl	8001dea <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6818      	ldr	r0, [r3, #0]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	6899      	ldr	r1, [r3, #8]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	f000 fd6e 	bl	8009128 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800865a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	609a      	str	r2, [r3, #8]
      break;
 8008664:	e1ba      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x5ec>
 8008666:	bf00      	nop
 8008668:	0801173c 	.word	0x0801173c
 800866c:	40010000 	.word	0x40010000
 8008670:	40000400 	.word	0x40000400
 8008674:	40000800 	.word	0x40000800
 8008678:	40000c00 	.word	0x40000c00
 800867c:	40014000 	.word	0x40014000
 8008680:	40014400 	.word	0x40014400
 8008684:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a8a      	ldr	r2, [pc, #552]	; (80088b8 <HAL_TIM_ConfigClockSource+0x4c8>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d018      	beq.n	80086c4 <HAL_TIM_ConfigClockSource+0x2d4>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869a:	d013      	beq.n	80086c4 <HAL_TIM_ConfigClockSource+0x2d4>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a86      	ldr	r2, [pc, #536]	; (80088bc <HAL_TIM_ConfigClockSource+0x4cc>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d00e      	beq.n	80086c4 <HAL_TIM_ConfigClockSource+0x2d4>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a85      	ldr	r2, [pc, #532]	; (80088c0 <HAL_TIM_ConfigClockSource+0x4d0>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d009      	beq.n	80086c4 <HAL_TIM_ConfigClockSource+0x2d4>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a83      	ldr	r2, [pc, #524]	; (80088c4 <HAL_TIM_ConfigClockSource+0x4d4>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d004      	beq.n	80086c4 <HAL_TIM_ConfigClockSource+0x2d4>
 80086ba:	f241 41e2 	movw	r1, #5346	; 0x14e2
 80086be:	4882      	ldr	r0, [pc, #520]	; (80088c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80086c0:	f7f9 fb93 	bl	8001dea <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d013      	beq.n	80086f4 <HAL_TIM_ConfigClockSource+0x304>
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d4:	d00e      	beq.n	80086f4 <HAL_TIM_ConfigClockSource+0x304>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086de:	d009      	beq.n	80086f4 <HAL_TIM_ConfigClockSource+0x304>
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086e8:	d004      	beq.n	80086f4 <HAL_TIM_ConfigClockSource+0x304>
 80086ea:	f241 41e5 	movw	r1, #5349	; 0x14e5
 80086ee:	4876      	ldr	r0, [pc, #472]	; (80088c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80086f0:	f7f9 fb7b 	bl	8001dea <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086fc:	d014      	beq.n	8008728 <HAL_TIM_ConfigClockSource+0x338>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d010      	beq.n	8008728 <HAL_TIM_ConfigClockSource+0x338>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00c      	beq.n	8008728 <HAL_TIM_ConfigClockSource+0x338>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2b02      	cmp	r3, #2
 8008714:	d008      	beq.n	8008728 <HAL_TIM_ConfigClockSource+0x338>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	2b0a      	cmp	r3, #10
 800871c:	d004      	beq.n	8008728 <HAL_TIM_ConfigClockSource+0x338>
 800871e:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8008722:	4869      	ldr	r0, [pc, #420]	; (80088c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 8008724:	f7f9 fb61 	bl	8001dea <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	2b0f      	cmp	r3, #15
 800872e:	d904      	bls.n	800873a <HAL_TIM_ConfigClockSource+0x34a>
 8008730:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8008734:	4864      	ldr	r0, [pc, #400]	; (80088c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 8008736:	f7f9 fb58 	bl	8001dea <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	6899      	ldr	r1, [r3, #8]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	f000 fced 	bl	8009128 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800875c:	609a      	str	r2, [r3, #8]
      break;
 800875e:	e13d      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a54      	ldr	r2, [pc, #336]	; (80088b8 <HAL_TIM_ConfigClockSource+0x4c8>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d01d      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x3b6>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008772:	d018      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x3b6>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a50      	ldr	r2, [pc, #320]	; (80088bc <HAL_TIM_ConfigClockSource+0x4cc>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d013      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x3b6>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a4f      	ldr	r2, [pc, #316]	; (80088c0 <HAL_TIM_ConfigClockSource+0x4d0>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d00e      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x3b6>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a4d      	ldr	r2, [pc, #308]	; (80088c4 <HAL_TIM_ConfigClockSource+0x4d4>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d009      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x3b6>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a4d      	ldr	r2, [pc, #308]	; (80088cc <HAL_TIM_ConfigClockSource+0x4dc>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d004      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x3b6>
 800879c:	f241 41f6 	movw	r1, #5366	; 0x14f6
 80087a0:	4849      	ldr	r0, [pc, #292]	; (80088c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80087a2:	f7f9 fb22 	bl	8001dea <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ae:	d014      	beq.n	80087da <HAL_TIM_ConfigClockSource+0x3ea>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d010      	beq.n	80087da <HAL_TIM_ConfigClockSource+0x3ea>
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00c      	beq.n	80087da <HAL_TIM_ConfigClockSource+0x3ea>
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d008      	beq.n	80087da <HAL_TIM_ConfigClockSource+0x3ea>
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	2b0a      	cmp	r3, #10
 80087ce:	d004      	beq.n	80087da <HAL_TIM_ConfigClockSource+0x3ea>
 80087d0:	f241 41f9 	movw	r1, #5369	; 0x14f9
 80087d4:	483c      	ldr	r0, [pc, #240]	; (80088c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80087d6:	f7f9 fb08 	bl	8001dea <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	2b0f      	cmp	r3, #15
 80087e0:	d904      	bls.n	80087ec <HAL_TIM_ConfigClockSource+0x3fc>
 80087e2:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80087e6:	4838      	ldr	r0, [pc, #224]	; (80088c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80087e8:	f7f9 faff 	bl	8001dea <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6818      	ldr	r0, [r3, #0]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	6859      	ldr	r1, [r3, #4]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	461a      	mov	r2, r3
 80087fa:	f000 fc1b 	bl	8009034 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2150      	movs	r1, #80	; 0x50
 8008804:	4618      	mov	r0, r3
 8008806:	f000 fc74 	bl	80090f2 <TIM_ITRx_SetConfig>
      break;
 800880a:	e0e7      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a29      	ldr	r2, [pc, #164]	; (80088b8 <HAL_TIM_ConfigClockSource+0x4c8>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d01d      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x462>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881e:	d018      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x462>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a25      	ldr	r2, [pc, #148]	; (80088bc <HAL_TIM_ConfigClockSource+0x4cc>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d013      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x462>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a24      	ldr	r2, [pc, #144]	; (80088c0 <HAL_TIM_ConfigClockSource+0x4d0>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d00e      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x462>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a22      	ldr	r2, [pc, #136]	; (80088c4 <HAL_TIM_ConfigClockSource+0x4d4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d009      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x462>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a22      	ldr	r2, [pc, #136]	; (80088cc <HAL_TIM_ConfigClockSource+0x4dc>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d004      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x462>
 8008848:	f241 5106 	movw	r1, #5382	; 0x1506
 800884c:	481e      	ldr	r0, [pc, #120]	; (80088c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800884e:	f7f9 facc 	bl	8001dea <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800885a:	d014      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x496>
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d010      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x496>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00c      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x496>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d008      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x496>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2b0a      	cmp	r3, #10
 800887a:	d004      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0x496>
 800887c:	f241 5109 	movw	r1, #5385	; 0x1509
 8008880:	4811      	ldr	r0, [pc, #68]	; (80088c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 8008882:	f7f9 fab2 	bl	8001dea <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	2b0f      	cmp	r3, #15
 800888c:	d904      	bls.n	8008898 <HAL_TIM_ConfigClockSource+0x4a8>
 800888e:	f241 510a 	movw	r1, #5386	; 0x150a
 8008892:	480d      	ldr	r0, [pc, #52]	; (80088c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 8008894:	f7f9 faa9 	bl	8001dea <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6818      	ldr	r0, [r3, #0]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	6859      	ldr	r1, [r3, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	461a      	mov	r2, r3
 80088a6:	f000 fbf4 	bl	8009092 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2160      	movs	r1, #96	; 0x60
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 fc1e 	bl	80090f2 <TIM_ITRx_SetConfig>
      break;
 80088b6:	e091      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x5ec>
 80088b8:	40010000 	.word	0x40010000
 80088bc:	40000400 	.word	0x40000400
 80088c0:	40000800 	.word	0x40000800
 80088c4:	40000c00 	.word	0x40000c00
 80088c8:	0801173c 	.word	0x0801173c
 80088cc:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a48      	ldr	r2, [pc, #288]	; (80089f8 <HAL_TIM_ConfigClockSource+0x608>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d01d      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x526>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088e2:	d018      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x526>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a44      	ldr	r2, [pc, #272]	; (80089fc <HAL_TIM_ConfigClockSource+0x60c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d013      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x526>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a43      	ldr	r2, [pc, #268]	; (8008a00 <HAL_TIM_ConfigClockSource+0x610>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d00e      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x526>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a41      	ldr	r2, [pc, #260]	; (8008a04 <HAL_TIM_ConfigClockSource+0x614>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d009      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x526>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a40      	ldr	r2, [pc, #256]	; (8008a08 <HAL_TIM_ConfigClockSource+0x618>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d004      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x526>
 800890c:	f241 5116 	movw	r1, #5398	; 0x1516
 8008910:	483e      	ldr	r0, [pc, #248]	; (8008a0c <HAL_TIM_ConfigClockSource+0x61c>)
 8008912:	f7f9 fa6a 	bl	8001dea <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800891e:	d014      	beq.n	800894a <HAL_TIM_ConfigClockSource+0x55a>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d010      	beq.n	800894a <HAL_TIM_ConfigClockSource+0x55a>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00c      	beq.n	800894a <HAL_TIM_ConfigClockSource+0x55a>
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d008      	beq.n	800894a <HAL_TIM_ConfigClockSource+0x55a>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	2b0a      	cmp	r3, #10
 800893e:	d004      	beq.n	800894a <HAL_TIM_ConfigClockSource+0x55a>
 8008940:	f241 5119 	movw	r1, #5401	; 0x1519
 8008944:	4831      	ldr	r0, [pc, #196]	; (8008a0c <HAL_TIM_ConfigClockSource+0x61c>)
 8008946:	f7f9 fa50 	bl	8001dea <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	2b0f      	cmp	r3, #15
 8008950:	d904      	bls.n	800895c <HAL_TIM_ConfigClockSource+0x56c>
 8008952:	f241 511a 	movw	r1, #5402	; 0x151a
 8008956:	482d      	ldr	r0, [pc, #180]	; (8008a0c <HAL_TIM_ConfigClockSource+0x61c>)
 8008958:	f7f9 fa47 	bl	8001dea <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	6859      	ldr	r1, [r3, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	461a      	mov	r2, r3
 800896a:	f000 fb63 	bl	8009034 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2140      	movs	r1, #64	; 0x40
 8008974:	4618      	mov	r0, r3
 8008976:	f000 fbbc 	bl	80090f2 <TIM_ITRx_SetConfig>
      break;
 800897a:	e02f      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a1d      	ldr	r2, [pc, #116]	; (80089f8 <HAL_TIM_ConfigClockSource+0x608>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d01d      	beq.n	80089c2 <HAL_TIM_ConfigClockSource+0x5d2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898e:	d018      	beq.n	80089c2 <HAL_TIM_ConfigClockSource+0x5d2>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a19      	ldr	r2, [pc, #100]	; (80089fc <HAL_TIM_ConfigClockSource+0x60c>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d013      	beq.n	80089c2 <HAL_TIM_ConfigClockSource+0x5d2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a18      	ldr	r2, [pc, #96]	; (8008a00 <HAL_TIM_ConfigClockSource+0x610>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00e      	beq.n	80089c2 <HAL_TIM_ConfigClockSource+0x5d2>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a16      	ldr	r2, [pc, #88]	; (8008a04 <HAL_TIM_ConfigClockSource+0x614>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d009      	beq.n	80089c2 <HAL_TIM_ConfigClockSource+0x5d2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a15      	ldr	r2, [pc, #84]	; (8008a08 <HAL_TIM_ConfigClockSource+0x618>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d004      	beq.n	80089c2 <HAL_TIM_ConfigClockSource+0x5d2>
 80089b8:	f241 5129 	movw	r1, #5417	; 0x1529
 80089bc:	4813      	ldr	r0, [pc, #76]	; (8008a0c <HAL_TIM_ConfigClockSource+0x61c>)
 80089be:	f7f9 fa14 	bl	8001dea <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4619      	mov	r1, r3
 80089cc:	4610      	mov	r0, r2
 80089ce:	f000 fb90 	bl	80090f2 <TIM_ITRx_SetConfig>
      break;
 80089d2:	e003      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	73fb      	strb	r3, [r7, #15]
      break;
 80089d8:	e000      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 80089da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	40010000 	.word	0x40010000
 80089fc:	40000400 	.word	0x40000400
 8008a00:	40000800 	.word	0x40000800
 8008a04:	40000c00 	.word	0x40000c00
 8008a08:	40014000 	.word	0x40014000
 8008a0c:	0801173c 	.word	0x0801173c

08008a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a80:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d107      	bne.n	8008a9c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a9a:	e02a      	b.n	8008af2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d107      	bne.n	8008ab6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ab4:	e01d      	b.n	8008af2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d107      	bne.n	8008ad0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2204      	movs	r2, #4
 8008ac4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ace:	e010      	b.n	8008af2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d107      	bne.n	8008aea <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2208      	movs	r2, #8
 8008ade:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ae8:	e003      	b.n	8008af2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f7ff ffb4 	bl	8008a60 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	771a      	strb	r2, [r3, #28]
}
 8008afe:	bf00      	nop
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a34      	ldr	r2, [pc, #208]	; (8008bec <TIM_Base_SetConfig+0xe4>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d00f      	beq.n	8008b40 <TIM_Base_SetConfig+0x38>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b26:	d00b      	beq.n	8008b40 <TIM_Base_SetConfig+0x38>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a31      	ldr	r2, [pc, #196]	; (8008bf0 <TIM_Base_SetConfig+0xe8>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d007      	beq.n	8008b40 <TIM_Base_SetConfig+0x38>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a30      	ldr	r2, [pc, #192]	; (8008bf4 <TIM_Base_SetConfig+0xec>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d003      	beq.n	8008b40 <TIM_Base_SetConfig+0x38>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a2f      	ldr	r2, [pc, #188]	; (8008bf8 <TIM_Base_SetConfig+0xf0>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d108      	bne.n	8008b52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a25      	ldr	r2, [pc, #148]	; (8008bec <TIM_Base_SetConfig+0xe4>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d01b      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b60:	d017      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a22      	ldr	r2, [pc, #136]	; (8008bf0 <TIM_Base_SetConfig+0xe8>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d013      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a21      	ldr	r2, [pc, #132]	; (8008bf4 <TIM_Base_SetConfig+0xec>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d00f      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a20      	ldr	r2, [pc, #128]	; (8008bf8 <TIM_Base_SetConfig+0xf0>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d00b      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a1f      	ldr	r2, [pc, #124]	; (8008bfc <TIM_Base_SetConfig+0xf4>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d007      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a1e      	ldr	r2, [pc, #120]	; (8008c00 <TIM_Base_SetConfig+0xf8>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d003      	beq.n	8008b92 <TIM_Base_SetConfig+0x8a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <TIM_Base_SetConfig+0xfc>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d108      	bne.n	8008ba4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a08      	ldr	r2, [pc, #32]	; (8008bec <TIM_Base_SetConfig+0xe4>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d103      	bne.n	8008bd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	615a      	str	r2, [r3, #20]
}
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	40010000 	.word	0x40010000
 8008bf0:	40000400 	.word	0x40000400
 8008bf4:	40000800 	.word	0x40000800
 8008bf8:	40000c00 	.word	0x40000c00
 8008bfc:	40014000 	.word	0x40014000
 8008c00:	40014400 	.word	0x40014400
 8008c04:	40014800 	.word	0x40014800

08008c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	f023 0201 	bic.w	r2, r3, #1
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 0303 	bic.w	r3, r3, #3
 8008c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f023 0302 	bic.w	r3, r3, #2
 8008c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a30      	ldr	r2, [pc, #192]	; (8008d20 <TIM_OC1_SetConfig+0x118>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d119      	bne.n	8008c98 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d008      	beq.n	8008c7e <TIM_OC1_SetConfig+0x76>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d004      	beq.n	8008c7e <TIM_OC1_SetConfig+0x76>
 8008c74:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 8008c78:	482a      	ldr	r0, [pc, #168]	; (8008d24 <TIM_OC1_SetConfig+0x11c>)
 8008c7a:	f7f9 f8b6 	bl	8001dea <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f023 0308 	bic.w	r3, r3, #8
 8008c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f023 0304 	bic.w	r3, r3, #4
 8008c96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a21      	ldr	r2, [pc, #132]	; (8008d20 <TIM_OC1_SetConfig+0x118>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d12d      	bne.n	8008cfc <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ca8:	d008      	beq.n	8008cbc <TIM_OC1_SetConfig+0xb4>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d004      	beq.n	8008cbc <TIM_OC1_SetConfig+0xb4>
 8008cb2:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 8008cb6:	481b      	ldr	r0, [pc, #108]	; (8008d24 <TIM_OC1_SetConfig+0x11c>)
 8008cb8:	f7f9 f897 	bl	8001dea <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc4:	d008      	beq.n	8008cd8 <TIM_OC1_SetConfig+0xd0>
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d004      	beq.n	8008cd8 <TIM_OC1_SetConfig+0xd0>
 8008cce:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 8008cd2:	4814      	ldr	r0, [pc, #80]	; (8008d24 <TIM_OC1_SetConfig+0x11c>)
 8008cd4:	f7f9 f889 	bl	8001dea <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	693a      	ldr	r2, [r7, #16]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	621a      	str	r2, [r3, #32]
}
 8008d16:	bf00      	nop
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	40010000 	.word	0x40010000
 8008d24:	0801173c 	.word	0x0801173c

08008d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	f023 0210 	bic.w	r2, r3, #16
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	021b      	lsls	r3, r3, #8
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f023 0320 	bic.w	r3, r3, #32
 8008d72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	011b      	lsls	r3, r3, #4
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a31      	ldr	r2, [pc, #196]	; (8008e48 <TIM_OC2_SetConfig+0x120>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d11a      	bne.n	8008dbe <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d008      	beq.n	8008da2 <TIM_OC2_SetConfig+0x7a>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	2b08      	cmp	r3, #8
 8008d96:	d004      	beq.n	8008da2 <TIM_OC2_SetConfig+0x7a>
 8008d98:	f641 3112 	movw	r1, #6930	; 0x1b12
 8008d9c:	482b      	ldr	r0, [pc, #172]	; (8008e4c <TIM_OC2_SetConfig+0x124>)
 8008d9e:	f7f9 f824 	bl	8001dea <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dbc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a21      	ldr	r2, [pc, #132]	; (8008e48 <TIM_OC2_SetConfig+0x120>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d12f      	bne.n	8008e26 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dce:	d008      	beq.n	8008de2 <TIM_OC2_SetConfig+0xba>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d004      	beq.n	8008de2 <TIM_OC2_SetConfig+0xba>
 8008dd8:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8008ddc:	481b      	ldr	r0, [pc, #108]	; (8008e4c <TIM_OC2_SetConfig+0x124>)
 8008dde:	f7f9 f804 	bl	8001dea <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dea:	d008      	beq.n	8008dfe <TIM_OC2_SetConfig+0xd6>
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d004      	beq.n	8008dfe <TIM_OC2_SetConfig+0xd6>
 8008df4:	f641 3121 	movw	r1, #6945	; 0x1b21
 8008df8:	4814      	ldr	r0, [pc, #80]	; (8008e4c <TIM_OC2_SetConfig+0x124>)
 8008dfa:	f7f8 fff6 	bl	8001dea <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	621a      	str	r2, [r3, #32]
}
 8008e40:	bf00      	nop
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	40010000 	.word	0x40010000
 8008e4c:	0801173c 	.word	0x0801173c

08008e50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f023 0303 	bic.w	r3, r3, #3
 8008e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	021b      	lsls	r3, r3, #8
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a31      	ldr	r2, [pc, #196]	; (8008f70 <TIM_OC3_SetConfig+0x120>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d11a      	bne.n	8008ee4 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d008      	beq.n	8008ec8 <TIM_OC3_SetConfig+0x78>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	2b08      	cmp	r3, #8
 8008ebc:	d004      	beq.n	8008ec8 <TIM_OC3_SetConfig+0x78>
 8008ebe:	f641 315d 	movw	r1, #7005	; 0x1b5d
 8008ec2:	482c      	ldr	r0, [pc, #176]	; (8008f74 <TIM_OC3_SetConfig+0x124>)
 8008ec4:	f7f8 ff91 	bl	8001dea <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ee2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a22      	ldr	r2, [pc, #136]	; (8008f70 <TIM_OC3_SetConfig+0x120>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d12f      	bne.n	8008f4c <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ef4:	d008      	beq.n	8008f08 <TIM_OC3_SetConfig+0xb8>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d004      	beq.n	8008f08 <TIM_OC3_SetConfig+0xb8>
 8008efe:	f641 316a 	movw	r1, #7018	; 0x1b6a
 8008f02:	481c      	ldr	r0, [pc, #112]	; (8008f74 <TIM_OC3_SetConfig+0x124>)
 8008f04:	f7f8 ff71 	bl	8001dea <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	695b      	ldr	r3, [r3, #20]
 8008f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f10:	d008      	beq.n	8008f24 <TIM_OC3_SetConfig+0xd4>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d004      	beq.n	8008f24 <TIM_OC3_SetConfig+0xd4>
 8008f1a:	f641 316b 	movw	r1, #7019	; 0x1b6b
 8008f1e:	4815      	ldr	r0, [pc, #84]	; (8008f74 <TIM_OC3_SetConfig+0x124>)
 8008f20:	f7f8 ff63 	bl	8001dea <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	011b      	lsls	r3, r3, #4
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	011b      	lsls	r3, r3, #4
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	621a      	str	r2, [r3, #32]
}
 8008f66:	bf00      	nop
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	40010000 	.word	0x40010000
 8008f74:	0801173c 	.word	0x0801173c

08008f78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	021b      	lsls	r3, r3, #8
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	031b      	lsls	r3, r3, #12
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a16      	ldr	r2, [pc, #88]	; (800902c <TIM_OC4_SetConfig+0xb4>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d117      	bne.n	8009008 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fe0:	d008      	beq.n	8008ff4 <TIM_OC4_SetConfig+0x7c>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d004      	beq.n	8008ff4 <TIM_OC4_SetConfig+0x7c>
 8008fea:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 8008fee:	4810      	ldr	r0, [pc, #64]	; (8009030 <TIM_OC4_SetConfig+0xb8>)
 8008ff0:	f7f8 fefb 	bl	8001dea <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	019b      	lsls	r3, r3, #6
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	4313      	orrs	r3, r2
 8009006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	621a      	str	r2, [r3, #32]
}
 8009022:	bf00      	nop
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	40010000 	.word	0x40010000
 8009030:	0801173c 	.word	0x0801173c

08009034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6a1b      	ldr	r3, [r3, #32]
 8009044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	f023 0201 	bic.w	r2, r3, #1
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800905e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	011b      	lsls	r3, r3, #4
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	4313      	orrs	r3, r2
 8009068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f023 030a 	bic.w	r3, r3, #10
 8009070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	4313      	orrs	r3, r2
 8009078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	621a      	str	r2, [r3, #32]
}
 8009086:	bf00      	nop
 8009088:	371c      	adds	r7, #28
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009092:	b480      	push	{r7}
 8009094:	b087      	sub	sp, #28
 8009096:	af00      	add	r7, sp, #0
 8009098:	60f8      	str	r0, [r7, #12]
 800909a:	60b9      	str	r1, [r7, #8]
 800909c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	f023 0210 	bic.w	r2, r3, #16
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	031b      	lsls	r3, r3, #12
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	693a      	ldr	r2, [r7, #16]
 80090e4:	621a      	str	r2, [r3, #32]
}
 80090e6:	bf00      	nop
 80090e8:	371c      	adds	r7, #28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b085      	sub	sp, #20
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4313      	orrs	r3, r2
 8009110:	f043 0307 	orr.w	r3, r3, #7
 8009114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	609a      	str	r2, [r3, #8]
}
 800911c:	bf00      	nop
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	021a      	lsls	r2, r3, #8
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	431a      	orrs	r2, r3
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	4313      	orrs	r3, r2
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	4313      	orrs	r3, r2
 8009154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	609a      	str	r2, [r3, #8]
}
 800915c:	bf00      	nop
 800915e:	371c      	adds	r7, #28
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4a2a      	ldr	r2, [pc, #168]	; (8009220 <TIM_CCxChannelCmd+0xb8>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d020      	beq.n	80091be <TIM_CCxChannelCmd+0x56>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009182:	d01c      	beq.n	80091be <TIM_CCxChannelCmd+0x56>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4a27      	ldr	r2, [pc, #156]	; (8009224 <TIM_CCxChannelCmd+0xbc>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d018      	beq.n	80091be <TIM_CCxChannelCmd+0x56>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4a26      	ldr	r2, [pc, #152]	; (8009228 <TIM_CCxChannelCmd+0xc0>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d014      	beq.n	80091be <TIM_CCxChannelCmd+0x56>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4a25      	ldr	r2, [pc, #148]	; (800922c <TIM_CCxChannelCmd+0xc4>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d010      	beq.n	80091be <TIM_CCxChannelCmd+0x56>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4a24      	ldr	r2, [pc, #144]	; (8009230 <TIM_CCxChannelCmd+0xc8>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d00c      	beq.n	80091be <TIM_CCxChannelCmd+0x56>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4a23      	ldr	r2, [pc, #140]	; (8009234 <TIM_CCxChannelCmd+0xcc>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d008      	beq.n	80091be <TIM_CCxChannelCmd+0x56>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4a22      	ldr	r2, [pc, #136]	; (8009238 <TIM_CCxChannelCmd+0xd0>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d004      	beq.n	80091be <TIM_CCxChannelCmd+0x56>
 80091b4:	f641 5194 	movw	r1, #7572	; 0x1d94
 80091b8:	4820      	ldr	r0, [pc, #128]	; (800923c <TIM_CCxChannelCmd+0xd4>)
 80091ba:	f7f8 fe16 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d010      	beq.n	80091e6 <TIM_CCxChannelCmd+0x7e>
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d00d      	beq.n	80091e6 <TIM_CCxChannelCmd+0x7e>
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	2b08      	cmp	r3, #8
 80091ce:	d00a      	beq.n	80091e6 <TIM_CCxChannelCmd+0x7e>
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b0c      	cmp	r3, #12
 80091d4:	d007      	beq.n	80091e6 <TIM_CCxChannelCmd+0x7e>
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b3c      	cmp	r3, #60	; 0x3c
 80091da:	d004      	beq.n	80091e6 <TIM_CCxChannelCmd+0x7e>
 80091dc:	f641 5195 	movw	r1, #7573	; 0x1d95
 80091e0:	4816      	ldr	r0, [pc, #88]	; (800923c <TIM_CCxChannelCmd+0xd4>)
 80091e2:	f7f8 fe02 	bl	8001dea <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f003 031f 	and.w	r3, r3, #31
 80091ec:	2201      	movs	r2, #1
 80091ee:	fa02 f303 	lsl.w	r3, r2, r3
 80091f2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6a1a      	ldr	r2, [r3, #32]
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	43db      	mvns	r3, r3
 80091fc:	401a      	ands	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a1a      	ldr	r2, [r3, #32]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	f003 031f 	and.w	r3, r3, #31
 800920c:	6879      	ldr	r1, [r7, #4]
 800920e:	fa01 f303 	lsl.w	r3, r1, r3
 8009212:	431a      	orrs	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	621a      	str	r2, [r3, #32]
}
 8009218:	bf00      	nop
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	40010000 	.word	0x40010000
 8009224:	40000400 	.word	0x40000400
 8009228:	40000800 	.word	0x40000800
 800922c:	40000c00 	.word	0x40000c00
 8009230:	40014000 	.word	0x40014000
 8009234:	40014400 	.word	0x40014400
 8009238:	40014800 	.word	0x40014800
 800923c:	0801173c 	.word	0x0801173c

08009240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a55      	ldr	r2, [pc, #340]	; (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d018      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800925c:	d013      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a51      	ldr	r2, [pc, #324]	; (80093a8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d00e      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a4f      	ldr	r2, [pc, #316]	; (80093ac <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d009      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a4e      	ldr	r2, [pc, #312]	; (80093b0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d004      	beq.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800927c:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8009280:	484c      	ldr	r0, [pc, #304]	; (80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009282:	f7f8 fdb2 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d020      	beq.n	80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b10      	cmp	r3, #16
 8009294:	d01c      	beq.n	80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b20      	cmp	r3, #32
 800929c:	d018      	beq.n	80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b30      	cmp	r3, #48	; 0x30
 80092a4:	d014      	beq.n	80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b40      	cmp	r3, #64	; 0x40
 80092ac:	d010      	beq.n	80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b50      	cmp	r3, #80	; 0x50
 80092b4:	d00c      	beq.n	80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b60      	cmp	r3, #96	; 0x60
 80092bc:	d008      	beq.n	80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b70      	cmp	r3, #112	; 0x70
 80092c4:	d004      	beq.n	80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80092c6:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80092ca:	483a      	ldr	r0, [pc, #232]	; (80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80092cc:	f7f8 fd8d 	bl	8001dea <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2b80      	cmp	r3, #128	; 0x80
 80092d6:	d008      	beq.n	80092ea <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d004      	beq.n	80092ea <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80092e0:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80092e4:	4833      	ldr	r0, [pc, #204]	; (80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80092e6:	f7f8 fd80 	bl	8001dea <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d101      	bne.n	80092f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80092f4:	2302      	movs	r3, #2
 80092f6:	e050      	b.n	800939a <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800931e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	4313      	orrs	r3, r2
 8009328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a1b      	ldr	r2, [pc, #108]	; (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d018      	beq.n	800936e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009344:	d013      	beq.n	800936e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a17      	ldr	r2, [pc, #92]	; (80093a8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d00e      	beq.n	800936e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a15      	ldr	r2, [pc, #84]	; (80093ac <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d009      	beq.n	800936e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a14      	ldr	r2, [pc, #80]	; (80093b0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d004      	beq.n	800936e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a13      	ldr	r2, [pc, #76]	; (80093b8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d10c      	bne.n	8009388 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	4313      	orrs	r3, r2
 800937e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	40010000 	.word	0x40010000
 80093a8:	40000400 	.word	0x40000400
 80093ac:	40000800 	.word	0x40000800
 80093b0:	40000c00 	.word	0x40000c00
 80093b4:	08011774 	.word	0x08011774
 80093b8:	40014000 	.word	0x40014000

080093bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093e4:	b084      	sub	sp, #16
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	f107 001c 	add.w	r0, r7, #28
 80093f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d122      	bne.n	8009442 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009400:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009426:	2b01      	cmp	r3, #1
 8009428:	d105      	bne.n	8009436 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f001 fbee 	bl	800ac18 <USB_CoreReset>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]
 8009440:	e01a      	b.n	8009478 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f001 fbe2 	bl	800ac18 <USB_CoreReset>
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800945a:	2b00      	cmp	r3, #0
 800945c:	d106      	bne.n	800946c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	639a      	str	r2, [r3, #56]	; 0x38
 800946a:	e005      	b.n	8009478 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009470:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	2b01      	cmp	r3, #1
 800947c:	d10b      	bne.n	8009496 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f043 0206 	orr.w	r2, r3, #6
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f043 0220 	orr.w	r2, r3, #32
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009496:	7bfb      	ldrb	r3, [r7, #15]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094a2:	b004      	add	sp, #16
 80094a4:	4770      	bx	lr
	...

080094a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	4613      	mov	r3, r2
 80094b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d165      	bne.n	8009588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	4a41      	ldr	r2, [pc, #260]	; (80095c4 <USB_SetTurnaroundTime+0x11c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d906      	bls.n	80094d2 <USB_SetTurnaroundTime+0x2a>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	4a40      	ldr	r2, [pc, #256]	; (80095c8 <USB_SetTurnaroundTime+0x120>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d202      	bcs.n	80094d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80094cc:	230f      	movs	r3, #15
 80094ce:	617b      	str	r3, [r7, #20]
 80094d0:	e062      	b.n	8009598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	4a3c      	ldr	r2, [pc, #240]	; (80095c8 <USB_SetTurnaroundTime+0x120>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d306      	bcc.n	80094e8 <USB_SetTurnaroundTime+0x40>
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	4a3b      	ldr	r2, [pc, #236]	; (80095cc <USB_SetTurnaroundTime+0x124>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d202      	bcs.n	80094e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80094e2:	230e      	movs	r3, #14
 80094e4:	617b      	str	r3, [r7, #20]
 80094e6:	e057      	b.n	8009598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	4a38      	ldr	r2, [pc, #224]	; (80095cc <USB_SetTurnaroundTime+0x124>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d306      	bcc.n	80094fe <USB_SetTurnaroundTime+0x56>
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	4a37      	ldr	r2, [pc, #220]	; (80095d0 <USB_SetTurnaroundTime+0x128>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d202      	bcs.n	80094fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80094f8:	230d      	movs	r3, #13
 80094fa:	617b      	str	r3, [r7, #20]
 80094fc:	e04c      	b.n	8009598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	4a33      	ldr	r2, [pc, #204]	; (80095d0 <USB_SetTurnaroundTime+0x128>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d306      	bcc.n	8009514 <USB_SetTurnaroundTime+0x6c>
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	4a32      	ldr	r2, [pc, #200]	; (80095d4 <USB_SetTurnaroundTime+0x12c>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d802      	bhi.n	8009514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800950e:	230c      	movs	r3, #12
 8009510:	617b      	str	r3, [r7, #20]
 8009512:	e041      	b.n	8009598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	4a2f      	ldr	r2, [pc, #188]	; (80095d4 <USB_SetTurnaroundTime+0x12c>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d906      	bls.n	800952a <USB_SetTurnaroundTime+0x82>
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	4a2e      	ldr	r2, [pc, #184]	; (80095d8 <USB_SetTurnaroundTime+0x130>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d802      	bhi.n	800952a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009524:	230b      	movs	r3, #11
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e036      	b.n	8009598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	4a2a      	ldr	r2, [pc, #168]	; (80095d8 <USB_SetTurnaroundTime+0x130>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d906      	bls.n	8009540 <USB_SetTurnaroundTime+0x98>
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	4a29      	ldr	r2, [pc, #164]	; (80095dc <USB_SetTurnaroundTime+0x134>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d802      	bhi.n	8009540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800953a:	230a      	movs	r3, #10
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	e02b      	b.n	8009598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	4a26      	ldr	r2, [pc, #152]	; (80095dc <USB_SetTurnaroundTime+0x134>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d906      	bls.n	8009556 <USB_SetTurnaroundTime+0xae>
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	4a25      	ldr	r2, [pc, #148]	; (80095e0 <USB_SetTurnaroundTime+0x138>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d202      	bcs.n	8009556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009550:	2309      	movs	r3, #9
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	e020      	b.n	8009598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	4a21      	ldr	r2, [pc, #132]	; (80095e0 <USB_SetTurnaroundTime+0x138>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d306      	bcc.n	800956c <USB_SetTurnaroundTime+0xc4>
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	4a20      	ldr	r2, [pc, #128]	; (80095e4 <USB_SetTurnaroundTime+0x13c>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d802      	bhi.n	800956c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009566:	2308      	movs	r3, #8
 8009568:	617b      	str	r3, [r7, #20]
 800956a:	e015      	b.n	8009598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <USB_SetTurnaroundTime+0x13c>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d906      	bls.n	8009582 <USB_SetTurnaroundTime+0xda>
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	4a1c      	ldr	r2, [pc, #112]	; (80095e8 <USB_SetTurnaroundTime+0x140>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d202      	bcs.n	8009582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800957c:	2307      	movs	r3, #7
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	e00a      	b.n	8009598 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009582:	2306      	movs	r3, #6
 8009584:	617b      	str	r3, [r7, #20]
 8009586:	e007      	b.n	8009598 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009588:	79fb      	ldrb	r3, [r7, #7]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d102      	bne.n	8009594 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800958e:	2309      	movs	r3, #9
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	e001      	b.n	8009598 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009594:	2309      	movs	r3, #9
 8009596:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	029b      	lsls	r3, r3, #10
 80095ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80095b0:	431a      	orrs	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	371c      	adds	r7, #28
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	00d8acbf 	.word	0x00d8acbf
 80095c8:	00e4e1c0 	.word	0x00e4e1c0
 80095cc:	00f42400 	.word	0x00f42400
 80095d0:	01067380 	.word	0x01067380
 80095d4:	011a499f 	.word	0x011a499f
 80095d8:	01312cff 	.word	0x01312cff
 80095dc:	014ca43f 	.word	0x014ca43f
 80095e0:	016e3600 	.word	0x016e3600
 80095e4:	01a6ab1f 	.word	0x01a6ab1f
 80095e8:	01e84800 	.word	0x01e84800

080095ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f043 0201 	orr.w	r2, r3, #1
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	f023 0201 	bic.w	r2, r3, #1
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800963c:	2300      	movs	r3, #0
 800963e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800964c:	78fb      	ldrb	r3, [r7, #3]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d115      	bne.n	800967e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800965e:	2001      	movs	r0, #1
 8009660:	f7f9 fc2e 	bl	8002ec0 <HAL_Delay>
      ms++;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	3301      	adds	r3, #1
 8009668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f001 fa45 	bl	800aafa <USB_GetMode>
 8009670:	4603      	mov	r3, r0
 8009672:	2b01      	cmp	r3, #1
 8009674:	d01e      	beq.n	80096b4 <USB_SetCurrentMode+0x84>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2b31      	cmp	r3, #49	; 0x31
 800967a:	d9f0      	bls.n	800965e <USB_SetCurrentMode+0x2e>
 800967c:	e01a      	b.n	80096b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d115      	bne.n	80096b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009690:	2001      	movs	r0, #1
 8009692:	f7f9 fc15 	bl	8002ec0 <HAL_Delay>
      ms++;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	3301      	adds	r3, #1
 800969a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f001 fa2c 	bl	800aafa <USB_GetMode>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <USB_SetCurrentMode+0x84>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b31      	cmp	r3, #49	; 0x31
 80096ac:	d9f0      	bls.n	8009690 <USB_SetCurrentMode+0x60>
 80096ae:	e001      	b.n	80096b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e005      	b.n	80096c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b32      	cmp	r3, #50	; 0x32
 80096b8:	d101      	bne.n	80096be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e000      	b.n	80096c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096c8:	b084      	sub	sp, #16
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b086      	sub	sp, #24
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80096d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80096e2:	2300      	movs	r3, #0
 80096e4:	613b      	str	r3, [r7, #16]
 80096e6:	e009      	b.n	80096fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	3340      	adds	r3, #64	; 0x40
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	2200      	movs	r2, #0
 80096f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	3301      	adds	r3, #1
 80096fa:	613b      	str	r3, [r7, #16]
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	2b0e      	cmp	r3, #14
 8009700:	d9f2      	bls.n	80096e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009704:	2b00      	cmp	r3, #0
 8009706:	d11c      	bne.n	8009742 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009716:	f043 0302 	orr.w	r3, r3, #2
 800971a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009720:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009738:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	639a      	str	r2, [r3, #56]	; 0x38
 8009740:	e00b      	b.n	800975a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009746:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009752:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009760:	461a      	mov	r2, r3
 8009762:	2300      	movs	r3, #0
 8009764:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800976c:	4619      	mov	r1, r3
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009774:	461a      	mov	r2, r3
 8009776:	680b      	ldr	r3, [r1, #0]
 8009778:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	2b01      	cmp	r3, #1
 800977e:	d10c      	bne.n	800979a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	2b00      	cmp	r3, #0
 8009784:	d104      	bne.n	8009790 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009786:	2100      	movs	r1, #0
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f965 	bl	8009a58 <USB_SetDevSpeed>
 800978e:	e008      	b.n	80097a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009790:	2101      	movs	r1, #1
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f960 	bl	8009a58 <USB_SetDevSpeed>
 8009798:	e003      	b.n	80097a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800979a:	2103      	movs	r1, #3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f95b 	bl	8009a58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097a2:	2110      	movs	r1, #16
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f8f3 	bl	8009990 <USB_FlushTxFifo>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f91f 	bl	80099f8 <USB_FlushRxFifo>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ca:	461a      	mov	r2, r3
 80097cc:	2300      	movs	r3, #0
 80097ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d6:	461a      	mov	r2, r3
 80097d8:	2300      	movs	r3, #0
 80097da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e2:	461a      	mov	r2, r3
 80097e4:	2300      	movs	r3, #0
 80097e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097e8:	2300      	movs	r3, #0
 80097ea:	613b      	str	r3, [r7, #16]
 80097ec:	e043      	b.n	8009876 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009804:	d118      	bne.n	8009838 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10a      	bne.n	8009822 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009818:	461a      	mov	r2, r3
 800981a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	e013      	b.n	800984a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4413      	add	r3, r2
 800982a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982e:	461a      	mov	r2, r3
 8009830:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	e008      	b.n	800984a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009844:	461a      	mov	r2, r3
 8009846:	2300      	movs	r3, #0
 8009848:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009856:	461a      	mov	r2, r3
 8009858:	2300      	movs	r3, #0
 800985a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4413      	add	r3, r2
 8009864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009868:	461a      	mov	r2, r3
 800986a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800986e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	3301      	adds	r3, #1
 8009874:	613b      	str	r3, [r7, #16]
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	429a      	cmp	r2, r3
 800987c:	d3b7      	bcc.n	80097ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800987e:	2300      	movs	r3, #0
 8009880:	613b      	str	r3, [r7, #16]
 8009882:	e043      	b.n	800990c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	015a      	lsls	r2, r3, #5
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4413      	add	r3, r2
 800988c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800989a:	d118      	bne.n	80098ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10a      	bne.n	80098b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ae:	461a      	mov	r2, r3
 80098b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	e013      	b.n	80098e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c4:	461a      	mov	r2, r3
 80098c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	e008      	b.n	80098e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	015a      	lsls	r2, r3, #5
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	4413      	add	r3, r2
 80098d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098da:	461a      	mov	r2, r3
 80098dc:	2300      	movs	r3, #0
 80098de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ec:	461a      	mov	r2, r3
 80098ee:	2300      	movs	r3, #0
 80098f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fe:	461a      	mov	r2, r3
 8009900:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009904:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	3301      	adds	r3, #1
 800990a:	613b      	str	r3, [r7, #16]
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	429a      	cmp	r2, r3
 8009912:	d3b7      	bcc.n	8009884 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009926:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009934:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	2b00      	cmp	r3, #0
 800993a:	d105      	bne.n	8009948 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	f043 0210 	orr.w	r2, r3, #16
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	699a      	ldr	r2, [r3, #24]
 800994c:	4b0f      	ldr	r3, [pc, #60]	; (800998c <USB_DevInit+0x2c4>)
 800994e:	4313      	orrs	r3, r2
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d005      	beq.n	8009966 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	f043 0208 	orr.w	r2, r3, #8
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009968:	2b01      	cmp	r3, #1
 800996a:	d107      	bne.n	800997c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009974:	f043 0304 	orr.w	r3, r3, #4
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800997c:	7dfb      	ldrb	r3, [r7, #23]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009988:	b004      	add	sp, #16
 800998a:	4770      	bx	lr
 800998c:	803c3800 	.word	0x803c3800

08009990 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3301      	adds	r3, #1
 80099a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4a13      	ldr	r2, [pc, #76]	; (80099f4 <USB_FlushTxFifo+0x64>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d901      	bls.n	80099b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e01b      	b.n	80099e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	daf2      	bge.n	800999e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	019b      	lsls	r3, r3, #6
 80099c0:	f043 0220 	orr.w	r2, r3, #32
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3301      	adds	r3, #1
 80099cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	4a08      	ldr	r2, [pc, #32]	; (80099f4 <USB_FlushTxFifo+0x64>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d901      	bls.n	80099da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e006      	b.n	80099e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	f003 0320 	and.w	r3, r3, #32
 80099e2:	2b20      	cmp	r3, #32
 80099e4:	d0f0      	beq.n	80099c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	00030d40 	.word	0x00030d40

080099f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	3301      	adds	r3, #1
 8009a08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	4a11      	ldr	r2, [pc, #68]	; (8009a54 <USB_FlushRxFifo+0x5c>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d901      	bls.n	8009a16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a12:	2303      	movs	r3, #3
 8009a14:	e018      	b.n	8009a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	daf2      	bge.n	8009a04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2210      	movs	r2, #16
 8009a26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	4a08      	ldr	r2, [pc, #32]	; (8009a54 <USB_FlushRxFifo+0x5c>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d901      	bls.n	8009a3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e006      	b.n	8009a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f003 0310 	and.w	r3, r3, #16
 8009a42:	2b10      	cmp	r3, #16
 8009a44:	d0f0      	beq.n	8009a28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3714      	adds	r7, #20
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	00030d40 	.word	0x00030d40

08009a58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	460b      	mov	r3, r1
 8009a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	68f9      	ldr	r1, [r7, #12]
 8009a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b087      	sub	sp, #28
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f003 0306 	and.w	r3, r3, #6
 8009aa2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d102      	bne.n	8009ab0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	75fb      	strb	r3, [r7, #23]
 8009aae:	e00a      	b.n	8009ac6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d002      	beq.n	8009abc <USB_GetDevSpeed+0x32>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2b06      	cmp	r3, #6
 8009aba:	d102      	bne.n	8009ac2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009abc:	2302      	movs	r3, #2
 8009abe:	75fb      	strb	r3, [r7, #23]
 8009ac0:	e001      	b.n	8009ac6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009ac2:	230f      	movs	r3, #15
 8009ac4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	371c      	adds	r7, #28
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	785b      	ldrb	r3, [r3, #1]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d13a      	bne.n	8009b66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af6:	69da      	ldr	r2, [r3, #28]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	f003 030f 	and.w	r3, r3, #15
 8009b00:	2101      	movs	r1, #1
 8009b02:	fa01 f303 	lsl.w	r3, r1, r3
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	68f9      	ldr	r1, [r7, #12]
 8009b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d155      	bne.n	8009bd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	015a      	lsls	r2, r3, #5
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	791b      	ldrb	r3, [r3, #4]
 8009b42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	059b      	lsls	r3, r3, #22
 8009b4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	0151      	lsls	r1, r2, #5
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	440a      	add	r2, r1
 8009b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b62:	6013      	str	r3, [r2, #0]
 8009b64:	e036      	b.n	8009bd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b6c:	69da      	ldr	r2, [r3, #28]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	f003 030f 	and.w	r3, r3, #15
 8009b76:	2101      	movs	r1, #1
 8009b78:	fa01 f303 	lsl.w	r3, r1, r3
 8009b7c:	041b      	lsls	r3, r3, #16
 8009b7e:	68f9      	ldr	r1, [r7, #12]
 8009b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b84:	4313      	orrs	r3, r2
 8009b86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d11a      	bne.n	8009bd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	015a      	lsls	r2, r3, #5
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	791b      	ldrb	r3, [r3, #4]
 8009bb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009bba:	430b      	orrs	r3, r1
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	0151      	lsls	r1, r2, #5
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	440a      	add	r2, r1
 8009bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
	...

08009be4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	785b      	ldrb	r3, [r3, #1]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d161      	bne.n	8009cc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c16:	d11f      	bne.n	8009c58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	0151      	lsls	r1, r2, #5
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	440a      	add	r2, r1
 8009c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	0151      	lsls	r1, r2, #5
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	440a      	add	r2, r1
 8009c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	f003 030f 	and.w	r3, r3, #15
 8009c68:	2101      	movs	r1, #1
 8009c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	43db      	mvns	r3, r3
 8009c72:	68f9      	ldr	r1, [r7, #12]
 8009c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c78:	4013      	ands	r3, r2
 8009c7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c82:	69da      	ldr	r2, [r3, #28]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	f003 030f 	and.w	r3, r3, #15
 8009c8c:	2101      	movs	r1, #1
 8009c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	43db      	mvns	r3, r3
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	0159      	lsls	r1, r3, #5
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	440b      	add	r3, r1
 8009cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4b35      	ldr	r3, [pc, #212]	; (8009d94 <USB_DeactivateEndpoint+0x1b0>)
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	600b      	str	r3, [r1, #0]
 8009cc2:	e060      	b.n	8009d86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cda:	d11f      	bne.n	8009d1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	0151      	lsls	r1, r2, #5
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	440a      	add	r2, r1
 8009cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	015a      	lsls	r2, r3, #5
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	4413      	add	r3, r2
 8009d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	0151      	lsls	r1, r2, #5
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	440a      	add	r2, r1
 8009d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	f003 030f 	and.w	r3, r3, #15
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d32:	041b      	lsls	r3, r3, #16
 8009d34:	43db      	mvns	r3, r3
 8009d36:	68f9      	ldr	r1, [r7, #12]
 8009d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d46:	69da      	ldr	r2, [r3, #28]
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	f003 030f 	and.w	r3, r3, #15
 8009d50:	2101      	movs	r1, #1
 8009d52:	fa01 f303 	lsl.w	r3, r1, r3
 8009d56:	041b      	lsls	r3, r3, #16
 8009d58:	43db      	mvns	r3, r3
 8009d5a:	68f9      	ldr	r1, [r7, #12]
 8009d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d60:	4013      	ands	r3, r2
 8009d62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	0159      	lsls	r1, r3, #5
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	440b      	add	r3, r1
 8009d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d7e:	4619      	mov	r1, r3
 8009d80:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <USB_DeactivateEndpoint+0x1b4>)
 8009d82:	4013      	ands	r3, r2
 8009d84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	ec337800 	.word	0xec337800
 8009d98:	eff37800 	.word	0xeff37800

08009d9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b08a      	sub	sp, #40	; 0x28
 8009da0:	af02      	add	r7, sp, #8
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	4613      	mov	r3, r2
 8009da8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	785b      	ldrb	r3, [r3, #1]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	f040 815c 	bne.w	800a076 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d132      	bne.n	8009e2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	69ba      	ldr	r2, [r7, #24]
 8009dd6:	0151      	lsls	r1, r2, #5
 8009dd8:	69fa      	ldr	r2, [r7, #28]
 8009dda:	440a      	add	r2, r1
 8009ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009de0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009de4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009de8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	015a      	lsls	r2, r3, #5
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	4413      	add	r3, r2
 8009df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	69ba      	ldr	r2, [r7, #24]
 8009dfa:	0151      	lsls	r1, r2, #5
 8009dfc:	69fa      	ldr	r2, [r7, #28]
 8009dfe:	440a      	add	r2, r1
 8009e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	0151      	lsls	r1, r2, #5
 8009e1c:	69fa      	ldr	r2, [r7, #28]
 8009e1e:	440a      	add	r2, r1
 8009e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e24:	0cdb      	lsrs	r3, r3, #19
 8009e26:	04db      	lsls	r3, r3, #19
 8009e28:	6113      	str	r3, [r2, #16]
 8009e2a:	e074      	b.n	8009f16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	69ba      	ldr	r2, [r7, #24]
 8009e3c:	0151      	lsls	r1, r2, #5
 8009e3e:	69fa      	ldr	r2, [r7, #28]
 8009e40:	440a      	add	r2, r1
 8009e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e46:	0cdb      	lsrs	r3, r3, #19
 8009e48:	04db      	lsls	r3, r3, #19
 8009e4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	69ba      	ldr	r2, [r7, #24]
 8009e5c:	0151      	lsls	r1, r2, #5
 8009e5e:	69fa      	ldr	r2, [r7, #28]
 8009e60:	440a      	add	r2, r1
 8009e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e7c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	6999      	ldr	r1, [r3, #24]
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	440b      	add	r3, r1
 8009e88:	1e59      	subs	r1, r3, #1
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e92:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009e94:	4b9d      	ldr	r3, [pc, #628]	; (800a10c <USB_EPStartXfer+0x370>)
 8009e96:	400b      	ands	r3, r1
 8009e98:	69b9      	ldr	r1, [r7, #24]
 8009e9a:	0148      	lsls	r0, r1, #5
 8009e9c:	69f9      	ldr	r1, [r7, #28]
 8009e9e:	4401      	add	r1, r0
 8009ea0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb4:	691a      	ldr	r2, [r3, #16]
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ebe:	69b9      	ldr	r1, [r7, #24]
 8009ec0:	0148      	lsls	r0, r1, #5
 8009ec2:	69f9      	ldr	r1, [r7, #28]
 8009ec4:	4401      	add	r1, r0
 8009ec6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	791b      	ldrb	r3, [r3, #4]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d11f      	bne.n	8009f16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	015a      	lsls	r2, r3, #5
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	4413      	add	r3, r2
 8009ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	0151      	lsls	r1, r2, #5
 8009ee8:	69fa      	ldr	r2, [r7, #28]
 8009eea:	440a      	add	r2, r1
 8009eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ef0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009ef4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	0151      	lsls	r1, r2, #5
 8009f08:	69fa      	ldr	r2, [r7, #28]
 8009f0a:	440a      	add	r2, r1
 8009f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009f16:	79fb      	ldrb	r3, [r7, #7]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d14b      	bne.n	8009fb4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	695b      	ldr	r3, [r3, #20]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d009      	beq.n	8009f38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f30:	461a      	mov	r2, r3
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	791b      	ldrb	r3, [r3, #4]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d128      	bne.n	8009f92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d110      	bne.n	8009f72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	69ba      	ldr	r2, [r7, #24]
 8009f60:	0151      	lsls	r1, r2, #5
 8009f62:	69fa      	ldr	r2, [r7, #28]
 8009f64:	440a      	add	r2, r1
 8009f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f6e:	6013      	str	r3, [r2, #0]
 8009f70:	e00f      	b.n	8009f92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	69ba      	ldr	r2, [r7, #24]
 8009f82:	0151      	lsls	r1, r2, #5
 8009f84:	69fa      	ldr	r2, [r7, #28]
 8009f86:	440a      	add	r2, r1
 8009f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	69ba      	ldr	r2, [r7, #24]
 8009fa2:	0151      	lsls	r1, r2, #5
 8009fa4:	69fa      	ldr	r2, [r7, #28]
 8009fa6:	440a      	add	r2, r1
 8009fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	e133      	b.n	800a21c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	69ba      	ldr	r2, [r7, #24]
 8009fc4:	0151      	lsls	r1, r2, #5
 8009fc6:	69fa      	ldr	r2, [r7, #28]
 8009fc8:	440a      	add	r2, r1
 8009fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fd2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	791b      	ldrb	r3, [r3, #4]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d015      	beq.n	800a008 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	699b      	ldr	r3, [r3, #24]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f000 811b 	beq.w	800a21c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	f003 030f 	and.w	r3, r3, #15
 8009ff6:	2101      	movs	r1, #1
 8009ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ffc:	69f9      	ldr	r1, [r7, #28]
 8009ffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a002:	4313      	orrs	r3, r2
 800a004:	634b      	str	r3, [r1, #52]	; 0x34
 800a006:	e109      	b.n	800a21c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a014:	2b00      	cmp	r3, #0
 800a016:	d110      	bne.n	800a03a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	0151      	lsls	r1, r2, #5
 800a02a:	69fa      	ldr	r2, [r7, #28]
 800a02c:	440a      	add	r2, r1
 800a02e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a032:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	e00f      	b.n	800a05a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	0151      	lsls	r1, r2, #5
 800a04c:	69fa      	ldr	r2, [r7, #28]
 800a04e:	440a      	add	r2, r1
 800a050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a058:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	6919      	ldr	r1, [r3, #16]
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	781a      	ldrb	r2, [r3, #0]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	b298      	uxth	r0, r3
 800a068:	79fb      	ldrb	r3, [r7, #7]
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	4603      	mov	r3, r0
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 fade 	bl	800a630 <USB_WritePacket>
 800a074:	e0d2      	b.n	800a21c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	015a      	lsls	r2, r3, #5
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	4413      	add	r3, r2
 800a07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	69ba      	ldr	r2, [r7, #24]
 800a086:	0151      	lsls	r1, r2, #5
 800a088:	69fa      	ldr	r2, [r7, #28]
 800a08a:	440a      	add	r2, r1
 800a08c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a090:	0cdb      	lsrs	r3, r3, #19
 800a092:	04db      	lsls	r3, r3, #19
 800a094:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	0151      	lsls	r1, r2, #5
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	440a      	add	r2, r1
 800a0ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a0b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a0b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d126      	bne.n	800a110 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	015a      	lsls	r2, r3, #5
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ce:	691a      	ldr	r2, [r3, #16]
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0d8:	69b9      	ldr	r1, [r7, #24]
 800a0da:	0148      	lsls	r0, r1, #5
 800a0dc:	69f9      	ldr	r1, [r7, #28]
 800a0de:	4401      	add	r1, r0
 800a0e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	015a      	lsls	r2, r3, #5
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	69ba      	ldr	r2, [r7, #24]
 800a0f8:	0151      	lsls	r1, r2, #5
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	440a      	add	r2, r1
 800a0fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a106:	6113      	str	r3, [r2, #16]
 800a108:	e03a      	b.n	800a180 <USB_EPStartXfer+0x3e4>
 800a10a:	bf00      	nop
 800a10c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	699a      	ldr	r2, [r3, #24]
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	4413      	add	r3, r2
 800a11a:	1e5a      	subs	r2, r3, #1
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	fbb2 f3f3 	udiv	r3, r2, r3
 800a124:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	8afa      	ldrh	r2, [r7, #22]
 800a12c:	fb03 f202 	mul.w	r2, r3, r2
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a140:	691a      	ldr	r2, [r3, #16]
 800a142:	8afb      	ldrh	r3, [r7, #22]
 800a144:	04d9      	lsls	r1, r3, #19
 800a146:	4b38      	ldr	r3, [pc, #224]	; (800a228 <USB_EPStartXfer+0x48c>)
 800a148:	400b      	ands	r3, r1
 800a14a:	69b9      	ldr	r1, [r7, #24]
 800a14c:	0148      	lsls	r0, r1, #5
 800a14e:	69f9      	ldr	r1, [r7, #28]
 800a150:	4401      	add	r1, r0
 800a152:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a156:	4313      	orrs	r3, r2
 800a158:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	015a      	lsls	r2, r3, #5
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	4413      	add	r3, r2
 800a162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a166:	691a      	ldr	r2, [r3, #16]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a170:	69b9      	ldr	r1, [r7, #24]
 800a172:	0148      	lsls	r0, r1, #5
 800a174:	69f9      	ldr	r1, [r7, #28]
 800a176:	4401      	add	r1, r0
 800a178:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a17c:	4313      	orrs	r3, r2
 800a17e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a180:	79fb      	ldrb	r3, [r7, #7]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d10d      	bne.n	800a1a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d009      	beq.n	800a1a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	6919      	ldr	r1, [r3, #16]
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19e:	460a      	mov	r2, r1
 800a1a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	791b      	ldrb	r3, [r3, #4]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d128      	bne.n	800a1fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d110      	bne.n	800a1dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	0151      	lsls	r1, r2, #5
 800a1cc:	69fa      	ldr	r2, [r7, #28]
 800a1ce:	440a      	add	r2, r1
 800a1d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	e00f      	b.n	800a1fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	69ba      	ldr	r2, [r7, #24]
 800a1ec:	0151      	lsls	r1, r2, #5
 800a1ee:	69fa      	ldr	r2, [r7, #28]
 800a1f0:	440a      	add	r2, r1
 800a1f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	69ba      	ldr	r2, [r7, #24]
 800a20c:	0151      	lsls	r1, r2, #5
 800a20e:	69fa      	ldr	r2, [r7, #28]
 800a210:	440a      	add	r2, r1
 800a212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a21a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3720      	adds	r7, #32
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	1ff80000 	.word	0x1ff80000

0800a22c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	4613      	mov	r3, r2
 800a238:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	785b      	ldrb	r3, [r3, #1]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	f040 80ce 	bne.w	800a3ea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d132      	bne.n	800a2bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	0151      	lsls	r1, r2, #5
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	440a      	add	r2, r1
 800a26c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a270:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a274:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a278:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	015a      	lsls	r2, r3, #5
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	4413      	add	r3, r2
 800a282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	0151      	lsls	r1, r2, #5
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	440a      	add	r2, r1
 800a290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a298:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	015a      	lsls	r2, r3, #5
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	0151      	lsls	r1, r2, #5
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	440a      	add	r2, r1
 800a2b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b4:	0cdb      	lsrs	r3, r3, #19
 800a2b6:	04db      	lsls	r3, r3, #19
 800a2b8:	6113      	str	r3, [r2, #16]
 800a2ba:	e04e      	b.n	800a35a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	0151      	lsls	r1, r2, #5
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	440a      	add	r2, r1
 800a2d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d6:	0cdb      	lsrs	r3, r3, #19
 800a2d8:	04db      	lsls	r3, r3, #19
 800a2da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	0151      	lsls	r1, r2, #5
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	440a      	add	r2, r1
 800a2f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	699a      	ldr	r2, [r3, #24]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d903      	bls.n	800a314 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	68da      	ldr	r2, [r3, #12]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	015a      	lsls	r2, r3, #5
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	0151      	lsls	r1, r2, #5
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	440a      	add	r2, r1
 800a32a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a32e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a332:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	015a      	lsls	r2, r3, #5
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a340:	691a      	ldr	r2, [r3, #16]
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a34a:	6939      	ldr	r1, [r7, #16]
 800a34c:	0148      	lsls	r0, r1, #5
 800a34e:	6979      	ldr	r1, [r7, #20]
 800a350:	4401      	add	r1, r0
 800a352:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a356:	4313      	orrs	r3, r2
 800a358:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a35a:	79fb      	ldrb	r3, [r7, #7]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d11e      	bne.n	800a39e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d009      	beq.n	800a37c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	015a      	lsls	r2, r3, #5
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	4413      	add	r3, r2
 800a370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a374:	461a      	mov	r2, r3
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	015a      	lsls	r2, r3, #5
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	4413      	add	r3, r2
 800a384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	0151      	lsls	r1, r2, #5
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	440a      	add	r2, r1
 800a392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a396:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a39a:	6013      	str	r3, [r2, #0]
 800a39c:	e097      	b.n	800a4ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	015a      	lsls	r2, r3, #5
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	0151      	lsls	r1, r2, #5
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	440a      	add	r2, r1
 800a3b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 8083 	beq.w	800a4ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	f003 030f 	and.w	r3, r3, #15
 800a3d8:	2101      	movs	r1, #1
 800a3da:	fa01 f303 	lsl.w	r3, r1, r3
 800a3de:	6979      	ldr	r1, [r7, #20]
 800a3e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	634b      	str	r3, [r1, #52]	; 0x34
 800a3e8:	e071      	b.n	800a4ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	015a      	lsls	r2, r3, #5
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	0151      	lsls	r1, r2, #5
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	440a      	add	r2, r1
 800a400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a404:	0cdb      	lsrs	r3, r3, #19
 800a406:	04db      	lsls	r3, r3, #19
 800a408:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	0151      	lsls	r1, r2, #5
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	440a      	add	r2, r1
 800a420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a424:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a428:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a42c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d003      	beq.n	800a43e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	68da      	ldr	r2, [r3, #12]
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	68da      	ldr	r2, [r3, #12]
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	015a      	lsls	r2, r3, #5
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	4413      	add	r3, r2
 800a44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	0151      	lsls	r1, r2, #5
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	440a      	add	r2, r1
 800a45c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a464:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a472:	691a      	ldr	r2, [r3, #16]
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a47c:	6939      	ldr	r1, [r7, #16]
 800a47e:	0148      	lsls	r0, r1, #5
 800a480:	6979      	ldr	r1, [r7, #20]
 800a482:	4401      	add	r1, r0
 800a484:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a488:	4313      	orrs	r3, r2
 800a48a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a48c:	79fb      	ldrb	r3, [r7, #7]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d10d      	bne.n	800a4ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d009      	beq.n	800a4ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	6919      	ldr	r1, [r3, #16]
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4aa:	460a      	mov	r2, r1
 800a4ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	015a      	lsls	r2, r3, #5
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	0151      	lsls	r1, r2, #5
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	440a      	add	r2, r1
 800a4c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	371c      	adds	r7, #28
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	785b      	ldrb	r3, [r3, #1]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d14a      	bne.n	800a590 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	4413      	add	r3, r2
 800a504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a50e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a512:	f040 8086 	bne.w	800a622 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	7812      	ldrb	r2, [r2, #0]
 800a52a:	0151      	lsls	r1, r2, #5
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	440a      	add	r2, r1
 800a530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a534:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a538:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	7812      	ldrb	r2, [r2, #0]
 800a54e:	0151      	lsls	r1, r2, #5
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	440a      	add	r2, r1
 800a554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a55c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3301      	adds	r3, #1
 800a562:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f242 7210 	movw	r2, #10000	; 0x2710
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d902      	bls.n	800a574 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	75fb      	strb	r3, [r7, #23]
          break;
 800a572:	e056      	b.n	800a622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	015a      	lsls	r2, r3, #5
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	4413      	add	r3, r2
 800a57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a58c:	d0e7      	beq.n	800a55e <USB_EPStopXfer+0x82>
 800a58e:	e048      	b.n	800a622 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	015a      	lsls	r2, r3, #5
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	4413      	add	r3, r2
 800a59a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5a8:	d13b      	bne.n	800a622 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	7812      	ldrb	r2, [r2, #0]
 800a5be:	0151      	lsls	r1, r2, #5
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	440a      	add	r2, r1
 800a5c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a5cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	7812      	ldrb	r2, [r2, #0]
 800a5e2:	0151      	lsls	r1, r2, #5
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	440a      	add	r2, r1
 800a5e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f242 7210 	movw	r2, #10000	; 0x2710
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d902      	bls.n	800a608 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	75fb      	strb	r3, [r7, #23]
          break;
 800a606:	e00c      	b.n	800a622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	015a      	lsls	r2, r3, #5
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	4413      	add	r3, r2
 800a612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a61c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a620:	d0e7      	beq.n	800a5f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a622:	7dfb      	ldrb	r3, [r7, #23]
}
 800a624:	4618      	mov	r0, r3
 800a626:	371c      	adds	r7, #28
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a630:	b480      	push	{r7}
 800a632:	b089      	sub	sp, #36	; 0x24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	4611      	mov	r1, r2
 800a63c:	461a      	mov	r2, r3
 800a63e:	460b      	mov	r3, r1
 800a640:	71fb      	strb	r3, [r7, #7]
 800a642:	4613      	mov	r3, r2
 800a644:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a64e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a652:	2b00      	cmp	r3, #0
 800a654:	d123      	bne.n	800a69e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a656:	88bb      	ldrh	r3, [r7, #4]
 800a658:	3303      	adds	r3, #3
 800a65a:	089b      	lsrs	r3, r3, #2
 800a65c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a65e:	2300      	movs	r3, #0
 800a660:	61bb      	str	r3, [r7, #24]
 800a662:	e018      	b.n	800a696 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a664:	79fb      	ldrb	r3, [r7, #7]
 800a666:	031a      	lsls	r2, r3, #12
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a670:	461a      	mov	r2, r3
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	3301      	adds	r3, #1
 800a67c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	3301      	adds	r3, #1
 800a682:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	3301      	adds	r3, #1
 800a688:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	3301      	adds	r3, #1
 800a68e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	3301      	adds	r3, #1
 800a694:	61bb      	str	r3, [r7, #24]
 800a696:	69ba      	ldr	r2, [r7, #24]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d3e2      	bcc.n	800a664 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3724      	adds	r7, #36	; 0x24
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b08b      	sub	sp, #44	; 0x2c
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a6c2:	88fb      	ldrh	r3, [r7, #6]
 800a6c4:	089b      	lsrs	r3, r3, #2
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a6ca:	88fb      	ldrh	r3, [r7, #6]
 800a6cc:	f003 0303 	and.w	r3, r3, #3
 800a6d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	623b      	str	r3, [r7, #32]
 800a6d6:	e014      	b.n	800a702 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	3301      	adds	r3, #1
 800a700:	623b      	str	r3, [r7, #32]
 800a702:	6a3a      	ldr	r2, [r7, #32]
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	429a      	cmp	r2, r3
 800a708:	d3e6      	bcc.n	800a6d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a70a:	8bfb      	ldrh	r3, [r7, #30]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d01e      	beq.n	800a74e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a710:	2300      	movs	r3, #0
 800a712:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a71a:	461a      	mov	r2, r3
 800a71c:	f107 0310 	add.w	r3, r7, #16
 800a720:	6812      	ldr	r2, [r2, #0]
 800a722:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	fa22 f303 	lsr.w	r3, r2, r3
 800a730:	b2da      	uxtb	r2, r3
 800a732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a734:	701a      	strb	r2, [r3, #0]
      i++;
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	3301      	adds	r3, #1
 800a73a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	3301      	adds	r3, #1
 800a740:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a742:	8bfb      	ldrh	r3, [r7, #30]
 800a744:	3b01      	subs	r3, #1
 800a746:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a748:	8bfb      	ldrh	r3, [r7, #30]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1ea      	bne.n	800a724 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a750:	4618      	mov	r0, r3
 800a752:	372c      	adds	r7, #44	; 0x2c
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	785b      	ldrb	r3, [r3, #1]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d12c      	bne.n	800a7d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	015a      	lsls	r2, r3, #5
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	4413      	add	r3, r2
 800a780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	db12      	blt.n	800a7b0 <USB_EPSetStall+0x54>
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00f      	beq.n	800a7b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	0151      	lsls	r1, r2, #5
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	440a      	add	r2, r1
 800a7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a7ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	0151      	lsls	r1, r2, #5
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	440a      	add	r2, r1
 800a7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	e02b      	b.n	800a82a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	db12      	blt.n	800a80a <USB_EPSetStall+0xae>
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00f      	beq.n	800a80a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	015a      	lsls	r2, r3, #5
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	0151      	lsls	r1, r2, #5
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	440a      	add	r2, r1
 800a800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a808:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	015a      	lsls	r2, r3, #5
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	4413      	add	r3, r2
 800a812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	0151      	lsls	r1, r2, #5
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	440a      	add	r2, r1
 800a820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a828:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	785b      	ldrb	r3, [r3, #1]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d128      	bne.n	800a8a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	0151      	lsls	r1, r2, #5
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	440a      	add	r2, r1
 800a86a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a86e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a872:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	791b      	ldrb	r3, [r3, #4]
 800a878:	2b03      	cmp	r3, #3
 800a87a:	d003      	beq.n	800a884 <USB_EPClearStall+0x4c>
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	791b      	ldrb	r3, [r3, #4]
 800a880:	2b02      	cmp	r3, #2
 800a882:	d138      	bne.n	800a8f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	015a      	lsls	r2, r3, #5
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	4413      	add	r3, r2
 800a88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	0151      	lsls	r1, r2, #5
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	440a      	add	r2, r1
 800a89a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a89e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	e027      	b.n	800a8f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	015a      	lsls	r2, r3, #5
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	0151      	lsls	r1, r2, #5
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	440a      	add	r2, r1
 800a8bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a8c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	791b      	ldrb	r3, [r3, #4]
 800a8ca:	2b03      	cmp	r3, #3
 800a8cc:	d003      	beq.n	800a8d6 <USB_EPClearStall+0x9e>
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	791b      	ldrb	r3, [r3, #4]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d10f      	bne.n	800a8f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	015a      	lsls	r2, r3, #5
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	4413      	add	r3, r2
 800a8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68ba      	ldr	r2, [r7, #8]
 800a8e6:	0151      	lsls	r1, r2, #5
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	440a      	add	r2, r1
 800a8ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	460b      	mov	r3, r1
 800a90e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a922:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a926:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	78fb      	ldrb	r3, [r7, #3]
 800a932:	011b      	lsls	r3, r3, #4
 800a934:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a938:	68f9      	ldr	r1, [r7, #12]
 800a93a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a93e:	4313      	orrs	r3, r2
 800a940:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a96a:	f023 0303 	bic.w	r3, r3, #3
 800a96e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a97e:	f023 0302 	bic.w	r3, r3, #2
 800a982:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a992:	b480      	push	{r7}
 800a994:	b085      	sub	sp, #20
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9ac:	f023 0303 	bic.w	r3, r3, #3
 800a9b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9c0:	f043 0302 	orr.w	r3, r3, #2
 800a9c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	695b      	ldr	r3, [r3, #20]
 800a9e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b085      	sub	sp, #20
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	0c1b      	lsrs	r3, r3, #16
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b085      	sub	sp, #20
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa4a:	69db      	ldr	r3, [r3, #28]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	4013      	ands	r3, r2
 800aa50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	b29b      	uxth	r3, r3
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b085      	sub	sp, #20
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aa72:	78fb      	ldrb	r3, [r7, #3]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa90:	68bb      	ldr	r3, [r7, #8]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b087      	sub	sp, #28
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aac2:	78fb      	ldrb	r3, [r7, #3]
 800aac4:	f003 030f 	and.w	r3, r3, #15
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	fa22 f303 	lsr.w	r3, r2, r3
 800aace:	01db      	lsls	r3, r3, #7
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	693a      	ldr	r2, [r7, #16]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aad8:	78fb      	ldrb	r3, [r7, #3]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	4013      	ands	r3, r2
 800aaea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aaec:	68bb      	ldr	r3, [r7, #8]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	371c      	adds	r7, #28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aafa:	b480      	push	{r7}
 800aafc:	b083      	sub	sp, #12
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	f003 0301 	and.w	r3, r3, #1
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b085      	sub	sp, #20
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ab34:	f023 0307 	bic.w	r3, r3, #7
 800ab38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b087      	sub	sp, #28
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	460b      	mov	r3, r1
 800ab66:	607a      	str	r2, [r7, #4]
 800ab68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	333c      	adds	r3, #60	; 0x3c
 800ab72:	3304      	adds	r3, #4
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	4a26      	ldr	r2, [pc, #152]	; (800ac14 <USB_EP0_OutStart+0xb8>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d90a      	bls.n	800ab96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab90:	d101      	bne.n	800ab96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ab92:	2300      	movs	r3, #0
 800ab94:	e037      	b.n	800ac06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	2300      	movs	r3, #0
 800aba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abc4:	f043 0318 	orr.w	r3, r3, #24
 800abc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800abdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800abde:	7afb      	ldrb	r3, [r7, #11]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d10f      	bne.n	800ac04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abea:	461a      	mov	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abfe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ac02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	371c      	adds	r7, #28
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	4f54300a 	.word	0x4f54300a

0800ac18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac20:	2300      	movs	r3, #0
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3301      	adds	r3, #1
 800ac28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	4a13      	ldr	r2, [pc, #76]	; (800ac7c <USB_CoreReset+0x64>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d901      	bls.n	800ac36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ac32:	2303      	movs	r3, #3
 800ac34:	e01b      	b.n	800ac6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	daf2      	bge.n	800ac24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	f043 0201 	orr.w	r2, r3, #1
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3301      	adds	r3, #1
 800ac52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	4a09      	ldr	r2, [pc, #36]	; (800ac7c <USB_CoreReset+0x64>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d901      	bls.n	800ac60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e006      	b.n	800ac6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d0f0      	beq.n	800ac4e <USB_CoreReset+0x36>

  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3714      	adds	r7, #20
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	00030d40 	.word	0x00030d40

0800ac80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ac90:	f005 fe72 	bl	8010978 <USBD_static_malloc>
 800ac94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d109      	bne.n	800acb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	32b0      	adds	r2, #176	; 0xb0
 800aca6:	2100      	movs	r1, #0
 800aca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800acac:	2302      	movs	r3, #2
 800acae:	e0d4      	b.n	800ae5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800acb0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800acb4:	2100      	movs	r1, #0
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f005 feea 	bl	8010a90 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	32b0      	adds	r2, #176	; 0xb0
 800acc6:	68f9      	ldr	r1, [r7, #12]
 800acc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	32b0      	adds	r2, #176	; 0xb0
 800acd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	7c1b      	ldrb	r3, [r3, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d138      	bne.n	800ad5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ace8:	4b5e      	ldr	r3, [pc, #376]	; (800ae64 <USBD_CDC_Init+0x1e4>)
 800acea:	7819      	ldrb	r1, [r3, #0]
 800acec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acf0:	2202      	movs	r2, #2
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f005 fd1d 	bl	8010732 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800acf8:	4b5a      	ldr	r3, [pc, #360]	; (800ae64 <USBD_CDC_Init+0x1e4>)
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	f003 020f 	and.w	r2, r3, #15
 800ad00:	6879      	ldr	r1, [r7, #4]
 800ad02:	4613      	mov	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	440b      	add	r3, r1
 800ad0c:	3324      	adds	r3, #36	; 0x24
 800ad0e:	2201      	movs	r2, #1
 800ad10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad12:	4b55      	ldr	r3, [pc, #340]	; (800ae68 <USBD_CDC_Init+0x1e8>)
 800ad14:	7819      	ldrb	r1, [r3, #0]
 800ad16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad1a:	2202      	movs	r2, #2
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f005 fd08 	bl	8010732 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad22:	4b51      	ldr	r3, [pc, #324]	; (800ae68 <USBD_CDC_Init+0x1e8>)
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	f003 020f 	and.w	r2, r3, #15
 800ad2a:	6879      	ldr	r1, [r7, #4]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4413      	add	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	440b      	add	r3, r1
 800ad36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ad3e:	4b4b      	ldr	r3, [pc, #300]	; (800ae6c <USBD_CDC_Init+0x1ec>)
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	f003 020f 	and.w	r2, r3, #15
 800ad46:	6879      	ldr	r1, [r7, #4]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	440b      	add	r3, r1
 800ad52:	3326      	adds	r3, #38	; 0x26
 800ad54:	2210      	movs	r2, #16
 800ad56:	801a      	strh	r2, [r3, #0]
 800ad58:	e035      	b.n	800adc6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad5a:	4b42      	ldr	r3, [pc, #264]	; (800ae64 <USBD_CDC_Init+0x1e4>)
 800ad5c:	7819      	ldrb	r1, [r3, #0]
 800ad5e:	2340      	movs	r3, #64	; 0x40
 800ad60:	2202      	movs	r2, #2
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f005 fce5 	bl	8010732 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad68:	4b3e      	ldr	r3, [pc, #248]	; (800ae64 <USBD_CDC_Init+0x1e4>)
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	f003 020f 	and.w	r2, r3, #15
 800ad70:	6879      	ldr	r1, [r7, #4]
 800ad72:	4613      	mov	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	4413      	add	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	440b      	add	r3, r1
 800ad7c:	3324      	adds	r3, #36	; 0x24
 800ad7e:	2201      	movs	r2, #1
 800ad80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad82:	4b39      	ldr	r3, [pc, #228]	; (800ae68 <USBD_CDC_Init+0x1e8>)
 800ad84:	7819      	ldrb	r1, [r3, #0]
 800ad86:	2340      	movs	r3, #64	; 0x40
 800ad88:	2202      	movs	r2, #2
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f005 fcd1 	bl	8010732 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad90:	4b35      	ldr	r3, [pc, #212]	; (800ae68 <USBD_CDC_Init+0x1e8>)
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	f003 020f 	and.w	r2, r3, #15
 800ad98:	6879      	ldr	r1, [r7, #4]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	4413      	add	r3, r2
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	440b      	add	r3, r1
 800ada4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ada8:	2201      	movs	r2, #1
 800adaa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800adac:	4b2f      	ldr	r3, [pc, #188]	; (800ae6c <USBD_CDC_Init+0x1ec>)
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	f003 020f 	and.w	r2, r3, #15
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	4613      	mov	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	440b      	add	r3, r1
 800adc0:	3326      	adds	r3, #38	; 0x26
 800adc2:	2210      	movs	r2, #16
 800adc4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800adc6:	4b29      	ldr	r3, [pc, #164]	; (800ae6c <USBD_CDC_Init+0x1ec>)
 800adc8:	7819      	ldrb	r1, [r3, #0]
 800adca:	2308      	movs	r3, #8
 800adcc:	2203      	movs	r2, #3
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f005 fcaf 	bl	8010732 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800add4:	4b25      	ldr	r3, [pc, #148]	; (800ae6c <USBD_CDC_Init+0x1ec>)
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	f003 020f 	and.w	r2, r3, #15
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	4613      	mov	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4413      	add	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	440b      	add	r3, r1
 800ade8:	3324      	adds	r3, #36	; 0x24
 800adea:	2201      	movs	r2, #1
 800adec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	33b0      	adds	r3, #176	; 0xb0
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ae24:	2302      	movs	r3, #2
 800ae26:	e018      	b.n	800ae5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	7c1b      	ldrb	r3, [r3, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10a      	bne.n	800ae46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae30:	4b0d      	ldr	r3, [pc, #52]	; (800ae68 <USBD_CDC_Init+0x1e8>)
 800ae32:	7819      	ldrb	r1, [r3, #0]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f005 fd66 	bl	8010910 <USBD_LL_PrepareReceive>
 800ae44:	e008      	b.n	800ae58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae46:	4b08      	ldr	r3, [pc, #32]	; (800ae68 <USBD_CDC_Init+0x1e8>)
 800ae48:	7819      	ldrb	r1, [r3, #0]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae50:	2340      	movs	r3, #64	; 0x40
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f005 fd5c 	bl	8010910 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	2000011f 	.word	0x2000011f
 800ae68:	20000120 	.word	0x20000120
 800ae6c:	20000121 	.word	0x20000121

0800ae70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ae7c:	4b3a      	ldr	r3, [pc, #232]	; (800af68 <USBD_CDC_DeInit+0xf8>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f005 fc7b 	bl	801077e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ae88:	4b37      	ldr	r3, [pc, #220]	; (800af68 <USBD_CDC_DeInit+0xf8>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	f003 020f 	and.w	r2, r3, #15
 800ae90:	6879      	ldr	r1, [r7, #4]
 800ae92:	4613      	mov	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4413      	add	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	440b      	add	r3, r1
 800ae9c:	3324      	adds	r3, #36	; 0x24
 800ae9e:	2200      	movs	r2, #0
 800aea0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aea2:	4b32      	ldr	r3, [pc, #200]	; (800af6c <USBD_CDC_DeInit+0xfc>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	4619      	mov	r1, r3
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f005 fc68 	bl	801077e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aeae:	4b2f      	ldr	r3, [pc, #188]	; (800af6c <USBD_CDC_DeInit+0xfc>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	f003 020f 	and.w	r2, r3, #15
 800aeb6:	6879      	ldr	r1, [r7, #4]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	440b      	add	r3, r1
 800aec2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aec6:	2200      	movs	r2, #0
 800aec8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aeca:	4b29      	ldr	r3, [pc, #164]	; (800af70 <USBD_CDC_DeInit+0x100>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f005 fc54 	bl	801077e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aed6:	4b26      	ldr	r3, [pc, #152]	; (800af70 <USBD_CDC_DeInit+0x100>)
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	f003 020f 	and.w	r2, r3, #15
 800aede:	6879      	ldr	r1, [r7, #4]
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	440b      	add	r3, r1
 800aeea:	3324      	adds	r3, #36	; 0x24
 800aeec:	2200      	movs	r2, #0
 800aeee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aef0:	4b1f      	ldr	r3, [pc, #124]	; (800af70 <USBD_CDC_DeInit+0x100>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	f003 020f 	and.w	r2, r3, #15
 800aef8:	6879      	ldr	r1, [r7, #4]
 800aefa:	4613      	mov	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4413      	add	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	440b      	add	r3, r1
 800af04:	3326      	adds	r3, #38	; 0x26
 800af06:	2200      	movs	r2, #0
 800af08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	32b0      	adds	r2, #176	; 0xb0
 800af14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d01f      	beq.n	800af5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	33b0      	adds	r3, #176	; 0xb0
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4413      	add	r3, r2
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	32b0      	adds	r2, #176	; 0xb0
 800af3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3e:	4618      	mov	r0, r3
 800af40:	f005 fd28 	bl	8010994 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	32b0      	adds	r2, #176	; 0xb0
 800af4e:	2100      	movs	r1, #0
 800af50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	2000011f 	.word	0x2000011f
 800af6c:	20000120 	.word	0x20000120
 800af70:	20000121 	.word	0x20000121

0800af74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	32b0      	adds	r2, #176	; 0xb0
 800af88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800af8e:	2300      	movs	r3, #0
 800af90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800af92:	2300      	movs	r3, #0
 800af94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af96:	2300      	movs	r3, #0
 800af98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e0bf      	b.n	800b124 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afac:	2b00      	cmp	r3, #0
 800afae:	d050      	beq.n	800b052 <USBD_CDC_Setup+0xde>
 800afb0:	2b20      	cmp	r3, #32
 800afb2:	f040 80af 	bne.w	800b114 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	88db      	ldrh	r3, [r3, #6]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d03a      	beq.n	800b034 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	b25b      	sxtb	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	da1b      	bge.n	800b000 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	33b0      	adds	r3, #176	; 0xb0
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800afde:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afe0:	683a      	ldr	r2, [r7, #0]
 800afe2:	88d2      	ldrh	r2, [r2, #6]
 800afe4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	88db      	ldrh	r3, [r3, #6]
 800afea:	2b07      	cmp	r3, #7
 800afec:	bf28      	it	cs
 800afee:	2307      	movcs	r3, #7
 800aff0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	89fa      	ldrh	r2, [r7, #14]
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f001 fd43 	bl	800ca84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800affe:	e090      	b.n	800b122 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	785a      	ldrb	r2, [r3, #1]
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	88db      	ldrh	r3, [r3, #6]
 800b00e:	2b3f      	cmp	r3, #63	; 0x3f
 800b010:	d803      	bhi.n	800b01a <USBD_CDC_Setup+0xa6>
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	88db      	ldrh	r3, [r3, #6]
 800b016:	b2da      	uxtb	r2, r3
 800b018:	e000      	b.n	800b01c <USBD_CDC_Setup+0xa8>
 800b01a:	2240      	movs	r2, #64	; 0x40
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b022:	6939      	ldr	r1, [r7, #16]
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b02a:	461a      	mov	r2, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f001 fd55 	bl	800cadc <USBD_CtlPrepareRx>
      break;
 800b032:	e076      	b.n	800b122 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	33b0      	adds	r3, #176	; 0xb0
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4413      	add	r3, r2
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	7850      	ldrb	r0, [r2, #1]
 800b04a:	2200      	movs	r2, #0
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	4798      	blx	r3
      break;
 800b050:	e067      	b.n	800b122 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	785b      	ldrb	r3, [r3, #1]
 800b056:	2b0b      	cmp	r3, #11
 800b058:	d851      	bhi.n	800b0fe <USBD_CDC_Setup+0x18a>
 800b05a:	a201      	add	r2, pc, #4	; (adr r2, 800b060 <USBD_CDC_Setup+0xec>)
 800b05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b060:	0800b091 	.word	0x0800b091
 800b064:	0800b10d 	.word	0x0800b10d
 800b068:	0800b0ff 	.word	0x0800b0ff
 800b06c:	0800b0ff 	.word	0x0800b0ff
 800b070:	0800b0ff 	.word	0x0800b0ff
 800b074:	0800b0ff 	.word	0x0800b0ff
 800b078:	0800b0ff 	.word	0x0800b0ff
 800b07c:	0800b0ff 	.word	0x0800b0ff
 800b080:	0800b0ff 	.word	0x0800b0ff
 800b084:	0800b0ff 	.word	0x0800b0ff
 800b088:	0800b0bb 	.word	0x0800b0bb
 800b08c:	0800b0e5 	.word	0x0800b0e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d107      	bne.n	800b0ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b09c:	f107 030a 	add.w	r3, r7, #10
 800b0a0:	2202      	movs	r2, #2
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 fced 	bl	800ca84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0aa:	e032      	b.n	800b112 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b0ac:	6839      	ldr	r1, [r7, #0]
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f001 fc77 	bl	800c9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	75fb      	strb	r3, [r7, #23]
          break;
 800b0b8:	e02b      	b.n	800b112 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b03      	cmp	r3, #3
 800b0c4:	d107      	bne.n	800b0d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b0c6:	f107 030d 	add.w	r3, r7, #13
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f001 fcd8 	bl	800ca84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0d4:	e01d      	b.n	800b112 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f001 fc62 	bl	800c9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b0e2:	e016      	b.n	800b112 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	d00f      	beq.n	800b110 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f001 fc55 	bl	800c9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b0fc:	e008      	b.n	800b110 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f001 fc4e 	bl	800c9a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b106:	2303      	movs	r3, #3
 800b108:	75fb      	strb	r3, [r7, #23]
          break;
 800b10a:	e002      	b.n	800b112 <USBD_CDC_Setup+0x19e>
          break;
 800b10c:	bf00      	nop
 800b10e:	e008      	b.n	800b122 <USBD_CDC_Setup+0x1ae>
          break;
 800b110:	bf00      	nop
      }
      break;
 800b112:	e006      	b.n	800b122 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f001 fc43 	bl	800c9a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b11c:	2303      	movs	r3, #3
 800b11e:	75fb      	strb	r3, [r7, #23]
      break;
 800b120:	bf00      	nop
  }

  return (uint8_t)ret;
 800b122:	7dfb      	ldrb	r3, [r7, #23]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3718      	adds	r7, #24
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b13e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	32b0      	adds	r2, #176	; 0xb0
 800b14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d101      	bne.n	800b156 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b152:	2303      	movs	r3, #3
 800b154:	e065      	b.n	800b222 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	32b0      	adds	r2, #176	; 0xb0
 800b160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b164:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b166:	78fb      	ldrb	r3, [r7, #3]
 800b168:	f003 020f 	and.w	r2, r3, #15
 800b16c:	6879      	ldr	r1, [r7, #4]
 800b16e:	4613      	mov	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	440b      	add	r3, r1
 800b178:	3318      	adds	r3, #24
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d02f      	beq.n	800b1e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b180:	78fb      	ldrb	r3, [r7, #3]
 800b182:	f003 020f 	and.w	r2, r3, #15
 800b186:	6879      	ldr	r1, [r7, #4]
 800b188:	4613      	mov	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	440b      	add	r3, r1
 800b192:	3318      	adds	r3, #24
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	78fb      	ldrb	r3, [r7, #3]
 800b198:	f003 010f 	and.w	r1, r3, #15
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	460b      	mov	r3, r1
 800b1a0:	00db      	lsls	r3, r3, #3
 800b1a2:	440b      	add	r3, r1
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4403      	add	r3, r0
 800b1a8:	3348      	adds	r3, #72	; 0x48
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1b0:	fb01 f303 	mul.w	r3, r1, r3
 800b1b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d112      	bne.n	800b1e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b1ba:	78fb      	ldrb	r3, [r7, #3]
 800b1bc:	f003 020f 	and.w	r2, r3, #15
 800b1c0:	6879      	ldr	r1, [r7, #4]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4413      	add	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	440b      	add	r3, r1
 800b1cc:	3318      	adds	r3, #24
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1d2:	78f9      	ldrb	r1, [r7, #3]
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f005 fb78 	bl	80108ce <USBD_LL_Transmit>
 800b1de:	e01f      	b.n	800b220 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	33b0      	adds	r3, #176	; 0xb0
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d010      	beq.n	800b220 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	33b0      	adds	r3, #176	; 0xb0
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	4413      	add	r3, r2
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b21c:	78fa      	ldrb	r2, [r7, #3]
 800b21e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b084      	sub	sp, #16
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	460b      	mov	r3, r1
 800b234:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	32b0      	adds	r2, #176	; 0xb0
 800b240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b244:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	32b0      	adds	r2, #176	; 0xb0
 800b250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d101      	bne.n	800b25c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b258:	2303      	movs	r3, #3
 800b25a:	e01a      	b.n	800b292 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b25c:	78fb      	ldrb	r3, [r7, #3]
 800b25e:	4619      	mov	r1, r3
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f005 fb76 	bl	8010952 <USBD_LL_GetRxDataSize>
 800b266:	4602      	mov	r2, r0
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	33b0      	adds	r3, #176	; 0xb0
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4413      	add	r3, r2
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b28c:	4611      	mov	r1, r2
 800b28e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	32b0      	adds	r2, #176	; 0xb0
 800b2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d101      	bne.n	800b2bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	e025      	b.n	800b308 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	33b0      	adds	r3, #176	; 0xb0
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4413      	add	r3, r2
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d01a      	beq.n	800b306 <USBD_CDC_EP0_RxReady+0x6c>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b2d6:	2bff      	cmp	r3, #255	; 0xff
 800b2d8:	d015      	beq.n	800b306 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	33b0      	adds	r3, #176	; 0xb0
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4413      	add	r3, r2
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b2f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b2fa:	b292      	uxth	r2, r2
 800b2fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	22ff      	movs	r2, #255	; 0xff
 800b302:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b318:	2182      	movs	r1, #130	; 0x82
 800b31a:	4818      	ldr	r0, [pc, #96]	; (800b37c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b31c:	f000 fd09 	bl	800bd32 <USBD_GetEpDesc>
 800b320:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b322:	2101      	movs	r1, #1
 800b324:	4815      	ldr	r0, [pc, #84]	; (800b37c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b326:	f000 fd04 	bl	800bd32 <USBD_GetEpDesc>
 800b32a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b32c:	2181      	movs	r1, #129	; 0x81
 800b32e:	4813      	ldr	r0, [pc, #76]	; (800b37c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b330:	f000 fcff 	bl	800bd32 <USBD_GetEpDesc>
 800b334:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d002      	beq.n	800b342 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	2210      	movs	r2, #16
 800b340:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d006      	beq.n	800b356 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b350:	711a      	strb	r2, [r3, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d006      	beq.n	800b36a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b364:	711a      	strb	r2, [r3, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2243      	movs	r2, #67	; 0x43
 800b36e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b370:	4b02      	ldr	r3, [pc, #8]	; (800b37c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b372:	4618      	mov	r0, r3
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	200000dc 	.word	0x200000dc

0800b380 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b388:	2182      	movs	r1, #130	; 0x82
 800b38a:	4818      	ldr	r0, [pc, #96]	; (800b3ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b38c:	f000 fcd1 	bl	800bd32 <USBD_GetEpDesc>
 800b390:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b392:	2101      	movs	r1, #1
 800b394:	4815      	ldr	r0, [pc, #84]	; (800b3ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b396:	f000 fccc 	bl	800bd32 <USBD_GetEpDesc>
 800b39a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b39c:	2181      	movs	r1, #129	; 0x81
 800b39e:	4813      	ldr	r0, [pc, #76]	; (800b3ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3a0:	f000 fcc7 	bl	800bd32 <USBD_GetEpDesc>
 800b3a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d002      	beq.n	800b3b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2210      	movs	r2, #16
 800b3b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d006      	beq.n	800b3c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	711a      	strb	r2, [r3, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f042 0202 	orr.w	r2, r2, #2
 800b3c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d006      	beq.n	800b3da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	711a      	strb	r2, [r3, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f042 0202 	orr.w	r2, r2, #2
 800b3d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2243      	movs	r2, #67	; 0x43
 800b3de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3e0:	4b02      	ldr	r3, [pc, #8]	; (800b3ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3718      	adds	r7, #24
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	200000dc 	.word	0x200000dc

0800b3f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3f8:	2182      	movs	r1, #130	; 0x82
 800b3fa:	4818      	ldr	r0, [pc, #96]	; (800b45c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3fc:	f000 fc99 	bl	800bd32 <USBD_GetEpDesc>
 800b400:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b402:	2101      	movs	r1, #1
 800b404:	4815      	ldr	r0, [pc, #84]	; (800b45c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b406:	f000 fc94 	bl	800bd32 <USBD_GetEpDesc>
 800b40a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b40c:	2181      	movs	r1, #129	; 0x81
 800b40e:	4813      	ldr	r0, [pc, #76]	; (800b45c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b410:	f000 fc8f 	bl	800bd32 <USBD_GetEpDesc>
 800b414:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2210      	movs	r2, #16
 800b420:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d006      	beq.n	800b436 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b430:	711a      	strb	r2, [r3, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d006      	beq.n	800b44a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b444:	711a      	strb	r2, [r3, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2243      	movs	r2, #67	; 0x43
 800b44e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b450:	4b02      	ldr	r3, [pc, #8]	; (800b45c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b452:	4618      	mov	r0, r3
 800b454:	3718      	adds	r7, #24
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	200000dc 	.word	0x200000dc

0800b460 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	220a      	movs	r2, #10
 800b46c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b46e:	4b03      	ldr	r3, [pc, #12]	; (800b47c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b470:	4618      	mov	r0, r3
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	20000098 	.word	0x20000098

0800b480 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d101      	bne.n	800b494 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b490:	2303      	movs	r3, #3
 800b492:	e009      	b.n	800b4a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	33b0      	adds	r3, #176	; 0xb0
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	32b0      	adds	r2, #176	; 0xb0
 800b4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	e008      	b.n	800b4ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	371c      	adds	r7, #28
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	32b0      	adds	r2, #176	; 0xb0
 800b50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b510:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b518:	2303      	movs	r3, #3
 800b51a:	e004      	b.n	800b526 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
	...

0800b534 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	32b0      	adds	r2, #176	; 0xb0
 800b546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b54a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	32b0      	adds	r2, #176	; 0xb0
 800b556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b55e:	2303      	movs	r3, #3
 800b560:	e018      	b.n	800b594 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	7c1b      	ldrb	r3, [r3, #16]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10a      	bne.n	800b580 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b56a:	4b0c      	ldr	r3, [pc, #48]	; (800b59c <USBD_CDC_ReceivePacket+0x68>)
 800b56c:	7819      	ldrb	r1, [r3, #0]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b574:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f005 f9c9 	bl	8010910 <USBD_LL_PrepareReceive>
 800b57e:	e008      	b.n	800b592 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b580:	4b06      	ldr	r3, [pc, #24]	; (800b59c <USBD_CDC_ReceivePacket+0x68>)
 800b582:	7819      	ldrb	r1, [r3, #0]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b58a:	2340      	movs	r3, #64	; 0x40
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f005 f9bf 	bl	8010910 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	20000120 	.word	0x20000120

0800b5a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e01f      	b.n	800b5f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	79fa      	ldrb	r2, [r7, #7]
 800b5ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f005 f839 	bl	8010664 <USBD_LL_Init>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b5f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d101      	bne.n	800b618 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b614:	2303      	movs	r3, #3
 800b616:	e025      	b.n	800b664 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	32ae      	adds	r2, #174	; 0xae
 800b62a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00f      	beq.n	800b654 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	32ae      	adds	r2, #174	; 0xae
 800b63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b644:	f107 020e 	add.w	r2, r7, #14
 800b648:	4610      	mov	r0, r2
 800b64a:	4798      	blx	r3
 800b64c:	4602      	mov	r2, r0
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b65a:	1c5a      	adds	r2, r3, #1
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f005 f841 	bl	80106fc <USBD_LL_Start>
 800b67a:	4603      	mov	r3, r0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b68c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b68e:	4618      	mov	r0, r3
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b084      	sub	sp, #16
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d009      	beq.n	800b6c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	78fa      	ldrb	r2, [r7, #3]
 800b6be:	4611      	mov	r1, r2
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	4798      	blx	r3
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b084      	sub	sp, #16
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	78fa      	ldrb	r2, [r7, #3]
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	4798      	blx	r3
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b706:	b580      	push	{r7, lr}
 800b708:	b084      	sub	sp, #16
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	4618      	mov	r0, r3
 800b71a:	f001 f908 	bl	800c92e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2201      	movs	r2, #1
 800b722:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b72c:	461a      	mov	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b73a:	f003 031f 	and.w	r3, r3, #31
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d01a      	beq.n	800b778 <USBD_LL_SetupStage+0x72>
 800b742:	2b02      	cmp	r3, #2
 800b744:	d822      	bhi.n	800b78c <USBD_LL_SetupStage+0x86>
 800b746:	2b00      	cmp	r3, #0
 800b748:	d002      	beq.n	800b750 <USBD_LL_SetupStage+0x4a>
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d00a      	beq.n	800b764 <USBD_LL_SetupStage+0x5e>
 800b74e:	e01d      	b.n	800b78c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b756:	4619      	mov	r1, r3
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 fb5f 	bl	800be1c <USBD_StdDevReq>
 800b75e:	4603      	mov	r3, r0
 800b760:	73fb      	strb	r3, [r7, #15]
      break;
 800b762:	e020      	b.n	800b7a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fbc7 	bl	800bf00 <USBD_StdItfReq>
 800b772:	4603      	mov	r3, r0
 800b774:	73fb      	strb	r3, [r7, #15]
      break;
 800b776:	e016      	b.n	800b7a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fc29 	bl	800bfd8 <USBD_StdEPReq>
 800b786:	4603      	mov	r3, r0
 800b788:	73fb      	strb	r3, [r7, #15]
      break;
 800b78a:	e00c      	b.n	800b7a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b792:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b796:	b2db      	uxtb	r3, r3
 800b798:	4619      	mov	r1, r3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f005 f80e 	bl	80107bc <USBD_LL_StallEP>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b7a4:	bf00      	nop
  }

  return ret;
 800b7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b7c2:	7afb      	ldrb	r3, [r7, #11]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d16e      	bne.n	800b8a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b7ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	f040 8098 	bne.w	800b90c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	689a      	ldr	r2, [r3, #8]
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d913      	bls.n	800b810 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	689a      	ldr	r2, [r3, #8]
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	1ad2      	subs	r2, r2, r3
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	68da      	ldr	r2, [r3, #12]
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	4293      	cmp	r3, r2
 800b800:	bf28      	it	cs
 800b802:	4613      	movcs	r3, r2
 800b804:	461a      	mov	r2, r3
 800b806:	6879      	ldr	r1, [r7, #4]
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f001 f984 	bl	800cb16 <USBD_CtlContinueRx>
 800b80e:	e07d      	b.n	800b90c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b816:	f003 031f 	and.w	r3, r3, #31
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d014      	beq.n	800b848 <USBD_LL_DataOutStage+0x98>
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d81d      	bhi.n	800b85e <USBD_LL_DataOutStage+0xae>
 800b822:	2b00      	cmp	r3, #0
 800b824:	d002      	beq.n	800b82c <USBD_LL_DataOutStage+0x7c>
 800b826:	2b01      	cmp	r3, #1
 800b828:	d003      	beq.n	800b832 <USBD_LL_DataOutStage+0x82>
 800b82a:	e018      	b.n	800b85e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b82c:	2300      	movs	r3, #0
 800b82e:	75bb      	strb	r3, [r7, #22]
            break;
 800b830:	e018      	b.n	800b864 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	4619      	mov	r1, r3
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f000 fa5e 	bl	800bcfe <USBD_CoreFindIF>
 800b842:	4603      	mov	r3, r0
 800b844:	75bb      	strb	r3, [r7, #22]
            break;
 800b846:	e00d      	b.n	800b864 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	4619      	mov	r1, r3
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f000 fa60 	bl	800bd18 <USBD_CoreFindEP>
 800b858:	4603      	mov	r3, r0
 800b85a:	75bb      	strb	r3, [r7, #22]
            break;
 800b85c:	e002      	b.n	800b864 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b85e:	2300      	movs	r3, #0
 800b860:	75bb      	strb	r3, [r7, #22]
            break;
 800b862:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b864:	7dbb      	ldrb	r3, [r7, #22]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d119      	bne.n	800b89e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b03      	cmp	r3, #3
 800b874:	d113      	bne.n	800b89e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b876:	7dba      	ldrb	r2, [r7, #22]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	32ae      	adds	r2, #174	; 0xae
 800b87c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00b      	beq.n	800b89e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b886:	7dba      	ldrb	r2, [r7, #22]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b88e:	7dba      	ldrb	r2, [r7, #22]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	32ae      	adds	r2, #174	; 0xae
 800b894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f001 f94a 	bl	800cb38 <USBD_CtlSendStatus>
 800b8a4:	e032      	b.n	800b90c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b8a6:	7afb      	ldrb	r3, [r7, #11]
 800b8a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f000 fa31 	bl	800bd18 <USBD_CoreFindEP>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8ba:	7dbb      	ldrb	r3, [r7, #22]
 800b8bc:	2bff      	cmp	r3, #255	; 0xff
 800b8be:	d025      	beq.n	800b90c <USBD_LL_DataOutStage+0x15c>
 800b8c0:	7dbb      	ldrb	r3, [r7, #22]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d122      	bne.n	800b90c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	2b03      	cmp	r3, #3
 800b8d0:	d117      	bne.n	800b902 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b8d2:	7dba      	ldrb	r2, [r7, #22]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	32ae      	adds	r2, #174	; 0xae
 800b8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00f      	beq.n	800b902 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b8e2:	7dba      	ldrb	r2, [r7, #22]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b8ea:	7dba      	ldrb	r2, [r7, #22]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	32ae      	adds	r2, #174	; 0xae
 800b8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	7afa      	ldrb	r2, [r7, #11]
 800b8f8:	4611      	mov	r1, r2
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	4798      	blx	r3
 800b8fe:	4603      	mov	r3, r0
 800b900:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b902:	7dfb      	ldrb	r3, [r7, #23]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b908:	7dfb      	ldrb	r3, [r7, #23]
 800b90a:	e000      	b.n	800b90e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b086      	sub	sp, #24
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	460b      	mov	r3, r1
 800b920:	607a      	str	r2, [r7, #4]
 800b922:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b924:	7afb      	ldrb	r3, [r7, #11]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d16f      	bne.n	800ba0a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	3314      	adds	r3, #20
 800b92e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b936:	2b02      	cmp	r3, #2
 800b938:	d15a      	bne.n	800b9f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	689a      	ldr	r2, [r3, #8]
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	429a      	cmp	r2, r3
 800b944:	d914      	bls.n	800b970 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	689a      	ldr	r2, [r3, #8]
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	1ad2      	subs	r2, r2, r3
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	461a      	mov	r2, r3
 800b95a:	6879      	ldr	r1, [r7, #4]
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f001 f8ac 	bl	800caba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b962:	2300      	movs	r3, #0
 800b964:	2200      	movs	r2, #0
 800b966:	2100      	movs	r1, #0
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f004 ffd1 	bl	8010910 <USBD_LL_PrepareReceive>
 800b96e:	e03f      	b.n	800b9f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	68da      	ldr	r2, [r3, #12]
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d11c      	bne.n	800b9b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b984:	429a      	cmp	r2, r3
 800b986:	d316      	bcc.n	800b9b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b992:	429a      	cmp	r2, r3
 800b994:	d20f      	bcs.n	800b9b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b996:	2200      	movs	r2, #0
 800b998:	2100      	movs	r1, #0
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f001 f88d 	bl	800caba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f004 ffae 	bl	8010910 <USBD_LL_PrepareReceive>
 800b9b4:	e01c      	b.n	800b9f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d10f      	bne.n	800b9e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d009      	beq.n	800b9e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9e2:	2180      	movs	r1, #128	; 0x80
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f004 fee9 	bl	80107bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f001 f8b7 	bl	800cb5e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d03a      	beq.n	800ba70 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f7ff fe42 	bl	800b684 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ba08:	e032      	b.n	800ba70 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ba0a:	7afb      	ldrb	r3, [r7, #11]
 800ba0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	4619      	mov	r1, r3
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f000 f97f 	bl	800bd18 <USBD_CoreFindEP>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba1e:	7dfb      	ldrb	r3, [r7, #23]
 800ba20:	2bff      	cmp	r3, #255	; 0xff
 800ba22:	d025      	beq.n	800ba70 <USBD_LL_DataInStage+0x15a>
 800ba24:	7dfb      	ldrb	r3, [r7, #23]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d122      	bne.n	800ba70 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	2b03      	cmp	r3, #3
 800ba34:	d11c      	bne.n	800ba70 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba36:	7dfa      	ldrb	r2, [r7, #23]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	32ae      	adds	r2, #174	; 0xae
 800ba3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba40:	695b      	ldr	r3, [r3, #20]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d014      	beq.n	800ba70 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ba46:	7dfa      	ldrb	r2, [r7, #23]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba4e:	7dfa      	ldrb	r2, [r7, #23]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	32ae      	adds	r2, #174	; 0xae
 800ba54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	7afa      	ldrb	r2, [r7, #11]
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	4798      	blx	r3
 800ba62:	4603      	mov	r3, r0
 800ba64:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba66:	7dbb      	ldrb	r3, [r7, #22]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d001      	beq.n	800ba70 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba6c:	7dbb      	ldrb	r3, [r7, #22]
 800ba6e:	e000      	b.n	800ba72 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3718      	adds	r7, #24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b084      	sub	sp, #16
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba82:	2300      	movs	r3, #0
 800ba84:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d014      	beq.n	800bae0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00e      	beq.n	800bae0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	6852      	ldr	r2, [r2, #4]
 800bace:	b2d2      	uxtb	r2, r2
 800bad0:	4611      	mov	r1, r2
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	4798      	blx	r3
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800badc:	2303      	movs	r3, #3
 800bade:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bae0:	2340      	movs	r3, #64	; 0x40
 800bae2:	2200      	movs	r2, #0
 800bae4:	2100      	movs	r1, #0
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f004 fe23 	bl	8010732 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2240      	movs	r2, #64	; 0x40
 800baf8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bafc:	2340      	movs	r3, #64	; 0x40
 800bafe:	2200      	movs	r2, #0
 800bb00:	2180      	movs	r1, #128	; 0x80
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f004 fe15 	bl	8010732 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2240      	movs	r2, #64	; 0x40
 800bb12:	621a      	str	r2, [r3, #32]

  return ret;
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb1e:	b480      	push	{r7}
 800bb20:	b083      	sub	sp, #12
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	460b      	mov	r3, r1
 800bb28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	78fa      	ldrb	r2, [r7, #3]
 800bb2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	370c      	adds	r7, #12
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr

0800bb3e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb3e:	b480      	push	{r7}
 800bb40:	b083      	sub	sp, #12
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb4c:	b2da      	uxtb	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2204      	movs	r2, #4
 800bb58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b083      	sub	sp, #12
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b04      	cmp	r3, #4
 800bb7c:	d106      	bne.n	800bb8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	d110      	bne.n	800bbd0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00b      	beq.n	800bbd0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d005      	beq.n	800bbd0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbca:	69db      	ldr	r3, [r3, #28]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	32ae      	adds	r2, #174	; 0xae
 800bbf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d101      	bne.n	800bbfc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	e01c      	b.n	800bc36 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	2b03      	cmp	r3, #3
 800bc06:	d115      	bne.n	800bc34 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	32ae      	adds	r2, #174	; 0xae
 800bc12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc16:	6a1b      	ldr	r3, [r3, #32]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00b      	beq.n	800bc34 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	32ae      	adds	r2, #174	; 0xae
 800bc26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc2a:	6a1b      	ldr	r3, [r3, #32]
 800bc2c:	78fa      	ldrb	r2, [r7, #3]
 800bc2e:	4611      	mov	r1, r2
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b082      	sub	sp, #8
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	460b      	mov	r3, r1
 800bc48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	32ae      	adds	r2, #174	; 0xae
 800bc54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d101      	bne.n	800bc60 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e01c      	b.n	800bc9a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b03      	cmp	r3, #3
 800bc6a:	d115      	bne.n	800bc98 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	32ae      	adds	r2, #174	; 0xae
 800bc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00b      	beq.n	800bc98 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	32ae      	adds	r2, #174	; 0xae
 800bc8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc90:	78fa      	ldrb	r2, [r7, #3]
 800bc92:	4611      	mov	r1, r2
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3708      	adds	r7, #8
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bca2:	b480      	push	{r7}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00e      	beq.n	800bcf4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	6852      	ldr	r2, [r2, #4]
 800bce2:	b2d2      	uxtb	r2, r2
 800bce4:	4611      	mov	r1, r2
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	4798      	blx	r3
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d001      	beq.n	800bcf4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcfe:	b480      	push	{r7}
 800bd00:	b083      	sub	sp, #12
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	460b      	mov	r3, r1
 800bd08:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd0a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd24:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	370c      	adds	r7, #12
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b086      	sub	sp, #24
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd46:	2300      	movs	r3, #0
 800bd48:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	885b      	ldrh	r3, [r3, #2]
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d920      	bls.n	800bd9c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd62:	e013      	b.n	800bd8c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd64:	f107 030a 	add.w	r3, r7, #10
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6978      	ldr	r0, [r7, #20]
 800bd6c:	f000 f81b 	bl	800bda6 <USBD_GetNextDesc>
 800bd70:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	785b      	ldrb	r3, [r3, #1]
 800bd76:	2b05      	cmp	r3, #5
 800bd78:	d108      	bne.n	800bd8c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	789b      	ldrb	r3, [r3, #2]
 800bd82:	78fa      	ldrb	r2, [r7, #3]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d008      	beq.n	800bd9a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	885b      	ldrh	r3, [r3, #2]
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	897b      	ldrh	r3, [r7, #10]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d8e5      	bhi.n	800bd64 <USBD_GetEpDesc+0x32>
 800bd98:	e000      	b.n	800bd9c <USBD_GetEpDesc+0x6a>
          break;
 800bd9a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd9c:	693b      	ldr	r3, [r7, #16]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bda6:	b480      	push	{r7}
 800bda8:	b085      	sub	sp, #20
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
 800bdae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	881a      	ldrh	r2, [r3, #0]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	4413      	add	r3, r2
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4413      	add	r3, r2
 800bdd0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b087      	sub	sp, #28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdfe:	8a3b      	ldrh	r3, [r7, #16]
 800be00:	021b      	lsls	r3, r3, #8
 800be02:	b21a      	sxth	r2, r3
 800be04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be08:	4313      	orrs	r3, r2
 800be0a:	b21b      	sxth	r3, r3
 800be0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be0e:	89fb      	ldrh	r3, [r7, #14]
}
 800be10:	4618      	mov	r0, r3
 800be12:	371c      	adds	r7, #28
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be32:	2b40      	cmp	r3, #64	; 0x40
 800be34:	d005      	beq.n	800be42 <USBD_StdDevReq+0x26>
 800be36:	2b40      	cmp	r3, #64	; 0x40
 800be38:	d857      	bhi.n	800beea <USBD_StdDevReq+0xce>
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00f      	beq.n	800be5e <USBD_StdDevReq+0x42>
 800be3e:	2b20      	cmp	r3, #32
 800be40:	d153      	bne.n	800beea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	32ae      	adds	r2, #174	; 0xae
 800be4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	4798      	blx	r3
 800be58:	4603      	mov	r3, r0
 800be5a:	73fb      	strb	r3, [r7, #15]
      break;
 800be5c:	e04a      	b.n	800bef4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	785b      	ldrb	r3, [r3, #1]
 800be62:	2b09      	cmp	r3, #9
 800be64:	d83b      	bhi.n	800bede <USBD_StdDevReq+0xc2>
 800be66:	a201      	add	r2, pc, #4	; (adr r2, 800be6c <USBD_StdDevReq+0x50>)
 800be68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6c:	0800bec1 	.word	0x0800bec1
 800be70:	0800bed5 	.word	0x0800bed5
 800be74:	0800bedf 	.word	0x0800bedf
 800be78:	0800becb 	.word	0x0800becb
 800be7c:	0800bedf 	.word	0x0800bedf
 800be80:	0800be9f 	.word	0x0800be9f
 800be84:	0800be95 	.word	0x0800be95
 800be88:	0800bedf 	.word	0x0800bedf
 800be8c:	0800beb7 	.word	0x0800beb7
 800be90:	0800bea9 	.word	0x0800bea9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa3c 	bl	800c314 <USBD_GetDescriptor>
          break;
 800be9c:	e024      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fba1 	bl	800c5e8 <USBD_SetAddress>
          break;
 800bea6:	e01f      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fbe0 	bl	800c670 <USBD_SetConfig>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]
          break;
 800beb4:	e018      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fc83 	bl	800c7c4 <USBD_GetConfig>
          break;
 800bebe:	e013      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fcb4 	bl	800c830 <USBD_GetStatus>
          break;
 800bec8:	e00e      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fce3 	bl	800c898 <USBD_SetFeature>
          break;
 800bed2:	e009      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fd07 	bl	800c8ea <USBD_ClrFeature>
          break;
 800bedc:	e004      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fd5e 	bl	800c9a2 <USBD_CtlError>
          break;
 800bee6:	bf00      	nop
      }
      break;
 800bee8:	e004      	b.n	800bef4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800beea:	6839      	ldr	r1, [r7, #0]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fd58 	bl	800c9a2 <USBD_CtlError>
      break;
 800bef2:	bf00      	nop
  }

  return ret;
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop

0800bf00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf16:	2b40      	cmp	r3, #64	; 0x40
 800bf18:	d005      	beq.n	800bf26 <USBD_StdItfReq+0x26>
 800bf1a:	2b40      	cmp	r3, #64	; 0x40
 800bf1c:	d852      	bhi.n	800bfc4 <USBD_StdItfReq+0xc4>
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d001      	beq.n	800bf26 <USBD_StdItfReq+0x26>
 800bf22:	2b20      	cmp	r3, #32
 800bf24:	d14e      	bne.n	800bfc4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	d840      	bhi.n	800bfb6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	889b      	ldrh	r3, [r3, #4]
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d836      	bhi.n	800bfac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	889b      	ldrh	r3, [r3, #4]
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7ff fed9 	bl	800bcfe <USBD_CoreFindIF>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	2bff      	cmp	r3, #255	; 0xff
 800bf54:	d01d      	beq.n	800bf92 <USBD_StdItfReq+0x92>
 800bf56:	7bbb      	ldrb	r3, [r7, #14]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d11a      	bne.n	800bf92 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf5c:	7bba      	ldrb	r2, [r7, #14]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	32ae      	adds	r2, #174	; 0xae
 800bf62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00f      	beq.n	800bf8c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf6c:	7bba      	ldrb	r2, [r7, #14]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf74:	7bba      	ldrb	r2, [r7, #14]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	32ae      	adds	r2, #174	; 0xae
 800bf7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	4798      	blx	r3
 800bf86:	4603      	mov	r3, r0
 800bf88:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf8a:	e004      	b.n	800bf96 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf90:	e001      	b.n	800bf96 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf92:	2303      	movs	r3, #3
 800bf94:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	88db      	ldrh	r3, [r3, #6]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d110      	bne.n	800bfc0 <USBD_StdItfReq+0xc0>
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10d      	bne.n	800bfc0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fdc7 	bl	800cb38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfaa:	e009      	b.n	800bfc0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fcf7 	bl	800c9a2 <USBD_CtlError>
          break;
 800bfb4:	e004      	b.n	800bfc0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fcf2 	bl	800c9a2 <USBD_CtlError>
          break;
 800bfbe:	e000      	b.n	800bfc2 <USBD_StdItfReq+0xc2>
          break;
 800bfc0:	bf00      	nop
      }
      break;
 800bfc2:	e004      	b.n	800bfce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fceb 	bl	800c9a2 <USBD_CtlError>
      break;
 800bfcc:	bf00      	nop
  }

  return ret;
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	889b      	ldrh	r3, [r3, #4]
 800bfea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bff4:	2b40      	cmp	r3, #64	; 0x40
 800bff6:	d007      	beq.n	800c008 <USBD_StdEPReq+0x30>
 800bff8:	2b40      	cmp	r3, #64	; 0x40
 800bffa:	f200 817f 	bhi.w	800c2fc <USBD_StdEPReq+0x324>
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d02a      	beq.n	800c058 <USBD_StdEPReq+0x80>
 800c002:	2b20      	cmp	r3, #32
 800c004:	f040 817a 	bne.w	800c2fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7ff fe83 	bl	800bd18 <USBD_CoreFindEP>
 800c012:	4603      	mov	r3, r0
 800c014:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c016:	7b7b      	ldrb	r3, [r7, #13]
 800c018:	2bff      	cmp	r3, #255	; 0xff
 800c01a:	f000 8174 	beq.w	800c306 <USBD_StdEPReq+0x32e>
 800c01e:	7b7b      	ldrb	r3, [r7, #13]
 800c020:	2b00      	cmp	r3, #0
 800c022:	f040 8170 	bne.w	800c306 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c026:	7b7a      	ldrb	r2, [r7, #13]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c02e:	7b7a      	ldrb	r2, [r7, #13]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	32ae      	adds	r2, #174	; 0xae
 800c034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f000 8163 	beq.w	800c306 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c040:	7b7a      	ldrb	r2, [r7, #13]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	32ae      	adds	r2, #174	; 0xae
 800c046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	6839      	ldr	r1, [r7, #0]
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	4798      	blx	r3
 800c052:	4603      	mov	r3, r0
 800c054:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c056:	e156      	b.n	800c306 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	785b      	ldrb	r3, [r3, #1]
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d008      	beq.n	800c072 <USBD_StdEPReq+0x9a>
 800c060:	2b03      	cmp	r3, #3
 800c062:	f300 8145 	bgt.w	800c2f0 <USBD_StdEPReq+0x318>
 800c066:	2b00      	cmp	r3, #0
 800c068:	f000 809b 	beq.w	800c1a2 <USBD_StdEPReq+0x1ca>
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d03c      	beq.n	800c0ea <USBD_StdEPReq+0x112>
 800c070:	e13e      	b.n	800c2f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d002      	beq.n	800c084 <USBD_StdEPReq+0xac>
 800c07e:	2b03      	cmp	r3, #3
 800c080:	d016      	beq.n	800c0b0 <USBD_StdEPReq+0xd8>
 800c082:	e02c      	b.n	800c0de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c084:	7bbb      	ldrb	r3, [r7, #14]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00d      	beq.n	800c0a6 <USBD_StdEPReq+0xce>
 800c08a:	7bbb      	ldrb	r3, [r7, #14]
 800c08c:	2b80      	cmp	r3, #128	; 0x80
 800c08e:	d00a      	beq.n	800c0a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c090:	7bbb      	ldrb	r3, [r7, #14]
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f004 fb91 	bl	80107bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c09a:	2180      	movs	r1, #128	; 0x80
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f004 fb8d 	bl	80107bc <USBD_LL_StallEP>
 800c0a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0a4:	e020      	b.n	800c0e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fc7a 	bl	800c9a2 <USBD_CtlError>
              break;
 800c0ae:	e01b      	b.n	800c0e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	885b      	ldrh	r3, [r3, #2]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10e      	bne.n	800c0d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00b      	beq.n	800c0d6 <USBD_StdEPReq+0xfe>
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
 800c0c0:	2b80      	cmp	r3, #128	; 0x80
 800c0c2:	d008      	beq.n	800c0d6 <USBD_StdEPReq+0xfe>
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	88db      	ldrh	r3, [r3, #6]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d104      	bne.n	800c0d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f004 fb73 	bl	80107bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fd2e 	bl	800cb38 <USBD_CtlSendStatus>

              break;
 800c0dc:	e004      	b.n	800c0e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fc5e 	bl	800c9a2 <USBD_CtlError>
              break;
 800c0e6:	bf00      	nop
          }
          break;
 800c0e8:	e107      	b.n	800c2fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d002      	beq.n	800c0fc <USBD_StdEPReq+0x124>
 800c0f6:	2b03      	cmp	r3, #3
 800c0f8:	d016      	beq.n	800c128 <USBD_StdEPReq+0x150>
 800c0fa:	e04b      	b.n	800c194 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00d      	beq.n	800c11e <USBD_StdEPReq+0x146>
 800c102:	7bbb      	ldrb	r3, [r7, #14]
 800c104:	2b80      	cmp	r3, #128	; 0x80
 800c106:	d00a      	beq.n	800c11e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c108:	7bbb      	ldrb	r3, [r7, #14]
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f004 fb55 	bl	80107bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c112:	2180      	movs	r1, #128	; 0x80
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f004 fb51 	bl	80107bc <USBD_LL_StallEP>
 800c11a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c11c:	e040      	b.n	800c1a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fc3e 	bl	800c9a2 <USBD_CtlError>
              break;
 800c126:	e03b      	b.n	800c1a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	885b      	ldrh	r3, [r3, #2]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d136      	bne.n	800c19e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c130:	7bbb      	ldrb	r3, [r7, #14]
 800c132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c136:	2b00      	cmp	r3, #0
 800c138:	d004      	beq.n	800c144 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	4619      	mov	r1, r3
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f004 fb5b 	bl	80107fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fcf7 	bl	800cb38 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff fde2 	bl	800bd18 <USBD_CoreFindEP>
 800c154:	4603      	mov	r3, r0
 800c156:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c158:	7b7b      	ldrb	r3, [r7, #13]
 800c15a:	2bff      	cmp	r3, #255	; 0xff
 800c15c:	d01f      	beq.n	800c19e <USBD_StdEPReq+0x1c6>
 800c15e:	7b7b      	ldrb	r3, [r7, #13]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d11c      	bne.n	800c19e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c164:	7b7a      	ldrb	r2, [r7, #13]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c16c:	7b7a      	ldrb	r2, [r7, #13]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	32ae      	adds	r2, #174	; 0xae
 800c172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d010      	beq.n	800c19e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c17c:	7b7a      	ldrb	r2, [r7, #13]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	32ae      	adds	r2, #174	; 0xae
 800c182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	4798      	blx	r3
 800c18e:	4603      	mov	r3, r0
 800c190:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c192:	e004      	b.n	800c19e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c194:	6839      	ldr	r1, [r7, #0]
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 fc03 	bl	800c9a2 <USBD_CtlError>
              break;
 800c19c:	e000      	b.n	800c1a0 <USBD_StdEPReq+0x1c8>
              break;
 800c19e:	bf00      	nop
          }
          break;
 800c1a0:	e0ab      	b.n	800c2fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d002      	beq.n	800c1b4 <USBD_StdEPReq+0x1dc>
 800c1ae:	2b03      	cmp	r3, #3
 800c1b0:	d032      	beq.n	800c218 <USBD_StdEPReq+0x240>
 800c1b2:	e097      	b.n	800c2e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d007      	beq.n	800c1ca <USBD_StdEPReq+0x1f2>
 800c1ba:	7bbb      	ldrb	r3, [r7, #14]
 800c1bc:	2b80      	cmp	r3, #128	; 0x80
 800c1be:	d004      	beq.n	800c1ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fbed 	bl	800c9a2 <USBD_CtlError>
                break;
 800c1c8:	e091      	b.n	800c2ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	da0b      	bge.n	800c1ea <USBD_StdEPReq+0x212>
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
 800c1d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1d8:	4613      	mov	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	3310      	adds	r3, #16
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	e00b      	b.n	800c202 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	4413      	add	r3, r2
 800c200:	3304      	adds	r3, #4
 800c202:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	2200      	movs	r2, #0
 800c208:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2202      	movs	r2, #2
 800c20e:	4619      	mov	r1, r3
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fc37 	bl	800ca84 <USBD_CtlSendData>
              break;
 800c216:	e06a      	b.n	800c2ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	da11      	bge.n	800c244 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c220:	7bbb      	ldrb	r3, [r7, #14]
 800c222:	f003 020f 	and.w	r2, r3, #15
 800c226:	6879      	ldr	r1, [r7, #4]
 800c228:	4613      	mov	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	440b      	add	r3, r1
 800c232:	3324      	adds	r3, #36	; 0x24
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d117      	bne.n	800c26a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fbb0 	bl	800c9a2 <USBD_CtlError>
                  break;
 800c242:	e054      	b.n	800c2ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c244:	7bbb      	ldrb	r3, [r7, #14]
 800c246:	f003 020f 	and.w	r2, r3, #15
 800c24a:	6879      	ldr	r1, [r7, #4]
 800c24c:	4613      	mov	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4413      	add	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	440b      	add	r3, r1
 800c256:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c25a:	881b      	ldrh	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d104      	bne.n	800c26a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c260:	6839      	ldr	r1, [r7, #0]
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 fb9d 	bl	800c9a2 <USBD_CtlError>
                  break;
 800c268:	e041      	b.n	800c2ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c26a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	da0b      	bge.n	800c28a <USBD_StdEPReq+0x2b2>
 800c272:	7bbb      	ldrb	r3, [r7, #14]
 800c274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c278:	4613      	mov	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	3310      	adds	r3, #16
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	4413      	add	r3, r2
 800c286:	3304      	adds	r3, #4
 800c288:	e00b      	b.n	800c2a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
 800c28c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c290:	4613      	mov	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	4413      	add	r3, r2
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c2a4:	7bbb      	ldrb	r3, [r7, #14]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d002      	beq.n	800c2b0 <USBD_StdEPReq+0x2d8>
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	2b80      	cmp	r3, #128	; 0x80
 800c2ae:	d103      	bne.n	800c2b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
 800c2b6:	e00e      	b.n	800c2d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f004 fabb 	bl	8010838 <USBD_LL_IsStallEP>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d003      	beq.n	800c2d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	e002      	b.n	800c2d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	2202      	movs	r2, #2
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fbd1 	bl	800ca84 <USBD_CtlSendData>
              break;
 800c2e2:	e004      	b.n	800c2ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fb5b 	bl	800c9a2 <USBD_CtlError>
              break;
 800c2ec:	bf00      	nop
          }
          break;
 800c2ee:	e004      	b.n	800c2fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c2f0:	6839      	ldr	r1, [r7, #0]
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fb55 	bl	800c9a2 <USBD_CtlError>
          break;
 800c2f8:	bf00      	nop
      }
      break;
 800c2fa:	e005      	b.n	800c308 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fb4f 	bl	800c9a2 <USBD_CtlError>
      break;
 800c304:	e000      	b.n	800c308 <USBD_StdEPReq+0x330>
      break;
 800c306:	bf00      	nop
  }

  return ret;
 800c308:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c31e:	2300      	movs	r3, #0
 800c320:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c322:	2300      	movs	r3, #0
 800c324:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c326:	2300      	movs	r3, #0
 800c328:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	885b      	ldrh	r3, [r3, #2]
 800c32e:	0a1b      	lsrs	r3, r3, #8
 800c330:	b29b      	uxth	r3, r3
 800c332:	3b01      	subs	r3, #1
 800c334:	2b06      	cmp	r3, #6
 800c336:	f200 8128 	bhi.w	800c58a <USBD_GetDescriptor+0x276>
 800c33a:	a201      	add	r2, pc, #4	; (adr r2, 800c340 <USBD_GetDescriptor+0x2c>)
 800c33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c340:	0800c35d 	.word	0x0800c35d
 800c344:	0800c375 	.word	0x0800c375
 800c348:	0800c3b5 	.word	0x0800c3b5
 800c34c:	0800c58b 	.word	0x0800c58b
 800c350:	0800c58b 	.word	0x0800c58b
 800c354:	0800c52b 	.word	0x0800c52b
 800c358:	0800c557 	.word	0x0800c557
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	7c12      	ldrb	r2, [r2, #16]
 800c368:	f107 0108 	add.w	r1, r7, #8
 800c36c:	4610      	mov	r0, r2
 800c36e:	4798      	blx	r3
 800c370:	60f8      	str	r0, [r7, #12]
      break;
 800c372:	e112      	b.n	800c59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	7c1b      	ldrb	r3, [r3, #16]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10d      	bne.n	800c398 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c384:	f107 0208 	add.w	r2, r7, #8
 800c388:	4610      	mov	r0, r2
 800c38a:	4798      	blx	r3
 800c38c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3301      	adds	r3, #1
 800c392:	2202      	movs	r2, #2
 800c394:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c396:	e100      	b.n	800c59a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a0:	f107 0208 	add.w	r2, r7, #8
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	4798      	blx	r3
 800c3a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	701a      	strb	r2, [r3, #0]
      break;
 800c3b2:	e0f2      	b.n	800c59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	885b      	ldrh	r3, [r3, #2]
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b05      	cmp	r3, #5
 800c3bc:	f200 80ac 	bhi.w	800c518 <USBD_GetDescriptor+0x204>
 800c3c0:	a201      	add	r2, pc, #4	; (adr r2, 800c3c8 <USBD_GetDescriptor+0xb4>)
 800c3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c6:	bf00      	nop
 800c3c8:	0800c3e1 	.word	0x0800c3e1
 800c3cc:	0800c415 	.word	0x0800c415
 800c3d0:	0800c449 	.word	0x0800c449
 800c3d4:	0800c47d 	.word	0x0800c47d
 800c3d8:	0800c4b1 	.word	0x0800c4b1
 800c3dc:	0800c4e5 	.word	0x0800c4e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00b      	beq.n	800c404 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	7c12      	ldrb	r2, [r2, #16]
 800c3f8:	f107 0108 	add.w	r1, r7, #8
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	4798      	blx	r3
 800c400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c402:	e091      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c404:	6839      	ldr	r1, [r7, #0]
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 facb 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c40c:	7afb      	ldrb	r3, [r7, #11]
 800c40e:	3301      	adds	r3, #1
 800c410:	72fb      	strb	r3, [r7, #11]
          break;
 800c412:	e089      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00b      	beq.n	800c438 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	7c12      	ldrb	r2, [r2, #16]
 800c42c:	f107 0108 	add.w	r1, r7, #8
 800c430:	4610      	mov	r0, r2
 800c432:	4798      	blx	r3
 800c434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c436:	e077      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fab1 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c440:	7afb      	ldrb	r3, [r7, #11]
 800c442:	3301      	adds	r3, #1
 800c444:	72fb      	strb	r3, [r7, #11]
          break;
 800c446:	e06f      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00b      	beq.n	800c46c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	7c12      	ldrb	r2, [r2, #16]
 800c460:	f107 0108 	add.w	r1, r7, #8
 800c464:	4610      	mov	r0, r2
 800c466:	4798      	blx	r3
 800c468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c46a:	e05d      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fa97 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c474:	7afb      	ldrb	r3, [r7, #11]
 800c476:	3301      	adds	r3, #1
 800c478:	72fb      	strb	r3, [r7, #11]
          break;
 800c47a:	e055      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00b      	beq.n	800c4a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	7c12      	ldrb	r2, [r2, #16]
 800c494:	f107 0108 	add.w	r1, r7, #8
 800c498:	4610      	mov	r0, r2
 800c49a:	4798      	blx	r3
 800c49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c49e:	e043      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fa7d 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c4a8:	7afb      	ldrb	r3, [r7, #11]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ae:	e03b      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4b6:	695b      	ldr	r3, [r3, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00b      	beq.n	800c4d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c2:	695b      	ldr	r3, [r3, #20]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	7c12      	ldrb	r2, [r2, #16]
 800c4c8:	f107 0108 	add.w	r1, r7, #8
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4798      	blx	r3
 800c4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4d2:	e029      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fa63 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c4dc:	7afb      	ldrb	r3, [r7, #11]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4e2:	e021      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00b      	beq.n	800c508 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	7c12      	ldrb	r2, [r2, #16]
 800c4fc:	f107 0108 	add.w	r1, r7, #8
 800c500:	4610      	mov	r0, r2
 800c502:	4798      	blx	r3
 800c504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c506:	e00f      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fa49 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c510:	7afb      	ldrb	r3, [r7, #11]
 800c512:	3301      	adds	r3, #1
 800c514:	72fb      	strb	r3, [r7, #11]
          break;
 800c516:	e007      	b.n	800c528 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fa41 	bl	800c9a2 <USBD_CtlError>
          err++;
 800c520:	7afb      	ldrb	r3, [r7, #11]
 800c522:	3301      	adds	r3, #1
 800c524:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c526:	bf00      	nop
      }
      break;
 800c528:	e037      	b.n	800c59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	7c1b      	ldrb	r3, [r3, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d109      	bne.n	800c546 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c53a:	f107 0208 	add.w	r2, r7, #8
 800c53e:	4610      	mov	r0, r2
 800c540:	4798      	blx	r3
 800c542:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c544:	e029      	b.n	800c59a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fa2a 	bl	800c9a2 <USBD_CtlError>
        err++;
 800c54e:	7afb      	ldrb	r3, [r7, #11]
 800c550:	3301      	adds	r3, #1
 800c552:	72fb      	strb	r3, [r7, #11]
      break;
 800c554:	e021      	b.n	800c59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	7c1b      	ldrb	r3, [r3, #16]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10d      	bne.n	800c57a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c566:	f107 0208 	add.w	r2, r7, #8
 800c56a:	4610      	mov	r0, r2
 800c56c:	4798      	blx	r3
 800c56e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	3301      	adds	r3, #1
 800c574:	2207      	movs	r2, #7
 800c576:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c578:	e00f      	b.n	800c59a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c57a:	6839      	ldr	r1, [r7, #0]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 fa10 	bl	800c9a2 <USBD_CtlError>
        err++;
 800c582:	7afb      	ldrb	r3, [r7, #11]
 800c584:	3301      	adds	r3, #1
 800c586:	72fb      	strb	r3, [r7, #11]
      break;
 800c588:	e007      	b.n	800c59a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c58a:	6839      	ldr	r1, [r7, #0]
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 fa08 	bl	800c9a2 <USBD_CtlError>
      err++;
 800c592:	7afb      	ldrb	r3, [r7, #11]
 800c594:	3301      	adds	r3, #1
 800c596:	72fb      	strb	r3, [r7, #11]
      break;
 800c598:	bf00      	nop
  }

  if (err != 0U)
 800c59a:	7afb      	ldrb	r3, [r7, #11]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d11e      	bne.n	800c5de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	88db      	ldrh	r3, [r3, #6]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d016      	beq.n	800c5d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c5a8:	893b      	ldrh	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00e      	beq.n	800c5cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	88da      	ldrh	r2, [r3, #6]
 800c5b2:	893b      	ldrh	r3, [r7, #8]
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	bf28      	it	cs
 800c5b8:	4613      	movcs	r3, r2
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5be:	893b      	ldrh	r3, [r7, #8]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	68f9      	ldr	r1, [r7, #12]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fa5d 	bl	800ca84 <USBD_CtlSendData>
 800c5ca:	e009      	b.n	800c5e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f9e7 	bl	800c9a2 <USBD_CtlError>
 800c5d4:	e004      	b.n	800c5e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 faae 	bl	800cb38 <USBD_CtlSendStatus>
 800c5dc:	e000      	b.n	800c5e0 <USBD_GetDescriptor+0x2cc>
    return;
 800c5de:	bf00      	nop
  }
}
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop

0800c5e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	889b      	ldrh	r3, [r3, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d131      	bne.n	800c65e <USBD_SetAddress+0x76>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	88db      	ldrh	r3, [r3, #6]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d12d      	bne.n	800c65e <USBD_SetAddress+0x76>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	885b      	ldrh	r3, [r3, #2]
 800c606:	2b7f      	cmp	r3, #127	; 0x7f
 800c608:	d829      	bhi.n	800c65e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	885b      	ldrh	r3, [r3, #2]
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c614:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b03      	cmp	r3, #3
 800c620:	d104      	bne.n	800c62c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f9bc 	bl	800c9a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c62a:	e01d      	b.n	800c668 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7bfa      	ldrb	r2, [r7, #15]
 800c630:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	4619      	mov	r1, r3
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f004 f929 	bl	8010890 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fa7a 	bl	800cb38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c644:	7bfb      	ldrb	r3, [r7, #15]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d004      	beq.n	800c654 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2202      	movs	r2, #2
 800c64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c652:	e009      	b.n	800c668 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c65c:	e004      	b.n	800c668 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f99e 	bl	800c9a2 <USBD_CtlError>
  }
}
 800c666:	bf00      	nop
 800c668:	bf00      	nop
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c67a:	2300      	movs	r3, #0
 800c67c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	885b      	ldrh	r3, [r3, #2]
 800c682:	b2da      	uxtb	r2, r3
 800c684:	4b4e      	ldr	r3, [pc, #312]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c686:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c688:	4b4d      	ldr	r3, [pc, #308]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d905      	bls.n	800c69c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f985 	bl	800c9a2 <USBD_CtlError>
    return USBD_FAIL;
 800c698:	2303      	movs	r3, #3
 800c69a:	e08c      	b.n	800c7b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d002      	beq.n	800c6ae <USBD_SetConfig+0x3e>
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	d029      	beq.n	800c700 <USBD_SetConfig+0x90>
 800c6ac:	e075      	b.n	800c79a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6ae:	4b44      	ldr	r3, [pc, #272]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d020      	beq.n	800c6f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6b6:	4b42      	ldr	r3, [pc, #264]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6c0:	4b3f      	ldr	r3, [pc, #252]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7fe ffe7 	bl	800b69a <USBD_SetClassConfig>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d008      	beq.n	800c6e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f962 	bl	800c9a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6e6:	e065      	b.n	800c7b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 fa25 	bl	800cb38 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2203      	movs	r2, #3
 800c6f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6f6:	e05d      	b.n	800c7b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fa1d 	bl	800cb38 <USBD_CtlSendStatus>
      break;
 800c6fe:	e059      	b.n	800c7b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c700:	4b2f      	ldr	r3, [pc, #188]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d112      	bne.n	800c72e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2202      	movs	r2, #2
 800c70c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c710:	4b2b      	ldr	r3, [pc, #172]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	461a      	mov	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c71a:	4b29      	ldr	r3, [pc, #164]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7fe ffd6 	bl	800b6d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 fa06 	bl	800cb38 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c72c:	e042      	b.n	800c7b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c72e:	4b24      	ldr	r3, [pc, #144]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	461a      	mov	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d02a      	beq.n	800c792 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	b2db      	uxtb	r3, r3
 800c742:	4619      	mov	r1, r3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7fe ffc4 	bl	800b6d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c74a:	4b1d      	ldr	r3, [pc, #116]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c754:	4b1a      	ldr	r3, [pc, #104]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7fe ff9d 	bl	800b69a <USBD_SetClassConfig>
 800c760:	4603      	mov	r3, r0
 800c762:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00f      	beq.n	800c78a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 f918 	bl	800c9a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	b2db      	uxtb	r3, r3
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7fe ffa9 	bl	800b6d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2202      	movs	r2, #2
 800c784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c788:	e014      	b.n	800c7b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f9d4 	bl	800cb38 <USBD_CtlSendStatus>
      break;
 800c790:	e010      	b.n	800c7b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f9d0 	bl	800cb38 <USBD_CtlSendStatus>
      break;
 800c798:	e00c      	b.n	800c7b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c79a:	6839      	ldr	r1, [r7, #0]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f900 	bl	800c9a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7a2:	4b07      	ldr	r3, [pc, #28]	; (800c7c0 <USBD_SetConfig+0x150>)
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7fe ff92 	bl	800b6d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7b2:	bf00      	nop
  }

  return ret;
 800c7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	20001524 	.word	0x20001524

0800c7c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	88db      	ldrh	r3, [r3, #6]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d004      	beq.n	800c7e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7d6:	6839      	ldr	r1, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f8e2 	bl	800c9a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7de:	e023      	b.n	800c828 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b02      	cmp	r3, #2
 800c7ea:	dc02      	bgt.n	800c7f2 <USBD_GetConfig+0x2e>
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	dc03      	bgt.n	800c7f8 <USBD_GetConfig+0x34>
 800c7f0:	e015      	b.n	800c81e <USBD_GetConfig+0x5a>
 800c7f2:	2b03      	cmp	r3, #3
 800c7f4:	d00b      	beq.n	800c80e <USBD_GetConfig+0x4a>
 800c7f6:	e012      	b.n	800c81e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	3308      	adds	r3, #8
 800c802:	2201      	movs	r2, #1
 800c804:	4619      	mov	r1, r3
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 f93c 	bl	800ca84 <USBD_CtlSendData>
        break;
 800c80c:	e00c      	b.n	800c828 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	3304      	adds	r3, #4
 800c812:	2201      	movs	r2, #1
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f934 	bl	800ca84 <USBD_CtlSendData>
        break;
 800c81c:	e004      	b.n	800c828 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f8be 	bl	800c9a2 <USBD_CtlError>
        break;
 800c826:	bf00      	nop
}
 800c828:	bf00      	nop
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c840:	b2db      	uxtb	r3, r3
 800c842:	3b01      	subs	r3, #1
 800c844:	2b02      	cmp	r3, #2
 800c846:	d81e      	bhi.n	800c886 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	88db      	ldrh	r3, [r3, #6]
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d004      	beq.n	800c85a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f8a5 	bl	800c9a2 <USBD_CtlError>
        break;
 800c858:	e01a      	b.n	800c890 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c866:	2b00      	cmp	r3, #0
 800c868:	d005      	beq.n	800c876 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	f043 0202 	orr.w	r2, r3, #2
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	330c      	adds	r3, #12
 800c87a:	2202      	movs	r2, #2
 800c87c:	4619      	mov	r1, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f900 	bl	800ca84 <USBD_CtlSendData>
      break;
 800c884:	e004      	b.n	800c890 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c886:	6839      	ldr	r1, [r7, #0]
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f88a 	bl	800c9a2 <USBD_CtlError>
      break;
 800c88e:	bf00      	nop
  }
}
 800c890:	bf00      	nop
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	885b      	ldrh	r3, [r3, #2]
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d107      	bne.n	800c8ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f940 	bl	800cb38 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8b8:	e013      	b.n	800c8e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	885b      	ldrh	r3, [r3, #2]
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d10b      	bne.n	800c8da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	889b      	ldrh	r3, [r3, #4]
 800c8c6:	0a1b      	lsrs	r3, r3, #8
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f930 	bl	800cb38 <USBD_CtlSendStatus>
}
 800c8d8:	e003      	b.n	800c8e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f860 	bl	800c9a2 <USBD_CtlError>
}
 800c8e2:	bf00      	nop
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d80b      	bhi.n	800c91a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	885b      	ldrh	r3, [r3, #2]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d10c      	bne.n	800c924 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f910 	bl	800cb38 <USBD_CtlSendStatus>
      }
      break;
 800c918:	e004      	b.n	800c924 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 f840 	bl	800c9a2 <USBD_CtlError>
      break;
 800c922:	e000      	b.n	800c926 <USBD_ClrFeature+0x3c>
      break;
 800c924:	bf00      	nop
  }
}
 800c926:	bf00      	nop
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b084      	sub	sp, #16
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	781a      	ldrb	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	3301      	adds	r3, #1
 800c948:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	781a      	ldrb	r2, [r3, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3301      	adds	r3, #1
 800c956:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f7ff fa41 	bl	800bde0 <SWAPBYTE>
 800c95e:	4603      	mov	r3, r0
 800c960:	461a      	mov	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3301      	adds	r3, #1
 800c96a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3301      	adds	r3, #1
 800c970:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	f7ff fa34 	bl	800bde0 <SWAPBYTE>
 800c978:	4603      	mov	r3, r0
 800c97a:	461a      	mov	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	3301      	adds	r3, #1
 800c984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3301      	adds	r3, #1
 800c98a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f7ff fa27 	bl	800bde0 <SWAPBYTE>
 800c992:	4603      	mov	r3, r0
 800c994:	461a      	mov	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	80da      	strh	r2, [r3, #6]
}
 800c99a:	bf00      	nop
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ac:	2180      	movs	r1, #128	; 0x80
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f003 ff04 	bl	80107bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f003 ff00 	bl	80107bc <USBD_LL_StallEP>
}
 800c9bc:	bf00      	nop
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d036      	beq.n	800ca48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9de:	6938      	ldr	r0, [r7, #16]
 800c9e0:	f000 f836 	bl	800ca50 <USBD_GetLen>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	005b      	lsls	r3, r3, #1
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9f2:	7dfb      	ldrb	r3, [r7, #23]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	7812      	ldrb	r2, [r2, #0]
 800c9fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ca00:	3301      	adds	r3, #1
 800ca02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	68ba      	ldr	r2, [r7, #8]
 800ca08:	4413      	add	r3, r2
 800ca0a:	2203      	movs	r2, #3
 800ca0c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca0e:	7dfb      	ldrb	r3, [r7, #23]
 800ca10:	3301      	adds	r3, #1
 800ca12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca14:	e013      	b.n	800ca3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	693a      	ldr	r2, [r7, #16]
 800ca1e:	7812      	ldrb	r2, [r2, #0]
 800ca20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	3301      	adds	r3, #1
 800ca26:	613b      	str	r3, [r7, #16]
    idx++;
 800ca28:	7dfb      	ldrb	r3, [r7, #23]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	4413      	add	r3, r2
 800ca34:	2200      	movs	r2, #0
 800ca36:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1e7      	bne.n	800ca16 <USBD_GetString+0x52>
 800ca46:	e000      	b.n	800ca4a <USBD_GetString+0x86>
    return;
 800ca48:	bf00      	nop
  }
}
 800ca4a:	3718      	adds	r7, #24
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca60:	e005      	b.n	800ca6e <USBD_GetLen+0x1e>
  {
    len++;
 800ca62:	7bfb      	ldrb	r3, [r7, #15]
 800ca64:	3301      	adds	r3, #1
 800ca66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1f5      	bne.n	800ca62 <USBD_GetLen+0x12>
  }

  return len;
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3714      	adds	r7, #20
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2202      	movs	r2, #2
 800ca94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	68ba      	ldr	r2, [r7, #8]
 800caa8:	2100      	movs	r1, #0
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f003 ff0f 	bl	80108ce <USBD_LL_Transmit>

  return USBD_OK;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	60f8      	str	r0, [r7, #12]
 800cac2:	60b9      	str	r1, [r7, #8]
 800cac4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	2100      	movs	r1, #0
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	f003 fefe 	bl	80108ce <USBD_LL_Transmit>

  return USBD_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2203      	movs	r2, #3
 800caec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	2100      	movs	r1, #0
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f003 ff02 	bl	8010910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b084      	sub	sp, #16
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	60f8      	str	r0, [r7, #12]
 800cb1e:	60b9      	str	r1, [r7, #8]
 800cb20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	2100      	movs	r1, #0
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f003 fef1 	bl	8010910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2204      	movs	r2, #4
 800cb44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb48:	2300      	movs	r3, #0
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f003 febd 	bl	80108ce <USBD_LL_Transmit>

  return USBD_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3708      	adds	r7, #8
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b082      	sub	sp, #8
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2205      	movs	r2, #5
 800cb6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb6e:	2300      	movs	r3, #0
 800cb70:	2200      	movs	r2, #0
 800cb72:	2100      	movs	r1, #0
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f003 fecb 	bl	8010910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <__NVIC_SetPriority>:
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	6039      	str	r1, [r7, #0]
 800cb8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	db0a      	blt.n	800cbae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	490c      	ldr	r1, [pc, #48]	; (800cbd0 <__NVIC_SetPriority+0x4c>)
 800cb9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cba2:	0112      	lsls	r2, r2, #4
 800cba4:	b2d2      	uxtb	r2, r2
 800cba6:	440b      	add	r3, r1
 800cba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cbac:	e00a      	b.n	800cbc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	4908      	ldr	r1, [pc, #32]	; (800cbd4 <__NVIC_SetPriority+0x50>)
 800cbb4:	79fb      	ldrb	r3, [r7, #7]
 800cbb6:	f003 030f 	and.w	r3, r3, #15
 800cbba:	3b04      	subs	r3, #4
 800cbbc:	0112      	lsls	r2, r2, #4
 800cbbe:	b2d2      	uxtb	r2, r2
 800cbc0:	440b      	add	r3, r1
 800cbc2:	761a      	strb	r2, [r3, #24]
}
 800cbc4:	bf00      	nop
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr
 800cbd0:	e000e100 	.word	0xe000e100
 800cbd4:	e000ed00 	.word	0xe000ed00

0800cbd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cbdc:	4b05      	ldr	r3, [pc, #20]	; (800cbf4 <SysTick_Handler+0x1c>)
 800cbde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cbe0:	f002 f900 	bl	800ede4 <xTaskGetSchedulerState>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d001      	beq.n	800cbee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cbea:	f002 ffa5 	bl	800fb38 <xPortSysTickHandler>
  }
}
 800cbee:	bf00      	nop
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	e000e010 	.word	0xe000e010

0800cbf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	f06f 0004 	mvn.w	r0, #4
 800cc02:	f7ff ffbf 	bl	800cb84 <__NVIC_SetPriority>
#endif
}
 800cc06:	bf00      	nop
 800cc08:	bd80      	pop	{r7, pc}
	...

0800cc0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc12:	f3ef 8305 	mrs	r3, IPSR
 800cc16:	603b      	str	r3, [r7, #0]
  return(result);
 800cc18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d003      	beq.n	800cc26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cc1e:	f06f 0305 	mvn.w	r3, #5
 800cc22:	607b      	str	r3, [r7, #4]
 800cc24:	e00c      	b.n	800cc40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc26:	4b0a      	ldr	r3, [pc, #40]	; (800cc50 <osKernelInitialize+0x44>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d105      	bne.n	800cc3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc2e:	4b08      	ldr	r3, [pc, #32]	; (800cc50 <osKernelInitialize+0x44>)
 800cc30:	2201      	movs	r2, #1
 800cc32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	607b      	str	r3, [r7, #4]
 800cc38:	e002      	b.n	800cc40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cc3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cc40:	687b      	ldr	r3, [r7, #4]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	370c      	adds	r7, #12
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	20001528 	.word	0x20001528

0800cc54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc5a:	f3ef 8305 	mrs	r3, IPSR
 800cc5e:	603b      	str	r3, [r7, #0]
  return(result);
 800cc60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d003      	beq.n	800cc6e <osKernelStart+0x1a>
    stat = osErrorISR;
 800cc66:	f06f 0305 	mvn.w	r3, #5
 800cc6a:	607b      	str	r3, [r7, #4]
 800cc6c:	e010      	b.n	800cc90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cc6e:	4b0b      	ldr	r3, [pc, #44]	; (800cc9c <osKernelStart+0x48>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d109      	bne.n	800cc8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cc76:	f7ff ffbf 	bl	800cbf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cc7a:	4b08      	ldr	r3, [pc, #32]	; (800cc9c <osKernelStart+0x48>)
 800cc7c:	2202      	movs	r2, #2
 800cc7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cc80:	f001 fad0 	bl	800e224 <vTaskStartScheduler>
      stat = osOK;
 800cc84:	2300      	movs	r3, #0
 800cc86:	607b      	str	r3, [r7, #4]
 800cc88:	e002      	b.n	800cc90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cc8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cc90:	687b      	ldr	r3, [r7, #4]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	20001528 	.word	0x20001528

0800cca0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b08e      	sub	sp, #56	; 0x38
 800cca4:	af04      	add	r7, sp, #16
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ccac:	2300      	movs	r3, #0
 800ccae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccb0:	f3ef 8305 	mrs	r3, IPSR
 800ccb4:	617b      	str	r3, [r7, #20]
  return(result);
 800ccb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d17e      	bne.n	800cdba <osThreadNew+0x11a>
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d07b      	beq.n	800cdba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ccc2:	2380      	movs	r3, #128	; 0x80
 800ccc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ccc6:	2318      	movs	r3, #24
 800ccc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ccce:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d045      	beq.n	800cd66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d002      	beq.n	800cce8 <osThreadNew+0x48>
        name = attr->name;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	699b      	ldr	r3, [r3, #24]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d002      	beq.n	800ccf6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	699b      	ldr	r3, [r3, #24]
 800ccf4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d008      	beq.n	800cd0e <osThreadNew+0x6e>
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	2b38      	cmp	r3, #56	; 0x38
 800cd00:	d805      	bhi.n	800cd0e <osThreadNew+0x6e>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	f003 0301 	and.w	r3, r3, #1
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d001      	beq.n	800cd12 <osThreadNew+0x72>
        return (NULL);
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e054      	b.n	800cdbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	695b      	ldr	r3, [r3, #20]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d003      	beq.n	800cd22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	089b      	lsrs	r3, r3, #2
 800cd20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00e      	beq.n	800cd48 <osThreadNew+0xa8>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	2bbf      	cmp	r3, #191	; 0xbf
 800cd30:	d90a      	bls.n	800cd48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d006      	beq.n	800cd48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d002      	beq.n	800cd48 <osThreadNew+0xa8>
        mem = 1;
 800cd42:	2301      	movs	r3, #1
 800cd44:	61bb      	str	r3, [r7, #24]
 800cd46:	e010      	b.n	800cd6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10c      	bne.n	800cd6a <osThreadNew+0xca>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d108      	bne.n	800cd6a <osThreadNew+0xca>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	691b      	ldr	r3, [r3, #16]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d104      	bne.n	800cd6a <osThreadNew+0xca>
          mem = 0;
 800cd60:	2300      	movs	r3, #0
 800cd62:	61bb      	str	r3, [r7, #24]
 800cd64:	e001      	b.n	800cd6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d110      	bne.n	800cd92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd78:	9202      	str	r2, [sp, #8]
 800cd7a:	9301      	str	r3, [sp, #4]
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	6a3a      	ldr	r2, [r7, #32]
 800cd84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f000 fff6 	bl	800dd78 <xTaskCreateStatic>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	613b      	str	r3, [r7, #16]
 800cd90:	e013      	b.n	800cdba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d110      	bne.n	800cdba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd98:	6a3b      	ldr	r3, [r7, #32]
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	f107 0310 	add.w	r3, r7, #16
 800cda0:	9301      	str	r3, [sp, #4]
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f001 f841 	bl	800de32 <xTaskCreate>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d001      	beq.n	800cdba <osThreadNew+0x11a>
            hTask = NULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cdba:	693b      	ldr	r3, [r7, #16]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3728      	adds	r7, #40	; 0x28
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdcc:	f3ef 8305 	mrs	r3, IPSR
 800cdd0:	60bb      	str	r3, [r7, #8]
  return(result);
 800cdd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d003      	beq.n	800cde0 <osDelay+0x1c>
    stat = osErrorISR;
 800cdd8:	f06f 0305 	mvn.w	r3, #5
 800cddc:	60fb      	str	r3, [r7, #12]
 800cdde:	e007      	b.n	800cdf0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cde0:	2300      	movs	r3, #0
 800cde2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d002      	beq.n	800cdf0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f001 f980 	bl	800e0f0 <vTaskDelay>
    }
  }

  return (stat);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b08a      	sub	sp, #40	; 0x28
 800cdfe:	af02      	add	r7, sp, #8
 800ce00:	60f8      	str	r0, [r7, #12]
 800ce02:	60b9      	str	r1, [r7, #8]
 800ce04:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ce06:	2300      	movs	r3, #0
 800ce08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce0a:	f3ef 8305 	mrs	r3, IPSR
 800ce0e:	613b      	str	r3, [r7, #16]
  return(result);
 800ce10:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d15f      	bne.n	800ced6 <osMessageQueueNew+0xdc>
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d05c      	beq.n	800ced6 <osMessageQueueNew+0xdc>
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d059      	beq.n	800ced6 <osMessageQueueNew+0xdc>
    mem = -1;
 800ce22:	f04f 33ff 	mov.w	r3, #4294967295
 800ce26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d029      	beq.n	800ce82 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	689b      	ldr	r3, [r3, #8]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d012      	beq.n	800ce5c <osMessageQueueNew+0x62>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	2b4f      	cmp	r3, #79	; 0x4f
 800ce3c:	d90e      	bls.n	800ce5c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00a      	beq.n	800ce5c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	695a      	ldr	r2, [r3, #20]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	68b9      	ldr	r1, [r7, #8]
 800ce4e:	fb01 f303 	mul.w	r3, r1, r3
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d302      	bcc.n	800ce5c <osMessageQueueNew+0x62>
        mem = 1;
 800ce56:	2301      	movs	r3, #1
 800ce58:	61bb      	str	r3, [r7, #24]
 800ce5a:	e014      	b.n	800ce86 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d110      	bne.n	800ce86 <osMessageQueueNew+0x8c>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10c      	bne.n	800ce86 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d108      	bne.n	800ce86 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	695b      	ldr	r3, [r3, #20]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d104      	bne.n	800ce86 <osMessageQueueNew+0x8c>
          mem = 0;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	61bb      	str	r3, [r7, #24]
 800ce80:	e001      	b.n	800ce86 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d10b      	bne.n	800cea4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	691a      	ldr	r2, [r3, #16]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	2100      	movs	r1, #0
 800ce96:	9100      	str	r1, [sp, #0]
 800ce98:	68b9      	ldr	r1, [r7, #8]
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f000 fa2e 	bl	800d2fc <xQueueGenericCreateStatic>
 800cea0:	61f8      	str	r0, [r7, #28]
 800cea2:	e008      	b.n	800ceb6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d105      	bne.n	800ceb6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ceaa:	2200      	movs	r2, #0
 800ceac:	68b9      	ldr	r1, [r7, #8]
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f000 fa9c 	bl	800d3ec <xQueueGenericCreate>
 800ceb4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00c      	beq.n	800ced6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d003      	beq.n	800ceca <osMessageQueueNew+0xd0>
        name = attr->name;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	617b      	str	r3, [r7, #20]
 800cec8:	e001      	b.n	800cece <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ceca:	2300      	movs	r3, #0
 800cecc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cece:	6979      	ldr	r1, [r7, #20]
 800ced0:	69f8      	ldr	r0, [r7, #28]
 800ced2:	f000 fef3 	bl	800dcbc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ced6:	69fb      	ldr	r3, [r7, #28]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3720      	adds	r7, #32
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b088      	sub	sp, #32
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	603b      	str	r3, [r7, #0]
 800ceec:	4613      	mov	r3, r2
 800ceee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cef8:	f3ef 8305 	mrs	r3, IPSR
 800cefc:	617b      	str	r3, [r7, #20]
  return(result);
 800cefe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d028      	beq.n	800cf56 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d005      	beq.n	800cf16 <osMessageQueuePut+0x36>
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d002      	beq.n	800cf16 <osMessageQueuePut+0x36>
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d003      	beq.n	800cf1e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cf16:	f06f 0303 	mvn.w	r3, #3
 800cf1a:	61fb      	str	r3, [r7, #28]
 800cf1c:	e038      	b.n	800cf90 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cf22:	f107 0210 	add.w	r2, r7, #16
 800cf26:	2300      	movs	r3, #0
 800cf28:	68b9      	ldr	r1, [r7, #8]
 800cf2a:	69b8      	ldr	r0, [r7, #24]
 800cf2c:	f000 fbba 	bl	800d6a4 <xQueueGenericSendFromISR>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d003      	beq.n	800cf3e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cf36:	f06f 0302 	mvn.w	r3, #2
 800cf3a:	61fb      	str	r3, [r7, #28]
 800cf3c:	e028      	b.n	800cf90 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d025      	beq.n	800cf90 <osMessageQueuePut+0xb0>
 800cf44:	4b15      	ldr	r3, [pc, #84]	; (800cf9c <osMessageQueuePut+0xbc>)
 800cf46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf4a:	601a      	str	r2, [r3, #0]
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	f3bf 8f6f 	isb	sy
 800cf54:	e01c      	b.n	800cf90 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d002      	beq.n	800cf62 <osMessageQueuePut+0x82>
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d103      	bne.n	800cf6a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cf62:	f06f 0303 	mvn.w	r3, #3
 800cf66:	61fb      	str	r3, [r7, #28]
 800cf68:	e012      	b.n	800cf90 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	683a      	ldr	r2, [r7, #0]
 800cf6e:	68b9      	ldr	r1, [r7, #8]
 800cf70:	69b8      	ldr	r0, [r7, #24]
 800cf72:	f000 fa99 	bl	800d4a8 <xQueueGenericSend>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d009      	beq.n	800cf90 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d003      	beq.n	800cf8a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cf82:	f06f 0301 	mvn.w	r3, #1
 800cf86:	61fb      	str	r3, [r7, #28]
 800cf88:	e002      	b.n	800cf90 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cf8a:	f06f 0302 	mvn.w	r3, #2
 800cf8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cf90:	69fb      	ldr	r3, [r7, #28]
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3720      	adds	r7, #32
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	e000ed04 	.word	0xe000ed04

0800cfa0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b088      	sub	sp, #32
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfb6:	f3ef 8305 	mrs	r3, IPSR
 800cfba:	617b      	str	r3, [r7, #20]
  return(result);
 800cfbc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d028      	beq.n	800d014 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d005      	beq.n	800cfd4 <osMessageQueueGet+0x34>
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <osMessageQueueGet+0x34>
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d003      	beq.n	800cfdc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cfd4:	f06f 0303 	mvn.w	r3, #3
 800cfd8:	61fb      	str	r3, [r7, #28]
 800cfda:	e037      	b.n	800d04c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cfe0:	f107 0310 	add.w	r3, r7, #16
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	68b9      	ldr	r1, [r7, #8]
 800cfe8:	69b8      	ldr	r0, [r7, #24]
 800cfea:	f000 fcd7 	bl	800d99c <xQueueReceiveFromISR>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d003      	beq.n	800cffc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cff4:	f06f 0302 	mvn.w	r3, #2
 800cff8:	61fb      	str	r3, [r7, #28]
 800cffa:	e027      	b.n	800d04c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d024      	beq.n	800d04c <osMessageQueueGet+0xac>
 800d002:	4b15      	ldr	r3, [pc, #84]	; (800d058 <osMessageQueueGet+0xb8>)
 800d004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d008:	601a      	str	r2, [r3, #0]
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	e01b      	b.n	800d04c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d002      	beq.n	800d020 <osMessageQueueGet+0x80>
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d103      	bne.n	800d028 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d020:	f06f 0303 	mvn.w	r3, #3
 800d024:	61fb      	str	r3, [r7, #28]
 800d026:	e011      	b.n	800d04c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	68b9      	ldr	r1, [r7, #8]
 800d02c:	69b8      	ldr	r0, [r7, #24]
 800d02e:	f000 fbd5 	bl	800d7dc <xQueueReceive>
 800d032:	4603      	mov	r3, r0
 800d034:	2b01      	cmp	r3, #1
 800d036:	d009      	beq.n	800d04c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d003      	beq.n	800d046 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d03e:	f06f 0301 	mvn.w	r3, #1
 800d042:	61fb      	str	r3, [r7, #28]
 800d044:	e002      	b.n	800d04c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d046:	f06f 0302 	mvn.w	r3, #2
 800d04a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d04c:	69fb      	ldr	r3, [r7, #28]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3720      	adds	r7, #32
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	e000ed04 	.word	0xe000ed04

0800d05c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4a07      	ldr	r2, [pc, #28]	; (800d088 <vApplicationGetIdleTaskMemory+0x2c>)
 800d06c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	4a06      	ldr	r2, [pc, #24]	; (800d08c <vApplicationGetIdleTaskMemory+0x30>)
 800d072:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2280      	movs	r2, #128	; 0x80
 800d078:	601a      	str	r2, [r3, #0]
}
 800d07a:	bf00      	nop
 800d07c:	3714      	adds	r7, #20
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	2000152c 	.word	0x2000152c
 800d08c:	200015ec 	.word	0x200015ec

0800d090 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	4a07      	ldr	r2, [pc, #28]	; (800d0bc <vApplicationGetTimerTaskMemory+0x2c>)
 800d0a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	4a06      	ldr	r2, [pc, #24]	; (800d0c0 <vApplicationGetTimerTaskMemory+0x30>)
 800d0a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0ae:	601a      	str	r2, [r3, #0]
}
 800d0b0:	bf00      	nop
 800d0b2:	3714      	adds	r7, #20
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	200017ec 	.word	0x200017ec
 800d0c0:	200018ac 	.word	0x200018ac

0800d0c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f103 0208 	add.w	r2, r3, #8
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f103 0208 	add.w	r2, r3, #8
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f103 0208 	add.w	r2, r3, #8
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d0f8:	bf00      	nop
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d112:	bf00      	nop
 800d114:	370c      	adds	r7, #12
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr

0800d11e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d11e:	b480      	push	{r7}
 800d120:	b085      	sub	sp, #20
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	689a      	ldr	r2, [r3, #8]
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	683a      	ldr	r2, [r7, #0]
 800d142:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	683a      	ldr	r2, [r7, #0]
 800d148:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	1c5a      	adds	r2, r3, #1
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	601a      	str	r2, [r3, #0]
}
 800d15a:	bf00      	nop
 800d15c:	3714      	adds	r7, #20
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d166:	b480      	push	{r7}
 800d168:	b085      	sub	sp, #20
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17c:	d103      	bne.n	800d186 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	60fb      	str	r3, [r7, #12]
 800d184:	e00c      	b.n	800d1a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	3308      	adds	r3, #8
 800d18a:	60fb      	str	r3, [r7, #12]
 800d18c:	e002      	b.n	800d194 <vListInsert+0x2e>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	68ba      	ldr	r2, [r7, #8]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d2f6      	bcs.n	800d18e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	685a      	ldr	r2, [r3, #4]
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	683a      	ldr	r2, [r7, #0]
 800d1ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	1c5a      	adds	r2, r3, #1
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	601a      	str	r2, [r3, #0]
}
 800d1cc:	bf00      	nop
 800d1ce:	3714      	adds	r7, #20
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	6892      	ldr	r2, [r2, #8]
 800d1ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	6852      	ldr	r2, [r2, #4]
 800d1f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	429a      	cmp	r2, r3
 800d202:	d103      	bne.n	800d20c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	689a      	ldr	r2, [r3, #8]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	1e5a      	subs	r2, r3, #1
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3714      	adds	r7, #20
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10a      	bne.n	800d256 <xQueueGenericReset+0x2a>
	__asm volatile
 800d240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	60bb      	str	r3, [r7, #8]
}
 800d252:	bf00      	nop
 800d254:	e7fe      	b.n	800d254 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d256:	f002 fbdd 	bl	800fa14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d262:	68f9      	ldr	r1, [r7, #12]
 800d264:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d266:	fb01 f303 	mul.w	r3, r1, r3
 800d26a:	441a      	add	r2, r3
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2200      	movs	r2, #0
 800d274:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d286:	3b01      	subs	r3, #1
 800d288:	68f9      	ldr	r1, [r7, #12]
 800d28a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d28c:	fb01 f303 	mul.w	r3, r1, r3
 800d290:	441a      	add	r2, r3
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	22ff      	movs	r2, #255	; 0xff
 800d29a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	22ff      	movs	r2, #255	; 0xff
 800d2a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d114      	bne.n	800d2d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d01a      	beq.n	800d2ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3310      	adds	r3, #16
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f001 fafb 	bl	800e8b4 <xTaskRemoveFromEventList>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d012      	beq.n	800d2ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d2c4:	4b0c      	ldr	r3, [pc, #48]	; (800d2f8 <xQueueGenericReset+0xcc>)
 800d2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ca:	601a      	str	r2, [r3, #0]
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	f3bf 8f6f 	isb	sy
 800d2d4:	e009      	b.n	800d2ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	3310      	adds	r3, #16
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7ff fef2 	bl	800d0c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	3324      	adds	r3, #36	; 0x24
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7ff feed 	bl	800d0c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d2ea:	f002 fbc3 	bl	800fa74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d2ee:	2301      	movs	r3, #1
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	e000ed04 	.word	0xe000ed04

0800d2fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b08e      	sub	sp, #56	; 0x38
 800d300:	af02      	add	r7, sp, #8
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d10a      	bne.n	800d326 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d314:	f383 8811 	msr	BASEPRI, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d322:	bf00      	nop
 800d324:	e7fe      	b.n	800d324 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10a      	bne.n	800d342 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d002      	beq.n	800d34e <xQueueGenericCreateStatic+0x52>
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d001      	beq.n	800d352 <xQueueGenericCreateStatic+0x56>
 800d34e:	2301      	movs	r3, #1
 800d350:	e000      	b.n	800d354 <xQueueGenericCreateStatic+0x58>
 800d352:	2300      	movs	r3, #0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10a      	bne.n	800d36e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	623b      	str	r3, [r7, #32]
}
 800d36a:	bf00      	nop
 800d36c:	e7fe      	b.n	800d36c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d102      	bne.n	800d37a <xQueueGenericCreateStatic+0x7e>
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <xQueueGenericCreateStatic+0x82>
 800d37a:	2301      	movs	r3, #1
 800d37c:	e000      	b.n	800d380 <xQueueGenericCreateStatic+0x84>
 800d37e:	2300      	movs	r3, #0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10a      	bne.n	800d39a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	61fb      	str	r3, [r7, #28]
}
 800d396:	bf00      	nop
 800d398:	e7fe      	b.n	800d398 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d39a:	2350      	movs	r3, #80	; 0x50
 800d39c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	2b50      	cmp	r3, #80	; 0x50
 800d3a2:	d00a      	beq.n	800d3ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	61bb      	str	r3, [r7, #24]
}
 800d3b6:	bf00      	nop
 800d3b8:	e7fe      	b.n	800d3b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d3ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00d      	beq.n	800d3e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d3ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d4:	9300      	str	r3, [sp, #0]
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	68b9      	ldr	r1, [r7, #8]
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f000 f83f 	bl	800d460 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3730      	adds	r7, #48	; 0x30
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b08a      	sub	sp, #40	; 0x28
 800d3f0:	af02      	add	r7, sp, #8
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10a      	bne.n	800d416 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d404:	f383 8811 	msr	BASEPRI, r3
 800d408:	f3bf 8f6f 	isb	sy
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	613b      	str	r3, [r7, #16]
}
 800d412:	bf00      	nop
 800d414:	e7fe      	b.n	800d414 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	68ba      	ldr	r2, [r7, #8]
 800d41a:	fb02 f303 	mul.w	r3, r2, r3
 800d41e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	3350      	adds	r3, #80	; 0x50
 800d424:	4618      	mov	r0, r3
 800d426:	f002 fc17 	bl	800fc58 <pvPortMalloc>
 800d42a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d011      	beq.n	800d456 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	3350      	adds	r3, #80	; 0x50
 800d43a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	2200      	movs	r2, #0
 800d440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d444:	79fa      	ldrb	r2, [r7, #7]
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	4613      	mov	r3, r2
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	68b9      	ldr	r1, [r7, #8]
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f000 f805 	bl	800d460 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d456:	69bb      	ldr	r3, [r7, #24]
	}
 800d458:	4618      	mov	r0, r3
 800d45a:	3720      	adds	r7, #32
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
 800d46c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d103      	bne.n	800d47c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	69ba      	ldr	r2, [r7, #24]
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	e002      	b.n	800d482 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	68fa      	ldr	r2, [r7, #12]
 800d486:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d48e:	2101      	movs	r1, #1
 800d490:	69b8      	ldr	r0, [r7, #24]
 800d492:	f7ff fecb 	bl	800d22c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	78fa      	ldrb	r2, [r7, #3]
 800d49a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d49e:	bf00      	nop
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
	...

0800d4a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08e      	sub	sp, #56	; 0x38
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
 800d4b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10a      	bne.n	800d4da <xQueueGenericSend+0x32>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d103      	bne.n	800d4e8 <xQueueGenericSend+0x40>
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d101      	bne.n	800d4ec <xQueueGenericSend+0x44>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e000      	b.n	800d4ee <xQueueGenericSend+0x46>
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10a      	bne.n	800d508 <xQueueGenericSend+0x60>
	__asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d504:	bf00      	nop
 800d506:	e7fe      	b.n	800d506 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d103      	bne.n	800d516 <xQueueGenericSend+0x6e>
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d512:	2b01      	cmp	r3, #1
 800d514:	d101      	bne.n	800d51a <xQueueGenericSend+0x72>
 800d516:	2301      	movs	r3, #1
 800d518:	e000      	b.n	800d51c <xQueueGenericSend+0x74>
 800d51a:	2300      	movs	r3, #0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10a      	bne.n	800d536 <xQueueGenericSend+0x8e>
	__asm volatile
 800d520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d524:	f383 8811 	msr	BASEPRI, r3
 800d528:	f3bf 8f6f 	isb	sy
 800d52c:	f3bf 8f4f 	dsb	sy
 800d530:	623b      	str	r3, [r7, #32]
}
 800d532:	bf00      	nop
 800d534:	e7fe      	b.n	800d534 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d536:	f001 fc55 	bl	800ede4 <xTaskGetSchedulerState>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d102      	bne.n	800d546 <xQueueGenericSend+0x9e>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d101      	bne.n	800d54a <xQueueGenericSend+0xa2>
 800d546:	2301      	movs	r3, #1
 800d548:	e000      	b.n	800d54c <xQueueGenericSend+0xa4>
 800d54a:	2300      	movs	r3, #0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10a      	bne.n	800d566 <xQueueGenericSend+0xbe>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	61fb      	str	r3, [r7, #28]
}
 800d562:	bf00      	nop
 800d564:	e7fe      	b.n	800d564 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d566:	f002 fa55 	bl	800fa14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d572:	429a      	cmp	r2, r3
 800d574:	d302      	bcc.n	800d57c <xQueueGenericSend+0xd4>
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d129      	bne.n	800d5d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d57c:	683a      	ldr	r2, [r7, #0]
 800d57e:	68b9      	ldr	r1, [r7, #8]
 800d580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d582:	f000 fa8b 	bl	800da9c <prvCopyDataToQueue>
 800d586:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d010      	beq.n	800d5b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d592:	3324      	adds	r3, #36	; 0x24
 800d594:	4618      	mov	r0, r3
 800d596:	f001 f98d 	bl	800e8b4 <xTaskRemoveFromEventList>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d013      	beq.n	800d5c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d5a0:	4b3f      	ldr	r3, [pc, #252]	; (800d6a0 <xQueueGenericSend+0x1f8>)
 800d5a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5a6:	601a      	str	r2, [r3, #0]
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	e00a      	b.n	800d5c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d007      	beq.n	800d5c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d5b8:	4b39      	ldr	r3, [pc, #228]	; (800d6a0 <xQueueGenericSend+0x1f8>)
 800d5ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5be:	601a      	str	r2, [r3, #0]
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d5c8:	f002 fa54 	bl	800fa74 <vPortExitCritical>
				return pdPASS;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e063      	b.n	800d698 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d103      	bne.n	800d5de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5d6:	f002 fa4d 	bl	800fa74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	e05c      	b.n	800d698 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d106      	bne.n	800d5f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5e4:	f107 0314 	add.w	r3, r7, #20
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f001 f9c7 	bl	800e97c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5f2:	f002 fa3f 	bl	800fa74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5f6:	f000 fe87 	bl	800e308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5fa:	f002 fa0b 	bl	800fa14 <vPortEnterCritical>
 800d5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d604:	b25b      	sxtb	r3, r3
 800d606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60a:	d103      	bne.n	800d614 <xQueueGenericSend+0x16c>
 800d60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d61a:	b25b      	sxtb	r3, r3
 800d61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d620:	d103      	bne.n	800d62a <xQueueGenericSend+0x182>
 800d622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d624:	2200      	movs	r2, #0
 800d626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d62a:	f002 fa23 	bl	800fa74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d62e:	1d3a      	adds	r2, r7, #4
 800d630:	f107 0314 	add.w	r3, r7, #20
 800d634:	4611      	mov	r1, r2
 800d636:	4618      	mov	r0, r3
 800d638:	f001 f9b6 	bl	800e9a8 <xTaskCheckForTimeOut>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d124      	bne.n	800d68c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d644:	f000 fb22 	bl	800dc8c <prvIsQueueFull>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d018      	beq.n	800d680 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	3310      	adds	r3, #16
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	4611      	mov	r1, r2
 800d656:	4618      	mov	r0, r3
 800d658:	f001 f8dc 	bl	800e814 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d65c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d65e:	f000 faad 	bl	800dbbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d662:	f000 fe5f 	bl	800e324 <xTaskResumeAll>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f47f af7c 	bne.w	800d566 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d66e:	4b0c      	ldr	r3, [pc, #48]	; (800d6a0 <xQueueGenericSend+0x1f8>)
 800d670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d674:	601a      	str	r2, [r3, #0]
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	e772      	b.n	800d566 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d682:	f000 fa9b 	bl	800dbbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d686:	f000 fe4d 	bl	800e324 <xTaskResumeAll>
 800d68a:	e76c      	b.n	800d566 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d68c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d68e:	f000 fa95 	bl	800dbbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d692:	f000 fe47 	bl	800e324 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d696:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3738      	adds	r7, #56	; 0x38
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	e000ed04 	.word	0xe000ed04

0800d6a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b090      	sub	sp, #64	; 0x40
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	607a      	str	r2, [r7, #4]
 800d6b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d10a      	bne.n	800d6d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c0:	f383 8811 	msr	BASEPRI, r3
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	f3bf 8f4f 	dsb	sy
 800d6cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d6ce:	bf00      	nop
 800d6d0:	e7fe      	b.n	800d6d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d103      	bne.n	800d6e0 <xQueueGenericSendFromISR+0x3c>
 800d6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d101      	bne.n	800d6e4 <xQueueGenericSendFromISR+0x40>
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e000      	b.n	800d6e6 <xQueueGenericSendFromISR+0x42>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10a      	bne.n	800d700 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d6fc:	bf00      	nop
 800d6fe:	e7fe      	b.n	800d6fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	2b02      	cmp	r3, #2
 800d704:	d103      	bne.n	800d70e <xQueueGenericSendFromISR+0x6a>
 800d706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d101      	bne.n	800d712 <xQueueGenericSendFromISR+0x6e>
 800d70e:	2301      	movs	r3, #1
 800d710:	e000      	b.n	800d714 <xQueueGenericSendFromISR+0x70>
 800d712:	2300      	movs	r3, #0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10a      	bne.n	800d72e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	623b      	str	r3, [r7, #32]
}
 800d72a:	bf00      	nop
 800d72c:	e7fe      	b.n	800d72c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d72e:	f002 fa53 	bl	800fbd8 <vPortValidateInterruptPriority>
	__asm volatile
 800d732:	f3ef 8211 	mrs	r2, BASEPRI
 800d736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73a:	f383 8811 	msr	BASEPRI, r3
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	61fa      	str	r2, [r7, #28]
 800d748:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d74a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d74c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d756:	429a      	cmp	r2, r3
 800d758:	d302      	bcc.n	800d760 <xQueueGenericSendFromISR+0xbc>
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	2b02      	cmp	r3, #2
 800d75e:	d12f      	bne.n	800d7c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d770:	683a      	ldr	r2, [r7, #0]
 800d772:	68b9      	ldr	r1, [r7, #8]
 800d774:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d776:	f000 f991 	bl	800da9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d77a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d782:	d112      	bne.n	800d7aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d016      	beq.n	800d7ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78e:	3324      	adds	r3, #36	; 0x24
 800d790:	4618      	mov	r0, r3
 800d792:	f001 f88f 	bl	800e8b4 <xTaskRemoveFromEventList>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00e      	beq.n	800d7ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00b      	beq.n	800d7ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	601a      	str	r2, [r3, #0]
 800d7a8:	e007      	b.n	800d7ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d7aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	b25a      	sxtb	r2, r3
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d7be:	e001      	b.n	800d7c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	f383 8811 	msr	BASEPRI, r3
}
 800d7ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3740      	adds	r7, #64	; 0x40
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
	...

0800d7dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08c      	sub	sp, #48	; 0x30
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10a      	bne.n	800d80c <xQueueReceive+0x30>
	__asm volatile
 800d7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fa:	f383 8811 	msr	BASEPRI, r3
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	623b      	str	r3, [r7, #32]
}
 800d808:	bf00      	nop
 800d80a:	e7fe      	b.n	800d80a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d103      	bne.n	800d81a <xQueueReceive+0x3e>
 800d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <xQueueReceive+0x42>
 800d81a:	2301      	movs	r3, #1
 800d81c:	e000      	b.n	800d820 <xQueueReceive+0x44>
 800d81e:	2300      	movs	r3, #0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10a      	bne.n	800d83a <xQueueReceive+0x5e>
	__asm volatile
 800d824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d828:	f383 8811 	msr	BASEPRI, r3
 800d82c:	f3bf 8f6f 	isb	sy
 800d830:	f3bf 8f4f 	dsb	sy
 800d834:	61fb      	str	r3, [r7, #28]
}
 800d836:	bf00      	nop
 800d838:	e7fe      	b.n	800d838 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d83a:	f001 fad3 	bl	800ede4 <xTaskGetSchedulerState>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d102      	bne.n	800d84a <xQueueReceive+0x6e>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <xQueueReceive+0x72>
 800d84a:	2301      	movs	r3, #1
 800d84c:	e000      	b.n	800d850 <xQueueReceive+0x74>
 800d84e:	2300      	movs	r3, #0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10a      	bne.n	800d86a <xQueueReceive+0x8e>
	__asm volatile
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	61bb      	str	r3, [r7, #24]
}
 800d866:	bf00      	nop
 800d868:	e7fe      	b.n	800d868 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d86a:	f002 f8d3 	bl	800fa14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d872:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	2b00      	cmp	r3, #0
 800d878:	d01f      	beq.n	800d8ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d87a:	68b9      	ldr	r1, [r7, #8]
 800d87c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d87e:	f000 f977 	bl	800db70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	1e5a      	subs	r2, r3, #1
 800d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d888:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88c:	691b      	ldr	r3, [r3, #16]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00f      	beq.n	800d8b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d894:	3310      	adds	r3, #16
 800d896:	4618      	mov	r0, r3
 800d898:	f001 f80c 	bl	800e8b4 <xTaskRemoveFromEventList>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d007      	beq.n	800d8b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8a2:	4b3d      	ldr	r3, [pc, #244]	; (800d998 <xQueueReceive+0x1bc>)
 800d8a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8a8:	601a      	str	r2, [r3, #0]
 800d8aa:	f3bf 8f4f 	dsb	sy
 800d8ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d8b2:	f002 f8df 	bl	800fa74 <vPortExitCritical>
				return pdPASS;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e069      	b.n	800d98e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d103      	bne.n	800d8c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d8c0:	f002 f8d8 	bl	800fa74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	e062      	b.n	800d98e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d106      	bne.n	800d8dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8ce:	f107 0310 	add.w	r3, r7, #16
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f001 f852 	bl	800e97c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8dc:	f002 f8ca 	bl	800fa74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8e0:	f000 fd12 	bl	800e308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8e4:	f002 f896 	bl	800fa14 <vPortEnterCritical>
 800d8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8ee:	b25b      	sxtb	r3, r3
 800d8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f4:	d103      	bne.n	800d8fe <xQueueReceive+0x122>
 800d8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d904:	b25b      	sxtb	r3, r3
 800d906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90a:	d103      	bne.n	800d914 <xQueueReceive+0x138>
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d914:	f002 f8ae 	bl	800fa74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d918:	1d3a      	adds	r2, r7, #4
 800d91a:	f107 0310 	add.w	r3, r7, #16
 800d91e:	4611      	mov	r1, r2
 800d920:	4618      	mov	r0, r3
 800d922:	f001 f841 	bl	800e9a8 <xTaskCheckForTimeOut>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d123      	bne.n	800d974 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d92c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d92e:	f000 f997 	bl	800dc60 <prvIsQueueEmpty>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d017      	beq.n	800d968 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	3324      	adds	r3, #36	; 0x24
 800d93c:	687a      	ldr	r2, [r7, #4]
 800d93e:	4611      	mov	r1, r2
 800d940:	4618      	mov	r0, r3
 800d942:	f000 ff67 	bl	800e814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d948:	f000 f938 	bl	800dbbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d94c:	f000 fcea 	bl	800e324 <xTaskResumeAll>
 800d950:	4603      	mov	r3, r0
 800d952:	2b00      	cmp	r3, #0
 800d954:	d189      	bne.n	800d86a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d956:	4b10      	ldr	r3, [pc, #64]	; (800d998 <xQueueReceive+0x1bc>)
 800d958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	f3bf 8f6f 	isb	sy
 800d966:	e780      	b.n	800d86a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d96a:	f000 f927 	bl	800dbbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d96e:	f000 fcd9 	bl	800e324 <xTaskResumeAll>
 800d972:	e77a      	b.n	800d86a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d976:	f000 f921 	bl	800dbbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d97a:	f000 fcd3 	bl	800e324 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d97e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d980:	f000 f96e 	bl	800dc60 <prvIsQueueEmpty>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	f43f af6f 	beq.w	800d86a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d98c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3730      	adds	r7, #48	; 0x30
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	e000ed04 	.word	0xe000ed04

0800d99c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b08e      	sub	sp, #56	; 0x38
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d10a      	bne.n	800d9c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b6:	f383 8811 	msr	BASEPRI, r3
 800d9ba:	f3bf 8f6f 	isb	sy
 800d9be:	f3bf 8f4f 	dsb	sy
 800d9c2:	623b      	str	r3, [r7, #32]
}
 800d9c4:	bf00      	nop
 800d9c6:	e7fe      	b.n	800d9c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d103      	bne.n	800d9d6 <xQueueReceiveFromISR+0x3a>
 800d9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d101      	bne.n	800d9da <xQueueReceiveFromISR+0x3e>
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	e000      	b.n	800d9dc <xQueueReceiveFromISR+0x40>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d10a      	bne.n	800d9f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e4:	f383 8811 	msr	BASEPRI, r3
 800d9e8:	f3bf 8f6f 	isb	sy
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	61fb      	str	r3, [r7, #28]
}
 800d9f2:	bf00      	nop
 800d9f4:	e7fe      	b.n	800d9f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9f6:	f002 f8ef 	bl	800fbd8 <vPortValidateInterruptPriority>
	__asm volatile
 800d9fa:	f3ef 8211 	mrs	r2, BASEPRI
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	61ba      	str	r2, [r7, #24]
 800da10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800da12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d02f      	beq.n	800da82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da2c:	68b9      	ldr	r1, [r7, #8]
 800da2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da30:	f000 f89e 	bl	800db70 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da36:	1e5a      	subs	r2, r3, #1
 800da38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800da3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da44:	d112      	bne.n	800da6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d016      	beq.n	800da7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da50:	3310      	adds	r3, #16
 800da52:	4618      	mov	r0, r3
 800da54:	f000 ff2e 	bl	800e8b4 <xTaskRemoveFromEventList>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00e      	beq.n	800da7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00b      	beq.n	800da7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	601a      	str	r2, [r3, #0]
 800da6a:	e007      	b.n	800da7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800da6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da70:	3301      	adds	r3, #1
 800da72:	b2db      	uxtb	r3, r3
 800da74:	b25a      	sxtb	r2, r3
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800da7c:	2301      	movs	r3, #1
 800da7e:	637b      	str	r3, [r7, #52]	; 0x34
 800da80:	e001      	b.n	800da86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800da82:	2300      	movs	r3, #0
 800da84:	637b      	str	r3, [r7, #52]	; 0x34
 800da86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da88:	613b      	str	r3, [r7, #16]
	__asm volatile
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	f383 8811 	msr	BASEPRI, r3
}
 800da90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800da94:	4618      	mov	r0, r3
 800da96:	3738      	adds	r7, #56	; 0x38
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b086      	sub	sp, #24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800daa8:	2300      	movs	r3, #0
 800daaa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d10d      	bne.n	800dad6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d14d      	bne.n	800db5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	4618      	mov	r0, r3
 800dac8:	f001 f9aa 	bl	800ee20 <xTaskPriorityDisinherit>
 800dacc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2200      	movs	r2, #0
 800dad2:	609a      	str	r2, [r3, #8]
 800dad4:	e043      	b.n	800db5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d119      	bne.n	800db10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	6858      	ldr	r0, [r3, #4]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae4:	461a      	mov	r2, r3
 800dae6:	68b9      	ldr	r1, [r7, #8]
 800dae8:	f002 ffc4 	bl	8010a74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	685a      	ldr	r2, [r3, #4]
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daf4:	441a      	add	r2, r3
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	685a      	ldr	r2, [r3, #4]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	689b      	ldr	r3, [r3, #8]
 800db02:	429a      	cmp	r2, r3
 800db04:	d32b      	bcc.n	800db5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	605a      	str	r2, [r3, #4]
 800db0e:	e026      	b.n	800db5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	68d8      	ldr	r0, [r3, #12]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db18:	461a      	mov	r2, r3
 800db1a:	68b9      	ldr	r1, [r7, #8]
 800db1c:	f002 ffaa 	bl	8010a74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	68da      	ldr	r2, [r3, #12]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db28:	425b      	negs	r3, r3
 800db2a:	441a      	add	r2, r3
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	68da      	ldr	r2, [r3, #12]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d207      	bcs.n	800db4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	689a      	ldr	r2, [r3, #8]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db44:	425b      	negs	r3, r3
 800db46:	441a      	add	r2, r3
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2b02      	cmp	r3, #2
 800db50:	d105      	bne.n	800db5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	3b01      	subs	r3, #1
 800db5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	1c5a      	adds	r2, r3, #1
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db66:	697b      	ldr	r3, [r7, #20]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3718      	adds	r7, #24
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d018      	beq.n	800dbb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	68da      	ldr	r2, [r3, #12]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db8a:	441a      	add	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	68da      	ldr	r2, [r3, #12]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d303      	bcc.n	800dba4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68d9      	ldr	r1, [r3, #12]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbac:	461a      	mov	r2, r3
 800dbae:	6838      	ldr	r0, [r7, #0]
 800dbb0:	f002 ff60 	bl	8010a74 <memcpy>
	}
}
 800dbb4:	bf00      	nop
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dbc4:	f001 ff26 	bl	800fa14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbd0:	e011      	b.n	800dbf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d012      	beq.n	800dc00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	3324      	adds	r3, #36	; 0x24
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f000 fe68 	bl	800e8b4 <xTaskRemoveFromEventList>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dbea:	f000 ff3f 	bl	800ea6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dbee:	7bfb      	ldrb	r3, [r7, #15]
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	dce9      	bgt.n	800dbd2 <prvUnlockQueue+0x16>
 800dbfe:	e000      	b.n	800dc02 <prvUnlockQueue+0x46>
					break;
 800dc00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	22ff      	movs	r2, #255	; 0xff
 800dc06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc0a:	f001 ff33 	bl	800fa74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc0e:	f001 ff01 	bl	800fa14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc1a:	e011      	b.n	800dc40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	691b      	ldr	r3, [r3, #16]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d012      	beq.n	800dc4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	3310      	adds	r3, #16
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f000 fe43 	bl	800e8b4 <xTaskRemoveFromEventList>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d001      	beq.n	800dc38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc34:	f000 ff1a 	bl	800ea6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc38:	7bbb      	ldrb	r3, [r7, #14]
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	dce9      	bgt.n	800dc1c <prvUnlockQueue+0x60>
 800dc48:	e000      	b.n	800dc4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	22ff      	movs	r2, #255	; 0xff
 800dc50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc54:	f001 ff0e 	bl	800fa74 <vPortExitCritical>
}
 800dc58:	bf00      	nop
 800dc5a:	3710      	adds	r7, #16
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc68:	f001 fed4 	bl	800fa14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d102      	bne.n	800dc7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc74:	2301      	movs	r3, #1
 800dc76:	60fb      	str	r3, [r7, #12]
 800dc78:	e001      	b.n	800dc7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc7e:	f001 fef9 	bl	800fa74 <vPortExitCritical>

	return xReturn;
 800dc82:	68fb      	ldr	r3, [r7, #12]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc94:	f001 febe 	bl	800fa14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d102      	bne.n	800dcaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dca4:	2301      	movs	r3, #1
 800dca6:	60fb      	str	r3, [r7, #12]
 800dca8:	e001      	b.n	800dcae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcae:	f001 fee1 	bl	800fa74 <vPortExitCritical>

	return xReturn;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b085      	sub	sp, #20
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	60fb      	str	r3, [r7, #12]
 800dcca:	e014      	b.n	800dcf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dccc:	4a0f      	ldr	r2, [pc, #60]	; (800dd0c <vQueueAddToRegistry+0x50>)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d10b      	bne.n	800dcf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dcd8:	490c      	ldr	r1, [pc, #48]	; (800dd0c <vQueueAddToRegistry+0x50>)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	683a      	ldr	r2, [r7, #0]
 800dcde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dce2:	4a0a      	ldr	r2, [pc, #40]	; (800dd0c <vQueueAddToRegistry+0x50>)
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	00db      	lsls	r3, r3, #3
 800dce8:	4413      	add	r3, r2
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dcee:	e006      	b.n	800dcfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	60fb      	str	r3, [r7, #12]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2b07      	cmp	r3, #7
 800dcfa:	d9e7      	bls.n	800dccc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dcfc:	bf00      	nop
 800dcfe:	bf00      	nop
 800dd00:	3714      	adds	r7, #20
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr
 800dd0a:	bf00      	nop
 800dd0c:	20001cac 	.word	0x20001cac

0800dd10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b086      	sub	sp, #24
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd20:	f001 fe78 	bl	800fa14 <vPortEnterCritical>
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd2a:	b25b      	sxtb	r3, r3
 800dd2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd30:	d103      	bne.n	800dd3a <vQueueWaitForMessageRestricted+0x2a>
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	2200      	movs	r2, #0
 800dd36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd40:	b25b      	sxtb	r3, r3
 800dd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd46:	d103      	bne.n	800dd50 <vQueueWaitForMessageRestricted+0x40>
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd50:	f001 fe90 	bl	800fa74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d106      	bne.n	800dd6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	3324      	adds	r3, #36	; 0x24
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	68b9      	ldr	r1, [r7, #8]
 800dd64:	4618      	mov	r0, r3
 800dd66:	f000 fd79 	bl	800e85c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dd6a:	6978      	ldr	r0, [r7, #20]
 800dd6c:	f7ff ff26 	bl	800dbbc <prvUnlockQueue>
	}
 800dd70:	bf00      	nop
 800dd72:	3718      	adds	r7, #24
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b08e      	sub	sp, #56	; 0x38
 800dd7c:	af04      	add	r7, sp, #16
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
 800dd84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dd86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d10a      	bne.n	800dda2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800dd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd90:	f383 8811 	msr	BASEPRI, r3
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	f3bf 8f4f 	dsb	sy
 800dd9c:	623b      	str	r3, [r7, #32]
}
 800dd9e:	bf00      	nop
 800dda0:	e7fe      	b.n	800dda0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d10a      	bne.n	800ddbe <xTaskCreateStatic+0x46>
	__asm volatile
 800dda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddac:	f383 8811 	msr	BASEPRI, r3
 800ddb0:	f3bf 8f6f 	isb	sy
 800ddb4:	f3bf 8f4f 	dsb	sy
 800ddb8:	61fb      	str	r3, [r7, #28]
}
 800ddba:	bf00      	nop
 800ddbc:	e7fe      	b.n	800ddbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ddbe:	23c0      	movs	r3, #192	; 0xc0
 800ddc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	2bc0      	cmp	r3, #192	; 0xc0
 800ddc6:	d00a      	beq.n	800ddde <xTaskCreateStatic+0x66>
	__asm volatile
 800ddc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddcc:	f383 8811 	msr	BASEPRI, r3
 800ddd0:	f3bf 8f6f 	isb	sy
 800ddd4:	f3bf 8f4f 	dsb	sy
 800ddd8:	61bb      	str	r3, [r7, #24]
}
 800ddda:	bf00      	nop
 800dddc:	e7fe      	b.n	800dddc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ddde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d01e      	beq.n	800de24 <xTaskCreateStatic+0xac>
 800dde6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d01b      	beq.n	800de24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ddec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ddf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	2202      	movs	r2, #2
 800ddfa:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ddfe:	2300      	movs	r3, #0
 800de00:	9303      	str	r3, [sp, #12]
 800de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de04:	9302      	str	r3, [sp, #8]
 800de06:	f107 0314 	add.w	r3, r7, #20
 800de0a:	9301      	str	r3, [sp, #4]
 800de0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0e:	9300      	str	r3, [sp, #0]
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	68b9      	ldr	r1, [r7, #8]
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	f000 f850 	bl	800debc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de1e:	f000 f8f7 	bl	800e010 <prvAddNewTaskToReadyList>
 800de22:	e001      	b.n	800de28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800de24:	2300      	movs	r3, #0
 800de26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de28:	697b      	ldr	r3, [r7, #20]
	}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3728      	adds	r7, #40	; 0x28
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de32:	b580      	push	{r7, lr}
 800de34:	b08c      	sub	sp, #48	; 0x30
 800de36:	af04      	add	r7, sp, #16
 800de38:	60f8      	str	r0, [r7, #12]
 800de3a:	60b9      	str	r1, [r7, #8]
 800de3c:	603b      	str	r3, [r7, #0]
 800de3e:	4613      	mov	r3, r2
 800de40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de42:	88fb      	ldrh	r3, [r7, #6]
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	4618      	mov	r0, r3
 800de48:	f001 ff06 	bl	800fc58 <pvPortMalloc>
 800de4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00e      	beq.n	800de72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de54:	20c0      	movs	r0, #192	; 0xc0
 800de56:	f001 feff 	bl	800fc58 <pvPortMalloc>
 800de5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d003      	beq.n	800de6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	697a      	ldr	r2, [r7, #20]
 800de66:	631a      	str	r2, [r3, #48]	; 0x30
 800de68:	e005      	b.n	800de76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de6a:	6978      	ldr	r0, [r7, #20]
 800de6c:	f001 ffc0 	bl	800fdf0 <vPortFree>
 800de70:	e001      	b.n	800de76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800de72:	2300      	movs	r3, #0
 800de74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800de76:	69fb      	ldr	r3, [r7, #28]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d017      	beq.n	800deac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	2200      	movs	r2, #0
 800de80:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800de84:	88fa      	ldrh	r2, [r7, #6]
 800de86:	2300      	movs	r3, #0
 800de88:	9303      	str	r3, [sp, #12]
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	9302      	str	r3, [sp, #8]
 800de8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de90:	9301      	str	r3, [sp, #4]
 800de92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	68b9      	ldr	r1, [r7, #8]
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f000 f80e 	bl	800debc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dea0:	69f8      	ldr	r0, [r7, #28]
 800dea2:	f000 f8b5 	bl	800e010 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dea6:	2301      	movs	r3, #1
 800dea8:	61bb      	str	r3, [r7, #24]
 800deaa:	e002      	b.n	800deb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800deac:	f04f 33ff 	mov.w	r3, #4294967295
 800deb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800deb2:	69bb      	ldr	r3, [r7, #24]
	}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3720      	adds	r7, #32
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b088      	sub	sp, #32
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800deca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800decc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	461a      	mov	r2, r3
 800ded4:	21a5      	movs	r1, #165	; 0xa5
 800ded6:	f002 fddb 	bl	8010a90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800deda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dedc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dee4:	3b01      	subs	r3, #1
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	4413      	add	r3, r2
 800deea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	f023 0307 	bic.w	r3, r3, #7
 800def2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	f003 0307 	and.w	r3, r3, #7
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00a      	beq.n	800df14 <prvInitialiseNewTask+0x58>
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	617b      	str	r3, [r7, #20]
}
 800df10:	bf00      	nop
 800df12:	e7fe      	b.n	800df12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d01f      	beq.n	800df5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df1a:	2300      	movs	r3, #0
 800df1c:	61fb      	str	r3, [r7, #28]
 800df1e:	e012      	b.n	800df46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	4413      	add	r3, r2
 800df26:	7819      	ldrb	r1, [r3, #0]
 800df28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	4413      	add	r3, r2
 800df2e:	3334      	adds	r3, #52	; 0x34
 800df30:	460a      	mov	r2, r1
 800df32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df34:	68ba      	ldr	r2, [r7, #8]
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	4413      	add	r3, r2
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d006      	beq.n	800df4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	3301      	adds	r3, #1
 800df44:	61fb      	str	r3, [r7, #28]
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	2b0f      	cmp	r3, #15
 800df4a:	d9e9      	bls.n	800df20 <prvInitialiseNewTask+0x64>
 800df4c:	e000      	b.n	800df50 <prvInitialiseNewTask+0x94>
			{
				break;
 800df4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df52:	2200      	movs	r2, #0
 800df54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800df58:	e003      	b.n	800df62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5c:	2200      	movs	r2, #0
 800df5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df64:	2b37      	cmp	r3, #55	; 0x37
 800df66:	d901      	bls.n	800df6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800df68:	2337      	movs	r3, #55	; 0x37
 800df6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800df78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7a:	2200      	movs	r2, #0
 800df7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df80:	3304      	adds	r3, #4
 800df82:	4618      	mov	r0, r3
 800df84:	f7ff f8be 	bl	800d104 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	3318      	adds	r3, #24
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7ff f8b9 	bl	800d104 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfa6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800dfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfaa:	2200      	movs	r2, #0
 800dfac:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc0:	3358      	adds	r3, #88	; 0x58
 800dfc2:	2260      	movs	r2, #96	; 0x60
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f002 fd62 	bl	8010a90 <memset>
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfce:	4a0d      	ldr	r2, [pc, #52]	; (800e004 <prvInitialiseNewTask+0x148>)
 800dfd0:	65da      	str	r2, [r3, #92]	; 0x5c
 800dfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd4:	4a0c      	ldr	r2, [pc, #48]	; (800e008 <prvInitialiseNewTask+0x14c>)
 800dfd6:	661a      	str	r2, [r3, #96]	; 0x60
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfda:	4a0c      	ldr	r2, [pc, #48]	; (800e00c <prvInitialiseNewTask+0x150>)
 800dfdc:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dfde:	683a      	ldr	r2, [r7, #0]
 800dfe0:	68f9      	ldr	r1, [r7, #12]
 800dfe2:	69b8      	ldr	r0, [r7, #24]
 800dfe4:	f001 fbe8 	bl	800f7b8 <pxPortInitialiseStack>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dffa:	bf00      	nop
 800dffc:	3720      	adds	r7, #32
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	08013a58 	.word	0x08013a58
 800e008:	08013a78 	.word	0x08013a78
 800e00c:	08013a38 	.word	0x08013a38

0800e010 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e018:	f001 fcfc 	bl	800fa14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e01c:	4b2d      	ldr	r3, [pc, #180]	; (800e0d4 <prvAddNewTaskToReadyList+0xc4>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	3301      	adds	r3, #1
 800e022:	4a2c      	ldr	r2, [pc, #176]	; (800e0d4 <prvAddNewTaskToReadyList+0xc4>)
 800e024:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e026:	4b2c      	ldr	r3, [pc, #176]	; (800e0d8 <prvAddNewTaskToReadyList+0xc8>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d109      	bne.n	800e042 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e02e:	4a2a      	ldr	r2, [pc, #168]	; (800e0d8 <prvAddNewTaskToReadyList+0xc8>)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e034:	4b27      	ldr	r3, [pc, #156]	; (800e0d4 <prvAddNewTaskToReadyList+0xc4>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d110      	bne.n	800e05e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e03c:	f000 fd3c 	bl	800eab8 <prvInitialiseTaskLists>
 800e040:	e00d      	b.n	800e05e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e042:	4b26      	ldr	r3, [pc, #152]	; (800e0dc <prvAddNewTaskToReadyList+0xcc>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d109      	bne.n	800e05e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e04a:	4b23      	ldr	r3, [pc, #140]	; (800e0d8 <prvAddNewTaskToReadyList+0xc8>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e054:	429a      	cmp	r2, r3
 800e056:	d802      	bhi.n	800e05e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e058:	4a1f      	ldr	r2, [pc, #124]	; (800e0d8 <prvAddNewTaskToReadyList+0xc8>)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e05e:	4b20      	ldr	r3, [pc, #128]	; (800e0e0 <prvAddNewTaskToReadyList+0xd0>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3301      	adds	r3, #1
 800e064:	4a1e      	ldr	r2, [pc, #120]	; (800e0e0 <prvAddNewTaskToReadyList+0xd0>)
 800e066:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e068:	4b1d      	ldr	r3, [pc, #116]	; (800e0e0 <prvAddNewTaskToReadyList+0xd0>)
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e074:	4b1b      	ldr	r3, [pc, #108]	; (800e0e4 <prvAddNewTaskToReadyList+0xd4>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d903      	bls.n	800e084 <prvAddNewTaskToReadyList+0x74>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e080:	4a18      	ldr	r2, [pc, #96]	; (800e0e4 <prvAddNewTaskToReadyList+0xd4>)
 800e082:	6013      	str	r3, [r2, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e088:	4613      	mov	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4a15      	ldr	r2, [pc, #84]	; (800e0e8 <prvAddNewTaskToReadyList+0xd8>)
 800e092:	441a      	add	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	3304      	adds	r3, #4
 800e098:	4619      	mov	r1, r3
 800e09a:	4610      	mov	r0, r2
 800e09c:	f7ff f83f 	bl	800d11e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e0a0:	f001 fce8 	bl	800fa74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e0a4:	4b0d      	ldr	r3, [pc, #52]	; (800e0dc <prvAddNewTaskToReadyList+0xcc>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00e      	beq.n	800e0ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e0ac:	4b0a      	ldr	r3, [pc, #40]	; (800e0d8 <prvAddNewTaskToReadyList+0xc8>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d207      	bcs.n	800e0ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e0ba:	4b0c      	ldr	r3, [pc, #48]	; (800e0ec <prvAddNewTaskToReadyList+0xdc>)
 800e0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c0:	601a      	str	r2, [r3, #0]
 800e0c2:	f3bf 8f4f 	dsb	sy
 800e0c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0ca:	bf00      	nop
 800e0cc:	3708      	adds	r7, #8
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	200021c0 	.word	0x200021c0
 800e0d8:	20001cec 	.word	0x20001cec
 800e0dc:	200021cc 	.word	0x200021cc
 800e0e0:	200021dc 	.word	0x200021dc
 800e0e4:	200021c8 	.word	0x200021c8
 800e0e8:	20001cf0 	.word	0x20001cf0
 800e0ec:	e000ed04 	.word	0xe000ed04

0800e0f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d017      	beq.n	800e132 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e102:	4b13      	ldr	r3, [pc, #76]	; (800e150 <vTaskDelay+0x60>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d00a      	beq.n	800e120 <vTaskDelay+0x30>
	__asm volatile
 800e10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10e:	f383 8811 	msr	BASEPRI, r3
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	f3bf 8f4f 	dsb	sy
 800e11a:	60bb      	str	r3, [r7, #8]
}
 800e11c:	bf00      	nop
 800e11e:	e7fe      	b.n	800e11e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e120:	f000 f8f2 	bl	800e308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e124:	2100      	movs	r1, #0
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 ffa4 	bl	800f074 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e12c:	f000 f8fa 	bl	800e324 <xTaskResumeAll>
 800e130:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d107      	bne.n	800e148 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e138:	4b06      	ldr	r3, [pc, #24]	; (800e154 <vTaskDelay+0x64>)
 800e13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e13e:	601a      	str	r2, [r3, #0]
 800e140:	f3bf 8f4f 	dsb	sy
 800e144:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e148:	bf00      	nop
 800e14a:	3710      	adds	r7, #16
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	200021e8 	.word	0x200021e8
 800e154:	e000ed04 	.word	0xe000ed04

0800e158 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b088      	sub	sp, #32
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800e164:	69bb      	ldr	r3, [r7, #24]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10a      	bne.n	800e180 <eTaskGetState+0x28>
	__asm volatile
 800e16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16e:	f383 8811 	msr	BASEPRI, r3
 800e172:	f3bf 8f6f 	isb	sy
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	60bb      	str	r3, [r7, #8]
}
 800e17c:	bf00      	nop
 800e17e:	e7fe      	b.n	800e17e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800e180:	4b23      	ldr	r3, [pc, #140]	; (800e210 <eTaskGetState+0xb8>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	69ba      	ldr	r2, [r7, #24]
 800e186:	429a      	cmp	r2, r3
 800e188:	d102      	bne.n	800e190 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800e18a:	2300      	movs	r3, #0
 800e18c:	77fb      	strb	r3, [r7, #31]
 800e18e:	e03a      	b.n	800e206 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800e190:	f001 fc40 	bl	800fa14 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	695b      	ldr	r3, [r3, #20]
 800e198:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800e19a:	4b1e      	ldr	r3, [pc, #120]	; (800e214 <eTaskGetState+0xbc>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800e1a0:	4b1d      	ldr	r3, [pc, #116]	; (800e218 <eTaskGetState+0xc0>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800e1a6:	f001 fc65 	bl	800fa74 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800e1aa:	697a      	ldr	r2, [r7, #20]
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d003      	beq.n	800e1ba <eTaskGetState+0x62>
 800e1b2:	697a      	ldr	r2, [r7, #20]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d102      	bne.n	800e1c0 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800e1ba:	2302      	movs	r3, #2
 800e1bc:	77fb      	strb	r3, [r7, #31]
 800e1be:	e022      	b.n	800e206 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	4a16      	ldr	r2, [pc, #88]	; (800e21c <eTaskGetState+0xc4>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d112      	bne.n	800e1ee <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d10b      	bne.n	800e1e8 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d102      	bne.n	800e1e2 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800e1dc:	2302      	movs	r3, #2
 800e1de:	77fb      	strb	r3, [r7, #31]
 800e1e0:	e011      	b.n	800e206 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800e1e2:	2303      	movs	r3, #3
 800e1e4:	77fb      	strb	r3, [r7, #31]
 800e1e6:	e00e      	b.n	800e206 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800e1e8:	2302      	movs	r3, #2
 800e1ea:	77fb      	strb	r3, [r7, #31]
 800e1ec:	e00b      	b.n	800e206 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	4a0b      	ldr	r2, [pc, #44]	; (800e220 <eTaskGetState+0xc8>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d002      	beq.n	800e1fc <eTaskGetState+0xa4>
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d102      	bne.n	800e202 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800e1fc:	2304      	movs	r3, #4
 800e1fe:	77fb      	strb	r3, [r7, #31]
 800e200:	e001      	b.n	800e206 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800e202:	2301      	movs	r3, #1
 800e204:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800e206:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e208:	4618      	mov	r0, r3
 800e20a:	3720      	adds	r7, #32
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	20001cec 	.word	0x20001cec
 800e214:	20002178 	.word	0x20002178
 800e218:	2000217c 	.word	0x2000217c
 800e21c:	200021ac 	.word	0x200021ac
 800e220:	20002194 	.word	0x20002194

0800e224 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b08a      	sub	sp, #40	; 0x28
 800e228:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e22a:	2300      	movs	r3, #0
 800e22c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e22e:	2300      	movs	r3, #0
 800e230:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e232:	463a      	mov	r2, r7
 800e234:	1d39      	adds	r1, r7, #4
 800e236:	f107 0308 	add.w	r3, r7, #8
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fe ff0e 	bl	800d05c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e240:	6839      	ldr	r1, [r7, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	68ba      	ldr	r2, [r7, #8]
 800e246:	9202      	str	r2, [sp, #8]
 800e248:	9301      	str	r3, [sp, #4]
 800e24a:	2300      	movs	r3, #0
 800e24c:	9300      	str	r3, [sp, #0]
 800e24e:	2300      	movs	r3, #0
 800e250:	460a      	mov	r2, r1
 800e252:	4925      	ldr	r1, [pc, #148]	; (800e2e8 <vTaskStartScheduler+0xc4>)
 800e254:	4825      	ldr	r0, [pc, #148]	; (800e2ec <vTaskStartScheduler+0xc8>)
 800e256:	f7ff fd8f 	bl	800dd78 <xTaskCreateStatic>
 800e25a:	4603      	mov	r3, r0
 800e25c:	4a24      	ldr	r2, [pc, #144]	; (800e2f0 <vTaskStartScheduler+0xcc>)
 800e25e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e260:	4b23      	ldr	r3, [pc, #140]	; (800e2f0 <vTaskStartScheduler+0xcc>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d002      	beq.n	800e26e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e268:	2301      	movs	r3, #1
 800e26a:	617b      	str	r3, [r7, #20]
 800e26c:	e001      	b.n	800e272 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e26e:	2300      	movs	r3, #0
 800e270:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	2b01      	cmp	r3, #1
 800e276:	d102      	bne.n	800e27e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e278:	f000 ff50 	bl	800f11c <xTimerCreateTimerTask>
 800e27c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	2b01      	cmp	r3, #1
 800e282:	d11d      	bne.n	800e2c0 <vTaskStartScheduler+0x9c>
	__asm volatile
 800e284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e288:	f383 8811 	msr	BASEPRI, r3
 800e28c:	f3bf 8f6f 	isb	sy
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	613b      	str	r3, [r7, #16]
}
 800e296:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e298:	4b16      	ldr	r3, [pc, #88]	; (800e2f4 <vTaskStartScheduler+0xd0>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	3358      	adds	r3, #88	; 0x58
 800e29e:	4a16      	ldr	r2, [pc, #88]	; (800e2f8 <vTaskStartScheduler+0xd4>)
 800e2a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e2a2:	4b16      	ldr	r3, [pc, #88]	; (800e2fc <vTaskStartScheduler+0xd8>)
 800e2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e2aa:	4b15      	ldr	r3, [pc, #84]	; (800e300 <vTaskStartScheduler+0xdc>)
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e2b0:	4b14      	ldr	r3, [pc, #80]	; (800e304 <vTaskStartScheduler+0xe0>)
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e2b6:	f7f3 fa69 	bl	800178c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e2ba:	f001 fb09 	bl	800f8d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e2be:	e00e      	b.n	800e2de <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c6:	d10a      	bne.n	800e2de <vTaskStartScheduler+0xba>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	60fb      	str	r3, [r7, #12]
}
 800e2da:	bf00      	nop
 800e2dc:	e7fe      	b.n	800e2dc <vTaskStartScheduler+0xb8>
}
 800e2de:	bf00      	nop
 800e2e0:	3718      	adds	r7, #24
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	080117b0 	.word	0x080117b0
 800e2ec:	0800ea85 	.word	0x0800ea85
 800e2f0:	200021e4 	.word	0x200021e4
 800e2f4:	20001cec 	.word	0x20001cec
 800e2f8:	2000018c 	.word	0x2000018c
 800e2fc:	200021e0 	.word	0x200021e0
 800e300:	200021cc 	.word	0x200021cc
 800e304:	200021c4 	.word	0x200021c4

0800e308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e308:	b480      	push	{r7}
 800e30a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e30c:	4b04      	ldr	r3, [pc, #16]	; (800e320 <vTaskSuspendAll+0x18>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	3301      	adds	r3, #1
 800e312:	4a03      	ldr	r2, [pc, #12]	; (800e320 <vTaskSuspendAll+0x18>)
 800e314:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e316:	bf00      	nop
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr
 800e320:	200021e8 	.word	0x200021e8

0800e324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e32a:	2300      	movs	r3, #0
 800e32c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e32e:	2300      	movs	r3, #0
 800e330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e332:	4b42      	ldr	r3, [pc, #264]	; (800e43c <xTaskResumeAll+0x118>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d10a      	bne.n	800e350 <xTaskResumeAll+0x2c>
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	603b      	str	r3, [r7, #0]
}
 800e34c:	bf00      	nop
 800e34e:	e7fe      	b.n	800e34e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e350:	f001 fb60 	bl	800fa14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e354:	4b39      	ldr	r3, [pc, #228]	; (800e43c <xTaskResumeAll+0x118>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	3b01      	subs	r3, #1
 800e35a:	4a38      	ldr	r2, [pc, #224]	; (800e43c <xTaskResumeAll+0x118>)
 800e35c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e35e:	4b37      	ldr	r3, [pc, #220]	; (800e43c <xTaskResumeAll+0x118>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d162      	bne.n	800e42c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e366:	4b36      	ldr	r3, [pc, #216]	; (800e440 <xTaskResumeAll+0x11c>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d05e      	beq.n	800e42c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e36e:	e02f      	b.n	800e3d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e370:	4b34      	ldr	r3, [pc, #208]	; (800e444 <xTaskResumeAll+0x120>)
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	3318      	adds	r3, #24
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fe ff2b 	bl	800d1d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	3304      	adds	r3, #4
 800e386:	4618      	mov	r0, r3
 800e388:	f7fe ff26 	bl	800d1d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e390:	4b2d      	ldr	r3, [pc, #180]	; (800e448 <xTaskResumeAll+0x124>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	429a      	cmp	r2, r3
 800e396:	d903      	bls.n	800e3a0 <xTaskResumeAll+0x7c>
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e39c:	4a2a      	ldr	r2, [pc, #168]	; (800e448 <xTaskResumeAll+0x124>)
 800e39e:	6013      	str	r3, [r2, #0]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3a4:	4613      	mov	r3, r2
 800e3a6:	009b      	lsls	r3, r3, #2
 800e3a8:	4413      	add	r3, r2
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	4a27      	ldr	r2, [pc, #156]	; (800e44c <xTaskResumeAll+0x128>)
 800e3ae:	441a      	add	r2, r3
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	3304      	adds	r3, #4
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	4610      	mov	r0, r2
 800e3b8:	f7fe feb1 	bl	800d11e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c0:	4b23      	ldr	r3, [pc, #140]	; (800e450 <xTaskResumeAll+0x12c>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d302      	bcc.n	800e3d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e3ca:	4b22      	ldr	r3, [pc, #136]	; (800e454 <xTaskResumeAll+0x130>)
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3d0:	4b1c      	ldr	r3, [pc, #112]	; (800e444 <xTaskResumeAll+0x120>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d1cb      	bne.n	800e370 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d001      	beq.n	800e3e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e3de:	f000 fce1 	bl	800eda4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e3e2:	4b1d      	ldr	r3, [pc, #116]	; (800e458 <xTaskResumeAll+0x134>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d010      	beq.n	800e410 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e3ee:	f000 f8d7 	bl	800e5a0 <xTaskIncrementTick>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d002      	beq.n	800e3fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e3f8:	4b16      	ldr	r3, [pc, #88]	; (800e454 <xTaskResumeAll+0x130>)
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	3b01      	subs	r3, #1
 800e402:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d1f1      	bne.n	800e3ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e40a:	4b13      	ldr	r3, [pc, #76]	; (800e458 <xTaskResumeAll+0x134>)
 800e40c:	2200      	movs	r2, #0
 800e40e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e410:	4b10      	ldr	r3, [pc, #64]	; (800e454 <xTaskResumeAll+0x130>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d009      	beq.n	800e42c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e418:	2301      	movs	r3, #1
 800e41a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e41c:	4b0f      	ldr	r3, [pc, #60]	; (800e45c <xTaskResumeAll+0x138>)
 800e41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e422:	601a      	str	r2, [r3, #0]
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e42c:	f001 fb22 	bl	800fa74 <vPortExitCritical>

	return xAlreadyYielded;
 800e430:	68bb      	ldr	r3, [r7, #8]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	200021e8 	.word	0x200021e8
 800e440:	200021c0 	.word	0x200021c0
 800e444:	20002180 	.word	0x20002180
 800e448:	200021c8 	.word	0x200021c8
 800e44c:	20001cf0 	.word	0x20001cf0
 800e450:	20001cec 	.word	0x20001cec
 800e454:	200021d4 	.word	0x200021d4
 800e458:	200021d0 	.word	0x200021d0
 800e45c:	e000ed04 	.word	0xe000ed04

0800e460 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e466:	4b05      	ldr	r3, [pc, #20]	; (800e47c <xTaskGetTickCount+0x1c>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e46c:	687b      	ldr	r3, [r7, #4]
}
 800e46e:	4618      	mov	r0, r3
 800e470:	370c      	adds	r7, #12
 800e472:	46bd      	mov	sp, r7
 800e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop
 800e47c:	200021c4 	.word	0x200021c4

0800e480 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e48c:	2300      	movs	r3, #0
 800e48e:	617b      	str	r3, [r7, #20]
 800e490:	2338      	movs	r3, #56	; 0x38
 800e492:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800e494:	f7ff ff38 	bl	800e308 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e498:	4b3b      	ldr	r3, [pc, #236]	; (800e588 <uxTaskGetSystemState+0x108>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d36a      	bcc.n	800e578 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	3b01      	subs	r3, #1
 800e4a6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e4a8:	697a      	ldr	r2, [r7, #20]
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	00db      	lsls	r3, r3, #3
 800e4ae:	4413      	add	r3, r2
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	1898      	adds	r0, r3, r2
 800e4b8:	693a      	ldr	r2, [r7, #16]
 800e4ba:	4613      	mov	r3, r2
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	4413      	add	r3, r2
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	4a32      	ldr	r2, [pc, #200]	; (800e58c <uxTaskGetSystemState+0x10c>)
 800e4c4:	4413      	add	r3, r2
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	f000 fbc9 	bl	800ec60 <prvListTasksWithinSingleList>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d1e2      	bne.n	800e4a2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e4dc:	697a      	ldr	r2, [r7, #20]
 800e4de:	4613      	mov	r3, r2
 800e4e0:	00db      	lsls	r3, r3, #3
 800e4e2:	4413      	add	r3, r2
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	4a28      	ldr	r2, [pc, #160]	; (800e590 <uxTaskGetSystemState+0x110>)
 800e4ee:	6811      	ldr	r1, [r2, #0]
 800e4f0:	2202      	movs	r2, #2
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f000 fbb4 	bl	800ec60 <prvListTasksWithinSingleList>
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	4613      	mov	r3, r2
 800e504:	00db      	lsls	r3, r3, #3
 800e506:	4413      	add	r3, r2
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	461a      	mov	r2, r3
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	4413      	add	r3, r2
 800e510:	4a20      	ldr	r2, [pc, #128]	; (800e594 <uxTaskGetSystemState+0x114>)
 800e512:	6811      	ldr	r1, [r2, #0]
 800e514:	2202      	movs	r2, #2
 800e516:	4618      	mov	r0, r3
 800e518:	f000 fba2 	bl	800ec60 <prvListTasksWithinSingleList>
 800e51c:	4602      	mov	r2, r0
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	4413      	add	r3, r2
 800e522:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800e524:	697a      	ldr	r2, [r7, #20]
 800e526:	4613      	mov	r3, r2
 800e528:	00db      	lsls	r3, r3, #3
 800e52a:	4413      	add	r3, r2
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	461a      	mov	r2, r3
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	4413      	add	r3, r2
 800e534:	2204      	movs	r2, #4
 800e536:	4918      	ldr	r1, [pc, #96]	; (800e598 <uxTaskGetSystemState+0x118>)
 800e538:	4618      	mov	r0, r3
 800e53a:	f000 fb91 	bl	800ec60 <prvListTasksWithinSingleList>
 800e53e:	4602      	mov	r2, r0
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	4413      	add	r3, r2
 800e544:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e546:	697a      	ldr	r2, [r7, #20]
 800e548:	4613      	mov	r3, r2
 800e54a:	00db      	lsls	r3, r3, #3
 800e54c:	4413      	add	r3, r2
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	461a      	mov	r2, r3
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	4413      	add	r3, r2
 800e556:	2203      	movs	r2, #3
 800e558:	4910      	ldr	r1, [pc, #64]	; (800e59c <uxTaskGetSystemState+0x11c>)
 800e55a:	4618      	mov	r0, r3
 800e55c:	f000 fb80 	bl	800ec60 <prvListTasksWithinSingleList>
 800e560:	4602      	mov	r2, r0
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	4413      	add	r3, r2
 800e566:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d004      	beq.n	800e578 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e56e:	f7f3 f915 	bl	800179c <getRunTimeCounterValue>
 800e572:	4602      	mov	r2, r0
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800e578:	f7ff fed4 	bl	800e324 <xTaskResumeAll>

		return uxTask;
 800e57c:	697b      	ldr	r3, [r7, #20]
	}
 800e57e:	4618      	mov	r0, r3
 800e580:	3718      	adds	r7, #24
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	200021c0 	.word	0x200021c0
 800e58c:	20001cf0 	.word	0x20001cf0
 800e590:	20002178 	.word	0x20002178
 800e594:	2000217c 	.word	0x2000217c
 800e598:	20002194 	.word	0x20002194
 800e59c:	200021ac 	.word	0x200021ac

0800e5a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5aa:	4b4f      	ldr	r3, [pc, #316]	; (800e6e8 <xTaskIncrementTick+0x148>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	f040 808f 	bne.w	800e6d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e5b4:	4b4d      	ldr	r3, [pc, #308]	; (800e6ec <xTaskIncrementTick+0x14c>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e5bc:	4a4b      	ldr	r2, [pc, #300]	; (800e6ec <xTaskIncrementTick+0x14c>)
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d120      	bne.n	800e60a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e5c8:	4b49      	ldr	r3, [pc, #292]	; (800e6f0 <xTaskIncrementTick+0x150>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00a      	beq.n	800e5e8 <xTaskIncrementTick+0x48>
	__asm volatile
 800e5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d6:	f383 8811 	msr	BASEPRI, r3
 800e5da:	f3bf 8f6f 	isb	sy
 800e5de:	f3bf 8f4f 	dsb	sy
 800e5e2:	603b      	str	r3, [r7, #0]
}
 800e5e4:	bf00      	nop
 800e5e6:	e7fe      	b.n	800e5e6 <xTaskIncrementTick+0x46>
 800e5e8:	4b41      	ldr	r3, [pc, #260]	; (800e6f0 <xTaskIncrementTick+0x150>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	60fb      	str	r3, [r7, #12]
 800e5ee:	4b41      	ldr	r3, [pc, #260]	; (800e6f4 <xTaskIncrementTick+0x154>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4a3f      	ldr	r2, [pc, #252]	; (800e6f0 <xTaskIncrementTick+0x150>)
 800e5f4:	6013      	str	r3, [r2, #0]
 800e5f6:	4a3f      	ldr	r2, [pc, #252]	; (800e6f4 <xTaskIncrementTick+0x154>)
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6013      	str	r3, [r2, #0]
 800e5fc:	4b3e      	ldr	r3, [pc, #248]	; (800e6f8 <xTaskIncrementTick+0x158>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	3301      	adds	r3, #1
 800e602:	4a3d      	ldr	r2, [pc, #244]	; (800e6f8 <xTaskIncrementTick+0x158>)
 800e604:	6013      	str	r3, [r2, #0]
 800e606:	f000 fbcd 	bl	800eda4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e60a:	4b3c      	ldr	r3, [pc, #240]	; (800e6fc <xTaskIncrementTick+0x15c>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	693a      	ldr	r2, [r7, #16]
 800e610:	429a      	cmp	r2, r3
 800e612:	d349      	bcc.n	800e6a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e614:	4b36      	ldr	r3, [pc, #216]	; (800e6f0 <xTaskIncrementTick+0x150>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d104      	bne.n	800e628 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e61e:	4b37      	ldr	r3, [pc, #220]	; (800e6fc <xTaskIncrementTick+0x15c>)
 800e620:	f04f 32ff 	mov.w	r2, #4294967295
 800e624:	601a      	str	r2, [r3, #0]
					break;
 800e626:	e03f      	b.n	800e6a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e628:	4b31      	ldr	r3, [pc, #196]	; (800e6f0 <xTaskIncrementTick+0x150>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e638:	693a      	ldr	r2, [r7, #16]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d203      	bcs.n	800e648 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e640:	4a2e      	ldr	r2, [pc, #184]	; (800e6fc <xTaskIncrementTick+0x15c>)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e646:	e02f      	b.n	800e6a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	3304      	adds	r3, #4
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7fe fdc3 	bl	800d1d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e656:	2b00      	cmp	r3, #0
 800e658:	d004      	beq.n	800e664 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	3318      	adds	r3, #24
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fe fdba 	bl	800d1d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e668:	4b25      	ldr	r3, [pc, #148]	; (800e700 <xTaskIncrementTick+0x160>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d903      	bls.n	800e678 <xTaskIncrementTick+0xd8>
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e674:	4a22      	ldr	r2, [pc, #136]	; (800e700 <xTaskIncrementTick+0x160>)
 800e676:	6013      	str	r3, [r2, #0]
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e67c:	4613      	mov	r3, r2
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	4413      	add	r3, r2
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	4a1f      	ldr	r2, [pc, #124]	; (800e704 <xTaskIncrementTick+0x164>)
 800e686:	441a      	add	r2, r3
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	3304      	adds	r3, #4
 800e68c:	4619      	mov	r1, r3
 800e68e:	4610      	mov	r0, r2
 800e690:	f7fe fd45 	bl	800d11e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e698:	4b1b      	ldr	r3, [pc, #108]	; (800e708 <xTaskIncrementTick+0x168>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d3b8      	bcc.n	800e614 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6a6:	e7b5      	b.n	800e614 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e6a8:	4b17      	ldr	r3, [pc, #92]	; (800e708 <xTaskIncrementTick+0x168>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ae:	4915      	ldr	r1, [pc, #84]	; (800e704 <xTaskIncrementTick+0x164>)
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	4413      	add	r3, r2
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	440b      	add	r3, r1
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d901      	bls.n	800e6c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e6c4:	4b11      	ldr	r3, [pc, #68]	; (800e70c <xTaskIncrementTick+0x16c>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d007      	beq.n	800e6dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	617b      	str	r3, [r7, #20]
 800e6d0:	e004      	b.n	800e6dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e6d2:	4b0f      	ldr	r3, [pc, #60]	; (800e710 <xTaskIncrementTick+0x170>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	4a0d      	ldr	r2, [pc, #52]	; (800e710 <xTaskIncrementTick+0x170>)
 800e6da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e6dc:	697b      	ldr	r3, [r7, #20]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3718      	adds	r7, #24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	200021e8 	.word	0x200021e8
 800e6ec:	200021c4 	.word	0x200021c4
 800e6f0:	20002178 	.word	0x20002178
 800e6f4:	2000217c 	.word	0x2000217c
 800e6f8:	200021d8 	.word	0x200021d8
 800e6fc:	200021e0 	.word	0x200021e0
 800e700:	200021c8 	.word	0x200021c8
 800e704:	20001cf0 	.word	0x20001cf0
 800e708:	20001cec 	.word	0x20001cec
 800e70c:	200021d4 	.word	0x200021d4
 800e710:	200021d0 	.word	0x200021d0

0800e714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e71a:	4b36      	ldr	r3, [pc, #216]	; (800e7f4 <vTaskSwitchContext+0xe0>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d003      	beq.n	800e72a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e722:	4b35      	ldr	r3, [pc, #212]	; (800e7f8 <vTaskSwitchContext+0xe4>)
 800e724:	2201      	movs	r2, #1
 800e726:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e728:	e05f      	b.n	800e7ea <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800e72a:	4b33      	ldr	r3, [pc, #204]	; (800e7f8 <vTaskSwitchContext+0xe4>)
 800e72c:	2200      	movs	r2, #0
 800e72e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e730:	f7f3 f834 	bl	800179c <getRunTimeCounterValue>
 800e734:	4603      	mov	r3, r0
 800e736:	4a31      	ldr	r2, [pc, #196]	; (800e7fc <vTaskSwitchContext+0xe8>)
 800e738:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e73a:	4b30      	ldr	r3, [pc, #192]	; (800e7fc <vTaskSwitchContext+0xe8>)
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	4b30      	ldr	r3, [pc, #192]	; (800e800 <vTaskSwitchContext+0xec>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	429a      	cmp	r2, r3
 800e744:	d909      	bls.n	800e75a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e746:	4b2f      	ldr	r3, [pc, #188]	; (800e804 <vTaskSwitchContext+0xf0>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e74c:	4a2b      	ldr	r2, [pc, #172]	; (800e7fc <vTaskSwitchContext+0xe8>)
 800e74e:	6810      	ldr	r0, [r2, #0]
 800e750:	4a2b      	ldr	r2, [pc, #172]	; (800e800 <vTaskSwitchContext+0xec>)
 800e752:	6812      	ldr	r2, [r2, #0]
 800e754:	1a82      	subs	r2, r0, r2
 800e756:	440a      	add	r2, r1
 800e758:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e75a:	4b28      	ldr	r3, [pc, #160]	; (800e7fc <vTaskSwitchContext+0xe8>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4a28      	ldr	r2, [pc, #160]	; (800e800 <vTaskSwitchContext+0xec>)
 800e760:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e762:	4b29      	ldr	r3, [pc, #164]	; (800e808 <vTaskSwitchContext+0xf4>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	60fb      	str	r3, [r7, #12]
 800e768:	e010      	b.n	800e78c <vTaskSwitchContext+0x78>
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d10a      	bne.n	800e786 <vTaskSwitchContext+0x72>
	__asm volatile
 800e770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e774:	f383 8811 	msr	BASEPRI, r3
 800e778:	f3bf 8f6f 	isb	sy
 800e77c:	f3bf 8f4f 	dsb	sy
 800e780:	607b      	str	r3, [r7, #4]
}
 800e782:	bf00      	nop
 800e784:	e7fe      	b.n	800e784 <vTaskSwitchContext+0x70>
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	3b01      	subs	r3, #1
 800e78a:	60fb      	str	r3, [r7, #12]
 800e78c:	491f      	ldr	r1, [pc, #124]	; (800e80c <vTaskSwitchContext+0xf8>)
 800e78e:	68fa      	ldr	r2, [r7, #12]
 800e790:	4613      	mov	r3, r2
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	4413      	add	r3, r2
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	440b      	add	r3, r1
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d0e4      	beq.n	800e76a <vTaskSwitchContext+0x56>
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	4613      	mov	r3, r2
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	4413      	add	r3, r2
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	4a18      	ldr	r2, [pc, #96]	; (800e80c <vTaskSwitchContext+0xf8>)
 800e7ac:	4413      	add	r3, r2
 800e7ae:	60bb      	str	r3, [r7, #8]
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	685a      	ldr	r2, [r3, #4]
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	605a      	str	r2, [r3, #4]
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	685a      	ldr	r2, [r3, #4]
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	3308      	adds	r3, #8
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d104      	bne.n	800e7d0 <vTaskSwitchContext+0xbc>
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	605a      	str	r2, [r3, #4]
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	68db      	ldr	r3, [r3, #12]
 800e7d6:	4a0b      	ldr	r2, [pc, #44]	; (800e804 <vTaskSwitchContext+0xf0>)
 800e7d8:	6013      	str	r3, [r2, #0]
 800e7da:	4a0b      	ldr	r2, [pc, #44]	; (800e808 <vTaskSwitchContext+0xf4>)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e7e0:	4b08      	ldr	r3, [pc, #32]	; (800e804 <vTaskSwitchContext+0xf0>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	3358      	adds	r3, #88	; 0x58
 800e7e6:	4a0a      	ldr	r2, [pc, #40]	; (800e810 <vTaskSwitchContext+0xfc>)
 800e7e8:	6013      	str	r3, [r2, #0]
}
 800e7ea:	bf00      	nop
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	200021e8 	.word	0x200021e8
 800e7f8:	200021d4 	.word	0x200021d4
 800e7fc:	200021f0 	.word	0x200021f0
 800e800:	200021ec 	.word	0x200021ec
 800e804:	20001cec 	.word	0x20001cec
 800e808:	200021c8 	.word	0x200021c8
 800e80c:	20001cf0 	.word	0x20001cf0
 800e810:	2000018c 	.word	0x2000018c

0800e814 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d10a      	bne.n	800e83a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	60fb      	str	r3, [r7, #12]
}
 800e836:	bf00      	nop
 800e838:	e7fe      	b.n	800e838 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e83a:	4b07      	ldr	r3, [pc, #28]	; (800e858 <vTaskPlaceOnEventList+0x44>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	3318      	adds	r3, #24
 800e840:	4619      	mov	r1, r3
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7fe fc8f 	bl	800d166 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e848:	2101      	movs	r1, #1
 800e84a:	6838      	ldr	r0, [r7, #0]
 800e84c:	f000 fc12 	bl	800f074 <prvAddCurrentTaskToDelayedList>
}
 800e850:	bf00      	nop
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	20001cec 	.word	0x20001cec

0800e85c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b086      	sub	sp, #24
 800e860:	af00      	add	r7, sp, #0
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	60b9      	str	r1, [r7, #8]
 800e866:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10a      	bne.n	800e884 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e872:	f383 8811 	msr	BASEPRI, r3
 800e876:	f3bf 8f6f 	isb	sy
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	617b      	str	r3, [r7, #20]
}
 800e880:	bf00      	nop
 800e882:	e7fe      	b.n	800e882 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e884:	4b0a      	ldr	r3, [pc, #40]	; (800e8b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3318      	adds	r3, #24
 800e88a:	4619      	mov	r1, r3
 800e88c:	68f8      	ldr	r0, [r7, #12]
 800e88e:	f7fe fc46 	bl	800d11e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d002      	beq.n	800e89e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e898:	f04f 33ff 	mov.w	r3, #4294967295
 800e89c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e89e:	6879      	ldr	r1, [r7, #4]
 800e8a0:	68b8      	ldr	r0, [r7, #8]
 800e8a2:	f000 fbe7 	bl	800f074 <prvAddCurrentTaskToDelayedList>
	}
 800e8a6:	bf00      	nop
 800e8a8:	3718      	adds	r7, #24
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20001cec 	.word	0x20001cec

0800e8b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d10a      	bne.n	800e8e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ce:	f383 8811 	msr	BASEPRI, r3
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	60fb      	str	r3, [r7, #12]
}
 800e8dc:	bf00      	nop
 800e8de:	e7fe      	b.n	800e8de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	3318      	adds	r3, #24
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7fe fc77 	bl	800d1d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8ea:	4b1e      	ldr	r3, [pc, #120]	; (800e964 <xTaskRemoveFromEventList+0xb0>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d11d      	bne.n	800e92e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	3304      	adds	r3, #4
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fe fc6e 	bl	800d1d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e900:	4b19      	ldr	r3, [pc, #100]	; (800e968 <xTaskRemoveFromEventList+0xb4>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	429a      	cmp	r2, r3
 800e906:	d903      	bls.n	800e910 <xTaskRemoveFromEventList+0x5c>
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90c:	4a16      	ldr	r2, [pc, #88]	; (800e968 <xTaskRemoveFromEventList+0xb4>)
 800e90e:	6013      	str	r3, [r2, #0]
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e914:	4613      	mov	r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	4413      	add	r3, r2
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	4a13      	ldr	r2, [pc, #76]	; (800e96c <xTaskRemoveFromEventList+0xb8>)
 800e91e:	441a      	add	r2, r3
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	3304      	adds	r3, #4
 800e924:	4619      	mov	r1, r3
 800e926:	4610      	mov	r0, r2
 800e928:	f7fe fbf9 	bl	800d11e <vListInsertEnd>
 800e92c:	e005      	b.n	800e93a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	3318      	adds	r3, #24
 800e932:	4619      	mov	r1, r3
 800e934:	480e      	ldr	r0, [pc, #56]	; (800e970 <xTaskRemoveFromEventList+0xbc>)
 800e936:	f7fe fbf2 	bl	800d11e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e93e:	4b0d      	ldr	r3, [pc, #52]	; (800e974 <xTaskRemoveFromEventList+0xc0>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e944:	429a      	cmp	r2, r3
 800e946:	d905      	bls.n	800e954 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e948:	2301      	movs	r3, #1
 800e94a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e94c:	4b0a      	ldr	r3, [pc, #40]	; (800e978 <xTaskRemoveFromEventList+0xc4>)
 800e94e:	2201      	movs	r2, #1
 800e950:	601a      	str	r2, [r3, #0]
 800e952:	e001      	b.n	800e958 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e954:	2300      	movs	r3, #0
 800e956:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e958:	697b      	ldr	r3, [r7, #20]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3718      	adds	r7, #24
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	200021e8 	.word	0x200021e8
 800e968:	200021c8 	.word	0x200021c8
 800e96c:	20001cf0 	.word	0x20001cf0
 800e970:	20002180 	.word	0x20002180
 800e974:	20001cec 	.word	0x20001cec
 800e978:	200021d4 	.word	0x200021d4

0800e97c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e984:	4b06      	ldr	r3, [pc, #24]	; (800e9a0 <vTaskInternalSetTimeOutState+0x24>)
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e98c:	4b05      	ldr	r3, [pc, #20]	; (800e9a4 <vTaskInternalSetTimeOutState+0x28>)
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	605a      	str	r2, [r3, #4]
}
 800e994:	bf00      	nop
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr
 800e9a0:	200021d8 	.word	0x200021d8
 800e9a4:	200021c4 	.word	0x200021c4

0800e9a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b088      	sub	sp, #32
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d10a      	bne.n	800e9ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9bc:	f383 8811 	msr	BASEPRI, r3
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	613b      	str	r3, [r7, #16]
}
 800e9ca:	bf00      	nop
 800e9cc:	e7fe      	b.n	800e9cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d10a      	bne.n	800e9ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	60fb      	str	r3, [r7, #12]
}
 800e9e6:	bf00      	nop
 800e9e8:	e7fe      	b.n	800e9e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e9ea:	f001 f813 	bl	800fa14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e9ee:	4b1d      	ldr	r3, [pc, #116]	; (800ea64 <xTaskCheckForTimeOut+0xbc>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	69ba      	ldr	r2, [r7, #24]
 800e9fa:	1ad3      	subs	r3, r2, r3
 800e9fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea06:	d102      	bne.n	800ea0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	61fb      	str	r3, [r7, #28]
 800ea0c:	e023      	b.n	800ea56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	4b15      	ldr	r3, [pc, #84]	; (800ea68 <xTaskCheckForTimeOut+0xc0>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d007      	beq.n	800ea2a <xTaskCheckForTimeOut+0x82>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	69ba      	ldr	r2, [r7, #24]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d302      	bcc.n	800ea2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea24:	2301      	movs	r3, #1
 800ea26:	61fb      	str	r3, [r7, #28]
 800ea28:	e015      	b.n	800ea56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	697a      	ldr	r2, [r7, #20]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d20b      	bcs.n	800ea4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	1ad2      	subs	r2, r2, r3
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f7ff ff9b 	bl	800e97c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea46:	2300      	movs	r3, #0
 800ea48:	61fb      	str	r3, [r7, #28]
 800ea4a:	e004      	b.n	800ea56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea52:	2301      	movs	r3, #1
 800ea54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea56:	f001 f80d 	bl	800fa74 <vPortExitCritical>

	return xReturn;
 800ea5a:	69fb      	ldr	r3, [r7, #28]
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3720      	adds	r7, #32
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	200021c4 	.word	0x200021c4
 800ea68:	200021d8 	.word	0x200021d8

0800ea6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea70:	4b03      	ldr	r3, [pc, #12]	; (800ea80 <vTaskMissedYield+0x14>)
 800ea72:	2201      	movs	r2, #1
 800ea74:	601a      	str	r2, [r3, #0]
}
 800ea76:	bf00      	nop
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	200021d4 	.word	0x200021d4

0800ea84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea8c:	f000 f854 	bl	800eb38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea90:	4b07      	ldr	r3, [pc, #28]	; (800eab0 <prvIdleTask+0x2c>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d907      	bls.n	800eaa8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ea98:	4b06      	ldr	r3, [pc, #24]	; (800eab4 <prvIdleTask+0x30>)
 800ea9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea9e:	601a      	str	r2, [r3, #0]
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800eaa8:	f7f2 fe84 	bl	80017b4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800eaac:	e7ee      	b.n	800ea8c <prvIdleTask+0x8>
 800eaae:	bf00      	nop
 800eab0:	20001cf0 	.word	0x20001cf0
 800eab4:	e000ed04 	.word	0xe000ed04

0800eab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eabe:	2300      	movs	r3, #0
 800eac0:	607b      	str	r3, [r7, #4]
 800eac2:	e00c      	b.n	800eade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	4613      	mov	r3, r2
 800eac8:	009b      	lsls	r3, r3, #2
 800eaca:	4413      	add	r3, r2
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	4a12      	ldr	r2, [pc, #72]	; (800eb18 <prvInitialiseTaskLists+0x60>)
 800ead0:	4413      	add	r3, r2
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fe faf6 	bl	800d0c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	3301      	adds	r3, #1
 800eadc:	607b      	str	r3, [r7, #4]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b37      	cmp	r3, #55	; 0x37
 800eae2:	d9ef      	bls.n	800eac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eae4:	480d      	ldr	r0, [pc, #52]	; (800eb1c <prvInitialiseTaskLists+0x64>)
 800eae6:	f7fe faed 	bl	800d0c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eaea:	480d      	ldr	r0, [pc, #52]	; (800eb20 <prvInitialiseTaskLists+0x68>)
 800eaec:	f7fe faea 	bl	800d0c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eaf0:	480c      	ldr	r0, [pc, #48]	; (800eb24 <prvInitialiseTaskLists+0x6c>)
 800eaf2:	f7fe fae7 	bl	800d0c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eaf6:	480c      	ldr	r0, [pc, #48]	; (800eb28 <prvInitialiseTaskLists+0x70>)
 800eaf8:	f7fe fae4 	bl	800d0c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eafc:	480b      	ldr	r0, [pc, #44]	; (800eb2c <prvInitialiseTaskLists+0x74>)
 800eafe:	f7fe fae1 	bl	800d0c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb02:	4b0b      	ldr	r3, [pc, #44]	; (800eb30 <prvInitialiseTaskLists+0x78>)
 800eb04:	4a05      	ldr	r2, [pc, #20]	; (800eb1c <prvInitialiseTaskLists+0x64>)
 800eb06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb08:	4b0a      	ldr	r3, [pc, #40]	; (800eb34 <prvInitialiseTaskLists+0x7c>)
 800eb0a:	4a05      	ldr	r2, [pc, #20]	; (800eb20 <prvInitialiseTaskLists+0x68>)
 800eb0c:	601a      	str	r2, [r3, #0]
}
 800eb0e:	bf00      	nop
 800eb10:	3708      	adds	r7, #8
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	20001cf0 	.word	0x20001cf0
 800eb1c:	20002150 	.word	0x20002150
 800eb20:	20002164 	.word	0x20002164
 800eb24:	20002180 	.word	0x20002180
 800eb28:	20002194 	.word	0x20002194
 800eb2c:	200021ac 	.word	0x200021ac
 800eb30:	20002178 	.word	0x20002178
 800eb34:	2000217c 	.word	0x2000217c

0800eb38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb3e:	e019      	b.n	800eb74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb40:	f000 ff68 	bl	800fa14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb44:	4b10      	ldr	r3, [pc, #64]	; (800eb88 <prvCheckTasksWaitingTermination+0x50>)
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	3304      	adds	r3, #4
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7fe fb41 	bl	800d1d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb56:	4b0d      	ldr	r3, [pc, #52]	; (800eb8c <prvCheckTasksWaitingTermination+0x54>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	4a0b      	ldr	r2, [pc, #44]	; (800eb8c <prvCheckTasksWaitingTermination+0x54>)
 800eb5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb60:	4b0b      	ldr	r3, [pc, #44]	; (800eb90 <prvCheckTasksWaitingTermination+0x58>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	3b01      	subs	r3, #1
 800eb66:	4a0a      	ldr	r2, [pc, #40]	; (800eb90 <prvCheckTasksWaitingTermination+0x58>)
 800eb68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eb6a:	f000 ff83 	bl	800fa74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 f8e4 	bl	800ed3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb74:	4b06      	ldr	r3, [pc, #24]	; (800eb90 <prvCheckTasksWaitingTermination+0x58>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d1e1      	bne.n	800eb40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eb7c:	bf00      	nop
 800eb7e:	bf00      	nop
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20002194 	.word	0x20002194
 800eb8c:	200021c0 	.word	0x200021c0
 800eb90:	200021a8 	.word	0x200021a8

0800eb94 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b086      	sub	sp, #24
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	607a      	str	r2, [r7, #4]
 800eba0:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d102      	bne.n	800ebae <vTaskGetInfo+0x1a>
 800eba8:	4b2c      	ldr	r3, [pc, #176]	; (800ec5c <vTaskGetInfo+0xc8>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	e000      	b.n	800ebb0 <vTaskGetInfo+0x1c>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	697a      	ldr	r2, [r7, #20]
 800ebb6:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800ebea:	78fb      	ldrb	r3, [r7, #3]
 800ebec:	2b05      	cmp	r3, #5
 800ebee:	d01a      	beq.n	800ec26 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800ebf0:	4b1a      	ldr	r3, [pc, #104]	; (800ec5c <vTaskGetInfo+0xc8>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	697a      	ldr	r2, [r7, #20]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d103      	bne.n	800ec02 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	731a      	strb	r2, [r3, #12]
 800ec00:	e018      	b.n	800ec34 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	78fa      	ldrb	r2, [r7, #3]
 800ec06:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800ec08:	78fb      	ldrb	r3, [r7, #3]
 800ec0a:	2b03      	cmp	r3, #3
 800ec0c:	d112      	bne.n	800ec34 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800ec0e:	f7ff fb7b 	bl	800e308 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d002      	beq.n	800ec20 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	2202      	movs	r2, #2
 800ec1e:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800ec20:	f7ff fb80 	bl	800e324 <xTaskResumeAll>
 800ec24:	e006      	b.n	800ec34 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800ec26:	6978      	ldr	r0, [r7, #20]
 800ec28:	f7ff fa96 	bl	800e158 <eTaskGetState>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	461a      	mov	r2, r3
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d009      	beq.n	800ec4e <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f000 f860 	bl	800ed04 <prvTaskCheckFreeStackSpace>
 800ec44:	4603      	mov	r3, r0
 800ec46:	461a      	mov	r2, r3
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800ec4c:	e002      	b.n	800ec54 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2200      	movs	r2, #0
 800ec52:	841a      	strh	r2, [r3, #32]
	}
 800ec54:	bf00      	nop
 800ec56:	3718      	adds	r7, #24
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	20001cec 	.word	0x20001cec

0800ec60 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b08a      	sub	sp, #40	; 0x28
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	4613      	mov	r3, r2
 800ec6c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d03f      	beq.n	800ecfa <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	623b      	str	r3, [r7, #32]
 800ec7e:	6a3b      	ldr	r3, [r7, #32]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	685a      	ldr	r2, [r3, #4]
 800ec84:	6a3b      	ldr	r3, [r7, #32]
 800ec86:	605a      	str	r2, [r3, #4]
 800ec88:	6a3b      	ldr	r3, [r7, #32]
 800ec8a:	685a      	ldr	r2, [r3, #4]
 800ec8c:	6a3b      	ldr	r3, [r7, #32]
 800ec8e:	3308      	adds	r3, #8
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d104      	bne.n	800ec9e <prvListTasksWithinSingleList+0x3e>
 800ec94:	6a3b      	ldr	r3, [r7, #32]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	685a      	ldr	r2, [r3, #4]
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	605a      	str	r2, [r3, #4]
 800ec9e:	6a3b      	ldr	r3, [r7, #32]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	61bb      	str	r3, [r7, #24]
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	685a      	ldr	r2, [r3, #4]
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	605a      	str	r2, [r3, #4]
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	685a      	ldr	r2, [r3, #4]
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	3308      	adds	r3, #8
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d104      	bne.n	800ecca <prvListTasksWithinSingleList+0x6a>
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	685a      	ldr	r2, [r3, #4]
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	605a      	str	r2, [r3, #4]
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800ecd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecd4:	4613      	mov	r3, r2
 800ecd6:	00db      	lsls	r3, r3, #3
 800ecd8:	4413      	add	r3, r2
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	461a      	mov	r2, r3
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	1899      	adds	r1, r3, r2
 800ece2:	79fb      	ldrb	r3, [r7, #7]
 800ece4:	2201      	movs	r2, #1
 800ece6:	6978      	ldr	r0, [r7, #20]
 800ece8:	f7ff ff54 	bl	800eb94 <vTaskGetInfo>
				uxTask++;
 800ecec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecee:	3301      	adds	r3, #1
 800ecf0:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800ecf2:	697a      	ldr	r2, [r7, #20]
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d1d5      	bne.n	800eca6 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800ecfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3728      	adds	r7, #40	; 0x28
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800ed04:	b480      	push	{r7}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ed10:	e005      	b.n	800ed1e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	3301      	adds	r3, #1
 800ed16:	607b      	str	r3, [r7, #4]
			ulCount++;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	2ba5      	cmp	r3, #165	; 0xa5
 800ed24:	d0f5      	beq.n	800ed12 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	089b      	lsrs	r3, r3, #2
 800ed2a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	b29b      	uxth	r3, r3
	}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3714      	adds	r7, #20
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	3358      	adds	r3, #88	; 0x58
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f001 ff97 	bl	8010c7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d108      	bne.n	800ed6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f001 f847 	bl	800fdf0 <vPortFree>
				vPortFree( pxTCB );
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f001 f844 	bl	800fdf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed68:	e018      	b.n	800ed9c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d103      	bne.n	800ed7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f001 f83b 	bl	800fdf0 <vPortFree>
	}
 800ed7a:	e00f      	b.n	800ed9c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ed82:	2b02      	cmp	r3, #2
 800ed84:	d00a      	beq.n	800ed9c <prvDeleteTCB+0x60>
	__asm volatile
 800ed86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed8a:	f383 8811 	msr	BASEPRI, r3
 800ed8e:	f3bf 8f6f 	isb	sy
 800ed92:	f3bf 8f4f 	dsb	sy
 800ed96:	60fb      	str	r3, [r7, #12]
}
 800ed98:	bf00      	nop
 800ed9a:	e7fe      	b.n	800ed9a <prvDeleteTCB+0x5e>
	}
 800ed9c:	bf00      	nop
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edaa:	4b0c      	ldr	r3, [pc, #48]	; (800eddc <prvResetNextTaskUnblockTime+0x38>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d104      	bne.n	800edbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800edb4:	4b0a      	ldr	r3, [pc, #40]	; (800ede0 <prvResetNextTaskUnblockTime+0x3c>)
 800edb6:	f04f 32ff 	mov.w	r2, #4294967295
 800edba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800edbc:	e008      	b.n	800edd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edbe:	4b07      	ldr	r3, [pc, #28]	; (800eddc <prvResetNextTaskUnblockTime+0x38>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	68db      	ldr	r3, [r3, #12]
 800edc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	4a04      	ldr	r2, [pc, #16]	; (800ede0 <prvResetNextTaskUnblockTime+0x3c>)
 800edce:	6013      	str	r3, [r2, #0]
}
 800edd0:	bf00      	nop
 800edd2:	370c      	adds	r7, #12
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr
 800eddc:	20002178 	.word	0x20002178
 800ede0:	200021e0 	.word	0x200021e0

0800ede4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800edea:	4b0b      	ldr	r3, [pc, #44]	; (800ee18 <xTaskGetSchedulerState+0x34>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d102      	bne.n	800edf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800edf2:	2301      	movs	r3, #1
 800edf4:	607b      	str	r3, [r7, #4]
 800edf6:	e008      	b.n	800ee0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edf8:	4b08      	ldr	r3, [pc, #32]	; (800ee1c <xTaskGetSchedulerState+0x38>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d102      	bne.n	800ee06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee00:	2302      	movs	r3, #2
 800ee02:	607b      	str	r3, [r7, #4]
 800ee04:	e001      	b.n	800ee0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ee06:	2300      	movs	r3, #0
 800ee08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee0a:	687b      	ldr	r3, [r7, #4]
	}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	370c      	adds	r7, #12
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr
 800ee18:	200021cc 	.word	0x200021cc
 800ee1c:	200021e8 	.word	0x200021e8

0800ee20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d056      	beq.n	800eee4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ee36:	4b2e      	ldr	r3, [pc, #184]	; (800eef0 <xTaskPriorityDisinherit+0xd0>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	693a      	ldr	r2, [r7, #16]
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d00a      	beq.n	800ee56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ee40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee44:	f383 8811 	msr	BASEPRI, r3
 800ee48:	f3bf 8f6f 	isb	sy
 800ee4c:	f3bf 8f4f 	dsb	sy
 800ee50:	60fb      	str	r3, [r7, #12]
}
 800ee52:	bf00      	nop
 800ee54:	e7fe      	b.n	800ee54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d10a      	bne.n	800ee74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ee5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee62:	f383 8811 	msr	BASEPRI, r3
 800ee66:	f3bf 8f6f 	isb	sy
 800ee6a:	f3bf 8f4f 	dsb	sy
 800ee6e:	60bb      	str	r3, [r7, #8]
}
 800ee70:	bf00      	nop
 800ee72:	e7fe      	b.n	800ee72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee78:	1e5a      	subs	r2, r3, #1
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d02c      	beq.n	800eee4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d128      	bne.n	800eee4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	3304      	adds	r3, #4
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fe f99e 	bl	800d1d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb4:	4b0f      	ldr	r3, [pc, #60]	; (800eef4 <xTaskPriorityDisinherit+0xd4>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d903      	bls.n	800eec4 <xTaskPriorityDisinherit+0xa4>
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec0:	4a0c      	ldr	r2, [pc, #48]	; (800eef4 <xTaskPriorityDisinherit+0xd4>)
 800eec2:	6013      	str	r3, [r2, #0]
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec8:	4613      	mov	r3, r2
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	4413      	add	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4a09      	ldr	r2, [pc, #36]	; (800eef8 <xTaskPriorityDisinherit+0xd8>)
 800eed2:	441a      	add	r2, r3
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	3304      	adds	r3, #4
 800eed8:	4619      	mov	r1, r3
 800eeda:	4610      	mov	r0, r2
 800eedc:	f7fe f91f 	bl	800d11e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eee0:	2301      	movs	r3, #1
 800eee2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eee4:	697b      	ldr	r3, [r7, #20]
	}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3718      	adds	r7, #24
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	20001cec 	.word	0x20001cec
 800eef4:	200021c8 	.word	0x200021c8
 800eef8:	20001cf0 	.word	0x20001cf0

0800eefc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800ef06:	6839      	ldr	r1, [r7, #0]
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f001 ff43 	bl	8010d94 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f7f1 f966 	bl	80001e0 <strlen>
 800ef14:	60f8      	str	r0, [r7, #12]
 800ef16:	e007      	b.n	800ef28 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	2220      	movs	r2, #32
 800ef20:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	3301      	adds	r3, #1
 800ef26:	60fb      	str	r3, [r7, #12]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2b0e      	cmp	r3, #14
 800ef2c:	d9f4      	bls.n	800ef18 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800ef2e:	687a      	ldr	r2, [r7, #4]
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	4413      	add	r3, r2
 800ef34:	2200      	movs	r2, #0
 800ef36:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	4413      	add	r3, r2
	}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
	...

0800ef48 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ef48:	b590      	push	{r4, r7, lr}
 800ef4a:	b089      	sub	sp, #36	; 0x24
 800ef4c:	af02      	add	r7, sp, #8
 800ef4e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ef56:	4b45      	ldr	r3, [pc, #276]	; (800f06c <vTaskList+0x124>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800ef5c:	4b43      	ldr	r3, [pc, #268]	; (800f06c <vTaskList+0x124>)
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	4613      	mov	r3, r2
 800ef62:	00db      	lsls	r3, r3, #3
 800ef64:	4413      	add	r3, r2
 800ef66:	009b      	lsls	r3, r3, #2
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f000 fe75 	bl	800fc58 <pvPortMalloc>
 800ef6e:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d076      	beq.n	800f064 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ef76:	2200      	movs	r2, #0
 800ef78:	68f9      	ldr	r1, [r7, #12]
 800ef7a:	68b8      	ldr	r0, [r7, #8]
 800ef7c:	f7ff fa80 	bl	800e480 <uxTaskGetSystemState>
 800ef80:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ef82:	2300      	movs	r3, #0
 800ef84:	617b      	str	r3, [r7, #20]
 800ef86:	e066      	b.n	800f056 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ef88:	697a      	ldr	r2, [r7, #20]
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	00db      	lsls	r3, r3, #3
 800ef8e:	4413      	add	r3, r2
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	461a      	mov	r2, r3
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	4413      	add	r3, r2
 800ef98:	7b1b      	ldrb	r3, [r3, #12]
 800ef9a:	2b04      	cmp	r3, #4
 800ef9c:	d81b      	bhi.n	800efd6 <vTaskList+0x8e>
 800ef9e:	a201      	add	r2, pc, #4	; (adr r2, 800efa4 <vTaskList+0x5c>)
 800efa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa4:	0800efb9 	.word	0x0800efb9
 800efa8:	0800efbf 	.word	0x0800efbf
 800efac:	0800efc5 	.word	0x0800efc5
 800efb0:	0800efcb 	.word	0x0800efcb
 800efb4:	0800efd1 	.word	0x0800efd1
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800efb8:	2358      	movs	r3, #88	; 0x58
 800efba:	74fb      	strb	r3, [r7, #19]
										break;
 800efbc:	e00e      	b.n	800efdc <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800efbe:	2352      	movs	r3, #82	; 0x52
 800efc0:	74fb      	strb	r3, [r7, #19]
										break;
 800efc2:	e00b      	b.n	800efdc <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800efc4:	2342      	movs	r3, #66	; 0x42
 800efc6:	74fb      	strb	r3, [r7, #19]
										break;
 800efc8:	e008      	b.n	800efdc <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800efca:	2353      	movs	r3, #83	; 0x53
 800efcc:	74fb      	strb	r3, [r7, #19]
										break;
 800efce:	e005      	b.n	800efdc <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800efd0:	2344      	movs	r3, #68	; 0x44
 800efd2:	74fb      	strb	r3, [r7, #19]
										break;
 800efd4:	e002      	b.n	800efdc <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800efd6:	2300      	movs	r3, #0
 800efd8:	74fb      	strb	r3, [r7, #19]
										break;
 800efda:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800efdc:	697a      	ldr	r2, [r7, #20]
 800efde:	4613      	mov	r3, r2
 800efe0:	00db      	lsls	r3, r3, #3
 800efe2:	4413      	add	r3, r2
 800efe4:	009b      	lsls	r3, r3, #2
 800efe6:	461a      	mov	r2, r3
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	4413      	add	r3, r2
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	4619      	mov	r1, r3
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f7ff ff83 	bl	800eefc <prvWriteNameToBuffer>
 800eff6:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800eff8:	7cf9      	ldrb	r1, [r7, #19]
 800effa:	697a      	ldr	r2, [r7, #20]
 800effc:	4613      	mov	r3, r2
 800effe:	00db      	lsls	r3, r3, #3
 800f000:	4413      	add	r3, r2
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	461a      	mov	r2, r3
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	4413      	add	r3, r2
 800f00a:	6918      	ldr	r0, [r3, #16]
 800f00c:	697a      	ldr	r2, [r7, #20]
 800f00e:	4613      	mov	r3, r2
 800f010:	00db      	lsls	r3, r3, #3
 800f012:	4413      	add	r3, r2
 800f014:	009b      	lsls	r3, r3, #2
 800f016:	461a      	mov	r2, r3
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	4413      	add	r3, r2
 800f01c:	8c1b      	ldrh	r3, [r3, #32]
 800f01e:	461c      	mov	r4, r3
 800f020:	697a      	ldr	r2, [r7, #20]
 800f022:	4613      	mov	r3, r2
 800f024:	00db      	lsls	r3, r3, #3
 800f026:	4413      	add	r3, r2
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	461a      	mov	r2, r3
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	4413      	add	r3, r2
 800f030:	689b      	ldr	r3, [r3, #8]
 800f032:	9301      	str	r3, [sp, #4]
 800f034:	9400      	str	r4, [sp, #0]
 800f036:	4603      	mov	r3, r0
 800f038:	460a      	mov	r2, r1
 800f03a:	490d      	ldr	r1, [pc, #52]	; (800f070 <vTaskList+0x128>)
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f001 fe89 	bl	8010d54 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7f1 f8cc 	bl	80001e0 <strlen>
 800f048:	4602      	mov	r2, r0
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4413      	add	r3, r2
 800f04e:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	3301      	adds	r3, #1
 800f054:	617b      	str	r3, [r7, #20]
 800f056:	697a      	ldr	r2, [r7, #20]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d394      	bcc.n	800ef88 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800f05e:	68b8      	ldr	r0, [r7, #8]
 800f060:	f000 fec6 	bl	800fdf0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f064:	bf00      	nop
 800f066:	371c      	adds	r7, #28
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd90      	pop	{r4, r7, pc}
 800f06c:	200021c0 	.word	0x200021c0
 800f070:	080117b8 	.word	0x080117b8

0800f074 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f07e:	4b21      	ldr	r3, [pc, #132]	; (800f104 <prvAddCurrentTaskToDelayedList+0x90>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f084:	4b20      	ldr	r3, [pc, #128]	; (800f108 <prvAddCurrentTaskToDelayedList+0x94>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	3304      	adds	r3, #4
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fe f8a4 	bl	800d1d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f096:	d10a      	bne.n	800f0ae <prvAddCurrentTaskToDelayedList+0x3a>
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d007      	beq.n	800f0ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f09e:	4b1a      	ldr	r3, [pc, #104]	; (800f108 <prvAddCurrentTaskToDelayedList+0x94>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4819      	ldr	r0, [pc, #100]	; (800f10c <prvAddCurrentTaskToDelayedList+0x98>)
 800f0a8:	f7fe f839 	bl	800d11e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f0ac:	e026      	b.n	800f0fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f0ae:	68fa      	ldr	r2, [r7, #12]
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4413      	add	r3, r2
 800f0b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f0b6:	4b14      	ldr	r3, [pc, #80]	; (800f108 <prvAddCurrentTaskToDelayedList+0x94>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	68ba      	ldr	r2, [r7, #8]
 800f0bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f0be:	68ba      	ldr	r2, [r7, #8]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d209      	bcs.n	800f0da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f0c6:	4b12      	ldr	r3, [pc, #72]	; (800f110 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	4b0f      	ldr	r3, [pc, #60]	; (800f108 <prvAddCurrentTaskToDelayedList+0x94>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	3304      	adds	r3, #4
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4610      	mov	r0, r2
 800f0d4:	f7fe f847 	bl	800d166 <vListInsert>
}
 800f0d8:	e010      	b.n	800f0fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f0da:	4b0e      	ldr	r3, [pc, #56]	; (800f114 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	4b0a      	ldr	r3, [pc, #40]	; (800f108 <prvAddCurrentTaskToDelayedList+0x94>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	3304      	adds	r3, #4
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	4610      	mov	r0, r2
 800f0e8:	f7fe f83d 	bl	800d166 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f0ec:	4b0a      	ldr	r3, [pc, #40]	; (800f118 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68ba      	ldr	r2, [r7, #8]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d202      	bcs.n	800f0fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f0f6:	4a08      	ldr	r2, [pc, #32]	; (800f118 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	6013      	str	r3, [r2, #0]
}
 800f0fc:	bf00      	nop
 800f0fe:	3710      	adds	r7, #16
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	200021c4 	.word	0x200021c4
 800f108:	20001cec 	.word	0x20001cec
 800f10c:	200021ac 	.word	0x200021ac
 800f110:	2000217c 	.word	0x2000217c
 800f114:	20002178 	.word	0x20002178
 800f118:	200021e0 	.word	0x200021e0

0800f11c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b08a      	sub	sp, #40	; 0x28
 800f120:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f122:	2300      	movs	r3, #0
 800f124:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f126:	f000 fb07 	bl	800f738 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f12a:	4b1c      	ldr	r3, [pc, #112]	; (800f19c <xTimerCreateTimerTask+0x80>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d021      	beq.n	800f176 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f132:	2300      	movs	r3, #0
 800f134:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f136:	2300      	movs	r3, #0
 800f138:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f13a:	1d3a      	adds	r2, r7, #4
 800f13c:	f107 0108 	add.w	r1, r7, #8
 800f140:	f107 030c 	add.w	r3, r7, #12
 800f144:	4618      	mov	r0, r3
 800f146:	f7fd ffa3 	bl	800d090 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f14a:	6879      	ldr	r1, [r7, #4]
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	9202      	str	r2, [sp, #8]
 800f152:	9301      	str	r3, [sp, #4]
 800f154:	2302      	movs	r3, #2
 800f156:	9300      	str	r3, [sp, #0]
 800f158:	2300      	movs	r3, #0
 800f15a:	460a      	mov	r2, r1
 800f15c:	4910      	ldr	r1, [pc, #64]	; (800f1a0 <xTimerCreateTimerTask+0x84>)
 800f15e:	4811      	ldr	r0, [pc, #68]	; (800f1a4 <xTimerCreateTimerTask+0x88>)
 800f160:	f7fe fe0a 	bl	800dd78 <xTaskCreateStatic>
 800f164:	4603      	mov	r3, r0
 800f166:	4a10      	ldr	r2, [pc, #64]	; (800f1a8 <xTimerCreateTimerTask+0x8c>)
 800f168:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f16a:	4b0f      	ldr	r3, [pc, #60]	; (800f1a8 <xTimerCreateTimerTask+0x8c>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d001      	beq.n	800f176 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f172:	2301      	movs	r3, #1
 800f174:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d10a      	bne.n	800f192 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f180:	f383 8811 	msr	BASEPRI, r3
 800f184:	f3bf 8f6f 	isb	sy
 800f188:	f3bf 8f4f 	dsb	sy
 800f18c:	613b      	str	r3, [r7, #16]
}
 800f18e:	bf00      	nop
 800f190:	e7fe      	b.n	800f190 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f192:	697b      	ldr	r3, [r7, #20]
}
 800f194:	4618      	mov	r0, r3
 800f196:	3718      	adds	r7, #24
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	20002224 	.word	0x20002224
 800f1a0:	080117e0 	.word	0x080117e0
 800f1a4:	0800f2e1 	.word	0x0800f2e1
 800f1a8:	20002228 	.word	0x20002228

0800f1ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b08a      	sub	sp, #40	; 0x28
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
 800f1b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d10a      	bne.n	800f1da <xTimerGenericCommand+0x2e>
	__asm volatile
 800f1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c8:	f383 8811 	msr	BASEPRI, r3
 800f1cc:	f3bf 8f6f 	isb	sy
 800f1d0:	f3bf 8f4f 	dsb	sy
 800f1d4:	623b      	str	r3, [r7, #32]
}
 800f1d6:	bf00      	nop
 800f1d8:	e7fe      	b.n	800f1d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f1da:	4b1a      	ldr	r3, [pc, #104]	; (800f244 <xTimerGenericCommand+0x98>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d02a      	beq.n	800f238 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	2b05      	cmp	r3, #5
 800f1f2:	dc18      	bgt.n	800f226 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f1f4:	f7ff fdf6 	bl	800ede4 <xTaskGetSchedulerState>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b02      	cmp	r3, #2
 800f1fc:	d109      	bne.n	800f212 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f1fe:	4b11      	ldr	r3, [pc, #68]	; (800f244 <xTimerGenericCommand+0x98>)
 800f200:	6818      	ldr	r0, [r3, #0]
 800f202:	f107 0110 	add.w	r1, r7, #16
 800f206:	2300      	movs	r3, #0
 800f208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f20a:	f7fe f94d 	bl	800d4a8 <xQueueGenericSend>
 800f20e:	6278      	str	r0, [r7, #36]	; 0x24
 800f210:	e012      	b.n	800f238 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f212:	4b0c      	ldr	r3, [pc, #48]	; (800f244 <xTimerGenericCommand+0x98>)
 800f214:	6818      	ldr	r0, [r3, #0]
 800f216:	f107 0110 	add.w	r1, r7, #16
 800f21a:	2300      	movs	r3, #0
 800f21c:	2200      	movs	r2, #0
 800f21e:	f7fe f943 	bl	800d4a8 <xQueueGenericSend>
 800f222:	6278      	str	r0, [r7, #36]	; 0x24
 800f224:	e008      	b.n	800f238 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f226:	4b07      	ldr	r3, [pc, #28]	; (800f244 <xTimerGenericCommand+0x98>)
 800f228:	6818      	ldr	r0, [r3, #0]
 800f22a:	f107 0110 	add.w	r1, r7, #16
 800f22e:	2300      	movs	r3, #0
 800f230:	683a      	ldr	r2, [r7, #0]
 800f232:	f7fe fa37 	bl	800d6a4 <xQueueGenericSendFromISR>
 800f236:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3728      	adds	r7, #40	; 0x28
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	20002224 	.word	0x20002224

0800f248 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b088      	sub	sp, #32
 800f24c:	af02      	add	r7, sp, #8
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f252:	4b22      	ldr	r3, [pc, #136]	; (800f2dc <prvProcessExpiredTimer+0x94>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	3304      	adds	r3, #4
 800f260:	4618      	mov	r0, r3
 800f262:	f7fd ffb9 	bl	800d1d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f26c:	f003 0304 	and.w	r3, r3, #4
 800f270:	2b00      	cmp	r3, #0
 800f272:	d022      	beq.n	800f2ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	699a      	ldr	r2, [r3, #24]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	18d1      	adds	r1, r2, r3
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	683a      	ldr	r2, [r7, #0]
 800f280:	6978      	ldr	r0, [r7, #20]
 800f282:	f000 f8d1 	bl	800f428 <prvInsertTimerInActiveList>
 800f286:	4603      	mov	r3, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d01f      	beq.n	800f2cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f28c:	2300      	movs	r3, #0
 800f28e:	9300      	str	r3, [sp, #0]
 800f290:	2300      	movs	r3, #0
 800f292:	687a      	ldr	r2, [r7, #4]
 800f294:	2100      	movs	r1, #0
 800f296:	6978      	ldr	r0, [r7, #20]
 800f298:	f7ff ff88 	bl	800f1ac <xTimerGenericCommand>
 800f29c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d113      	bne.n	800f2cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a8:	f383 8811 	msr	BASEPRI, r3
 800f2ac:	f3bf 8f6f 	isb	sy
 800f2b0:	f3bf 8f4f 	dsb	sy
 800f2b4:	60fb      	str	r3, [r7, #12]
}
 800f2b6:	bf00      	nop
 800f2b8:	e7fe      	b.n	800f2b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2c0:	f023 0301 	bic.w	r3, r3, #1
 800f2c4:	b2da      	uxtb	r2, r3
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	6a1b      	ldr	r3, [r3, #32]
 800f2d0:	6978      	ldr	r0, [r7, #20]
 800f2d2:	4798      	blx	r3
}
 800f2d4:	bf00      	nop
 800f2d6:	3718      	adds	r7, #24
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	2000221c 	.word	0x2000221c

0800f2e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2e8:	f107 0308 	add.w	r3, r7, #8
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f000 f857 	bl	800f3a0 <prvGetNextExpireTime>
 800f2f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	68f8      	ldr	r0, [r7, #12]
 800f2fa:	f000 f803 	bl	800f304 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f2fe:	f000 f8d5 	bl	800f4ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f302:	e7f1      	b.n	800f2e8 <prvTimerTask+0x8>

0800f304 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b084      	sub	sp, #16
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f30e:	f7fe fffb 	bl	800e308 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f312:	f107 0308 	add.w	r3, r7, #8
 800f316:	4618      	mov	r0, r3
 800f318:	f000 f866 	bl	800f3e8 <prvSampleTimeNow>
 800f31c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d130      	bne.n	800f386 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d10a      	bne.n	800f340 <prvProcessTimerOrBlockTask+0x3c>
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d806      	bhi.n	800f340 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f332:	f7fe fff7 	bl	800e324 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f336:	68f9      	ldr	r1, [r7, #12]
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7ff ff85 	bl	800f248 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f33e:	e024      	b.n	800f38a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d008      	beq.n	800f358 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f346:	4b13      	ldr	r3, [pc, #76]	; (800f394 <prvProcessTimerOrBlockTask+0x90>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d101      	bne.n	800f354 <prvProcessTimerOrBlockTask+0x50>
 800f350:	2301      	movs	r3, #1
 800f352:	e000      	b.n	800f356 <prvProcessTimerOrBlockTask+0x52>
 800f354:	2300      	movs	r3, #0
 800f356:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f358:	4b0f      	ldr	r3, [pc, #60]	; (800f398 <prvProcessTimerOrBlockTask+0x94>)
 800f35a:	6818      	ldr	r0, [r3, #0]
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	1ad3      	subs	r3, r2, r3
 800f362:	683a      	ldr	r2, [r7, #0]
 800f364:	4619      	mov	r1, r3
 800f366:	f7fe fcd3 	bl	800dd10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f36a:	f7fe ffdb 	bl	800e324 <xTaskResumeAll>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d10a      	bne.n	800f38a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f374:	4b09      	ldr	r3, [pc, #36]	; (800f39c <prvProcessTimerOrBlockTask+0x98>)
 800f376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f37a:	601a      	str	r2, [r3, #0]
 800f37c:	f3bf 8f4f 	dsb	sy
 800f380:	f3bf 8f6f 	isb	sy
}
 800f384:	e001      	b.n	800f38a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f386:	f7fe ffcd 	bl	800e324 <xTaskResumeAll>
}
 800f38a:	bf00      	nop
 800f38c:	3710      	adds	r7, #16
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	20002220 	.word	0x20002220
 800f398:	20002224 	.word	0x20002224
 800f39c:	e000ed04 	.word	0xe000ed04

0800f3a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b085      	sub	sp, #20
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f3a8:	4b0e      	ldr	r3, [pc, #56]	; (800f3e4 <prvGetNextExpireTime+0x44>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d101      	bne.n	800f3b6 <prvGetNextExpireTime+0x16>
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	e000      	b.n	800f3b8 <prvGetNextExpireTime+0x18>
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d105      	bne.n	800f3d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3c4:	4b07      	ldr	r3, [pc, #28]	; (800f3e4 <prvGetNextExpireTime+0x44>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	60fb      	str	r3, [r7, #12]
 800f3ce:	e001      	b.n	800f3d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3714      	adds	r7, #20
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
 800f3e2:	bf00      	nop
 800f3e4:	2000221c 	.word	0x2000221c

0800f3e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f3f0:	f7ff f836 	bl	800e460 <xTaskGetTickCount>
 800f3f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f3f6:	4b0b      	ldr	r3, [pc, #44]	; (800f424 <prvSampleTimeNow+0x3c>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d205      	bcs.n	800f40c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f400:	f000 f936 	bl	800f670 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2201      	movs	r2, #1
 800f408:	601a      	str	r2, [r3, #0]
 800f40a:	e002      	b.n	800f412 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f412:	4a04      	ldr	r2, [pc, #16]	; (800f424 <prvSampleTimeNow+0x3c>)
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f418:	68fb      	ldr	r3, [r7, #12]
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3710      	adds	r7, #16
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	2000222c 	.word	0x2000222c

0800f428 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b086      	sub	sp, #24
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
 800f434:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f436:	2300      	movs	r3, #0
 800f438:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	68ba      	ldr	r2, [r7, #8]
 800f43e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	68fa      	ldr	r2, [r7, #12]
 800f444:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f446:	68ba      	ldr	r2, [r7, #8]
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d812      	bhi.n	800f474 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f44e:	687a      	ldr	r2, [r7, #4]
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	1ad2      	subs	r2, r2, r3
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	699b      	ldr	r3, [r3, #24]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d302      	bcc.n	800f462 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f45c:	2301      	movs	r3, #1
 800f45e:	617b      	str	r3, [r7, #20]
 800f460:	e01b      	b.n	800f49a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f462:	4b10      	ldr	r3, [pc, #64]	; (800f4a4 <prvInsertTimerInActiveList+0x7c>)
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	3304      	adds	r3, #4
 800f46a:	4619      	mov	r1, r3
 800f46c:	4610      	mov	r0, r2
 800f46e:	f7fd fe7a 	bl	800d166 <vListInsert>
 800f472:	e012      	b.n	800f49a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d206      	bcs.n	800f48a <prvInsertTimerInActiveList+0x62>
 800f47c:	68ba      	ldr	r2, [r7, #8]
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	429a      	cmp	r2, r3
 800f482:	d302      	bcc.n	800f48a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f484:	2301      	movs	r3, #1
 800f486:	617b      	str	r3, [r7, #20]
 800f488:	e007      	b.n	800f49a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f48a:	4b07      	ldr	r3, [pc, #28]	; (800f4a8 <prvInsertTimerInActiveList+0x80>)
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	3304      	adds	r3, #4
 800f492:	4619      	mov	r1, r3
 800f494:	4610      	mov	r0, r2
 800f496:	f7fd fe66 	bl	800d166 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f49a:	697b      	ldr	r3, [r7, #20]
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3718      	adds	r7, #24
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	20002220 	.word	0x20002220
 800f4a8:	2000221c 	.word	0x2000221c

0800f4ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b08e      	sub	sp, #56	; 0x38
 800f4b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f4b2:	e0ca      	b.n	800f64a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	da18      	bge.n	800f4ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f4ba:	1d3b      	adds	r3, r7, #4
 800f4bc:	3304      	adds	r3, #4
 800f4be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d10a      	bne.n	800f4dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ca:	f383 8811 	msr	BASEPRI, r3
 800f4ce:	f3bf 8f6f 	isb	sy
 800f4d2:	f3bf 8f4f 	dsb	sy
 800f4d6:	61fb      	str	r3, [r7, #28]
}
 800f4d8:	bf00      	nop
 800f4da:	e7fe      	b.n	800f4da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4e2:	6850      	ldr	r0, [r2, #4]
 800f4e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4e6:	6892      	ldr	r2, [r2, #8]
 800f4e8:	4611      	mov	r1, r2
 800f4ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f2c0 80aa 	blt.w	800f648 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fa:	695b      	ldr	r3, [r3, #20]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d004      	beq.n	800f50a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f502:	3304      	adds	r3, #4
 800f504:	4618      	mov	r0, r3
 800f506:	f7fd fe67 	bl	800d1d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f50a:	463b      	mov	r3, r7
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7ff ff6b 	bl	800f3e8 <prvSampleTimeNow>
 800f512:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2b09      	cmp	r3, #9
 800f518:	f200 8097 	bhi.w	800f64a <prvProcessReceivedCommands+0x19e>
 800f51c:	a201      	add	r2, pc, #4	; (adr r2, 800f524 <prvProcessReceivedCommands+0x78>)
 800f51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f522:	bf00      	nop
 800f524:	0800f54d 	.word	0x0800f54d
 800f528:	0800f54d 	.word	0x0800f54d
 800f52c:	0800f54d 	.word	0x0800f54d
 800f530:	0800f5c1 	.word	0x0800f5c1
 800f534:	0800f5d5 	.word	0x0800f5d5
 800f538:	0800f61f 	.word	0x0800f61f
 800f53c:	0800f54d 	.word	0x0800f54d
 800f540:	0800f54d 	.word	0x0800f54d
 800f544:	0800f5c1 	.word	0x0800f5c1
 800f548:	0800f5d5 	.word	0x0800f5d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f54e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f552:	f043 0301 	orr.w	r3, r3, #1
 800f556:	b2da      	uxtb	r2, r3
 800f558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f55e:	68ba      	ldr	r2, [r7, #8]
 800f560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f562:	699b      	ldr	r3, [r3, #24]
 800f564:	18d1      	adds	r1, r2, r3
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f56a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f56c:	f7ff ff5c 	bl	800f428 <prvInsertTimerInActiveList>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d069      	beq.n	800f64a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f578:	6a1b      	ldr	r3, [r3, #32]
 800f57a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f57c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f584:	f003 0304 	and.w	r3, r3, #4
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d05e      	beq.n	800f64a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f58c:	68ba      	ldr	r2, [r7, #8]
 800f58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f590:	699b      	ldr	r3, [r3, #24]
 800f592:	441a      	add	r2, r3
 800f594:	2300      	movs	r3, #0
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	2300      	movs	r3, #0
 800f59a:	2100      	movs	r1, #0
 800f59c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f59e:	f7ff fe05 	bl	800f1ac <xTimerGenericCommand>
 800f5a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f5a4:	6a3b      	ldr	r3, [r7, #32]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d14f      	bne.n	800f64a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	61bb      	str	r3, [r7, #24]
}
 800f5bc:	bf00      	nop
 800f5be:	e7fe      	b.n	800f5be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5c6:	f023 0301 	bic.w	r3, r3, #1
 800f5ca:	b2da      	uxtb	r2, r3
 800f5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f5d2:	e03a      	b.n	800f64a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5da:	f043 0301 	orr.w	r3, r3, #1
 800f5de:	b2da      	uxtb	r2, r3
 800f5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f5e6:	68ba      	ldr	r2, [r7, #8]
 800f5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ee:	699b      	ldr	r3, [r3, #24]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d10a      	bne.n	800f60a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f8:	f383 8811 	msr	BASEPRI, r3
 800f5fc:	f3bf 8f6f 	isb	sy
 800f600:	f3bf 8f4f 	dsb	sy
 800f604:	617b      	str	r3, [r7, #20]
}
 800f606:	bf00      	nop
 800f608:	e7fe      	b.n	800f608 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f60c:	699a      	ldr	r2, [r3, #24]
 800f60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f610:	18d1      	adds	r1, r2, r3
 800f612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f618:	f7ff ff06 	bl	800f428 <prvInsertTimerInActiveList>
					break;
 800f61c:	e015      	b.n	800f64a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f624:	f003 0302 	and.w	r3, r3, #2
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d103      	bne.n	800f634 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f62e:	f000 fbdf 	bl	800fdf0 <vPortFree>
 800f632:	e00a      	b.n	800f64a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f63a:	f023 0301 	bic.w	r3, r3, #1
 800f63e:	b2da      	uxtb	r2, r3
 800f640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f646:	e000      	b.n	800f64a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f648:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f64a:	4b08      	ldr	r3, [pc, #32]	; (800f66c <prvProcessReceivedCommands+0x1c0>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	1d39      	adds	r1, r7, #4
 800f650:	2200      	movs	r2, #0
 800f652:	4618      	mov	r0, r3
 800f654:	f7fe f8c2 	bl	800d7dc <xQueueReceive>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f47f af2a 	bne.w	800f4b4 <prvProcessReceivedCommands+0x8>
	}
}
 800f660:	bf00      	nop
 800f662:	bf00      	nop
 800f664:	3730      	adds	r7, #48	; 0x30
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	20002224 	.word	0x20002224

0800f670 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b088      	sub	sp, #32
 800f674:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f676:	e048      	b.n	800f70a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f678:	4b2d      	ldr	r3, [pc, #180]	; (800f730 <prvSwitchTimerLists+0xc0>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f682:	4b2b      	ldr	r3, [pc, #172]	; (800f730 <prvSwitchTimerLists+0xc0>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	68db      	ldr	r3, [r3, #12]
 800f68a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	3304      	adds	r3, #4
 800f690:	4618      	mov	r0, r3
 800f692:	f7fd fda1 	bl	800d1d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	6a1b      	ldr	r3, [r3, #32]
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6a4:	f003 0304 	and.w	r3, r3, #4
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d02e      	beq.n	800f70a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	699b      	ldr	r3, [r3, #24]
 800f6b0:	693a      	ldr	r2, [r7, #16]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f6b6:	68ba      	ldr	r2, [r7, #8]
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d90e      	bls.n	800f6dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	68ba      	ldr	r2, [r7, #8]
 800f6c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f6ca:	4b19      	ldr	r3, [pc, #100]	; (800f730 <prvSwitchTimerLists+0xc0>)
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	3304      	adds	r3, #4
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	f7fd fd46 	bl	800d166 <vListInsert>
 800f6da:	e016      	b.n	800f70a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6dc:	2300      	movs	r3, #0
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	693a      	ldr	r2, [r7, #16]
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f7ff fd60 	bl	800f1ac <xTimerGenericCommand>
 800f6ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d10a      	bne.n	800f70a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f8:	f383 8811 	msr	BASEPRI, r3
 800f6fc:	f3bf 8f6f 	isb	sy
 800f700:	f3bf 8f4f 	dsb	sy
 800f704:	603b      	str	r3, [r7, #0]
}
 800f706:	bf00      	nop
 800f708:	e7fe      	b.n	800f708 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f70a:	4b09      	ldr	r3, [pc, #36]	; (800f730 <prvSwitchTimerLists+0xc0>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d1b1      	bne.n	800f678 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f714:	4b06      	ldr	r3, [pc, #24]	; (800f730 <prvSwitchTimerLists+0xc0>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f71a:	4b06      	ldr	r3, [pc, #24]	; (800f734 <prvSwitchTimerLists+0xc4>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	4a04      	ldr	r2, [pc, #16]	; (800f730 <prvSwitchTimerLists+0xc0>)
 800f720:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f722:	4a04      	ldr	r2, [pc, #16]	; (800f734 <prvSwitchTimerLists+0xc4>)
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	6013      	str	r3, [r2, #0]
}
 800f728:	bf00      	nop
 800f72a:	3718      	adds	r7, #24
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	2000221c 	.word	0x2000221c
 800f734:	20002220 	.word	0x20002220

0800f738 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f73e:	f000 f969 	bl	800fa14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f742:	4b15      	ldr	r3, [pc, #84]	; (800f798 <prvCheckForValidListAndQueue+0x60>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d120      	bne.n	800f78c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f74a:	4814      	ldr	r0, [pc, #80]	; (800f79c <prvCheckForValidListAndQueue+0x64>)
 800f74c:	f7fd fcba 	bl	800d0c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f750:	4813      	ldr	r0, [pc, #76]	; (800f7a0 <prvCheckForValidListAndQueue+0x68>)
 800f752:	f7fd fcb7 	bl	800d0c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f756:	4b13      	ldr	r3, [pc, #76]	; (800f7a4 <prvCheckForValidListAndQueue+0x6c>)
 800f758:	4a10      	ldr	r2, [pc, #64]	; (800f79c <prvCheckForValidListAndQueue+0x64>)
 800f75a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f75c:	4b12      	ldr	r3, [pc, #72]	; (800f7a8 <prvCheckForValidListAndQueue+0x70>)
 800f75e:	4a10      	ldr	r2, [pc, #64]	; (800f7a0 <prvCheckForValidListAndQueue+0x68>)
 800f760:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f762:	2300      	movs	r3, #0
 800f764:	9300      	str	r3, [sp, #0]
 800f766:	4b11      	ldr	r3, [pc, #68]	; (800f7ac <prvCheckForValidListAndQueue+0x74>)
 800f768:	4a11      	ldr	r2, [pc, #68]	; (800f7b0 <prvCheckForValidListAndQueue+0x78>)
 800f76a:	2110      	movs	r1, #16
 800f76c:	200a      	movs	r0, #10
 800f76e:	f7fd fdc5 	bl	800d2fc <xQueueGenericCreateStatic>
 800f772:	4603      	mov	r3, r0
 800f774:	4a08      	ldr	r2, [pc, #32]	; (800f798 <prvCheckForValidListAndQueue+0x60>)
 800f776:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f778:	4b07      	ldr	r3, [pc, #28]	; (800f798 <prvCheckForValidListAndQueue+0x60>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d005      	beq.n	800f78c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f780:	4b05      	ldr	r3, [pc, #20]	; (800f798 <prvCheckForValidListAndQueue+0x60>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	490b      	ldr	r1, [pc, #44]	; (800f7b4 <prvCheckForValidListAndQueue+0x7c>)
 800f786:	4618      	mov	r0, r3
 800f788:	f7fe fa98 	bl	800dcbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f78c:	f000 f972 	bl	800fa74 <vPortExitCritical>
}
 800f790:	bf00      	nop
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	20002224 	.word	0x20002224
 800f79c:	200021f4 	.word	0x200021f4
 800f7a0:	20002208 	.word	0x20002208
 800f7a4:	2000221c 	.word	0x2000221c
 800f7a8:	20002220 	.word	0x20002220
 800f7ac:	200022d0 	.word	0x200022d0
 800f7b0:	20002230 	.word	0x20002230
 800f7b4:	080117e8 	.word	0x080117e8

0800f7b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b085      	sub	sp, #20
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	3b04      	subs	r3, #4
 800f7c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f7d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	3b04      	subs	r3, #4
 800f7d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	f023 0201 	bic.w	r2, r3, #1
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	3b04      	subs	r3, #4
 800f7e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f7e8:	4a0c      	ldr	r2, [pc, #48]	; (800f81c <pxPortInitialiseStack+0x64>)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	3b14      	subs	r3, #20
 800f7f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f7f4:	687a      	ldr	r2, [r7, #4]
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	3b04      	subs	r3, #4
 800f7fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f06f 0202 	mvn.w	r2, #2
 800f806:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	3b20      	subs	r3, #32
 800f80c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f80e:	68fb      	ldr	r3, [r7, #12]
}
 800f810:	4618      	mov	r0, r3
 800f812:	3714      	adds	r7, #20
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr
 800f81c:	0800f821 	.word	0x0800f821

0800f820 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f820:	b480      	push	{r7}
 800f822:	b085      	sub	sp, #20
 800f824:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f826:	2300      	movs	r3, #0
 800f828:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f82a:	4b12      	ldr	r3, [pc, #72]	; (800f874 <prvTaskExitError+0x54>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f832:	d00a      	beq.n	800f84a <prvTaskExitError+0x2a>
	__asm volatile
 800f834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f838:	f383 8811 	msr	BASEPRI, r3
 800f83c:	f3bf 8f6f 	isb	sy
 800f840:	f3bf 8f4f 	dsb	sy
 800f844:	60fb      	str	r3, [r7, #12]
}
 800f846:	bf00      	nop
 800f848:	e7fe      	b.n	800f848 <prvTaskExitError+0x28>
	__asm volatile
 800f84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f84e:	f383 8811 	msr	BASEPRI, r3
 800f852:	f3bf 8f6f 	isb	sy
 800f856:	f3bf 8f4f 	dsb	sy
 800f85a:	60bb      	str	r3, [r7, #8]
}
 800f85c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f85e:	bf00      	nop
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d0fc      	beq.n	800f860 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f866:	bf00      	nop
 800f868:	bf00      	nop
 800f86a:	3714      	adds	r7, #20
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr
 800f874:	20000124 	.word	0x20000124
	...

0800f880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f880:	4b07      	ldr	r3, [pc, #28]	; (800f8a0 <pxCurrentTCBConst2>)
 800f882:	6819      	ldr	r1, [r3, #0]
 800f884:	6808      	ldr	r0, [r1, #0]
 800f886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88a:	f380 8809 	msr	PSP, r0
 800f88e:	f3bf 8f6f 	isb	sy
 800f892:	f04f 0000 	mov.w	r0, #0
 800f896:	f380 8811 	msr	BASEPRI, r0
 800f89a:	4770      	bx	lr
 800f89c:	f3af 8000 	nop.w

0800f8a0 <pxCurrentTCBConst2>:
 800f8a0:	20001cec 	.word	0x20001cec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f8a4:	bf00      	nop
 800f8a6:	bf00      	nop

0800f8a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f8a8:	4808      	ldr	r0, [pc, #32]	; (800f8cc <prvPortStartFirstTask+0x24>)
 800f8aa:	6800      	ldr	r0, [r0, #0]
 800f8ac:	6800      	ldr	r0, [r0, #0]
 800f8ae:	f380 8808 	msr	MSP, r0
 800f8b2:	f04f 0000 	mov.w	r0, #0
 800f8b6:	f380 8814 	msr	CONTROL, r0
 800f8ba:	b662      	cpsie	i
 800f8bc:	b661      	cpsie	f
 800f8be:	f3bf 8f4f 	dsb	sy
 800f8c2:	f3bf 8f6f 	isb	sy
 800f8c6:	df00      	svc	0
 800f8c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f8ca:	bf00      	nop
 800f8cc:	e000ed08 	.word	0xe000ed08

0800f8d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b086      	sub	sp, #24
 800f8d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f8d6:	4b46      	ldr	r3, [pc, #280]	; (800f9f0 <xPortStartScheduler+0x120>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4a46      	ldr	r2, [pc, #280]	; (800f9f4 <xPortStartScheduler+0x124>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d10a      	bne.n	800f8f6 <xPortStartScheduler+0x26>
	__asm volatile
 800f8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e4:	f383 8811 	msr	BASEPRI, r3
 800f8e8:	f3bf 8f6f 	isb	sy
 800f8ec:	f3bf 8f4f 	dsb	sy
 800f8f0:	613b      	str	r3, [r7, #16]
}
 800f8f2:	bf00      	nop
 800f8f4:	e7fe      	b.n	800f8f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f8f6:	4b3e      	ldr	r3, [pc, #248]	; (800f9f0 <xPortStartScheduler+0x120>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	4a3f      	ldr	r2, [pc, #252]	; (800f9f8 <xPortStartScheduler+0x128>)
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d10a      	bne.n	800f916 <xPortStartScheduler+0x46>
	__asm volatile
 800f900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f904:	f383 8811 	msr	BASEPRI, r3
 800f908:	f3bf 8f6f 	isb	sy
 800f90c:	f3bf 8f4f 	dsb	sy
 800f910:	60fb      	str	r3, [r7, #12]
}
 800f912:	bf00      	nop
 800f914:	e7fe      	b.n	800f914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f916:	4b39      	ldr	r3, [pc, #228]	; (800f9fc <xPortStartScheduler+0x12c>)
 800f918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	b2db      	uxtb	r3, r3
 800f920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	22ff      	movs	r2, #255	; 0xff
 800f926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	b2db      	uxtb	r3, r3
 800f92e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f930:	78fb      	ldrb	r3, [r7, #3]
 800f932:	b2db      	uxtb	r3, r3
 800f934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f938:	b2da      	uxtb	r2, r3
 800f93a:	4b31      	ldr	r3, [pc, #196]	; (800fa00 <xPortStartScheduler+0x130>)
 800f93c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f93e:	4b31      	ldr	r3, [pc, #196]	; (800fa04 <xPortStartScheduler+0x134>)
 800f940:	2207      	movs	r2, #7
 800f942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f944:	e009      	b.n	800f95a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f946:	4b2f      	ldr	r3, [pc, #188]	; (800fa04 <xPortStartScheduler+0x134>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	3b01      	subs	r3, #1
 800f94c:	4a2d      	ldr	r2, [pc, #180]	; (800fa04 <xPortStartScheduler+0x134>)
 800f94e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f950:	78fb      	ldrb	r3, [r7, #3]
 800f952:	b2db      	uxtb	r3, r3
 800f954:	005b      	lsls	r3, r3, #1
 800f956:	b2db      	uxtb	r3, r3
 800f958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f95a:	78fb      	ldrb	r3, [r7, #3]
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f962:	2b80      	cmp	r3, #128	; 0x80
 800f964:	d0ef      	beq.n	800f946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f966:	4b27      	ldr	r3, [pc, #156]	; (800fa04 <xPortStartScheduler+0x134>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f1c3 0307 	rsb	r3, r3, #7
 800f96e:	2b04      	cmp	r3, #4
 800f970:	d00a      	beq.n	800f988 <xPortStartScheduler+0xb8>
	__asm volatile
 800f972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f976:	f383 8811 	msr	BASEPRI, r3
 800f97a:	f3bf 8f6f 	isb	sy
 800f97e:	f3bf 8f4f 	dsb	sy
 800f982:	60bb      	str	r3, [r7, #8]
}
 800f984:	bf00      	nop
 800f986:	e7fe      	b.n	800f986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f988:	4b1e      	ldr	r3, [pc, #120]	; (800fa04 <xPortStartScheduler+0x134>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	021b      	lsls	r3, r3, #8
 800f98e:	4a1d      	ldr	r2, [pc, #116]	; (800fa04 <xPortStartScheduler+0x134>)
 800f990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f992:	4b1c      	ldr	r3, [pc, #112]	; (800fa04 <xPortStartScheduler+0x134>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f99a:	4a1a      	ldr	r2, [pc, #104]	; (800fa04 <xPortStartScheduler+0x134>)
 800f99c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	b2da      	uxtb	r2, r3
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f9a6:	4b18      	ldr	r3, [pc, #96]	; (800fa08 <xPortStartScheduler+0x138>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a17      	ldr	r2, [pc, #92]	; (800fa08 <xPortStartScheduler+0x138>)
 800f9ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f9b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f9b2:	4b15      	ldr	r3, [pc, #84]	; (800fa08 <xPortStartScheduler+0x138>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4a14      	ldr	r2, [pc, #80]	; (800fa08 <xPortStartScheduler+0x138>)
 800f9b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f9bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f9be:	f000 f8dd 	bl	800fb7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f9c2:	4b12      	ldr	r3, [pc, #72]	; (800fa0c <xPortStartScheduler+0x13c>)
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f9c8:	f000 f8fc 	bl	800fbc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f9cc:	4b10      	ldr	r3, [pc, #64]	; (800fa10 <xPortStartScheduler+0x140>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4a0f      	ldr	r2, [pc, #60]	; (800fa10 <xPortStartScheduler+0x140>)
 800f9d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f9d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f9d8:	f7ff ff66 	bl	800f8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f9dc:	f7fe fe9a 	bl	800e714 <vTaskSwitchContext>
	prvTaskExitError();
 800f9e0:	f7ff ff1e 	bl	800f820 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f9e4:	2300      	movs	r3, #0
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3718      	adds	r7, #24
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	e000ed00 	.word	0xe000ed00
 800f9f4:	410fc271 	.word	0x410fc271
 800f9f8:	410fc270 	.word	0x410fc270
 800f9fc:	e000e400 	.word	0xe000e400
 800fa00:	20002320 	.word	0x20002320
 800fa04:	20002324 	.word	0x20002324
 800fa08:	e000ed20 	.word	0xe000ed20
 800fa0c:	20000124 	.word	0x20000124
 800fa10:	e000ef34 	.word	0xe000ef34

0800fa14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
	__asm volatile
 800fa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1e:	f383 8811 	msr	BASEPRI, r3
 800fa22:	f3bf 8f6f 	isb	sy
 800fa26:	f3bf 8f4f 	dsb	sy
 800fa2a:	607b      	str	r3, [r7, #4]
}
 800fa2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fa2e:	4b0f      	ldr	r3, [pc, #60]	; (800fa6c <vPortEnterCritical+0x58>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	3301      	adds	r3, #1
 800fa34:	4a0d      	ldr	r2, [pc, #52]	; (800fa6c <vPortEnterCritical+0x58>)
 800fa36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fa38:	4b0c      	ldr	r3, [pc, #48]	; (800fa6c <vPortEnterCritical+0x58>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d10f      	bne.n	800fa60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa40:	4b0b      	ldr	r3, [pc, #44]	; (800fa70 <vPortEnterCritical+0x5c>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	b2db      	uxtb	r3, r3
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d00a      	beq.n	800fa60 <vPortEnterCritical+0x4c>
	__asm volatile
 800fa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	603b      	str	r3, [r7, #0]
}
 800fa5c:	bf00      	nop
 800fa5e:	e7fe      	b.n	800fa5e <vPortEnterCritical+0x4a>
	}
}
 800fa60:	bf00      	nop
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr
 800fa6c:	20000124 	.word	0x20000124
 800fa70:	e000ed04 	.word	0xe000ed04

0800fa74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fa7a:	4b12      	ldr	r3, [pc, #72]	; (800fac4 <vPortExitCritical+0x50>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d10a      	bne.n	800fa98 <vPortExitCritical+0x24>
	__asm volatile
 800fa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa86:	f383 8811 	msr	BASEPRI, r3
 800fa8a:	f3bf 8f6f 	isb	sy
 800fa8e:	f3bf 8f4f 	dsb	sy
 800fa92:	607b      	str	r3, [r7, #4]
}
 800fa94:	bf00      	nop
 800fa96:	e7fe      	b.n	800fa96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fa98:	4b0a      	ldr	r3, [pc, #40]	; (800fac4 <vPortExitCritical+0x50>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	4a09      	ldr	r2, [pc, #36]	; (800fac4 <vPortExitCritical+0x50>)
 800faa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800faa2:	4b08      	ldr	r3, [pc, #32]	; (800fac4 <vPortExitCritical+0x50>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d105      	bne.n	800fab6 <vPortExitCritical+0x42>
 800faaa:	2300      	movs	r3, #0
 800faac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	f383 8811 	msr	BASEPRI, r3
}
 800fab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fab6:	bf00      	nop
 800fab8:	370c      	adds	r7, #12
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop
 800fac4:	20000124 	.word	0x20000124
	...

0800fad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fad0:	f3ef 8009 	mrs	r0, PSP
 800fad4:	f3bf 8f6f 	isb	sy
 800fad8:	4b15      	ldr	r3, [pc, #84]	; (800fb30 <pxCurrentTCBConst>)
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	f01e 0f10 	tst.w	lr, #16
 800fae0:	bf08      	it	eq
 800fae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faea:	6010      	str	r0, [r2, #0]
 800faec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800faf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800faf4:	f380 8811 	msr	BASEPRI, r0
 800faf8:	f3bf 8f4f 	dsb	sy
 800fafc:	f3bf 8f6f 	isb	sy
 800fb00:	f7fe fe08 	bl	800e714 <vTaskSwitchContext>
 800fb04:	f04f 0000 	mov.w	r0, #0
 800fb08:	f380 8811 	msr	BASEPRI, r0
 800fb0c:	bc09      	pop	{r0, r3}
 800fb0e:	6819      	ldr	r1, [r3, #0]
 800fb10:	6808      	ldr	r0, [r1, #0]
 800fb12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb16:	f01e 0f10 	tst.w	lr, #16
 800fb1a:	bf08      	it	eq
 800fb1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fb20:	f380 8809 	msr	PSP, r0
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	4770      	bx	lr
 800fb2a:	bf00      	nop
 800fb2c:	f3af 8000 	nop.w

0800fb30 <pxCurrentTCBConst>:
 800fb30:	20001cec 	.word	0x20001cec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fb34:	bf00      	nop
 800fb36:	bf00      	nop

0800fb38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb42:	f383 8811 	msr	BASEPRI, r3
 800fb46:	f3bf 8f6f 	isb	sy
 800fb4a:	f3bf 8f4f 	dsb	sy
 800fb4e:	607b      	str	r3, [r7, #4]
}
 800fb50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fb52:	f7fe fd25 	bl	800e5a0 <xTaskIncrementTick>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d003      	beq.n	800fb64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fb5c:	4b06      	ldr	r3, [pc, #24]	; (800fb78 <xPortSysTickHandler+0x40>)
 800fb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb62:	601a      	str	r2, [r3, #0]
 800fb64:	2300      	movs	r3, #0
 800fb66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	f383 8811 	msr	BASEPRI, r3
}
 800fb6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fb70:	bf00      	nop
 800fb72:	3708      	adds	r7, #8
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	e000ed04 	.word	0xe000ed04

0800fb7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb80:	4b0b      	ldr	r3, [pc, #44]	; (800fbb0 <vPortSetupTimerInterrupt+0x34>)
 800fb82:	2200      	movs	r2, #0
 800fb84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb86:	4b0b      	ldr	r3, [pc, #44]	; (800fbb4 <vPortSetupTimerInterrupt+0x38>)
 800fb88:	2200      	movs	r2, #0
 800fb8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb8c:	4b0a      	ldr	r3, [pc, #40]	; (800fbb8 <vPortSetupTimerInterrupt+0x3c>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4a0a      	ldr	r2, [pc, #40]	; (800fbbc <vPortSetupTimerInterrupt+0x40>)
 800fb92:	fba2 2303 	umull	r2, r3, r2, r3
 800fb96:	099b      	lsrs	r3, r3, #6
 800fb98:	4a09      	ldr	r2, [pc, #36]	; (800fbc0 <vPortSetupTimerInterrupt+0x44>)
 800fb9a:	3b01      	subs	r3, #1
 800fb9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fb9e:	4b04      	ldr	r3, [pc, #16]	; (800fbb0 <vPortSetupTimerInterrupt+0x34>)
 800fba0:	2207      	movs	r2, #7
 800fba2:	601a      	str	r2, [r3, #0]
}
 800fba4:	bf00      	nop
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr
 800fbae:	bf00      	nop
 800fbb0:	e000e010 	.word	0xe000e010
 800fbb4:	e000e018 	.word	0xe000e018
 800fbb8:	2000008c 	.word	0x2000008c
 800fbbc:	10624dd3 	.word	0x10624dd3
 800fbc0:	e000e014 	.word	0xe000e014

0800fbc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fbc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fbd4 <vPortEnableVFP+0x10>
 800fbc8:	6801      	ldr	r1, [r0, #0]
 800fbca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fbce:	6001      	str	r1, [r0, #0]
 800fbd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fbd2:	bf00      	nop
 800fbd4:	e000ed88 	.word	0xe000ed88

0800fbd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fbd8:	b480      	push	{r7}
 800fbda:	b085      	sub	sp, #20
 800fbdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fbde:	f3ef 8305 	mrs	r3, IPSR
 800fbe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2b0f      	cmp	r3, #15
 800fbe8:	d914      	bls.n	800fc14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fbea:	4a17      	ldr	r2, [pc, #92]	; (800fc48 <vPortValidateInterruptPriority+0x70>)
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	4413      	add	r3, r2
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fbf4:	4b15      	ldr	r3, [pc, #84]	; (800fc4c <vPortValidateInterruptPriority+0x74>)
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	7afa      	ldrb	r2, [r7, #11]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d20a      	bcs.n	800fc14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc02:	f383 8811 	msr	BASEPRI, r3
 800fc06:	f3bf 8f6f 	isb	sy
 800fc0a:	f3bf 8f4f 	dsb	sy
 800fc0e:	607b      	str	r3, [r7, #4]
}
 800fc10:	bf00      	nop
 800fc12:	e7fe      	b.n	800fc12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fc14:	4b0e      	ldr	r3, [pc, #56]	; (800fc50 <vPortValidateInterruptPriority+0x78>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fc1c:	4b0d      	ldr	r3, [pc, #52]	; (800fc54 <vPortValidateInterruptPriority+0x7c>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d90a      	bls.n	800fc3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc28:	f383 8811 	msr	BASEPRI, r3
 800fc2c:	f3bf 8f6f 	isb	sy
 800fc30:	f3bf 8f4f 	dsb	sy
 800fc34:	603b      	str	r3, [r7, #0]
}
 800fc36:	bf00      	nop
 800fc38:	e7fe      	b.n	800fc38 <vPortValidateInterruptPriority+0x60>
	}
 800fc3a:	bf00      	nop
 800fc3c:	3714      	adds	r7, #20
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr
 800fc46:	bf00      	nop
 800fc48:	e000e3f0 	.word	0xe000e3f0
 800fc4c:	20002320 	.word	0x20002320
 800fc50:	e000ed0c 	.word	0xe000ed0c
 800fc54:	20002324 	.word	0x20002324

0800fc58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b08a      	sub	sp, #40	; 0x28
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc60:	2300      	movs	r3, #0
 800fc62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc64:	f7fe fb50 	bl	800e308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc68:	4b5b      	ldr	r3, [pc, #364]	; (800fdd8 <pvPortMalloc+0x180>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d101      	bne.n	800fc74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fc70:	f000 f920 	bl	800feb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fc74:	4b59      	ldr	r3, [pc, #356]	; (800fddc <pvPortMalloc+0x184>)
 800fc76:	681a      	ldr	r2, [r3, #0]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	4013      	ands	r3, r2
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	f040 8093 	bne.w	800fda8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d01d      	beq.n	800fcc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fc88:	2208      	movs	r2, #8
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	f003 0307 	and.w	r3, r3, #7
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d014      	beq.n	800fcc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f023 0307 	bic.w	r3, r3, #7
 800fca0:	3308      	adds	r3, #8
 800fca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f003 0307 	and.w	r3, r3, #7
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00a      	beq.n	800fcc4 <pvPortMalloc+0x6c>
	__asm volatile
 800fcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb2:	f383 8811 	msr	BASEPRI, r3
 800fcb6:	f3bf 8f6f 	isb	sy
 800fcba:	f3bf 8f4f 	dsb	sy
 800fcbe:	617b      	str	r3, [r7, #20]
}
 800fcc0:	bf00      	nop
 800fcc2:	e7fe      	b.n	800fcc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d06e      	beq.n	800fda8 <pvPortMalloc+0x150>
 800fcca:	4b45      	ldr	r3, [pc, #276]	; (800fde0 <pvPortMalloc+0x188>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d869      	bhi.n	800fda8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fcd4:	4b43      	ldr	r3, [pc, #268]	; (800fde4 <pvPortMalloc+0x18c>)
 800fcd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fcd8:	4b42      	ldr	r3, [pc, #264]	; (800fde4 <pvPortMalloc+0x18c>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcde:	e004      	b.n	800fcea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	687a      	ldr	r2, [r7, #4]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d903      	bls.n	800fcfc <pvPortMalloc+0xa4>
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1f1      	bne.n	800fce0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fcfc:	4b36      	ldr	r3, [pc, #216]	; (800fdd8 <pvPortMalloc+0x180>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d050      	beq.n	800fda8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fd06:	6a3b      	ldr	r3, [r7, #32]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	2208      	movs	r2, #8
 800fd0c:	4413      	add	r3, r2
 800fd0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	6a3b      	ldr	r3, [r7, #32]
 800fd16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1a:	685a      	ldr	r2, [r3, #4]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	1ad2      	subs	r2, r2, r3
 800fd20:	2308      	movs	r3, #8
 800fd22:	005b      	lsls	r3, r3, #1
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d91f      	bls.n	800fd68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fd28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	f003 0307 	and.w	r3, r3, #7
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00a      	beq.n	800fd50 <pvPortMalloc+0xf8>
	__asm volatile
 800fd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd3e:	f383 8811 	msr	BASEPRI, r3
 800fd42:	f3bf 8f6f 	isb	sy
 800fd46:	f3bf 8f4f 	dsb	sy
 800fd4a:	613b      	str	r3, [r7, #16]
}
 800fd4c:	bf00      	nop
 800fd4e:	e7fe      	b.n	800fd4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd52:	685a      	ldr	r2, [r3, #4]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	1ad2      	subs	r2, r2, r3
 800fd58:	69bb      	ldr	r3, [r7, #24]
 800fd5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd62:	69b8      	ldr	r0, [r7, #24]
 800fd64:	f000 f908 	bl	800ff78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd68:	4b1d      	ldr	r3, [pc, #116]	; (800fde0 <pvPortMalloc+0x188>)
 800fd6a:	681a      	ldr	r2, [r3, #0]
 800fd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	1ad3      	subs	r3, r2, r3
 800fd72:	4a1b      	ldr	r2, [pc, #108]	; (800fde0 <pvPortMalloc+0x188>)
 800fd74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd76:	4b1a      	ldr	r3, [pc, #104]	; (800fde0 <pvPortMalloc+0x188>)
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	4b1b      	ldr	r3, [pc, #108]	; (800fde8 <pvPortMalloc+0x190>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d203      	bcs.n	800fd8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd82:	4b17      	ldr	r3, [pc, #92]	; (800fde0 <pvPortMalloc+0x188>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	4a18      	ldr	r2, [pc, #96]	; (800fde8 <pvPortMalloc+0x190>)
 800fd88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8c:	685a      	ldr	r2, [r3, #4]
 800fd8e:	4b13      	ldr	r3, [pc, #76]	; (800fddc <pvPortMalloc+0x184>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	431a      	orrs	r2, r3
 800fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fd9e:	4b13      	ldr	r3, [pc, #76]	; (800fdec <pvPortMalloc+0x194>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	3301      	adds	r3, #1
 800fda4:	4a11      	ldr	r2, [pc, #68]	; (800fdec <pvPortMalloc+0x194>)
 800fda6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fda8:	f7fe fabc 	bl	800e324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	f003 0307 	and.w	r3, r3, #7
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d00a      	beq.n	800fdcc <pvPortMalloc+0x174>
	__asm volatile
 800fdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdba:	f383 8811 	msr	BASEPRI, r3
 800fdbe:	f3bf 8f6f 	isb	sy
 800fdc2:	f3bf 8f4f 	dsb	sy
 800fdc6:	60fb      	str	r3, [r7, #12]
}
 800fdc8:	bf00      	nop
 800fdca:	e7fe      	b.n	800fdca <pvPortMalloc+0x172>
	return pvReturn;
 800fdcc:	69fb      	ldr	r3, [r7, #28]
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3728      	adds	r7, #40	; 0x28
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}
 800fdd6:	bf00      	nop
 800fdd8:	2001b330 	.word	0x2001b330
 800fddc:	2001b344 	.word	0x2001b344
 800fde0:	2001b334 	.word	0x2001b334
 800fde4:	2001b328 	.word	0x2001b328
 800fde8:	2001b338 	.word	0x2001b338
 800fdec:	2001b33c 	.word	0x2001b33c

0800fdf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b086      	sub	sp, #24
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d04d      	beq.n	800fe9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fe02:	2308      	movs	r3, #8
 800fe04:	425b      	negs	r3, r3
 800fe06:	697a      	ldr	r2, [r7, #20]
 800fe08:	4413      	add	r3, r2
 800fe0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	685a      	ldr	r2, [r3, #4]
 800fe14:	4b24      	ldr	r3, [pc, #144]	; (800fea8 <vPortFree+0xb8>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	4013      	ands	r3, r2
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d10a      	bne.n	800fe34 <vPortFree+0x44>
	__asm volatile
 800fe1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe22:	f383 8811 	msr	BASEPRI, r3
 800fe26:	f3bf 8f6f 	isb	sy
 800fe2a:	f3bf 8f4f 	dsb	sy
 800fe2e:	60fb      	str	r3, [r7, #12]
}
 800fe30:	bf00      	nop
 800fe32:	e7fe      	b.n	800fe32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d00a      	beq.n	800fe52 <vPortFree+0x62>
	__asm volatile
 800fe3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe40:	f383 8811 	msr	BASEPRI, r3
 800fe44:	f3bf 8f6f 	isb	sy
 800fe48:	f3bf 8f4f 	dsb	sy
 800fe4c:	60bb      	str	r3, [r7, #8]
}
 800fe4e:	bf00      	nop
 800fe50:	e7fe      	b.n	800fe50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	685a      	ldr	r2, [r3, #4]
 800fe56:	4b14      	ldr	r3, [pc, #80]	; (800fea8 <vPortFree+0xb8>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4013      	ands	r3, r2
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d01e      	beq.n	800fe9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d11a      	bne.n	800fe9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	685a      	ldr	r2, [r3, #4]
 800fe6c:	4b0e      	ldr	r3, [pc, #56]	; (800fea8 <vPortFree+0xb8>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	43db      	mvns	r3, r3
 800fe72:	401a      	ands	r2, r3
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fe78:	f7fe fa46 	bl	800e308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	685a      	ldr	r2, [r3, #4]
 800fe80:	4b0a      	ldr	r3, [pc, #40]	; (800feac <vPortFree+0xbc>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4413      	add	r3, r2
 800fe86:	4a09      	ldr	r2, [pc, #36]	; (800feac <vPortFree+0xbc>)
 800fe88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe8a:	6938      	ldr	r0, [r7, #16]
 800fe8c:	f000 f874 	bl	800ff78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fe90:	4b07      	ldr	r3, [pc, #28]	; (800feb0 <vPortFree+0xc0>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	3301      	adds	r3, #1
 800fe96:	4a06      	ldr	r2, [pc, #24]	; (800feb0 <vPortFree+0xc0>)
 800fe98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fe9a:	f7fe fa43 	bl	800e324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fe9e:	bf00      	nop
 800fea0:	3718      	adds	r7, #24
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
 800fea6:	bf00      	nop
 800fea8:	2001b344 	.word	0x2001b344
 800feac:	2001b334 	.word	0x2001b334
 800feb0:	2001b340 	.word	0x2001b340

0800feb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800feb4:	b480      	push	{r7}
 800feb6:	b085      	sub	sp, #20
 800feb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800feba:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800febe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fec0:	4b27      	ldr	r3, [pc, #156]	; (800ff60 <prvHeapInit+0xac>)
 800fec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f003 0307 	and.w	r3, r3, #7
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d00c      	beq.n	800fee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	3307      	adds	r3, #7
 800fed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f023 0307 	bic.w	r3, r3, #7
 800feda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fedc:	68ba      	ldr	r2, [r7, #8]
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	1ad3      	subs	r3, r2, r3
 800fee2:	4a1f      	ldr	r2, [pc, #124]	; (800ff60 <prvHeapInit+0xac>)
 800fee4:	4413      	add	r3, r2
 800fee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800feec:	4a1d      	ldr	r2, [pc, #116]	; (800ff64 <prvHeapInit+0xb0>)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fef2:	4b1c      	ldr	r3, [pc, #112]	; (800ff64 <prvHeapInit+0xb0>)
 800fef4:	2200      	movs	r2, #0
 800fef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	68ba      	ldr	r2, [r7, #8]
 800fefc:	4413      	add	r3, r2
 800fefe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ff00:	2208      	movs	r2, #8
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	1a9b      	subs	r3, r3, r2
 800ff06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f023 0307 	bic.w	r3, r3, #7
 800ff0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	4a15      	ldr	r2, [pc, #84]	; (800ff68 <prvHeapInit+0xb4>)
 800ff14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ff16:	4b14      	ldr	r3, [pc, #80]	; (800ff68 <prvHeapInit+0xb4>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ff1e:	4b12      	ldr	r3, [pc, #72]	; (800ff68 <prvHeapInit+0xb4>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	2200      	movs	r2, #0
 800ff24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	1ad2      	subs	r2, r2, r3
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff34:	4b0c      	ldr	r3, [pc, #48]	; (800ff68 <prvHeapInit+0xb4>)
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	4a0a      	ldr	r2, [pc, #40]	; (800ff6c <prvHeapInit+0xb8>)
 800ff42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	4a09      	ldr	r2, [pc, #36]	; (800ff70 <prvHeapInit+0xbc>)
 800ff4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff4c:	4b09      	ldr	r3, [pc, #36]	; (800ff74 <prvHeapInit+0xc0>)
 800ff4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ff52:	601a      	str	r2, [r3, #0]
}
 800ff54:	bf00      	nop
 800ff56:	3714      	adds	r7, #20
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr
 800ff60:	20002328 	.word	0x20002328
 800ff64:	2001b328 	.word	0x2001b328
 800ff68:	2001b330 	.word	0x2001b330
 800ff6c:	2001b338 	.word	0x2001b338
 800ff70:	2001b334 	.word	0x2001b334
 800ff74:	2001b344 	.word	0x2001b344

0800ff78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff80:	4b28      	ldr	r3, [pc, #160]	; (8010024 <prvInsertBlockIntoFreeList+0xac>)
 800ff82:	60fb      	str	r3, [r7, #12]
 800ff84:	e002      	b.n	800ff8c <prvInsertBlockIntoFreeList+0x14>
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	60fb      	str	r3, [r7, #12]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d8f7      	bhi.n	800ff86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	68ba      	ldr	r2, [r7, #8]
 800ffa0:	4413      	add	r3, r2
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d108      	bne.n	800ffba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	685a      	ldr	r2, [r3, #4]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	441a      	add	r2, r3
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	68ba      	ldr	r2, [r7, #8]
 800ffc4:	441a      	add	r2, r3
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d118      	bne.n	8010000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	4b15      	ldr	r3, [pc, #84]	; (8010028 <prvInsertBlockIntoFreeList+0xb0>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d00d      	beq.n	800fff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	685a      	ldr	r2, [r3, #4]
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	441a      	add	r2, r3
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	601a      	str	r2, [r3, #0]
 800fff4:	e008      	b.n	8010008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fff6:	4b0c      	ldr	r3, [pc, #48]	; (8010028 <prvInsertBlockIntoFreeList+0xb0>)
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	601a      	str	r2, [r3, #0]
 800fffe:	e003      	b.n	8010008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681a      	ldr	r2, [r3, #0]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010008:	68fa      	ldr	r2, [r7, #12]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	429a      	cmp	r2, r3
 801000e:	d002      	beq.n	8010016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	687a      	ldr	r2, [r7, #4]
 8010014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010016:	bf00      	nop
 8010018:	3714      	adds	r7, #20
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop
 8010024:	2001b328 	.word	0x2001b328
 8010028:	2001b330 	.word	0x2001b330

0801002c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010030:	2200      	movs	r2, #0
 8010032:	4912      	ldr	r1, [pc, #72]	; (801007c <MX_USB_DEVICE_Init+0x50>)
 8010034:	4812      	ldr	r0, [pc, #72]	; (8010080 <MX_USB_DEVICE_Init+0x54>)
 8010036:	f7fb fab3 	bl	800b5a0 <USBD_Init>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d001      	beq.n	8010044 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010040:	f7f1 fece 	bl	8001de0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010044:	490f      	ldr	r1, [pc, #60]	; (8010084 <MX_USB_DEVICE_Init+0x58>)
 8010046:	480e      	ldr	r0, [pc, #56]	; (8010080 <MX_USB_DEVICE_Init+0x54>)
 8010048:	f7fb fada 	bl	800b600 <USBD_RegisterClass>
 801004c:	4603      	mov	r3, r0
 801004e:	2b00      	cmp	r3, #0
 8010050:	d001      	beq.n	8010056 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010052:	f7f1 fec5 	bl	8001de0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010056:	490c      	ldr	r1, [pc, #48]	; (8010088 <MX_USB_DEVICE_Init+0x5c>)
 8010058:	4809      	ldr	r0, [pc, #36]	; (8010080 <MX_USB_DEVICE_Init+0x54>)
 801005a:	f7fb fa11 	bl	800b480 <USBD_CDC_RegisterInterface>
 801005e:	4603      	mov	r3, r0
 8010060:	2b00      	cmp	r3, #0
 8010062:	d001      	beq.n	8010068 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010064:	f7f1 febc 	bl	8001de0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010068:	4805      	ldr	r0, [pc, #20]	; (8010080 <MX_USB_DEVICE_Init+0x54>)
 801006a:	f7fb faff 	bl	800b66c <USBD_Start>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	d001      	beq.n	8010078 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010074:	f7f1 feb4 	bl	8001de0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010078:	bf00      	nop
 801007a:	bd80      	pop	{r7, pc}
 801007c:	2000013c 	.word	0x2000013c
 8010080:	2001b348 	.word	0x2001b348
 8010084:	200000a4 	.word	0x200000a4
 8010088:	20000128 	.word	0x20000128

0801008c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010090:	2200      	movs	r2, #0
 8010092:	4905      	ldr	r1, [pc, #20]	; (80100a8 <CDC_Init_FS+0x1c>)
 8010094:	4805      	ldr	r0, [pc, #20]	; (80100ac <CDC_Init_FS+0x20>)
 8010096:	f7fb fa0d 	bl	800b4b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801009a:	4905      	ldr	r1, [pc, #20]	; (80100b0 <CDC_Init_FS+0x24>)
 801009c:	4803      	ldr	r0, [pc, #12]	; (80100ac <CDC_Init_FS+0x20>)
 801009e:	f7fb fa2b 	bl	800b4f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80100a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	2001be24 	.word	0x2001be24
 80100ac:	2001b348 	.word	0x2001b348
 80100b0:	2001b624 	.word	0x2001b624

080100b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80100b4:	b480      	push	{r7}
 80100b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80100b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr

080100c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	4603      	mov	r3, r0
 80100cc:	6039      	str	r1, [r7, #0]
 80100ce:	71fb      	strb	r3, [r7, #7]
 80100d0:	4613      	mov	r3, r2
 80100d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80100d4:	79fb      	ldrb	r3, [r7, #7]
 80100d6:	2b23      	cmp	r3, #35	; 0x23
 80100d8:	d84a      	bhi.n	8010170 <CDC_Control_FS+0xac>
 80100da:	a201      	add	r2, pc, #4	; (adr r2, 80100e0 <CDC_Control_FS+0x1c>)
 80100dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100e0:	08010171 	.word	0x08010171
 80100e4:	08010171 	.word	0x08010171
 80100e8:	08010171 	.word	0x08010171
 80100ec:	08010171 	.word	0x08010171
 80100f0:	08010171 	.word	0x08010171
 80100f4:	08010171 	.word	0x08010171
 80100f8:	08010171 	.word	0x08010171
 80100fc:	08010171 	.word	0x08010171
 8010100:	08010171 	.word	0x08010171
 8010104:	08010171 	.word	0x08010171
 8010108:	08010171 	.word	0x08010171
 801010c:	08010171 	.word	0x08010171
 8010110:	08010171 	.word	0x08010171
 8010114:	08010171 	.word	0x08010171
 8010118:	08010171 	.word	0x08010171
 801011c:	08010171 	.word	0x08010171
 8010120:	08010171 	.word	0x08010171
 8010124:	08010171 	.word	0x08010171
 8010128:	08010171 	.word	0x08010171
 801012c:	08010171 	.word	0x08010171
 8010130:	08010171 	.word	0x08010171
 8010134:	08010171 	.word	0x08010171
 8010138:	08010171 	.word	0x08010171
 801013c:	08010171 	.word	0x08010171
 8010140:	08010171 	.word	0x08010171
 8010144:	08010171 	.word	0x08010171
 8010148:	08010171 	.word	0x08010171
 801014c:	08010171 	.word	0x08010171
 8010150:	08010171 	.word	0x08010171
 8010154:	08010171 	.word	0x08010171
 8010158:	08010171 	.word	0x08010171
 801015c:	08010171 	.word	0x08010171
 8010160:	08010171 	.word	0x08010171
 8010164:	08010171 	.word	0x08010171
 8010168:	08010171 	.word	0x08010171
 801016c:	08010171 	.word	0x08010171
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010170:	bf00      	nop
  }

  return (USBD_OK);
 8010172:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010174:	4618      	mov	r0, r3
 8010176:	370c      	adds	r7, #12
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr

08010180 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801018a:	6879      	ldr	r1, [r7, #4]
 801018c:	4805      	ldr	r0, [pc, #20]	; (80101a4 <CDC_Receive_FS+0x24>)
 801018e:	f7fb f9b3 	bl	800b4f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010192:	4804      	ldr	r0, [pc, #16]	; (80101a4 <CDC_Receive_FS+0x24>)
 8010194:	f7fb f9ce 	bl	800b534 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010198:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801019a:	4618      	mov	r0, r3
 801019c:	3708      	adds	r7, #8
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}
 80101a2:	bf00      	nop
 80101a4:	2001b348 	.word	0x2001b348

080101a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b087      	sub	sp, #28
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	60b9      	str	r1, [r7, #8]
 80101b2:	4613      	mov	r3, r2
 80101b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80101b6:	2300      	movs	r3, #0
 80101b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80101ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101be:	4618      	mov	r0, r3
 80101c0:	371c      	adds	r7, #28
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr
	...

080101cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101cc:	b480      	push	{r7}
 80101ce:	b083      	sub	sp, #12
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	4603      	mov	r3, r0
 80101d4:	6039      	str	r1, [r7, #0]
 80101d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	2212      	movs	r2, #18
 80101dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80101de:	4b03      	ldr	r3, [pc, #12]	; (80101ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr
 80101ec:	20000158 	.word	0x20000158

080101f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b083      	sub	sp, #12
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	4603      	mov	r3, r0
 80101f8:	6039      	str	r1, [r7, #0]
 80101fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	2204      	movs	r2, #4
 8010200:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010202:	4b03      	ldr	r3, [pc, #12]	; (8010210 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010204:	4618      	mov	r0, r3
 8010206:	370c      	adds	r7, #12
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr
 8010210:	2000016c 	.word	0x2000016c

08010214 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	4603      	mov	r3, r0
 801021c:	6039      	str	r1, [r7, #0]
 801021e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010220:	79fb      	ldrb	r3, [r7, #7]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d105      	bne.n	8010232 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010226:	683a      	ldr	r2, [r7, #0]
 8010228:	4907      	ldr	r1, [pc, #28]	; (8010248 <USBD_FS_ProductStrDescriptor+0x34>)
 801022a:	4808      	ldr	r0, [pc, #32]	; (801024c <USBD_FS_ProductStrDescriptor+0x38>)
 801022c:	f7fc fbca 	bl	800c9c4 <USBD_GetString>
 8010230:	e004      	b.n	801023c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010232:	683a      	ldr	r2, [r7, #0]
 8010234:	4904      	ldr	r1, [pc, #16]	; (8010248 <USBD_FS_ProductStrDescriptor+0x34>)
 8010236:	4805      	ldr	r0, [pc, #20]	; (801024c <USBD_FS_ProductStrDescriptor+0x38>)
 8010238:	f7fc fbc4 	bl	800c9c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801023c:	4b02      	ldr	r3, [pc, #8]	; (8010248 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801023e:	4618      	mov	r0, r3
 8010240:	3708      	adds	r7, #8
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
 8010246:	bf00      	nop
 8010248:	2001c624 	.word	0x2001c624
 801024c:	080117f0 	.word	0x080117f0

08010250 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	4603      	mov	r3, r0
 8010258:	6039      	str	r1, [r7, #0]
 801025a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801025c:	683a      	ldr	r2, [r7, #0]
 801025e:	4904      	ldr	r1, [pc, #16]	; (8010270 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010260:	4804      	ldr	r0, [pc, #16]	; (8010274 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010262:	f7fc fbaf 	bl	800c9c4 <USBD_GetString>
  return USBD_StrDesc;
 8010266:	4b02      	ldr	r3, [pc, #8]	; (8010270 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010268:	4618      	mov	r0, r3
 801026a:	3708      	adds	r7, #8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	2001c624 	.word	0x2001c624
 8010274:	08011808 	.word	0x08011808

08010278 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	4603      	mov	r3, r0
 8010280:	6039      	str	r1, [r7, #0]
 8010282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	221a      	movs	r2, #26
 8010288:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801028a:	f000 f843 	bl	8010314 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801028e:	4b02      	ldr	r3, [pc, #8]	; (8010298 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010290:	4618      	mov	r0, r3
 8010292:	3708      	adds	r7, #8
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	20000170 	.word	0x20000170

0801029c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	4603      	mov	r3, r0
 80102a4:	6039      	str	r1, [r7, #0]
 80102a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80102a8:	79fb      	ldrb	r3, [r7, #7]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d105      	bne.n	80102ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80102ae:	683a      	ldr	r2, [r7, #0]
 80102b0:	4907      	ldr	r1, [pc, #28]	; (80102d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80102b2:	4808      	ldr	r0, [pc, #32]	; (80102d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80102b4:	f7fc fb86 	bl	800c9c4 <USBD_GetString>
 80102b8:	e004      	b.n	80102c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80102ba:	683a      	ldr	r2, [r7, #0]
 80102bc:	4904      	ldr	r1, [pc, #16]	; (80102d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80102be:	4805      	ldr	r0, [pc, #20]	; (80102d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80102c0:	f7fc fb80 	bl	800c9c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80102c4:	4b02      	ldr	r3, [pc, #8]	; (80102d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3708      	adds	r7, #8
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	2001c624 	.word	0x2001c624
 80102d4:	0801181c 	.word	0x0801181c

080102d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	4603      	mov	r3, r0
 80102e0:	6039      	str	r1, [r7, #0]
 80102e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80102e4:	79fb      	ldrb	r3, [r7, #7]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d105      	bne.n	80102f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80102ea:	683a      	ldr	r2, [r7, #0]
 80102ec:	4907      	ldr	r1, [pc, #28]	; (801030c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80102ee:	4808      	ldr	r0, [pc, #32]	; (8010310 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80102f0:	f7fc fb68 	bl	800c9c4 <USBD_GetString>
 80102f4:	e004      	b.n	8010300 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80102f6:	683a      	ldr	r2, [r7, #0]
 80102f8:	4904      	ldr	r1, [pc, #16]	; (801030c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80102fa:	4805      	ldr	r0, [pc, #20]	; (8010310 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80102fc:	f7fc fb62 	bl	800c9c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010300:	4b02      	ldr	r3, [pc, #8]	; (801030c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010302:	4618      	mov	r0, r3
 8010304:	3708      	adds	r7, #8
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	2001c624 	.word	0x2001c624
 8010310:	08011828 	.word	0x08011828

08010314 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801031a:	4b0f      	ldr	r3, [pc, #60]	; (8010358 <Get_SerialNum+0x44>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010320:	4b0e      	ldr	r3, [pc, #56]	; (801035c <Get_SerialNum+0x48>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010326:	4b0e      	ldr	r3, [pc, #56]	; (8010360 <Get_SerialNum+0x4c>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801032c:	68fa      	ldr	r2, [r7, #12]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	4413      	add	r3, r2
 8010332:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d009      	beq.n	801034e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801033a:	2208      	movs	r2, #8
 801033c:	4909      	ldr	r1, [pc, #36]	; (8010364 <Get_SerialNum+0x50>)
 801033e:	68f8      	ldr	r0, [r7, #12]
 8010340:	f000 f814 	bl	801036c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010344:	2204      	movs	r2, #4
 8010346:	4908      	ldr	r1, [pc, #32]	; (8010368 <Get_SerialNum+0x54>)
 8010348:	68b8      	ldr	r0, [r7, #8]
 801034a:	f000 f80f 	bl	801036c <IntToUnicode>
  }
}
 801034e:	bf00      	nop
 8010350:	3710      	adds	r7, #16
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	1fff7a10 	.word	0x1fff7a10
 801035c:	1fff7a14 	.word	0x1fff7a14
 8010360:	1fff7a18 	.word	0x1fff7a18
 8010364:	20000172 	.word	0x20000172
 8010368:	20000182 	.word	0x20000182

0801036c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801036c:	b480      	push	{r7}
 801036e:	b087      	sub	sp, #28
 8010370:	af00      	add	r7, sp, #0
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	60b9      	str	r1, [r7, #8]
 8010376:	4613      	mov	r3, r2
 8010378:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801037a:	2300      	movs	r3, #0
 801037c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801037e:	2300      	movs	r3, #0
 8010380:	75fb      	strb	r3, [r7, #23]
 8010382:	e027      	b.n	80103d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	0f1b      	lsrs	r3, r3, #28
 8010388:	2b09      	cmp	r3, #9
 801038a:	d80b      	bhi.n	80103a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	0f1b      	lsrs	r3, r3, #28
 8010390:	b2da      	uxtb	r2, r3
 8010392:	7dfb      	ldrb	r3, [r7, #23]
 8010394:	005b      	lsls	r3, r3, #1
 8010396:	4619      	mov	r1, r3
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	440b      	add	r3, r1
 801039c:	3230      	adds	r2, #48	; 0x30
 801039e:	b2d2      	uxtb	r2, r2
 80103a0:	701a      	strb	r2, [r3, #0]
 80103a2:	e00a      	b.n	80103ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	0f1b      	lsrs	r3, r3, #28
 80103a8:	b2da      	uxtb	r2, r3
 80103aa:	7dfb      	ldrb	r3, [r7, #23]
 80103ac:	005b      	lsls	r3, r3, #1
 80103ae:	4619      	mov	r1, r3
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	440b      	add	r3, r1
 80103b4:	3237      	adds	r2, #55	; 0x37
 80103b6:	b2d2      	uxtb	r2, r2
 80103b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	011b      	lsls	r3, r3, #4
 80103be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80103c0:	7dfb      	ldrb	r3, [r7, #23]
 80103c2:	005b      	lsls	r3, r3, #1
 80103c4:	3301      	adds	r3, #1
 80103c6:	68ba      	ldr	r2, [r7, #8]
 80103c8:	4413      	add	r3, r2
 80103ca:	2200      	movs	r2, #0
 80103cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80103ce:	7dfb      	ldrb	r3, [r7, #23]
 80103d0:	3301      	adds	r3, #1
 80103d2:	75fb      	strb	r3, [r7, #23]
 80103d4:	7dfa      	ldrb	r2, [r7, #23]
 80103d6:	79fb      	ldrb	r3, [r7, #7]
 80103d8:	429a      	cmp	r2, r3
 80103da:	d3d3      	bcc.n	8010384 <IntToUnicode+0x18>
  }
}
 80103dc:	bf00      	nop
 80103de:	bf00      	nop
 80103e0:	371c      	adds	r7, #28
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr
	...

080103ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b08a      	sub	sp, #40	; 0x28
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103f4:	f107 0314 	add.w	r3, r7, #20
 80103f8:	2200      	movs	r2, #0
 80103fa:	601a      	str	r2, [r3, #0]
 80103fc:	605a      	str	r2, [r3, #4]
 80103fe:	609a      	str	r2, [r3, #8]
 8010400:	60da      	str	r2, [r3, #12]
 8010402:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801040c:	d13a      	bne.n	8010484 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801040e:	2300      	movs	r3, #0
 8010410:	613b      	str	r3, [r7, #16]
 8010412:	4b1e      	ldr	r3, [pc, #120]	; (801048c <HAL_PCD_MspInit+0xa0>)
 8010414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010416:	4a1d      	ldr	r2, [pc, #116]	; (801048c <HAL_PCD_MspInit+0xa0>)
 8010418:	f043 0301 	orr.w	r3, r3, #1
 801041c:	6313      	str	r3, [r2, #48]	; 0x30
 801041e:	4b1b      	ldr	r3, [pc, #108]	; (801048c <HAL_PCD_MspInit+0xa0>)
 8010420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010422:	f003 0301 	and.w	r3, r3, #1
 8010426:	613b      	str	r3, [r7, #16]
 8010428:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801042a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801042e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010430:	2302      	movs	r3, #2
 8010432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010434:	2300      	movs	r3, #0
 8010436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010438:	2303      	movs	r3, #3
 801043a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801043c:	230a      	movs	r3, #10
 801043e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010440:	f107 0314 	add.w	r3, r7, #20
 8010444:	4619      	mov	r1, r3
 8010446:	4812      	ldr	r0, [pc, #72]	; (8010490 <HAL_PCD_MspInit+0xa4>)
 8010448:	f7f3 fb7c 	bl	8003b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801044c:	4b0f      	ldr	r3, [pc, #60]	; (801048c <HAL_PCD_MspInit+0xa0>)
 801044e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010450:	4a0e      	ldr	r2, [pc, #56]	; (801048c <HAL_PCD_MspInit+0xa0>)
 8010452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010456:	6353      	str	r3, [r2, #52]	; 0x34
 8010458:	2300      	movs	r3, #0
 801045a:	60fb      	str	r3, [r7, #12]
 801045c:	4b0b      	ldr	r3, [pc, #44]	; (801048c <HAL_PCD_MspInit+0xa0>)
 801045e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010460:	4a0a      	ldr	r2, [pc, #40]	; (801048c <HAL_PCD_MspInit+0xa0>)
 8010462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010466:	6453      	str	r3, [r2, #68]	; 0x44
 8010468:	4b08      	ldr	r3, [pc, #32]	; (801048c <HAL_PCD_MspInit+0xa0>)
 801046a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801046c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010470:	60fb      	str	r3, [r7, #12]
 8010472:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010474:	2200      	movs	r2, #0
 8010476:	2105      	movs	r1, #5
 8010478:	2043      	movs	r0, #67	; 0x43
 801047a:	f7f2 fe13 	bl	80030a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801047e:	2043      	movs	r0, #67	; 0x43
 8010480:	f7f2 fe3c 	bl	80030fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010484:	bf00      	nop
 8010486:	3728      	adds	r7, #40	; 0x28
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	40023800 	.word	0x40023800
 8010490:	40020000 	.word	0x40020000

08010494 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80104a8:	4619      	mov	r1, r3
 80104aa:	4610      	mov	r0, r2
 80104ac:	f7fb f92b 	bl	800b706 <USBD_LL_SetupStage>
}
 80104b0:	bf00      	nop
 80104b2:	3708      	adds	r7, #8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	460b      	mov	r3, r1
 80104c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80104ca:	78fa      	ldrb	r2, [r7, #3]
 80104cc:	6879      	ldr	r1, [r7, #4]
 80104ce:	4613      	mov	r3, r2
 80104d0:	00db      	lsls	r3, r3, #3
 80104d2:	4413      	add	r3, r2
 80104d4:	009b      	lsls	r3, r3, #2
 80104d6:	440b      	add	r3, r1
 80104d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	78fb      	ldrb	r3, [r7, #3]
 80104e0:	4619      	mov	r1, r3
 80104e2:	f7fb f965 	bl	800b7b0 <USBD_LL_DataOutStage>
}
 80104e6:	bf00      	nop
 80104e8:	3708      	adds	r7, #8
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}

080104ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104ee:	b580      	push	{r7, lr}
 80104f0:	b082      	sub	sp, #8
 80104f2:	af00      	add	r7, sp, #0
 80104f4:	6078      	str	r0, [r7, #4]
 80104f6:	460b      	mov	r3, r1
 80104f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010500:	78fa      	ldrb	r2, [r7, #3]
 8010502:	6879      	ldr	r1, [r7, #4]
 8010504:	4613      	mov	r3, r2
 8010506:	00db      	lsls	r3, r3, #3
 8010508:	4413      	add	r3, r2
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	440b      	add	r3, r1
 801050e:	334c      	adds	r3, #76	; 0x4c
 8010510:	681a      	ldr	r2, [r3, #0]
 8010512:	78fb      	ldrb	r3, [r7, #3]
 8010514:	4619      	mov	r1, r3
 8010516:	f7fb f9fe 	bl	800b916 <USBD_LL_DataInStage>
}
 801051a:	bf00      	nop
 801051c:	3708      	adds	r7, #8
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010522:	b580      	push	{r7, lr}
 8010524:	b082      	sub	sp, #8
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010530:	4618      	mov	r0, r3
 8010532:	f7fb fb32 	bl	800bb9a <USBD_LL_SOF>
}
 8010536:	bf00      	nop
 8010538:	3708      	adds	r7, #8
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}

0801053e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801053e:	b580      	push	{r7, lr}
 8010540:	b084      	sub	sp, #16
 8010542:	af00      	add	r7, sp, #0
 8010544:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010546:	2301      	movs	r3, #1
 8010548:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	2b02      	cmp	r3, #2
 8010550:	d001      	beq.n	8010556 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010552:	f7f1 fc45 	bl	8001de0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801055c:	7bfa      	ldrb	r2, [r7, #15]
 801055e:	4611      	mov	r1, r2
 8010560:	4618      	mov	r0, r3
 8010562:	f7fb fadc 	bl	800bb1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801056c:	4618      	mov	r0, r3
 801056e:	f7fb fa84 	bl	800ba7a <USBD_LL_Reset>
}
 8010572:	bf00      	nop
 8010574:	3710      	adds	r7, #16
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
	...

0801057c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801058a:	4618      	mov	r0, r3
 801058c:	f7fb fad7 	bl	800bb3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	6812      	ldr	r2, [r2, #0]
 801059e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80105a2:	f043 0301 	orr.w	r3, r3, #1
 80105a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6a1b      	ldr	r3, [r3, #32]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d005      	beq.n	80105bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80105b0:	4b04      	ldr	r3, [pc, #16]	; (80105c4 <HAL_PCD_SuspendCallback+0x48>)
 80105b2:	691b      	ldr	r3, [r3, #16]
 80105b4:	4a03      	ldr	r2, [pc, #12]	; (80105c4 <HAL_PCD_SuspendCallback+0x48>)
 80105b6:	f043 0306 	orr.w	r3, r3, #6
 80105ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80105bc:	bf00      	nop
 80105be:	3708      	adds	r7, #8
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	e000ed00 	.word	0xe000ed00

080105c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7fb fac7 	bl	800bb6a <USBD_LL_Resume>
}
 80105dc:	bf00      	nop
 80105de:	3708      	adds	r7, #8
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b082      	sub	sp, #8
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	460b      	mov	r3, r1
 80105ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105f6:	78fa      	ldrb	r2, [r7, #3]
 80105f8:	4611      	mov	r1, r2
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7fb fb1f 	bl	800bc3e <USBD_LL_IsoOUTIncomplete>
}
 8010600:	bf00      	nop
 8010602:	3708      	adds	r7, #8
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	460b      	mov	r3, r1
 8010612:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801061a:	78fa      	ldrb	r2, [r7, #3]
 801061c:	4611      	mov	r1, r2
 801061e:	4618      	mov	r0, r3
 8010620:	f7fb fadb 	bl	800bbda <USBD_LL_IsoINIncomplete>
}
 8010624:	bf00      	nop
 8010626:	3708      	adds	r7, #8
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}

0801062c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801063a:	4618      	mov	r0, r3
 801063c:	f7fb fb31 	bl	800bca2 <USBD_LL_DevConnected>
}
 8010640:	bf00      	nop
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010656:	4618      	mov	r0, r3
 8010658:	f7fb fb2e 	bl	800bcb8 <USBD_LL_DevDisconnected>
}
 801065c:	bf00      	nop
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d13c      	bne.n	80106ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010674:	4a20      	ldr	r2, [pc, #128]	; (80106f8 <USBD_LL_Init+0x94>)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	4a1e      	ldr	r2, [pc, #120]	; (80106f8 <USBD_LL_Init+0x94>)
 8010680:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010684:	4b1c      	ldr	r3, [pc, #112]	; (80106f8 <USBD_LL_Init+0x94>)
 8010686:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801068a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801068c:	4b1a      	ldr	r3, [pc, #104]	; (80106f8 <USBD_LL_Init+0x94>)
 801068e:	2204      	movs	r2, #4
 8010690:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010692:	4b19      	ldr	r3, [pc, #100]	; (80106f8 <USBD_LL_Init+0x94>)
 8010694:	2202      	movs	r2, #2
 8010696:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010698:	4b17      	ldr	r3, [pc, #92]	; (80106f8 <USBD_LL_Init+0x94>)
 801069a:	2200      	movs	r2, #0
 801069c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801069e:	4b16      	ldr	r3, [pc, #88]	; (80106f8 <USBD_LL_Init+0x94>)
 80106a0:	2202      	movs	r2, #2
 80106a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80106a4:	4b14      	ldr	r3, [pc, #80]	; (80106f8 <USBD_LL_Init+0x94>)
 80106a6:	2200      	movs	r2, #0
 80106a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80106aa:	4b13      	ldr	r3, [pc, #76]	; (80106f8 <USBD_LL_Init+0x94>)
 80106ac:	2200      	movs	r2, #0
 80106ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80106b0:	4b11      	ldr	r3, [pc, #68]	; (80106f8 <USBD_LL_Init+0x94>)
 80106b2:	2200      	movs	r2, #0
 80106b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80106b6:	4b10      	ldr	r3, [pc, #64]	; (80106f8 <USBD_LL_Init+0x94>)
 80106b8:	2200      	movs	r2, #0
 80106ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80106bc:	4b0e      	ldr	r3, [pc, #56]	; (80106f8 <USBD_LL_Init+0x94>)
 80106be:	2200      	movs	r2, #0
 80106c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80106c2:	480d      	ldr	r0, [pc, #52]	; (80106f8 <USBD_LL_Init+0x94>)
 80106c4:	f7f3 fd4a 	bl	800415c <HAL_PCD_Init>
 80106c8:	4603      	mov	r3, r0
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d001      	beq.n	80106d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80106ce:	f7f1 fb87 	bl	8001de0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80106d2:	2180      	movs	r1, #128	; 0x80
 80106d4:	4808      	ldr	r0, [pc, #32]	; (80106f8 <USBD_LL_Init+0x94>)
 80106d6:	f7f4 ffac 	bl	8005632 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80106da:	2240      	movs	r2, #64	; 0x40
 80106dc:	2100      	movs	r1, #0
 80106de:	4806      	ldr	r0, [pc, #24]	; (80106f8 <USBD_LL_Init+0x94>)
 80106e0:	f7f4 ff60 	bl	80055a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80106e4:	2280      	movs	r2, #128	; 0x80
 80106e6:	2101      	movs	r1, #1
 80106e8:	4803      	ldr	r0, [pc, #12]	; (80106f8 <USBD_LL_Init+0x94>)
 80106ea:	f7f4 ff5b 	bl	80055a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80106ee:	2300      	movs	r3, #0
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3708      	adds	r7, #8
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	2001c824 	.word	0x2001c824

080106fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b084      	sub	sp, #16
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010704:	2300      	movs	r3, #0
 8010706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010708:	2300      	movs	r3, #0
 801070a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010712:	4618      	mov	r0, r3
 8010714:	f7f3 fe4a 	bl	80043ac <HAL_PCD_Start>
 8010718:	4603      	mov	r3, r0
 801071a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801071c:	7bfb      	ldrb	r3, [r7, #15]
 801071e:	4618      	mov	r0, r3
 8010720:	f000 f942 	bl	80109a8 <USBD_Get_USB_Status>
 8010724:	4603      	mov	r3, r0
 8010726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010728:	7bbb      	ldrb	r3, [r7, #14]
}
 801072a:	4618      	mov	r0, r3
 801072c:	3710      	adds	r7, #16
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}

08010732 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b084      	sub	sp, #16
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
 801073a:	4608      	mov	r0, r1
 801073c:	4611      	mov	r1, r2
 801073e:	461a      	mov	r2, r3
 8010740:	4603      	mov	r3, r0
 8010742:	70fb      	strb	r3, [r7, #3]
 8010744:	460b      	mov	r3, r1
 8010746:	70bb      	strb	r3, [r7, #2]
 8010748:	4613      	mov	r3, r2
 801074a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801074c:	2300      	movs	r3, #0
 801074e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010750:	2300      	movs	r3, #0
 8010752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801075a:	78bb      	ldrb	r3, [r7, #2]
 801075c:	883a      	ldrh	r2, [r7, #0]
 801075e:	78f9      	ldrb	r1, [r7, #3]
 8010760:	f7f4 fb1b 	bl	8004d9a <HAL_PCD_EP_Open>
 8010764:	4603      	mov	r3, r0
 8010766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010768:	7bfb      	ldrb	r3, [r7, #15]
 801076a:	4618      	mov	r0, r3
 801076c:	f000 f91c 	bl	80109a8 <USBD_Get_USB_Status>
 8010770:	4603      	mov	r3, r0
 8010772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010774:	7bbb      	ldrb	r3, [r7, #14]
}
 8010776:	4618      	mov	r0, r3
 8010778:	3710      	adds	r7, #16
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801077e:	b580      	push	{r7, lr}
 8010780:	b084      	sub	sp, #16
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
 8010786:	460b      	mov	r3, r1
 8010788:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801078a:	2300      	movs	r3, #0
 801078c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801078e:	2300      	movs	r3, #0
 8010790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010798:	78fa      	ldrb	r2, [r7, #3]
 801079a:	4611      	mov	r1, r2
 801079c:	4618      	mov	r0, r3
 801079e:	f7f4 fb64 	bl	8004e6a <HAL_PCD_EP_Close>
 80107a2:	4603      	mov	r3, r0
 80107a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107a6:	7bfb      	ldrb	r3, [r7, #15]
 80107a8:	4618      	mov	r0, r3
 80107aa:	f000 f8fd 	bl	80109a8 <USBD_Get_USB_Status>
 80107ae:	4603      	mov	r3, r0
 80107b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3710      	adds	r7, #16
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	460b      	mov	r3, r1
 80107c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107c8:	2300      	movs	r3, #0
 80107ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107cc:	2300      	movs	r3, #0
 80107ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80107d6:	78fa      	ldrb	r2, [r7, #3]
 80107d8:	4611      	mov	r1, r2
 80107da:	4618      	mov	r0, r3
 80107dc:	f7f4 fc3c 	bl	8005058 <HAL_PCD_EP_SetStall>
 80107e0:	4603      	mov	r3, r0
 80107e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107e4:	7bfb      	ldrb	r3, [r7, #15]
 80107e6:	4618      	mov	r0, r3
 80107e8:	f000 f8de 	bl	80109a8 <USBD_Get_USB_Status>
 80107ec:	4603      	mov	r3, r0
 80107ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3710      	adds	r7, #16
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}

080107fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b084      	sub	sp, #16
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
 8010802:	460b      	mov	r3, r1
 8010804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010806:	2300      	movs	r3, #0
 8010808:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801080a:	2300      	movs	r3, #0
 801080c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010814:	78fa      	ldrb	r2, [r7, #3]
 8010816:	4611      	mov	r1, r2
 8010818:	4618      	mov	r0, r3
 801081a:	f7f4 fc81 	bl	8005120 <HAL_PCD_EP_ClrStall>
 801081e:	4603      	mov	r3, r0
 8010820:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010822:	7bfb      	ldrb	r3, [r7, #15]
 8010824:	4618      	mov	r0, r3
 8010826:	f000 f8bf 	bl	80109a8 <USBD_Get_USB_Status>
 801082a:	4603      	mov	r3, r0
 801082c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801082e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010830:	4618      	mov	r0, r3
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010838:	b480      	push	{r7}
 801083a:	b085      	sub	sp, #20
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	460b      	mov	r3, r1
 8010842:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801084a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801084c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010850:	2b00      	cmp	r3, #0
 8010852:	da0b      	bge.n	801086c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010854:	78fb      	ldrb	r3, [r7, #3]
 8010856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801085a:	68f9      	ldr	r1, [r7, #12]
 801085c:	4613      	mov	r3, r2
 801085e:	00db      	lsls	r3, r3, #3
 8010860:	4413      	add	r3, r2
 8010862:	009b      	lsls	r3, r3, #2
 8010864:	440b      	add	r3, r1
 8010866:	333e      	adds	r3, #62	; 0x3e
 8010868:	781b      	ldrb	r3, [r3, #0]
 801086a:	e00b      	b.n	8010884 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801086c:	78fb      	ldrb	r3, [r7, #3]
 801086e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010872:	68f9      	ldr	r1, [r7, #12]
 8010874:	4613      	mov	r3, r2
 8010876:	00db      	lsls	r3, r3, #3
 8010878:	4413      	add	r3, r2
 801087a:	009b      	lsls	r3, r3, #2
 801087c:	440b      	add	r3, r1
 801087e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010882:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010884:	4618      	mov	r0, r3
 8010886:	3714      	adds	r7, #20
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr

08010890 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	460b      	mov	r3, r1
 801089a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801089c:	2300      	movs	r3, #0
 801089e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108a0:	2300      	movs	r3, #0
 80108a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80108aa:	78fa      	ldrb	r2, [r7, #3]
 80108ac:	4611      	mov	r1, r2
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7f4 fa4e 	bl	8004d50 <HAL_PCD_SetAddress>
 80108b4:	4603      	mov	r3, r0
 80108b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108b8:	7bfb      	ldrb	r3, [r7, #15]
 80108ba:	4618      	mov	r0, r3
 80108bc:	f000 f874 	bl	80109a8 <USBD_Get_USB_Status>
 80108c0:	4603      	mov	r3, r0
 80108c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}

080108ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80108ce:	b580      	push	{r7, lr}
 80108d0:	b086      	sub	sp, #24
 80108d2:	af00      	add	r7, sp, #0
 80108d4:	60f8      	str	r0, [r7, #12]
 80108d6:	607a      	str	r2, [r7, #4]
 80108d8:	603b      	str	r3, [r7, #0]
 80108da:	460b      	mov	r3, r1
 80108dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108de:	2300      	movs	r3, #0
 80108e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108e2:	2300      	movs	r3, #0
 80108e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80108ec:	7af9      	ldrb	r1, [r7, #11]
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	687a      	ldr	r2, [r7, #4]
 80108f2:	f7f4 fb67 	bl	8004fc4 <HAL_PCD_EP_Transmit>
 80108f6:	4603      	mov	r3, r0
 80108f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108fa:	7dfb      	ldrb	r3, [r7, #23]
 80108fc:	4618      	mov	r0, r3
 80108fe:	f000 f853 	bl	80109a8 <USBD_Get_USB_Status>
 8010902:	4603      	mov	r3, r0
 8010904:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010906:	7dbb      	ldrb	r3, [r7, #22]
}
 8010908:	4618      	mov	r0, r3
 801090a:	3718      	adds	r7, #24
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}

08010910 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b086      	sub	sp, #24
 8010914:	af00      	add	r7, sp, #0
 8010916:	60f8      	str	r0, [r7, #12]
 8010918:	607a      	str	r2, [r7, #4]
 801091a:	603b      	str	r3, [r7, #0]
 801091c:	460b      	mov	r3, r1
 801091e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010920:	2300      	movs	r3, #0
 8010922:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010924:	2300      	movs	r3, #0
 8010926:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801092e:	7af9      	ldrb	r1, [r7, #11]
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	f7f4 fae3 	bl	8004efe <HAL_PCD_EP_Receive>
 8010938:	4603      	mov	r3, r0
 801093a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801093c:	7dfb      	ldrb	r3, [r7, #23]
 801093e:	4618      	mov	r0, r3
 8010940:	f000 f832 	bl	80109a8 <USBD_Get_USB_Status>
 8010944:	4603      	mov	r3, r0
 8010946:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010948:	7dbb      	ldrb	r3, [r7, #22]
}
 801094a:	4618      	mov	r0, r3
 801094c:	3718      	adds	r7, #24
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010952:	b580      	push	{r7, lr}
 8010954:	b082      	sub	sp, #8
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
 801095a:	460b      	mov	r3, r1
 801095c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010964:	78fa      	ldrb	r2, [r7, #3]
 8010966:	4611      	mov	r1, r2
 8010968:	4618      	mov	r0, r3
 801096a:	f7f4 fb13 	bl	8004f94 <HAL_PCD_EP_GetRxCount>
 801096e:	4603      	mov	r3, r0
}
 8010970:	4618      	mov	r0, r3
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010978:	b480      	push	{r7}
 801097a:	b083      	sub	sp, #12
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010980:	4b03      	ldr	r3, [pc, #12]	; (8010990 <USBD_static_malloc+0x18>)
}
 8010982:	4618      	mov	r0, r3
 8010984:	370c      	adds	r7, #12
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr
 801098e:	bf00      	nop
 8010990:	2001cd30 	.word	0x2001cd30

08010994 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010994:	b480      	push	{r7}
 8010996:	b083      	sub	sp, #12
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]

}
 801099c:	bf00      	nop
 801099e:	370c      	adds	r7, #12
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80109a8:	b480      	push	{r7}
 80109aa:	b085      	sub	sp, #20
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	4603      	mov	r3, r0
 80109b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109b2:	2300      	movs	r3, #0
 80109b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80109b6:	79fb      	ldrb	r3, [r7, #7]
 80109b8:	2b03      	cmp	r3, #3
 80109ba:	d817      	bhi.n	80109ec <USBD_Get_USB_Status+0x44>
 80109bc:	a201      	add	r2, pc, #4	; (adr r2, 80109c4 <USBD_Get_USB_Status+0x1c>)
 80109be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c2:	bf00      	nop
 80109c4:	080109d5 	.word	0x080109d5
 80109c8:	080109db 	.word	0x080109db
 80109cc:	080109e1 	.word	0x080109e1
 80109d0:	080109e7 	.word	0x080109e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80109d4:	2300      	movs	r3, #0
 80109d6:	73fb      	strb	r3, [r7, #15]
    break;
 80109d8:	e00b      	b.n	80109f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80109da:	2303      	movs	r3, #3
 80109dc:	73fb      	strb	r3, [r7, #15]
    break;
 80109de:	e008      	b.n	80109f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80109e0:	2301      	movs	r3, #1
 80109e2:	73fb      	strb	r3, [r7, #15]
    break;
 80109e4:	e005      	b.n	80109f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80109e6:	2303      	movs	r3, #3
 80109e8:	73fb      	strb	r3, [r7, #15]
    break;
 80109ea:	e002      	b.n	80109f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80109ec:	2303      	movs	r3, #3
 80109ee:	73fb      	strb	r3, [r7, #15]
    break;
 80109f0:	bf00      	nop
  }
  return usb_status;
 80109f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3714      	adds	r7, #20
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr

08010a00 <__errno>:
 8010a00:	4b01      	ldr	r3, [pc, #4]	; (8010a08 <__errno+0x8>)
 8010a02:	6818      	ldr	r0, [r3, #0]
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop
 8010a08:	2000018c 	.word	0x2000018c

08010a0c <__libc_init_array>:
 8010a0c:	b570      	push	{r4, r5, r6, lr}
 8010a0e:	4d0d      	ldr	r5, [pc, #52]	; (8010a44 <__libc_init_array+0x38>)
 8010a10:	4c0d      	ldr	r4, [pc, #52]	; (8010a48 <__libc_init_array+0x3c>)
 8010a12:	1b64      	subs	r4, r4, r5
 8010a14:	10a4      	asrs	r4, r4, #2
 8010a16:	2600      	movs	r6, #0
 8010a18:	42a6      	cmp	r6, r4
 8010a1a:	d109      	bne.n	8010a30 <__libc_init_array+0x24>
 8010a1c:	4d0b      	ldr	r5, [pc, #44]	; (8010a4c <__libc_init_array+0x40>)
 8010a1e:	4c0c      	ldr	r4, [pc, #48]	; (8010a50 <__libc_init_array+0x44>)
 8010a20:	f000 fd0e 	bl	8011440 <_init>
 8010a24:	1b64      	subs	r4, r4, r5
 8010a26:	10a4      	asrs	r4, r4, #2
 8010a28:	2600      	movs	r6, #0
 8010a2a:	42a6      	cmp	r6, r4
 8010a2c:	d105      	bne.n	8010a3a <__libc_init_array+0x2e>
 8010a2e:	bd70      	pop	{r4, r5, r6, pc}
 8010a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a34:	4798      	blx	r3
 8010a36:	3601      	adds	r6, #1
 8010a38:	e7ee      	b.n	8010a18 <__libc_init_array+0xc>
 8010a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a3e:	4798      	blx	r3
 8010a40:	3601      	adds	r6, #1
 8010a42:	e7f2      	b.n	8010a2a <__libc_init_array+0x1e>
 8010a44:	08013ad4 	.word	0x08013ad4
 8010a48:	08013ad4 	.word	0x08013ad4
 8010a4c:	08013ad4 	.word	0x08013ad4
 8010a50:	08013ad8 	.word	0x08013ad8

08010a54 <malloc>:
 8010a54:	4b02      	ldr	r3, [pc, #8]	; (8010a60 <malloc+0xc>)
 8010a56:	4601      	mov	r1, r0
 8010a58:	6818      	ldr	r0, [r3, #0]
 8010a5a:	f000 b88d 	b.w	8010b78 <_malloc_r>
 8010a5e:	bf00      	nop
 8010a60:	2000018c 	.word	0x2000018c

08010a64 <free>:
 8010a64:	4b02      	ldr	r3, [pc, #8]	; (8010a70 <free+0xc>)
 8010a66:	4601      	mov	r1, r0
 8010a68:	6818      	ldr	r0, [r3, #0]
 8010a6a:	f000 b819 	b.w	8010aa0 <_free_r>
 8010a6e:	bf00      	nop
 8010a70:	2000018c 	.word	0x2000018c

08010a74 <memcpy>:
 8010a74:	440a      	add	r2, r1
 8010a76:	4291      	cmp	r1, r2
 8010a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a7c:	d100      	bne.n	8010a80 <memcpy+0xc>
 8010a7e:	4770      	bx	lr
 8010a80:	b510      	push	{r4, lr}
 8010a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a8a:	4291      	cmp	r1, r2
 8010a8c:	d1f9      	bne.n	8010a82 <memcpy+0xe>
 8010a8e:	bd10      	pop	{r4, pc}

08010a90 <memset>:
 8010a90:	4402      	add	r2, r0
 8010a92:	4603      	mov	r3, r0
 8010a94:	4293      	cmp	r3, r2
 8010a96:	d100      	bne.n	8010a9a <memset+0xa>
 8010a98:	4770      	bx	lr
 8010a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8010a9e:	e7f9      	b.n	8010a94 <memset+0x4>

08010aa0 <_free_r>:
 8010aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010aa2:	2900      	cmp	r1, #0
 8010aa4:	d044      	beq.n	8010b30 <_free_r+0x90>
 8010aa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010aaa:	9001      	str	r0, [sp, #4]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	f1a1 0404 	sub.w	r4, r1, #4
 8010ab2:	bfb8      	it	lt
 8010ab4:	18e4      	addlt	r4, r4, r3
 8010ab6:	f000 f975 	bl	8010da4 <__malloc_lock>
 8010aba:	4a1e      	ldr	r2, [pc, #120]	; (8010b34 <_free_r+0x94>)
 8010abc:	9801      	ldr	r0, [sp, #4]
 8010abe:	6813      	ldr	r3, [r2, #0]
 8010ac0:	b933      	cbnz	r3, 8010ad0 <_free_r+0x30>
 8010ac2:	6063      	str	r3, [r4, #4]
 8010ac4:	6014      	str	r4, [r2, #0]
 8010ac6:	b003      	add	sp, #12
 8010ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010acc:	f000 b970 	b.w	8010db0 <__malloc_unlock>
 8010ad0:	42a3      	cmp	r3, r4
 8010ad2:	d908      	bls.n	8010ae6 <_free_r+0x46>
 8010ad4:	6825      	ldr	r5, [r4, #0]
 8010ad6:	1961      	adds	r1, r4, r5
 8010ad8:	428b      	cmp	r3, r1
 8010ada:	bf01      	itttt	eq
 8010adc:	6819      	ldreq	r1, [r3, #0]
 8010ade:	685b      	ldreq	r3, [r3, #4]
 8010ae0:	1949      	addeq	r1, r1, r5
 8010ae2:	6021      	streq	r1, [r4, #0]
 8010ae4:	e7ed      	b.n	8010ac2 <_free_r+0x22>
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	685b      	ldr	r3, [r3, #4]
 8010aea:	b10b      	cbz	r3, 8010af0 <_free_r+0x50>
 8010aec:	42a3      	cmp	r3, r4
 8010aee:	d9fa      	bls.n	8010ae6 <_free_r+0x46>
 8010af0:	6811      	ldr	r1, [r2, #0]
 8010af2:	1855      	adds	r5, r2, r1
 8010af4:	42a5      	cmp	r5, r4
 8010af6:	d10b      	bne.n	8010b10 <_free_r+0x70>
 8010af8:	6824      	ldr	r4, [r4, #0]
 8010afa:	4421      	add	r1, r4
 8010afc:	1854      	adds	r4, r2, r1
 8010afe:	42a3      	cmp	r3, r4
 8010b00:	6011      	str	r1, [r2, #0]
 8010b02:	d1e0      	bne.n	8010ac6 <_free_r+0x26>
 8010b04:	681c      	ldr	r4, [r3, #0]
 8010b06:	685b      	ldr	r3, [r3, #4]
 8010b08:	6053      	str	r3, [r2, #4]
 8010b0a:	4421      	add	r1, r4
 8010b0c:	6011      	str	r1, [r2, #0]
 8010b0e:	e7da      	b.n	8010ac6 <_free_r+0x26>
 8010b10:	d902      	bls.n	8010b18 <_free_r+0x78>
 8010b12:	230c      	movs	r3, #12
 8010b14:	6003      	str	r3, [r0, #0]
 8010b16:	e7d6      	b.n	8010ac6 <_free_r+0x26>
 8010b18:	6825      	ldr	r5, [r4, #0]
 8010b1a:	1961      	adds	r1, r4, r5
 8010b1c:	428b      	cmp	r3, r1
 8010b1e:	bf04      	itt	eq
 8010b20:	6819      	ldreq	r1, [r3, #0]
 8010b22:	685b      	ldreq	r3, [r3, #4]
 8010b24:	6063      	str	r3, [r4, #4]
 8010b26:	bf04      	itt	eq
 8010b28:	1949      	addeq	r1, r1, r5
 8010b2a:	6021      	streq	r1, [r4, #0]
 8010b2c:	6054      	str	r4, [r2, #4]
 8010b2e:	e7ca      	b.n	8010ac6 <_free_r+0x26>
 8010b30:	b003      	add	sp, #12
 8010b32:	bd30      	pop	{r4, r5, pc}
 8010b34:	2001cf50 	.word	0x2001cf50

08010b38 <sbrk_aligned>:
 8010b38:	b570      	push	{r4, r5, r6, lr}
 8010b3a:	4e0e      	ldr	r6, [pc, #56]	; (8010b74 <sbrk_aligned+0x3c>)
 8010b3c:	460c      	mov	r4, r1
 8010b3e:	6831      	ldr	r1, [r6, #0]
 8010b40:	4605      	mov	r5, r0
 8010b42:	b911      	cbnz	r1, 8010b4a <sbrk_aligned+0x12>
 8010b44:	f000 f8f6 	bl	8010d34 <_sbrk_r>
 8010b48:	6030      	str	r0, [r6, #0]
 8010b4a:	4621      	mov	r1, r4
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	f000 f8f1 	bl	8010d34 <_sbrk_r>
 8010b52:	1c43      	adds	r3, r0, #1
 8010b54:	d00a      	beq.n	8010b6c <sbrk_aligned+0x34>
 8010b56:	1cc4      	adds	r4, r0, #3
 8010b58:	f024 0403 	bic.w	r4, r4, #3
 8010b5c:	42a0      	cmp	r0, r4
 8010b5e:	d007      	beq.n	8010b70 <sbrk_aligned+0x38>
 8010b60:	1a21      	subs	r1, r4, r0
 8010b62:	4628      	mov	r0, r5
 8010b64:	f000 f8e6 	bl	8010d34 <_sbrk_r>
 8010b68:	3001      	adds	r0, #1
 8010b6a:	d101      	bne.n	8010b70 <sbrk_aligned+0x38>
 8010b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8010b70:	4620      	mov	r0, r4
 8010b72:	bd70      	pop	{r4, r5, r6, pc}
 8010b74:	2001cf54 	.word	0x2001cf54

08010b78 <_malloc_r>:
 8010b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b7c:	1ccd      	adds	r5, r1, #3
 8010b7e:	f025 0503 	bic.w	r5, r5, #3
 8010b82:	3508      	adds	r5, #8
 8010b84:	2d0c      	cmp	r5, #12
 8010b86:	bf38      	it	cc
 8010b88:	250c      	movcc	r5, #12
 8010b8a:	2d00      	cmp	r5, #0
 8010b8c:	4607      	mov	r7, r0
 8010b8e:	db01      	blt.n	8010b94 <_malloc_r+0x1c>
 8010b90:	42a9      	cmp	r1, r5
 8010b92:	d905      	bls.n	8010ba0 <_malloc_r+0x28>
 8010b94:	230c      	movs	r3, #12
 8010b96:	603b      	str	r3, [r7, #0]
 8010b98:	2600      	movs	r6, #0
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ba0:	4e2e      	ldr	r6, [pc, #184]	; (8010c5c <_malloc_r+0xe4>)
 8010ba2:	f000 f8ff 	bl	8010da4 <__malloc_lock>
 8010ba6:	6833      	ldr	r3, [r6, #0]
 8010ba8:	461c      	mov	r4, r3
 8010baa:	bb34      	cbnz	r4, 8010bfa <_malloc_r+0x82>
 8010bac:	4629      	mov	r1, r5
 8010bae:	4638      	mov	r0, r7
 8010bb0:	f7ff ffc2 	bl	8010b38 <sbrk_aligned>
 8010bb4:	1c43      	adds	r3, r0, #1
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	d14d      	bne.n	8010c56 <_malloc_r+0xde>
 8010bba:	6834      	ldr	r4, [r6, #0]
 8010bbc:	4626      	mov	r6, r4
 8010bbe:	2e00      	cmp	r6, #0
 8010bc0:	d140      	bne.n	8010c44 <_malloc_r+0xcc>
 8010bc2:	6823      	ldr	r3, [r4, #0]
 8010bc4:	4631      	mov	r1, r6
 8010bc6:	4638      	mov	r0, r7
 8010bc8:	eb04 0803 	add.w	r8, r4, r3
 8010bcc:	f000 f8b2 	bl	8010d34 <_sbrk_r>
 8010bd0:	4580      	cmp	r8, r0
 8010bd2:	d13a      	bne.n	8010c4a <_malloc_r+0xd2>
 8010bd4:	6821      	ldr	r1, [r4, #0]
 8010bd6:	3503      	adds	r5, #3
 8010bd8:	1a6d      	subs	r5, r5, r1
 8010bda:	f025 0503 	bic.w	r5, r5, #3
 8010bde:	3508      	adds	r5, #8
 8010be0:	2d0c      	cmp	r5, #12
 8010be2:	bf38      	it	cc
 8010be4:	250c      	movcc	r5, #12
 8010be6:	4629      	mov	r1, r5
 8010be8:	4638      	mov	r0, r7
 8010bea:	f7ff ffa5 	bl	8010b38 <sbrk_aligned>
 8010bee:	3001      	adds	r0, #1
 8010bf0:	d02b      	beq.n	8010c4a <_malloc_r+0xd2>
 8010bf2:	6823      	ldr	r3, [r4, #0]
 8010bf4:	442b      	add	r3, r5
 8010bf6:	6023      	str	r3, [r4, #0]
 8010bf8:	e00e      	b.n	8010c18 <_malloc_r+0xa0>
 8010bfa:	6822      	ldr	r2, [r4, #0]
 8010bfc:	1b52      	subs	r2, r2, r5
 8010bfe:	d41e      	bmi.n	8010c3e <_malloc_r+0xc6>
 8010c00:	2a0b      	cmp	r2, #11
 8010c02:	d916      	bls.n	8010c32 <_malloc_r+0xba>
 8010c04:	1961      	adds	r1, r4, r5
 8010c06:	42a3      	cmp	r3, r4
 8010c08:	6025      	str	r5, [r4, #0]
 8010c0a:	bf18      	it	ne
 8010c0c:	6059      	strne	r1, [r3, #4]
 8010c0e:	6863      	ldr	r3, [r4, #4]
 8010c10:	bf08      	it	eq
 8010c12:	6031      	streq	r1, [r6, #0]
 8010c14:	5162      	str	r2, [r4, r5]
 8010c16:	604b      	str	r3, [r1, #4]
 8010c18:	4638      	mov	r0, r7
 8010c1a:	f104 060b 	add.w	r6, r4, #11
 8010c1e:	f000 f8c7 	bl	8010db0 <__malloc_unlock>
 8010c22:	f026 0607 	bic.w	r6, r6, #7
 8010c26:	1d23      	adds	r3, r4, #4
 8010c28:	1af2      	subs	r2, r6, r3
 8010c2a:	d0b6      	beq.n	8010b9a <_malloc_r+0x22>
 8010c2c:	1b9b      	subs	r3, r3, r6
 8010c2e:	50a3      	str	r3, [r4, r2]
 8010c30:	e7b3      	b.n	8010b9a <_malloc_r+0x22>
 8010c32:	6862      	ldr	r2, [r4, #4]
 8010c34:	42a3      	cmp	r3, r4
 8010c36:	bf0c      	ite	eq
 8010c38:	6032      	streq	r2, [r6, #0]
 8010c3a:	605a      	strne	r2, [r3, #4]
 8010c3c:	e7ec      	b.n	8010c18 <_malloc_r+0xa0>
 8010c3e:	4623      	mov	r3, r4
 8010c40:	6864      	ldr	r4, [r4, #4]
 8010c42:	e7b2      	b.n	8010baa <_malloc_r+0x32>
 8010c44:	4634      	mov	r4, r6
 8010c46:	6876      	ldr	r6, [r6, #4]
 8010c48:	e7b9      	b.n	8010bbe <_malloc_r+0x46>
 8010c4a:	230c      	movs	r3, #12
 8010c4c:	603b      	str	r3, [r7, #0]
 8010c4e:	4638      	mov	r0, r7
 8010c50:	f000 f8ae 	bl	8010db0 <__malloc_unlock>
 8010c54:	e7a1      	b.n	8010b9a <_malloc_r+0x22>
 8010c56:	6025      	str	r5, [r4, #0]
 8010c58:	e7de      	b.n	8010c18 <_malloc_r+0xa0>
 8010c5a:	bf00      	nop
 8010c5c:	2001cf50 	.word	0x2001cf50

08010c60 <cleanup_glue>:
 8010c60:	b538      	push	{r3, r4, r5, lr}
 8010c62:	460c      	mov	r4, r1
 8010c64:	6809      	ldr	r1, [r1, #0]
 8010c66:	4605      	mov	r5, r0
 8010c68:	b109      	cbz	r1, 8010c6e <cleanup_glue+0xe>
 8010c6a:	f7ff fff9 	bl	8010c60 <cleanup_glue>
 8010c6e:	4621      	mov	r1, r4
 8010c70:	4628      	mov	r0, r5
 8010c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c76:	f7ff bf13 	b.w	8010aa0 <_free_r>
	...

08010c7c <_reclaim_reent>:
 8010c7c:	4b2c      	ldr	r3, [pc, #176]	; (8010d30 <_reclaim_reent+0xb4>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	4283      	cmp	r3, r0
 8010c82:	b570      	push	{r4, r5, r6, lr}
 8010c84:	4604      	mov	r4, r0
 8010c86:	d051      	beq.n	8010d2c <_reclaim_reent+0xb0>
 8010c88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010c8a:	b143      	cbz	r3, 8010c9e <_reclaim_reent+0x22>
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d14a      	bne.n	8010d28 <_reclaim_reent+0xac>
 8010c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c94:	6819      	ldr	r1, [r3, #0]
 8010c96:	b111      	cbz	r1, 8010c9e <_reclaim_reent+0x22>
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f7ff ff01 	bl	8010aa0 <_free_r>
 8010c9e:	6961      	ldr	r1, [r4, #20]
 8010ca0:	b111      	cbz	r1, 8010ca8 <_reclaim_reent+0x2c>
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	f7ff fefc 	bl	8010aa0 <_free_r>
 8010ca8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010caa:	b111      	cbz	r1, 8010cb2 <_reclaim_reent+0x36>
 8010cac:	4620      	mov	r0, r4
 8010cae:	f7ff fef7 	bl	8010aa0 <_free_r>
 8010cb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010cb4:	b111      	cbz	r1, 8010cbc <_reclaim_reent+0x40>
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f7ff fef2 	bl	8010aa0 <_free_r>
 8010cbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010cbe:	b111      	cbz	r1, 8010cc6 <_reclaim_reent+0x4a>
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f7ff feed 	bl	8010aa0 <_free_r>
 8010cc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010cc8:	b111      	cbz	r1, 8010cd0 <_reclaim_reent+0x54>
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f7ff fee8 	bl	8010aa0 <_free_r>
 8010cd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010cd2:	b111      	cbz	r1, 8010cda <_reclaim_reent+0x5e>
 8010cd4:	4620      	mov	r0, r4
 8010cd6:	f7ff fee3 	bl	8010aa0 <_free_r>
 8010cda:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010cdc:	b111      	cbz	r1, 8010ce4 <_reclaim_reent+0x68>
 8010cde:	4620      	mov	r0, r4
 8010ce0:	f7ff fede 	bl	8010aa0 <_free_r>
 8010ce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ce6:	b111      	cbz	r1, 8010cee <_reclaim_reent+0x72>
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f7ff fed9 	bl	8010aa0 <_free_r>
 8010cee:	69a3      	ldr	r3, [r4, #24]
 8010cf0:	b1e3      	cbz	r3, 8010d2c <_reclaim_reent+0xb0>
 8010cf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	4798      	blx	r3
 8010cf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010cfa:	b1b9      	cbz	r1, 8010d2c <_reclaim_reent+0xb0>
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d02:	f7ff bfad 	b.w	8010c60 <cleanup_glue>
 8010d06:	5949      	ldr	r1, [r1, r5]
 8010d08:	b941      	cbnz	r1, 8010d1c <_reclaim_reent+0xa0>
 8010d0a:	3504      	adds	r5, #4
 8010d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d0e:	2d80      	cmp	r5, #128	; 0x80
 8010d10:	68d9      	ldr	r1, [r3, #12]
 8010d12:	d1f8      	bne.n	8010d06 <_reclaim_reent+0x8a>
 8010d14:	4620      	mov	r0, r4
 8010d16:	f7ff fec3 	bl	8010aa0 <_free_r>
 8010d1a:	e7ba      	b.n	8010c92 <_reclaim_reent+0x16>
 8010d1c:	680e      	ldr	r6, [r1, #0]
 8010d1e:	4620      	mov	r0, r4
 8010d20:	f7ff febe 	bl	8010aa0 <_free_r>
 8010d24:	4631      	mov	r1, r6
 8010d26:	e7ef      	b.n	8010d08 <_reclaim_reent+0x8c>
 8010d28:	2500      	movs	r5, #0
 8010d2a:	e7ef      	b.n	8010d0c <_reclaim_reent+0x90>
 8010d2c:	bd70      	pop	{r4, r5, r6, pc}
 8010d2e:	bf00      	nop
 8010d30:	2000018c 	.word	0x2000018c

08010d34 <_sbrk_r>:
 8010d34:	b538      	push	{r3, r4, r5, lr}
 8010d36:	4d06      	ldr	r5, [pc, #24]	; (8010d50 <_sbrk_r+0x1c>)
 8010d38:	2300      	movs	r3, #0
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	4608      	mov	r0, r1
 8010d3e:	602b      	str	r3, [r5, #0]
 8010d40:	f7f1 fd50 	bl	80027e4 <_sbrk>
 8010d44:	1c43      	adds	r3, r0, #1
 8010d46:	d102      	bne.n	8010d4e <_sbrk_r+0x1a>
 8010d48:	682b      	ldr	r3, [r5, #0]
 8010d4a:	b103      	cbz	r3, 8010d4e <_sbrk_r+0x1a>
 8010d4c:	6023      	str	r3, [r4, #0]
 8010d4e:	bd38      	pop	{r3, r4, r5, pc}
 8010d50:	2001cf58 	.word	0x2001cf58

08010d54 <siprintf>:
 8010d54:	b40e      	push	{r1, r2, r3}
 8010d56:	b500      	push	{lr}
 8010d58:	b09c      	sub	sp, #112	; 0x70
 8010d5a:	ab1d      	add	r3, sp, #116	; 0x74
 8010d5c:	9002      	str	r0, [sp, #8]
 8010d5e:	9006      	str	r0, [sp, #24]
 8010d60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010d64:	4809      	ldr	r0, [pc, #36]	; (8010d8c <siprintf+0x38>)
 8010d66:	9107      	str	r1, [sp, #28]
 8010d68:	9104      	str	r1, [sp, #16]
 8010d6a:	4909      	ldr	r1, [pc, #36]	; (8010d90 <siprintf+0x3c>)
 8010d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d70:	9105      	str	r1, [sp, #20]
 8010d72:	6800      	ldr	r0, [r0, #0]
 8010d74:	9301      	str	r3, [sp, #4]
 8010d76:	a902      	add	r1, sp, #8
 8010d78:	f000 f87c 	bl	8010e74 <_svfiprintf_r>
 8010d7c:	9b02      	ldr	r3, [sp, #8]
 8010d7e:	2200      	movs	r2, #0
 8010d80:	701a      	strb	r2, [r3, #0]
 8010d82:	b01c      	add	sp, #112	; 0x70
 8010d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d88:	b003      	add	sp, #12
 8010d8a:	4770      	bx	lr
 8010d8c:	2000018c 	.word	0x2000018c
 8010d90:	ffff0208 	.word	0xffff0208

08010d94 <strcpy>:
 8010d94:	4603      	mov	r3, r0
 8010d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d9a:	f803 2b01 	strb.w	r2, [r3], #1
 8010d9e:	2a00      	cmp	r2, #0
 8010da0:	d1f9      	bne.n	8010d96 <strcpy+0x2>
 8010da2:	4770      	bx	lr

08010da4 <__malloc_lock>:
 8010da4:	4801      	ldr	r0, [pc, #4]	; (8010dac <__malloc_lock+0x8>)
 8010da6:	f7f2 b820 	b.w	8002dea <__retarget_lock_acquire_recursive>
 8010daa:	bf00      	nop
 8010dac:	20001514 	.word	0x20001514

08010db0 <__malloc_unlock>:
 8010db0:	4801      	ldr	r0, [pc, #4]	; (8010db8 <__malloc_unlock+0x8>)
 8010db2:	f7f2 b82e 	b.w	8002e12 <__retarget_lock_release_recursive>
 8010db6:	bf00      	nop
 8010db8:	20001514 	.word	0x20001514

08010dbc <__ssputs_r>:
 8010dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dc0:	688e      	ldr	r6, [r1, #8]
 8010dc2:	429e      	cmp	r6, r3
 8010dc4:	4682      	mov	sl, r0
 8010dc6:	460c      	mov	r4, r1
 8010dc8:	4690      	mov	r8, r2
 8010dca:	461f      	mov	r7, r3
 8010dcc:	d838      	bhi.n	8010e40 <__ssputs_r+0x84>
 8010dce:	898a      	ldrh	r2, [r1, #12]
 8010dd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010dd4:	d032      	beq.n	8010e3c <__ssputs_r+0x80>
 8010dd6:	6825      	ldr	r5, [r4, #0]
 8010dd8:	6909      	ldr	r1, [r1, #16]
 8010dda:	eba5 0901 	sub.w	r9, r5, r1
 8010dde:	6965      	ldr	r5, [r4, #20]
 8010de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010de8:	3301      	adds	r3, #1
 8010dea:	444b      	add	r3, r9
 8010dec:	106d      	asrs	r5, r5, #1
 8010dee:	429d      	cmp	r5, r3
 8010df0:	bf38      	it	cc
 8010df2:	461d      	movcc	r5, r3
 8010df4:	0553      	lsls	r3, r2, #21
 8010df6:	d531      	bpl.n	8010e5c <__ssputs_r+0xa0>
 8010df8:	4629      	mov	r1, r5
 8010dfa:	f7ff febd 	bl	8010b78 <_malloc_r>
 8010dfe:	4606      	mov	r6, r0
 8010e00:	b950      	cbnz	r0, 8010e18 <__ssputs_r+0x5c>
 8010e02:	230c      	movs	r3, #12
 8010e04:	f8ca 3000 	str.w	r3, [sl]
 8010e08:	89a3      	ldrh	r3, [r4, #12]
 8010e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e0e:	81a3      	strh	r3, [r4, #12]
 8010e10:	f04f 30ff 	mov.w	r0, #4294967295
 8010e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e18:	6921      	ldr	r1, [r4, #16]
 8010e1a:	464a      	mov	r2, r9
 8010e1c:	f7ff fe2a 	bl	8010a74 <memcpy>
 8010e20:	89a3      	ldrh	r3, [r4, #12]
 8010e22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e2a:	81a3      	strh	r3, [r4, #12]
 8010e2c:	6126      	str	r6, [r4, #16]
 8010e2e:	6165      	str	r5, [r4, #20]
 8010e30:	444e      	add	r6, r9
 8010e32:	eba5 0509 	sub.w	r5, r5, r9
 8010e36:	6026      	str	r6, [r4, #0]
 8010e38:	60a5      	str	r5, [r4, #8]
 8010e3a:	463e      	mov	r6, r7
 8010e3c:	42be      	cmp	r6, r7
 8010e3e:	d900      	bls.n	8010e42 <__ssputs_r+0x86>
 8010e40:	463e      	mov	r6, r7
 8010e42:	6820      	ldr	r0, [r4, #0]
 8010e44:	4632      	mov	r2, r6
 8010e46:	4641      	mov	r1, r8
 8010e48:	f000 faa8 	bl	801139c <memmove>
 8010e4c:	68a3      	ldr	r3, [r4, #8]
 8010e4e:	1b9b      	subs	r3, r3, r6
 8010e50:	60a3      	str	r3, [r4, #8]
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	4433      	add	r3, r6
 8010e56:	6023      	str	r3, [r4, #0]
 8010e58:	2000      	movs	r0, #0
 8010e5a:	e7db      	b.n	8010e14 <__ssputs_r+0x58>
 8010e5c:	462a      	mov	r2, r5
 8010e5e:	f000 fab7 	bl	80113d0 <_realloc_r>
 8010e62:	4606      	mov	r6, r0
 8010e64:	2800      	cmp	r0, #0
 8010e66:	d1e1      	bne.n	8010e2c <__ssputs_r+0x70>
 8010e68:	6921      	ldr	r1, [r4, #16]
 8010e6a:	4650      	mov	r0, sl
 8010e6c:	f7ff fe18 	bl	8010aa0 <_free_r>
 8010e70:	e7c7      	b.n	8010e02 <__ssputs_r+0x46>
	...

08010e74 <_svfiprintf_r>:
 8010e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e78:	4698      	mov	r8, r3
 8010e7a:	898b      	ldrh	r3, [r1, #12]
 8010e7c:	061b      	lsls	r3, r3, #24
 8010e7e:	b09d      	sub	sp, #116	; 0x74
 8010e80:	4607      	mov	r7, r0
 8010e82:	460d      	mov	r5, r1
 8010e84:	4614      	mov	r4, r2
 8010e86:	d50e      	bpl.n	8010ea6 <_svfiprintf_r+0x32>
 8010e88:	690b      	ldr	r3, [r1, #16]
 8010e8a:	b963      	cbnz	r3, 8010ea6 <_svfiprintf_r+0x32>
 8010e8c:	2140      	movs	r1, #64	; 0x40
 8010e8e:	f7ff fe73 	bl	8010b78 <_malloc_r>
 8010e92:	6028      	str	r0, [r5, #0]
 8010e94:	6128      	str	r0, [r5, #16]
 8010e96:	b920      	cbnz	r0, 8010ea2 <_svfiprintf_r+0x2e>
 8010e98:	230c      	movs	r3, #12
 8010e9a:	603b      	str	r3, [r7, #0]
 8010e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010ea0:	e0d1      	b.n	8011046 <_svfiprintf_r+0x1d2>
 8010ea2:	2340      	movs	r3, #64	; 0x40
 8010ea4:	616b      	str	r3, [r5, #20]
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8010eaa:	2320      	movs	r3, #32
 8010eac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010eb4:	2330      	movs	r3, #48	; 0x30
 8010eb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011060 <_svfiprintf_r+0x1ec>
 8010eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ebe:	f04f 0901 	mov.w	r9, #1
 8010ec2:	4623      	mov	r3, r4
 8010ec4:	469a      	mov	sl, r3
 8010ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010eca:	b10a      	cbz	r2, 8010ed0 <_svfiprintf_r+0x5c>
 8010ecc:	2a25      	cmp	r2, #37	; 0x25
 8010ece:	d1f9      	bne.n	8010ec4 <_svfiprintf_r+0x50>
 8010ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8010ed4:	d00b      	beq.n	8010eee <_svfiprintf_r+0x7a>
 8010ed6:	465b      	mov	r3, fp
 8010ed8:	4622      	mov	r2, r4
 8010eda:	4629      	mov	r1, r5
 8010edc:	4638      	mov	r0, r7
 8010ede:	f7ff ff6d 	bl	8010dbc <__ssputs_r>
 8010ee2:	3001      	adds	r0, #1
 8010ee4:	f000 80aa 	beq.w	801103c <_svfiprintf_r+0x1c8>
 8010ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010eea:	445a      	add	r2, fp
 8010eec:	9209      	str	r2, [sp, #36]	; 0x24
 8010eee:	f89a 3000 	ldrb.w	r3, [sl]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	f000 80a2 	beq.w	801103c <_svfiprintf_r+0x1c8>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	f04f 32ff 	mov.w	r2, #4294967295
 8010efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f02:	f10a 0a01 	add.w	sl, sl, #1
 8010f06:	9304      	str	r3, [sp, #16]
 8010f08:	9307      	str	r3, [sp, #28]
 8010f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8010f10:	4654      	mov	r4, sl
 8010f12:	2205      	movs	r2, #5
 8010f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f18:	4851      	ldr	r0, [pc, #324]	; (8011060 <_svfiprintf_r+0x1ec>)
 8010f1a:	f7ef f969 	bl	80001f0 <memchr>
 8010f1e:	9a04      	ldr	r2, [sp, #16]
 8010f20:	b9d8      	cbnz	r0, 8010f5a <_svfiprintf_r+0xe6>
 8010f22:	06d0      	lsls	r0, r2, #27
 8010f24:	bf44      	itt	mi
 8010f26:	2320      	movmi	r3, #32
 8010f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f2c:	0711      	lsls	r1, r2, #28
 8010f2e:	bf44      	itt	mi
 8010f30:	232b      	movmi	r3, #43	; 0x2b
 8010f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f36:	f89a 3000 	ldrb.w	r3, [sl]
 8010f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8010f3c:	d015      	beq.n	8010f6a <_svfiprintf_r+0xf6>
 8010f3e:	9a07      	ldr	r2, [sp, #28]
 8010f40:	4654      	mov	r4, sl
 8010f42:	2000      	movs	r0, #0
 8010f44:	f04f 0c0a 	mov.w	ip, #10
 8010f48:	4621      	mov	r1, r4
 8010f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f4e:	3b30      	subs	r3, #48	; 0x30
 8010f50:	2b09      	cmp	r3, #9
 8010f52:	d94e      	bls.n	8010ff2 <_svfiprintf_r+0x17e>
 8010f54:	b1b0      	cbz	r0, 8010f84 <_svfiprintf_r+0x110>
 8010f56:	9207      	str	r2, [sp, #28]
 8010f58:	e014      	b.n	8010f84 <_svfiprintf_r+0x110>
 8010f5a:	eba0 0308 	sub.w	r3, r0, r8
 8010f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8010f62:	4313      	orrs	r3, r2
 8010f64:	9304      	str	r3, [sp, #16]
 8010f66:	46a2      	mov	sl, r4
 8010f68:	e7d2      	b.n	8010f10 <_svfiprintf_r+0x9c>
 8010f6a:	9b03      	ldr	r3, [sp, #12]
 8010f6c:	1d19      	adds	r1, r3, #4
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	9103      	str	r1, [sp, #12]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	bfbb      	ittet	lt
 8010f76:	425b      	neglt	r3, r3
 8010f78:	f042 0202 	orrlt.w	r2, r2, #2
 8010f7c:	9307      	strge	r3, [sp, #28]
 8010f7e:	9307      	strlt	r3, [sp, #28]
 8010f80:	bfb8      	it	lt
 8010f82:	9204      	strlt	r2, [sp, #16]
 8010f84:	7823      	ldrb	r3, [r4, #0]
 8010f86:	2b2e      	cmp	r3, #46	; 0x2e
 8010f88:	d10c      	bne.n	8010fa4 <_svfiprintf_r+0x130>
 8010f8a:	7863      	ldrb	r3, [r4, #1]
 8010f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8010f8e:	d135      	bne.n	8010ffc <_svfiprintf_r+0x188>
 8010f90:	9b03      	ldr	r3, [sp, #12]
 8010f92:	1d1a      	adds	r2, r3, #4
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	9203      	str	r2, [sp, #12]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	bfb8      	it	lt
 8010f9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010fa0:	3402      	adds	r4, #2
 8010fa2:	9305      	str	r3, [sp, #20]
 8010fa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011070 <_svfiprintf_r+0x1fc>
 8010fa8:	7821      	ldrb	r1, [r4, #0]
 8010faa:	2203      	movs	r2, #3
 8010fac:	4650      	mov	r0, sl
 8010fae:	f7ef f91f 	bl	80001f0 <memchr>
 8010fb2:	b140      	cbz	r0, 8010fc6 <_svfiprintf_r+0x152>
 8010fb4:	2340      	movs	r3, #64	; 0x40
 8010fb6:	eba0 000a 	sub.w	r0, r0, sl
 8010fba:	fa03 f000 	lsl.w	r0, r3, r0
 8010fbe:	9b04      	ldr	r3, [sp, #16]
 8010fc0:	4303      	orrs	r3, r0
 8010fc2:	3401      	adds	r4, #1
 8010fc4:	9304      	str	r3, [sp, #16]
 8010fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fca:	4826      	ldr	r0, [pc, #152]	; (8011064 <_svfiprintf_r+0x1f0>)
 8010fcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fd0:	2206      	movs	r2, #6
 8010fd2:	f7ef f90d 	bl	80001f0 <memchr>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	d038      	beq.n	801104c <_svfiprintf_r+0x1d8>
 8010fda:	4b23      	ldr	r3, [pc, #140]	; (8011068 <_svfiprintf_r+0x1f4>)
 8010fdc:	bb1b      	cbnz	r3, 8011026 <_svfiprintf_r+0x1b2>
 8010fde:	9b03      	ldr	r3, [sp, #12]
 8010fe0:	3307      	adds	r3, #7
 8010fe2:	f023 0307 	bic.w	r3, r3, #7
 8010fe6:	3308      	adds	r3, #8
 8010fe8:	9303      	str	r3, [sp, #12]
 8010fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fec:	4433      	add	r3, r6
 8010fee:	9309      	str	r3, [sp, #36]	; 0x24
 8010ff0:	e767      	b.n	8010ec2 <_svfiprintf_r+0x4e>
 8010ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ff6:	460c      	mov	r4, r1
 8010ff8:	2001      	movs	r0, #1
 8010ffa:	e7a5      	b.n	8010f48 <_svfiprintf_r+0xd4>
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	3401      	adds	r4, #1
 8011000:	9305      	str	r3, [sp, #20]
 8011002:	4619      	mov	r1, r3
 8011004:	f04f 0c0a 	mov.w	ip, #10
 8011008:	4620      	mov	r0, r4
 801100a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801100e:	3a30      	subs	r2, #48	; 0x30
 8011010:	2a09      	cmp	r2, #9
 8011012:	d903      	bls.n	801101c <_svfiprintf_r+0x1a8>
 8011014:	2b00      	cmp	r3, #0
 8011016:	d0c5      	beq.n	8010fa4 <_svfiprintf_r+0x130>
 8011018:	9105      	str	r1, [sp, #20]
 801101a:	e7c3      	b.n	8010fa4 <_svfiprintf_r+0x130>
 801101c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011020:	4604      	mov	r4, r0
 8011022:	2301      	movs	r3, #1
 8011024:	e7f0      	b.n	8011008 <_svfiprintf_r+0x194>
 8011026:	ab03      	add	r3, sp, #12
 8011028:	9300      	str	r3, [sp, #0]
 801102a:	462a      	mov	r2, r5
 801102c:	4b0f      	ldr	r3, [pc, #60]	; (801106c <_svfiprintf_r+0x1f8>)
 801102e:	a904      	add	r1, sp, #16
 8011030:	4638      	mov	r0, r7
 8011032:	f3af 8000 	nop.w
 8011036:	1c42      	adds	r2, r0, #1
 8011038:	4606      	mov	r6, r0
 801103a:	d1d6      	bne.n	8010fea <_svfiprintf_r+0x176>
 801103c:	89ab      	ldrh	r3, [r5, #12]
 801103e:	065b      	lsls	r3, r3, #25
 8011040:	f53f af2c 	bmi.w	8010e9c <_svfiprintf_r+0x28>
 8011044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011046:	b01d      	add	sp, #116	; 0x74
 8011048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801104c:	ab03      	add	r3, sp, #12
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	462a      	mov	r2, r5
 8011052:	4b06      	ldr	r3, [pc, #24]	; (801106c <_svfiprintf_r+0x1f8>)
 8011054:	a904      	add	r1, sp, #16
 8011056:	4638      	mov	r0, r7
 8011058:	f000 f87a 	bl	8011150 <_printf_i>
 801105c:	e7eb      	b.n	8011036 <_svfiprintf_r+0x1c2>
 801105e:	bf00      	nop
 8011060:	08013a98 	.word	0x08013a98
 8011064:	08013aa2 	.word	0x08013aa2
 8011068:	00000000 	.word	0x00000000
 801106c:	08010dbd 	.word	0x08010dbd
 8011070:	08013a9e 	.word	0x08013a9e

08011074 <_printf_common>:
 8011074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011078:	4616      	mov	r6, r2
 801107a:	4699      	mov	r9, r3
 801107c:	688a      	ldr	r2, [r1, #8]
 801107e:	690b      	ldr	r3, [r1, #16]
 8011080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011084:	4293      	cmp	r3, r2
 8011086:	bfb8      	it	lt
 8011088:	4613      	movlt	r3, r2
 801108a:	6033      	str	r3, [r6, #0]
 801108c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011090:	4607      	mov	r7, r0
 8011092:	460c      	mov	r4, r1
 8011094:	b10a      	cbz	r2, 801109a <_printf_common+0x26>
 8011096:	3301      	adds	r3, #1
 8011098:	6033      	str	r3, [r6, #0]
 801109a:	6823      	ldr	r3, [r4, #0]
 801109c:	0699      	lsls	r1, r3, #26
 801109e:	bf42      	ittt	mi
 80110a0:	6833      	ldrmi	r3, [r6, #0]
 80110a2:	3302      	addmi	r3, #2
 80110a4:	6033      	strmi	r3, [r6, #0]
 80110a6:	6825      	ldr	r5, [r4, #0]
 80110a8:	f015 0506 	ands.w	r5, r5, #6
 80110ac:	d106      	bne.n	80110bc <_printf_common+0x48>
 80110ae:	f104 0a19 	add.w	sl, r4, #25
 80110b2:	68e3      	ldr	r3, [r4, #12]
 80110b4:	6832      	ldr	r2, [r6, #0]
 80110b6:	1a9b      	subs	r3, r3, r2
 80110b8:	42ab      	cmp	r3, r5
 80110ba:	dc26      	bgt.n	801110a <_printf_common+0x96>
 80110bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80110c0:	1e13      	subs	r3, r2, #0
 80110c2:	6822      	ldr	r2, [r4, #0]
 80110c4:	bf18      	it	ne
 80110c6:	2301      	movne	r3, #1
 80110c8:	0692      	lsls	r2, r2, #26
 80110ca:	d42b      	bmi.n	8011124 <_printf_common+0xb0>
 80110cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110d0:	4649      	mov	r1, r9
 80110d2:	4638      	mov	r0, r7
 80110d4:	47c0      	blx	r8
 80110d6:	3001      	adds	r0, #1
 80110d8:	d01e      	beq.n	8011118 <_printf_common+0xa4>
 80110da:	6823      	ldr	r3, [r4, #0]
 80110dc:	68e5      	ldr	r5, [r4, #12]
 80110de:	6832      	ldr	r2, [r6, #0]
 80110e0:	f003 0306 	and.w	r3, r3, #6
 80110e4:	2b04      	cmp	r3, #4
 80110e6:	bf08      	it	eq
 80110e8:	1aad      	subeq	r5, r5, r2
 80110ea:	68a3      	ldr	r3, [r4, #8]
 80110ec:	6922      	ldr	r2, [r4, #16]
 80110ee:	bf0c      	ite	eq
 80110f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110f4:	2500      	movne	r5, #0
 80110f6:	4293      	cmp	r3, r2
 80110f8:	bfc4      	itt	gt
 80110fa:	1a9b      	subgt	r3, r3, r2
 80110fc:	18ed      	addgt	r5, r5, r3
 80110fe:	2600      	movs	r6, #0
 8011100:	341a      	adds	r4, #26
 8011102:	42b5      	cmp	r5, r6
 8011104:	d11a      	bne.n	801113c <_printf_common+0xc8>
 8011106:	2000      	movs	r0, #0
 8011108:	e008      	b.n	801111c <_printf_common+0xa8>
 801110a:	2301      	movs	r3, #1
 801110c:	4652      	mov	r2, sl
 801110e:	4649      	mov	r1, r9
 8011110:	4638      	mov	r0, r7
 8011112:	47c0      	blx	r8
 8011114:	3001      	adds	r0, #1
 8011116:	d103      	bne.n	8011120 <_printf_common+0xac>
 8011118:	f04f 30ff 	mov.w	r0, #4294967295
 801111c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011120:	3501      	adds	r5, #1
 8011122:	e7c6      	b.n	80110b2 <_printf_common+0x3e>
 8011124:	18e1      	adds	r1, r4, r3
 8011126:	1c5a      	adds	r2, r3, #1
 8011128:	2030      	movs	r0, #48	; 0x30
 801112a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801112e:	4422      	add	r2, r4
 8011130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011138:	3302      	adds	r3, #2
 801113a:	e7c7      	b.n	80110cc <_printf_common+0x58>
 801113c:	2301      	movs	r3, #1
 801113e:	4622      	mov	r2, r4
 8011140:	4649      	mov	r1, r9
 8011142:	4638      	mov	r0, r7
 8011144:	47c0      	blx	r8
 8011146:	3001      	adds	r0, #1
 8011148:	d0e6      	beq.n	8011118 <_printf_common+0xa4>
 801114a:	3601      	adds	r6, #1
 801114c:	e7d9      	b.n	8011102 <_printf_common+0x8e>
	...

08011150 <_printf_i>:
 8011150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011154:	7e0f      	ldrb	r7, [r1, #24]
 8011156:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011158:	2f78      	cmp	r7, #120	; 0x78
 801115a:	4691      	mov	r9, r2
 801115c:	4680      	mov	r8, r0
 801115e:	460c      	mov	r4, r1
 8011160:	469a      	mov	sl, r3
 8011162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011166:	d807      	bhi.n	8011178 <_printf_i+0x28>
 8011168:	2f62      	cmp	r7, #98	; 0x62
 801116a:	d80a      	bhi.n	8011182 <_printf_i+0x32>
 801116c:	2f00      	cmp	r7, #0
 801116e:	f000 80d8 	beq.w	8011322 <_printf_i+0x1d2>
 8011172:	2f58      	cmp	r7, #88	; 0x58
 8011174:	f000 80a3 	beq.w	80112be <_printf_i+0x16e>
 8011178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801117c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011180:	e03a      	b.n	80111f8 <_printf_i+0xa8>
 8011182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011186:	2b15      	cmp	r3, #21
 8011188:	d8f6      	bhi.n	8011178 <_printf_i+0x28>
 801118a:	a101      	add	r1, pc, #4	; (adr r1, 8011190 <_printf_i+0x40>)
 801118c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011190:	080111e9 	.word	0x080111e9
 8011194:	080111fd 	.word	0x080111fd
 8011198:	08011179 	.word	0x08011179
 801119c:	08011179 	.word	0x08011179
 80111a0:	08011179 	.word	0x08011179
 80111a4:	08011179 	.word	0x08011179
 80111a8:	080111fd 	.word	0x080111fd
 80111ac:	08011179 	.word	0x08011179
 80111b0:	08011179 	.word	0x08011179
 80111b4:	08011179 	.word	0x08011179
 80111b8:	08011179 	.word	0x08011179
 80111bc:	08011309 	.word	0x08011309
 80111c0:	0801122d 	.word	0x0801122d
 80111c4:	080112eb 	.word	0x080112eb
 80111c8:	08011179 	.word	0x08011179
 80111cc:	08011179 	.word	0x08011179
 80111d0:	0801132b 	.word	0x0801132b
 80111d4:	08011179 	.word	0x08011179
 80111d8:	0801122d 	.word	0x0801122d
 80111dc:	08011179 	.word	0x08011179
 80111e0:	08011179 	.word	0x08011179
 80111e4:	080112f3 	.word	0x080112f3
 80111e8:	682b      	ldr	r3, [r5, #0]
 80111ea:	1d1a      	adds	r2, r3, #4
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	602a      	str	r2, [r5, #0]
 80111f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111f8:	2301      	movs	r3, #1
 80111fa:	e0a3      	b.n	8011344 <_printf_i+0x1f4>
 80111fc:	6820      	ldr	r0, [r4, #0]
 80111fe:	6829      	ldr	r1, [r5, #0]
 8011200:	0606      	lsls	r6, r0, #24
 8011202:	f101 0304 	add.w	r3, r1, #4
 8011206:	d50a      	bpl.n	801121e <_printf_i+0xce>
 8011208:	680e      	ldr	r6, [r1, #0]
 801120a:	602b      	str	r3, [r5, #0]
 801120c:	2e00      	cmp	r6, #0
 801120e:	da03      	bge.n	8011218 <_printf_i+0xc8>
 8011210:	232d      	movs	r3, #45	; 0x2d
 8011212:	4276      	negs	r6, r6
 8011214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011218:	485e      	ldr	r0, [pc, #376]	; (8011394 <_printf_i+0x244>)
 801121a:	230a      	movs	r3, #10
 801121c:	e019      	b.n	8011252 <_printf_i+0x102>
 801121e:	680e      	ldr	r6, [r1, #0]
 8011220:	602b      	str	r3, [r5, #0]
 8011222:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011226:	bf18      	it	ne
 8011228:	b236      	sxthne	r6, r6
 801122a:	e7ef      	b.n	801120c <_printf_i+0xbc>
 801122c:	682b      	ldr	r3, [r5, #0]
 801122e:	6820      	ldr	r0, [r4, #0]
 8011230:	1d19      	adds	r1, r3, #4
 8011232:	6029      	str	r1, [r5, #0]
 8011234:	0601      	lsls	r1, r0, #24
 8011236:	d501      	bpl.n	801123c <_printf_i+0xec>
 8011238:	681e      	ldr	r6, [r3, #0]
 801123a:	e002      	b.n	8011242 <_printf_i+0xf2>
 801123c:	0646      	lsls	r6, r0, #25
 801123e:	d5fb      	bpl.n	8011238 <_printf_i+0xe8>
 8011240:	881e      	ldrh	r6, [r3, #0]
 8011242:	4854      	ldr	r0, [pc, #336]	; (8011394 <_printf_i+0x244>)
 8011244:	2f6f      	cmp	r7, #111	; 0x6f
 8011246:	bf0c      	ite	eq
 8011248:	2308      	moveq	r3, #8
 801124a:	230a      	movne	r3, #10
 801124c:	2100      	movs	r1, #0
 801124e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011252:	6865      	ldr	r5, [r4, #4]
 8011254:	60a5      	str	r5, [r4, #8]
 8011256:	2d00      	cmp	r5, #0
 8011258:	bfa2      	ittt	ge
 801125a:	6821      	ldrge	r1, [r4, #0]
 801125c:	f021 0104 	bicge.w	r1, r1, #4
 8011260:	6021      	strge	r1, [r4, #0]
 8011262:	b90e      	cbnz	r6, 8011268 <_printf_i+0x118>
 8011264:	2d00      	cmp	r5, #0
 8011266:	d04d      	beq.n	8011304 <_printf_i+0x1b4>
 8011268:	4615      	mov	r5, r2
 801126a:	fbb6 f1f3 	udiv	r1, r6, r3
 801126e:	fb03 6711 	mls	r7, r3, r1, r6
 8011272:	5dc7      	ldrb	r7, [r0, r7]
 8011274:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011278:	4637      	mov	r7, r6
 801127a:	42bb      	cmp	r3, r7
 801127c:	460e      	mov	r6, r1
 801127e:	d9f4      	bls.n	801126a <_printf_i+0x11a>
 8011280:	2b08      	cmp	r3, #8
 8011282:	d10b      	bne.n	801129c <_printf_i+0x14c>
 8011284:	6823      	ldr	r3, [r4, #0]
 8011286:	07de      	lsls	r6, r3, #31
 8011288:	d508      	bpl.n	801129c <_printf_i+0x14c>
 801128a:	6923      	ldr	r3, [r4, #16]
 801128c:	6861      	ldr	r1, [r4, #4]
 801128e:	4299      	cmp	r1, r3
 8011290:	bfde      	ittt	le
 8011292:	2330      	movle	r3, #48	; 0x30
 8011294:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011298:	f105 35ff 	addle.w	r5, r5, #4294967295
 801129c:	1b52      	subs	r2, r2, r5
 801129e:	6122      	str	r2, [r4, #16]
 80112a0:	f8cd a000 	str.w	sl, [sp]
 80112a4:	464b      	mov	r3, r9
 80112a6:	aa03      	add	r2, sp, #12
 80112a8:	4621      	mov	r1, r4
 80112aa:	4640      	mov	r0, r8
 80112ac:	f7ff fee2 	bl	8011074 <_printf_common>
 80112b0:	3001      	adds	r0, #1
 80112b2:	d14c      	bne.n	801134e <_printf_i+0x1fe>
 80112b4:	f04f 30ff 	mov.w	r0, #4294967295
 80112b8:	b004      	add	sp, #16
 80112ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112be:	4835      	ldr	r0, [pc, #212]	; (8011394 <_printf_i+0x244>)
 80112c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80112c4:	6829      	ldr	r1, [r5, #0]
 80112c6:	6823      	ldr	r3, [r4, #0]
 80112c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80112cc:	6029      	str	r1, [r5, #0]
 80112ce:	061d      	lsls	r5, r3, #24
 80112d0:	d514      	bpl.n	80112fc <_printf_i+0x1ac>
 80112d2:	07df      	lsls	r7, r3, #31
 80112d4:	bf44      	itt	mi
 80112d6:	f043 0320 	orrmi.w	r3, r3, #32
 80112da:	6023      	strmi	r3, [r4, #0]
 80112dc:	b91e      	cbnz	r6, 80112e6 <_printf_i+0x196>
 80112de:	6823      	ldr	r3, [r4, #0]
 80112e0:	f023 0320 	bic.w	r3, r3, #32
 80112e4:	6023      	str	r3, [r4, #0]
 80112e6:	2310      	movs	r3, #16
 80112e8:	e7b0      	b.n	801124c <_printf_i+0xfc>
 80112ea:	6823      	ldr	r3, [r4, #0]
 80112ec:	f043 0320 	orr.w	r3, r3, #32
 80112f0:	6023      	str	r3, [r4, #0]
 80112f2:	2378      	movs	r3, #120	; 0x78
 80112f4:	4828      	ldr	r0, [pc, #160]	; (8011398 <_printf_i+0x248>)
 80112f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80112fa:	e7e3      	b.n	80112c4 <_printf_i+0x174>
 80112fc:	0659      	lsls	r1, r3, #25
 80112fe:	bf48      	it	mi
 8011300:	b2b6      	uxthmi	r6, r6
 8011302:	e7e6      	b.n	80112d2 <_printf_i+0x182>
 8011304:	4615      	mov	r5, r2
 8011306:	e7bb      	b.n	8011280 <_printf_i+0x130>
 8011308:	682b      	ldr	r3, [r5, #0]
 801130a:	6826      	ldr	r6, [r4, #0]
 801130c:	6961      	ldr	r1, [r4, #20]
 801130e:	1d18      	adds	r0, r3, #4
 8011310:	6028      	str	r0, [r5, #0]
 8011312:	0635      	lsls	r5, r6, #24
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	d501      	bpl.n	801131c <_printf_i+0x1cc>
 8011318:	6019      	str	r1, [r3, #0]
 801131a:	e002      	b.n	8011322 <_printf_i+0x1d2>
 801131c:	0670      	lsls	r0, r6, #25
 801131e:	d5fb      	bpl.n	8011318 <_printf_i+0x1c8>
 8011320:	8019      	strh	r1, [r3, #0]
 8011322:	2300      	movs	r3, #0
 8011324:	6123      	str	r3, [r4, #16]
 8011326:	4615      	mov	r5, r2
 8011328:	e7ba      	b.n	80112a0 <_printf_i+0x150>
 801132a:	682b      	ldr	r3, [r5, #0]
 801132c:	1d1a      	adds	r2, r3, #4
 801132e:	602a      	str	r2, [r5, #0]
 8011330:	681d      	ldr	r5, [r3, #0]
 8011332:	6862      	ldr	r2, [r4, #4]
 8011334:	2100      	movs	r1, #0
 8011336:	4628      	mov	r0, r5
 8011338:	f7ee ff5a 	bl	80001f0 <memchr>
 801133c:	b108      	cbz	r0, 8011342 <_printf_i+0x1f2>
 801133e:	1b40      	subs	r0, r0, r5
 8011340:	6060      	str	r0, [r4, #4]
 8011342:	6863      	ldr	r3, [r4, #4]
 8011344:	6123      	str	r3, [r4, #16]
 8011346:	2300      	movs	r3, #0
 8011348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801134c:	e7a8      	b.n	80112a0 <_printf_i+0x150>
 801134e:	6923      	ldr	r3, [r4, #16]
 8011350:	462a      	mov	r2, r5
 8011352:	4649      	mov	r1, r9
 8011354:	4640      	mov	r0, r8
 8011356:	47d0      	blx	sl
 8011358:	3001      	adds	r0, #1
 801135a:	d0ab      	beq.n	80112b4 <_printf_i+0x164>
 801135c:	6823      	ldr	r3, [r4, #0]
 801135e:	079b      	lsls	r3, r3, #30
 8011360:	d413      	bmi.n	801138a <_printf_i+0x23a>
 8011362:	68e0      	ldr	r0, [r4, #12]
 8011364:	9b03      	ldr	r3, [sp, #12]
 8011366:	4298      	cmp	r0, r3
 8011368:	bfb8      	it	lt
 801136a:	4618      	movlt	r0, r3
 801136c:	e7a4      	b.n	80112b8 <_printf_i+0x168>
 801136e:	2301      	movs	r3, #1
 8011370:	4632      	mov	r2, r6
 8011372:	4649      	mov	r1, r9
 8011374:	4640      	mov	r0, r8
 8011376:	47d0      	blx	sl
 8011378:	3001      	adds	r0, #1
 801137a:	d09b      	beq.n	80112b4 <_printf_i+0x164>
 801137c:	3501      	adds	r5, #1
 801137e:	68e3      	ldr	r3, [r4, #12]
 8011380:	9903      	ldr	r1, [sp, #12]
 8011382:	1a5b      	subs	r3, r3, r1
 8011384:	42ab      	cmp	r3, r5
 8011386:	dcf2      	bgt.n	801136e <_printf_i+0x21e>
 8011388:	e7eb      	b.n	8011362 <_printf_i+0x212>
 801138a:	2500      	movs	r5, #0
 801138c:	f104 0619 	add.w	r6, r4, #25
 8011390:	e7f5      	b.n	801137e <_printf_i+0x22e>
 8011392:	bf00      	nop
 8011394:	08013aa9 	.word	0x08013aa9
 8011398:	08013aba 	.word	0x08013aba

0801139c <memmove>:
 801139c:	4288      	cmp	r0, r1
 801139e:	b510      	push	{r4, lr}
 80113a0:	eb01 0402 	add.w	r4, r1, r2
 80113a4:	d902      	bls.n	80113ac <memmove+0x10>
 80113a6:	4284      	cmp	r4, r0
 80113a8:	4623      	mov	r3, r4
 80113aa:	d807      	bhi.n	80113bc <memmove+0x20>
 80113ac:	1e43      	subs	r3, r0, #1
 80113ae:	42a1      	cmp	r1, r4
 80113b0:	d008      	beq.n	80113c4 <memmove+0x28>
 80113b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80113b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80113ba:	e7f8      	b.n	80113ae <memmove+0x12>
 80113bc:	4402      	add	r2, r0
 80113be:	4601      	mov	r1, r0
 80113c0:	428a      	cmp	r2, r1
 80113c2:	d100      	bne.n	80113c6 <memmove+0x2a>
 80113c4:	bd10      	pop	{r4, pc}
 80113c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80113ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80113ce:	e7f7      	b.n	80113c0 <memmove+0x24>

080113d0 <_realloc_r>:
 80113d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113d4:	4680      	mov	r8, r0
 80113d6:	4614      	mov	r4, r2
 80113d8:	460e      	mov	r6, r1
 80113da:	b921      	cbnz	r1, 80113e6 <_realloc_r+0x16>
 80113dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113e0:	4611      	mov	r1, r2
 80113e2:	f7ff bbc9 	b.w	8010b78 <_malloc_r>
 80113e6:	b92a      	cbnz	r2, 80113f4 <_realloc_r+0x24>
 80113e8:	f7ff fb5a 	bl	8010aa0 <_free_r>
 80113ec:	4625      	mov	r5, r4
 80113ee:	4628      	mov	r0, r5
 80113f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113f4:	f000 f81b 	bl	801142e <_malloc_usable_size_r>
 80113f8:	4284      	cmp	r4, r0
 80113fa:	4607      	mov	r7, r0
 80113fc:	d802      	bhi.n	8011404 <_realloc_r+0x34>
 80113fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011402:	d812      	bhi.n	801142a <_realloc_r+0x5a>
 8011404:	4621      	mov	r1, r4
 8011406:	4640      	mov	r0, r8
 8011408:	f7ff fbb6 	bl	8010b78 <_malloc_r>
 801140c:	4605      	mov	r5, r0
 801140e:	2800      	cmp	r0, #0
 8011410:	d0ed      	beq.n	80113ee <_realloc_r+0x1e>
 8011412:	42bc      	cmp	r4, r7
 8011414:	4622      	mov	r2, r4
 8011416:	4631      	mov	r1, r6
 8011418:	bf28      	it	cs
 801141a:	463a      	movcs	r2, r7
 801141c:	f7ff fb2a 	bl	8010a74 <memcpy>
 8011420:	4631      	mov	r1, r6
 8011422:	4640      	mov	r0, r8
 8011424:	f7ff fb3c 	bl	8010aa0 <_free_r>
 8011428:	e7e1      	b.n	80113ee <_realloc_r+0x1e>
 801142a:	4635      	mov	r5, r6
 801142c:	e7df      	b.n	80113ee <_realloc_r+0x1e>

0801142e <_malloc_usable_size_r>:
 801142e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011432:	1f18      	subs	r0, r3, #4
 8011434:	2b00      	cmp	r3, #0
 8011436:	bfbc      	itt	lt
 8011438:	580b      	ldrlt	r3, [r1, r0]
 801143a:	18c0      	addlt	r0, r0, r3
 801143c:	4770      	bx	lr
	...

08011440 <_init>:
 8011440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011442:	bf00      	nop
 8011444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011446:	bc08      	pop	{r3}
 8011448:	469e      	mov	lr, r3
 801144a:	4770      	bx	lr

0801144c <_fini>:
 801144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801144e:	bf00      	nop
 8011450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011452:	bc08      	pop	{r3}
 8011454:	469e      	mov	lr, r3
 8011456:	4770      	bx	lr


rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011188  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002644  08011328  08011328  00021328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801396c  0801396c  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801396c  0801396c  0002396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013974  08013974  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013974  08013974  00023974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013978  08013978  00023978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801397c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001cd68  200001f0  08013b6c  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2001cf58  08013b6c  0003cf58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028e25  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000066e4  00000000  00000000  00059045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002048  00000000  00000000  0005f730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d68  00000000  00000000  00061778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4e1  00000000  00000000  000634e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b7e9  00000000  00000000  000829c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5501  00000000  00000000  000ae1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001536ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089f8  00000000  00000000  001536fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011310 	.word	0x08011310

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08011310 	.word	0x08011310

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <ARGB_Init>:
/**
 * @brief Init timer & prescalers
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8000ba6:	f005 fa67 	bl	8006078 <HAL_RCC_GetPCLK2Freq>
 8000baa:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <ARGB_Init+0xd8>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <ARGB_Init+0x1c>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <ARGB_Init+0x1e>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	fb02 f303 	mul.w	r3, r2, r3
 8000bc6:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	4a2b      	ldr	r2, [pc, #172]	; (8000c7c <ARGB_Init+0xdc>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	607b      	str	r3, [r7, #4]
#endif

    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <ARGB_Init+0xe0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	3b01      	subs	r3, #1
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <ARGB_Init+0xe0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <ARGB_Init+0xe0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fdb7 	bl	8000768 <__aeabi_ui2d>
 8000bfa:	a31b      	add	r3, pc, #108	; (adr r3, 8000c68 <ARGB_Init+0xc8>)
 8000bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c00:	f7ff fb46 	bl	8000290 <__aeabi_dmul>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	4610      	mov	r0, r2
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f7ff fe26 	bl	800085c <__aeabi_d2uiz>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	3b01      	subs	r3, #1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <ARGB_Init+0xe4>)
 8000c1a:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fda3 	bl	8000768 <__aeabi_ui2d>
 8000c22:	a313      	add	r3, pc, #76	; (adr r3, 8000c70 <ARGB_Init+0xd0>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	f7ff fb32 	bl	8000290 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff fe12 	bl	800085c <__aeabi_d2uiz>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <ARGB_Init+0xe8>)
 8000c42:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <ARGB_Init+0xec>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <ARGB_Init+0xe0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2108      	movs	r1, #8
 8000c52:	4618      	mov	r0, r3
 8000c54:	f008 f9f2 	bl	800903c <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f002 f89b 	bl	8002d94 <HAL_Delay>
    return ARGB_OK;
 8000c5e:	2302      	movs	r3, #2
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	1eb851ec 	.word	0x1eb851ec
 8000c6c:	3fe1eb85 	.word	0x3fe1eb85
 8000c70:	1eb851ec 	.word	0x1eb851ec
 8000c74:	3fd1eb85 	.word	0x3fd1eb85
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	014f8b59 	.word	0x014f8b59
 8000c80:	20001468 	.word	0x20001468
 8000c84:	2000020c 	.word	0x2000020c
 8000c88:	2000020d 	.word	0x2000020d
 8000c8c:	200002d6 	.word	0x200002d6

08000c90 <ARGB_Clear>:
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Clear(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f000 f873 	bl	8000d84 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
    return ARGB_OK;
 8000c9e:	2302      	movs	r3, #2
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <ARGB_SetRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4604      	mov	r4, r0
 8000cac:	4608      	mov	r0, r1
 8000cae:	4611      	mov	r1, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4623      	mov	r3, r4
 8000cb4:	80fb      	strh	r3, [r7, #6]
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	717b      	strb	r3, [r7, #5]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	713b      	strb	r3, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d005      	beq.n	8000cd4 <ARGB_SetRGB+0x30>
        u16_t _i = i / NUM_PIXELS;
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000ccc:	88fa      	ldrh	r2, [r7, #6]
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	80fb      	strh	r3, [r7, #6]
    }

    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <ARGB_SetRGB+0xd8>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	3301      	adds	r3, #1
 8000cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ce4:	797a      	ldrb	r2, [r7, #5]
 8000ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cea:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <ARGB_SetRGB+0xd8>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cfc:	793a      	ldrb	r2, [r7, #4]
 8000cfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d02:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <ARGB_SetRGB+0xd8>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d10:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d14:	78fa      	ldrb	r2, [r7, #3]
 8000d16:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d1a:	70fb      	strb	r3, [r7, #3]

#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000d1c:	793b      	ldrb	r3, [r7, #4]
 8000d1e:	21b0      	movs	r1, #176	; 0xb0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f9cb 	bl	80010bc <scale8>
 8000d26:	4603      	mov	r3, r0
 8000d28:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	21f0      	movs	r1, #240	; 0xf0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f9c4 	bl	80010bc <scale8>
 8000d34:	4603      	mov	r3, r0
 8000d36:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8000d38:	793b      	ldrb	r3, [r7, #4]
 8000d3a:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8000d3c:	797b      	ldrb	r3, [r7, #5]
 8000d3e:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8000d44:	88fa      	ldrh	r2, [r7, #6]
 8000d46:	4613      	mov	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <ARGB_SetRGB+0xdc>)
 8000d4e:	7b7a      	ldrb	r2, [r7, #13]
 8000d50:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000d52:	88fa      	ldrh	r2, [r7, #6]
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	4908      	ldr	r1, [pc, #32]	; (8000d80 <ARGB_SetRGB+0xdc>)
 8000d5e:	7b3a      	ldrb	r2, [r7, #12]
 8000d60:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000d62:	88fa      	ldrh	r2, [r7, #6]
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	4904      	ldr	r1, [pc, #16]	; (8000d80 <ARGB_SetRGB+0xdc>)
 8000d6e:	7afa      	ldrb	r2, [r7, #11]
 8000d70:	54ca      	strb	r2, [r1, r3]
#endif
    return ARGB_OK;
 8000d72:	2302      	movs	r3, #2
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd90      	pop	{r4, r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000210 	.word	0x20000210

08000d84 <ARGB_FillRGB>:
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	71bb      	strb	r3, [r7, #6]
 8000d92:	4613      	mov	r3, r2
 8000d94:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	81fb      	strh	r3, [r7, #14]
 8000d9a:	e00b      	b.n	8000db4 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8000d9c:	89fb      	ldrh	r3, [r7, #14]
 8000d9e:	b298      	uxth	r0, r3
 8000da0:	797b      	ldrb	r3, [r7, #5]
 8000da2:	79ba      	ldrb	r2, [r7, #6]
 8000da4:	79f9      	ldrb	r1, [r7, #7]
 8000da6:	f7ff ff7d 	bl	8000ca4 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	81fb      	strh	r3, [r7, #14]
 8000db4:	89fb      	ldrh	r3, [r7, #14]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0ef      	beq.n	8000d9c <ARGB_FillRGB+0x18>
    return ARGB_OK;
 8000dbc:	2302      	movs	r3, #2
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8000dce:	4b9d      	ldr	r3, [pc, #628]	; (8001044 <ARGB_Show+0x27c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8000dd4:	4b9c      	ldr	r3, [pc, #624]	; (8001048 <ARGB_Show+0x280>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d105      	bne.n	8000dea <ARGB_Show+0x22>
 8000dde:	4b9b      	ldr	r3, [pc, #620]	; (800104c <ARGB_Show+0x284>)
 8000de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d001      	beq.n	8000dee <ARGB_Show+0x26>
        return ARGB_BUSY;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e15e      	b.n	80010ac <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	e0a6      	b.n	8000f42 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000df4:	4b96      	ldr	r3, [pc, #600]	; (8001050 <ARGB_Show+0x288>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	dd04      	ble.n	8000e16 <ARGB_Show+0x4e>
 8000e0c:	4b91      	ldr	r3, [pc, #580]	; (8001054 <ARGB_Show+0x28c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	e003      	b.n	8000e1e <ARGB_Show+0x56>
 8000e16:	4b90      	ldr	r3, [pc, #576]	; (8001058 <ARGB_Show+0x290>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4619      	mov	r1, r3
 8000e24:	4b8d      	ldr	r3, [pc, #564]	; (800105c <ARGB_Show+0x294>)
 8000e26:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e2a:	4b89      	ldr	r3, [pc, #548]	; (8001050 <ARGB_Show+0x288>)
 8000e2c:	785b      	ldrb	r3, [r3, #1]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dd04      	ble.n	8000e4c <ARGB_Show+0x84>
 8000e42:	4b84      	ldr	r3, [pc, #528]	; (8001054 <ARGB_Show+0x28c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	e003      	b.n	8000e54 <ARGB_Show+0x8c>
 8000e4c:	4b82      	ldr	r3, [pc, #520]	; (8001058 <ARGB_Show+0x290>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	3308      	adds	r3, #8
 8000e5a:	4a80      	ldr	r2, [pc, #512]	; (800105c <ARGB_Show+0x294>)
 8000e5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e60:	4b7b      	ldr	r3, [pc, #492]	; (8001050 <ARGB_Show+0x288>)
 8000e62:	789b      	ldrb	r3, [r3, #2]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	461a      	mov	r2, r3
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	dd04      	ble.n	8000e82 <ARGB_Show+0xba>
 8000e78:	4b76      	ldr	r3, [pc, #472]	; (8001054 <ARGB_Show+0x28c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4619      	mov	r1, r3
 8000e80:	e003      	b.n	8000e8a <ARGB_Show+0xc2>
 8000e82:	4b75      	ldr	r3, [pc, #468]	; (8001058 <ARGB_Show+0x290>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4619      	mov	r1, r3
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	3310      	adds	r3, #16
 8000e90:	4a72      	ldr	r2, [pc, #456]	; (800105c <ARGB_Show+0x294>)
 8000e92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000e96:	4b6e      	ldr	r3, [pc, #440]	; (8001050 <ARGB_Show+0x288>)
 8000e98:	78db      	ldrb	r3, [r3, #3]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	dd04      	ble.n	8000eb8 <ARGB_Show+0xf0>
 8000eae:	4b69      	ldr	r3, [pc, #420]	; (8001054 <ARGB_Show+0x28c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	e003      	b.n	8000ec0 <ARGB_Show+0xf8>
 8000eb8:	4b67      	ldr	r3, [pc, #412]	; (8001058 <ARGB_Show+0x290>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	3318      	adds	r3, #24
 8000ec6:	4a65      	ldr	r2, [pc, #404]	; (800105c <ARGB_Show+0x294>)
 8000ec8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000ecc:	4b60      	ldr	r3, [pc, #384]	; (8001050 <ARGB_Show+0x288>)
 8000ece:	791b      	ldrb	r3, [r3, #4]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dd04      	ble.n	8000eee <ARGB_Show+0x126>
 8000ee4:	4b5b      	ldr	r3, [pc, #364]	; (8001054 <ARGB_Show+0x28c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4619      	mov	r1, r3
 8000eec:	e003      	b.n	8000ef6 <ARGB_Show+0x12e>
 8000eee:	4b5a      	ldr	r3, [pc, #360]	; (8001058 <ARGB_Show+0x290>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3320      	adds	r3, #32
 8000efc:	4a57      	ldr	r2, [pc, #348]	; (800105c <ARGB_Show+0x294>)
 8000efe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000f02:	4b53      	ldr	r3, [pc, #332]	; (8001050 <ARGB_Show+0x288>)
 8000f04:	795b      	ldrb	r3, [r3, #5]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	dd04      	ble.n	8000f24 <ARGB_Show+0x15c>
 8000f1a:	4b4e      	ldr	r3, [pc, #312]	; (8001054 <ARGB_Show+0x28c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4619      	mov	r1, r3
 8000f22:	e003      	b.n	8000f2c <ARGB_Show+0x164>
 8000f24:	4b4c      	ldr	r3, [pc, #304]	; (8001058 <ARGB_Show+0x290>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	3328      	adds	r3, #40	; 0x28
 8000f32:	4a4a      	ldr	r2, [pc, #296]	; (800105c <ARGB_Show+0x294>)
 8000f34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b07      	cmp	r3, #7
 8000f48:	f67f af54 	bls.w	8000df4 <ARGB_Show+0x2c>
#endif
        }

        //HAL_TIM_DMABurst_WriteStart(&TIM_HANDLE, TIM_DMABASE_ARR)

        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000f50:	e0a4      	b.n	800109c <ARGB_Show+0x2d4>

            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8000f52:	4b43      	ldr	r3, [pc, #268]	; (8001060 <ARGB_Show+0x298>)
 8000f54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d102      	bne.n	8000f64 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	73fb      	strb	r3, [r7, #15]
                continue;
 8000f62:	e09b      	b.n	800109c <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8000f64:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <ARGB_Show+0x298>)
 8000f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d11d      	bne.n	8000fac <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8000f70:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <ARGB_Show+0x298>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8000f78:	4b39      	ldr	r3, [pc, #228]	; (8001060 <ARGB_Show+0x298>)
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	4a39      	ldr	r2, [pc, #228]	; (8001064 <ARGB_Show+0x29c>)
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8000f80:	4b37      	ldr	r3, [pc, #220]	; (8001060 <ARGB_Show+0x298>)
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	4a38      	ldr	r2, [pc, #224]	; (8001068 <ARGB_Show+0x2a0>)
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8000f88:	4b35      	ldr	r3, [pc, #212]	; (8001060 <ARGB_Show+0x298>)
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	4a37      	ldr	r2, [pc, #220]	; (800106c <ARGB_Show+0x2a4>)
 8000f8e:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <ARGB_Show+0x298>)
 8000f92:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000f94:	4931      	ldr	r1, [pc, #196]	; (800105c <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8000f96:	4b32      	ldr	r3, [pc, #200]	; (8001060 <ARGB_Show+0x298>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	2330      	movs	r3, #48	; 0x30
 8000fa0:	f002 fa48 	bl	8003434 <HAL_DMA_Start_IT>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <ARGB_Show+0x1f0>
 8000faa:	e002      	b.n	8000fb2 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fb0:	e074      	b.n	800109c <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
                continue;
 8000fb6:	e071      	b.n	800109c <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8000fb8:	4b29      	ldr	r3, [pc, #164]	; (8001060 <ARGB_Show+0x298>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <ARGB_Show+0x298>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fc6:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8000fc8:	4b25      	ldr	r3, [pc, #148]	; (8001060 <ARGB_Show+0x298>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a28      	ldr	r2, [pc, #160]	; (8001070 <ARGB_Show+0x2a8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d107      	bne.n	8000fe2 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <ARGB_Show+0x298>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <ARGB_Show+0x298>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fe0:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <ARGB_Show+0x298>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a22      	ldr	r2, [pc, #136]	; (8001070 <ARGB_Show+0x2a8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d018      	beq.n	800101e <ARGB_Show+0x256>
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <ARGB_Show+0x298>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff4:	d013      	beq.n	800101e <ARGB_Show+0x256>
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <ARGB_Show+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <ARGB_Show+0x2ac>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00e      	beq.n	800101e <ARGB_Show+0x256>
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <ARGB_Show+0x298>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <ARGB_Show+0x2b0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d009      	beq.n	800101e <ARGB_Show+0x256>
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <ARGB_Show+0x298>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1b      	ldr	r2, [pc, #108]	; (800107c <ARGB_Show+0x2b4>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d004      	beq.n	800101e <ARGB_Show+0x256>
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <ARGB_Show+0x298>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a19      	ldr	r2, [pc, #100]	; (8001080 <ARGB_Show+0x2b8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d132      	bne.n	8001084 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <ARGB_Show+0x298>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	2b06      	cmp	r3, #6
 800102e:	d032      	beq.n	8001096 <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <ARGB_Show+0x298>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <ARGB_Show+0x298>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 0201 	orr.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001040:	e029      	b.n	8001096 <ARGB_Show+0x2ce>
 8001042:	bf00      	nop
 8001044:	200002d6 	.word	0x200002d6
 8001048:	200002d4 	.word	0x200002d4
 800104c:	200014b0 	.word	0x200014b0
 8001050:	20000210 	.word	0x20000210
 8001054:	2000020c 	.word	0x2000020c
 8001058:	2000020d 	.word	0x2000020d
 800105c:	20000214 	.word	0x20000214
 8001060:	20001468 	.word	0x20001468
 8001064:	080010e5 	.word	0x080010e5
 8001068:	08001365 	.word	0x08001365
 800106c:	08008949 	.word	0x08008949
 8001070:	40010000 	.word	0x40010000
 8001074:	40000400 	.word	0x40000400
 8001078:	40000800 	.word	0x40000800
 800107c:	40000c00 	.word	0x40000c00
 8001080:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <ARGB_Show+0x2ec>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <ARGB_Show+0x2ec>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e000      	b.n	8001098 <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001096:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f47f af57 	bne.w	8000f52 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <ARGB_Show+0x2f0>)
 80010a6:	2202      	movs	r2, #2
 80010a8:	801a      	strh	r2, [r3, #0]

        return ARGB_OK;
 80010aa:	2302      	movs	r3, #2
    }
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20001468 	.word	0x20001468
 80010b8:	200002d4 	.word	0x200002d4

080010bc <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	79ba      	ldrb	r2, [r7, #6]
 80010d0:	fb02 f303 	mul.w	r3, r2, r3
 80010d4:	121b      	asrs	r3, r3, #8
 80010d6:	b2db      	uxtb	r3, r3
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f0:	60fb      	str	r3, [r7, #12]

    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d10b      	bne.n	8001114 <ARGB_TIM_DMADelayPulseCplt+0x30>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2201      	movs	r2, #1
 8001100:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d136      	bne.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001112:	e031      	b.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	d10b      	bne.n	8001136 <ARGB_TIM_DMADelayPulseCplt+0x52>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2202      	movs	r2, #2
 8001122:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d125      	bne.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001134:	e020      	b.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	429a      	cmp	r2, r3
 800113e:	d10b      	bne.n	8001158 <ARGB_TIM_DMADelayPulseCplt+0x74>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2204      	movs	r2, #4
 8001144:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d114      	bne.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001156:	e00f      	b.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	429a      	cmp	r2, r3
 8001160:	d10a      	bne.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2208      	movs	r2, #8
 8001166:	771a      	strb	r2, [r3, #28]

        if (hdma->Init.Mode == DMA_NORMAL) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <ARGB_TIM_DMADelayPulseCplt+0x94>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001178:	4b72      	ldr	r3, [pc, #456]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d17b      	bne.n	800127a <ARGB_TIM_DMADelayPulseCplt+0x196>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001182:	2300      	movs	r3, #0
 8001184:	72fb      	strb	r3, [r7, #11]
 8001186:	e06c      	b.n	8001262 <ARGB_TIM_DMADelayPulseCplt+0x17e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001188:	4b6e      	ldr	r3, [pc, #440]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	4a6c      	ldr	r2, [pc, #432]	; (8001348 <ARGB_TIM_DMADelayPulseCplt+0x264>)
 8001198:	5cd3      	ldrb	r3, [r2, r3]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dd04      	ble.n	80011b8 <ARGB_TIM_DMADelayPulseCplt+0xd4>
 80011ae:	4b67      	ldr	r3, [pc, #412]	; (800134c <ARGB_TIM_DMADelayPulseCplt+0x268>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4619      	mov	r1, r3
 80011b6:	e003      	b.n	80011c0 <ARGB_TIM_DMADelayPulseCplt+0xdc>
 80011b8:	4b65      	ldr	r3, [pc, #404]	; (8001350 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4619      	mov	r1, r3
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	3318      	adds	r3, #24
 80011c6:	4a63      	ldr	r2, [pc, #396]	; (8001354 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 80011c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011cc:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	3301      	adds	r3, #1
 80011dc:	4a5a      	ldr	r2, [pc, #360]	; (8001348 <ARGB_TIM_DMADelayPulseCplt+0x264>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	dd04      	ble.n	80011fe <ARGB_TIM_DMADelayPulseCplt+0x11a>
 80011f4:	4b55      	ldr	r3, [pc, #340]	; (800134c <ARGB_TIM_DMADelayPulseCplt+0x268>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	e003      	b.n	8001206 <ARGB_TIM_DMADelayPulseCplt+0x122>
 80011fe:	4b54      	ldr	r3, [pc, #336]	; (8001350 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4619      	mov	r1, r3
 8001206:	7afb      	ldrb	r3, [r7, #11]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3320      	adds	r3, #32
 800120c:	4a51      	ldr	r2, [pc, #324]	; (8001354 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 800120e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001212:	4b4c      	ldr	r3, [pc, #304]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	3302      	adds	r3, #2
 8001222:	4a49      	ldr	r2, [pc, #292]	; (8001348 <ARGB_TIM_DMADelayPulseCplt+0x264>)
 8001224:	5cd3      	ldrb	r3, [r2, r3]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	2b00      	cmp	r3, #0
 8001238:	dd04      	ble.n	8001244 <ARGB_TIM_DMADelayPulseCplt+0x160>
 800123a:	4b44      	ldr	r3, [pc, #272]	; (800134c <ARGB_TIM_DMADelayPulseCplt+0x268>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	e003      	b.n	800124c <ARGB_TIM_DMADelayPulseCplt+0x168>
 8001244:	4b42      	ldr	r3, [pc, #264]	; (8001350 <ARGB_TIM_DMADelayPulseCplt+0x26c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4619      	mov	r1, r3
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	3328      	adds	r3, #40	; 0x28
 8001252:	4a40      	ldr	r2, [pc, #256]	; (8001354 <ARGB_TIM_DMADelayPulseCplt+0x270>)
 8001254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	3301      	adds	r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	72fb      	strb	r3, [r7, #11]
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b07      	cmp	r3, #7
 8001268:	d98e      	bls.n	8001188 <ARGB_TIM_DMADelayPulseCplt+0xa4>
#endif
        }
        BUF_COUNTER++;
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b29a      	uxth	r2, r3
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001276:	801a      	strh	r2, [r3, #0]
 8001278:	e05d      	b.n	8001336 <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800127a:	4b32      	ldr	r3, [pc, #200]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d80c      	bhi.n	800129e <ARGB_TIM_DMADelayPulseCplt+0x1ba>
        memset((u32_t *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // second part
 8001284:	2260      	movs	r2, #96	; 0x60
 8001286:	2100      	movs	r1, #0
 8001288:	4833      	ldr	r0, [pc, #204]	; (8001358 <ARGB_TIM_DMADelayPulseCplt+0x274>)
 800128a:	f00f fb69 	bl	8010960 <memset>
        BUF_COUNTER++;
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	3301      	adds	r3, #1
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e04b      	b.n	8001336 <ARGB_TIM_DMADelayPulseCplt+0x252>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <ARGB_TIM_DMADelayPulseCplt+0x260>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012b2:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 f921 	bl	8003500 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a26      	ldr	r2, [pc, #152]	; (800135c <ARGB_TIM_DMADelayPulseCplt+0x278>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d117      	bne.n	80012f8 <ARGB_TIM_DMADelayPulseCplt+0x214>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a1a      	ldr	r2, [r3, #32]
 80012ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10f      	bne.n	80012f8 <ARGB_TIM_DMADelayPulseCplt+0x214>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6a1a      	ldr	r2, [r3, #32]
 80012de:	f240 4344 	movw	r3, #1092	; 0x444
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d107      	bne.n	80012f8 <ARGB_TIM_DMADelayPulseCplt+0x214>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012f6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6a1a      	ldr	r2, [r3, #32]
 80012fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10f      	bne.n	8001328 <ARGB_TIM_DMADelayPulseCplt+0x244>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6a1a      	ldr	r2, [r3, #32]
 800130e:	f240 4344 	movw	r3, #1092	; 0x444
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d107      	bne.n	8001328 <ARGB_TIM_DMADelayPulseCplt+0x244>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST = ARGB_READY;
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <ARGB_TIM_DMADelayPulseCplt+0x27c>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
    }

    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	771a      	strb	r2, [r3, #28]
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200002d4 	.word	0x200002d4
 8001348:	20000210 	.word	0x20000210
 800134c:	2000020c 	.word	0x2000020c
 8001350:	2000020d 	.word	0x2000020d
 8001354:	20000214 	.word	0x20000214
 8001358:	20000274 	.word	0x20000274
 800135c:	40010000 	.word	0x40010000
 8001360:	200002d6 	.word	0x200002d6

08001364 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001370:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <ARGB_TIM_DMADelayPulseHalfCplt+0x150>)
 8001376:	4293      	cmp	r3, r2
 8001378:	f040 8098 	bne.w	80014ac <ARGB_TIM_DMADelayPulseHalfCplt+0x148>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>)
 8001380:	4293      	cmp	r3, r2
 8001382:	f040 8093 	bne.w	80014ac <ARGB_TIM_DMADelayPulseHalfCplt+0x148>

    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001386:	4b4d      	ldr	r3, [pc, #308]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d17b      	bne.n	8001488 <ARGB_TIM_DMADelayPulseHalfCplt+0x124>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001390:	2300      	movs	r3, #0
 8001392:	72fb      	strb	r3, [r7, #11]
 8001394:	e06c      	b.n	8001470 <ARGB_TIM_DMADelayPulseHalfCplt+0x10c>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001396:	4b49      	ldr	r3, [pc, #292]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	4a46      	ldr	r2, [pc, #280]	; (80014c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	7afb      	ldrb	r3, [r7, #11]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	dd04      	ble.n	80013c6 <ARGB_TIM_DMADelayPulseHalfCplt+0x62>
 80013bc:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	e003      	b.n	80013ce <ARGB_TIM_DMADelayPulseHalfCplt+0x6a>
 80013c6:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	7afb      	ldrb	r3, [r7, #11]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4619      	mov	r1, r3
 80013d4:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80013d6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a35      	ldr	r2, [pc, #212]	; (80014c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	7afb      	ldrb	r3, [r7, #11]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dd04      	ble.n	800140c <ARGB_TIM_DMADelayPulseHalfCplt+0xa8>
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	4619      	mov	r1, r3
 800140a:	e003      	b.n	8001414 <ARGB_TIM_DMADelayPulseHalfCplt+0xb0>
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4619      	mov	r1, r3
 8001414:	7afb      	ldrb	r3, [r7, #11]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	3308      	adds	r3, #8
 800141a:	4a2c      	ldr	r2, [pc, #176]	; (80014cc <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800141c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	3302      	adds	r3, #2
 8001430:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x15c>)
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001444:	2b00      	cmp	r3, #0
 8001446:	dd04      	ble.n	8001452 <ARGB_TIM_DMADelayPulseHalfCplt+0xee>
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	e003      	b.n	800145a <ARGB_TIM_DMADelayPulseHalfCplt+0xf6>
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4619      	mov	r1, r3
 800145a:	7afb      	ldrb	r3, [r7, #11]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3310      	adds	r3, #16
 8001460:	4a1a      	ldr	r2, [pc, #104]	; (80014cc <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001462:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001466:	7afb      	ldrb	r3, [r7, #11]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	3301      	adds	r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	72fb      	strb	r3, [r7, #11]
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b07      	cmp	r3, #7
 8001476:	d98e      	bls.n	8001396 <ARGB_TIM_DMADelayPulseHalfCplt+0x32>
#endif
        }
        BUF_COUNTER++;
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	3301      	adds	r3, #1
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 8001484:	801a      	strh	r2, [r3, #0]
 8001486:	e012      	b.n	80014ae <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d80d      	bhi.n	80014ae <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
        memset((u32_t*) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(u32_t)); // first part
 8001492:	2260      	movs	r2, #96	; 0x60
 8001494:	2100      	movs	r1, #0
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001498:	f00f fa62 	bl	8010960 <memset>
        BUF_COUNTER++;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <ARGB_TIM_DMADelayPulseHalfCplt+0x158>)
 80014a8:	801a      	strh	r2, [r3, #0]
 80014aa:	e000      	b.n	80014ae <ARGB_TIM_DMADelayPulseHalfCplt+0x14a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80014ac:	bf00      	nop
    }
}
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200014b0 	.word	0x200014b0
 80014b8:	20001468 	.word	0x20001468
 80014bc:	200002d4 	.word	0x200002d4
 80014c0:	20000210 	.word	0x20000210
 80014c4:	2000020c 	.word	0x2000020c
 80014c8:	2000020d 	.word	0x2000020d
 80014cc:	20000214 	.word	0x20000214

080014d0 <displayBand>:
int currentBand = 0;                          // First band. For this case, AM is the current band.
char buff[20];
uint32_t ticks;

void displayBand(int band_index)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af04      	add	r7, sp, #16
 80014d6:	6078      	str	r0, [r7, #4]
    if(band_index != lastBand + 1 )
 80014d8:	2304      	movs	r3, #4
 80014da:	3301      	adds	r3, #1
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d07d      	beq.n	80015de <displayBand+0x10e>
    {
        ST7735_FillRectangleFast(0,0,160,80,ST7735_COLOR565(10, 10, 10));
 80014e2:	f640 0341 	movw	r3, #2113	; 0x841
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2350      	movs	r3, #80	; 0x50
 80014ea:	22a0      	movs	r2, #160	; 0xa0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 ff28 	bl	8002344 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,64,160,16,ST7735_COLOR565(50, 50, 50));
 80014f4:	f243 1386 	movw	r3, #12678	; 0x3186
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2310      	movs	r3, #16
 80014fc:	22a0      	movs	r2, #160	; 0xa0
 80014fe:	2140      	movs	r1, #64	; 0x40
 8001500:	2000      	movs	r0, #0
 8001502:	f000 ff1f 	bl	8002344 <ST7735_FillRectangleFast>
        ST7735_FillRectangleFast(0,0,160,26,ST7735_COLOR565(50, 50, 50));
 8001506:	f243 1386 	movw	r3, #12678	; 0x3186
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	231a      	movs	r3, #26
 800150e:	22a0      	movs	r2, #160	; 0xa0
 8001510:	2100      	movs	r1, #0
 8001512:	2000      	movs	r0, #0
 8001514:	f000 ff16 	bl	8002344 <ST7735_FillRectangleFast>
        ST7735_WriteString(1, 2, band[band_index].name, Font_16x26, ST7735_COLOR565(255, 179, 0), ST7735_COLOR565(50, 50, 50));
 8001518:	4933      	ldr	r1, [pc, #204]	; (80015e8 <displayBand+0x118>)
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	6819      	ldr	r1, [r3, #0]
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <displayBand+0x11c>)
 800152a:	f243 1286 	movw	r2, #12678	; 0x3186
 800152e:	9202      	str	r2, [sp, #8]
 8001530:	f64f 5280 	movw	r2, #64896	; 0xfd80
 8001534:	9201      	str	r2, [sp, #4]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	9200      	str	r2, [sp, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	460a      	mov	r2, r1
 800153e:	2102      	movs	r1, #2
 8001540:	2001      	movs	r0, #1
 8001542:	f000 fe42 	bl	80021ca <ST7735_WriteString>
        // freq
       	sprintf(buff, "%s - %s", band[band_index].WminFreq, band[band_index].WmaxFreq);
 8001546:	4928      	ldr	r1, [pc, #160]	; (80015e8 <displayBand+0x118>)
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	440b      	add	r3, r1
 8001554:	3304      	adds	r3, #4
 8001556:	6819      	ldr	r1, [r3, #0]
 8001558:	4823      	ldr	r0, [pc, #140]	; (80015e8 <displayBand+0x118>)
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4403      	add	r3, r0
 8001566:	3308      	adds	r3, #8
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	460a      	mov	r2, r1
 800156c:	4920      	ldr	r1, [pc, #128]	; (80015f0 <displayBand+0x120>)
 800156e:	4821      	ldr	r0, [pc, #132]	; (80015f4 <displayBand+0x124>)
 8001570:	f00f fb58 	bl	8010c24 <siprintf>
       	ST7735_WriteString(0, 29, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <displayBand+0x128>)
 8001576:	f640 0241 	movw	r2, #2113	; 0x841
 800157a:	9202      	str	r2, [sp, #8]
 800157c:	f244 52df 	movw	r2, #17887	; 0x45df
 8001580:	9201      	str	r2, [sp, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	9200      	str	r2, [sp, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a1a      	ldr	r2, [pc, #104]	; (80015f4 <displayBand+0x124>)
 800158a:	211d      	movs	r1, #29
 800158c:	2000      	movs	r0, #0
 800158e:	f000 fe1c 	bl	80021ca <ST7735_WriteString>
       	sprintf(buff, "%s - %s", band[band_index].NminFreq, band[band_index].NmaxFreq);
 8001592:	4915      	ldr	r1, [pc, #84]	; (80015e8 <displayBand+0x118>)
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	330c      	adds	r3, #12
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <displayBand+0x118>)
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4403      	add	r3, r0
 80015b2:	3310      	adds	r3, #16
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	460a      	mov	r2, r1
 80015b8:	490d      	ldr	r1, [pc, #52]	; (80015f0 <displayBand+0x120>)
 80015ba:	480e      	ldr	r0, [pc, #56]	; (80015f4 <displayBand+0x124>)
 80015bc:	f00f fb32 	bl	8010c24 <siprintf>
       	ST7735_WriteString(0, 46, buff, Font_11x18, ST7735_COLOR565(66, 186, 255), ST7735_COLOR565(10, 10, 10));
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <displayBand+0x128>)
 80015c2:	f640 0241 	movw	r2, #2113	; 0x841
 80015c6:	9202      	str	r2, [sp, #8]
 80015c8:	f244 52df 	movw	r2, #17887	; 0x45df
 80015cc:	9201      	str	r2, [sp, #4]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	9200      	str	r2, [sp, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <displayBand+0x124>)
 80015d6:	212e      	movs	r1, #46	; 0x2e
 80015d8:	2000      	movs	r0, #0
 80015da:	f000 fdf6 	bl	80021ca <ST7735_WriteString>
    }

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000004 	.word	0x20000004
 80015ec:	20000084 	.word	0x20000084
 80015f0:	080113cc 	.word	0x080113cc
 80015f4:	200002d8 	.word	0x200002d8
 80015f8:	2000007c 	.word	0x2000007c

080015fc <setBand>:
    HAL_GPIO_WritePin(GPIOB, CHIP, GPIO_PIN_SET); // HIGH
	delay_us(300);
}

void setBand(int band_index)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af04      	add	r7, sp, #16
 8001602:	6078      	str	r0, [r7, #4]
	ticks = band[band_index].ticks; //- START_RESISTANCE_KOM;
 8001604:	4912      	ldr	r1, [pc, #72]	; (8001650 <setBand+0x54>)
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	3314      	adds	r3, #20
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a0f      	ldr	r2, [pc, #60]	; (8001654 <setBand+0x58>)
 8001618:	6013      	str	r3, [r2, #0]
	sprintf(buff, "R:%ld", ticks);
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <setBand+0x58>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	490d      	ldr	r1, [pc, #52]	; (8001658 <setBand+0x5c>)
 8001622:	480e      	ldr	r0, [pc, #56]	; (800165c <setBand+0x60>)
 8001624:	f00f fafe 	bl	8010c24 <siprintf>
	ST7735_WriteString(0, 64, buff, Font_11x18, ST7735_COLOR565(165, 214, 2), ST7735_COLOR565(50, 50, 50));
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <setBand+0x64>)
 800162a:	f243 1286 	movw	r2, #12678	; 0x3186
 800162e:	9202      	str	r2, [sp, #8]
 8001630:	f24a 62a0 	movw	r2, #42656	; 0xa6a0
 8001634:	9201      	str	r2, [sp, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	9200      	str	r2, [sp, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <setBand+0x60>)
 800163e:	2140      	movs	r1, #64	; 0x40
 8001640:	2000      	movs	r0, #0
 8001642:	f000 fdc2 	bl	80021ca <ST7735_WriteString>
	//setResistanceUP(CS_PIN, ticks, false);
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000004 	.word	0x20000004
 8001654:	200002ec 	.word	0x200002ec
 8001658:	080113d4 	.word	0x080113d4
 800165c:	200002d8 	.word	0x200002d8
 8001660:	2000007c 	.word	0x2000007c

08001664 <blink>:

void blink(uint8_t r, uint8_t g, uint8_t b, uint8_t milis)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4604      	mov	r4, r0
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	4603      	mov	r3, r0
 8001678:	71bb      	strb	r3, [r7, #6]
 800167a:	460b      	mov	r3, r1
 800167c:	717b      	strb	r3, [r7, #5]
 800167e:	4613      	mov	r3, r2
 8001680:	713b      	strb	r3, [r7, #4]
    ARGB_FillRGB(r, g, b); // Fill all the strip with Red
 8001682:	797a      	ldrb	r2, [r7, #5]
 8001684:	79b9      	ldrb	r1, [r7, #6]
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fb7b 	bl	8000d84 <ARGB_FillRGB>
    while (!ARGB_Show());
 800168e:	bf00      	nop
 8001690:	f7ff fb9a 	bl	8000dc8 <ARGB_Show>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0fa      	beq.n	8001690 <blink+0x2c>
    osDelay(milis);
 800169a:	793b      	ldrb	r3, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	f00b fafb 	bl	800cc98 <osDelay>
    ARGB_Clear(); // Clear stirp
 80016a2:	f7ff faf5 	bl	8000c90 <ARGB_Clear>
    while (ARGB_Show() != ARGB_OK); // Update - Option 1
 80016a6:	bf00      	nop
 80016a8:	f7ff fb8e 	bl	8000dc8 <ARGB_Show>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d1fa      	bne.n	80016a8 <blink+0x44>
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}

080016bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_DMA_Init+0x3c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <MX_DMA_Init+0x3c>)
 80016cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_DMA_Init+0x3c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2105      	movs	r1, #5
 80016e2:	202f      	movs	r0, #47	; 0x2f
 80016e4:	f001 fc48 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80016e8:	202f      	movs	r0, #47	; 0x2f
 80016ea:	f001 fc71 	bl	8002fd0 <HAL_NVIC_EnableIRQ>

}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <getRunTimeCounterValue+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20001304 	.word	0x20001304

08001724 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	vTaskList(taskListStatus);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <vApplicationIdleHook+0x10>)
 800172a:	f00d fb77 	bl	800ee1c <vTaskList>
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002f0 	.word	0x200002f0

08001738 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &EncoderQueue_attributes);
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <MX_FREERTOS_Init+0x58>)
 800173e:	2102      	movs	r1, #2
 8001740:	2001      	movs	r0, #1
 8001742:	f00b fac4 	bl	800ccce <osMessageQueueNew>
 8001746:	4603      	mov	r3, r0
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <MX_FREERTOS_Init+0x5c>)
 800174a:	6013      	str	r3, [r2, #0]

  /* creation of ButtonQueue */
  ButtonQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &ButtonQueue_attributes);
 800174c:	4a12      	ldr	r2, [pc, #72]	; (8001798 <MX_FREERTOS_Init+0x60>)
 800174e:	2102      	movs	r1, #2
 8001750:	2001      	movs	r0, #1
 8001752:	f00b fabc 	bl	800ccce <osMessageQueueNew>
 8001756:	4603      	mov	r3, r0
 8001758:	4a10      	ldr	r2, [pc, #64]	; (800179c <MX_FREERTOS_Init+0x64>)
 800175a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800175c:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <MX_FREERTOS_Init+0x68>)
 800175e:	2100      	movs	r1, #0
 8001760:	4810      	ldr	r0, [pc, #64]	; (80017a4 <MX_FREERTOS_Init+0x6c>)
 8001762:	f00b fa07 	bl	800cb74 <osThreadNew>
 8001766:	4603      	mov	r3, r0
 8001768:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <MX_FREERTOS_Init+0x70>)
 800176a:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <MX_FREERTOS_Init+0x74>)
 800176e:	2100      	movs	r1, #0
 8001770:	480f      	ldr	r0, [pc, #60]	; (80017b0 <MX_FREERTOS_Init+0x78>)
 8001772:	f00b f9ff 	bl	800cb74 <osThreadNew>
 8001776:	4603      	mov	r3, r0
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <MX_FREERTOS_Init+0x7c>)
 800177a:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 800177c:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <MX_FREERTOS_Init+0x80>)
 800177e:	2100      	movs	r1, #0
 8001780:	480e      	ldr	r0, [pc, #56]	; (80017bc <MX_FREERTOS_Init+0x84>)
 8001782:	f00b f9f7 	bl	800cb74 <osThreadNew>
 8001786:	4603      	mov	r3, r0
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <MX_FREERTOS_Init+0x88>)
 800178a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	08013810 	.word	0x08013810
 8001794:	200012fc 	.word	0x200012fc
 8001798:	08013828 	.word	0x08013828
 800179c:	20001300 	.word	0x20001300
 80017a0:	080137a4 	.word	0x080137a4
 80017a4:	080017c5 	.word	0x080017c5
 80017a8:	200012f0 	.word	0x200012f0
 80017ac:	080137c8 	.word	0x080137c8
 80017b0:	080017d5 	.word	0x080017d5
 80017b4:	200012f4 	.word	0x200012f4
 80017b8:	080137ec 	.word	0x080137ec
 80017bc:	08001891 	.word	0x08001891
 80017c0:	200012f8 	.word	0x200012f8

080017c4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80017cc:	f00e fb96 	bl	800fefc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
  char buff[10];
	for (;;) {
 80017d0:	e7fe      	b.n	80017d0 <StartDefaultTask+0xc>
	...

080017d4 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	osStatus_t taskMessageHandler;
	int32_t counter = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
	int16_t button = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	81fb      	strh	r3, [r7, #14]
	int32_t last_counter = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
	int16_t max_index = 5;
 80017e8:	2305      	movs	r3, #5
 80017ea:	837b      	strh	r3, [r7, #26]
	ST7735_FillScreenFast(ST7735_BLACK);
 80017ec:	2000      	movs	r0, #0
 80017ee:	f000 fe3e 	bl	800246e <ST7735_FillScreenFast>
	displayBand(last_counter);
 80017f2:	69f8      	ldr	r0, [r7, #28]
 80017f4:	f7ff fe6c 	bl	80014d0 <displayBand>
	setBand(last_counter);
 80017f8:	69f8      	ldr	r0, [r7, #28]
 80017fa:	f7ff feff 	bl	80015fc <setBand>
	for (;;) {
		//Encoder Rotate
		taskMessageHandler = osMessageQueueGet(EncoderQueueHandle, &counter, 0,
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <StartDisplayTask+0xb4>)
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	f107 0110 	add.w	r1, r7, #16
 8001806:	2300      	movs	r3, #0
 8001808:	2200      	movs	r2, #0
 800180a:	f00b fb33 	bl	800ce74 <osMessageQueueGet>
 800180e:	6178      	str	r0, [r7, #20]
				0);
		if (taskMessageHandler == osOK)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d12b      	bne.n	800186e <StartDisplayTask+0x9a>
		{
			if (counter == 2) {
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d113      	bne.n	8001844 <StartDisplayTask+0x70>
				if (last_counter != max_index - 1) {
 800181c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001820:	3b01      	subs	r3, #1
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	429a      	cmp	r2, r3
 8001826:	d005      	beq.n	8001834 <StartDisplayTask+0x60>
					last_counter += 1;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	3301      	adds	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
					counter = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	e003      	b.n	800183c <StartDisplayTask+0x68>
				} else {
					last_counter = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
					counter = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
				}
				displayBand(last_counter);
 800183c:	69f8      	ldr	r0, [r7, #28]
 800183e:	f7ff fe47 	bl	80014d0 <displayBand>
 8001842:	e014      	b.n	800186e <StartDisplayTask+0x9a>
				//setBand(last_counter);
			} else if (counter == 1) {
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d111      	bne.n	800186e <StartDisplayTask+0x9a>
				if (last_counter != 0) {
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <StartDisplayTask+0x88>
					last_counter -= 1;
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	3b01      	subs	r3, #1
 8001854:	61fb      	str	r3, [r7, #28]
					counter = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	e005      	b.n	8001868 <StartDisplayTask+0x94>
				} else {
					last_counter = max_index - 1;
 800185c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001860:	3b01      	subs	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
					counter = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
				}
				displayBand(last_counter);
 8001868:	69f8      	ldr	r0, [r7, #28]
 800186a:	f7ff fe31 	bl	80014d0 <displayBand>
			} else {

			}
		}
		//Button click
		osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <StartDisplayTask+0xb8>)
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	f107 010e 	add.w	r1, r7, #14
 8001876:	2300      	movs	r3, #0
 8001878:	2200      	movs	r2, #0
 800187a:	f00b fafb 	bl	800ce74 <osMessageQueueGet>
		if (button) {

		}
		osDelay(1000);
 800187e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001882:	f00b fa09 	bl	800cc98 <osDelay>
		taskMessageHandler = osMessageQueueGet(EncoderQueueHandle, &counter, 0,
 8001886:	e7ba      	b.n	80017fe <StartDisplayTask+0x2a>
 8001888:	200012fc 	.word	0x200012fc
 800188c:	20001300 	.word	0x20001300

08001890 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
	int32_t counter = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	76fb      	strb	r3, [r7, #27]
	uint8_t buttonSend = 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <StartEncoderTask+0xc4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	617b      	str	r3, [r7, #20]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	0fda      	lsrs	r2, r3, #31
 80018b8:	4413      	add	r3, r2
 80018ba:	105b      	asrs	r3, r3, #1
 80018bc:	425b      	negs	r3, r3
 80018be:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80018c2:	337f      	adds	r3, #127	; 0x7f
 80018c4:	617b      	str	r3, [r7, #20]
		if (currCounter != prevCounter) {
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d02a      	beq.n	8001924 <StartEncoderTask+0x94>
			if (currCounter > prevCounter) {
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dd10      	ble.n	80018f8 <StartEncoderTask+0x68>
				counter = 1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 80018da:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <StartEncoderTask+0xc8>)
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	f107 0110 	add.w	r1, r7, #16
 80018e2:	2300      	movs	r3, #0
 80018e4:	2200      	movs	r2, #0
 80018e6:	f00b fa65 	bl	800cdb4 <osMessageQueuePut>
				blink(255,0,50,100);
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	2232      	movs	r2, #50	; 0x32
 80018ee:	2100      	movs	r1, #0
 80018f0:	20ff      	movs	r0, #255	; 0xff
 80018f2:	f7ff feb7 	bl	8001664 <blink>
 80018f6:	e013      	b.n	8001920 <StartEncoderTask+0x90>
			} else if (currCounter < prevCounter) {
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	da0f      	bge.n	8001920 <StartEncoderTask+0x90>
				counter = 2;
 8001900:	2302      	movs	r3, #2
 8001902:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <StartEncoderTask+0xc8>)
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	f107 0110 	add.w	r1, r7, #16
 800190c:	2300      	movs	r3, #0
 800190e:	2200      	movs	r2, #0
 8001910:	f00b fa50 	bl	800cdb4 <osMessageQueuePut>
				blink(255,0,50,100);
 8001914:	2364      	movs	r3, #100	; 0x64
 8001916:	2232      	movs	r2, #50	; 0x32
 8001918:	2100      	movs	r1, #0
 800191a:	20ff      	movs	r0, #255	; 0xff
 800191c:	f7ff fea2 	bl	8001664 <blink>
			} else {

			}
			prevCounter = currCounter;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if (buttonPressed[buttonNumber]) {
 8001924:	7efb      	ldrb	r3, [r7, #27]
 8001926:	4a0d      	ldr	r2, [pc, #52]	; (800195c <StartEncoderTask+0xcc>)
 8001928:	5cd3      	ldrb	r3, [r2, r3]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00b      	beq.n	8001948 <StartEncoderTask+0xb8>
			buttonPressed[buttonNumber] = 0;
 8001930:	7efb      	ldrb	r3, [r7, #27]
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <StartEncoderTask+0xcc>)
 8001934:	2100      	movs	r1, #0
 8001936:	54d1      	strb	r1, [r2, r3]
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <StartEncoderTask+0xd0>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	f107 010f 	add.w	r1, r7, #15
 8001940:	2300      	movs	r3, #0
 8001942:	2200      	movs	r2, #0
 8001944:	f00b fa36 	bl	800cdb4 <osMessageQueuePut>
		}
		osDelay(500);
 8001948:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800194c:	f00b f9a4 	bl	800cc98 <osDelay>
	for (;;) {
 8001950:	e7aa      	b.n	80018a8 <StartEncoderTask+0x18>
 8001952:	bf00      	nop
 8001954:	20001420 	.word	0x20001420
 8001958:	200012fc 	.word	0x200012fc
 800195c:	200013c8 	.word	0x200013c8
 8001960:	20001300 	.word	0x20001300

08001964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b4f      	ldr	r3, [pc, #316]	; (8001abc <MX_GPIO_Init+0x158>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <MX_GPIO_Init+0x158>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <MX_GPIO_Init+0x158>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b48      	ldr	r3, [pc, #288]	; (8001abc <MX_GPIO_Init+0x158>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a47      	ldr	r2, [pc, #284]	; (8001abc <MX_GPIO_Init+0x158>)
 80019a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b45      	ldr	r3, [pc, #276]	; (8001abc <MX_GPIO_Init+0x158>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <MX_GPIO_Init+0x158>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a40      	ldr	r2, [pc, #256]	; (8001abc <MX_GPIO_Init+0x158>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b3e      	ldr	r3, [pc, #248]	; (8001abc <MX_GPIO_Init+0x158>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <MX_GPIO_Init+0x158>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a39      	ldr	r2, [pc, #228]	; (8001abc <MX_GPIO_Init+0x158>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b37      	ldr	r3, [pc, #220]	; (8001abc <MX_GPIO_Init+0x158>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019f0:	4833      	ldr	r0, [pc, #204]	; (8001ac0 <MX_GPIO_Init+0x15c>)
 80019f2:	f002 faab 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLK_GPIO_Port, BLK_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2102      	movs	r1, #2
 80019fa:	4832      	ldr	r0, [pc, #200]	; (8001ac4 <MX_GPIO_Init+0x160>)
 80019fc:	f002 faa6 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	211c      	movs	r1, #28
 8001a04:	482f      	ldr	r0, [pc, #188]	; (8001ac4 <MX_GPIO_Init+0x160>)
 8001a06:	f002 faa1 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DP_INC_Pin|DP_UD_Pin|DP_CS_Pin, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001a10:	482d      	ldr	r0, [pc, #180]	; (8001ac8 <MX_GPIO_Init+0x164>)
 8001a12:	f002 fa9b 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4824      	ldr	r0, [pc, #144]	; (8001ac0 <MX_GPIO_Init+0x15c>)
 8001a30:	f001 fff2 	bl	8003a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001a34:	2301      	movs	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	481e      	ldr	r0, [pc, #120]	; (8001ac4 <MX_GPIO_Init+0x160>)
 8001a4a:	f001 ffe5 	bl	8003a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLK_Pin;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4817      	ldr	r0, [pc, #92]	; (8001ac4 <MX_GPIO_Init+0x160>)
 8001a66:	f001 ffd7 	bl	8003a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8001a6a:	231c      	movs	r3, #28
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4810      	ldr	r0, [pc, #64]	; (8001ac4 <MX_GPIO_Init+0x160>)
 8001a82:	f001 ffc9 	bl	8003a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DP_INC_Pin|DP_UD_Pin|DP_CS_Pin;
 8001a86:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480a      	ldr	r0, [pc, #40]	; (8001ac8 <MX_GPIO_Init+0x164>)
 8001aa0:	f001 ffba 	bl	8003a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2105      	movs	r1, #5
 8001aa8:	2006      	movs	r0, #6
 8001aaa:	f001 fa65 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001aae:	2006      	movs	r0, #6
 8001ab0:	f001 fa8e 	bl	8002fd0 <HAL_NVIC_EnableIRQ>

}
 8001ab4:	bf00      	nop
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400

08001acc <Pixel_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Pixel_Init(void){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
    ARGB_Init();  // Initialization
 8001ad0:	f7ff f866 	bl	8000ba0 <ARGB_Init>
    ARGB_Clear(); // Clear stirp
 8001ad4:	f7ff f8dc 	bl	8000c90 <ARGB_Clear>
    while (ARGB_Show() != ARGB_OK); // Update - Option 1
 8001ad8:	bf00      	nop
 8001ada:	f7ff f975 	bl	8000dc8 <ARGB_Show>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d1fa      	bne.n	8001ada <Pixel_Init+0xe>
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <Display_Init>:

void Display_Init() {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af04      	add	r7, sp, #16
    ST7735_Init();
 8001af2:	f000 fad9 	bl	80020a8 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 fca8 	bl	800244c <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <Display_Init+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	9202      	str	r2, [sp, #8]
 8001b02:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8001b06:	9201      	str	r2, [sp, #4]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	9200      	str	r2, [sp, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <Display_Init+0x5c>)
 8001b10:	2100      	movs	r1, #0
 8001b12:	200f      	movs	r0, #15
 8001b14:	f000 fb59 	bl	80021ca <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <Display_Init+0x60>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	9202      	str	r2, [sp, #8]
 8001b1e:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8001b22:	9201      	str	r2, [sp, #4]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	9200      	str	r2, [sp, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <Display_Init+0x64>)
 8001b2c:	2119      	movs	r1, #25
 8001b2e:	2022      	movs	r0, #34	; 0x22
 8001b30:	f000 fb4b 	bl	80021ca <ST7735_WriteString>
    HAL_Delay(2000);
 8001b34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b38:	f001 f92c 	bl	8002d94 <HAL_Delay>
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000084 	.word	0x20000084
 8001b48:	0801141c 	.word	0x0801141c
 8001b4c:	2000007c 	.word	0x2000007c
 8001b50:	08011428 	.word	0x08011428

08001b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b58:	f001 f8da 	bl	8002d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b5c:	f000 f82e 	bl	8001bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b60:	f7ff ff00 	bl	8001964 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b64:	f000 f93c 	bl	8001de0 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001b68:	f000 fe3e 	bl	80027e8 <MX_TIM3_Init>
  MX_DMA_Init();
 8001b6c:	f7ff fda6 	bl	80016bc <MX_DMA_Init>
  MX_RTC_Init();
 8001b70:	f000 f8b0 	bl	8001cd4 <MX_RTC_Init>
  MX_TIM4_Init();
 8001b74:	f000 fe8c 	bl	8002890 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001b78:	f000 fde6 	bl	8002748 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8001b7c:	f00e f9be 	bl	800fefc <MX_USB_DEVICE_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b80:	213c      	movs	r1, #60	; 0x3c
 8001b82:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <main+0x5c>)
 8001b84:	f006 f832 	bl	8007bec <HAL_TIM_Encoder_Start>
  //HAL_TIM_Base_Init(&htim1);
  HAL_TIM_Base_Start_IT(&htim1);
 8001b88:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <main+0x60>)
 8001b8a:	f005 fd33 	bl	80075f4 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b92:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <main+0x64>)
 8001b94:	f002 fa0c 	bl	8003fb0 <HAL_GPIO_TogglePin>
  //HAL_TIM_Base_Start(&htim11);
  Pixel_Init();
 8001b98:	f7ff ff98 	bl	8001acc <Pixel_Init>
  Display_Init();
 8001b9c:	f7ff ffa6 	bl	8001aec <Display_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001ba0:	f00a ff9e 	bl	800cae0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ba4:	f7ff fdc8 	bl	8001738 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ba8:	f00a ffbe 	bl	800cb28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <main+0x58>
 8001bae:	bf00      	nop
 8001bb0:	20001420 	.word	0x20001420
 8001bb4:	200013d8 	.word	0x200013d8
 8001bb8:	40020800 	.word	0x40020800

08001bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b094      	sub	sp, #80	; 0x50
 8001bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc2:	f107 0320 	add.w	r3, r7, #32
 8001bc6:	2230      	movs	r2, #48	; 0x30
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f00e fec8 	bl	8010960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <SystemClock_Config+0xcc>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <SystemClock_Config+0xcc>)
 8001bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <SystemClock_Config+0xcc>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <SystemClock_Config+0xd0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <SystemClock_Config+0xd0>)
 8001c06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <SystemClock_Config+0xd0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001c18:	2305      	movs	r3, #5
 8001c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c22:	2301      	movs	r3, #1
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c26:	2302      	movs	r3, #2
 8001c28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c30:	2319      	movs	r3, #25
 8001c32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c34:	23c0      	movs	r3, #192	; 0xc0
 8001c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c40:	f107 0320 	add.w	r3, r7, #32
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 fc7b 	bl	8005540 <HAL_RCC_OscConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c50:	f000 f830 	bl	8001cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c54:	230f      	movs	r3, #15
 8001c56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 ff8e 	bl	8005b90 <HAL_RCC_ClockConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c7a:	f000 f81b 	bl	8001cb4 <Error_Handler>
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3750      	adds	r7, #80	; 0x50
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40007000 	.word	0x40007000

08001c90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {

  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d101      	bne.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ca2:	f001 f857 	bl	8002d54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40000c00 	.word	0x40000c00

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
}
 8001cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <Error_Handler+0x8>

08001cbe <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ce8:	2300      	movs	r3, #0
 8001cea:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <MX_RTC_Init+0xac>)
 8001cee:	4a25      	ldr	r2, [pc, #148]	; (8001d84 <MX_RTC_Init+0xb0>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <MX_RTC_Init+0xac>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cf8:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <MX_RTC_Init+0xac>)
 8001cfa:	227f      	movs	r2, #127	; 0x7f
 8001cfc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <MX_RTC_Init+0xac>)
 8001d00:	22ff      	movs	r2, #255	; 0xff
 8001d02:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d04:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <MX_RTC_Init+0xac>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <MX_RTC_Init+0xac>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <MX_RTC_Init+0xac>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d16:	481a      	ldr	r0, [pc, #104]	; (8001d80 <MX_RTC_Init+0xac>)
 8001d18:	f004 fc0a 	bl	8006530 <HAL_RTC_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001d22:	f7ff ffc7 	bl	8001cb4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480f      	ldr	r0, [pc, #60]	; (8001d80 <MX_RTC_Init+0xac>)
 8001d42:	f004 fccd 	bl	80066e0 <HAL_RTC_SetTime>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001d4c:	f7ff ffb2 	bl	8001cb4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001d50:	2305      	movs	r3, #5
 8001d52:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001d54:	2305      	movs	r3, #5
 8001d56:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8001d58:	2307      	movs	r3, #7
 8001d5a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8001d5c:	2316      	movs	r3, #22
 8001d5e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	4619      	mov	r1, r3
 8001d66:	4806      	ldr	r0, [pc, #24]	; (8001d80 <MX_RTC_Init+0xac>)
 8001d68:	f004 fe02 	bl	8006970 <HAL_RTC_SetDate>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001d72:	f7ff ff9f 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20001308 	.word	0x20001308
 8001d84:	40002800 	.word	0x40002800

08001d88 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
 8001da0:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_RTC_MspInit+0x50>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d111      	bne.n	8001dd0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001dac:	2302      	movs	r3, #2
 8001dae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 f9a2 	bl	8006104 <HAL_RCCEx_PeriphCLKConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001dc6:	f7ff ff75 	bl	8001cb4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <HAL_RTC_MspInit+0x54>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40002800 	.word	0x40002800
 8001ddc:	42470e3c 	.word	0x42470e3c

08001de0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001de6:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <MX_SPI1_Init+0x68>)
 8001de8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001dec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001e2c:	220a      	movs	r2, #10
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e30:	4804      	ldr	r0, [pc, #16]	; (8001e44 <MX_SPI1_Init+0x64>)
 8001e32:	f004 ff67 	bl	8006d04 <HAL_SPI_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e3c:	f7ff ff3a 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20001328 	.word	0x20001328
 8001e48:	40013000 	.word	0x40013000

08001e4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <HAL_SPI_MspInit+0x84>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d12b      	bne.n	8001ec6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ea6:	23a0      	movs	r3, #160	; 0xa0
 8001ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001ec2:	f001 fda9 	bl	8003a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	; 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40013000 	.word	0x40013000
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000

08001edc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2110      	movs	r1, #16
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <ST7735_Select+0x14>)
 8001ee6:	f002 f831 	bl	8003f4c <HAL_GPIO_WritePin>
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2110      	movs	r1, #16
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <ST7735_Unselect+0x14>)
 8001efe:	f002 f825 	bl	8003f4c <HAL_GPIO_WritePin>
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40020000 	.word	0x40020000

08001f0c <ST7735_Reset>:

static void ST7735_Reset() {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2108      	movs	r1, #8
 8001f14:	4806      	ldr	r0, [pc, #24]	; (8001f30 <ST7735_Reset+0x24>)
 8001f16:	f002 f819 	bl	8003f4c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001f1a:	2005      	movs	r0, #5
 8001f1c:	f000 ff3a 	bl	8002d94 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001f20:	2201      	movs	r2, #1
 8001f22:	2108      	movs	r1, #8
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <ST7735_Reset+0x24>)
 8001f26:	f002 f811 	bl	8003f4c <HAL_GPIO_WritePin>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40020000 	.word	0x40020000

08001f34 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2104      	movs	r1, #4
 8001f42:	4807      	ldr	r0, [pc, #28]	; (8001f60 <ST7735_WriteCommand+0x2c>)
 8001f44:	f002 f802 	bl	8003f4c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001f48:	1df9      	adds	r1, r7, #7
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4804      	ldr	r0, [pc, #16]	; (8001f64 <ST7735_WriteCommand+0x30>)
 8001f52:	f005 f873 	bl	800703c <HAL_SPI_Transmit>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40020000 	.word	0x40020000
 8001f64:	20001328 	.word	0x20001328

08001f68 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	2104      	movs	r1, #4
 8001f76:	4807      	ldr	r0, [pc, #28]	; (8001f94 <ST7735_WriteData+0x2c>)
 8001f78:	f001 ffe8 	bl	8003f4c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4804      	ldr	r0, [pc, #16]	; (8001f98 <ST7735_WriteData+0x30>)
 8001f88:	f005 f858 	bl	800703c <HAL_SPI_Transmit>
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40020000 	.word	0x40020000
 8001f98:	20001328 	.word	0x20001328

08001f9c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001fae:	e034      	b.n	800201a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001fba:	7afb      	ldrb	r3, [r7, #11]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ffb9 	bl	8001f34 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001fcc:	7abb      	ldrb	r3, [r7, #10]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001fd6:	7abb      	ldrb	r3, [r7, #10]
 8001fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fdc:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001fde:	7abb      	ldrb	r3, [r7, #10]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001fe4:	7abb      	ldrb	r3, [r7, #10]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ffbd 	bl	8001f68 <ST7735_WriteData>
            addr += numArgs;
 8001fee:	7abb      	ldrb	r3, [r7, #10]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001ff6:	89bb      	ldrh	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002006:	89bb      	ldrh	r3, [r7, #12]
 8002008:	2bff      	cmp	r3, #255	; 0xff
 800200a:	d102      	bne.n	8002012 <ST7735_ExecuteCommandList+0x76>
 800200c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002010:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002012:	89bb      	ldrh	r3, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f000 febd 	bl	8002d94 <HAL_Delay>
    while(numCommands--) {
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	73fa      	strb	r2, [r7, #15]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1c5      	bne.n	8001fb0 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800202e:	b590      	push	{r4, r7, lr}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	4604      	mov	r4, r0
 8002036:	4608      	mov	r0, r1
 8002038:	4611      	mov	r1, r2
 800203a:	461a      	mov	r2, r3
 800203c:	4623      	mov	r3, r4
 800203e:	71fb      	strb	r3, [r7, #7]
 8002040:	4603      	mov	r3, r0
 8002042:	71bb      	strb	r3, [r7, #6]
 8002044:	460b      	mov	r3, r1
 8002046:	717b      	strb	r3, [r7, #5]
 8002048:	4613      	mov	r3, r2
 800204a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800204c:	202a      	movs	r0, #42	; 0x2a
 800204e:	f7ff ff71 	bl	8001f34 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002052:	2300      	movs	r3, #0
 8002054:	733b      	strb	r3, [r7, #12]
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	3301      	adds	r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	737b      	strb	r3, [r7, #13]
 800205e:	2300      	movs	r3, #0
 8002060:	73bb      	strb	r3, [r7, #14]
 8002062:	797b      	ldrb	r3, [r7, #5]
 8002064:	3301      	adds	r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	2104      	movs	r1, #4
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff79 	bl	8001f68 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002076:	202b      	movs	r0, #43	; 0x2b
 8002078:	f7ff ff5c 	bl	8001f34 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800207c:	79bb      	ldrb	r3, [r7, #6]
 800207e:	331a      	adds	r3, #26
 8002080:	b2db      	uxtb	r3, r3
 8002082:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002084:	793b      	ldrb	r3, [r7, #4]
 8002086:	331a      	adds	r3, #26
 8002088:	b2db      	uxtb	r3, r3
 800208a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2104      	movs	r1, #4
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff68 	bl	8001f68 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002098:	202c      	movs	r0, #44	; 0x2c
 800209a:	f7ff ff4b 	bl	8001f34 <ST7735_WriteCommand>
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd90      	pop	{r4, r7, pc}
	...

080020a8 <ST7735_Init>:

void ST7735_Init() {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
    ST7735_Select();
 80020ac:	f7ff ff16 	bl	8001edc <ST7735_Select>
    ST7735_Reset();
 80020b0:	f7ff ff2c 	bl	8001f0c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80020b4:	4806      	ldr	r0, [pc, #24]	; (80020d0 <ST7735_Init+0x28>)
 80020b6:	f7ff ff71 	bl	8001f9c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80020ba:	4806      	ldr	r0, [pc, #24]	; (80020d4 <ST7735_Init+0x2c>)
 80020bc:	f7ff ff6e 	bl	8001f9c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80020c0:	4805      	ldr	r0, [pc, #20]	; (80020d8 <ST7735_Init+0x30>)
 80020c2:	f7ff ff6b 	bl	8001f9c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80020c6:	f7ff ff15 	bl	8001ef4 <ST7735_Unselect>
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	08013840 	.word	0x08013840
 80020d4:	0801387c 	.word	0x0801387c
 80020d8:	0801388c 	.word	0x0801388c

080020dc <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80020dc:	b082      	sub	sp, #8
 80020de:	b590      	push	{r4, r7, lr}
 80020e0:	b089      	sub	sp, #36	; 0x24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	637b      	str	r3, [r7, #52]	; 0x34
 80020e6:	4603      	mov	r3, r0
 80020e8:	80fb      	strh	r3, [r7, #6]
 80020ea:	460b      	mov	r3, r1
 80020ec:	80bb      	strh	r3, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	b2d8      	uxtb	r0, r3
 80020f6:	88bb      	ldrh	r3, [r7, #4]
 80020f8:	b2d9      	uxtb	r1, r3
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002102:	4413      	add	r3, r2
 8002104:	b2db      	uxtb	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b2dc      	uxtb	r4, r3
 800210a:	88bb      	ldrh	r3, [r7, #4]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002112:	4413      	add	r3, r2
 8002114:	b2db      	uxtb	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4622      	mov	r2, r4
 800211c:	f7ff ff87 	bl	800202e <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	e043      	b.n	80021ae <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8002126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	3b20      	subs	r3, #32
 800212c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4619      	mov	r1, r3
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	440b      	add	r3, r1
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	e029      	b.n	800219c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00e      	beq.n	8002176 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002158:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b29b      	uxth	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	743b      	strb	r3, [r7, #16]
 8002162:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002164:	b2db      	uxtb	r3, r3
 8002166:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	2102      	movs	r1, #2
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fefa 	bl	8001f68 <ST7735_WriteData>
 8002174:	e00f      	b.n	8002196 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002176:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	b29b      	uxth	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	733b      	strb	r3, [r7, #12]
 8002182:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002186:	b2db      	uxtb	r3, r3
 8002188:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800218a:	f107 030c 	add.w	r3, r7, #12
 800218e:	2102      	movs	r1, #2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fee9 	bl	8001f68 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	3301      	adds	r3, #1
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021a0:	461a      	mov	r2, r3
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d3cf      	bcc.n	8002148 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3301      	adds	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021b2:	461a      	mov	r2, r3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d3b5      	bcc.n	8002126 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	3724      	adds	r7, #36	; 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021c6:	b002      	add	sp, #8
 80021c8:	4770      	bx	lr

080021ca <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80021ca:	b082      	sub	sp, #8
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af04      	add	r7, sp, #16
 80021d2:	603a      	str	r2, [r7, #0]
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
 80021da:	460b      	mov	r3, r1
 80021dc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80021de:	f7ff fe7d 	bl	8001edc <ST7735_Select>

    while(*str) {
 80021e2:	e02d      	b.n	8002240 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	7d3a      	ldrb	r2, [r7, #20]
 80021e8:	4413      	add	r3, r2
 80021ea:	2b9f      	cmp	r3, #159	; 0x9f
 80021ec:	dd13      	ble.n	8002216 <ST7735_WriteString+0x4c>
            x = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80021f2:	7d7b      	ldrb	r3, [r7, #21]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	88bb      	ldrh	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80021fc:	88bb      	ldrh	r3, [r7, #4]
 80021fe:	7d7a      	ldrb	r2, [r7, #21]
 8002200:	4413      	add	r3, r2
 8002202:	2b4f      	cmp	r3, #79	; 0x4f
 8002204:	dc21      	bgt.n	800224a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b20      	cmp	r3, #32
 800220c:	d103      	bne.n	8002216 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	603b      	str	r3, [r7, #0]
                continue;
 8002214:	e014      	b.n	8002240 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	88b9      	ldrh	r1, [r7, #4]
 800221c:	88f8      	ldrh	r0, [r7, #6]
 800221e:	8c3b      	ldrh	r3, [r7, #32]
 8002220:	9302      	str	r3, [sp, #8]
 8002222:	8bbb      	ldrh	r3, [r7, #28]
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f7ff ff56 	bl	80020dc <ST7735_WriteChar>
        x += font.width;
 8002230:	7d3b      	ldrb	r3, [r7, #20]
 8002232:	b29a      	uxth	r2, r3
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	4413      	add	r3, r2
 8002238:	80fb      	strh	r3, [r7, #6]
        str++;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1cd      	bne.n	80021e4 <ST7735_WriteString+0x1a>
 8002248:	e000      	b.n	800224c <ST7735_WriteString+0x82>
                break;
 800224a:	bf00      	nop
    }

    ST7735_Unselect();
 800224c:	f7ff fe52 	bl	8001ef4 <ST7735_Unselect>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800225a:	b002      	add	sp, #8
 800225c:	4770      	bx	lr
	...

08002260 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	4604      	mov	r4, r0
 8002268:	4608      	mov	r0, r1
 800226a:	4611      	mov	r1, r2
 800226c:	461a      	mov	r2, r3
 800226e:	4623      	mov	r3, r4
 8002270:	80fb      	strh	r3, [r7, #6]
 8002272:	4603      	mov	r3, r0
 8002274:	80bb      	strh	r3, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	807b      	strh	r3, [r7, #2]
 800227a:	4613      	mov	r3, r2
 800227c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	2b9f      	cmp	r3, #159	; 0x9f
 8002282:	d857      	bhi.n	8002334 <ST7735_FillRectangle+0xd4>
 8002284:	88bb      	ldrh	r3, [r7, #4]
 8002286:	2b4f      	cmp	r3, #79	; 0x4f
 8002288:	d854      	bhi.n	8002334 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800228a:	88fa      	ldrh	r2, [r7, #6]
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	4413      	add	r3, r2
 8002290:	2ba0      	cmp	r3, #160	; 0xa0
 8002292:	dd03      	ble.n	800229c <ST7735_FillRectangle+0x3c>
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800229a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800229c:	88ba      	ldrh	r2, [r7, #4]
 800229e:	883b      	ldrh	r3, [r7, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	2b50      	cmp	r3, #80	; 0x50
 80022a4:	dd03      	ble.n	80022ae <ST7735_FillRectangle+0x4e>
 80022a6:	88bb      	ldrh	r3, [r7, #4]
 80022a8:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80022ac:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80022ae:	f7ff fe15 	bl	8001edc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	b2d8      	uxtb	r0, r3
 80022b6:	88bb      	ldrh	r3, [r7, #4]
 80022b8:	b2d9      	uxtb	r1, r3
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b2dc      	uxtb	r4, r3
 80022ca:	88bb      	ldrh	r3, [r7, #4]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	883b      	ldrh	r3, [r7, #0]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4622      	mov	r2, r4
 80022dc:	f7ff fea7 	bl	800202e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80022e0:	8c3b      	ldrh	r3, [r7, #32]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	733b      	strb	r3, [r7, #12]
 80022ea:	8c3b      	ldrh	r3, [r7, #32]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80022f0:	2201      	movs	r2, #1
 80022f2:	2104      	movs	r1, #4
 80022f4:	4811      	ldr	r0, [pc, #68]	; (800233c <ST7735_FillRectangle+0xdc>)
 80022f6:	f001 fe29 	bl	8003f4c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80022fa:	883b      	ldrh	r3, [r7, #0]
 80022fc:	80bb      	strh	r3, [r7, #4]
 80022fe:	e013      	b.n	8002328 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8002300:	887b      	ldrh	r3, [r7, #2]
 8002302:	80fb      	strh	r3, [r7, #6]
 8002304:	e00a      	b.n	800231c <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002306:	f107 010c 	add.w	r1, r7, #12
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
 800230e:	2202      	movs	r2, #2
 8002310:	480b      	ldr	r0, [pc, #44]	; (8002340 <ST7735_FillRectangle+0xe0>)
 8002312:	f004 fe93 	bl	800703c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	3b01      	subs	r3, #1
 800231a:	80fb      	strh	r3, [r7, #6]
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f1      	bne.n	8002306 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8002322:	88bb      	ldrh	r3, [r7, #4]
 8002324:	3b01      	subs	r3, #1
 8002326:	80bb      	strh	r3, [r7, #4]
 8002328:	88bb      	ldrh	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1e8      	bne.n	8002300 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800232e:	f7ff fde1 	bl	8001ef4 <ST7735_Unselect>
 8002332:	e000      	b.n	8002336 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002334:	bf00      	nop
}
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	bd90      	pop	{r4, r7, pc}
 800233c:	40020000 	.word	0x40020000
 8002340:	20001328 	.word	0x20001328

08002344 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	4604      	mov	r4, r0
 800234c:	4608      	mov	r0, r1
 800234e:	4611      	mov	r1, r2
 8002350:	461a      	mov	r2, r3
 8002352:	4623      	mov	r3, r4
 8002354:	80fb      	strh	r3, [r7, #6]
 8002356:	4603      	mov	r3, r0
 8002358:	80bb      	strh	r3, [r7, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	807b      	strh	r3, [r7, #2]
 800235e:	4613      	mov	r3, r2
 8002360:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	2b9f      	cmp	r3, #159	; 0x9f
 8002366:	d869      	bhi.n	800243c <ST7735_FillRectangleFast+0xf8>
 8002368:	88bb      	ldrh	r3, [r7, #4]
 800236a:	2b4f      	cmp	r3, #79	; 0x4f
 800236c:	d866      	bhi.n	800243c <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800236e:	88fa      	ldrh	r2, [r7, #6]
 8002370:	887b      	ldrh	r3, [r7, #2]
 8002372:	4413      	add	r3, r2
 8002374:	2ba0      	cmp	r3, #160	; 0xa0
 8002376:	dd03      	ble.n	8002380 <ST7735_FillRectangleFast+0x3c>
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800237e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002380:	88ba      	ldrh	r2, [r7, #4]
 8002382:	883b      	ldrh	r3, [r7, #0]
 8002384:	4413      	add	r3, r2
 8002386:	2b50      	cmp	r3, #80	; 0x50
 8002388:	dd03      	ble.n	8002392 <ST7735_FillRectangleFast+0x4e>
 800238a:	88bb      	ldrh	r3, [r7, #4]
 800238c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8002390:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002392:	f7ff fda3 	bl	8001edc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	b2d8      	uxtb	r0, r3
 800239a:	88bb      	ldrh	r3, [r7, #4]
 800239c:	b2d9      	uxtb	r1, r3
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	887b      	ldrh	r3, [r7, #2]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b2dc      	uxtb	r4, r3
 80023ae:	88bb      	ldrh	r3, [r7, #4]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	883b      	ldrh	r3, [r7, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4622      	mov	r2, r4
 80023c0:	f7ff fe35 	bl	800202e <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80023c4:	8c3b      	ldrh	r3, [r7, #32]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	723b      	strb	r3, [r7, #8]
 80023ce:	8c3b      	ldrh	r3, [r7, #32]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4618      	mov	r0, r3
 80023da:	f00e faa3 	bl	8010924 <malloc>
 80023de:	4603      	mov	r3, r0
 80023e0:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80023e2:	2300      	movs	r3, #0
 80023e4:	80fb      	strh	r3, [r7, #6]
 80023e6:	e008      	b.n	80023fa <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	893a      	ldrh	r2, [r7, #8]
 80023f2:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	3301      	adds	r3, #1
 80023f8:	80fb      	strh	r3, [r7, #6]
 80023fa:	88fa      	ldrh	r2, [r7, #6]
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d3f2      	bcc.n	80023e8 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002402:	2201      	movs	r2, #1
 8002404:	2104      	movs	r1, #4
 8002406:	480f      	ldr	r0, [pc, #60]	; (8002444 <ST7735_FillRectangleFast+0x100>)
 8002408:	f001 fda0 	bl	8003f4c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 800240c:	883b      	ldrh	r3, [r7, #0]
 800240e:	80bb      	strh	r3, [r7, #4]
 8002410:	e00b      	b.n	800242a <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	f04f 33ff 	mov.w	r3, #4294967295
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	480a      	ldr	r0, [pc, #40]	; (8002448 <ST7735_FillRectangleFast+0x104>)
 8002420:	f004 fe0c 	bl	800703c <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8002424:	88bb      	ldrh	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	80bb      	strh	r3, [r7, #4]
 800242a:	88bb      	ldrh	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <ST7735_FillRectangleFast+0xce>

    free(line);
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f00e fa7f 	bl	8010934 <free>
    ST7735_Unselect();
 8002436:	f7ff fd5d 	bl	8001ef4 <ST7735_Unselect>
 800243a:	e000      	b.n	800243e <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800243c:	bf00      	nop
}
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bd90      	pop	{r4, r7, pc}
 8002444:	40020000 	.word	0x40020000
 8002448:	20001328 	.word	0x20001328

0800244c <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af02      	add	r7, sp, #8
 8002452:	4603      	mov	r3, r0
 8002454:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2350      	movs	r3, #80	; 0x50
 800245c:	22a0      	movs	r2, #160	; 0xa0
 800245e:	2100      	movs	r1, #0
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff fefd 	bl	8002260 <ST7735_FillRectangle>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af02      	add	r7, sp, #8
 8002474:	4603      	mov	r3, r0
 8002476:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2350      	movs	r3, #80	; 0x50
 800247e:	22a0      	movs	r2, #160	; 0xa0
 8002480:	2100      	movs	r1, #0
 8002482:	2000      	movs	r0, #0
 8002484:	f7ff ff5e 	bl	8002344 <ST7735_FillRectangleFast>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_MspInit+0x54>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <HAL_MspInit+0x54>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_MspInit+0x54>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_MspInit+0x54>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <HAL_MspInit+0x54>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_MspInit+0x54>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	210f      	movs	r1, #15
 80024d2:	f06f 0001 	mvn.w	r0, #1
 80024d6:	f000 fd4f 	bl	8002f78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800

080024e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08c      	sub	sp, #48	; 0x30
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80024f8:	2200      	movs	r2, #0
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	2032      	movs	r0, #50	; 0x32
 80024fe:	f000 fd3b 	bl	8002f78 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002502:	2032      	movs	r0, #50	; 0x32
 8002504:	f000 fd64 	bl	8002fd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_InitTick+0xa0>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_InitTick+0xa0>)
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	6413      	str	r3, [r2, #64]	; 0x40
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_InitTick+0xa0>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002524:	f107 0210 	add.w	r2, r7, #16
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fdb6 	bl	80060a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002534:	f003 fd8c 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 8002538:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	4a13      	ldr	r2, [pc, #76]	; (800258c <HAL_InitTick+0xa4>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0c9b      	lsrs	r3, r3, #18
 8002544:	3b01      	subs	r3, #1
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_InitTick+0xa8>)
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <HAL_InitTick+0xac>)
 800254c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_InitTick+0xa8>)
 8002550:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002554:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002556:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <HAL_InitTick+0xa8>)
 8002558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <HAL_InitTick+0xa8>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_InitTick+0xa8>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002568:	4809      	ldr	r0, [pc, #36]	; (8002590 <HAL_InitTick+0xa8>)
 800256a:	f004 ff7d 	bl	8007468 <HAL_TIM_Base_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d104      	bne.n	800257e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002574:	4806      	ldr	r0, [pc, #24]	; (8002590 <HAL_InitTick+0xa8>)
 8002576:	f005 f83d 	bl	80075f4 <HAL_TIM_Base_Start_IT>
 800257a:	4603      	mov	r3, r0
 800257c:	e000      	b.n	8002580 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
}
 8002580:	4618      	mov	r0, r3
 8002582:	3730      	adds	r7, #48	; 0x30
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	431bde83 	.word	0x431bde83
 8002590:	20001380 	.word	0x20001380
 8002594:	40000c00 	.word	0x40000c00

08002598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800259c:	e7fe      	b.n	800259c <NMI_Handler+0x4>

0800259e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a2:	e7fe      	b.n	80025a2 <HardFault_Handler+0x4>

080025a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <MemManage_Handler+0x4>

080025aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ae:	e7fe      	b.n	80025ae <BusFault_Handler+0x4>

080025b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <UsageFault_Handler+0x4>

080025b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80025c8:	2001      	movs	r0, #1
 80025ca:	f001 fd19 	bl	8004000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <TIM1_UP_TIM10_IRQHandler+0x18>)
 80025da:	f005 fbc5 	bl	8007d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	4a02      	ldr	r2, [pc, #8]	; (80025f0 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80025e6:	6013      	str	r3, [r2, #0]
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200013d8 	.word	0x200013d8
 80025f0:	20001304 	.word	0x20001304

080025f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025f8:	4808      	ldr	r0, [pc, #32]	; (800261c <TIM3_IRQHandler+0x28>)
 80025fa:	f005 fbb5 	bl	8007d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <TIM3_IRQHandler+0x2c>)
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <TIM3_IRQHandler+0x2c>)
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	4a04      	ldr	r2, [pc, #16]	; (8002620 <TIM3_IRQHandler+0x2c>)
 8002610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002614:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20001420 	.word	0x20001420
 8002620:	40000400 	.word	0x40000400

08002624 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <DMA1_Stream7_IRQHandler+0x10>)
 800262a:	f000 ff8b 	bl	8003544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200014b0 	.word	0x200014b0

08002638 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <TIM5_IRQHandler+0x10>)
 800263e:	f005 fb93 	bl	8007d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20001380 	.word	0x20001380

0800264c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <OTG_FS_IRQHandler+0x10>)
 8002652:	f001 fe48 	bl	80042e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2001c820 	.word	0x2001c820

08002660 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 800266a:	23ff      	movs	r3, #255	; 0xff
 800266c:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 8002678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db11      	blt.n	80026a4 <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8002680:	f000 fb7c 	bl	8002d7c <HAL_GetTick>
 8002684:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x50>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b63      	cmp	r3, #99	; 0x63
 8002690:	d90a      	bls.n	80026a8 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 8002692:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x50>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 8002698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269c:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x54>)
 800269e:	2101      	movs	r1, #1
 80026a0:	54d1      	strb	r1, [r2, r3]
 80026a2:	e002      	b.n	80026aa <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 80026a4:	bf00      	nop
 80026a6:	e000      	b.n	80026aa <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 80026a8:	bf00      	nop
}
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200013d0 	.word	0x200013d0
 80026b4:	200013c8 	.word	0x200013c8

080026b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <_sbrk+0x5c>)
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <_sbrk+0x60>)
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <_sbrk+0x64>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <_sbrk+0x68>)
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d207      	bcs.n	80026f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e8:	f00e f8f2 	bl	80108d0 <__errno>
 80026ec:	4603      	mov	r3, r0
 80026ee:	220c      	movs	r2, #12
 80026f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e009      	b.n	800270c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <_sbrk+0x64>)
 8002708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20020000 	.word	0x20020000
 8002718:	00000800 	.word	0x00000800
 800271c:	200013d4 	.word	0x200013d4
 8002720:	2001cf58 	.word	0x2001cf58

08002724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <SystemInit+0x20>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <SystemInit+0x20>)
 8002730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800274e:	f107 0308 	add.w	r3, r7, #8
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800275c:	463b      	mov	r3, r7
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <MX_TIM1_Init+0x98>)
 8002766:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <MX_TIM1_Init+0x9c>)
 8002768:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <MX_TIM1_Init+0x98>)
 800276c:	222f      	movs	r2, #47	; 0x2f
 800276e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <MX_TIM1_Init+0x98>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <MX_TIM1_Init+0x98>)
 8002778:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800277c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <MX_TIM1_Init+0x98>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002784:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <MX_TIM1_Init+0x98>)
 8002786:	2200      	movs	r2, #0
 8002788:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <MX_TIM1_Init+0x98>)
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002790:	4813      	ldr	r0, [pc, #76]	; (80027e0 <MX_TIM1_Init+0x98>)
 8002792:	f004 fe69 	bl	8007468 <HAL_TIM_Base_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800279c:	f7ff fa8a 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027a6:	f107 0308 	add.w	r3, r7, #8
 80027aa:	4619      	mov	r1, r3
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <MX_TIM1_Init+0x98>)
 80027ae:	f005 fd89 	bl	80082c4 <HAL_TIM_ConfigClockSource>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80027b8:	f7ff fa7c 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027bc:	2320      	movs	r3, #32
 80027be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027c4:	463b      	mov	r3, r7
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <MX_TIM1_Init+0x98>)
 80027ca:	f006 fca3 	bl	8009114 <HAL_TIMEx_MasterConfigSynchronization>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80027d4:	f7ff fa6e 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	200013d8 	.word	0x200013d8
 80027e4:	40010000 	.word	0x40010000

080027e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	; 0x30
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027ee:	f107 030c 	add.w	r3, r7, #12
 80027f2:	2224      	movs	r2, #36	; 0x24
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f00e f8b2 	bl	8010960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002804:	4b20      	ldr	r3, [pc, #128]	; (8002888 <MX_TIM3_Init+0xa0>)
 8002806:	4a21      	ldr	r2, [pc, #132]	; (800288c <MX_TIM3_Init+0xa4>)
 8002808:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800280a:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <MX_TIM3_Init+0xa0>)
 800280c:	2200      	movs	r2, #0
 800280e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <MX_TIM3_Init+0xa0>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <MX_TIM3_Init+0xa0>)
 8002818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800281c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <MX_TIM3_Init+0xa0>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <MX_TIM3_Init+0xa0>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800282a:	2301      	movs	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002832:	2301      	movs	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 800283a:	2306      	movs	r3, #6
 800283c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002842:	2301      	movs	r3, #1
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002846:	2300      	movs	r3, #0
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 800284a:	2306      	movs	r3, #6
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800284e:	f107 030c 	add.w	r3, r7, #12
 8002852:	4619      	mov	r1, r3
 8002854:	480c      	ldr	r0, [pc, #48]	; (8002888 <MX_TIM3_Init+0xa0>)
 8002856:	f005 f82f 	bl	80078b8 <HAL_TIM_Encoder_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002860:	f7ff fa28 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002864:	2300      	movs	r3, #0
 8002866:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	4619      	mov	r1, r3
 8002870:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_TIM3_Init+0xa0>)
 8002872:	f006 fc4f 	bl	8009114 <HAL_TIMEx_MasterConfigSynchronization>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800287c:	f7ff fa1a 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002880:	bf00      	nop
 8002882:	3730      	adds	r7, #48	; 0x30
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20001420 	.word	0x20001420
 800288c:	40000400 	.word	0x40000400

08002890 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08e      	sub	sp, #56	; 0x38
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a4:	f107 0320 	add.w	r3, r7, #32
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
 80028bc:	615a      	str	r2, [r3, #20]
 80028be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028c0:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <MX_TIM4_Init+0xe4>)
 80028c2:	4a2d      	ldr	r2, [pc, #180]	; (8002978 <MX_TIM4_Init+0xe8>)
 80028c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80028c6:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <MX_TIM4_Init+0xe4>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028cc:	4b29      	ldr	r3, [pc, #164]	; (8002974 <MX_TIM4_Init+0xe4>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 80028d2:	4b28      	ldr	r3, [pc, #160]	; (8002974 <MX_TIM4_Init+0xe4>)
 80028d4:	223c      	movs	r2, #60	; 0x3c
 80028d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80028d8:	4b26      	ldr	r3, [pc, #152]	; (8002974 <MX_TIM4_Init+0xe4>)
 80028da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e0:	4b24      	ldr	r3, [pc, #144]	; (8002974 <MX_TIM4_Init+0xe4>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028e6:	4823      	ldr	r0, [pc, #140]	; (8002974 <MX_TIM4_Init+0xe4>)
 80028e8:	f004 fdbe 	bl	8007468 <HAL_TIM_Base_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80028f2:	f7ff f9df 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002900:	4619      	mov	r1, r3
 8002902:	481c      	ldr	r0, [pc, #112]	; (8002974 <MX_TIM4_Init+0xe4>)
 8002904:	f005 fcde 	bl	80082c4 <HAL_TIM_ConfigClockSource>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800290e:	f7ff f9d1 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002912:	4818      	ldr	r0, [pc, #96]	; (8002974 <MX_TIM4_Init+0xe4>)
 8002914:	f004 ff00 	bl	8007718 <HAL_TIM_PWM_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800291e:	f7ff f9c9 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800292a:	f107 0320 	add.w	r3, r7, #32
 800292e:	4619      	mov	r1, r3
 8002930:	4810      	ldr	r0, [pc, #64]	; (8002974 <MX_TIM4_Init+0xe4>)
 8002932:	f006 fbef 	bl	8009114 <HAL_TIMEx_MasterConfigSynchronization>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800293c:	f7ff f9ba 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002940:	2360      	movs	r3, #96	; 0x60
 8002942:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	2208      	movs	r2, #8
 8002954:	4619      	mov	r1, r3
 8002956:	4807      	ldr	r0, [pc, #28]	; (8002974 <MX_TIM4_Init+0xe4>)
 8002958:	f005 fb0e 	bl	8007f78 <HAL_TIM_PWM_ConfigChannel>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002962:	f7ff f9a7 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002966:	4803      	ldr	r0, [pc, #12]	; (8002974 <MX_TIM4_Init+0xe4>)
 8002968:	f000 f8ec 	bl	8002b44 <HAL_TIM_MspPostInit>

}
 800296c:	bf00      	nop
 800296e:	3738      	adds	r7, #56	; 0x38
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20001468 	.word	0x20001468
 8002978:	40000800 	.word	0x40000800

0800297c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a31      	ldr	r2, [pc, #196]	; (8002a50 <HAL_TIM_Base_MspInit+0xd4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d116      	bne.n	80029bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <HAL_TIM_Base_MspInit+0xd8>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	4a2f      	ldr	r2, [pc, #188]	; (8002a54 <HAL_TIM_Base_MspInit+0xd8>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6453      	str	r3, [r2, #68]	; 0x44
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_TIM_Base_MspInit+0xd8>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2105      	movs	r1, #5
 80029ae:	2019      	movs	r0, #25
 80029b0:	f000 fae2 	bl	8002f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029b4:	2019      	movs	r0, #25
 80029b6:	f000 fb0b 	bl	8002fd0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80029ba:	e044      	b.n	8002a46 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM4)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <HAL_TIM_Base_MspInit+0xdc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d13f      	bne.n	8002a46 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_TIM_Base_MspInit+0xd8>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <HAL_TIM_Base_MspInit+0xd8>)
 80029d0:	f043 0304 	orr.w	r3, r3, #4
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_TIM_Base_MspInit+0xd8>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 80029e4:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <HAL_TIM_Base_MspInit+0xe4>)
 80029e6:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 80029ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029ee:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029f0:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 80029f2:	2240      	movs	r2, #64	; 0x40
 80029f4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f6:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 80029fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a02:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 8002a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a0a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 8002a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a12:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 8002a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a1a:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 8002a1e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a22:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002a2a:	480c      	ldr	r0, [pc, #48]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 8002a2c:	f000 fae8 	bl	8003000 <HAL_DMA_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 8002a36:	f7ff f93d 	bl	8001cb4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a40:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <HAL_TIM_Base_MspInit+0xe0>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40000800 	.word	0x40000800
 8002a5c:	200014b0 	.word	0x200014b0
 8002a60:	400260b8 	.word	0x400260b8

08002a64 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2c      	ldr	r2, [pc, #176]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d151      	bne.n	8002b2a <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a23      	ldr	r2, [pc, #140]	; (8002b38 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8002ada:	2340      	movs	r3, #64	; 0x40
 8002adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002aea:	2302      	movs	r3, #2
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	4619      	mov	r1, r3
 8002af4:	4811      	ldr	r0, [pc, #68]	; (8002b3c <HAL_TIM_Encoder_MspInit+0xd8>)
 8002af6:	f000 ff8f 	bl	8003a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8002afa:	2320      	movs	r3, #32
 8002afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b02:	2301      	movs	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b06:	2303      	movs	r3, #3
 8002b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	4619      	mov	r1, r3
 8002b14:	480a      	ldr	r0, [pc, #40]	; (8002b40 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002b16:	f000 ff7f 	bl	8003a18 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2105      	movs	r1, #5
 8002b1e:	201d      	movs	r0, #29
 8002b20:	f000 fa2a 	bl	8002f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b24:	201d      	movs	r0, #29
 8002b26:	f000 fa53 	bl	8002fd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	3728      	adds	r7, #40	; 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020000 	.word	0x40020000
 8002b40:	40020400 	.word	0x40020400

08002b44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 030c 	add.w	r3, r7, #12
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a12      	ldr	r2, [pc, #72]	; (8002bac <HAL_TIM_MspPostInit+0x68>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d11e      	bne.n	8002ba4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_TIM_MspPostInit+0x6c>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <HAL_TIM_MspPostInit+0x6c>)
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_TIM_MspPostInit+0x6c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b90:	2303      	movs	r3, #3
 8002b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b94:	2302      	movs	r3, #2
 8002b96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b98:	f107 030c 	add.w	r3, r7, #12
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <HAL_TIM_MspPostInit+0x70>)
 8002ba0:	f000 ff3a 	bl	8003a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ba4:	bf00      	nop
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40000800 	.word	0x40000800
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020400 	.word	0x40020400

08002bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bbc:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bbe:	490e      	ldr	r1, [pc, #56]	; (8002bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc4:	e002      	b.n	8002bcc <LoopCopyDataInit>

08002bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bca:	3304      	adds	r3, #4

08002bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd0:	d3f9      	bcc.n	8002bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bd4:	4c0b      	ldr	r4, [pc, #44]	; (8002c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd8:	e001      	b.n	8002bde <LoopFillZerobss>

08002bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bdc:	3204      	adds	r2, #4

08002bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be0:	d3fb      	bcc.n	8002bda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002be2:	f7ff fd9f 	bl	8002724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002be6:	f00d fe79 	bl	80108dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bea:	f7fe ffb3 	bl	8001b54 <main>
  bx  lr    
 8002bee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002bfc:	0801397c 	.word	0x0801397c
  ldr r2, =_sbss
 8002c00:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002c04:	2001cf58 	.word	0x2001cf58

08002c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <ADC_IRQHandler>

08002c0a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d104      	bne.n	8002c22 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c18:	b672      	cpsid	i
}
 8002c1a:	bf00      	nop
 8002c1c:	f7ff f84a 	bl	8001cb4 <Error_Handler>
 8002c20:	e7fe      	b.n	8002c20 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7a1b      	ldrb	r3, [r3, #8]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d904      	bls.n	8002c34 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c2a:	b672      	cpsid	i
}
 8002c2c:	bf00      	nop
 8002c2e:	f7ff f841 	bl	8001cb4 <Error_Handler>
 8002c32:	e7fe      	b.n	8002c32 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7a1b      	ldrb	r3, [r3, #8]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	b2d1      	uxtb	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	7211      	strb	r1, [r2, #8]
 8002c40:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c42:	f3ef 8211 	mrs	r2, BASEPRI
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	60fa      	str	r2, [r7, #12]
 8002c58:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c78:	b672      	cpsid	i
}
 8002c7a:	bf00      	nop
 8002c7c:	f7ff f81a 	bl	8001cb4 <Error_Handler>
 8002c80:	e7fe      	b.n	8002c80 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7a1b      	ldrb	r3, [r3, #8]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7a1b      	ldrb	r3, [r3, #8]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d904      	bls.n	8002ca0 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c96:	b672      	cpsid	i
}
 8002c98:	bf00      	nop
 8002c9a:	f7ff f80b 	bl	8001cb4 <Error_Handler>
 8002c9e:	e7fe      	b.n	8002c9e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7a1b      	ldrb	r3, [r3, #8]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cac:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cb4:	bf00      	nop
}
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ccc:	b672      	cpsid	i
}
 8002cce:	bf00      	nop
 8002cd0:	f7fe fff0 	bl	8001cb4 <Error_Handler>
 8002cd4:	e7fe      	b.n	8002cd4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff96 	bl	8002c0a <stm32_lock_acquire>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d104      	bne.n	8002cfe <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf4:	b672      	cpsid	i
}
 8002cf6:	bf00      	nop
 8002cf8:	f7fe ffdc 	bl	8001cb4 <Error_Handler>
 8002cfc:	e7fe      	b.n	8002cfc <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ffb2 	bl	8002c6a <stm32_lock_release>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <HAL_Init+0x40>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <HAL_Init+0x40>)
 8002d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_Init+0x40>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <HAL_Init+0x40>)
 8002d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_Init+0x40>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <HAL_Init+0x40>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d38:	2003      	movs	r0, #3
 8002d3a:	f000 f8fd 	bl	8002f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d3e:	200f      	movs	r0, #15
 8002d40:	f7ff fbd2 	bl	80024e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d44:	f7ff fba4 	bl	8002490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023c00 	.word	0x40023c00

08002d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_IncTick+0x20>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_IncTick+0x24>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <HAL_IncTick+0x24>)
 8002d66:	6013      	str	r3, [r2, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000094 	.word	0x20000094
 8002d78:	2000151c 	.word	0x2000151c

08002d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_GetTick+0x14>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	2000151c 	.word	0x2000151c

08002d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d9c:	f7ff ffee 	bl	8002d7c <HAL_GetTick>
 8002da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d005      	beq.n	8002dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_Delay+0x44>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4413      	add	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dba:	bf00      	nop
 8002dbc:	f7ff ffde 	bl	8002d7c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d8f7      	bhi.n	8002dbc <HAL_Delay+0x28>
  {
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000094 	.word	0x20000094

08002ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0e:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	60d3      	str	r3, [r2, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <__NVIC_GetPriorityGrouping+0x18>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f003 0307 	and.w	r3, r3, #7
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db0b      	blt.n	8002e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	f003 021f 	and.w	r2, r3, #31
 8002e58:	4907      	ldr	r1, [pc, #28]	; (8002e78 <__NVIC_EnableIRQ+0x38>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2001      	movs	r0, #1
 8002e62:	fa00 f202 	lsl.w	r2, r0, r2
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000e100 	.word	0xe000e100

08002e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db0a      	blt.n	8002ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	490c      	ldr	r1, [pc, #48]	; (8002ec8 <__NVIC_SetPriority+0x4c>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	0112      	lsls	r2, r2, #4
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea4:	e00a      	b.n	8002ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4908      	ldr	r1, [pc, #32]	; (8002ecc <__NVIC_SetPriority+0x50>)
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	3b04      	subs	r3, #4
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	440b      	add	r3, r1
 8002eba:	761a      	strb	r2, [r3, #24]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e100 	.word	0xe000e100
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f1c3 0307 	rsb	r3, r3, #7
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	bf28      	it	cs
 8002eee:	2304      	movcs	r3, #4
 8002ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d902      	bls.n	8002f00 <NVIC_EncodePriority+0x30>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3b03      	subs	r3, #3
 8002efe:	e000      	b.n	8002f02 <NVIC_EncodePriority+0x32>
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f04:	f04f 32ff 	mov.w	r2, #4294967295
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	401a      	ands	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f18:	f04f 31ff 	mov.w	r1, #4294967295
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43d9      	mvns	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	4313      	orrs	r3, r2
         );
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3724      	adds	r7, #36	; 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b07      	cmp	r3, #7
 8002f44:	d00f      	beq.n	8002f66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b06      	cmp	r3, #6
 8002f4a:	d00c      	beq.n	8002f66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d009      	beq.n	8002f66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d006      	beq.n	8002f66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d003      	beq.n	8002f66 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f5e:	2190      	movs	r1, #144	; 0x90
 8002f60:	4804      	ldr	r0, [pc, #16]	; (8002f74 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002f62:	f7fe feac 	bl	8001cbe <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff38 	bl	8002ddc <__NVIC_SetPriorityGrouping>
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	08011434 	.word	0x08011434

08002f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b0f      	cmp	r3, #15
 8002f8e:	d903      	bls.n	8002f98 <HAL_NVIC_SetPriority+0x20>
 8002f90:	21a8      	movs	r1, #168	; 0xa8
 8002f92:	480e      	ldr	r0, [pc, #56]	; (8002fcc <HAL_NVIC_SetPriority+0x54>)
 8002f94:	f7fe fe93 	bl	8001cbe <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b0f      	cmp	r3, #15
 8002f9c:	d903      	bls.n	8002fa6 <HAL_NVIC_SetPriority+0x2e>
 8002f9e:	21a9      	movs	r1, #169	; 0xa9
 8002fa0:	480a      	ldr	r0, [pc, #40]	; (8002fcc <HAL_NVIC_SetPriority+0x54>)
 8002fa2:	f7fe fe8c 	bl	8001cbe <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa6:	f7ff ff3d 	bl	8002e24 <__NVIC_GetPriorityGrouping>
 8002faa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	6978      	ldr	r0, [r7, #20]
 8002fb2:	f7ff ff8d 	bl	8002ed0 <NVIC_EncodePriority>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff ff5c 	bl	8002e7c <__NVIC_SetPriority>
}
 8002fc4:	bf00      	nop
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	08011434 	.word	0x08011434

08002fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	da03      	bge.n	8002fea <HAL_NVIC_EnableIRQ+0x1a>
 8002fe2:	21bc      	movs	r1, #188	; 0xbc
 8002fe4:	4805      	ldr	r0, [pc, #20]	; (8002ffc <HAL_NVIC_EnableIRQ+0x2c>)
 8002fe6:	f7fe fe6a 	bl	8001cbe <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ff26 	bl	8002e40 <__NVIC_EnableIRQ>
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	08011434 	.word	0x08011434

08003000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff feb6 	bl	8002d7c <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e203      	b.n	8003424 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a8b      	ldr	r2, [pc, #556]	; (8003250 <HAL_DMA_Init+0x250>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d04e      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a8a      	ldr	r2, [pc, #552]	; (8003254 <HAL_DMA_Init+0x254>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d049      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a88      	ldr	r2, [pc, #544]	; (8003258 <HAL_DMA_Init+0x258>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d044      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a87      	ldr	r2, [pc, #540]	; (800325c <HAL_DMA_Init+0x25c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d03f      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a85      	ldr	r2, [pc, #532]	; (8003260 <HAL_DMA_Init+0x260>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d03a      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a84      	ldr	r2, [pc, #528]	; (8003264 <HAL_DMA_Init+0x264>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d035      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a82      	ldr	r2, [pc, #520]	; (8003268 <HAL_DMA_Init+0x268>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d030      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a81      	ldr	r2, [pc, #516]	; (800326c <HAL_DMA_Init+0x26c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d02b      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a7f      	ldr	r2, [pc, #508]	; (8003270 <HAL_DMA_Init+0x270>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d026      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a7e      	ldr	r2, [pc, #504]	; (8003274 <HAL_DMA_Init+0x274>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d021      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a7c      	ldr	r2, [pc, #496]	; (8003278 <HAL_DMA_Init+0x278>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d01c      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7b      	ldr	r2, [pc, #492]	; (800327c <HAL_DMA_Init+0x27c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d017      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a79      	ldr	r2, [pc, #484]	; (8003280 <HAL_DMA_Init+0x280>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d012      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a78      	ldr	r2, [pc, #480]	; (8003284 <HAL_DMA_Init+0x284>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00d      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a76      	ldr	r2, [pc, #472]	; (8003288 <HAL_DMA_Init+0x288>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d008      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a75      	ldr	r2, [pc, #468]	; (800328c <HAL_DMA_Init+0x28c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d003      	beq.n	80030c4 <HAL_DMA_Init+0xc4>
 80030bc:	21b7      	movs	r1, #183	; 0xb7
 80030be:	4874      	ldr	r0, [pc, #464]	; (8003290 <HAL_DMA_Init+0x290>)
 80030c0:	f7fe fdfd 	bl	8001cbe <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d026      	beq.n	800311a <HAL_DMA_Init+0x11a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030d4:	d021      	beq.n	800311a <HAL_DMA_Init+0x11a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030de:	d01c      	beq.n	800311a <HAL_DMA_Init+0x11a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80030e8:	d017      	beq.n	800311a <HAL_DMA_Init+0x11a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030f2:	d012      	beq.n	800311a <HAL_DMA_Init+0x11a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80030fc:	d00d      	beq.n	800311a <HAL_DMA_Init+0x11a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003106:	d008      	beq.n	800311a <HAL_DMA_Init+0x11a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003110:	d003      	beq.n	800311a <HAL_DMA_Init+0x11a>
 8003112:	21b8      	movs	r1, #184	; 0xb8
 8003114:	485e      	ldr	r0, [pc, #376]	; (8003290 <HAL_DMA_Init+0x290>)
 8003116:	f7fe fdd2 	bl	8001cbe <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_DMA_Init+0x13a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d007      	beq.n	800313a <HAL_DMA_Init+0x13a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b80      	cmp	r3, #128	; 0x80
 8003130:	d003      	beq.n	800313a <HAL_DMA_Init+0x13a>
 8003132:	21b9      	movs	r1, #185	; 0xb9
 8003134:	4856      	ldr	r0, [pc, #344]	; (8003290 <HAL_DMA_Init+0x290>)
 8003136:	f7fe fdc2 	bl	8001cbe <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003142:	d007      	beq.n	8003154 <HAL_DMA_Init+0x154>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_DMA_Init+0x154>
 800314c:	21ba      	movs	r1, #186	; 0xba
 800314e:	4850      	ldr	r0, [pc, #320]	; (8003290 <HAL_DMA_Init+0x290>)
 8003150:	f7fe fdb5 	bl	8001cbe <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315c:	d007      	beq.n	800316e <HAL_DMA_Init+0x16e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_DMA_Init+0x16e>
 8003166:	21bb      	movs	r1, #187	; 0xbb
 8003168:	4849      	ldr	r0, [pc, #292]	; (8003290 <HAL_DMA_Init+0x290>)
 800316a:	f7fe fda8 	bl	8001cbe <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00d      	beq.n	8003192 <HAL_DMA_Init+0x192>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317e:	d008      	beq.n	8003192 <HAL_DMA_Init+0x192>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003188:	d003      	beq.n	8003192 <HAL_DMA_Init+0x192>
 800318a:	21bc      	movs	r1, #188	; 0xbc
 800318c:	4840      	ldr	r0, [pc, #256]	; (8003290 <HAL_DMA_Init+0x290>)
 800318e:	f7fe fd96 	bl	8001cbe <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <HAL_DMA_Init+0x1b6>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a2:	d008      	beq.n	80031b6 <HAL_DMA_Init+0x1b6>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ac:	d003      	beq.n	80031b6 <HAL_DMA_Init+0x1b6>
 80031ae:	21bd      	movs	r1, #189	; 0xbd
 80031b0:	4837      	ldr	r0, [pc, #220]	; (8003290 <HAL_DMA_Init+0x290>)
 80031b2:	f7fe fd84 	bl	8001cbe <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00c      	beq.n	80031d8 <HAL_DMA_Init+0x1d8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c6:	d007      	beq.n	80031d8 <HAL_DMA_Init+0x1d8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d003      	beq.n	80031d8 <HAL_DMA_Init+0x1d8>
 80031d0:	21be      	movs	r1, #190	; 0xbe
 80031d2:	482f      	ldr	r0, [pc, #188]	; (8003290 <HAL_DMA_Init+0x290>)
 80031d4:	f7fe fd73 	bl	8001cbe <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d012      	beq.n	8003206 <HAL_DMA_Init+0x206>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d00d      	beq.n	8003206 <HAL_DMA_Init+0x206>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f2:	d008      	beq.n	8003206 <HAL_DMA_Init+0x206>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031fc:	d003      	beq.n	8003206 <HAL_DMA_Init+0x206>
 80031fe:	21bf      	movs	r1, #191	; 0xbf
 8003200:	4823      	ldr	r0, [pc, #140]	; (8003290 <HAL_DMA_Init+0x290>)
 8003202:	f7fe fd5c 	bl	8001cbe <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <HAL_DMA_Init+0x21e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b04      	cmp	r3, #4
 8003214:	d003      	beq.n	800321e <HAL_DMA_Init+0x21e>
 8003216:	21c0      	movs	r1, #192	; 0xc0
 8003218:	481d      	ldr	r0, [pc, #116]	; (8003290 <HAL_DMA_Init+0x290>)
 800321a:	f7fe fd50 	bl	8001cbe <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d064      	beq.n	80032f0 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	2b00      	cmp	r3, #0
 800322c:	d032      	beq.n	8003294 <HAL_DMA_Init+0x294>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	2b01      	cmp	r3, #1
 8003234:	d02e      	beq.n	8003294 <HAL_DMA_Init+0x294>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	2b02      	cmp	r3, #2
 800323c:	d02a      	beq.n	8003294 <HAL_DMA_Init+0x294>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	2b03      	cmp	r3, #3
 8003244:	d026      	beq.n	8003294 <HAL_DMA_Init+0x294>
 8003246:	21c5      	movs	r1, #197	; 0xc5
 8003248:	4811      	ldr	r0, [pc, #68]	; (8003290 <HAL_DMA_Init+0x290>)
 800324a:	f7fe fd38 	bl	8001cbe <assert_failed>
 800324e:	e021      	b.n	8003294 <HAL_DMA_Init+0x294>
 8003250:	40026010 	.word	0x40026010
 8003254:	40026028 	.word	0x40026028
 8003258:	40026040 	.word	0x40026040
 800325c:	40026058 	.word	0x40026058
 8003260:	40026070 	.word	0x40026070
 8003264:	40026088 	.word	0x40026088
 8003268:	400260a0 	.word	0x400260a0
 800326c:	400260b8 	.word	0x400260b8
 8003270:	40026410 	.word	0x40026410
 8003274:	40026428 	.word	0x40026428
 8003278:	40026440 	.word	0x40026440
 800327c:	40026458 	.word	0x40026458
 8003280:	40026470 	.word	0x40026470
 8003284:	40026488 	.word	0x40026488
 8003288:	400264a0 	.word	0x400264a0
 800328c:	400264b8 	.word	0x400264b8
 8003290:	08011470 	.word	0x08011470
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d012      	beq.n	80032c2 <HAL_DMA_Init+0x2c2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a4:	d00d      	beq.n	80032c2 <HAL_DMA_Init+0x2c2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ae:	d008      	beq.n	80032c2 <HAL_DMA_Init+0x2c2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032b8:	d003      	beq.n	80032c2 <HAL_DMA_Init+0x2c2>
 80032ba:	21c6      	movs	r1, #198	; 0xc6
 80032bc:	485b      	ldr	r0, [pc, #364]	; (800342c <HAL_DMA_Init+0x42c>)
 80032be:	f7fe fcfe 	bl	8001cbe <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d012      	beq.n	80032f0 <HAL_DMA_Init+0x2f0>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032d2:	d00d      	beq.n	80032f0 <HAL_DMA_Init+0x2f0>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032dc:	d008      	beq.n	80032f0 <HAL_DMA_Init+0x2f0>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032e6:	d003      	beq.n	80032f0 <HAL_DMA_Init+0x2f0>
 80032e8:	21c7      	movs	r1, #199	; 0xc7
 80032ea:	4850      	ldr	r0, [pc, #320]	; (800342c <HAL_DMA_Init+0x42c>)
 80032ec:	f7fe fce7 	bl	8001cbe <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003310:	e00f      	b.n	8003332 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003312:	f7ff fd33 	bl	8002d7c <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b05      	cmp	r3, #5
 800331e:	d908      	bls.n	8003332 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2203      	movs	r2, #3
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e078      	b.n	8003424 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1e8      	bne.n	8003312 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_DMA_Init+0x430>)
 800334c:	4013      	ands	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800335e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	2b04      	cmp	r3, #4
 800338a:	d107      	bne.n	800339c <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	4313      	orrs	r3, r2
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0307 	bic.w	r3, r3, #7
 80033b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d117      	bne.n	80033f6 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00e      	beq.n	80033f6 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 faa1 	bl	8003920 <DMA_CheckFifoParam>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2240      	movs	r2, #64	; 0x40
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033f2:	2301      	movs	r3, #1
 80033f4:	e016      	b.n	8003424 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fa58 	bl	80038b4 <DMA_CalcBaseAndBitshift>
 8003404:	4603      	mov	r3, r0
 8003406:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	223f      	movs	r2, #63	; 0x3f
 800340e:	409a      	lsls	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	08011470 	.word	0x08011470
 8003430:	f010803f 	.word	0xf010803f

08003434 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_DMA_Start_IT+0x26>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003458:	d304      	bcc.n	8003464 <HAL_DMA_Start_IT+0x30>
 800345a:	f240 11cb 	movw	r1, #459	; 0x1cb
 800345e:	4827      	ldr	r0, [pc, #156]	; (80034fc <HAL_DMA_Start_IT+0xc8>)
 8003460:	f7fe fc2d 	bl	8001cbe <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_DMA_Start_IT+0x3e>
 800346e:	2302      	movs	r3, #2
 8003470:	e040      	b.n	80034f4 <HAL_DMA_Start_IT+0xc0>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d12f      	bne.n	80034e6 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f9dc 	bl	8003858 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	223f      	movs	r2, #63	; 0x3f
 80034a6:	409a      	lsls	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0216 	orr.w	r2, r2, #22
 80034ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0208 	orr.w	r2, r2, #8
 80034d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e005      	b.n	80034f2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
 80034f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	08011470 	.word	0x08011470

08003500 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d004      	beq.n	800351e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e00c      	b.n	8003538 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2205      	movs	r2, #5
 8003522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003550:	4b8e      	ldr	r3, [pc, #568]	; (800378c <HAL_DMA_IRQHandler+0x248>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a8e      	ldr	r2, [pc, #568]	; (8003790 <HAL_DMA_IRQHandler+0x24c>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	0a9b      	lsrs	r3, r3, #10
 800355c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	2208      	movs	r2, #8
 8003570:	409a      	lsls	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d01a      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0204 	bic.w	r2, r2, #4
 8003596:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359c:	2208      	movs	r2, #8
 800359e:	409a      	lsls	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	f043 0201 	orr.w	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	2201      	movs	r2, #1
 80035b6:	409a      	lsls	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d012      	beq.n	80035e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d2:	2201      	movs	r2, #1
 80035d4:	409a      	lsls	r2, r3
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f043 0202 	orr.w	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ea:	2204      	movs	r2, #4
 80035ec:	409a      	lsls	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	2204      	movs	r2, #4
 800360a:	409a      	lsls	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	f043 0204 	orr.w	r2, r3, #4
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003620:	2210      	movs	r2, #16
 8003622:	409a      	lsls	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d043      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d03c      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	2210      	movs	r2, #16
 8003640:	409a      	lsls	r2, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d018      	beq.n	8003686 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d108      	bne.n	8003674 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d024      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
 8003672:	e01f      	b.n	80036b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
 8003684:	e016      	b.n	80036b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d107      	bne.n	80036a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0208 	bic.w	r2, r2, #8
 80036a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	2220      	movs	r2, #32
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 808f 	beq.w	80037e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8087 	beq.w	80037e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	2220      	movs	r2, #32
 80036dc:	409a      	lsls	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b05      	cmp	r3, #5
 80036ec:	d136      	bne.n	800375c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0216 	bic.w	r2, r2, #22
 80036fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800370c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <HAL_DMA_IRQHandler+0x1da>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0208 	bic.w	r2, r2, #8
 800372c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003732:	223f      	movs	r2, #63	; 0x3f
 8003734:	409a      	lsls	r2, r3
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374e:	2b00      	cmp	r3, #0
 8003750:	d07e      	beq.n	8003850 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
        }
        return;
 800375a:	e079      	b.n	8003850 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d01d      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10d      	bne.n	8003794 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377c:	2b00      	cmp	r3, #0
 800377e:	d031      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4798      	blx	r3
 8003788:	e02c      	b.n	80037e4 <HAL_DMA_IRQHandler+0x2a0>
 800378a:	bf00      	nop
 800378c:	2000008c 	.word	0x2000008c
 8003790:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d023      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
 80037a4:	e01e      	b.n	80037e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10f      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0210 	bic.w	r2, r2, #16
 80037c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d032      	beq.n	8003852 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d022      	beq.n	800383e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2205      	movs	r2, #5
 80037fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	3301      	adds	r3, #1
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	429a      	cmp	r2, r3
 800381a:	d307      	bcc.n	800382c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f2      	bne.n	8003810 <HAL_DMA_IRQHandler+0x2cc>
 800382a:	e000      	b.n	800382e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800382c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
 800384e:	e000      	b.n	8003852 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003850:	bf00      	nop
    }
  }
}
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003874:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d108      	bne.n	8003898 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003896:	e007      	b.n	80038a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	60da      	str	r2, [r3, #12]
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	3b10      	subs	r3, #16
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <DMA_CalcBaseAndBitshift+0x64>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038ce:	4a13      	ldr	r2, [pc, #76]	; (800391c <DMA_CalcBaseAndBitshift+0x68>)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d909      	bls.n	80038f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ea:	f023 0303 	bic.w	r3, r3, #3
 80038ee:	1d1a      	adds	r2, r3, #4
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	659a      	str	r2, [r3, #88]	; 0x58
 80038f4:	e007      	b.n	8003906 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038fe:	f023 0303 	bic.w	r3, r3, #3
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	aaaaaaab 	.word	0xaaaaaaab
 800391c:	080138d0 	.word	0x080138d0

08003920 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d11f      	bne.n	800397a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d856      	bhi.n	80039ee <DMA_CheckFifoParam+0xce>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <DMA_CheckFifoParam+0x28>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	08003959 	.word	0x08003959
 800394c:	0800396b 	.word	0x0800396b
 8003950:	08003959 	.word	0x08003959
 8003954:	080039ef 	.word	0x080039ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d046      	beq.n	80039f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003968:	e043      	b.n	80039f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003972:	d140      	bne.n	80039f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003978:	e03d      	b.n	80039f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003982:	d121      	bne.n	80039c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d837      	bhi.n	80039fa <DMA_CheckFifoParam+0xda>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <DMA_CheckFifoParam+0x70>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039a1 	.word	0x080039a1
 8003994:	080039a7 	.word	0x080039a7
 8003998:	080039a1 	.word	0x080039a1
 800399c:	080039b9 	.word	0x080039b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
      break;
 80039a4:	e030      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d025      	beq.n	80039fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b6:	e022      	b.n	80039fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039c0:	d11f      	bne.n	8003a02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039c6:	e01c      	b.n	8003a02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d903      	bls.n	80039d6 <DMA_CheckFifoParam+0xb6>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d003      	beq.n	80039dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039d4:	e018      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
      break;
 80039da:	e015      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00e      	beq.n	8003a06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
      break;
 80039ec:	e00b      	b.n	8003a06 <DMA_CheckFifoParam+0xe6>
      break;
 80039ee:	bf00      	nop
 80039f0:	e00a      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      break;
 80039f2:	bf00      	nop
 80039f4:	e008      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      break;
 80039f6:	bf00      	nop
 80039f8:	e006      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      break;
 80039fa:	bf00      	nop
 80039fc:	e004      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      break;
 80039fe:	bf00      	nop
 8003a00:	e002      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <DMA_CheckFifoParam+0xe8>
      break;
 8003a06:	bf00      	nop
    }
  } 
  
  return status; 
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop

08003a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a33      	ldr	r2, [pc, #204]	; (8003b00 <HAL_GPIO_Init+0xe8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d017      	beq.n	8003a66 <HAL_GPIO_Init+0x4e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a32      	ldr	r2, [pc, #200]	; (8003b04 <HAL_GPIO_Init+0xec>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_GPIO_Init+0x4e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a31      	ldr	r2, [pc, #196]	; (8003b08 <HAL_GPIO_Init+0xf0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00f      	beq.n	8003a66 <HAL_GPIO_Init+0x4e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a30      	ldr	r2, [pc, #192]	; (8003b0c <HAL_GPIO_Init+0xf4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <HAL_GPIO_Init+0x4e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a2f      	ldr	r2, [pc, #188]	; (8003b10 <HAL_GPIO_Init+0xf8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <HAL_GPIO_Init+0x4e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a2e      	ldr	r2, [pc, #184]	; (8003b14 <HAL_GPIO_Init+0xfc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x4e>
 8003a5e:	21ac      	movs	r1, #172	; 0xac
 8003a60:	482d      	ldr	r0, [pc, #180]	; (8003b18 <HAL_GPIO_Init+0x100>)
 8003a62:	f7fe f92c 	bl	8001cbe <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_GPIO_Init+0x64>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x6c>
 8003a7c:	21ad      	movs	r1, #173	; 0xad
 8003a7e:	4826      	ldr	r0, [pc, #152]	; (8003b18 <HAL_GPIO_Init+0x100>)
 8003a80:	f7fe f91d 	bl	8001cbe <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d035      	beq.n	8003af8 <HAL_GPIO_Init+0xe0>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d031      	beq.n	8003af8 <HAL_GPIO_Init+0xe0>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b11      	cmp	r3, #17
 8003a9a:	d02d      	beq.n	8003af8 <HAL_GPIO_Init+0xe0>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d029      	beq.n	8003af8 <HAL_GPIO_Init+0xe0>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b12      	cmp	r3, #18
 8003aaa:	d025      	beq.n	8003af8 <HAL_GPIO_Init+0xe0>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003ab4:	d020      	beq.n	8003af8 <HAL_GPIO_Init+0xe0>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003abe:	d01b      	beq.n	8003af8 <HAL_GPIO_Init+0xe0>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003ac8:	d016      	beq.n	8003af8 <HAL_GPIO_Init+0xe0>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003ad2:	d011      	beq.n	8003af8 <HAL_GPIO_Init+0xe0>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003adc:	d00c      	beq.n	8003af8 <HAL_GPIO_Init+0xe0>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003ae6:	d007      	beq.n	8003af8 <HAL_GPIO_Init+0xe0>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0xe0>
 8003af0:	21ae      	movs	r1, #174	; 0xae
 8003af2:	4809      	ldr	r0, [pc, #36]	; (8003b18 <HAL_GPIO_Init+0x100>)
 8003af4:	f7fe f8e3 	bl	8001cbe <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	e20c      	b.n	8003f18 <HAL_GPIO_Init+0x500>
 8003afe:	bf00      	nop
 8003b00:	40020000 	.word	0x40020000
 8003b04:	40020400 	.word	0x40020400
 8003b08:	40020800 	.word	0x40020800
 8003b0c:	40020c00 	.word	0x40020c00
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40021c00 	.word	0x40021c00
 8003b18:	080114a8 	.word	0x080114a8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	f040 81ec 	bne.w	8003f12 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d005      	beq.n	8003b52 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d144      	bne.n	8003bdc <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00f      	beq.n	8003b7a <HAL_GPIO_Init+0x162>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d00b      	beq.n	8003b7a <HAL_GPIO_Init+0x162>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d007      	beq.n	8003b7a <HAL_GPIO_Init+0x162>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x162>
 8003b72:	21c0      	movs	r1, #192	; 0xc0
 8003b74:	4884      	ldr	r0, [pc, #528]	; (8003d88 <HAL_GPIO_Init+0x370>)
 8003b76:	f7fe f8a2 	bl	8001cbe <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	2203      	movs	r2, #3
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 0201 	and.w	r2, r3, #1
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d027      	beq.n	8003c38 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00b      	beq.n	8003c08 <HAL_GPIO_Init+0x1f0>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d007      	beq.n	8003c08 <HAL_GPIO_Init+0x1f0>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x1f0>
 8003c00:	21d1      	movs	r1, #209	; 0xd1
 8003c02:	4861      	ldr	r0, [pc, #388]	; (8003d88 <HAL_GPIO_Init+0x370>)
 8003c04:	f7fe f85b 	bl	8001cbe <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	f040 80a3 	bne.w	8003d8c <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d077      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b09      	cmp	r3, #9
 8003c54:	d073      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d06f      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d06b      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d067      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d063      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d05f      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d05b      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d057      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d053      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d04f      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d04b      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d047      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d043      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d03f      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d03b      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d037      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	d033      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d02f      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b05      	cmp	r3, #5
 8003ce4:	d02b      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b06      	cmp	r3, #6
 8003cec:	d027      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b07      	cmp	r3, #7
 8003cf4:	d023      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b07      	cmp	r3, #7
 8003cfc:	d01f      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b07      	cmp	r3, #7
 8003d04:	d01b      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d017      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b0a      	cmp	r3, #10
 8003d14:	d013      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b09      	cmp	r3, #9
 8003d1c:	d00f      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b09      	cmp	r3, #9
 8003d24:	d00b      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d007      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b0f      	cmp	r3, #15
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_Init+0x326>
 8003d36:	21de      	movs	r1, #222	; 0xde
 8003d38:	4813      	ldr	r0, [pc, #76]	; (8003d88 <HAL_GPIO_Init+0x370>)
 8003d3a:	f7fd ffc0 	bl	8001cbe <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	08da      	lsrs	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3208      	adds	r2, #8
 8003d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	220f      	movs	r2, #15
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	08da      	lsrs	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3208      	adds	r2, #8
 8003d80:	69b9      	ldr	r1, [r7, #24]
 8003d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003d86:	e001      	b.n	8003d8c <HAL_GPIO_Init+0x374>
 8003d88:	080114a8 	.word	0x080114a8
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0203 	and.w	r2, r3, #3
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80a2 	beq.w	8003f12 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	4b56      	ldr	r3, [pc, #344]	; (8003f2c <HAL_GPIO_Init+0x514>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	4a55      	ldr	r2, [pc, #340]	; (8003f2c <HAL_GPIO_Init+0x514>)
 8003dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dde:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <HAL_GPIO_Init+0x514>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dea:	4a51      	ldr	r2, [pc, #324]	; (8003f30 <HAL_GPIO_Init+0x518>)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	3302      	adds	r3, #2
 8003df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	220f      	movs	r2, #15
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a48      	ldr	r2, [pc, #288]	; (8003f34 <HAL_GPIO_Init+0x51c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d019      	beq.n	8003e4a <HAL_GPIO_Init+0x432>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a47      	ldr	r2, [pc, #284]	; (8003f38 <HAL_GPIO_Init+0x520>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_GPIO_Init+0x42e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a46      	ldr	r2, [pc, #280]	; (8003f3c <HAL_GPIO_Init+0x524>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00d      	beq.n	8003e42 <HAL_GPIO_Init+0x42a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a45      	ldr	r2, [pc, #276]	; (8003f40 <HAL_GPIO_Init+0x528>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d007      	beq.n	8003e3e <HAL_GPIO_Init+0x426>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a44      	ldr	r2, [pc, #272]	; (8003f44 <HAL_GPIO_Init+0x52c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <HAL_GPIO_Init+0x422>
 8003e36:	2304      	movs	r3, #4
 8003e38:	e008      	b.n	8003e4c <HAL_GPIO_Init+0x434>
 8003e3a:	2307      	movs	r3, #7
 8003e3c:	e006      	b.n	8003e4c <HAL_GPIO_Init+0x434>
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e004      	b.n	8003e4c <HAL_GPIO_Init+0x434>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e002      	b.n	8003e4c <HAL_GPIO_Init+0x434>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <HAL_GPIO_Init+0x434>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	f002 0203 	and.w	r2, r2, #3
 8003e52:	0092      	lsls	r2, r2, #2
 8003e54:	4093      	lsls	r3, r2
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e5c:	4934      	ldr	r1, [pc, #208]	; (8003f30 <HAL_GPIO_Init+0x518>)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	089b      	lsrs	r3, r3, #2
 8003e62:	3302      	adds	r3, #2
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e6a:	4b37      	ldr	r3, [pc, #220]	; (8003f48 <HAL_GPIO_Init+0x530>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	43db      	mvns	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e8e:	4a2e      	ldr	r2, [pc, #184]	; (8003f48 <HAL_GPIO_Init+0x530>)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e94:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <HAL_GPIO_Init+0x530>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eb8:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <HAL_GPIO_Init+0x530>)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ebe:	4b22      	ldr	r3, [pc, #136]	; (8003f48 <HAL_GPIO_Init+0x530>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ee2:	4a19      	ldr	r2, [pc, #100]	; (8003f48 <HAL_GPIO_Init+0x530>)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ee8:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <HAL_GPIO_Init+0x530>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f0c:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <HAL_GPIO_Init+0x530>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3301      	adds	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	f67f adfe 	bls.w	8003b1c <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40013800 	.word	0x40013800
 8003f34:	40020000 	.word	0x40020000
 8003f38:	40020400 	.word	0x40020400
 8003f3c:	40020800 	.word	0x40020800
 8003f40:	40020c00 	.word	0x40020c00
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40013c00 	.word	0x40013c00

08003f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003f5c:	887b      	ldrh	r3, [r7, #2]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <HAL_GPIO_WritePin+0x20>
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d004      	beq.n	8003f76 <HAL_GPIO_WritePin+0x2a>
 8003f6c:	f240 119d 	movw	r1, #413	; 0x19d
 8003f70:	480e      	ldr	r0, [pc, #56]	; (8003fac <HAL_GPIO_WritePin+0x60>)
 8003f72:	f7fd fea4 	bl	8001cbe <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003f76:	787b      	ldrb	r3, [r7, #1]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <HAL_GPIO_WritePin+0x40>
 8003f7c:	787b      	ldrb	r3, [r7, #1]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d004      	beq.n	8003f8c <HAL_GPIO_WritePin+0x40>
 8003f82:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003f86:	4809      	ldr	r0, [pc, #36]	; (8003fac <HAL_GPIO_WritePin+0x60>)
 8003f88:	f7fd fe99 	bl	8001cbe <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003f8c:	787b      	ldrb	r3, [r7, #1]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f98:	e003      	b.n	8003fa2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f9a:	887b      	ldrh	r3, [r7, #2]
 8003f9c:	041a      	lsls	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	619a      	str	r2, [r3, #24]
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	080114a8 	.word	0x080114a8

08003fb0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003fbc:	887b      	ldrh	r3, [r7, #2]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <HAL_GPIO_TogglePin+0x1c>
 8003fc2:	887b      	ldrh	r3, [r7, #2]
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d004      	beq.n	8003fd6 <HAL_GPIO_TogglePin+0x26>
 8003fcc:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8003fd0:	480a      	ldr	r0, [pc, #40]	; (8003ffc <HAL_GPIO_TogglePin+0x4c>)
 8003fd2:	f7fd fe74 	bl	8001cbe <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fdc:	887a      	ldrh	r2, [r7, #2]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	041a      	lsls	r2, r3, #16
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	43d9      	mvns	r1, r3
 8003fe8:	887b      	ldrh	r3, [r7, #2]
 8003fea:	400b      	ands	r3, r1
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	619a      	str	r2, [r3, #24]
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	080114a8 	.word	0x080114a8

08004000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800400a:	4b08      	ldr	r3, [pc, #32]	; (800402c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d006      	beq.n	8004024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004016:	4a05      	ldr	r2, [pc, #20]	; (800402c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe fb1e 	bl	8002660 <HAL_GPIO_EXTI_Callback>
  }
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40013c00 	.word	0x40013c00

08004030 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004032:	b08f      	sub	sp, #60	; 0x3c
 8004034:	af0a      	add	r7, sp, #40	; 0x28
 8004036:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e118      	b.n	8004274 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800404a:	d003      	beq.n	8004054 <HAL_PCD_Init+0x24>
 800404c:	2187      	movs	r1, #135	; 0x87
 800404e:	488b      	ldr	r0, [pc, #556]	; (800427c <HAL_PCD_Init+0x24c>)
 8004050:	f7fd fe35 	bl	8001cbe <assert_failed>

  USBx = hpcd->Instance;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f00c f924 	bl	80102bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2203      	movs	r2, #3
 8004078:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f005 fa25 	bl	80094e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	687e      	ldr	r6, [r7, #4]
 80040a0:	466d      	mov	r5, sp
 80040a2:	f106 0410 	add.w	r4, r6, #16
 80040a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80040b6:	1d33      	adds	r3, r6, #4
 80040b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ba:	6838      	ldr	r0, [r7, #0]
 80040bc:	f005 f8fc 	bl	80092b8 <USB_CoreInit>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e0d0      	b.n	8004274 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f005 fa13 	bl	8009504 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
 80040e2:	e04a      	b.n	800417a <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040e4:	7bfa      	ldrb	r2, [r7, #15]
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	333d      	adds	r3, #61	; 0x3d
 80040f4:	2201      	movs	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	333c      	adds	r3, #60	; 0x3c
 8004108:	7bfa      	ldrb	r2, [r7, #15]
 800410a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	b298      	uxth	r0, r3
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	3344      	adds	r3, #68	; 0x44
 8004120:	4602      	mov	r2, r0
 8004122:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004124:	7bfa      	ldrb	r2, [r7, #15]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	3340      	adds	r3, #64	; 0x40
 8004134:	2200      	movs	r2, #0
 8004136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004138:	7bfa      	ldrb	r2, [r7, #15]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	3348      	adds	r3, #72	; 0x48
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	334c      	adds	r3, #76	; 0x4c
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004160:	7bfa      	ldrb	r2, [r7, #15]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	3354      	adds	r3, #84	; 0x54
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	3301      	adds	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	7bfa      	ldrb	r2, [r7, #15]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	429a      	cmp	r2, r3
 8004182:	d3af      	bcc.n	80040e4 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]
 8004188:	e044      	b.n	8004214 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800418a:	7bfa      	ldrb	r2, [r7, #15]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800419c:	2200      	movs	r2, #0
 800419e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80041b2:	7bfa      	ldrb	r2, [r7, #15]
 80041b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041b6:	7bfa      	ldrb	r2, [r7, #15]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041cc:	7bfa      	ldrb	r2, [r7, #15]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041e2:	7bfa      	ldrb	r2, [r7, #15]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	3301      	adds	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	7bfa      	ldrb	r2, [r7, #15]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	d3b5      	bcc.n	800418a <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	687e      	ldr	r6, [r7, #4]
 8004226:	466d      	mov	r5, sp
 8004228:	f106 0410 	add.w	r4, r6, #16
 800422c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800422e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004234:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004238:	e885 0003 	stmia.w	r5, {r0, r1}
 800423c:	1d33      	adds	r3, r6, #4
 800423e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004240:	6838      	ldr	r0, [r7, #0]
 8004242:	f005 f9ab 	bl	800959c <USB_DevInit>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e00d      	b.n	8004274 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f006 fafa 	bl	800a866 <USB_DevDisconnect>

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800427c:	080114e4 	.word	0x080114e4

08004280 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_PCD_Start+0x1c>
 8004298:	2302      	movs	r3, #2
 800429a:	e020      	b.n	80042de <HAL_PCD_Start+0x5e>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d109      	bne.n	80042c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d005      	beq.n	80042c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f005 f8fb 	bl	80094c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f006 faa8 	bl	800a824 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042e6:	b590      	push	{r4, r7, lr}
 80042e8:	b08d      	sub	sp, #52	; 0x34
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f006 fb66 	bl	800a9ce <USB_GetMode>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	f040 848a 	bne.w	8004c1e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f006 faca 	bl	800a8a8 <USB_ReadInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8480 	beq.w	8004c1c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f006 fab7 	bl	800a8a8 <USB_ReadInterrupts>
 800433a:	4603      	mov	r3, r0
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b02      	cmp	r3, #2
 8004342:	d107      	bne.n	8004354 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f002 0202 	and.w	r2, r2, #2
 8004352:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f006 faa5 	bl	800a8a8 <USB_ReadInterrupts>
 800435e:	4603      	mov	r3, r0
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b10      	cmp	r3, #16
 8004366:	d161      	bne.n	800442c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0210 	bic.w	r2, r2, #16
 8004376:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	3304      	adds	r3, #4
 8004396:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	0c5b      	lsrs	r3, r3, #17
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d124      	bne.n	80043ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d035      	beq.n	800441c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043be:	b29b      	uxth	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	6a38      	ldr	r0, [r7, #32]
 80043c4:	f006 f8dc 	bl	800a580 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d4:	441a      	add	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	6a1a      	ldr	r2, [r3, #32]
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043e6:	441a      	add	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	621a      	str	r2, [r3, #32]
 80043ec:	e016      	b.n	800441c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	0c5b      	lsrs	r3, r3, #17
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d110      	bne.n	800441c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004400:	2208      	movs	r2, #8
 8004402:	4619      	mov	r1, r3
 8004404:	6a38      	ldr	r0, [r7, #32]
 8004406:	f006 f8bb 	bl	800a580 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	6a1a      	ldr	r2, [r3, #32]
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004416:	441a      	add	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0210 	orr.w	r2, r2, #16
 800442a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f006 fa39 	bl	800a8a8 <USB_ReadInterrupts>
 8004436:	4603      	mov	r3, r0
 8004438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800443c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004440:	f040 80a7 	bne.w	8004592 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f006 fa3e 	bl	800a8ce <USB_ReadDevAllOutEpInterrupt>
 8004452:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004454:	e099      	b.n	800458a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 808e 	beq.w	800457e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f006 fa62 	bl	800a936 <USB_ReadDevOutEPInterrupt>
 8004472:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00c      	beq.n	8004498 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	2301      	movs	r3, #1
 800448e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fec2 	bl	800521c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00c      	beq.n	80044bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ae:	461a      	mov	r2, r3
 80044b0:	2308      	movs	r3, #8
 80044b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 ff98 	bl	80053ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	461a      	mov	r2, r3
 80044d4:	2310      	movs	r3, #16
 80044d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d030      	beq.n	8004544 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d109      	bne.n	8004502 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004500:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4413      	add	r3, r2
 8004514:	3304      	adds	r3, #4
 8004516:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	78db      	ldrb	r3, [r3, #3]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d108      	bne.n	8004532 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	b2db      	uxtb	r3, r3
 800452a:	4619      	mov	r1, r3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f00b ffc1 	bl	80104b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453e:	461a      	mov	r2, r3
 8004540:	2302      	movs	r3, #2
 8004542:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455a:	461a      	mov	r2, r3
 800455c:	2320      	movs	r3, #32
 800455e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004576:	461a      	mov	r2, r3
 8004578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800457c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	3301      	adds	r3, #1
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	f47f af62 	bne.w	8004456 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f006 f986 	bl	800a8a8 <USB_ReadInterrupts>
 800459c:	4603      	mov	r3, r0
 800459e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045a6:	f040 80db 	bne.w	8004760 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f006 f9a7 	bl	800a902 <USB_ReadDevAllInEpInterrupt>
 80045b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80045ba:	e0cd      	b.n	8004758 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80c2 	beq.w	800474c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f006 f9cd 	bl	800a972 <USB_ReadDevInEPInterrupt>
 80045d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d057      	beq.n	8004694 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	2201      	movs	r2, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	69f9      	ldr	r1, [r7, #28]
 8004600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004604:	4013      	ands	r3, r2
 8004606:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	461a      	mov	r2, r3
 8004616:	2301      	movs	r3, #1
 8004618:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d132      	bne.n	8004688 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004626:	4613      	mov	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	334c      	adds	r3, #76	; 0x4c
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4403      	add	r3, r0
 8004642:	3348      	adds	r3, #72	; 0x48
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4419      	add	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4403      	add	r3, r0
 8004656:	334c      	adds	r3, #76	; 0x4c
 8004658:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d113      	bne.n	8004688 <HAL_PCD_IRQHandler+0x3a2>
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	3354      	adds	r3, #84	; 0x54
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d108      	bne.n	8004688 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004680:	461a      	mov	r2, r3
 8004682:	2101      	movs	r1, #1
 8004684:	f006 f9d4 	bl	800aa30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	b2db      	uxtb	r3, r3
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f00b fe95 	bl	80103be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046aa:	461a      	mov	r2, r3
 80046ac:	2308      	movs	r3, #8
 80046ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	461a      	mov	r2, r3
 80046c8:	2310      	movs	r3, #16
 80046ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e2:	461a      	mov	r2, r3
 80046e4:	2340      	movs	r3, #64	; 0x40
 80046e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d023      	beq.n	800473a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80046f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046f4:	6a38      	ldr	r0, [r7, #32]
 80046f6:	f005 f8b5 	bl	8009864 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80046fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	3338      	adds	r3, #56	; 0x38
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	3304      	adds	r3, #4
 800470c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	78db      	ldrb	r3, [r3, #3]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d108      	bne.n	8004728 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2200      	movs	r2, #0
 800471a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	b2db      	uxtb	r3, r3
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f00b fed8 	bl	80104d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004734:	461a      	mov	r2, r3
 8004736:	2302      	movs	r3, #2
 8004738:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fcdb 	bl	8005102 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	3301      	adds	r3, #1
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	2b00      	cmp	r3, #0
 800475c:	f47f af2e 	bne.w	80045bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f006 f89f 	bl	800a8a8 <USB_ReadInterrupts>
 800476a:	4603      	mov	r3, r0
 800476c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004774:	d122      	bne.n	80047bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004790:	2b01      	cmp	r3, #1
 8004792:	d108      	bne.n	80047a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800479c:	2100      	movs	r1, #0
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fec2 	bl	8005528 <HAL_PCDEx_LPM_Callback>
 80047a4:	e002      	b.n	80047ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f00b fe76 	bl	8010498 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80047ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f006 f871 	bl	800a8a8 <USB_ReadInterrupts>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d0:	d112      	bne.n	80047f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d102      	bne.n	80047e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f00b fe32 	bl	801044c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047f6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f006 f853 	bl	800a8a8 <USB_ReadInterrupts>
 8004802:	4603      	mov	r3, r0
 8004804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	f040 80b7 	bne.w	800497e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2110      	movs	r1, #16
 800482a:	4618      	mov	r0, r3
 800482c:	f005 f81a 	bl	8009864 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004834:	e046      	b.n	80048c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004842:	461a      	mov	r2, r3
 8004844:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004848:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800485a:	0151      	lsls	r1, r2, #5
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	440a      	add	r2, r1
 8004860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004864:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004868:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	461a      	mov	r2, r3
 8004878:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800487c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800488e:	0151      	lsls	r1, r2, #5
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	440a      	add	r2, r1
 8004894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800489c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ae:	0151      	lsls	r1, r2, #5
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	440a      	add	r2, r1
 80048b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	3301      	adds	r3, #1
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d3b3      	bcc.n	8004836 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80048e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d016      	beq.n	8004918 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048fa:	f043 030b 	orr.w	r3, r3, #11
 80048fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004910:	f043 030b 	orr.w	r3, r3, #11
 8004914:	6453      	str	r3, [r2, #68]	; 0x44
 8004916:	e015      	b.n	8004944 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004926:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800492a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800492e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800493e:	f043 030b 	orr.w	r3, r3, #11
 8004942:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004952:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004956:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004968:	461a      	mov	r2, r3
 800496a:	f006 f861 	bl	800aa30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800497c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f005 ff90 	bl	800a8a8 <USB_ReadInterrupts>
 8004988:	4603      	mov	r3, r0
 800498a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800498e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004992:	d124      	bne.n	80049de <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f006 f826 	bl	800a9ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f004 ffdb 	bl	800995e <USB_GetDevSpeed>
 80049a8:	4603      	mov	r3, r0
 80049aa:	461a      	mov	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681c      	ldr	r4, [r3, #0]
 80049b4:	f001 fb40 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 80049b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	4620      	mov	r0, r4
 80049c4:	f004 fcda 	bl	800937c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f00b fd20 	bl	801040e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80049dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f005 ff60 	bl	800a8a8 <USB_ReadInterrupts>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d10a      	bne.n	8004a08 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f00b fcfd 	bl	80103f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f002 0208 	and.w	r2, r2, #8
 8004a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f005 ff4b 	bl	800a8a8 <USB_ReadInterrupts>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	2b80      	cmp	r3, #128	; 0x80
 8004a1a:	d122      	bne.n	8004a62 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a28:	2301      	movs	r3, #1
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2c:	e014      	b.n	8004a58 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d105      	bne.n	8004a52 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fb27 	bl	80050a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	3301      	adds	r3, #1
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d3e5      	bcc.n	8004a2e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f005 ff1e 	bl	800a8a8 <USB_ReadInterrupts>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a76:	d13b      	bne.n	8004af0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a78:	2301      	movs	r3, #1
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7c:	e02b      	b.n	8004ad6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a92:	4613      	mov	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	3340      	adds	r3, #64	; 0x40
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d115      	bne.n	8004ad0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004aa4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da12      	bge.n	8004ad0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aae:	4613      	mov	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	333f      	adds	r3, #63	; 0x3f
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fae8 	bl	80050a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d3ce      	bcc.n	8004a7e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695a      	ldr	r2, [r3, #20]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f005 fed7 	bl	800a8a8 <USB_ReadInterrupts>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b04:	d155      	bne.n	8004bb2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b06:	2301      	movs	r3, #1
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0a:	e045      	b.n	8004b98 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d12e      	bne.n	8004b92 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	da2b      	bge.n	8004b92 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004b46:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d121      	bne.n	8004b92 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	4613      	mov	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b60:	2201      	movs	r2, #1
 8004b62:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b8e:	6053      	str	r3, [r2, #4]
            break;
 8004b90:	e007      	b.n	8004ba2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	3301      	adds	r3, #1
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d3b4      	bcc.n	8004b0c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f005 fe76 	bl	800a8a8 <USB_ReadInterrupts>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc6:	d10a      	bne.n	8004bde <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f00b fc97 	bl	80104fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f005 fe60 	bl	800a8a8 <USB_ReadInterrupts>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d115      	bne.n	8004c1e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f00b fc87 	bl	8010518 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6859      	ldr	r1, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
 8004c1a:	e000      	b.n	8004c1e <HAL_PCD_IRQHandler+0x938>
      return;
 8004c1c:	bf00      	nop
    }
  }
}
 8004c1e:	3734      	adds	r7, #52	; 0x34
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd90      	pop	{r4, r7, pc}

08004c24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_PCD_SetAddress+0x1a>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e013      	b.n	8004c66 <HAL_PCD_SetAddress+0x42>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f005 fdbe 	bl	800a7d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	4608      	mov	r0, r1
 8004c78:	4611      	mov	r1, r2
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	70fb      	strb	r3, [r7, #3]
 8004c80:	460b      	mov	r3, r1
 8004c82:	803b      	strh	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	da0f      	bge.n	8004cb4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	f003 020f 	and.w	r2, r3, #15
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	3338      	adds	r3, #56	; 0x38
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3304      	adds	r3, #4
 8004caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	705a      	strb	r2, [r3, #1]
 8004cb2:	e00f      	b.n	8004cd4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	f003 020f 	and.w	r2, r3, #15
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4413      	add	r3, r2
 8004cca:	3304      	adds	r3, #4
 8004ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ce0:	883a      	ldrh	r2, [r7, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	78ba      	ldrb	r2, [r7, #2]
 8004cea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004cfe:	78bb      	ldrb	r3, [r7, #2]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d102      	bne.n	8004d0a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_PCD_EP_Open+0xaa>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e00e      	b.n	8004d36 <HAL_PCD_EP_Open+0xc8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68f9      	ldr	r1, [r7, #12]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f004 fe3e 	bl	80099a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004d34:	7afb      	ldrb	r3, [r7, #11]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da0f      	bge.n	8004d72 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	f003 020f 	and.w	r2, r3, #15
 8004d58:	4613      	mov	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	3338      	adds	r3, #56	; 0x38
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	4413      	add	r3, r2
 8004d66:	3304      	adds	r3, #4
 8004d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	705a      	strb	r2, [r3, #1]
 8004d70:	e00f      	b.n	8004d92 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	f003 020f 	and.w	r2, r3, #15
 8004d78:	4613      	mov	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4413      	add	r3, r2
 8004d88:	3304      	adds	r3, #4
 8004d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_PCD_EP_Close+0x6e>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e00e      	b.n	8004dca <HAL_PCD_EP_Close+0x8c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f004 fe7c 	bl	8009ab8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b086      	sub	sp, #24
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
 8004dde:	460b      	mov	r3, r1
 8004de0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004de2:	7afb      	ldrb	r3, [r7, #11]
 8004de4:	f003 020f 	and.w	r2, r3, #15
 8004de8:	4613      	mov	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	3304      	adds	r3, #4
 8004dfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e14:	7afb      	ldrb	r3, [r7, #11]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d102      	bne.n	8004e2e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e2e:	7afb      	ldrb	r3, [r7, #11]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	6979      	ldr	r1, [r7, #20]
 8004e46:	f005 f95b 	bl	800a100 <USB_EP0StartXfer>
 8004e4a:	e008      	b.n	8004e5e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	6979      	ldr	r1, [r7, #20]
 8004e5a:	f004 ff09 	bl	8009c70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	f003 020f 	and.w	r2, r3, #15
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004e8a:	681b      	ldr	r3, [r3, #0]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ea8:	7afb      	ldrb	r3, [r7, #11]
 8004eaa:	f003 020f 	and.w	r2, r3, #15
 8004eae:	4613      	mov	r3, r2
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	3338      	adds	r3, #56	; 0x38
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ed8:	7afb      	ldrb	r3, [r7, #11]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d102      	bne.n	8004ef2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ef2:	7afb      	ldrb	r3, [r7, #11]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d109      	bne.n	8004f10 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	6979      	ldr	r1, [r7, #20]
 8004f0a:	f005 f8f9 	bl	800a100 <USB_EP0StartXfer>
 8004f0e:	e008      	b.n	8004f22 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6979      	ldr	r1, [r7, #20]
 8004f1e:	f004 fea7 	bl	8009c70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	f003 020f 	and.w	r2, r3, #15
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d901      	bls.n	8004f4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e050      	b.n	8004fec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	da0f      	bge.n	8004f72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	f003 020f 	and.w	r2, r3, #15
 8004f58:	4613      	mov	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	3338      	adds	r3, #56	; 0x38
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	4413      	add	r3, r2
 8004f66:	3304      	adds	r3, #4
 8004f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	705a      	strb	r2, [r3, #1]
 8004f70:	e00d      	b.n	8004f8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	4613      	mov	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	4413      	add	r3, r2
 8004f84:	3304      	adds	r3, #4
 8004f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_PCD_EP_SetStall+0x82>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e01e      	b.n	8004fec <HAL_PCD_EP_SetStall+0xc0>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68f9      	ldr	r1, [r7, #12]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f005 fb37 	bl	800a630 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	b2d9      	uxtb	r1, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f005 fd27 	bl	800aa30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	f003 020f 	and.w	r2, r3, #15
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d901      	bls.n	8005012 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e042      	b.n	8005098 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005016:	2b00      	cmp	r3, #0
 8005018:	da0f      	bge.n	800503a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	f003 020f 	and.w	r2, r3, #15
 8005020:	4613      	mov	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	3338      	adds	r3, #56	; 0x38
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	4413      	add	r3, r2
 800502e:	3304      	adds	r3, #4
 8005030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	705a      	strb	r2, [r3, #1]
 8005038:	e00f      	b.n	800505a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	f003 020f 	and.w	r2, r3, #15
 8005040:	4613      	mov	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4413      	add	r3, r2
 8005050:	3304      	adds	r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	b2da      	uxtb	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_PCD_EP_ClrStall+0x86>
 8005076:	2302      	movs	r3, #2
 8005078:	e00e      	b.n	8005098 <HAL_PCD_EP_ClrStall+0xa4>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68f9      	ldr	r1, [r7, #12]
 8005088:	4618      	mov	r0, r3
 800508a:	f005 fb3f 	bl	800a70c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80050ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	da0c      	bge.n	80050ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	f003 020f 	and.w	r2, r3, #15
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	3338      	adds	r3, #56	; 0x38
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	4413      	add	r3, r2
 80050c8:	3304      	adds	r3, #4
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e00c      	b.n	80050e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	f003 020f 	and.w	r2, r3, #15
 80050d4:	4613      	mov	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	4413      	add	r3, r2
 80050e4:	3304      	adds	r3, #4
 80050e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68f9      	ldr	r1, [r7, #12]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f005 f95e 	bl	800a3b0 <USB_EPStopXfer>
 80050f4:	4603      	mov	r3, r0
 80050f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80050f8:	7afb      	ldrb	r3, [r7, #11]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b08a      	sub	sp, #40	; 0x28
 8005106:	af02      	add	r7, sp, #8
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	3338      	adds	r3, #56	; 0x38
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	3304      	adds	r3, #4
 8005128:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1a      	ldr	r2, [r3, #32]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	429a      	cmp	r2, r3
 8005134:	d901      	bls.n	800513a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e06c      	b.n	8005214 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	429a      	cmp	r2, r3
 800514e:	d902      	bls.n	8005156 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	3303      	adds	r3, #3
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800515e:	e02b      	b.n	80051b8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	429a      	cmp	r2, r3
 8005174:	d902      	bls.n	800517c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	3303      	adds	r3, #3
 8005180:	089b      	lsrs	r3, r3, #2
 8005182:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6919      	ldr	r1, [r3, #16]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	b2da      	uxtb	r2, r3
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005194:	b2db      	uxtb	r3, r3
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	4603      	mov	r3, r0
 800519a:	6978      	ldr	r0, [r7, #20]
 800519c:	f005 f9b2 	bl	800a504 <USB_WritePacket>

    ep->xfer_buff  += len;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	441a      	add	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	441a      	add	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d809      	bhi.n	80051e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a1a      	ldr	r2, [r3, #32]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d203      	bcs.n	80051e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1be      	bne.n	8005160 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d811      	bhi.n	8005212 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	2201      	movs	r2, #1
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	43db      	mvns	r3, r3
 8005208:	6939      	ldr	r1, [r7, #16]
 800520a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800520e:	4013      	ands	r3, r2
 8005210:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3720      	adds	r7, #32
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	333c      	adds	r3, #60	; 0x3c
 8005234:	3304      	adds	r3, #4
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d17b      	bne.n	800534a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d015      	beq.n	8005288 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	4a61      	ldr	r2, [pc, #388]	; (80053e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	f240 80b9 	bls.w	80053d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80b3 	beq.w	80053d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	461a      	mov	r2, r3
 8005280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005284:	6093      	str	r3, [r2, #8]
 8005286:	e0a7      	b.n	80053d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	461a      	mov	r2, r3
 80052a0:	2320      	movs	r3, #32
 80052a2:	6093      	str	r3, [r2, #8]
 80052a4:	e098      	b.n	80053d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 8093 	bne.w	80053d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	4a4b      	ldr	r2, [pc, #300]	; (80053e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d90f      	bls.n	80052da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d0:	461a      	mov	r2, r3
 80052d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d6:	6093      	str	r3, [r2, #8]
 80052d8:	e07e      	b.n	80053d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	4613      	mov	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	4413      	add	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	4413      	add	r3, r2
 80052ec:	3304      	adds	r3, #4
 80052ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	69da      	ldr	r2, [r3, #28]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	0159      	lsls	r1, r3, #5
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	440b      	add	r3, r1
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005306:	1ad2      	subs	r2, r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d114      	bne.n	800533c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005324:	461a      	mov	r2, r3
 8005326:	2101      	movs	r1, #1
 8005328:	f005 fb82 	bl	800aa30 <USB_EP0_OutStart>
 800532c:	e006      	b.n	800533c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	441a      	add	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	4619      	mov	r1, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f00b f820 	bl	8010388 <HAL_PCD_DataOutStageCallback>
 8005348:	e046      	b.n	80053d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d124      	bne.n	800539c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	461a      	mov	r2, r3
 800536a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536e:	6093      	str	r3, [r2, #8]
 8005370:	e032      	b.n	80053d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	461a      	mov	r2, r3
 800538a:	2320      	movs	r3, #32
 800538c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	4619      	mov	r1, r3
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f00a fff7 	bl	8010388 <HAL_PCD_DataOutStageCallback>
 800539a:	e01d      	b.n	80053d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d114      	bne.n	80053cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	4613      	mov	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d108      	bne.n	80053cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053c4:	461a      	mov	r2, r3
 80053c6:	2100      	movs	r1, #0
 80053c8:	f005 fb32 	bl	800aa30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	4619      	mov	r1, r3
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f00a ffd8 	bl	8010388 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	4f54300a 	.word	0x4f54300a
 80053e8:	4f54310a 	.word	0x4f54310a

080053ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	333c      	adds	r3, #60	; 0x3c
 8005404:	3304      	adds	r3, #4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <PCD_EP_OutSetupPacket_int+0x88>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d90e      	bls.n	8005440 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005428:	2b00      	cmp	r3, #0
 800542a:	d009      	beq.n	8005440 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	461a      	mov	r2, r3
 800543a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f00a ff8f 	bl	8010364 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <PCD_EP_OutSetupPacket_int+0x88>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d90c      	bls.n	8005468 <PCD_EP_OutSetupPacket_int+0x7c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d108      	bne.n	8005468 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005460:	461a      	mov	r2, r3
 8005462:	2101      	movs	r1, #1
 8005464:	f005 fae4 	bl	800aa30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	4f54300a 	.word	0x4f54300a

08005478 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
 8005484:	4613      	mov	r3, r2
 8005486:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d107      	bne.n	80054a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005496:	883b      	ldrh	r3, [r7, #0]
 8005498:	0419      	lsls	r1, r3, #16
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28
 80054a4:	e028      	b.n	80054f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	4413      	add	r3, r2
 80054b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054b4:	2300      	movs	r3, #0
 80054b6:	73fb      	strb	r3, [r7, #15]
 80054b8:	e00d      	b.n	80054d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	3340      	adds	r3, #64	; 0x40
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	4413      	add	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	3301      	adds	r3, #1
 80054d4:	73fb      	strb	r3, [r7, #15]
 80054d6:	7bfa      	ldrb	r2, [r7, #15]
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	3b01      	subs	r3, #1
 80054dc:	429a      	cmp	r2, r3
 80054de:	d3ec      	bcc.n	80054ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80054e0:	883b      	ldrh	r3, [r7, #0]
 80054e2:	0418      	lsls	r0, r3, #16
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6819      	ldr	r1, [r3, #0]
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	4302      	orrs	r2, r0
 80054f0:	3340      	adds	r3, #64	; 0x40
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	460b      	mov	r3, r1
 8005510:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	887a      	ldrh	r2, [r7, #2]
 8005518:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e314      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b0f      	cmp	r3, #15
 8005558:	d903      	bls.n	8005562 <HAL_RCC_OscConfig+0x22>
 800555a:	21e6      	movs	r1, #230	; 0xe6
 800555c:	4897      	ldr	r0, [pc, #604]	; (80057bc <HAL_RCC_OscConfig+0x27c>)
 800555e:	f7fc fbae 	bl	8001cbe <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8088 	beq.w	8005680 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00d      	beq.n	8005594 <HAL_RCC_OscConfig+0x54>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005580:	d008      	beq.n	8005594 <HAL_RCC_OscConfig+0x54>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800558a:	d003      	beq.n	8005594 <HAL_RCC_OscConfig+0x54>
 800558c:	21eb      	movs	r1, #235	; 0xeb
 800558e:	488b      	ldr	r0, [pc, #556]	; (80057bc <HAL_RCC_OscConfig+0x27c>)
 8005590:	f7fc fb95 	bl	8001cbe <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005594:	4b8a      	ldr	r3, [pc, #552]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 030c 	and.w	r3, r3, #12
 800559c:	2b04      	cmp	r3, #4
 800559e:	d00c      	beq.n	80055ba <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055a0:	4b87      	ldr	r3, [pc, #540]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d112      	bne.n	80055d2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ac:	4b84      	ldr	r3, [pc, #528]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055b8:	d10b      	bne.n	80055d2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ba:	4b81      	ldr	r3, [pc, #516]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d05b      	beq.n	800567e <HAL_RCC_OscConfig+0x13e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d157      	bne.n	800567e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e2d4      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055da:	d106      	bne.n	80055ea <HAL_RCC_OscConfig+0xaa>
 80055dc:	4b78      	ldr	r3, [pc, #480]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a77      	ldr	r2, [pc, #476]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 80055e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	e01d      	b.n	8005626 <HAL_RCC_OscConfig+0xe6>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055f2:	d10c      	bne.n	800560e <HAL_RCC_OscConfig+0xce>
 80055f4:	4b72      	ldr	r3, [pc, #456]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a71      	ldr	r2, [pc, #452]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 80055fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	4b6f      	ldr	r3, [pc, #444]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a6e      	ldr	r2, [pc, #440]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 8005606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	e00b      	b.n	8005626 <HAL_RCC_OscConfig+0xe6>
 800560e:	4b6c      	ldr	r3, [pc, #432]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a6b      	ldr	r2, [pc, #428]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 8005614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	4b69      	ldr	r3, [pc, #420]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a68      	ldr	r2, [pc, #416]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 8005620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005624:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d013      	beq.n	8005656 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562e:	f7fd fba5 	bl	8002d7c <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005636:	f7fd fba1 	bl	8002d7c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b64      	cmp	r3, #100	; 0x64
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e299      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005648:	4b5d      	ldr	r3, [pc, #372]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0f0      	beq.n	8005636 <HAL_RCC_OscConfig+0xf6>
 8005654:	e014      	b.n	8005680 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005656:	f7fd fb91 	bl	8002d7c <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800565e:	f7fd fb8d 	bl	8002d7c <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b64      	cmp	r3, #100	; 0x64
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e285      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005670:	4b53      	ldr	r3, [pc, #332]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1f0      	bne.n	800565e <HAL_RCC_OscConfig+0x11e>
 800567c:	e000      	b.n	8005680 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800567e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d079      	beq.n	8005780 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_RCC_OscConfig+0x166>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d004      	beq.n	80056a6 <HAL_RCC_OscConfig+0x166>
 800569c:	f240 111d 	movw	r1, #285	; 0x11d
 80056a0:	4846      	ldr	r0, [pc, #280]	; (80057bc <HAL_RCC_OscConfig+0x27c>)
 80056a2:	f7fc fb0c 	bl	8001cbe <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b1f      	cmp	r3, #31
 80056ac:	d904      	bls.n	80056b8 <HAL_RCC_OscConfig+0x178>
 80056ae:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80056b2:	4842      	ldr	r0, [pc, #264]	; (80057bc <HAL_RCC_OscConfig+0x27c>)
 80056b4:	f7fc fb03 	bl	8001cbe <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056b8:	4b41      	ldr	r3, [pc, #260]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 030c 	and.w	r3, r3, #12
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00b      	beq.n	80056dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056c4:	4b3e      	ldr	r3, [pc, #248]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d11c      	bne.n	800570a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056d0:	4b3b      	ldr	r3, [pc, #236]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d116      	bne.n	800570a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056dc:	4b38      	ldr	r3, [pc, #224]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <HAL_RCC_OscConfig+0x1b4>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d001      	beq.n	80056f4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e243      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f4:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	492f      	ldr	r1, [pc, #188]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 8005704:	4313      	orrs	r3, r2
 8005706:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005708:	e03a      	b.n	8005780 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d020      	beq.n	8005754 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005712:	4b2c      	ldr	r3, [pc, #176]	; (80057c4 <HAL_RCC_OscConfig+0x284>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fd fb30 	bl	8002d7c <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005720:	f7fd fb2c 	bl	8002d7c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e224      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005732:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573e:	4b20      	ldr	r3, [pc, #128]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	491c      	ldr	r1, [pc, #112]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 800574e:	4313      	orrs	r3, r2
 8005750:	600b      	str	r3, [r1, #0]
 8005752:	e015      	b.n	8005780 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005754:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <HAL_RCC_OscConfig+0x284>)
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575a:	f7fd fb0f 	bl	8002d7c <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005762:	f7fd fb0b 	bl	8002d7c <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e203      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <HAL_RCC_OscConfig+0x280>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f0      	bne.n	8005762 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d045      	beq.n	8005818 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <HAL_RCC_OscConfig+0x266>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d004      	beq.n	80057a6 <HAL_RCC_OscConfig+0x266>
 800579c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80057a0:	4806      	ldr	r0, [pc, #24]	; (80057bc <HAL_RCC_OscConfig+0x27c>)
 80057a2:	f7fc fa8c 	bl	8001cbe <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d01e      	beq.n	80057ec <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ae:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <HAL_RCC_OscConfig+0x288>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b4:	f7fd fae2 	bl	8002d7c <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ba:	e010      	b.n	80057de <HAL_RCC_OscConfig+0x29e>
 80057bc:	0801151c 	.word	0x0801151c
 80057c0:	40023800 	.word	0x40023800
 80057c4:	42470000 	.word	0x42470000
 80057c8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057cc:	f7fd fad6 	bl	8002d7c <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e1ce      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057de:	4b5e      	ldr	r3, [pc, #376]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 80057e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x28c>
 80057ea:	e015      	b.n	8005818 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ec:	4b5b      	ldr	r3, [pc, #364]	; (800595c <HAL_RCC_OscConfig+0x41c>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f2:	f7fd fac3 	bl	8002d7c <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057fa:	f7fd fabf 	bl	8002d7c <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e1b7      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800580c:	4b52      	ldr	r3, [pc, #328]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 800580e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1f0      	bne.n	80057fa <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80b0 	beq.w	8005986 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005826:	2300      	movs	r3, #0
 8005828:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00c      	beq.n	800584c <HAL_RCC_OscConfig+0x30c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d008      	beq.n	800584c <HAL_RCC_OscConfig+0x30c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	2b05      	cmp	r3, #5
 8005840:	d004      	beq.n	800584c <HAL_RCC_OscConfig+0x30c>
 8005842:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8005846:	4846      	ldr	r0, [pc, #280]	; (8005960 <HAL_RCC_OscConfig+0x420>)
 8005848:	f7fc fa39 	bl	8001cbe <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800584c:	4b42      	ldr	r3, [pc, #264]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10f      	bne.n	8005878 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005858:	2300      	movs	r3, #0
 800585a:	60bb      	str	r3, [r7, #8]
 800585c:	4b3e      	ldr	r3, [pc, #248]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	4a3d      	ldr	r2, [pc, #244]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 8005862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005866:	6413      	str	r3, [r2, #64]	; 0x40
 8005868:	4b3b      	ldr	r3, [pc, #236]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005870:	60bb      	str	r3, [r7, #8]
 8005872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005874:	2301      	movs	r3, #1
 8005876:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005878:	4b3a      	ldr	r3, [pc, #232]	; (8005964 <HAL_RCC_OscConfig+0x424>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005880:	2b00      	cmp	r3, #0
 8005882:	d118      	bne.n	80058b6 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005884:	4b37      	ldr	r3, [pc, #220]	; (8005964 <HAL_RCC_OscConfig+0x424>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a36      	ldr	r2, [pc, #216]	; (8005964 <HAL_RCC_OscConfig+0x424>)
 800588a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005890:	f7fd fa74 	bl	8002d7c <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005898:	f7fd fa70 	bl	8002d7c <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e168      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058aa:	4b2e      	ldr	r3, [pc, #184]	; (8005964 <HAL_RCC_OscConfig+0x424>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0f0      	beq.n	8005898 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d106      	bne.n	80058cc <HAL_RCC_OscConfig+0x38c>
 80058be:	4b26      	ldr	r3, [pc, #152]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 80058c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c2:	4a25      	ldr	r2, [pc, #148]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ca:	e01c      	b.n	8005906 <HAL_RCC_OscConfig+0x3c6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2b05      	cmp	r3, #5
 80058d2:	d10c      	bne.n	80058ee <HAL_RCC_OscConfig+0x3ae>
 80058d4:	4b20      	ldr	r3, [pc, #128]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 80058d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d8:	4a1f      	ldr	r2, [pc, #124]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 80058da:	f043 0304 	orr.w	r3, r3, #4
 80058de:	6713      	str	r3, [r2, #112]	; 0x70
 80058e0:	4b1d      	ldr	r3, [pc, #116]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	4a1c      	ldr	r2, [pc, #112]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	6713      	str	r3, [r2, #112]	; 0x70
 80058ec:	e00b      	b.n	8005906 <HAL_RCC_OscConfig+0x3c6>
 80058ee:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f2:	4a19      	ldr	r2, [pc, #100]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 80058f4:	f023 0301 	bic.w	r3, r3, #1
 80058f8:	6713      	str	r3, [r2, #112]	; 0x70
 80058fa:	4b17      	ldr	r3, [pc, #92]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	4a16      	ldr	r2, [pc, #88]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 8005900:	f023 0304 	bic.w	r3, r3, #4
 8005904:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d015      	beq.n	800593a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590e:	f7fd fa35 	bl	8002d7c <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005914:	e00a      	b.n	800592c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005916:	f7fd fa31 	bl	8002d7c <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	f241 3288 	movw	r2, #5000	; 0x1388
 8005924:	4293      	cmp	r3, r2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e127      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592c:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <HAL_RCC_OscConfig+0x418>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0ee      	beq.n	8005916 <HAL_RCC_OscConfig+0x3d6>
 8005938:	e01c      	b.n	8005974 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800593a:	f7fd fa1f 	bl	8002d7c <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005940:	e012      	b.n	8005968 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005942:	f7fd fa1b 	bl	8002d7c <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005950:	4293      	cmp	r3, r2
 8005952:	d909      	bls.n	8005968 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e111      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
 8005958:	40023800 	.word	0x40023800
 800595c:	42470e80 	.word	0x42470e80
 8005960:	0801151c 	.word	0x0801151c
 8005964:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005968:	4b86      	ldr	r3, [pc, #536]	; (8005b84 <HAL_RCC_OscConfig+0x644>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e6      	bne.n	8005942 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d105      	bne.n	8005986 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800597a:	4b82      	ldr	r3, [pc, #520]	; (8005b84 <HAL_RCC_OscConfig+0x644>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	4a81      	ldr	r2, [pc, #516]	; (8005b84 <HAL_RCC_OscConfig+0x644>)
 8005980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005984:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00c      	beq.n	80059a8 <HAL_RCC_OscConfig+0x468>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d008      	beq.n	80059a8 <HAL_RCC_OscConfig+0x468>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d004      	beq.n	80059a8 <HAL_RCC_OscConfig+0x468>
 800599e:	f240 11cd 	movw	r1, #461	; 0x1cd
 80059a2:	4879      	ldr	r0, [pc, #484]	; (8005b88 <HAL_RCC_OscConfig+0x648>)
 80059a4:	f7fc f98b 	bl	8001cbe <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 80e4 	beq.w	8005b7a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059b2:	4b74      	ldr	r3, [pc, #464]	; (8005b84 <HAL_RCC_OscConfig+0x644>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	f000 80a5 	beq.w	8005b0a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f040 8089 	bne.w	8005adc <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <HAL_RCC_OscConfig+0x4a6>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059da:	d004      	beq.n	80059e6 <HAL_RCC_OscConfig+0x4a6>
 80059dc:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80059e0:	4869      	ldr	r0, [pc, #420]	; (8005b88 <HAL_RCC_OscConfig+0x648>)
 80059e2:	f7fc f96c 	bl	8001cbe <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	2b3f      	cmp	r3, #63	; 0x3f
 80059ec:	d904      	bls.n	80059f8 <HAL_RCC_OscConfig+0x4b8>
 80059ee:	f240 11d7 	movw	r1, #471	; 0x1d7
 80059f2:	4865      	ldr	r0, [pc, #404]	; (8005b88 <HAL_RCC_OscConfig+0x648>)
 80059f4:	f7fc f963 	bl	8001cbe <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	2b31      	cmp	r3, #49	; 0x31
 80059fe:	d904      	bls.n	8005a0a <HAL_RCC_OscConfig+0x4ca>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005a08:	d904      	bls.n	8005a14 <HAL_RCC_OscConfig+0x4d4>
 8005a0a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8005a0e:	485e      	ldr	r0, [pc, #376]	; (8005b88 <HAL_RCC_OscConfig+0x648>)
 8005a10:	f7fc f955 	bl	8001cbe <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d010      	beq.n	8005a3e <HAL_RCC_OscConfig+0x4fe>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d00c      	beq.n	8005a3e <HAL_RCC_OscConfig+0x4fe>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	2b06      	cmp	r3, #6
 8005a2a:	d008      	beq.n	8005a3e <HAL_RCC_OscConfig+0x4fe>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d004      	beq.n	8005a3e <HAL_RCC_OscConfig+0x4fe>
 8005a34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a38:	4853      	ldr	r0, [pc, #332]	; (8005b88 <HAL_RCC_OscConfig+0x648>)
 8005a3a:	f7fc f940 	bl	8001cbe <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d903      	bls.n	8005a4e <HAL_RCC_OscConfig+0x50e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	2b0f      	cmp	r3, #15
 8005a4c:	d904      	bls.n	8005a58 <HAL_RCC_OscConfig+0x518>
 8005a4e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005a52:	484d      	ldr	r0, [pc, #308]	; (8005b88 <HAL_RCC_OscConfig+0x648>)
 8005a54:	f7fc f933 	bl	8001cbe <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a58:	4b4c      	ldr	r3, [pc, #304]	; (8005b8c <HAL_RCC_OscConfig+0x64c>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5e:	f7fd f98d 	bl	8002d7c <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a66:	f7fd f989 	bl	8002d7c <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e081      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a78:	4b42      	ldr	r3, [pc, #264]	; (8005b84 <HAL_RCC_OscConfig+0x644>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f0      	bne.n	8005a66 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	019b      	lsls	r3, r3, #6
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	041b      	lsls	r3, r3, #16
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	4936      	ldr	r1, [pc, #216]	; (8005b84 <HAL_RCC_OscConfig+0x644>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aae:	4b37      	ldr	r3, [pc, #220]	; (8005b8c <HAL_RCC_OscConfig+0x64c>)
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab4:	f7fd f962 	bl	8002d7c <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005abc:	f7fd f95e 	bl	8002d7c <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e056      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ace:	4b2d      	ldr	r3, [pc, #180]	; (8005b84 <HAL_RCC_OscConfig+0x644>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0x57c>
 8005ada:	e04e      	b.n	8005b7a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005adc:	4b2b      	ldr	r3, [pc, #172]	; (8005b8c <HAL_RCC_OscConfig+0x64c>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae2:	f7fd f94b 	bl	8002d7c <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aea:	f7fd f947 	bl	8002d7c <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e03f      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afc:	4b21      	ldr	r3, [pc, #132]	; (8005b84 <HAL_RCC_OscConfig+0x644>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1f0      	bne.n	8005aea <HAL_RCC_OscConfig+0x5aa>
 8005b08:	e037      	b.n	8005b7a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e032      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b16:	4b1b      	ldr	r3, [pc, #108]	; (8005b84 <HAL_RCC_OscConfig+0x644>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d028      	beq.n	8005b76 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d121      	bne.n	8005b76 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d11a      	bne.n	8005b76 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b46:	4013      	ands	r3, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d111      	bne.n	8005b76 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d107      	bne.n	8005b76 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d001      	beq.n	8005b7a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40023800 	.word	0x40023800
 8005b88:	0801151c 	.word	0x0801151c
 8005b8c:	42470060 	.word	0x42470060

08005b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e174      	b.n	8005e8e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x24>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b0f      	cmp	r3, #15
 8005bb2:	d904      	bls.n	8005bbe <HAL_RCC_ClockConfig+0x2e>
 8005bb4:	f240 215a 	movw	r1, #602	; 0x25a
 8005bb8:	487b      	ldr	r0, [pc, #492]	; (8005da8 <HAL_RCC_ClockConfig+0x218>)
 8005bba:	f7fc f880 	bl	8001cbe <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d019      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x68>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d016      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x68>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d013      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x68>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d010      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x68>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d00d      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x68>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d00a      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x68>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b06      	cmp	r3, #6
 8005be6:	d007      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x68>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b07      	cmp	r3, #7
 8005bec:	d004      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x68>
 8005bee:	f240 215b 	movw	r1, #603	; 0x25b
 8005bf2:	486d      	ldr	r0, [pc, #436]	; (8005da8 <HAL_RCC_ClockConfig+0x218>)
 8005bf4:	f7fc f863 	bl	8001cbe <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf8:	4b6c      	ldr	r3, [pc, #432]	; (8005dac <HAL_RCC_ClockConfig+0x21c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d90c      	bls.n	8005c20 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c06:	4b69      	ldr	r3, [pc, #420]	; (8005dac <HAL_RCC_ClockConfig+0x21c>)
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0e:	4b67      	ldr	r3, [pc, #412]	; (8005dac <HAL_RCC_ClockConfig+0x21c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e136      	b.n	8005e8e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d049      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c38:	4b5d      	ldr	r3, [pc, #372]	; (8005db0 <HAL_RCC_ClockConfig+0x220>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4a5c      	ldr	r2, [pc, #368]	; (8005db0 <HAL_RCC_ClockConfig+0x220>)
 8005c3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c50:	4b57      	ldr	r3, [pc, #348]	; (8005db0 <HAL_RCC_ClockConfig+0x220>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4a56      	ldr	r2, [pc, #344]	; (8005db0 <HAL_RCC_ClockConfig+0x220>)
 8005c56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d024      	beq.n	8005cae <HAL_RCC_ClockConfig+0x11e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b80      	cmp	r3, #128	; 0x80
 8005c6a:	d020      	beq.n	8005cae <HAL_RCC_ClockConfig+0x11e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b90      	cmp	r3, #144	; 0x90
 8005c72:	d01c      	beq.n	8005cae <HAL_RCC_ClockConfig+0x11e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2ba0      	cmp	r3, #160	; 0xa0
 8005c7a:	d018      	beq.n	8005cae <HAL_RCC_ClockConfig+0x11e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2bb0      	cmp	r3, #176	; 0xb0
 8005c82:	d014      	beq.n	8005cae <HAL_RCC_ClockConfig+0x11e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2bc0      	cmp	r3, #192	; 0xc0
 8005c8a:	d010      	beq.n	8005cae <HAL_RCC_ClockConfig+0x11e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2bd0      	cmp	r3, #208	; 0xd0
 8005c92:	d00c      	beq.n	8005cae <HAL_RCC_ClockConfig+0x11e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2be0      	cmp	r3, #224	; 0xe0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCC_ClockConfig+0x11e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2bf0      	cmp	r3, #240	; 0xf0
 8005ca2:	d004      	beq.n	8005cae <HAL_RCC_ClockConfig+0x11e>
 8005ca4:	f240 217e 	movw	r1, #638	; 0x27e
 8005ca8:	483f      	ldr	r0, [pc, #252]	; (8005da8 <HAL_RCC_ClockConfig+0x218>)
 8005caa:	f7fc f808 	bl	8001cbe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cae:	4b40      	ldr	r3, [pc, #256]	; (8005db0 <HAL_RCC_ClockConfig+0x220>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	493d      	ldr	r1, [pc, #244]	; (8005db0 <HAL_RCC_ClockConfig+0x220>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d059      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d010      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x166>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d00c      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x166>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d008      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x166>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d004      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x166>
 8005cec:	f240 2185 	movw	r1, #645	; 0x285
 8005cf0:	482d      	ldr	r0, [pc, #180]	; (8005da8 <HAL_RCC_ClockConfig+0x218>)
 8005cf2:	f7fb ffe4 	bl	8001cbe <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d107      	bne.n	8005d0e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfe:	4b2c      	ldr	r3, [pc, #176]	; (8005db0 <HAL_RCC_ClockConfig+0x220>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d119      	bne.n	8005d3e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e0bf      	b.n	8005e8e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d003      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d107      	bne.n	8005d2e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d1e:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <HAL_RCC_ClockConfig+0x220>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d109      	bne.n	8005d3e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e0af      	b.n	8005e8e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d2e:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <HAL_RCC_ClockConfig+0x220>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e0a7      	b.n	8005e8e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d3e:	4b1c      	ldr	r3, [pc, #112]	; (8005db0 <HAL_RCC_ClockConfig+0x220>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f023 0203 	bic.w	r2, r3, #3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	4919      	ldr	r1, [pc, #100]	; (8005db0 <HAL_RCC_ClockConfig+0x220>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d50:	f7fd f814 	bl	8002d7c <HAL_GetTick>
 8005d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d56:	e00a      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d58:	f7fd f810 	bl	8002d7c <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e08f      	b.n	8005e8e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6e:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <HAL_RCC_ClockConfig+0x220>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 020c 	and.w	r2, r3, #12
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d1eb      	bne.n	8005d58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <HAL_RCC_ClockConfig+0x21c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d212      	bcs.n	8005db4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <HAL_RCC_ClockConfig+0x21c>)
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_RCC_ClockConfig+0x21c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d007      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e072      	b.n	8005e8e <HAL_RCC_ClockConfig+0x2fe>
 8005da8:	0801151c 	.word	0x0801151c
 8005dac:	40023c00 	.word	0x40023c00
 8005db0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d025      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d018      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x26a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd0:	d013      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x26a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005dda:	d00e      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x26a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005de4:	d009      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x26a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005dee:	d004      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x26a>
 8005df0:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005df4:	4828      	ldr	r0, [pc, #160]	; (8005e98 <HAL_RCC_ClockConfig+0x308>)
 8005df6:	f7fb ff62 	bl	8001cbe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dfa:	4b28      	ldr	r3, [pc, #160]	; (8005e9c <HAL_RCC_ClockConfig+0x30c>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	4925      	ldr	r1, [pc, #148]	; (8005e9c <HAL_RCC_ClockConfig+0x30c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d026      	beq.n	8005e66 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d018      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x2c2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e28:	d013      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x2c2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e32:	d00e      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x2c2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005e3c:	d009      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x2c2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005e46:	d004      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x2c2>
 8005e48:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005e4c:	4812      	ldr	r0, [pc, #72]	; (8005e98 <HAL_RCC_ClockConfig+0x308>)
 8005e4e:	f7fb ff36 	bl	8001cbe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e52:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <HAL_RCC_ClockConfig+0x30c>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	490e      	ldr	r1, [pc, #56]	; (8005e9c <HAL_RCC_ClockConfig+0x30c>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e66:	f000 f821 	bl	8005eac <HAL_RCC_GetSysClockFreq>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <HAL_RCC_ClockConfig+0x30c>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	091b      	lsrs	r3, r3, #4
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	490a      	ldr	r1, [pc, #40]	; (8005ea0 <HAL_RCC_ClockConfig+0x310>)
 8005e78:	5ccb      	ldrb	r3, [r1, r3]
 8005e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7e:	4a09      	ldr	r2, [pc, #36]	; (8005ea4 <HAL_RCC_ClockConfig+0x314>)
 8005e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e82:	4b09      	ldr	r3, [pc, #36]	; (8005ea8 <HAL_RCC_ClockConfig+0x318>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fc fb2e 	bl	80024e8 <HAL_InitTick>

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	0801151c 	.word	0x0801151c
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	080138b8 	.word	0x080138b8
 8005ea4:	2000008c 	.word	0x2000008c
 8005ea8:	20000090 	.word	0x20000090

08005eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eb0:	b090      	sub	sp, #64	; 0x40
 8005eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb8:	2300      	movs	r3, #0
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec4:	4b59      	ldr	r3, [pc, #356]	; (800602c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 030c 	and.w	r3, r3, #12
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d00d      	beq.n	8005eec <HAL_RCC_GetSysClockFreq+0x40>
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	f200 80a1 	bhi.w	8006018 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d003      	beq.n	8005ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ede:	e09b      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ee0:	4b53      	ldr	r3, [pc, #332]	; (8006030 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ee2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005ee4:	e09b      	b.n	800601e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ee6:	4b53      	ldr	r3, [pc, #332]	; (8006034 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ee8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005eea:	e098      	b.n	800601e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eec:	4b4f      	ldr	r3, [pc, #316]	; (800602c <HAL_RCC_GetSysClockFreq+0x180>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ef6:	4b4d      	ldr	r3, [pc, #308]	; (800602c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d028      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f02:	4b4a      	ldr	r3, [pc, #296]	; (800602c <HAL_RCC_GetSysClockFreq+0x180>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	099b      	lsrs	r3, r3, #6
 8005f08:	2200      	movs	r2, #0
 8005f0a:	623b      	str	r3, [r7, #32]
 8005f0c:	627a      	str	r2, [r7, #36]	; 0x24
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f14:	2100      	movs	r1, #0
 8005f16:	4b47      	ldr	r3, [pc, #284]	; (8006034 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f18:	fb03 f201 	mul.w	r2, r3, r1
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	fb00 f303 	mul.w	r3, r0, r3
 8005f22:	4413      	add	r3, r2
 8005f24:	4a43      	ldr	r2, [pc, #268]	; (8006034 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f26:	fba0 1202 	umull	r1, r2, r0, r2
 8005f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f2c:	460a      	mov	r2, r1
 8005f2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f32:	4413      	add	r3, r2
 8005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f38:	2200      	movs	r2, #0
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	61fa      	str	r2, [r7, #28]
 8005f3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005f46:	f7fa fca9 	bl	800089c <__aeabi_uldivmod>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4613      	mov	r3, r2
 8005f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f52:	e053      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f54:	4b35      	ldr	r3, [pc, #212]	; (800602c <HAL_RCC_GetSysClockFreq+0x180>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	099b      	lsrs	r3, r3, #6
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	617a      	str	r2, [r7, #20]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005f66:	f04f 0b00 	mov.w	fp, #0
 8005f6a:	4652      	mov	r2, sl
 8005f6c:	465b      	mov	r3, fp
 8005f6e:	f04f 0000 	mov.w	r0, #0
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	0159      	lsls	r1, r3, #5
 8005f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f7c:	0150      	lsls	r0, r2, #5
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	ebb2 080a 	subs.w	r8, r2, sl
 8005f86:	eb63 090b 	sbc.w	r9, r3, fp
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005f96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005f9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005f9e:	ebb2 0408 	subs.w	r4, r2, r8
 8005fa2:	eb63 0509 	sbc.w	r5, r3, r9
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	f04f 0300 	mov.w	r3, #0
 8005fae:	00eb      	lsls	r3, r5, #3
 8005fb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fb4:	00e2      	lsls	r2, r4, #3
 8005fb6:	4614      	mov	r4, r2
 8005fb8:	461d      	mov	r5, r3
 8005fba:	eb14 030a 	adds.w	r3, r4, sl
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	eb45 030b 	adc.w	r3, r5, fp
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	f04f 0300 	mov.w	r3, #0
 8005fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	028b      	lsls	r3, r1, #10
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fdc:	4621      	mov	r1, r4
 8005fde:	028a      	lsls	r2, r1, #10
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	60fa      	str	r2, [r7, #12]
 8005fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ff0:	f7fa fc54 	bl	800089c <__aeabi_uldivmod>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	0c1b      	lsrs	r3, r3, #16
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	3301      	adds	r3, #1
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800600c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	fbb2 f3f3 	udiv	r3, r2, r3
 8006014:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006016:	e002      	b.n	800601e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_RCC_GetSysClockFreq+0x184>)
 800601a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800601c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006020:	4618      	mov	r0, r3
 8006022:	3740      	adds	r7, #64	; 0x40
 8006024:	46bd      	mov	sp, r7
 8006026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800602a:	bf00      	nop
 800602c:	40023800 	.word	0x40023800
 8006030:	00f42400 	.word	0x00f42400
 8006034:	017d7840 	.word	0x017d7840

08006038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <HAL_RCC_GetHCLKFreq+0x14>)
 800603e:	681b      	ldr	r3, [r3, #0]
}
 8006040:	4618      	mov	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	2000008c 	.word	0x2000008c

08006050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006054:	f7ff fff0 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 8006058:	4602      	mov	r2, r0
 800605a:	4b05      	ldr	r3, [pc, #20]	; (8006070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	0a9b      	lsrs	r3, r3, #10
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	4903      	ldr	r1, [pc, #12]	; (8006074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006066:	5ccb      	ldrb	r3, [r1, r3]
 8006068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800606c:	4618      	mov	r0, r3
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40023800 	.word	0x40023800
 8006074:	080138c8 	.word	0x080138c8

08006078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800607c:	f7ff ffdc 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 8006080:	4602      	mov	r2, r0
 8006082:	4b05      	ldr	r3, [pc, #20]	; (8006098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	0b5b      	lsrs	r3, r3, #13
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	4903      	ldr	r1, [pc, #12]	; (800609c <HAL_RCC_GetPCLK2Freq+0x24>)
 800608e:	5ccb      	ldrb	r3, [r1, r3]
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006094:	4618      	mov	r0, r3
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40023800 	.word	0x40023800
 800609c:	080138c8 	.word	0x080138c8

080060a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	220f      	movs	r2, #15
 80060ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80060b0:	4b12      	ldr	r3, [pc, #72]	; (80060fc <HAL_RCC_GetClockConfig+0x5c>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 0203 	and.w	r2, r3, #3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80060bc:	4b0f      	ldr	r3, [pc, #60]	; (80060fc <HAL_RCC_GetClockConfig+0x5c>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060c8:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <HAL_RCC_GetClockConfig+0x5c>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80060d4:	4b09      	ldr	r3, [pc, #36]	; (80060fc <HAL_RCC_GetClockConfig+0x5c>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	08db      	lsrs	r3, r3, #3
 80060da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060e2:	4b07      	ldr	r3, [pc, #28]	; (8006100 <HAL_RCC_GetClockConfig+0x60>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0207 	and.w	r2, r3, #7
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	601a      	str	r2, [r3, #0]
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40023800 	.word	0x40023800
 8006100:	40023c00 	.word	0x40023c00

08006104 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b0f      	cmp	r3, #15
 8006122:	d904      	bls.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006124:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8006128:	4834      	ldr	r0, [pc, #208]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800612a:	f7fb fdc8 	bl	8001cbe <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d105      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006142:	2b00      	cmp	r3, #0
 8006144:	d066      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d903      	bls.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b07      	cmp	r3, #7
 8006154:	d904      	bls.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006156:	f640 11de 	movw	r1, #2526	; 0x9de
 800615a:	4828      	ldr	r0, [pc, #160]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800615c:	f7fb fdaf 	bl	8001cbe <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b31      	cmp	r3, #49	; 0x31
 8006166:	d904      	bls.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006170:	d904      	bls.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006172:	f640 11df 	movw	r1, #2527	; 0x9df
 8006176:	4821      	ldr	r0, [pc, #132]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006178:	f7fb fda1 	bl	8001cbe <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d903      	bls.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b3f      	cmp	r3, #63	; 0x3f
 800618a:	d904      	bls.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800618c:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8006190:	481a      	ldr	r0, [pc, #104]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006192:	f7fb fd94 	bl	8001cbe <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006196:	4b1a      	ldr	r3, [pc, #104]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800619c:	f7fc fdee 	bl	8002d7c <HAL_GetTick>
 80061a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061a4:	f7fc fdea 	bl	8002d7c <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e1b3      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061b6:	4b13      	ldr	r3, [pc, #76]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f0      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	019b      	lsls	r3, r3, #6
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	071b      	lsls	r3, r3, #28
 80061d4:	490b      	ldr	r1, [pc, #44]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061dc:	4b08      	ldr	r3, [pc, #32]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80061de:	2201      	movs	r2, #1
 80061e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061e2:	f7fc fdcb 	bl	8002d7c <HAL_GetTick>
 80061e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061e8:	e00e      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061ea:	f7fc fdc7 	bl	8002d7c <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d907      	bls.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e190      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80061fc:	08011554 	.word	0x08011554
 8006200:	42470068 	.word	0x42470068
 8006204:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006208:	4b88      	ldr	r3, [pc, #544]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0ea      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8173 	beq.w	8006508 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622a:	f000 80a6 	beq.w	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006236:	f000 80a0 	beq.w	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	4a7c      	ldr	r2, [pc, #496]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	f000 809a 	beq.w	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	4a7a      	ldr	r2, [pc, #488]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800624c:	4293      	cmp	r3, r2
 800624e:	f000 8094 	beq.w	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	4a78      	ldr	r2, [pc, #480]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006258:	4293      	cmp	r3, r2
 800625a:	f000 808e 	beq.w	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	4a76      	ldr	r2, [pc, #472]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006264:	4293      	cmp	r3, r2
 8006266:	f000 8088 	beq.w	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	4a74      	ldr	r2, [pc, #464]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	f000 8082 	beq.w	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	4a72      	ldr	r2, [pc, #456]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d07c      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	4a70      	ldr	r2, [pc, #448]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d077      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	4a6f      	ldr	r2, [pc, #444]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d072      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	4a6d      	ldr	r2, [pc, #436]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d06d      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	4a6c      	ldr	r2, [pc, #432]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d068      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	4a6a      	ldr	r2, [pc, #424]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d063      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	4a69      	ldr	r2, [pc, #420]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d05e      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	4a67      	ldr	r2, [pc, #412]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d059      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	4a66      	ldr	r2, [pc, #408]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d054      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	4a64      	ldr	r2, [pc, #400]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d04f      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	4a63      	ldr	r2, [pc, #396]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d04a      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	4a61      	ldr	r2, [pc, #388]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d045      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	4a60      	ldr	r2, [pc, #384]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d040      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	4a5e      	ldr	r2, [pc, #376]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d03b      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	4a5d      	ldr	r2, [pc, #372]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d036      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	4a5b      	ldr	r2, [pc, #364]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d031      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	4a5a      	ldr	r2, [pc, #360]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d02c      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	4a58      	ldr	r2, [pc, #352]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d027      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	4a57      	ldr	r2, [pc, #348]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d022      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	4a55      	ldr	r2, [pc, #340]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01d      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	4a54      	ldr	r2, [pc, #336]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d018      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	4a52      	ldr	r2, [pc, #328]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	4a51      	ldr	r2, [pc, #324]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00e      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	4a4f      	ldr	r2, [pc, #316]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	4a4e      	ldr	r2, [pc, #312]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006370:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8006374:	484c      	ldr	r0, [pc, #304]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8006376:	f7fb fca2 	bl	8001cbe <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	4b2b      	ldr	r3, [pc, #172]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	4a2a      	ldr	r2, [pc, #168]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006388:	6413      	str	r3, [r2, #64]	; 0x40
 800638a:	4b28      	ldr	r3, [pc, #160]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006396:	4b45      	ldr	r3, [pc, #276]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a44      	ldr	r2, [pc, #272]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800639c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063a2:	f7fc fceb 	bl	8002d7c <HAL_GetTick>
 80063a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063a8:	e008      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063aa:	f7fc fce7 	bl	8002d7c <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d901      	bls.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e0b0      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063bc:	4b3b      	ldr	r3, [pc, #236]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0f0      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063c8:	4b18      	ldr	r3, [pc, #96]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80063ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d073      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d06c      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063e6:	4b11      	ldr	r3, [pc, #68]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80063e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063f0:	4b2f      	ldr	r3, [pc, #188]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063f6:	4b2e      	ldr	r3, [pc, #184]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80063fc:	4a0b      	ldr	r2, [pc, #44]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006402:	4b0a      	ldr	r3, [pc, #40]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b01      	cmp	r3, #1
 800640c:	d158      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800640e:	f7fc fcb5 	bl	8002d7c <HAL_GetTick>
 8006412:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006414:	e04e      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006416:	f7fc fcb1 	bl	8002d7c <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	f241 3288 	movw	r2, #5000	; 0x1388
 8006424:	4293      	cmp	r3, r2
 8006426:	d945      	bls.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e078      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800642c:	40023800 	.word	0x40023800
 8006430:	00020300 	.word	0x00020300
 8006434:	00030300 	.word	0x00030300
 8006438:	00040300 	.word	0x00040300
 800643c:	00050300 	.word	0x00050300
 8006440:	00060300 	.word	0x00060300
 8006444:	00070300 	.word	0x00070300
 8006448:	00080300 	.word	0x00080300
 800644c:	00090300 	.word	0x00090300
 8006450:	000a0300 	.word	0x000a0300
 8006454:	000b0300 	.word	0x000b0300
 8006458:	000c0300 	.word	0x000c0300
 800645c:	000d0300 	.word	0x000d0300
 8006460:	000e0300 	.word	0x000e0300
 8006464:	000f0300 	.word	0x000f0300
 8006468:	00100300 	.word	0x00100300
 800646c:	00110300 	.word	0x00110300
 8006470:	00120300 	.word	0x00120300
 8006474:	00130300 	.word	0x00130300
 8006478:	00140300 	.word	0x00140300
 800647c:	00150300 	.word	0x00150300
 8006480:	00160300 	.word	0x00160300
 8006484:	00170300 	.word	0x00170300
 8006488:	00180300 	.word	0x00180300
 800648c:	00190300 	.word	0x00190300
 8006490:	001a0300 	.word	0x001a0300
 8006494:	001b0300 	.word	0x001b0300
 8006498:	001c0300 	.word	0x001c0300
 800649c:	001d0300 	.word	0x001d0300
 80064a0:	001e0300 	.word	0x001e0300
 80064a4:	001f0300 	.word	0x001f0300
 80064a8:	08011554 	.word	0x08011554
 80064ac:	40007000 	.word	0x40007000
 80064b0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b4:	4b1c      	ldr	r3, [pc, #112]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0aa      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064cc:	d10d      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80064ce:	4b16      	ldr	r3, [pc, #88]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e2:	4911      	ldr	r1, [pc, #68]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	608b      	str	r3, [r1, #8]
 80064e8:	e005      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80064ea:	4b0f      	ldr	r3, [pc, #60]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	4a0e      	ldr	r2, [pc, #56]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80064f4:	6093      	str	r3, [r2, #8]
 80064f6:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006502:	4909      	ldr	r1, [pc, #36]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006504:	4313      	orrs	r3, r2
 8006506:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	7d1a      	ldrb	r2, [r3, #20]
 8006518:	4b04      	ldr	r3, [pc, #16]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800651a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40023800 	.word	0x40023800
 800652c:	424711e0 	.word	0x424711e0

08006530 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e0c4      	b.n	80066d0 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a63      	ldr	r2, [pc, #396]	; (80066d8 <HAL_RTC_Init+0x1a8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_RTC_Init+0x2a>
 8006550:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006554:	4861      	ldr	r0, [pc, #388]	; (80066dc <HAL_RTC_Init+0x1ac>)
 8006556:	f7fb fbb2 	bl	8001cbe <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2b40      	cmp	r3, #64	; 0x40
 8006560:	d008      	beq.n	8006574 <HAL_RTC_Init+0x44>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <HAL_RTC_Init+0x44>
 800656a:	f240 1105 	movw	r1, #261	; 0x105
 800656e:	485b      	ldr	r0, [pc, #364]	; (80066dc <HAL_RTC_Init+0x1ac>)
 8006570:	f7fb fba5 	bl	8001cbe <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	2b7f      	cmp	r3, #127	; 0x7f
 800657a:	d904      	bls.n	8006586 <HAL_RTC_Init+0x56>
 800657c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006580:	4856      	ldr	r0, [pc, #344]	; (80066dc <HAL_RTC_Init+0x1ac>)
 8006582:	f7fb fb9c 	bl	8001cbe <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800658e:	d304      	bcc.n	800659a <HAL_RTC_Init+0x6a>
 8006590:	f240 1107 	movw	r1, #263	; 0x107
 8006594:	4851      	ldr	r0, [pc, #324]	; (80066dc <HAL_RTC_Init+0x1ac>)
 8006596:	f7fb fb92 	bl	8001cbe <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d013      	beq.n	80065ca <HAL_RTC_Init+0x9a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065aa:	d00e      	beq.n	80065ca <HAL_RTC_Init+0x9a>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b4:	d009      	beq.n	80065ca <HAL_RTC_Init+0x9a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065be:	d004      	beq.n	80065ca <HAL_RTC_Init+0x9a>
 80065c0:	f44f 7184 	mov.w	r1, #264	; 0x108
 80065c4:	4845      	ldr	r0, [pc, #276]	; (80066dc <HAL_RTC_Init+0x1ac>)
 80065c6:	f7fb fb7a 	bl	8001cbe <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <HAL_RTC_Init+0xb6>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065da:	d004      	beq.n	80065e6 <HAL_RTC_Init+0xb6>
 80065dc:	f240 1109 	movw	r1, #265	; 0x109
 80065e0:	483e      	ldr	r0, [pc, #248]	; (80066dc <HAL_RTC_Init+0x1ac>)
 80065e2:	f7fb fb6c 	bl	8001cbe <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d009      	beq.n	8006602 <HAL_RTC_Init+0xd2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065f6:	d004      	beq.n	8006602 <HAL_RTC_Init+0xd2>
 80065f8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80065fc:	4837      	ldr	r0, [pc, #220]	; (80066dc <HAL_RTC_Init+0x1ac>)
 80065fe:	f7fb fb5e 	bl	8001cbe <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	7f5b      	ldrb	r3, [r3, #29]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d105      	bne.n	8006618 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fb fbb8 	bl	8001d88 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	22ca      	movs	r2, #202	; 0xca
 8006624:	625a      	str	r2, [r3, #36]	; 0x24
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2253      	movs	r2, #83	; 0x53
 800662c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fad2 	bl	8006bd8 <RTC_EnterInitMode>
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d12c      	bne.n	8006698 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6812      	ldr	r2, [r2, #0]
 8006648:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800664c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006650:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6899      	ldr	r1, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	431a      	orrs	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	68d2      	ldr	r2, [r2, #12]
 8006678:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6919      	ldr	r1, [r3, #16]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	041a      	lsls	r2, r3, #16
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fad9 	bl	8006c46 <RTC_ExitInitMode>
 8006694:	4603      	mov	r3, r0
 8006696:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d113      	bne.n	80066c6 <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80066ac:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699a      	ldr	r2, [r3, #24]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	22ff      	movs	r2, #255	; 0xff
 80066cc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40002800 	.word	0x40002800
 80066dc:	08011590 	.word	0x08011590

080066e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80066e0:	b590      	push	{r4, r7, lr}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <HAL_RTC_SetTime+0x26>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d004      	beq.n	8006706 <HAL_RTC_SetTime+0x26>
 80066fc:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8006700:	489a      	ldr	r0, [pc, #616]	; (800696c <HAL_RTC_SetTime+0x28c>)
 8006702:	f7fb fadc 	bl	8001cbe <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800670e:	d00d      	beq.n	800672c <HAL_RTC_SetTime+0x4c>
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006718:	d008      	beq.n	800672c <HAL_RTC_SetTime+0x4c>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d004      	beq.n	800672c <HAL_RTC_SetTime+0x4c>
 8006722:	f240 21b5 	movw	r1, #693	; 0x2b5
 8006726:	4891      	ldr	r0, [pc, #580]	; (800696c <HAL_RTC_SetTime+0x28c>)
 8006728:	f7fb fac9 	bl	8001cbe <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d009      	beq.n	8006748 <HAL_RTC_SetTime+0x68>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800673c:	d004      	beq.n	8006748 <HAL_RTC_SetTime+0x68>
 800673e:	f240 21b6 	movw	r1, #694	; 0x2b6
 8006742:	488a      	ldr	r0, [pc, #552]	; (800696c <HAL_RTC_SetTime+0x28c>)
 8006744:	f7fb fabb 	bl	8001cbe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	7f1b      	ldrb	r3, [r3, #28]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_RTC_SetTime+0x74>
 8006750:	2302      	movs	r3, #2
 8006752:	e107      	b.n	8006964 <HAL_RTC_SetTime+0x284>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2202      	movs	r2, #2
 800675e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d15c      	bne.n	8006820 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01a      	beq.n	80067aa <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_RTC_SetTime+0xa4>
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b0c      	cmp	r3, #12
 8006782:	d904      	bls.n	800678e <HAL_RTC_SetTime+0xae>
 8006784:	f240 21c1 	movw	r1, #705	; 0x2c1
 8006788:	4878      	ldr	r0, [pc, #480]	; (800696c <HAL_RTC_SetTime+0x28c>)
 800678a:	f7fb fa98 	bl	8001cbe <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	78db      	ldrb	r3, [r3, #3]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d015      	beq.n	80067c2 <HAL_RTC_SetTime+0xe2>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	78db      	ldrb	r3, [r3, #3]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d011      	beq.n	80067c2 <HAL_RTC_SetTime+0xe2>
 800679e:	f240 21c2 	movw	r1, #706	; 0x2c2
 80067a2:	4872      	ldr	r0, [pc, #456]	; (800696c <HAL_RTC_SetTime+0x28c>)
 80067a4:	f7fb fa8b 	bl	8001cbe <assert_failed>
 80067a8:	e00b      	b.n	80067c2 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2200      	movs	r2, #0
 80067ae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b17      	cmp	r3, #23
 80067b6:	d904      	bls.n	80067c2 <HAL_RTC_SetTime+0xe2>
 80067b8:	f240 21c7 	movw	r1, #711	; 0x2c7
 80067bc:	486b      	ldr	r0, [pc, #428]	; (800696c <HAL_RTC_SetTime+0x28c>)
 80067be:	f7fb fa7e 	bl	8001cbe <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	785b      	ldrb	r3, [r3, #1]
 80067c6:	2b3b      	cmp	r3, #59	; 0x3b
 80067c8:	d904      	bls.n	80067d4 <HAL_RTC_SetTime+0xf4>
 80067ca:	f240 21c9 	movw	r1, #713	; 0x2c9
 80067ce:	4867      	ldr	r0, [pc, #412]	; (800696c <HAL_RTC_SetTime+0x28c>)
 80067d0:	f7fb fa75 	bl	8001cbe <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	789b      	ldrb	r3, [r3, #2]
 80067d8:	2b3b      	cmp	r3, #59	; 0x3b
 80067da:	d904      	bls.n	80067e6 <HAL_RTC_SetTime+0x106>
 80067dc:	f240 21ca 	movw	r1, #714	; 0x2ca
 80067e0:	4862      	ldr	r0, [pc, #392]	; (800696c <HAL_RTC_SetTime+0x28c>)
 80067e2:	f7fb fa6c 	bl	8001cbe <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fa50 	bl	8006c90 <RTC_ByteToBcd2>
 80067f0:	4603      	mov	r3, r0
 80067f2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fa49 	bl	8006c90 <RTC_ByteToBcd2>
 80067fe:	4603      	mov	r3, r0
 8006800:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006802:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	789b      	ldrb	r3, [r3, #2]
 8006808:	4618      	mov	r0, r3
 800680a:	f000 fa41 	bl	8006c90 <RTC_ByteToBcd2>
 800680e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006810:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	78db      	ldrb	r3, [r3, #3]
 8006818:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	e062      	b.n	80068e6 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d022      	beq.n	8006874 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fa49 	bl	8006cca <RTC_Bcd2ToByte>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <HAL_RTC_SetTime+0x16e>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fa41 	bl	8006cca <RTC_Bcd2ToByte>
 8006848:	4603      	mov	r3, r0
 800684a:	2b0c      	cmp	r3, #12
 800684c:	d904      	bls.n	8006858 <HAL_RTC_SetTime+0x178>
 800684e:	f240 21d5 	movw	r1, #725	; 0x2d5
 8006852:	4846      	ldr	r0, [pc, #280]	; (800696c <HAL_RTC_SetTime+0x28c>)
 8006854:	f7fb fa33 	bl	8001cbe <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	78db      	ldrb	r3, [r3, #3]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d019      	beq.n	8006894 <HAL_RTC_SetTime+0x1b4>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	78db      	ldrb	r3, [r3, #3]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d015      	beq.n	8006894 <HAL_RTC_SetTime+0x1b4>
 8006868:	f240 21d6 	movw	r1, #726	; 0x2d6
 800686c:	483f      	ldr	r0, [pc, #252]	; (800696c <HAL_RTC_SetTime+0x28c>)
 800686e:	f7fb fa26 	bl	8001cbe <assert_failed>
 8006872:	e00f      	b.n	8006894 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fa23 	bl	8006cca <RTC_Bcd2ToByte>
 8006884:	4603      	mov	r3, r0
 8006886:	2b17      	cmp	r3, #23
 8006888:	d904      	bls.n	8006894 <HAL_RTC_SetTime+0x1b4>
 800688a:	f240 21db 	movw	r1, #731	; 0x2db
 800688e:	4837      	ldr	r0, [pc, #220]	; (800696c <HAL_RTC_SetTime+0x28c>)
 8006890:	f7fb fa15 	bl	8001cbe <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	785b      	ldrb	r3, [r3, #1]
 8006898:	4618      	mov	r0, r3
 800689a:	f000 fa16 	bl	8006cca <RTC_Bcd2ToByte>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b3b      	cmp	r3, #59	; 0x3b
 80068a2:	d904      	bls.n	80068ae <HAL_RTC_SetTime+0x1ce>
 80068a4:	f240 21dd 	movw	r1, #733	; 0x2dd
 80068a8:	4830      	ldr	r0, [pc, #192]	; (800696c <HAL_RTC_SetTime+0x28c>)
 80068aa:	f7fb fa08 	bl	8001cbe <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	789b      	ldrb	r3, [r3, #2]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fa09 	bl	8006cca <RTC_Bcd2ToByte>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b3b      	cmp	r3, #59	; 0x3b
 80068bc:	d904      	bls.n	80068c8 <HAL_RTC_SetTime+0x1e8>
 80068be:	f240 21de 	movw	r1, #734	; 0x2de
 80068c2:	482a      	ldr	r0, [pc, #168]	; (800696c <HAL_RTC_SetTime+0x28c>)
 80068c4:	f7fb f9fb 	bl	8001cbe <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	785b      	ldrb	r3, [r3, #1]
 80068d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068d4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80068da:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	78db      	ldrb	r3, [r3, #3]
 80068e0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	22ca      	movs	r2, #202	; 0xca
 80068ec:	625a      	str	r2, [r3, #36]	; 0x24
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2253      	movs	r2, #83	; 0x53
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 f96e 	bl	8006bd8 <RTC_EnterInitMode>
 80068fc:	4603      	mov	r3, r0
 80068fe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006900:	7cfb      	ldrb	r3, [r7, #19]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d120      	bne.n	8006948 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006910:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006914:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006924:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6899      	ldr	r1, [r3, #8]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	431a      	orrs	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f981 	bl	8006c46 <RTC_ExitInitMode>
 8006944:	4603      	mov	r3, r0
 8006946:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006948:	7cfb      	ldrb	r3, [r7, #19]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	22ff      	movs	r2, #255	; 0xff
 800695a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	771a      	strb	r2, [r3, #28]

  return status;
 8006962:	7cfb      	ldrb	r3, [r7, #19]
}
 8006964:	4618      	mov	r0, r3
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	bd90      	pop	{r4, r7, pc}
 800696c:	08011590 	.word	0x08011590

08006970 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <HAL_RTC_SetDate+0x26>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d004      	beq.n	8006996 <HAL_RTC_SetDate+0x26>
 800698c:	f240 3153 	movw	r1, #851	; 0x353
 8006990:	487c      	ldr	r0, [pc, #496]	; (8006b84 <HAL_RTC_SetDate+0x214>)
 8006992:	f7fb f994 	bl	8001cbe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	7f1b      	ldrb	r3, [r3, #28]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_RTC_SetDate+0x32>
 800699e:	2302      	movs	r3, #2
 80069a0:	e0ec      	b.n	8006b7c <HAL_RTC_SetDate+0x20c>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2202      	movs	r2, #2
 80069ac:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10e      	bne.n	80069d2 <HAL_RTC_SetDate+0x62>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	785b      	ldrb	r3, [r3, #1]
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	f023 0310 	bic.w	r3, r3, #16
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	330a      	adds	r3, #10
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d01c      	beq.n	8006a14 <HAL_RTC_SetDate+0xa4>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d018      	beq.n	8006a14 <HAL_RTC_SetDate+0xa4>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d014      	beq.n	8006a14 <HAL_RTC_SetDate+0xa4>
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d010      	beq.n	8006a14 <HAL_RTC_SetDate+0xa4>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b05      	cmp	r3, #5
 80069f8:	d00c      	beq.n	8006a14 <HAL_RTC_SetDate+0xa4>
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b06      	cmp	r3, #6
 8006a00:	d008      	beq.n	8006a14 <HAL_RTC_SetDate+0xa4>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b07      	cmp	r3, #7
 8006a08:	d004      	beq.n	8006a14 <HAL_RTC_SetDate+0xa4>
 8006a0a:	f240 315f 	movw	r1, #863	; 0x35f
 8006a0e:	485d      	ldr	r0, [pc, #372]	; (8006b84 <HAL_RTC_SetDate+0x214>)
 8006a10:	f7fb f955 	bl	8001cbe <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d13f      	bne.n	8006a9a <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	78db      	ldrb	r3, [r3, #3]
 8006a1e:	2b63      	cmp	r3, #99	; 0x63
 8006a20:	d904      	bls.n	8006a2c <HAL_RTC_SetDate+0xbc>
 8006a22:	f240 3163 	movw	r1, #867	; 0x363
 8006a26:	4857      	ldr	r0, [pc, #348]	; (8006b84 <HAL_RTC_SetDate+0x214>)
 8006a28:	f7fb f949 	bl	8001cbe <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	785b      	ldrb	r3, [r3, #1]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <HAL_RTC_SetDate+0xcc>
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	2b0c      	cmp	r3, #12
 8006a3a:	d904      	bls.n	8006a46 <HAL_RTC_SetDate+0xd6>
 8006a3c:	f44f 7159 	mov.w	r1, #868	; 0x364
 8006a40:	4850      	ldr	r0, [pc, #320]	; (8006b84 <HAL_RTC_SetDate+0x214>)
 8006a42:	f7fb f93c 	bl	8001cbe <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	789b      	ldrb	r3, [r3, #2]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_RTC_SetDate+0xe6>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	789b      	ldrb	r3, [r3, #2]
 8006a52:	2b1f      	cmp	r3, #31
 8006a54:	d904      	bls.n	8006a60 <HAL_RTC_SetDate+0xf0>
 8006a56:	f240 3165 	movw	r1, #869	; 0x365
 8006a5a:	484a      	ldr	r0, [pc, #296]	; (8006b84 <HAL_RTC_SetDate+0x214>)
 8006a5c:	f7fb f92f 	bl	8001cbe <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	78db      	ldrb	r3, [r3, #3]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 f913 	bl	8006c90 <RTC_ByteToBcd2>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 f90c 	bl	8006c90 <RTC_ByteToBcd2>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a7c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	789b      	ldrb	r3, [r3, #2]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 f904 	bl	8006c90 <RTC_ByteToBcd2>
 8006a88:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a8a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	e045      	b.n	8006b26 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	78db      	ldrb	r3, [r3, #3]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 f913 	bl	8006cca <RTC_Bcd2ToByte>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b63      	cmp	r3, #99	; 0x63
 8006aa8:	d904      	bls.n	8006ab4 <HAL_RTC_SetDate+0x144>
 8006aaa:	f240 316e 	movw	r1, #878	; 0x36e
 8006aae:	4835      	ldr	r0, [pc, #212]	; (8006b84 <HAL_RTC_SetDate+0x214>)
 8006ab0:	f7fb f905 	bl	8001cbe <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	785b      	ldrb	r3, [r3, #1]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 f906 	bl	8006cca <RTC_Bcd2ToByte>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d007      	beq.n	8006ad4 <HAL_RTC_SetDate+0x164>
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 f8fe 	bl	8006cca <RTC_Bcd2ToByte>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b0c      	cmp	r3, #12
 8006ad2:	d904      	bls.n	8006ade <HAL_RTC_SetDate+0x16e>
 8006ad4:	f240 316f 	movw	r1, #879	; 0x36f
 8006ad8:	482a      	ldr	r0, [pc, #168]	; (8006b84 <HAL_RTC_SetDate+0x214>)
 8006ada:	f7fb f8f0 	bl	8001cbe <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	789b      	ldrb	r3, [r3, #2]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 f8f1 	bl	8006cca <RTC_Bcd2ToByte>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <HAL_RTC_SetDate+0x18e>
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	789b      	ldrb	r3, [r3, #2]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 f8e9 	bl	8006cca <RTC_Bcd2ToByte>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b1f      	cmp	r3, #31
 8006afc:	d904      	bls.n	8006b08 <HAL_RTC_SetDate+0x198>
 8006afe:	f44f 715c 	mov.w	r1, #880	; 0x370
 8006b02:	4820      	ldr	r0, [pc, #128]	; (8006b84 <HAL_RTC_SetDate+0x214>)
 8006b04:	f7fb f8db 	bl	8001cbe <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	78db      	ldrb	r3, [r3, #3]
 8006b0c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006b14:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006b1a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	22ca      	movs	r2, #202	; 0xca
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2253      	movs	r2, #83	; 0x53
 8006b34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 f84e 	bl	8006bd8 <RTC_EnterInitMode>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006b40:	7cfb      	ldrb	r3, [r7, #19]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10c      	bne.n	8006b60 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f875 	bl	8006c46 <RTC_ExitInitMode>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006b60:	7cfb      	ldrb	r3, [r7, #19]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d102      	bne.n	8006b6c <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	22ff      	movs	r2, #255	; 0xff
 8006b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	771a      	strb	r2, [r3, #28]

  return status;
 8006b7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	371c      	adds	r7, #28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd90      	pop	{r4, r7, pc}
 8006b84:	08011590 	.word	0x08011590

08006b88 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ba2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ba4:	f7fc f8ea 	bl	8002d7c <HAL_GetTick>
 8006ba8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006baa:	e009      	b.n	8006bc0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006bac:	f7fc f8e6 	bl	8002d7c <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bba:	d901      	bls.n	8006bc0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e007      	b.n	8006bd0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0ee      	beq.n	8006bac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d122      	bne.n	8006c3c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c04:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c06:	f7fc f8b9 	bl	8002d7c <HAL_GetTick>
 8006c0a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c0c:	e00c      	b.n	8006c28 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c0e:	f7fc f8b5 	bl	8002d7c <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c1c:	d904      	bls.n	8006c28 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2204      	movs	r2, #4
 8006c22:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d102      	bne.n	8006c3c <RTC_EnterInitMode+0x64>
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d1e8      	bne.n	8006c0e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c60:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff ff89 	bl	8006b88 <HAL_RTC_WaitForSynchro>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006c9e:	e005      	b.n	8006cac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	3b0a      	subs	r3, #10
 8006caa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	2b09      	cmp	r3, #9
 8006cb0:	d8f6      	bhi.n	8006ca0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	b2db      	uxtb	r3, r3
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b085      	sub	sp, #20
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	091b      	lsrs	r3, r3, #4
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	461a      	mov	r2, r3
 8006ce0:	0092      	lsls	r2, r2, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	b2db      	uxtb	r3, r3
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e18c      	b.n	8007030 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a75      	ldr	r2, [pc, #468]	; (8006ef0 <HAL_SPI_Init+0x1ec>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d018      	beq.n	8006d52 <HAL_SPI_Init+0x4e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a73      	ldr	r2, [pc, #460]	; (8006ef4 <HAL_SPI_Init+0x1f0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d013      	beq.n	8006d52 <HAL_SPI_Init+0x4e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a72      	ldr	r2, [pc, #456]	; (8006ef8 <HAL_SPI_Init+0x1f4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00e      	beq.n	8006d52 <HAL_SPI_Init+0x4e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a70      	ldr	r2, [pc, #448]	; (8006efc <HAL_SPI_Init+0x1f8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <HAL_SPI_Init+0x4e>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a6f      	ldr	r2, [pc, #444]	; (8006f00 <HAL_SPI_Init+0x1fc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d004      	beq.n	8006d52 <HAL_SPI_Init+0x4e>
 8006d48:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d4c:	486d      	ldr	r0, [pc, #436]	; (8006f04 <HAL_SPI_Init+0x200>)
 8006d4e:	f7fa ffb6 	bl	8001cbe <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <HAL_SPI_Init+0x6a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d62:	d004      	beq.n	8006d6e <HAL_SPI_Init+0x6a>
 8006d64:	f240 1141 	movw	r1, #321	; 0x141
 8006d68:	4866      	ldr	r0, [pc, #408]	; (8006f04 <HAL_SPI_Init+0x200>)
 8006d6a:	f7fa ffa8 	bl	8001cbe <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00e      	beq.n	8006d94 <HAL_SPI_Init+0x90>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d7e:	d009      	beq.n	8006d94 <HAL_SPI_Init+0x90>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d88:	d004      	beq.n	8006d94 <HAL_SPI_Init+0x90>
 8006d8a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006d8e:	485d      	ldr	r0, [pc, #372]	; (8006f04 <HAL_SPI_Init+0x200>)
 8006d90:	f7fa ff95 	bl	8001cbe <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d9c:	d008      	beq.n	8006db0 <HAL_SPI_Init+0xac>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d004      	beq.n	8006db0 <HAL_SPI_Init+0xac>
 8006da6:	f240 1143 	movw	r1, #323	; 0x143
 8006daa:	4856      	ldr	r0, [pc, #344]	; (8006f04 <HAL_SPI_Init+0x200>)
 8006dac:	f7fa ff87 	bl	8001cbe <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db8:	d00d      	beq.n	8006dd6 <HAL_SPI_Init+0xd2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <HAL_SPI_Init+0xd2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dca:	d004      	beq.n	8006dd6 <HAL_SPI_Init+0xd2>
 8006dcc:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006dd0:	484c      	ldr	r0, [pc, #304]	; (8006f04 <HAL_SPI_Init+0x200>)
 8006dd2:	f7fa ff74 	bl	8001cbe <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d020      	beq.n	8006e20 <HAL_SPI_Init+0x11c>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	2b08      	cmp	r3, #8
 8006de4:	d01c      	beq.n	8006e20 <HAL_SPI_Init+0x11c>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	2b10      	cmp	r3, #16
 8006dec:	d018      	beq.n	8006e20 <HAL_SPI_Init+0x11c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	2b18      	cmp	r3, #24
 8006df4:	d014      	beq.n	8006e20 <HAL_SPI_Init+0x11c>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	d010      	beq.n	8006e20 <HAL_SPI_Init+0x11c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	2b28      	cmp	r3, #40	; 0x28
 8006e04:	d00c      	beq.n	8006e20 <HAL_SPI_Init+0x11c>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	2b30      	cmp	r3, #48	; 0x30
 8006e0c:	d008      	beq.n	8006e20 <HAL_SPI_Init+0x11c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	2b38      	cmp	r3, #56	; 0x38
 8006e14:	d004      	beq.n	8006e20 <HAL_SPI_Init+0x11c>
 8006e16:	f240 1145 	movw	r1, #325	; 0x145
 8006e1a:	483a      	ldr	r0, [pc, #232]	; (8006f04 <HAL_SPI_Init+0x200>)
 8006e1c:	f7fa ff4f 	bl	8001cbe <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d008      	beq.n	8006e3a <HAL_SPI_Init+0x136>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	2b80      	cmp	r3, #128	; 0x80
 8006e2e:	d004      	beq.n	8006e3a <HAL_SPI_Init+0x136>
 8006e30:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006e34:	4833      	ldr	r0, [pc, #204]	; (8006f04 <HAL_SPI_Init+0x200>)
 8006e36:	f7fa ff42 	bl	8001cbe <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d008      	beq.n	8006e54 <HAL_SPI_Init+0x150>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	2b10      	cmp	r3, #16
 8006e48:	d004      	beq.n	8006e54 <HAL_SPI_Init+0x150>
 8006e4a:	f240 1147 	movw	r1, #327	; 0x147
 8006e4e:	482d      	ldr	r0, [pc, #180]	; (8006f04 <HAL_SPI_Init+0x200>)
 8006e50:	f7fa ff35 	bl	8001cbe <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d155      	bne.n	8006f08 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d008      	beq.n	8006e76 <HAL_SPI_Init+0x172>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d004      	beq.n	8006e76 <HAL_SPI_Init+0x172>
 8006e6c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8006e70:	4824      	ldr	r0, [pc, #144]	; (8006f04 <HAL_SPI_Init+0x200>)
 8006e72:	f7fa ff24 	bl	8001cbe <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <HAL_SPI_Init+0x18c>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d004      	beq.n	8006e90 <HAL_SPI_Init+0x18c>
 8006e86:	f240 114b 	movw	r1, #331	; 0x14b
 8006e8a:	481e      	ldr	r0, [pc, #120]	; (8006f04 <HAL_SPI_Init+0x200>)
 8006e8c:	f7fa ff17 	bl	8001cbe <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e98:	d125      	bne.n	8006ee6 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d05d      	beq.n	8006f5e <HAL_SPI_Init+0x25a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d059      	beq.n	8006f5e <HAL_SPI_Init+0x25a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	2b10      	cmp	r3, #16
 8006eb0:	d055      	beq.n	8006f5e <HAL_SPI_Init+0x25a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	2b18      	cmp	r3, #24
 8006eb8:	d051      	beq.n	8006f5e <HAL_SPI_Init+0x25a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d04d      	beq.n	8006f5e <HAL_SPI_Init+0x25a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	2b28      	cmp	r3, #40	; 0x28
 8006ec8:	d049      	beq.n	8006f5e <HAL_SPI_Init+0x25a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	2b30      	cmp	r3, #48	; 0x30
 8006ed0:	d045      	beq.n	8006f5e <HAL_SPI_Init+0x25a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	2b38      	cmp	r3, #56	; 0x38
 8006ed8:	d041      	beq.n	8006f5e <HAL_SPI_Init+0x25a>
 8006eda:	f240 114f 	movw	r1, #335	; 0x14f
 8006ede:	4809      	ldr	r0, [pc, #36]	; (8006f04 <HAL_SPI_Init+0x200>)
 8006ee0:	f7fa feed 	bl	8001cbe <assert_failed>
 8006ee4:	e03b      	b.n	8006f5e <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	61da      	str	r2, [r3, #28]
 8006eec:	e037      	b.n	8006f5e <HAL_SPI_Init+0x25a>
 8006eee:	bf00      	nop
 8006ef0:	40013000 	.word	0x40013000
 8006ef4:	40003800 	.word	0x40003800
 8006ef8:	40003c00 	.word	0x40003c00
 8006efc:	40013400 	.word	0x40013400
 8006f00:	40015000 	.word	0x40015000
 8006f04:	080115c8 	.word	0x080115c8
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d020      	beq.n	8006f52 <HAL_SPI_Init+0x24e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d01c      	beq.n	8006f52 <HAL_SPI_Init+0x24e>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	2b10      	cmp	r3, #16
 8006f1e:	d018      	beq.n	8006f52 <HAL_SPI_Init+0x24e>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	2b18      	cmp	r3, #24
 8006f26:	d014      	beq.n	8006f52 <HAL_SPI_Init+0x24e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d010      	beq.n	8006f52 <HAL_SPI_Init+0x24e>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	2b28      	cmp	r3, #40	; 0x28
 8006f36:	d00c      	beq.n	8006f52 <HAL_SPI_Init+0x24e>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	2b30      	cmp	r3, #48	; 0x30
 8006f3e:	d008      	beq.n	8006f52 <HAL_SPI_Init+0x24e>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	2b38      	cmp	r3, #56	; 0x38
 8006f46:	d004      	beq.n	8006f52 <HAL_SPI_Init+0x24e>
 8006f48:	f240 1159 	movw	r1, #345	; 0x159
 8006f4c:	483a      	ldr	r0, [pc, #232]	; (8007038 <HAL_SPI_Init+0x334>)
 8006f4e:	f7fa feb6 	bl	8001cbe <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d106      	bne.n	8006f7e <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7fa ff67 	bl	8001e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2202      	movs	r2, #2
 8006f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	ea42 0103 	orr.w	r1, r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	0c1b      	lsrs	r3, r3, #16
 8006ffc:	f003 0104 	and.w	r1, r3, #4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	f003 0210 	and.w	r2, r3, #16
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	69da      	ldr	r2, [r3, #28]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800701e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	080115c8 	.word	0x080115c8

0800703c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	4613      	mov	r3, r2
 800704a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <HAL_SPI_Transmit+0x30>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007060:	d004      	beq.n	800706c <HAL_SPI_Transmit+0x30>
 8007062:	f44f 7142 	mov.w	r1, #776	; 0x308
 8007066:	4880      	ldr	r0, [pc, #512]	; (8007268 <HAL_SPI_Transmit+0x22c>)
 8007068:	f7fa fe29 	bl	8001cbe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <HAL_SPI_Transmit+0x3e>
 8007076:	2302      	movs	r3, #2
 8007078:	e128      	b.n	80072cc <HAL_SPI_Transmit+0x290>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007082:	f7fb fe7b 	bl	8002d7c <HAL_GetTick>
 8007086:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b01      	cmp	r3, #1
 8007096:	d002      	beq.n	800709e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8007098:	2302      	movs	r3, #2
 800709a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800709c:	e10d      	b.n	80072ba <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_SPI_Transmit+0x6e>
 80070a4:	88fb      	ldrh	r3, [r7, #6]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d102      	bne.n	80070b0 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070ae:	e104      	b.n	80072ba <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2203      	movs	r2, #3
 80070b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	88fa      	ldrh	r2, [r7, #6]
 80070c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	88fa      	ldrh	r2, [r7, #6]
 80070ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f6:	d10f      	bne.n	8007118 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007106:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007116:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007122:	2b40      	cmp	r3, #64	; 0x40
 8007124:	d007      	beq.n	8007136 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007134:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800713e:	d14b      	bne.n	80071d8 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_SPI_Transmit+0x112>
 8007148:	8afb      	ldrh	r3, [r7, #22]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d13e      	bne.n	80071cc <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	881a      	ldrh	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	1c9a      	adds	r2, r3, #2
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b01      	subs	r3, #1
 800716c:	b29a      	uxth	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007172:	e02b      	b.n	80071cc <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b02      	cmp	r3, #2
 8007180:	d112      	bne.n	80071a8 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	881a      	ldrh	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007192:	1c9a      	adds	r2, r3, #2
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80071a6:	e011      	b.n	80071cc <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071a8:	f7fb fde8 	bl	8002d7c <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d803      	bhi.n	80071c0 <HAL_SPI_Transmit+0x184>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071be:	d102      	bne.n	80071c6 <HAL_SPI_Transmit+0x18a>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071ca:	e076      	b.n	80072ba <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1ce      	bne.n	8007174 <HAL_SPI_Transmit+0x138>
 80071d6:	e04e      	b.n	8007276 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <HAL_SPI_Transmit+0x1aa>
 80071e0:	8afb      	ldrh	r3, [r7, #22]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d142      	bne.n	800726c <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	330c      	adds	r3, #12
 80071f0:	7812      	ldrb	r2, [r2, #0]
 80071f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007202:	b29b      	uxth	r3, r3
 8007204:	3b01      	subs	r3, #1
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800720c:	e02e      	b.n	800726c <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b02      	cmp	r3, #2
 800721a:	d113      	bne.n	8007244 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	330c      	adds	r3, #12
 8007226:	7812      	ldrb	r2, [r2, #0]
 8007228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007238:	b29b      	uxth	r3, r3
 800723a:	3b01      	subs	r3, #1
 800723c:	b29a      	uxth	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	86da      	strh	r2, [r3, #54]	; 0x36
 8007242:	e013      	b.n	800726c <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007244:	f7fb fd9a 	bl	8002d7c <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d803      	bhi.n	800725c <HAL_SPI_Transmit+0x220>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725a:	d102      	bne.n	8007262 <HAL_SPI_Transmit+0x226>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d104      	bne.n	800726c <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007266:	e028      	b.n	80072ba <HAL_SPI_Transmit+0x27e>
 8007268:	080115c8 	.word	0x080115c8
    while (hspi->TxXferCount > 0U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007270:	b29b      	uxth	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1cb      	bne.n	800720e <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f8b2 	bl	80073e4 <SPI_EndRxTxTransaction>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2220      	movs	r2, #32
 800728a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007294:	2300      	movs	r3, #0
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	613b      	str	r3, [r7, #16]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	77fb      	strb	r3, [r7, #31]
 80072b6:	e000      	b.n	80072ba <HAL_SPI_Transmit+0x27e>
  }

error:
 80072b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3720      	adds	r7, #32
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	4613      	mov	r3, r2
 80072e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072e4:	f7fb fd4a 	bl	8002d7c <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	1a9b      	subs	r3, r3, r2
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	4413      	add	r3, r2
 80072f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072f4:	f7fb fd42 	bl	8002d7c <HAL_GetTick>
 80072f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072fa:	4b39      	ldr	r3, [pc, #228]	; (80073e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	015b      	lsls	r3, r3, #5
 8007300:	0d1b      	lsrs	r3, r3, #20
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	fb02 f303 	mul.w	r3, r2, r3
 8007308:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800730a:	e054      	b.n	80073b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007312:	d050      	beq.n	80073b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007314:	f7fb fd32 	bl	8002d7c <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	429a      	cmp	r2, r3
 8007322:	d902      	bls.n	800732a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d13d      	bne.n	80073a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007342:	d111      	bne.n	8007368 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800734c:	d004      	beq.n	8007358 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007356:	d107      	bne.n	8007368 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007366:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007370:	d10f      	bne.n	8007392 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007390:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e017      	b.n	80073d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4013      	ands	r3, r2
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	bf0c      	ite	eq
 80073c6:	2301      	moveq	r3, #1
 80073c8:	2300      	movne	r3, #0
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d19b      	bne.n	800730c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3720      	adds	r7, #32
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	2000008c 	.word	0x2000008c

080073e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af02      	add	r7, sp, #8
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80073f0:	4b1b      	ldr	r3, [pc, #108]	; (8007460 <SPI_EndRxTxTransaction+0x7c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1b      	ldr	r2, [pc, #108]	; (8007464 <SPI_EndRxTxTransaction+0x80>)
 80073f6:	fba2 2303 	umull	r2, r3, r2, r3
 80073fa:	0d5b      	lsrs	r3, r3, #21
 80073fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007400:	fb02 f303 	mul.w	r3, r2, r3
 8007404:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800740e:	d112      	bne.n	8007436 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2200      	movs	r2, #0
 8007418:	2180      	movs	r1, #128	; 0x80
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f7ff ff5a 	bl	80072d4 <SPI_WaitFlagStateUntilTimeout>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d016      	beq.n	8007454 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742a:	f043 0220 	orr.w	r2, r3, #32
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e00f      	b.n	8007456 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	3b01      	subs	r3, #1
 8007440:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744c:	2b80      	cmp	r3, #128	; 0x80
 800744e:	d0f2      	beq.n	8007436 <SPI_EndRxTxTransaction+0x52>
 8007450:	e000      	b.n	8007454 <SPI_EndRxTxTransaction+0x70>
        break;
 8007452:	bf00      	nop
  }

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	2000008c 	.word	0x2000008c
 8007464:	165e9f81 	.word	0x165e9f81

08007468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e0a7      	b.n	80075ca <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a55      	ldr	r2, [pc, #340]	; (80075d4 <HAL_TIM_Base_Init+0x16c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d027      	beq.n	80074d4 <HAL_TIM_Base_Init+0x6c>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800748c:	d022      	beq.n	80074d4 <HAL_TIM_Base_Init+0x6c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a51      	ldr	r2, [pc, #324]	; (80075d8 <HAL_TIM_Base_Init+0x170>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d01d      	beq.n	80074d4 <HAL_TIM_Base_Init+0x6c>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a4f      	ldr	r2, [pc, #316]	; (80075dc <HAL_TIM_Base_Init+0x174>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d018      	beq.n	80074d4 <HAL_TIM_Base_Init+0x6c>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a4e      	ldr	r2, [pc, #312]	; (80075e0 <HAL_TIM_Base_Init+0x178>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d013      	beq.n	80074d4 <HAL_TIM_Base_Init+0x6c>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a4c      	ldr	r2, [pc, #304]	; (80075e4 <HAL_TIM_Base_Init+0x17c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00e      	beq.n	80074d4 <HAL_TIM_Base_Init+0x6c>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a4b      	ldr	r2, [pc, #300]	; (80075e8 <HAL_TIM_Base_Init+0x180>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d009      	beq.n	80074d4 <HAL_TIM_Base_Init+0x6c>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a49      	ldr	r2, [pc, #292]	; (80075ec <HAL_TIM_Base_Init+0x184>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d004      	beq.n	80074d4 <HAL_TIM_Base_Init+0x6c>
 80074ca:	f240 1113 	movw	r1, #275	; 0x113
 80074ce:	4848      	ldr	r0, [pc, #288]	; (80075f0 <HAL_TIM_Base_Init+0x188>)
 80074d0:	f7fa fbf5 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d014      	beq.n	8007506 <HAL_TIM_Base_Init+0x9e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b10      	cmp	r3, #16
 80074e2:	d010      	beq.n	8007506 <HAL_TIM_Base_Init+0x9e>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d00c      	beq.n	8007506 <HAL_TIM_Base_Init+0x9e>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	2b40      	cmp	r3, #64	; 0x40
 80074f2:	d008      	beq.n	8007506 <HAL_TIM_Base_Init+0x9e>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	2b60      	cmp	r3, #96	; 0x60
 80074fa:	d004      	beq.n	8007506 <HAL_TIM_Base_Init+0x9e>
 80074fc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007500:	483b      	ldr	r0, [pc, #236]	; (80075f0 <HAL_TIM_Base_Init+0x188>)
 8007502:	f7fa fbdc 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00e      	beq.n	800752c <HAL_TIM_Base_Init+0xc4>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007516:	d009      	beq.n	800752c <HAL_TIM_Base_Init+0xc4>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007520:	d004      	beq.n	800752c <HAL_TIM_Base_Init+0xc4>
 8007522:	f240 1115 	movw	r1, #277	; 0x115
 8007526:	4832      	ldr	r0, [pc, #200]	; (80075f0 <HAL_TIM_Base_Init+0x188>)
 8007528:	f7fa fbc9 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d008      	beq.n	8007546 <HAL_TIM_Base_Init+0xde>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	2b80      	cmp	r3, #128	; 0x80
 800753a:	d004      	beq.n	8007546 <HAL_TIM_Base_Init+0xde>
 800753c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8007540:	482b      	ldr	r0, [pc, #172]	; (80075f0 <HAL_TIM_Base_Init+0x188>)
 8007542:	f7fa fbbc 	bl	8001cbe <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d106      	bne.n	8007560 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fb fa0e 	bl	800297c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	4619      	mov	r1, r3
 8007572:	4610      	mov	r0, r2
 8007574:	f001 fa32 	bl	80089dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	40010000 	.word	0x40010000
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40000c00 	.word	0x40000c00
 80075e4:	40014000 	.word	0x40014000
 80075e8:	40014400 	.word	0x40014400
 80075ec:	40014800 	.word	0x40014800
 80075f0:	08011600 	.word	0x08011600

080075f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a3d      	ldr	r2, [pc, #244]	; (80076f8 <HAL_TIM_Base_Start_IT+0x104>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d027      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x62>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760e:	d022      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x62>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a39      	ldr	r2, [pc, #228]	; (80076fc <HAL_TIM_Base_Start_IT+0x108>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d01d      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x62>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a38      	ldr	r2, [pc, #224]	; (8007700 <HAL_TIM_Base_Start_IT+0x10c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d018      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x62>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a36      	ldr	r2, [pc, #216]	; (8007704 <HAL_TIM_Base_Start_IT+0x110>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d013      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x62>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a35      	ldr	r2, [pc, #212]	; (8007708 <HAL_TIM_Base_Start_IT+0x114>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00e      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x62>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a33      	ldr	r2, [pc, #204]	; (800770c <HAL_TIM_Base_Start_IT+0x118>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d009      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x62>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a32      	ldr	r2, [pc, #200]	; (8007710 <HAL_TIM_Base_Start_IT+0x11c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d004      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x62>
 800764c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8007650:	4830      	ldr	r0, [pc, #192]	; (8007714 <HAL_TIM_Base_Start_IT+0x120>)
 8007652:	f7fa fb34 	bl	8001cbe <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b01      	cmp	r3, #1
 8007660:	d001      	beq.n	8007666 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e044      	b.n	80076f0 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2202      	movs	r2, #2
 800766a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f042 0201 	orr.w	r2, r2, #1
 800767c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a1d      	ldr	r2, [pc, #116]	; (80076f8 <HAL_TIM_Base_Start_IT+0x104>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d018      	beq.n	80076ba <HAL_TIM_Base_Start_IT+0xc6>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007690:	d013      	beq.n	80076ba <HAL_TIM_Base_Start_IT+0xc6>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a19      	ldr	r2, [pc, #100]	; (80076fc <HAL_TIM_Base_Start_IT+0x108>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00e      	beq.n	80076ba <HAL_TIM_Base_Start_IT+0xc6>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a17      	ldr	r2, [pc, #92]	; (8007700 <HAL_TIM_Base_Start_IT+0x10c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d009      	beq.n	80076ba <HAL_TIM_Base_Start_IT+0xc6>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a16      	ldr	r2, [pc, #88]	; (8007704 <HAL_TIM_Base_Start_IT+0x110>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d004      	beq.n	80076ba <HAL_TIM_Base_Start_IT+0xc6>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a14      	ldr	r2, [pc, #80]	; (8007708 <HAL_TIM_Base_Start_IT+0x114>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d111      	bne.n	80076de <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b06      	cmp	r3, #6
 80076ca:	d010      	beq.n	80076ee <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0201 	orr.w	r2, r2, #1
 80076da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076dc:	e007      	b.n	80076ee <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0201 	orr.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	40010000 	.word	0x40010000
 80076fc:	40000400 	.word	0x40000400
 8007700:	40000800 	.word	0x40000800
 8007704:	40000c00 	.word	0x40000c00
 8007708:	40014000 	.word	0x40014000
 800770c:	40014400 	.word	0x40014400
 8007710:	40014800 	.word	0x40014800
 8007714:	08011600 	.word	0x08011600

08007718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e0a7      	b.n	800787a <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a55      	ldr	r2, [pc, #340]	; (8007884 <HAL_TIM_PWM_Init+0x16c>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d027      	beq.n	8007784 <HAL_TIM_PWM_Init+0x6c>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773c:	d022      	beq.n	8007784 <HAL_TIM_PWM_Init+0x6c>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a51      	ldr	r2, [pc, #324]	; (8007888 <HAL_TIM_PWM_Init+0x170>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d01d      	beq.n	8007784 <HAL_TIM_PWM_Init+0x6c>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a4f      	ldr	r2, [pc, #316]	; (800788c <HAL_TIM_PWM_Init+0x174>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d018      	beq.n	8007784 <HAL_TIM_PWM_Init+0x6c>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a4e      	ldr	r2, [pc, #312]	; (8007890 <HAL_TIM_PWM_Init+0x178>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d013      	beq.n	8007784 <HAL_TIM_PWM_Init+0x6c>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a4c      	ldr	r2, [pc, #304]	; (8007894 <HAL_TIM_PWM_Init+0x17c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00e      	beq.n	8007784 <HAL_TIM_PWM_Init+0x6c>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a4b      	ldr	r2, [pc, #300]	; (8007898 <HAL_TIM_PWM_Init+0x180>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d009      	beq.n	8007784 <HAL_TIM_PWM_Init+0x6c>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a49      	ldr	r2, [pc, #292]	; (800789c <HAL_TIM_PWM_Init+0x184>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d004      	beq.n	8007784 <HAL_TIM_PWM_Init+0x6c>
 800777a:	f240 5129 	movw	r1, #1321	; 0x529
 800777e:	4848      	ldr	r0, [pc, #288]	; (80078a0 <HAL_TIM_PWM_Init+0x188>)
 8007780:	f7fa fa9d 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d014      	beq.n	80077b6 <HAL_TIM_PWM_Init+0x9e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b10      	cmp	r3, #16
 8007792:	d010      	beq.n	80077b6 <HAL_TIM_PWM_Init+0x9e>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2b20      	cmp	r3, #32
 800779a:	d00c      	beq.n	80077b6 <HAL_TIM_PWM_Init+0x9e>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b40      	cmp	r3, #64	; 0x40
 80077a2:	d008      	beq.n	80077b6 <HAL_TIM_PWM_Init+0x9e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	2b60      	cmp	r3, #96	; 0x60
 80077aa:	d004      	beq.n	80077b6 <HAL_TIM_PWM_Init+0x9e>
 80077ac:	f240 512a 	movw	r1, #1322	; 0x52a
 80077b0:	483b      	ldr	r0, [pc, #236]	; (80078a0 <HAL_TIM_PWM_Init+0x188>)
 80077b2:	f7fa fa84 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00e      	beq.n	80077dc <HAL_TIM_PWM_Init+0xc4>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c6:	d009      	beq.n	80077dc <HAL_TIM_PWM_Init+0xc4>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077d0:	d004      	beq.n	80077dc <HAL_TIM_PWM_Init+0xc4>
 80077d2:	f240 512b 	movw	r1, #1323	; 0x52b
 80077d6:	4832      	ldr	r0, [pc, #200]	; (80078a0 <HAL_TIM_PWM_Init+0x188>)
 80077d8:	f7fa fa71 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d008      	beq.n	80077f6 <HAL_TIM_PWM_Init+0xde>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	2b80      	cmp	r3, #128	; 0x80
 80077ea:	d004      	beq.n	80077f6 <HAL_TIM_PWM_Init+0xde>
 80077ec:	f240 512c 	movw	r1, #1324	; 0x52c
 80077f0:	482b      	ldr	r0, [pc, #172]	; (80078a0 <HAL_TIM_PWM_Init+0x188>)
 80077f2:	f7fa fa64 	bl	8001cbe <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f84a 	bl	80078a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	4610      	mov	r0, r2
 8007824:	f001 f8da 	bl	80089dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	40010000 	.word	0x40010000
 8007888:	40000400 	.word	0x40000400
 800788c:	40000800 	.word	0x40000800
 8007890:	40000c00 	.word	0x40000c00
 8007894:	40014000 	.word	0x40014000
 8007898:	40014400 	.word	0x40014400
 800789c:	40014800 	.word	0x40014800
 80078a0:	08011600 	.word	0x08011600

080078a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e18a      	b.n	8007be2 <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a78      	ldr	r2, [pc, #480]	; (8007ab4 <HAL_TIM_Encoder_Init+0x1fc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d01d      	beq.n	8007912 <HAL_TIM_Encoder_Init+0x5a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078de:	d018      	beq.n	8007912 <HAL_TIM_Encoder_Init+0x5a>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a74      	ldr	r2, [pc, #464]	; (8007ab8 <HAL_TIM_Encoder_Init+0x200>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d013      	beq.n	8007912 <HAL_TIM_Encoder_Init+0x5a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a73      	ldr	r2, [pc, #460]	; (8007abc <HAL_TIM_Encoder_Init+0x204>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d00e      	beq.n	8007912 <HAL_TIM_Encoder_Init+0x5a>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a71      	ldr	r2, [pc, #452]	; (8007ac0 <HAL_TIM_Encoder_Init+0x208>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d009      	beq.n	8007912 <HAL_TIM_Encoder_Init+0x5a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a70      	ldr	r2, [pc, #448]	; (8007ac4 <HAL_TIM_Encoder_Init+0x20c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d004      	beq.n	8007912 <HAL_TIM_Encoder_Init+0x5a>
 8007908:	f640 31d1 	movw	r1, #3025	; 0xbd1
 800790c:	486e      	ldr	r0, [pc, #440]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 800790e:	f7fa f9d6 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d014      	beq.n	8007944 <HAL_TIM_Encoder_Init+0x8c>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	2b10      	cmp	r3, #16
 8007920:	d010      	beq.n	8007944 <HAL_TIM_Encoder_Init+0x8c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	2b20      	cmp	r3, #32
 8007928:	d00c      	beq.n	8007944 <HAL_TIM_Encoder_Init+0x8c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	2b40      	cmp	r3, #64	; 0x40
 8007930:	d008      	beq.n	8007944 <HAL_TIM_Encoder_Init+0x8c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	2b60      	cmp	r3, #96	; 0x60
 8007938:	d004      	beq.n	8007944 <HAL_TIM_Encoder_Init+0x8c>
 800793a:	f640 31d2 	movw	r1, #3026	; 0xbd2
 800793e:	4862      	ldr	r0, [pc, #392]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 8007940:	f7fa f9bd 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00e      	beq.n	800796a <HAL_TIM_Encoder_Init+0xb2>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007954:	d009      	beq.n	800796a <HAL_TIM_Encoder_Init+0xb2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800795e:	d004      	beq.n	800796a <HAL_TIM_Encoder_Init+0xb2>
 8007960:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8007964:	4858      	ldr	r0, [pc, #352]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 8007966:	f7fa f9aa 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d008      	beq.n	8007984 <HAL_TIM_Encoder_Init+0xcc>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	2b80      	cmp	r3, #128	; 0x80
 8007978:	d004      	beq.n	8007984 <HAL_TIM_Encoder_Init+0xcc>
 800797a:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800797e:	4852      	ldr	r0, [pc, #328]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 8007980:	f7fa f99d 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d00c      	beq.n	80079a6 <HAL_TIM_Encoder_Init+0xee>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b02      	cmp	r3, #2
 8007992:	d008      	beq.n	80079a6 <HAL_TIM_Encoder_Init+0xee>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b03      	cmp	r3, #3
 800799a:	d004      	beq.n	80079a6 <HAL_TIM_Encoder_Init+0xee>
 800799c:	f640 31d5 	movw	r1, #3029	; 0xbd5
 80079a0:	4849      	ldr	r0, [pc, #292]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 80079a2:	f7fa f98c 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d00c      	beq.n	80079c8 <HAL_TIM_Encoder_Init+0x110>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d008      	beq.n	80079c8 <HAL_TIM_Encoder_Init+0x110>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d004      	beq.n	80079c8 <HAL_TIM_Encoder_Init+0x110>
 80079be:	f640 31d6 	movw	r1, #3030	; 0xbd6
 80079c2:	4841      	ldr	r0, [pc, #260]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 80079c4:	f7fa f97b 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d00c      	beq.n	80079ea <HAL_TIM_Encoder_Init+0x132>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d008      	beq.n	80079ea <HAL_TIM_Encoder_Init+0x132>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d004      	beq.n	80079ea <HAL_TIM_Encoder_Init+0x132>
 80079e0:	f640 31d7 	movw	r1, #3031	; 0xbd7
 80079e4:	4838      	ldr	r0, [pc, #224]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 80079e6:	f7fa f96a 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d008      	beq.n	8007a04 <HAL_TIM_Encoder_Init+0x14c>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d004      	beq.n	8007a04 <HAL_TIM_Encoder_Init+0x14c>
 80079fa:	f640 31d8 	movw	r1, #3032	; 0xbd8
 80079fe:	4832      	ldr	r0, [pc, #200]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 8007a00:	f7fa f95d 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d008      	beq.n	8007a1e <HAL_TIM_Encoder_Init+0x166>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d004      	beq.n	8007a1e <HAL_TIM_Encoder_Init+0x166>
 8007a14:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8007a18:	482b      	ldr	r0, [pc, #172]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 8007a1a:	f7fa f950 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d010      	beq.n	8007a48 <HAL_TIM_Encoder_Init+0x190>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	2b04      	cmp	r3, #4
 8007a2c:	d00c      	beq.n	8007a48 <HAL_TIM_Encoder_Init+0x190>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	2b08      	cmp	r3, #8
 8007a34:	d008      	beq.n	8007a48 <HAL_TIM_Encoder_Init+0x190>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	2b0c      	cmp	r3, #12
 8007a3c:	d004      	beq.n	8007a48 <HAL_TIM_Encoder_Init+0x190>
 8007a3e:	f640 31da 	movw	r1, #3034	; 0xbda
 8007a42:	4821      	ldr	r0, [pc, #132]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 8007a44:	f7fa f93b 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d010      	beq.n	8007a72 <HAL_TIM_Encoder_Init+0x1ba>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d00c      	beq.n	8007a72 <HAL_TIM_Encoder_Init+0x1ba>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d008      	beq.n	8007a72 <HAL_TIM_Encoder_Init+0x1ba>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	2b0c      	cmp	r3, #12
 8007a66:	d004      	beq.n	8007a72 <HAL_TIM_Encoder_Init+0x1ba>
 8007a68:	f640 31db 	movw	r1, #3035	; 0xbdb
 8007a6c:	4816      	ldr	r0, [pc, #88]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 8007a6e:	f7fa f926 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	2b0f      	cmp	r3, #15
 8007a78:	d904      	bls.n	8007a84 <HAL_TIM_Encoder_Init+0x1cc>
 8007a7a:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8007a7e:	4812      	ldr	r0, [pc, #72]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 8007a80:	f7fa f91d 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	2b0f      	cmp	r3, #15
 8007a8a:	d904      	bls.n	8007a96 <HAL_TIM_Encoder_Init+0x1de>
 8007a8c:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8007a90:	480d      	ldr	r0, [pc, #52]	; (8007ac8 <HAL_TIM_Encoder_Init+0x210>)
 8007a92:	f7fa f914 	bl	8001cbe <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d114      	bne.n	8007acc <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fa ffda 	bl	8002a64 <HAL_TIM_Encoder_MspInit>
 8007ab0:	e00c      	b.n	8007acc <HAL_TIM_Encoder_Init+0x214>
 8007ab2:	bf00      	nop
 8007ab4:	40010000 	.word	0x40010000
 8007ab8:	40000400 	.word	0x40000400
 8007abc:	40000800 	.word	0x40000800
 8007ac0:	40000c00 	.word	0x40000c00
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	08011600 	.word	0x08011600
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	6812      	ldr	r2, [r2, #0]
 8007ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ae2:	f023 0307 	bic.w	r3, r3, #7
 8007ae6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4619      	mov	r1, r3
 8007af2:	4610      	mov	r0, r2
 8007af4:	f000 ff72 	bl	80089dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b20:	f023 0303 	bic.w	r3, r3, #3
 8007b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	021b      	lsls	r3, r3, #8
 8007b30:	4313      	orrs	r3, r2
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007b3e:	f023 030c 	bic.w	r3, r3, #12
 8007b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	011a      	lsls	r2, r3, #4
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	031b      	lsls	r3, r3, #12
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007b7c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007b84:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	4313      	orrs	r3, r2
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop

08007bec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bfc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a4d      	ldr	r2, [pc, #308]	; (8007d50 <HAL_TIM_Encoder_Start+0x164>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d01d      	beq.n	8007c5c <HAL_TIM_Encoder_Start+0x70>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c28:	d018      	beq.n	8007c5c <HAL_TIM_Encoder_Start+0x70>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a49      	ldr	r2, [pc, #292]	; (8007d54 <HAL_TIM_Encoder_Start+0x168>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d013      	beq.n	8007c5c <HAL_TIM_Encoder_Start+0x70>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a47      	ldr	r2, [pc, #284]	; (8007d58 <HAL_TIM_Encoder_Start+0x16c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00e      	beq.n	8007c5c <HAL_TIM_Encoder_Start+0x70>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a46      	ldr	r2, [pc, #280]	; (8007d5c <HAL_TIM_Encoder_Start+0x170>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d009      	beq.n	8007c5c <HAL_TIM_Encoder_Start+0x70>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a44      	ldr	r2, [pc, #272]	; (8007d60 <HAL_TIM_Encoder_Start+0x174>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d004      	beq.n	8007c5c <HAL_TIM_Encoder_Start+0x70>
 8007c52:	f640 418e 	movw	r1, #3214	; 0xc8e
 8007c56:	4843      	ldr	r0, [pc, #268]	; (8007d64 <HAL_TIM_Encoder_Start+0x178>)
 8007c58:	f7fa f831 	bl	8001cbe <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d110      	bne.n	8007c84 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d102      	bne.n	8007c6e <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c68:	7b7b      	ldrb	r3, [r7, #13]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d001      	beq.n	8007c72 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e069      	b.n	8007d46 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2202      	movs	r2, #2
 8007c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c82:	e031      	b.n	8007ce8 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d110      	bne.n	8007cac <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c8a:	7bbb      	ldrb	r3, [r7, #14]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d102      	bne.n	8007c96 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c90:	7b3b      	ldrb	r3, [r7, #12]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d001      	beq.n	8007c9a <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e055      	b.n	8007d46 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007caa:	e01d      	b.n	8007ce8 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d108      	bne.n	8007cc4 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d105      	bne.n	8007cc4 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cb8:	7b7b      	ldrb	r3, [r7, #13]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d102      	bne.n	8007cc4 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cbe:	7b3b      	ldrb	r3, [r7, #12]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d001      	beq.n	8007cc8 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e03e      	b.n	8007d46 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <HAL_TIM_Encoder_Start+0x10a>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d008      	beq.n	8007d06 <HAL_TIM_Encoder_Start+0x11a>
 8007cf4:	e00f      	b.n	8007d16 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 f99c 	bl	800903c <TIM_CCxChannelCmd>
      break;
 8007d04:	e016      	b.n	8007d34 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	2104      	movs	r1, #4
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 f994 	bl	800903c <TIM_CCxChannelCmd>
      break;
 8007d14:	e00e      	b.n	8007d34 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f001 f98c 	bl	800903c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	2104      	movs	r1, #4
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 f985 	bl	800903c <TIM_CCxChannelCmd>
      break;
 8007d32:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	40010000 	.word	0x40010000
 8007d54:	40000400 	.word	0x40000400
 8007d58:	40000800 	.word	0x40000800
 8007d5c:	40000c00 	.word	0x40000c00
 8007d60:	40014000 	.word	0x40014000
 8007d64:	08011600 	.word	0x08011600

08007d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d122      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d11b      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f06f 0202 	mvn.w	r2, #2
 8007d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fda4 	bl	80088f8 <HAL_TIM_IC_CaptureCallback>
 8007db0:	e005      	b.n	8007dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fd96 	bl	80088e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fda7 	bl	800890c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	f003 0304 	and.w	r3, r3, #4
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d122      	bne.n	8007e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d11b      	bne.n	8007e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f06f 0204 	mvn.w	r2, #4
 8007de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2202      	movs	r2, #2
 8007dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fd7a 	bl	80088f8 <HAL_TIM_IC_CaptureCallback>
 8007e04:	e005      	b.n	8007e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fd6c 	bl	80088e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fd7d 	bl	800890c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f003 0308 	and.w	r3, r3, #8
 8007e22:	2b08      	cmp	r3, #8
 8007e24:	d122      	bne.n	8007e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f003 0308 	and.w	r3, r3, #8
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d11b      	bne.n	8007e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f06f 0208 	mvn.w	r2, #8
 8007e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2204      	movs	r2, #4
 8007e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fd50 	bl	80088f8 <HAL_TIM_IC_CaptureCallback>
 8007e58:	e005      	b.n	8007e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fd42 	bl	80088e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fd53 	bl	800890c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	f003 0310 	and.w	r3, r3, #16
 8007e76:	2b10      	cmp	r3, #16
 8007e78:	d122      	bne.n	8007ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f003 0310 	and.w	r3, r3, #16
 8007e84:	2b10      	cmp	r3, #16
 8007e86:	d11b      	bne.n	8007ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f06f 0210 	mvn.w	r2, #16
 8007e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2208      	movs	r2, #8
 8007e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fd26 	bl	80088f8 <HAL_TIM_IC_CaptureCallback>
 8007eac:	e005      	b.n	8007eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fd18 	bl	80088e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fd29 	bl	800890c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d10e      	bne.n	8007eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d107      	bne.n	8007eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f06f 0201 	mvn.w	r2, #1
 8007ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7f9 fed2 	bl	8001c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef6:	2b80      	cmp	r3, #128	; 0x80
 8007ef8:	d10e      	bne.n	8007f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f04:	2b80      	cmp	r3, #128	; 0x80
 8007f06:	d107      	bne.n	8007f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 f9c6 	bl	80092a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f22:	2b40      	cmp	r3, #64	; 0x40
 8007f24:	d10e      	bne.n	8007f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	d107      	bne.n	8007f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fcee 	bl	8008920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	f003 0320 	and.w	r3, r3, #32
 8007f4e:	2b20      	cmp	r3, #32
 8007f50:	d10e      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0320 	and.w	r3, r3, #32
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	d107      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f06f 0220 	mvn.w	r2, #32
 8007f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f001 f990 	bl	8009290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d010      	beq.n	8007fb0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	d00d      	beq.n	8007fb0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b08      	cmp	r3, #8
 8007f98:	d00a      	beq.n	8007fb0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b0c      	cmp	r3, #12
 8007f9e:	d007      	beq.n	8007fb0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b3c      	cmp	r3, #60	; 0x3c
 8007fa4:	d004      	beq.n	8007fb0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007fa6:	f241 0177 	movw	r1, #4215	; 0x1077
 8007faa:	4893      	ldr	r0, [pc, #588]	; (80081f8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007fac:	f7f9 fe87 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b60      	cmp	r3, #96	; 0x60
 8007fb6:	d008      	beq.n	8007fca <HAL_TIM_PWM_ConfigChannel+0x52>
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b70      	cmp	r3, #112	; 0x70
 8007fbe:	d004      	beq.n	8007fca <HAL_TIM_PWM_ConfigChannel+0x52>
 8007fc0:	f241 0178 	movw	r1, #4216	; 0x1078
 8007fc4:	488c      	ldr	r0, [pc, #560]	; (80081f8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007fc6:	f7f9 fe7a 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d008      	beq.n	8007fe4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d004      	beq.n	8007fe4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007fda:	f241 0179 	movw	r1, #4217	; 0x1079
 8007fde:	4886      	ldr	r0, [pc, #536]	; (80081f8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007fe0:	f7f9 fe6d 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d004      	beq.n	8007ffe <HAL_TIM_PWM_ConfigChannel+0x86>
 8007ff4:	f241 017a 	movw	r1, #4218	; 0x107a
 8007ff8:	487f      	ldr	r0, [pc, #508]	; (80081f8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007ffa:	f7f9 fe60 	bl	8001cbe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008004:	2b01      	cmp	r3, #1
 8008006:	d101      	bne.n	800800c <HAL_TIM_PWM_ConfigChannel+0x94>
 8008008:	2302      	movs	r3, #2
 800800a:	e14c      	b.n	80082a6 <HAL_TIM_PWM_ConfigChannel+0x32e>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b0c      	cmp	r3, #12
 8008018:	f200 813d 	bhi.w	8008296 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800801c:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800801e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008022:	bf00      	nop
 8008024:	08008059 	.word	0x08008059
 8008028:	08008297 	.word	0x08008297
 800802c:	08008297 	.word	0x08008297
 8008030:	08008297 	.word	0x08008297
 8008034:	080080f3 	.word	0x080080f3
 8008038:	08008297 	.word	0x08008297
 800803c:	08008297 	.word	0x08008297
 8008040:	08008297 	.word	0x08008297
 8008044:	0800817b 	.word	0x0800817b
 8008048:	08008297 	.word	0x08008297
 800804c:	08008297 	.word	0x08008297
 8008050:	08008297 	.word	0x08008297
 8008054:	08008219 	.word	0x08008219
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a67      	ldr	r2, [pc, #412]	; (80081fc <HAL_TIM_PWM_ConfigChannel+0x284>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d027      	beq.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806a:	d022      	beq.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a63      	ldr	r2, [pc, #396]	; (8008200 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d01d      	beq.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a62      	ldr	r2, [pc, #392]	; (8008204 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d018      	beq.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a60      	ldr	r2, [pc, #384]	; (8008208 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d013      	beq.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a5f      	ldr	r2, [pc, #380]	; (800820c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00e      	beq.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a5d      	ldr	r2, [pc, #372]	; (8008210 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d009      	beq.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a5c      	ldr	r2, [pc, #368]	; (8008214 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d004      	beq.n	80080b2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 80080a8:	f241 0184 	movw	r1, #4228	; 0x1084
 80080ac:	4852      	ldr	r0, [pc, #328]	; (80081f8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80080ae:	f7f9 fe06 	bl	8001cbe <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 fd0f 	bl	8008adc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	699a      	ldr	r2, [r3, #24]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0208 	orr.w	r2, r2, #8
 80080cc:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	699a      	ldr	r2, [r3, #24]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0204 	bic.w	r2, r2, #4
 80080dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6999      	ldr	r1, [r3, #24]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	691a      	ldr	r2, [r3, #16]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	619a      	str	r2, [r3, #24]
      break;
 80080f0:	e0d4      	b.n	800829c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a41      	ldr	r2, [pc, #260]	; (80081fc <HAL_TIM_PWM_ConfigChannel+0x284>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d01d      	beq.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008104:	d018      	beq.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a3d      	ldr	r2, [pc, #244]	; (8008200 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d013      	beq.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a3b      	ldr	r2, [pc, #236]	; (8008204 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d00e      	beq.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a3a      	ldr	r2, [pc, #232]	; (8008208 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d009      	beq.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a38      	ldr	r2, [pc, #224]	; (800820c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800812e:	f241 0195 	movw	r1, #4245	; 0x1095
 8008132:	4831      	ldr	r0, [pc, #196]	; (80081f8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008134:	f7f9 fdc3 	bl	8001cbe <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fd5c 	bl	8008bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699a      	ldr	r2, [r3, #24]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6999      	ldr	r1, [r3, #24]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	021a      	lsls	r2, r3, #8
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	619a      	str	r2, [r3, #24]
      break;
 8008178:	e090      	b.n	800829c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a1f      	ldr	r2, [pc, #124]	; (80081fc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d018      	beq.n	80081b6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818c:	d013      	beq.n	80081b6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a1b      	ldr	r2, [pc, #108]	; (8008200 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00e      	beq.n	80081b6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a19      	ldr	r2, [pc, #100]	; (8008204 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d009      	beq.n	80081b6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a18      	ldr	r2, [pc, #96]	; (8008208 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d004      	beq.n	80081b6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 80081ac:	f241 01a6 	movw	r1, #4262	; 0x10a6
 80081b0:	4811      	ldr	r0, [pc, #68]	; (80081f8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80081b2:	f7f9 fd84 	bl	8001cbe <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 fdb1 	bl	8008d24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69da      	ldr	r2, [r3, #28]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f042 0208 	orr.w	r2, r2, #8
 80081d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69da      	ldr	r2, [r3, #28]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f022 0204 	bic.w	r2, r2, #4
 80081e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69d9      	ldr	r1, [r3, #28]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	691a      	ldr	r2, [r3, #16]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	61da      	str	r2, [r3, #28]
      break;
 80081f4:	e052      	b.n	800829c <HAL_TIM_PWM_ConfigChannel+0x324>
 80081f6:	bf00      	nop
 80081f8:	08011600 	.word	0x08011600
 80081fc:	40010000 	.word	0x40010000
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40014000 	.word	0x40014000
 8008210:	40014400 	.word	0x40014400
 8008214:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a24      	ldr	r2, [pc, #144]	; (80082b0 <HAL_TIM_PWM_ConfigChannel+0x338>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d018      	beq.n	8008254 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822a:	d013      	beq.n	8008254 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a20      	ldr	r2, [pc, #128]	; (80082b4 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d00e      	beq.n	8008254 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a1f      	ldr	r2, [pc, #124]	; (80082b8 <HAL_TIM_PWM_ConfigChannel+0x340>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d009      	beq.n	8008254 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a1d      	ldr	r2, [pc, #116]	; (80082bc <HAL_TIM_PWM_ConfigChannel+0x344>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d004      	beq.n	8008254 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800824a:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800824e:	481c      	ldr	r0, [pc, #112]	; (80082c0 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8008250:	f7f9 fd35 	bl	8001cbe <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68b9      	ldr	r1, [r7, #8]
 800825a:	4618      	mov	r0, r3
 800825c:	f000 fdf6 	bl	8008e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	69da      	ldr	r2, [r3, #28]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800826e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69da      	ldr	r2, [r3, #28]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800827e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69d9      	ldr	r1, [r3, #28]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	021a      	lsls	r2, r3, #8
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	430a      	orrs	r2, r1
 8008292:	61da      	str	r2, [r3, #28]
      break;
 8008294:	e002      	b.n	800829c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	75fb      	strb	r3, [r7, #23]
      break;
 800829a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3718      	adds	r7, #24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	40010000 	.word	0x40010000
 80082b4:	40000400 	.word	0x40000400
 80082b8:	40000800 	.word	0x40000800
 80082bc:	40000c00 	.word	0x40000c00
 80082c0:	08011600 	.word	0x08011600

080082c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d101      	bne.n	80082e0 <HAL_TIM_ConfigClockSource+0x1c>
 80082dc:	2302      	movs	r3, #2
 80082de:	e2f0      	b.n	80088c2 <HAL_TIM_ConfigClockSource+0x5fe>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f8:	d029      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x8a>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b70      	cmp	r3, #112	; 0x70
 8008300:	d025      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x8a>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830a:	d020      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x8a>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b40      	cmp	r3, #64	; 0x40
 8008312:	d01c      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x8a>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b50      	cmp	r3, #80	; 0x50
 800831a:	d018      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x8a>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b60      	cmp	r3, #96	; 0x60
 8008322:	d014      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x8a>
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d010      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x8a>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b10      	cmp	r3, #16
 8008332:	d00c      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x8a>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b20      	cmp	r3, #32
 800833a:	d008      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x8a>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b30      	cmp	r3, #48	; 0x30
 8008342:	d004      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x8a>
 8008344:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8008348:	487c      	ldr	r0, [pc, #496]	; (800853c <HAL_TIM_ConfigClockSource+0x278>)
 800834a:	f7f9 fcb8 	bl	8001cbe <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800835c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008364:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008376:	f000 80f1 	beq.w	800855c <HAL_TIM_ConfigClockSource+0x298>
 800837a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800837e:	f200 8293 	bhi.w	80088a8 <HAL_TIM_ConfigClockSource+0x5e4>
 8008382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008386:	d02d      	beq.n	80083e4 <HAL_TIM_ConfigClockSource+0x120>
 8008388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838c:	f200 828c 	bhi.w	80088a8 <HAL_TIM_ConfigClockSource+0x5e4>
 8008390:	2b70      	cmp	r3, #112	; 0x70
 8008392:	d05d      	beq.n	8008450 <HAL_TIM_ConfigClockSource+0x18c>
 8008394:	2b70      	cmp	r3, #112	; 0x70
 8008396:	f200 8287 	bhi.w	80088a8 <HAL_TIM_ConfigClockSource+0x5e4>
 800839a:	2b60      	cmp	r3, #96	; 0x60
 800839c:	f000 81a0 	beq.w	80086e0 <HAL_TIM_ConfigClockSource+0x41c>
 80083a0:	2b60      	cmp	r3, #96	; 0x60
 80083a2:	f200 8281 	bhi.w	80088a8 <HAL_TIM_ConfigClockSource+0x5e4>
 80083a6:	2b50      	cmp	r3, #80	; 0x50
 80083a8:	f000 8144 	beq.w	8008634 <HAL_TIM_ConfigClockSource+0x370>
 80083ac:	2b50      	cmp	r3, #80	; 0x50
 80083ae:	f200 827b 	bhi.w	80088a8 <HAL_TIM_ConfigClockSource+0x5e4>
 80083b2:	2b40      	cmp	r3, #64	; 0x40
 80083b4:	f000 81f6 	beq.w	80087a4 <HAL_TIM_ConfigClockSource+0x4e0>
 80083b8:	2b40      	cmp	r3, #64	; 0x40
 80083ba:	f200 8275 	bhi.w	80088a8 <HAL_TIM_ConfigClockSource+0x5e4>
 80083be:	2b30      	cmp	r3, #48	; 0x30
 80083c0:	f000 8246 	beq.w	8008850 <HAL_TIM_ConfigClockSource+0x58c>
 80083c4:	2b30      	cmp	r3, #48	; 0x30
 80083c6:	f200 826f 	bhi.w	80088a8 <HAL_TIM_ConfigClockSource+0x5e4>
 80083ca:	2b20      	cmp	r3, #32
 80083cc:	f000 8240 	beq.w	8008850 <HAL_TIM_ConfigClockSource+0x58c>
 80083d0:	2b20      	cmp	r3, #32
 80083d2:	f200 8269 	bhi.w	80088a8 <HAL_TIM_ConfigClockSource+0x5e4>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 823a 	beq.w	8008850 <HAL_TIM_ConfigClockSource+0x58c>
 80083dc:	2b10      	cmp	r3, #16
 80083de:	f000 8237 	beq.w	8008850 <HAL_TIM_ConfigClockSource+0x58c>
 80083e2:	e261      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a55      	ldr	r2, [pc, #340]	; (8008540 <HAL_TIM_ConfigClockSource+0x27c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	f000 825f 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x5ea>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f8:	f000 8259 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x5ea>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a50      	ldr	r2, [pc, #320]	; (8008544 <HAL_TIM_ConfigClockSource+0x280>)
 8008402:	4293      	cmp	r3, r2
 8008404:	f000 8253 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x5ea>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a4e      	ldr	r2, [pc, #312]	; (8008548 <HAL_TIM_ConfigClockSource+0x284>)
 800840e:	4293      	cmp	r3, r2
 8008410:	f000 824d 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x5ea>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a4c      	ldr	r2, [pc, #304]	; (800854c <HAL_TIM_ConfigClockSource+0x288>)
 800841a:	4293      	cmp	r3, r2
 800841c:	f000 8247 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x5ea>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a4a      	ldr	r2, [pc, #296]	; (8008550 <HAL_TIM_ConfigClockSource+0x28c>)
 8008426:	4293      	cmp	r3, r2
 8008428:	f000 8241 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x5ea>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a48      	ldr	r2, [pc, #288]	; (8008554 <HAL_TIM_ConfigClockSource+0x290>)
 8008432:	4293      	cmp	r3, r2
 8008434:	f000 823b 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x5ea>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a46      	ldr	r2, [pc, #280]	; (8008558 <HAL_TIM_ConfigClockSource+0x294>)
 800843e:	4293      	cmp	r3, r2
 8008440:	f000 8235 	beq.w	80088ae <HAL_TIM_ConfigClockSource+0x5ea>
 8008444:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8008448:	483c      	ldr	r0, [pc, #240]	; (800853c <HAL_TIM_ConfigClockSource+0x278>)
 800844a:	f7f9 fc38 	bl	8001cbe <assert_failed>
      break;
 800844e:	e22e      	b.n	80088ae <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a3a      	ldr	r2, [pc, #232]	; (8008540 <HAL_TIM_ConfigClockSource+0x27c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d01d      	beq.n	8008496 <HAL_TIM_ConfigClockSource+0x1d2>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008462:	d018      	beq.n	8008496 <HAL_TIM_ConfigClockSource+0x1d2>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a36      	ldr	r2, [pc, #216]	; (8008544 <HAL_TIM_ConfigClockSource+0x280>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d013      	beq.n	8008496 <HAL_TIM_ConfigClockSource+0x1d2>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a35      	ldr	r2, [pc, #212]	; (8008548 <HAL_TIM_ConfigClockSource+0x284>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00e      	beq.n	8008496 <HAL_TIM_ConfigClockSource+0x1d2>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a33      	ldr	r2, [pc, #204]	; (800854c <HAL_TIM_ConfigClockSource+0x288>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d009      	beq.n	8008496 <HAL_TIM_ConfigClockSource+0x1d2>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a32      	ldr	r2, [pc, #200]	; (8008550 <HAL_TIM_ConfigClockSource+0x28c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d004      	beq.n	8008496 <HAL_TIM_ConfigClockSource+0x1d2>
 800848c:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8008490:	482a      	ldr	r0, [pc, #168]	; (800853c <HAL_TIM_ConfigClockSource+0x278>)
 8008492:	f7f9 fc14 	bl	8001cbe <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d013      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x202>
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a6:	d00e      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x202>
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084b0:	d009      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x202>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084ba:	d004      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x202>
 80084bc:	f241 41cd 	movw	r1, #5325	; 0x14cd
 80084c0:	481e      	ldr	r0, [pc, #120]	; (800853c <HAL_TIM_ConfigClockSource+0x278>)
 80084c2:	f7f9 fbfc 	bl	8001cbe <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ce:	d014      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x236>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d010      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x236>
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00c      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x236>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d008      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x236>
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	2b0a      	cmp	r3, #10
 80084ee:	d004      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0x236>
 80084f0:	f241 41ce 	movw	r1, #5326	; 0x14ce
 80084f4:	4811      	ldr	r0, [pc, #68]	; (800853c <HAL_TIM_ConfigClockSource+0x278>)
 80084f6:	f7f9 fbe2 	bl	8001cbe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	2b0f      	cmp	r3, #15
 8008500:	d904      	bls.n	800850c <HAL_TIM_ConfigClockSource+0x248>
 8008502:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8008506:	480d      	ldr	r0, [pc, #52]	; (800853c <HAL_TIM_ConfigClockSource+0x278>)
 8008508:	f7f9 fbd9 	bl	8001cbe <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	6899      	ldr	r1, [r3, #8]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f000 fd6e 	bl	8008ffc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800852e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	609a      	str	r2, [r3, #8]
      break;
 8008538:	e1ba      	b.n	80088b0 <HAL_TIM_ConfigClockSource+0x5ec>
 800853a:	bf00      	nop
 800853c:	08011600 	.word	0x08011600
 8008540:	40010000 	.word	0x40010000
 8008544:	40000400 	.word	0x40000400
 8008548:	40000800 	.word	0x40000800
 800854c:	40000c00 	.word	0x40000c00
 8008550:	40014000 	.word	0x40014000
 8008554:	40014400 	.word	0x40014400
 8008558:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a8a      	ldr	r2, [pc, #552]	; (800878c <HAL_TIM_ConfigClockSource+0x4c8>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d018      	beq.n	8008598 <HAL_TIM_ConfigClockSource+0x2d4>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856e:	d013      	beq.n	8008598 <HAL_TIM_ConfigClockSource+0x2d4>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a86      	ldr	r2, [pc, #536]	; (8008790 <HAL_TIM_ConfigClockSource+0x4cc>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00e      	beq.n	8008598 <HAL_TIM_ConfigClockSource+0x2d4>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a85      	ldr	r2, [pc, #532]	; (8008794 <HAL_TIM_ConfigClockSource+0x4d0>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d009      	beq.n	8008598 <HAL_TIM_ConfigClockSource+0x2d4>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a83      	ldr	r2, [pc, #524]	; (8008798 <HAL_TIM_ConfigClockSource+0x4d4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d004      	beq.n	8008598 <HAL_TIM_ConfigClockSource+0x2d4>
 800858e:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8008592:	4882      	ldr	r0, [pc, #520]	; (800879c <HAL_TIM_ConfigClockSource+0x4d8>)
 8008594:	f7f9 fb93 	bl	8001cbe <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d013      	beq.n	80085c8 <HAL_TIM_ConfigClockSource+0x304>
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085a8:	d00e      	beq.n	80085c8 <HAL_TIM_ConfigClockSource+0x304>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085b2:	d009      	beq.n	80085c8 <HAL_TIM_ConfigClockSource+0x304>
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085bc:	d004      	beq.n	80085c8 <HAL_TIM_ConfigClockSource+0x304>
 80085be:	f241 41e5 	movw	r1, #5349	; 0x14e5
 80085c2:	4876      	ldr	r0, [pc, #472]	; (800879c <HAL_TIM_ConfigClockSource+0x4d8>)
 80085c4:	f7f9 fb7b 	bl	8001cbe <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d0:	d014      	beq.n	80085fc <HAL_TIM_ConfigClockSource+0x338>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d010      	beq.n	80085fc <HAL_TIM_ConfigClockSource+0x338>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00c      	beq.n	80085fc <HAL_TIM_ConfigClockSource+0x338>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d008      	beq.n	80085fc <HAL_TIM_ConfigClockSource+0x338>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	2b0a      	cmp	r3, #10
 80085f0:	d004      	beq.n	80085fc <HAL_TIM_ConfigClockSource+0x338>
 80085f2:	f241 41e6 	movw	r1, #5350	; 0x14e6
 80085f6:	4869      	ldr	r0, [pc, #420]	; (800879c <HAL_TIM_ConfigClockSource+0x4d8>)
 80085f8:	f7f9 fb61 	bl	8001cbe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	2b0f      	cmp	r3, #15
 8008602:	d904      	bls.n	800860e <HAL_TIM_ConfigClockSource+0x34a>
 8008604:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8008608:	4864      	ldr	r0, [pc, #400]	; (800879c <HAL_TIM_ConfigClockSource+0x4d8>)
 800860a:	f7f9 fb58 	bl	8001cbe <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6818      	ldr	r0, [r3, #0]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	6899      	ldr	r1, [r3, #8]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	685a      	ldr	r2, [r3, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f000 fced 	bl	8008ffc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008630:	609a      	str	r2, [r3, #8]
      break;
 8008632:	e13d      	b.n	80088b0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a54      	ldr	r2, [pc, #336]	; (800878c <HAL_TIM_ConfigClockSource+0x4c8>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d01d      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x3b6>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008646:	d018      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x3b6>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a50      	ldr	r2, [pc, #320]	; (8008790 <HAL_TIM_ConfigClockSource+0x4cc>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d013      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x3b6>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a4f      	ldr	r2, [pc, #316]	; (8008794 <HAL_TIM_ConfigClockSource+0x4d0>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00e      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x3b6>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a4d      	ldr	r2, [pc, #308]	; (8008798 <HAL_TIM_ConfigClockSource+0x4d4>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d009      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x3b6>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a4d      	ldr	r2, [pc, #308]	; (80087a0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d004      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x3b6>
 8008670:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8008674:	4849      	ldr	r0, [pc, #292]	; (800879c <HAL_TIM_ConfigClockSource+0x4d8>)
 8008676:	f7f9 fb22 	bl	8001cbe <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008682:	d014      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0x3ea>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d010      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0x3ea>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00c      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0x3ea>
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d008      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0x3ea>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2b0a      	cmp	r3, #10
 80086a2:	d004      	beq.n	80086ae <HAL_TIM_ConfigClockSource+0x3ea>
 80086a4:	f241 41f9 	movw	r1, #5369	; 0x14f9
 80086a8:	483c      	ldr	r0, [pc, #240]	; (800879c <HAL_TIM_ConfigClockSource+0x4d8>)
 80086aa:	f7f9 fb08 	bl	8001cbe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	2b0f      	cmp	r3, #15
 80086b4:	d904      	bls.n	80086c0 <HAL_TIM_ConfigClockSource+0x3fc>
 80086b6:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80086ba:	4838      	ldr	r0, [pc, #224]	; (800879c <HAL_TIM_ConfigClockSource+0x4d8>)
 80086bc:	f7f9 faff 	bl	8001cbe <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6859      	ldr	r1, [r3, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	461a      	mov	r2, r3
 80086ce:	f000 fc1b 	bl	8008f08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2150      	movs	r1, #80	; 0x50
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fc74 	bl	8008fc6 <TIM_ITRx_SetConfig>
      break;
 80086de:	e0e7      	b.n	80088b0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a29      	ldr	r2, [pc, #164]	; (800878c <HAL_TIM_ConfigClockSource+0x4c8>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01d      	beq.n	8008726 <HAL_TIM_ConfigClockSource+0x462>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f2:	d018      	beq.n	8008726 <HAL_TIM_ConfigClockSource+0x462>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a25      	ldr	r2, [pc, #148]	; (8008790 <HAL_TIM_ConfigClockSource+0x4cc>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d013      	beq.n	8008726 <HAL_TIM_ConfigClockSource+0x462>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a24      	ldr	r2, [pc, #144]	; (8008794 <HAL_TIM_ConfigClockSource+0x4d0>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00e      	beq.n	8008726 <HAL_TIM_ConfigClockSource+0x462>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a22      	ldr	r2, [pc, #136]	; (8008798 <HAL_TIM_ConfigClockSource+0x4d4>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d009      	beq.n	8008726 <HAL_TIM_ConfigClockSource+0x462>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a22      	ldr	r2, [pc, #136]	; (80087a0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d004      	beq.n	8008726 <HAL_TIM_ConfigClockSource+0x462>
 800871c:	f241 5106 	movw	r1, #5382	; 0x1506
 8008720:	481e      	ldr	r0, [pc, #120]	; (800879c <HAL_TIM_ConfigClockSource+0x4d8>)
 8008722:	f7f9 facc 	bl	8001cbe <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800872e:	d014      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x496>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d010      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x496>
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00c      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x496>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	2b02      	cmp	r3, #2
 8008746:	d008      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x496>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b0a      	cmp	r3, #10
 800874e:	d004      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x496>
 8008750:	f241 5109 	movw	r1, #5385	; 0x1509
 8008754:	4811      	ldr	r0, [pc, #68]	; (800879c <HAL_TIM_ConfigClockSource+0x4d8>)
 8008756:	f7f9 fab2 	bl	8001cbe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	2b0f      	cmp	r3, #15
 8008760:	d904      	bls.n	800876c <HAL_TIM_ConfigClockSource+0x4a8>
 8008762:	f241 510a 	movw	r1, #5386	; 0x150a
 8008766:	480d      	ldr	r0, [pc, #52]	; (800879c <HAL_TIM_ConfigClockSource+0x4d8>)
 8008768:	f7f9 faa9 	bl	8001cbe <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6818      	ldr	r0, [r3, #0]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	6859      	ldr	r1, [r3, #4]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	461a      	mov	r2, r3
 800877a:	f000 fbf4 	bl	8008f66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2160      	movs	r1, #96	; 0x60
 8008784:	4618      	mov	r0, r3
 8008786:	f000 fc1e 	bl	8008fc6 <TIM_ITRx_SetConfig>
      break;
 800878a:	e091      	b.n	80088b0 <HAL_TIM_ConfigClockSource+0x5ec>
 800878c:	40010000 	.word	0x40010000
 8008790:	40000400 	.word	0x40000400
 8008794:	40000800 	.word	0x40000800
 8008798:	40000c00 	.word	0x40000c00
 800879c:	08011600 	.word	0x08011600
 80087a0:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a48      	ldr	r2, [pc, #288]	; (80088cc <HAL_TIM_ConfigClockSource+0x608>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d01d      	beq.n	80087ea <HAL_TIM_ConfigClockSource+0x526>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b6:	d018      	beq.n	80087ea <HAL_TIM_ConfigClockSource+0x526>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a44      	ldr	r2, [pc, #272]	; (80088d0 <HAL_TIM_ConfigClockSource+0x60c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d013      	beq.n	80087ea <HAL_TIM_ConfigClockSource+0x526>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a43      	ldr	r2, [pc, #268]	; (80088d4 <HAL_TIM_ConfigClockSource+0x610>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d00e      	beq.n	80087ea <HAL_TIM_ConfigClockSource+0x526>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a41      	ldr	r2, [pc, #260]	; (80088d8 <HAL_TIM_ConfigClockSource+0x614>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d009      	beq.n	80087ea <HAL_TIM_ConfigClockSource+0x526>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a40      	ldr	r2, [pc, #256]	; (80088dc <HAL_TIM_ConfigClockSource+0x618>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d004      	beq.n	80087ea <HAL_TIM_ConfigClockSource+0x526>
 80087e0:	f241 5116 	movw	r1, #5398	; 0x1516
 80087e4:	483e      	ldr	r0, [pc, #248]	; (80088e0 <HAL_TIM_ConfigClockSource+0x61c>)
 80087e6:	f7f9 fa6a 	bl	8001cbe <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087f2:	d014      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x55a>
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d010      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x55a>
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00c      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x55a>
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	2b02      	cmp	r3, #2
 800880a:	d008      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x55a>
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	2b0a      	cmp	r3, #10
 8008812:	d004      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x55a>
 8008814:	f241 5119 	movw	r1, #5401	; 0x1519
 8008818:	4831      	ldr	r0, [pc, #196]	; (80088e0 <HAL_TIM_ConfigClockSource+0x61c>)
 800881a:	f7f9 fa50 	bl	8001cbe <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	2b0f      	cmp	r3, #15
 8008824:	d904      	bls.n	8008830 <HAL_TIM_ConfigClockSource+0x56c>
 8008826:	f241 511a 	movw	r1, #5402	; 0x151a
 800882a:	482d      	ldr	r0, [pc, #180]	; (80088e0 <HAL_TIM_ConfigClockSource+0x61c>)
 800882c:	f7f9 fa47 	bl	8001cbe <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	6859      	ldr	r1, [r3, #4]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	461a      	mov	r2, r3
 800883e:	f000 fb63 	bl	8008f08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2140      	movs	r1, #64	; 0x40
 8008848:	4618      	mov	r0, r3
 800884a:	f000 fbbc 	bl	8008fc6 <TIM_ITRx_SetConfig>
      break;
 800884e:	e02f      	b.n	80088b0 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a1d      	ldr	r2, [pc, #116]	; (80088cc <HAL_TIM_ConfigClockSource+0x608>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d01d      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x5d2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008862:	d018      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x5d2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a19      	ldr	r2, [pc, #100]	; (80088d0 <HAL_TIM_ConfigClockSource+0x60c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d013      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x5d2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a18      	ldr	r2, [pc, #96]	; (80088d4 <HAL_TIM_ConfigClockSource+0x610>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d00e      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x5d2>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a16      	ldr	r2, [pc, #88]	; (80088d8 <HAL_TIM_ConfigClockSource+0x614>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d009      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x5d2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a15      	ldr	r2, [pc, #84]	; (80088dc <HAL_TIM_ConfigClockSource+0x618>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d004      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x5d2>
 800888c:	f241 5129 	movw	r1, #5417	; 0x1529
 8008890:	4813      	ldr	r0, [pc, #76]	; (80088e0 <HAL_TIM_ConfigClockSource+0x61c>)
 8008892:	f7f9 fa14 	bl	8001cbe <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4619      	mov	r1, r3
 80088a0:	4610      	mov	r0, r2
 80088a2:	f000 fb90 	bl	8008fc6 <TIM_ITRx_SetConfig>
      break;
 80088a6:	e003      	b.n	80088b0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	73fb      	strb	r3, [r7, #15]
      break;
 80088ac:	e000      	b.n	80088b0 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 80088ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	40010000 	.word	0x40010000
 80088d0:	40000400 	.word	0x40000400
 80088d4:	40000800 	.word	0x40000800
 80088d8:	40000c00 	.word	0x40000c00
 80088dc:	40014000 	.word	0x40014000
 80088e0:	08011600 	.word	0x08011600

080088e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	429a      	cmp	r2, r3
 800895e:	d107      	bne.n	8008970 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800896e:	e02a      	b.n	80089c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d107      	bne.n	800898a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2202      	movs	r2, #2
 800897e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008988:	e01d      	b.n	80089c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d107      	bne.n	80089a4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2204      	movs	r2, #4
 8008998:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089a2:	e010      	b.n	80089c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d107      	bne.n	80089be <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2208      	movs	r2, #8
 80089b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089bc:	e003      	b.n	80089c6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f7ff ffb4 	bl	8008934 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	771a      	strb	r2, [r3, #28]
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a34      	ldr	r2, [pc, #208]	; (8008ac0 <TIM_Base_SetConfig+0xe4>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d00f      	beq.n	8008a14 <TIM_Base_SetConfig+0x38>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089fa:	d00b      	beq.n	8008a14 <TIM_Base_SetConfig+0x38>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a31      	ldr	r2, [pc, #196]	; (8008ac4 <TIM_Base_SetConfig+0xe8>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d007      	beq.n	8008a14 <TIM_Base_SetConfig+0x38>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a30      	ldr	r2, [pc, #192]	; (8008ac8 <TIM_Base_SetConfig+0xec>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d003      	beq.n	8008a14 <TIM_Base_SetConfig+0x38>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a2f      	ldr	r2, [pc, #188]	; (8008acc <TIM_Base_SetConfig+0xf0>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d108      	bne.n	8008a26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a25      	ldr	r2, [pc, #148]	; (8008ac0 <TIM_Base_SetConfig+0xe4>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d01b      	beq.n	8008a66 <TIM_Base_SetConfig+0x8a>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a34:	d017      	beq.n	8008a66 <TIM_Base_SetConfig+0x8a>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a22      	ldr	r2, [pc, #136]	; (8008ac4 <TIM_Base_SetConfig+0xe8>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d013      	beq.n	8008a66 <TIM_Base_SetConfig+0x8a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a21      	ldr	r2, [pc, #132]	; (8008ac8 <TIM_Base_SetConfig+0xec>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00f      	beq.n	8008a66 <TIM_Base_SetConfig+0x8a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a20      	ldr	r2, [pc, #128]	; (8008acc <TIM_Base_SetConfig+0xf0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d00b      	beq.n	8008a66 <TIM_Base_SetConfig+0x8a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a1f      	ldr	r2, [pc, #124]	; (8008ad0 <TIM_Base_SetConfig+0xf4>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d007      	beq.n	8008a66 <TIM_Base_SetConfig+0x8a>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a1e      	ldr	r2, [pc, #120]	; (8008ad4 <TIM_Base_SetConfig+0xf8>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d003      	beq.n	8008a66 <TIM_Base_SetConfig+0x8a>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a1d      	ldr	r2, [pc, #116]	; (8008ad8 <TIM_Base_SetConfig+0xfc>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d108      	bne.n	8008a78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	689a      	ldr	r2, [r3, #8]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a08      	ldr	r2, [pc, #32]	; (8008ac0 <TIM_Base_SetConfig+0xe4>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d103      	bne.n	8008aac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	691a      	ldr	r2, [r3, #16]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	615a      	str	r2, [r3, #20]
}
 8008ab2:	bf00      	nop
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	40010000 	.word	0x40010000
 8008ac4:	40000400 	.word	0x40000400
 8008ac8:	40000800 	.word	0x40000800
 8008acc:	40000c00 	.word	0x40000c00
 8008ad0:	40014000 	.word	0x40014000
 8008ad4:	40014400 	.word	0x40014400
 8008ad8:	40014800 	.word	0x40014800

08008adc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	f023 0201 	bic.w	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 0303 	bic.w	r3, r3, #3
 8008b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f023 0302 	bic.w	r3, r3, #2
 8008b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a30      	ldr	r2, [pc, #192]	; (8008bf4 <TIM_OC1_SetConfig+0x118>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d119      	bne.n	8008b6c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d008      	beq.n	8008b52 <TIM_OC1_SetConfig+0x76>
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d004      	beq.n	8008b52 <TIM_OC1_SetConfig+0x76>
 8008b48:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 8008b4c:	482a      	ldr	r0, [pc, #168]	; (8008bf8 <TIM_OC1_SetConfig+0x11c>)
 8008b4e:	f7f9 f8b6 	bl	8001cbe <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f023 0308 	bic.w	r3, r3, #8
 8008b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f023 0304 	bic.w	r3, r3, #4
 8008b6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a21      	ldr	r2, [pc, #132]	; (8008bf4 <TIM_OC1_SetConfig+0x118>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d12d      	bne.n	8008bd0 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b7c:	d008      	beq.n	8008b90 <TIM_OC1_SetConfig+0xb4>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d004      	beq.n	8008b90 <TIM_OC1_SetConfig+0xb4>
 8008b86:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 8008b8a:	481b      	ldr	r0, [pc, #108]	; (8008bf8 <TIM_OC1_SetConfig+0x11c>)
 8008b8c:	f7f9 f897 	bl	8001cbe <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b98:	d008      	beq.n	8008bac <TIM_OC1_SetConfig+0xd0>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d004      	beq.n	8008bac <TIM_OC1_SetConfig+0xd0>
 8008ba2:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 8008ba6:	4814      	ldr	r0, [pc, #80]	; (8008bf8 <TIM_OC1_SetConfig+0x11c>)
 8008ba8:	f7f9 f889 	bl	8001cbe <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	621a      	str	r2, [r3, #32]
}
 8008bea:	bf00      	nop
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	40010000 	.word	0x40010000
 8008bf8:	08011600 	.word	0x08011600

08008bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	f023 0210 	bic.w	r2, r3, #16
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f023 0320 	bic.w	r3, r3, #32
 8008c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	011b      	lsls	r3, r3, #4
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a31      	ldr	r2, [pc, #196]	; (8008d1c <TIM_OC2_SetConfig+0x120>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d11a      	bne.n	8008c92 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d008      	beq.n	8008c76 <TIM_OC2_SetConfig+0x7a>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	d004      	beq.n	8008c76 <TIM_OC2_SetConfig+0x7a>
 8008c6c:	f641 3112 	movw	r1, #6930	; 0x1b12
 8008c70:	482b      	ldr	r0, [pc, #172]	; (8008d20 <TIM_OC2_SetConfig+0x124>)
 8008c72:	f7f9 f824 	bl	8001cbe <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	011b      	lsls	r3, r3, #4
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c90:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a21      	ldr	r2, [pc, #132]	; (8008d1c <TIM_OC2_SetConfig+0x120>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d12f      	bne.n	8008cfa <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ca2:	d008      	beq.n	8008cb6 <TIM_OC2_SetConfig+0xba>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d004      	beq.n	8008cb6 <TIM_OC2_SetConfig+0xba>
 8008cac:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8008cb0:	481b      	ldr	r0, [pc, #108]	; (8008d20 <TIM_OC2_SetConfig+0x124>)
 8008cb2:	f7f9 f804 	bl	8001cbe <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cbe:	d008      	beq.n	8008cd2 <TIM_OC2_SetConfig+0xd6>
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d004      	beq.n	8008cd2 <TIM_OC2_SetConfig+0xd6>
 8008cc8:	f641 3121 	movw	r1, #6945	; 0x1b21
 8008ccc:	4814      	ldr	r0, [pc, #80]	; (8008d20 <TIM_OC2_SetConfig+0x124>)
 8008cce:	f7f8 fff6 	bl	8001cbe <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	621a      	str	r2, [r3, #32]
}
 8008d14:	bf00      	nop
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	40010000 	.word	0x40010000
 8008d20:	08011600 	.word	0x08011600

08008d24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0303 	bic.w	r3, r3, #3
 8008d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	021b      	lsls	r3, r3, #8
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a31      	ldr	r2, [pc, #196]	; (8008e44 <TIM_OC3_SetConfig+0x120>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d11a      	bne.n	8008db8 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d008      	beq.n	8008d9c <TIM_OC3_SetConfig+0x78>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	2b08      	cmp	r3, #8
 8008d90:	d004      	beq.n	8008d9c <TIM_OC3_SetConfig+0x78>
 8008d92:	f641 315d 	movw	r1, #7005	; 0x1b5d
 8008d96:	482c      	ldr	r0, [pc, #176]	; (8008e48 <TIM_OC3_SetConfig+0x124>)
 8008d98:	f7f8 ff91 	bl	8001cbe <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	021b      	lsls	r3, r3, #8
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008db6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a22      	ldr	r2, [pc, #136]	; (8008e44 <TIM_OC3_SetConfig+0x120>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d12f      	bne.n	8008e20 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc8:	d008      	beq.n	8008ddc <TIM_OC3_SetConfig+0xb8>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d004      	beq.n	8008ddc <TIM_OC3_SetConfig+0xb8>
 8008dd2:	f641 316a 	movw	r1, #7018	; 0x1b6a
 8008dd6:	481c      	ldr	r0, [pc, #112]	; (8008e48 <TIM_OC3_SetConfig+0x124>)
 8008dd8:	f7f8 ff71 	bl	8001cbe <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	695b      	ldr	r3, [r3, #20]
 8008de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008de4:	d008      	beq.n	8008df8 <TIM_OC3_SetConfig+0xd4>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d004      	beq.n	8008df8 <TIM_OC3_SetConfig+0xd4>
 8008dee:	f641 316b 	movw	r1, #7019	; 0x1b6b
 8008df2:	4815      	ldr	r0, [pc, #84]	; (8008e48 <TIM_OC3_SetConfig+0x124>)
 8008df4:	f7f8 ff63 	bl	8001cbe <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	011b      	lsls	r3, r3, #4
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	621a      	str	r2, [r3, #32]
}
 8008e3a:	bf00      	nop
 8008e3c:	3718      	adds	r7, #24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	40010000 	.word	0x40010000
 8008e48:	08011600 	.word	0x08011600

08008e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	021b      	lsls	r3, r3, #8
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	031b      	lsls	r3, r3, #12
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a16      	ldr	r2, [pc, #88]	; (8008f00 <TIM_OC4_SetConfig+0xb4>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d117      	bne.n	8008edc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb4:	d008      	beq.n	8008ec8 <TIM_OC4_SetConfig+0x7c>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <TIM_OC4_SetConfig+0x7c>
 8008ebe:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 8008ec2:	4810      	ldr	r0, [pc, #64]	; (8008f04 <TIM_OC4_SetConfig+0xb8>)
 8008ec4:	f7f8 fefb 	bl	8001cbe <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	019b      	lsls	r3, r3, #6
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	621a      	str	r2, [r3, #32]
}
 8008ef6:	bf00      	nop
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	40010000 	.word	0x40010000
 8008f04:	08011600 	.word	0x08011600

08008f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	f023 0201 	bic.w	r2, r3, #1
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f023 030a 	bic.w	r3, r3, #10
 8008f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	621a      	str	r2, [r3, #32]
}
 8008f5a:	bf00      	nop
 8008f5c:	371c      	adds	r7, #28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b087      	sub	sp, #28
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	f023 0210 	bic.w	r2, r3, #16
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	031b      	lsls	r3, r3, #12
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	011b      	lsls	r3, r3, #4
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	621a      	str	r2, [r3, #32]
}
 8008fba:	bf00      	nop
 8008fbc:	371c      	adds	r7, #28
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b085      	sub	sp, #20
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	f043 0307 	orr.w	r3, r3, #7
 8008fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	609a      	str	r2, [r3, #8]
}
 8008ff0:	bf00      	nop
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	021a      	lsls	r2, r3, #8
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	431a      	orrs	r2, r3
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4313      	orrs	r3, r2
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	4313      	orrs	r3, r2
 8009028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	609a      	str	r2, [r3, #8]
}
 8009030:	bf00      	nop
 8009032:	371c      	adds	r7, #28
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	4a2a      	ldr	r2, [pc, #168]	; (80090f4 <TIM_CCxChannelCmd+0xb8>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d020      	beq.n	8009092 <TIM_CCxChannelCmd+0x56>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009056:	d01c      	beq.n	8009092 <TIM_CCxChannelCmd+0x56>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4a27      	ldr	r2, [pc, #156]	; (80090f8 <TIM_CCxChannelCmd+0xbc>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d018      	beq.n	8009092 <TIM_CCxChannelCmd+0x56>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4a26      	ldr	r2, [pc, #152]	; (80090fc <TIM_CCxChannelCmd+0xc0>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d014      	beq.n	8009092 <TIM_CCxChannelCmd+0x56>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	4a25      	ldr	r2, [pc, #148]	; (8009100 <TIM_CCxChannelCmd+0xc4>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d010      	beq.n	8009092 <TIM_CCxChannelCmd+0x56>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4a24      	ldr	r2, [pc, #144]	; (8009104 <TIM_CCxChannelCmd+0xc8>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d00c      	beq.n	8009092 <TIM_CCxChannelCmd+0x56>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4a23      	ldr	r2, [pc, #140]	; (8009108 <TIM_CCxChannelCmd+0xcc>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d008      	beq.n	8009092 <TIM_CCxChannelCmd+0x56>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	4a22      	ldr	r2, [pc, #136]	; (800910c <TIM_CCxChannelCmd+0xd0>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d004      	beq.n	8009092 <TIM_CCxChannelCmd+0x56>
 8009088:	f641 5194 	movw	r1, #7572	; 0x1d94
 800908c:	4820      	ldr	r0, [pc, #128]	; (8009110 <TIM_CCxChannelCmd+0xd4>)
 800908e:	f7f8 fe16 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d010      	beq.n	80090ba <TIM_CCxChannelCmd+0x7e>
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2b04      	cmp	r3, #4
 800909c:	d00d      	beq.n	80090ba <TIM_CCxChannelCmd+0x7e>
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b08      	cmp	r3, #8
 80090a2:	d00a      	beq.n	80090ba <TIM_CCxChannelCmd+0x7e>
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2b0c      	cmp	r3, #12
 80090a8:	d007      	beq.n	80090ba <TIM_CCxChannelCmd+0x7e>
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2b3c      	cmp	r3, #60	; 0x3c
 80090ae:	d004      	beq.n	80090ba <TIM_CCxChannelCmd+0x7e>
 80090b0:	f641 5195 	movw	r1, #7573	; 0x1d95
 80090b4:	4816      	ldr	r0, [pc, #88]	; (8009110 <TIM_CCxChannelCmd+0xd4>)
 80090b6:	f7f8 fe02 	bl	8001cbe <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f003 031f 	and.w	r3, r3, #31
 80090c0:	2201      	movs	r2, #1
 80090c2:	fa02 f303 	lsl.w	r3, r2, r3
 80090c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a1a      	ldr	r2, [r3, #32]
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	43db      	mvns	r3, r3
 80090d0:	401a      	ands	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6a1a      	ldr	r2, [r3, #32]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	f003 031f 	and.w	r3, r3, #31
 80090e0:	6879      	ldr	r1, [r7, #4]
 80090e2:	fa01 f303 	lsl.w	r3, r1, r3
 80090e6:	431a      	orrs	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	621a      	str	r2, [r3, #32]
}
 80090ec:	bf00      	nop
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	40010000 	.word	0x40010000
 80090f8:	40000400 	.word	0x40000400
 80090fc:	40000800 	.word	0x40000800
 8009100:	40000c00 	.word	0x40000c00
 8009104:	40014000 	.word	0x40014000
 8009108:	40014400 	.word	0x40014400
 800910c:	40014800 	.word	0x40014800
 8009110:	08011600 	.word	0x08011600

08009114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a55      	ldr	r2, [pc, #340]	; (8009278 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d018      	beq.n	800915a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009130:	d013      	beq.n	800915a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a51      	ldr	r2, [pc, #324]	; (800927c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d00e      	beq.n	800915a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a4f      	ldr	r2, [pc, #316]	; (8009280 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d009      	beq.n	800915a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a4e      	ldr	r2, [pc, #312]	; (8009284 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d004      	beq.n	800915a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009150:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8009154:	484c      	ldr	r0, [pc, #304]	; (8009288 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009156:	f7f8 fdb2 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d020      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b10      	cmp	r3, #16
 8009168:	d01c      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b20      	cmp	r3, #32
 8009170:	d018      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b30      	cmp	r3, #48	; 0x30
 8009178:	d014      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b40      	cmp	r3, #64	; 0x40
 8009180:	d010      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b50      	cmp	r3, #80	; 0x50
 8009188:	d00c      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b60      	cmp	r3, #96	; 0x60
 8009190:	d008      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b70      	cmp	r3, #112	; 0x70
 8009198:	d004      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800919a:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800919e:	483a      	ldr	r0, [pc, #232]	; (8009288 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80091a0:	f7f8 fd8d 	bl	8001cbe <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	2b80      	cmp	r3, #128	; 0x80
 80091aa:	d008      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80091b4:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80091b8:	4833      	ldr	r0, [pc, #204]	; (8009288 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80091ba:	f7f8 fd80 	bl	8001cbe <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d101      	bne.n	80091cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091c8:	2302      	movs	r3, #2
 80091ca:	e050      	b.n	800926e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2202      	movs	r2, #2
 80091d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a1b      	ldr	r2, [pc, #108]	; (8009278 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d018      	beq.n	8009242 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009218:	d013      	beq.n	8009242 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a17      	ldr	r2, [pc, #92]	; (800927c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d00e      	beq.n	8009242 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a15      	ldr	r2, [pc, #84]	; (8009280 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d009      	beq.n	8009242 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a14      	ldr	r2, [pc, #80]	; (8009284 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d004      	beq.n	8009242 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a13      	ldr	r2, [pc, #76]	; (800928c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d10c      	bne.n	800925c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	4313      	orrs	r3, r2
 8009252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	40010000 	.word	0x40010000
 800927c:	40000400 	.word	0x40000400
 8009280:	40000800 	.word	0x40000800
 8009284:	40000c00 	.word	0x40000c00
 8009288:	08011638 	.word	0x08011638
 800928c:	40014000 	.word	0x40014000

08009290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092b8:	b084      	sub	sp, #16
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	f107 001c 	add.w	r0, r7, #28
 80092c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d122      	bne.n	8009316 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80092e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80092f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d105      	bne.n	800930a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f001 fbee 	bl	800aaec <USB_CoreReset>
 8009310:	4603      	mov	r3, r0
 8009312:	73fb      	strb	r3, [r7, #15]
 8009314:	e01a      	b.n	800934c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f001 fbe2 	bl	800aaec <USB_CoreReset>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800932c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	d106      	bne.n	8009340 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009336:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
 800933e:	e005      	b.n	800934c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800934c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934e:	2b01      	cmp	r3, #1
 8009350:	d10b      	bne.n	800936a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f043 0206 	orr.w	r2, r3, #6
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f043 0220 	orr.w	r2, r3, #32
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800936a:	7bfb      	ldrb	r3, [r7, #15]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009376:	b004      	add	sp, #16
 8009378:	4770      	bx	lr
	...

0800937c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800937c:	b480      	push	{r7}
 800937e:	b087      	sub	sp, #28
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	4613      	mov	r3, r2
 8009388:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	2b02      	cmp	r3, #2
 800938e:	d165      	bne.n	800945c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	4a41      	ldr	r2, [pc, #260]	; (8009498 <USB_SetTurnaroundTime+0x11c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d906      	bls.n	80093a6 <USB_SetTurnaroundTime+0x2a>
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	4a40      	ldr	r2, [pc, #256]	; (800949c <USB_SetTurnaroundTime+0x120>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d202      	bcs.n	80093a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80093a0:	230f      	movs	r3, #15
 80093a2:	617b      	str	r3, [r7, #20]
 80093a4:	e062      	b.n	800946c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	4a3c      	ldr	r2, [pc, #240]	; (800949c <USB_SetTurnaroundTime+0x120>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d306      	bcc.n	80093bc <USB_SetTurnaroundTime+0x40>
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	4a3b      	ldr	r2, [pc, #236]	; (80094a0 <USB_SetTurnaroundTime+0x124>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d202      	bcs.n	80093bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80093b6:	230e      	movs	r3, #14
 80093b8:	617b      	str	r3, [r7, #20]
 80093ba:	e057      	b.n	800946c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	4a38      	ldr	r2, [pc, #224]	; (80094a0 <USB_SetTurnaroundTime+0x124>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d306      	bcc.n	80093d2 <USB_SetTurnaroundTime+0x56>
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	4a37      	ldr	r2, [pc, #220]	; (80094a4 <USB_SetTurnaroundTime+0x128>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d202      	bcs.n	80093d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80093cc:	230d      	movs	r3, #13
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	e04c      	b.n	800946c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	4a33      	ldr	r2, [pc, #204]	; (80094a4 <USB_SetTurnaroundTime+0x128>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d306      	bcc.n	80093e8 <USB_SetTurnaroundTime+0x6c>
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	4a32      	ldr	r2, [pc, #200]	; (80094a8 <USB_SetTurnaroundTime+0x12c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d802      	bhi.n	80093e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80093e2:	230c      	movs	r3, #12
 80093e4:	617b      	str	r3, [r7, #20]
 80093e6:	e041      	b.n	800946c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	4a2f      	ldr	r2, [pc, #188]	; (80094a8 <USB_SetTurnaroundTime+0x12c>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d906      	bls.n	80093fe <USB_SetTurnaroundTime+0x82>
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	4a2e      	ldr	r2, [pc, #184]	; (80094ac <USB_SetTurnaroundTime+0x130>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d802      	bhi.n	80093fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80093f8:	230b      	movs	r3, #11
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	e036      	b.n	800946c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	4a2a      	ldr	r2, [pc, #168]	; (80094ac <USB_SetTurnaroundTime+0x130>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d906      	bls.n	8009414 <USB_SetTurnaroundTime+0x98>
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	4a29      	ldr	r2, [pc, #164]	; (80094b0 <USB_SetTurnaroundTime+0x134>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d802      	bhi.n	8009414 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800940e:	230a      	movs	r3, #10
 8009410:	617b      	str	r3, [r7, #20]
 8009412:	e02b      	b.n	800946c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	4a26      	ldr	r2, [pc, #152]	; (80094b0 <USB_SetTurnaroundTime+0x134>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d906      	bls.n	800942a <USB_SetTurnaroundTime+0xae>
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4a25      	ldr	r2, [pc, #148]	; (80094b4 <USB_SetTurnaroundTime+0x138>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d202      	bcs.n	800942a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009424:	2309      	movs	r3, #9
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	e020      	b.n	800946c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	4a21      	ldr	r2, [pc, #132]	; (80094b4 <USB_SetTurnaroundTime+0x138>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d306      	bcc.n	8009440 <USB_SetTurnaroundTime+0xc4>
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	4a20      	ldr	r2, [pc, #128]	; (80094b8 <USB_SetTurnaroundTime+0x13c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d802      	bhi.n	8009440 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800943a:	2308      	movs	r3, #8
 800943c:	617b      	str	r3, [r7, #20]
 800943e:	e015      	b.n	800946c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	4a1d      	ldr	r2, [pc, #116]	; (80094b8 <USB_SetTurnaroundTime+0x13c>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d906      	bls.n	8009456 <USB_SetTurnaroundTime+0xda>
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	4a1c      	ldr	r2, [pc, #112]	; (80094bc <USB_SetTurnaroundTime+0x140>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d202      	bcs.n	8009456 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009450:	2307      	movs	r3, #7
 8009452:	617b      	str	r3, [r7, #20]
 8009454:	e00a      	b.n	800946c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009456:	2306      	movs	r3, #6
 8009458:	617b      	str	r3, [r7, #20]
 800945a:	e007      	b.n	800946c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800945c:	79fb      	ldrb	r3, [r7, #7]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d102      	bne.n	8009468 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009462:	2309      	movs	r3, #9
 8009464:	617b      	str	r3, [r7, #20]
 8009466:	e001      	b.n	800946c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009468:	2309      	movs	r3, #9
 800946a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	68da      	ldr	r2, [r3, #12]
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	029b      	lsls	r3, r3, #10
 8009480:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009484:	431a      	orrs	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	00d8acbf 	.word	0x00d8acbf
 800949c:	00e4e1c0 	.word	0x00e4e1c0
 80094a0:	00f42400 	.word	0x00f42400
 80094a4:	01067380 	.word	0x01067380
 80094a8:	011a499f 	.word	0x011a499f
 80094ac:	01312cff 	.word	0x01312cff
 80094b0:	014ca43f 	.word	0x014ca43f
 80094b4:	016e3600 	.word	0x016e3600
 80094b8:	01a6ab1f 	.word	0x01a6ab1f
 80094bc:	01e84800 	.word	0x01e84800

080094c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f043 0201 	orr.w	r2, r3, #1
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f023 0201 	bic.w	r2, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d115      	bne.n	8009552 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009532:	2001      	movs	r0, #1
 8009534:	f7f9 fc2e 	bl	8002d94 <HAL_Delay>
      ms++;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	3301      	adds	r3, #1
 800953c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 fa45 	bl	800a9ce <USB_GetMode>
 8009544:	4603      	mov	r3, r0
 8009546:	2b01      	cmp	r3, #1
 8009548:	d01e      	beq.n	8009588 <USB_SetCurrentMode+0x84>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2b31      	cmp	r3, #49	; 0x31
 800954e:	d9f0      	bls.n	8009532 <USB_SetCurrentMode+0x2e>
 8009550:	e01a      	b.n	8009588 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d115      	bne.n	8009584 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009564:	2001      	movs	r0, #1
 8009566:	f7f9 fc15 	bl	8002d94 <HAL_Delay>
      ms++;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3301      	adds	r3, #1
 800956e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f001 fa2c 	bl	800a9ce <USB_GetMode>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d005      	beq.n	8009588 <USB_SetCurrentMode+0x84>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b31      	cmp	r3, #49	; 0x31
 8009580:	d9f0      	bls.n	8009564 <USB_SetCurrentMode+0x60>
 8009582:	e001      	b.n	8009588 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e005      	b.n	8009594 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b32      	cmp	r3, #50	; 0x32
 800958c:	d101      	bne.n	8009592 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e000      	b.n	8009594 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800959c:	b084      	sub	sp, #16
 800959e:	b580      	push	{r7, lr}
 80095a0:	b086      	sub	sp, #24
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80095aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095b6:	2300      	movs	r3, #0
 80095b8:	613b      	str	r3, [r7, #16]
 80095ba:	e009      	b.n	80095d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	3340      	adds	r3, #64	; 0x40
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	2200      	movs	r2, #0
 80095c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	3301      	adds	r3, #1
 80095ce:	613b      	str	r3, [r7, #16]
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	2b0e      	cmp	r3, #14
 80095d4:	d9f2      	bls.n	80095bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d11c      	bne.n	8009616 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095ea:	f043 0302 	orr.w	r3, r3, #2
 80095ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009600:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	639a      	str	r2, [r3, #56]	; 0x38
 8009614:	e00b      	b.n	800962e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009626:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009634:	461a      	mov	r2, r3
 8009636:	2300      	movs	r3, #0
 8009638:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009640:	4619      	mov	r1, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009648:	461a      	mov	r2, r3
 800964a:	680b      	ldr	r3, [r1, #0]
 800964c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800964e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009650:	2b01      	cmp	r3, #1
 8009652:	d10c      	bne.n	800966e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	2b00      	cmp	r3, #0
 8009658:	d104      	bne.n	8009664 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800965a:	2100      	movs	r1, #0
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f965 	bl	800992c <USB_SetDevSpeed>
 8009662:	e008      	b.n	8009676 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009664:	2101      	movs	r1, #1
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f960 	bl	800992c <USB_SetDevSpeed>
 800966c:	e003      	b.n	8009676 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800966e:	2103      	movs	r1, #3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f95b 	bl	800992c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009676:	2110      	movs	r1, #16
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f8f3 	bl	8009864 <USB_FlushTxFifo>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f91f 	bl	80098cc <USB_FlushRxFifo>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800969e:	461a      	mov	r2, r3
 80096a0:	2300      	movs	r3, #0
 80096a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096aa:	461a      	mov	r2, r3
 80096ac:	2300      	movs	r3, #0
 80096ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096b6:	461a      	mov	r2, r3
 80096b8:	2300      	movs	r3, #0
 80096ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096bc:	2300      	movs	r3, #0
 80096be:	613b      	str	r3, [r7, #16]
 80096c0:	e043      	b.n	800974a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	015a      	lsls	r2, r3, #5
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	4413      	add	r3, r2
 80096ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096d8:	d118      	bne.n	800970c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ec:	461a      	mov	r2, r3
 80096ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	e013      	b.n	800971e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009702:	461a      	mov	r2, r3
 8009704:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	e008      	b.n	800971e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009718:	461a      	mov	r2, r3
 800971a:	2300      	movs	r3, #0
 800971c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800972a:	461a      	mov	r2, r3
 800972c:	2300      	movs	r3, #0
 800972e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973c:	461a      	mov	r2, r3
 800973e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009742:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	3301      	adds	r3, #1
 8009748:	613b      	str	r3, [r7, #16]
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	429a      	cmp	r2, r3
 8009750:	d3b7      	bcc.n	80096c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009752:	2300      	movs	r3, #0
 8009754:	613b      	str	r3, [r7, #16]
 8009756:	e043      	b.n	80097e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	015a      	lsls	r2, r3, #5
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	4413      	add	r3, r2
 8009760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800976a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800976e:	d118      	bne.n	80097a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10a      	bne.n	800978c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009782:	461a      	mov	r2, r3
 8009784:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	e013      	b.n	80097b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009798:	461a      	mov	r2, r3
 800979a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	e008      	b.n	80097b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ae:	461a      	mov	r2, r3
 80097b0:	2300      	movs	r3, #0
 80097b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c0:	461a      	mov	r2, r3
 80097c2:	2300      	movs	r3, #0
 80097c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	015a      	lsls	r2, r3, #5
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	4413      	add	r3, r2
 80097ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d2:	461a      	mov	r2, r3
 80097d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	3301      	adds	r3, #1
 80097de:	613b      	str	r3, [r7, #16]
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d3b7      	bcc.n	8009758 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009808:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	2b00      	cmp	r3, #0
 800980e:	d105      	bne.n	800981c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	f043 0210 	orr.w	r2, r3, #16
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	699a      	ldr	r2, [r3, #24]
 8009820:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <USB_DevInit+0x2c4>)
 8009822:	4313      	orrs	r3, r2
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800982a:	2b00      	cmp	r3, #0
 800982c:	d005      	beq.n	800983a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	f043 0208 	orr.w	r2, r3, #8
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800983a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800983c:	2b01      	cmp	r3, #1
 800983e:	d107      	bne.n	8009850 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009848:	f043 0304 	orr.w	r3, r3, #4
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009850:	7dfb      	ldrb	r3, [r7, #23]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800985c:	b004      	add	sp, #16
 800985e:	4770      	bx	lr
 8009860:	803c3800 	.word	0x803c3800

08009864 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3301      	adds	r3, #1
 8009876:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4a13      	ldr	r2, [pc, #76]	; (80098c8 <USB_FlushTxFifo+0x64>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d901      	bls.n	8009884 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e01b      	b.n	80098bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	daf2      	bge.n	8009872 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800988c:	2300      	movs	r3, #0
 800988e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	019b      	lsls	r3, r3, #6
 8009894:	f043 0220 	orr.w	r2, r3, #32
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	3301      	adds	r3, #1
 80098a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	4a08      	ldr	r2, [pc, #32]	; (80098c8 <USB_FlushTxFifo+0x64>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d901      	bls.n	80098ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e006      	b.n	80098bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	f003 0320 	and.w	r3, r3, #32
 80098b6:	2b20      	cmp	r3, #32
 80098b8:	d0f0      	beq.n	800989c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr
 80098c8:	00030d40 	.word	0x00030d40

080098cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098d4:	2300      	movs	r3, #0
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3301      	adds	r3, #1
 80098dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	4a11      	ldr	r2, [pc, #68]	; (8009928 <USB_FlushRxFifo+0x5c>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d901      	bls.n	80098ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e018      	b.n	800991c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	daf2      	bge.n	80098d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2210      	movs	r2, #16
 80098fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4a08      	ldr	r2, [pc, #32]	; (8009928 <USB_FlushRxFifo+0x5c>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d901      	bls.n	800990e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e006      	b.n	800991c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	f003 0310 	and.w	r3, r3, #16
 8009916:	2b10      	cmp	r3, #16
 8009918:	d0f0      	beq.n	80098fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	00030d40 	.word	0x00030d40

0800992c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	78fb      	ldrb	r3, [r7, #3]
 8009946:	68f9      	ldr	r1, [r7, #12]
 8009948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800994c:	4313      	orrs	r3, r2
 800994e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800995e:	b480      	push	{r7}
 8009960:	b087      	sub	sp, #28
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f003 0306 	and.w	r3, r3, #6
 8009976:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d102      	bne.n	8009984 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800997e:	2300      	movs	r3, #0
 8009980:	75fb      	strb	r3, [r7, #23]
 8009982:	e00a      	b.n	800999a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d002      	beq.n	8009990 <USB_GetDevSpeed+0x32>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2b06      	cmp	r3, #6
 800998e:	d102      	bne.n	8009996 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009990:	2302      	movs	r3, #2
 8009992:	75fb      	strb	r3, [r7, #23]
 8009994:	e001      	b.n	800999a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009996:	230f      	movs	r3, #15
 8009998:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800999a:	7dfb      	ldrb	r3, [r7, #23]
}
 800999c:	4618      	mov	r0, r3
 800999e:	371c      	adds	r7, #28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	785b      	ldrb	r3, [r3, #1]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d13a      	bne.n	8009a3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ca:	69da      	ldr	r2, [r3, #28]
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	2101      	movs	r1, #1
 80099d6:	fa01 f303 	lsl.w	r3, r1, r3
 80099da:	b29b      	uxth	r3, r3
 80099dc:	68f9      	ldr	r1, [r7, #12]
 80099de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099e2:	4313      	orrs	r3, r2
 80099e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d155      	bne.n	8009aa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	791b      	ldrb	r3, [r3, #4]
 8009a16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	059b      	lsls	r3, r3, #22
 8009a1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a20:	4313      	orrs	r3, r2
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	0151      	lsls	r1, r2, #5
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	440a      	add	r2, r1
 8009a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	e036      	b.n	8009aa8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a40:	69da      	ldr	r2, [r3, #28]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f003 030f 	and.w	r3, r3, #15
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a50:	041b      	lsls	r3, r3, #16
 8009a52:	68f9      	ldr	r1, [r7, #12]
 8009a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d11a      	bne.n	8009aa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	791b      	ldrb	r3, [r3, #4]
 8009a8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	4313      	orrs	r3, r2
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	0151      	lsls	r1, r2, #5
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	440a      	add	r2, r1
 8009a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aa6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
	...

08009ab8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	785b      	ldrb	r3, [r3, #1]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d161      	bne.n	8009b98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	015a      	lsls	r2, r3, #5
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aea:	d11f      	bne.n	8009b2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	015a      	lsls	r2, r3, #5
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	0151      	lsls	r1, r2, #5
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	440a      	add	r2, r1
 8009b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	0151      	lsls	r1, r2, #5
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	440a      	add	r2, r1
 8009b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	f003 030f 	and.w	r3, r3, #15
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	43db      	mvns	r3, r3
 8009b46:	68f9      	ldr	r1, [r7, #12]
 8009b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b56:	69da      	ldr	r2, [r3, #28]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	f003 030f 	and.w	r3, r3, #15
 8009b60:	2101      	movs	r1, #1
 8009b62:	fa01 f303 	lsl.w	r3, r1, r3
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	43db      	mvns	r3, r3
 8009b6a:	68f9      	ldr	r1, [r7, #12]
 8009b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b70:	4013      	ands	r3, r2
 8009b72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	0159      	lsls	r1, r3, #5
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	440b      	add	r3, r1
 8009b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b8e:	4619      	mov	r1, r3
 8009b90:	4b35      	ldr	r3, [pc, #212]	; (8009c68 <USB_DeactivateEndpoint+0x1b0>)
 8009b92:	4013      	ands	r3, r2
 8009b94:	600b      	str	r3, [r1, #0]
 8009b96:	e060      	b.n	8009c5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bae:	d11f      	bne.n	8009bf0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	015a      	lsls	r2, r3, #5
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	0151      	lsls	r1, r2, #5
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	440a      	add	r2, r1
 8009bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	0151      	lsls	r1, r2, #5
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	440a      	add	r2, r1
 8009be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	f003 030f 	and.w	r3, r3, #15
 8009c00:	2101      	movs	r1, #1
 8009c02:	fa01 f303 	lsl.w	r3, r1, r3
 8009c06:	041b      	lsls	r3, r3, #16
 8009c08:	43db      	mvns	r3, r3
 8009c0a:	68f9      	ldr	r1, [r7, #12]
 8009c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c10:	4013      	ands	r3, r2
 8009c12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c1a:	69da      	ldr	r2, [r3, #28]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	f003 030f 	and.w	r3, r3, #15
 8009c24:	2101      	movs	r1, #1
 8009c26:	fa01 f303 	lsl.w	r3, r1, r3
 8009c2a:	041b      	lsls	r3, r3, #16
 8009c2c:	43db      	mvns	r3, r3
 8009c2e:	68f9      	ldr	r1, [r7, #12]
 8009c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c34:	4013      	ands	r3, r2
 8009c36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	0159      	lsls	r1, r3, #5
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	440b      	add	r3, r1
 8009c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c52:	4619      	mov	r1, r3
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <USB_DeactivateEndpoint+0x1b4>)
 8009c56:	4013      	ands	r3, r2
 8009c58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	ec337800 	.word	0xec337800
 8009c6c:	eff37800 	.word	0xeff37800

08009c70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08a      	sub	sp, #40	; 0x28
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	785b      	ldrb	r3, [r3, #1]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	f040 815c 	bne.w	8009f4a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d132      	bne.n	8009d00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	015a      	lsls	r2, r3, #5
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	69ba      	ldr	r2, [r7, #24]
 8009caa:	0151      	lsls	r1, r2, #5
 8009cac:	69fa      	ldr	r2, [r7, #28]
 8009cae:	440a      	add	r2, r1
 8009cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009cb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009cbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	015a      	lsls	r2, r3, #5
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	69ba      	ldr	r2, [r7, #24]
 8009cce:	0151      	lsls	r1, r2, #5
 8009cd0:	69fa      	ldr	r2, [r7, #28]
 8009cd2:	440a      	add	r2, r1
 8009cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	015a      	lsls	r2, r3, #5
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	0151      	lsls	r1, r2, #5
 8009cf0:	69fa      	ldr	r2, [r7, #28]
 8009cf2:	440a      	add	r2, r1
 8009cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cf8:	0cdb      	lsrs	r3, r3, #19
 8009cfa:	04db      	lsls	r3, r3, #19
 8009cfc:	6113      	str	r3, [r2, #16]
 8009cfe:	e074      	b.n	8009dea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	69ba      	ldr	r2, [r7, #24]
 8009d10:	0151      	lsls	r1, r2, #5
 8009d12:	69fa      	ldr	r2, [r7, #28]
 8009d14:	440a      	add	r2, r1
 8009d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d1a:	0cdb      	lsrs	r3, r3, #19
 8009d1c:	04db      	lsls	r3, r3, #19
 8009d1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	015a      	lsls	r2, r3, #5
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	4413      	add	r3, r2
 8009d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	0151      	lsls	r1, r2, #5
 8009d32:	69fa      	ldr	r2, [r7, #28]
 8009d34:	440a      	add	r2, r1
 8009d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	6999      	ldr	r1, [r3, #24]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	440b      	add	r3, r1
 8009d5c:	1e59      	subs	r1, r3, #1
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009d68:	4b9d      	ldr	r3, [pc, #628]	; (8009fe0 <USB_EPStartXfer+0x370>)
 8009d6a:	400b      	ands	r3, r1
 8009d6c:	69b9      	ldr	r1, [r7, #24]
 8009d6e:	0148      	lsls	r0, r1, #5
 8009d70:	69f9      	ldr	r1, [r7, #28]
 8009d72:	4401      	add	r1, r0
 8009d74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d88:	691a      	ldr	r2, [r3, #16]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d92:	69b9      	ldr	r1, [r7, #24]
 8009d94:	0148      	lsls	r0, r1, #5
 8009d96:	69f9      	ldr	r1, [r7, #28]
 8009d98:	4401      	add	r1, r0
 8009d9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	791b      	ldrb	r3, [r3, #4]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d11f      	bne.n	8009dea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	69fa      	ldr	r2, [r7, #28]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dc4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009dc8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	015a      	lsls	r2, r3, #5
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	0151      	lsls	r1, r2, #5
 8009ddc:	69fa      	ldr	r2, [r7, #28]
 8009dde:	440a      	add	r2, r1
 8009de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009de4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009de8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d14b      	bne.n	8009e88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d009      	beq.n	8009e0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	015a      	lsls	r2, r3, #5
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e04:	461a      	mov	r2, r3
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	791b      	ldrb	r3, [r3, #4]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d128      	bne.n	8009e66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d110      	bne.n	8009e46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69ba      	ldr	r2, [r7, #24]
 8009e34:	0151      	lsls	r1, r2, #5
 8009e36:	69fa      	ldr	r2, [r7, #28]
 8009e38:	440a      	add	r2, r1
 8009e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	e00f      	b.n	8009e66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	0151      	lsls	r1, r2, #5
 8009e58:	69fa      	ldr	r2, [r7, #28]
 8009e5a:	440a      	add	r2, r1
 8009e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	69ba      	ldr	r2, [r7, #24]
 8009e76:	0151      	lsls	r1, r2, #5
 8009e78:	69fa      	ldr	r2, [r7, #28]
 8009e7a:	440a      	add	r2, r1
 8009e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	e133      	b.n	800a0f0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	015a      	lsls	r2, r3, #5
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	4413      	add	r3, r2
 8009e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	0151      	lsls	r1, r2, #5
 8009e9a:	69fa      	ldr	r2, [r7, #28]
 8009e9c:	440a      	add	r2, r1
 8009e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ea2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ea6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	791b      	ldrb	r3, [r3, #4]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d015      	beq.n	8009edc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 811b 	beq.w	800a0f0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	f003 030f 	and.w	r3, r3, #15
 8009eca:	2101      	movs	r1, #1
 8009ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed0:	69f9      	ldr	r1, [r7, #28]
 8009ed2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	634b      	str	r3, [r1, #52]	; 0x34
 8009eda:	e109      	b.n	800a0f0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d110      	bne.n	8009f0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	69ba      	ldr	r2, [r7, #24]
 8009efc:	0151      	lsls	r1, r2, #5
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	440a      	add	r2, r1
 8009f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	e00f      	b.n	8009f2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	015a      	lsls	r2, r3, #5
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	4413      	add	r3, r2
 8009f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	69ba      	ldr	r2, [r7, #24]
 8009f1e:	0151      	lsls	r1, r2, #5
 8009f20:	69fa      	ldr	r2, [r7, #28]
 8009f22:	440a      	add	r2, r1
 8009f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	6919      	ldr	r1, [r3, #16]
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	781a      	ldrb	r2, [r3, #0]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	b298      	uxth	r0, r3
 8009f3c:	79fb      	ldrb	r3, [r7, #7]
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	4603      	mov	r3, r0
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 fade 	bl	800a504 <USB_WritePacket>
 8009f48:	e0d2      	b.n	800a0f0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	69ba      	ldr	r2, [r7, #24]
 8009f5a:	0151      	lsls	r1, r2, #5
 8009f5c:	69fa      	ldr	r2, [r7, #28]
 8009f5e:	440a      	add	r2, r1
 8009f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f64:	0cdb      	lsrs	r3, r3, #19
 8009f66:	04db      	lsls	r3, r3, #19
 8009f68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	0151      	lsls	r1, r2, #5
 8009f7c:	69fa      	ldr	r2, [r7, #28]
 8009f7e:	440a      	add	r2, r1
 8009f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d126      	bne.n	8009fe4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa2:	691a      	ldr	r2, [r3, #16]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fac:	69b9      	ldr	r1, [r7, #24]
 8009fae:	0148      	lsls	r0, r1, #5
 8009fb0:	69f9      	ldr	r1, [r7, #28]
 8009fb2:	4401      	add	r1, r0
 8009fb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	0151      	lsls	r1, r2, #5
 8009fce:	69fa      	ldr	r2, [r7, #28]
 8009fd0:	440a      	add	r2, r1
 8009fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fda:	6113      	str	r3, [r2, #16]
 8009fdc:	e03a      	b.n	800a054 <USB_EPStartXfer+0x3e4>
 8009fde:	bf00      	nop
 8009fe0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	699a      	ldr	r2, [r3, #24]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	4413      	add	r3, r2
 8009fee:	1e5a      	subs	r2, r3, #1
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ff8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	8afa      	ldrh	r2, [r7, #22]
 800a000:	fb03 f202 	mul.w	r2, r3, r2
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a014:	691a      	ldr	r2, [r3, #16]
 800a016:	8afb      	ldrh	r3, [r7, #22]
 800a018:	04d9      	lsls	r1, r3, #19
 800a01a:	4b38      	ldr	r3, [pc, #224]	; (800a0fc <USB_EPStartXfer+0x48c>)
 800a01c:	400b      	ands	r3, r1
 800a01e:	69b9      	ldr	r1, [r7, #24]
 800a020:	0148      	lsls	r0, r1, #5
 800a022:	69f9      	ldr	r1, [r7, #28]
 800a024:	4401      	add	r1, r0
 800a026:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a02a:	4313      	orrs	r3, r2
 800a02c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	015a      	lsls	r2, r3, #5
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	4413      	add	r3, r2
 800a036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a03a:	691a      	ldr	r2, [r3, #16]
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a044:	69b9      	ldr	r1, [r7, #24]
 800a046:	0148      	lsls	r0, r1, #5
 800a048:	69f9      	ldr	r1, [r7, #28]
 800a04a:	4401      	add	r1, r0
 800a04c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a050:	4313      	orrs	r3, r2
 800a052:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a054:	79fb      	ldrb	r3, [r7, #7]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d10d      	bne.n	800a076 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d009      	beq.n	800a076 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	6919      	ldr	r1, [r3, #16]
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a072:	460a      	mov	r2, r1
 800a074:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	791b      	ldrb	r3, [r3, #4]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d128      	bne.n	800a0d0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d110      	bne.n	800a0b0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	015a      	lsls	r2, r3, #5
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	4413      	add	r3, r2
 800a096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	69ba      	ldr	r2, [r7, #24]
 800a09e:	0151      	lsls	r1, r2, #5
 800a0a0:	69fa      	ldr	r2, [r7, #28]
 800a0a2:	440a      	add	r2, r1
 800a0a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0ac:	6013      	str	r3, [r2, #0]
 800a0ae:	e00f      	b.n	800a0d0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	0151      	lsls	r1, r2, #5
 800a0c2:	69fa      	ldr	r2, [r7, #28]
 800a0c4:	440a      	add	r2, r1
 800a0c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	69fa      	ldr	r2, [r7, #28]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3720      	adds	r7, #32
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	1ff80000 	.word	0x1ff80000

0800a100 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a100:	b480      	push	{r7}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	4613      	mov	r3, r2
 800a10c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	785b      	ldrb	r3, [r3, #1]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	f040 80ce 	bne.w	800a2be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d132      	bne.n	800a190 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	0151      	lsls	r1, r2, #5
 800a13c:	697a      	ldr	r2, [r7, #20]
 800a13e:	440a      	add	r2, r1
 800a140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a144:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a148:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a14c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	015a      	lsls	r2, r3, #5
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	4413      	add	r3, r2
 800a156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	0151      	lsls	r1, r2, #5
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	440a      	add	r2, r1
 800a164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a168:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a16c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	015a      	lsls	r2, r3, #5
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	4413      	add	r3, r2
 800a176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	0151      	lsls	r1, r2, #5
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	440a      	add	r2, r1
 800a184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a188:	0cdb      	lsrs	r3, r3, #19
 800a18a:	04db      	lsls	r3, r3, #19
 800a18c:	6113      	str	r3, [r2, #16]
 800a18e:	e04e      	b.n	800a22e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	0151      	lsls	r1, r2, #5
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	440a      	add	r2, r1
 800a1a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1aa:	0cdb      	lsrs	r3, r3, #19
 800a1ac:	04db      	lsls	r3, r3, #19
 800a1ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	0151      	lsls	r1, r2, #5
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	699a      	ldr	r2, [r3, #24]
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d903      	bls.n	800a1e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	68da      	ldr	r2, [r3, #12]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	015a      	lsls	r2, r3, #5
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	0151      	lsls	r1, r2, #5
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	440a      	add	r2, r1
 800a1fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a214:	691a      	ldr	r2, [r3, #16]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a21e:	6939      	ldr	r1, [r7, #16]
 800a220:	0148      	lsls	r0, r1, #5
 800a222:	6979      	ldr	r1, [r7, #20]
 800a224:	4401      	add	r1, r0
 800a226:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a22a:	4313      	orrs	r3, r2
 800a22c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a22e:	79fb      	ldrb	r3, [r7, #7]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d11e      	bne.n	800a272 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	695b      	ldr	r3, [r3, #20]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d009      	beq.n	800a250 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	4413      	add	r3, r2
 800a244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a248:	461a      	mov	r2, r3
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	015a      	lsls	r2, r3, #5
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	4413      	add	r3, r2
 800a258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	0151      	lsls	r1, r2, #5
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	440a      	add	r2, r1
 800a266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a26a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a26e:	6013      	str	r3, [r2, #0]
 800a270:	e097      	b.n	800a3a2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	015a      	lsls	r2, r3, #5
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	4413      	add	r3, r2
 800a27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	0151      	lsls	r1, r2, #5
 800a284:	697a      	ldr	r2, [r7, #20]
 800a286:	440a      	add	r2, r1
 800a288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a28c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a290:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 8083 	beq.w	800a3a2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	f003 030f 	and.w	r3, r3, #15
 800a2ac:	2101      	movs	r1, #1
 800a2ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a2b2:	6979      	ldr	r1, [r7, #20]
 800a2b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	634b      	str	r3, [r1, #52]	; 0x34
 800a2bc:	e071      	b.n	800a3a2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	0151      	lsls	r1, r2, #5
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	440a      	add	r2, r1
 800a2d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2d8:	0cdb      	lsrs	r3, r3, #19
 800a2da:	04db      	lsls	r3, r3, #19
 800a2dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	0151      	lsls	r1, r2, #5
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	440a      	add	r2, r1
 800a2f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a300:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d003      	beq.n	800a312 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	68da      	ldr	r2, [r3, #12]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	68da      	ldr	r2, [r3, #12]
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	015a      	lsls	r2, r3, #5
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	4413      	add	r3, r2
 800a322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	0151      	lsls	r1, r2, #5
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	440a      	add	r2, r1
 800a330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a338:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	4413      	add	r3, r2
 800a342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a346:	691a      	ldr	r2, [r3, #16]
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a350:	6939      	ldr	r1, [r7, #16]
 800a352:	0148      	lsls	r0, r1, #5
 800a354:	6979      	ldr	r1, [r7, #20]
 800a356:	4401      	add	r1, r0
 800a358:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a35c:	4313      	orrs	r3, r2
 800a35e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a360:	79fb      	ldrb	r3, [r7, #7]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d10d      	bne.n	800a382 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d009      	beq.n	800a382 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	6919      	ldr	r1, [r3, #16]
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	015a      	lsls	r2, r3, #5
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	4413      	add	r3, r2
 800a37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a37e:	460a      	mov	r2, r1
 800a380:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	0151      	lsls	r1, r2, #5
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	440a      	add	r2, r1
 800a398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a39c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	371c      	adds	r7, #28
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	785b      	ldrb	r3, [r3, #1]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d14a      	bne.n	800a464 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	015a      	lsls	r2, r3, #5
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3e6:	f040 8086 	bne.w	800a4f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	7812      	ldrb	r2, [r2, #0]
 800a3fe:	0151      	lsls	r1, r2, #5
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	440a      	add	r2, r1
 800a404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a408:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a40c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	4413      	add	r3, r2
 800a418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	7812      	ldrb	r2, [r2, #0]
 800a422:	0151      	lsls	r1, r2, #5
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	440a      	add	r2, r1
 800a428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a42c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a430:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3301      	adds	r3, #1
 800a436:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a43e:	4293      	cmp	r3, r2
 800a440:	d902      	bls.n	800a448 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	75fb      	strb	r3, [r7, #23]
          break;
 800a446:	e056      	b.n	800a4f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a45c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a460:	d0e7      	beq.n	800a432 <USB_EPStopXfer+0x82>
 800a462:	e048      	b.n	800a4f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a47c:	d13b      	bne.n	800a4f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	015a      	lsls	r2, r3, #5
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	4413      	add	r3, r2
 800a488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	7812      	ldrb	r2, [r2, #0]
 800a492:	0151      	lsls	r1, r2, #5
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	440a      	add	r2, r1
 800a498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a49c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	7812      	ldrb	r2, [r2, #0]
 800a4b6:	0151      	lsls	r1, r2, #5
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	440a      	add	r2, r1
 800a4bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f242 7210 	movw	r2, #10000	; 0x2710
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d902      	bls.n	800a4dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	75fb      	strb	r3, [r7, #23]
          break;
 800a4da:	e00c      	b.n	800a4f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	015a      	lsls	r2, r3, #5
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4f4:	d0e7      	beq.n	800a4c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	371c      	adds	r7, #28
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a504:	b480      	push	{r7}
 800a506:	b089      	sub	sp, #36	; 0x24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	4611      	mov	r1, r2
 800a510:	461a      	mov	r2, r3
 800a512:	460b      	mov	r3, r1
 800a514:	71fb      	strb	r3, [r7, #7]
 800a516:	4613      	mov	r3, r2
 800a518:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a522:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a526:	2b00      	cmp	r3, #0
 800a528:	d123      	bne.n	800a572 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a52a:	88bb      	ldrh	r3, [r7, #4]
 800a52c:	3303      	adds	r3, #3
 800a52e:	089b      	lsrs	r3, r3, #2
 800a530:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a532:	2300      	movs	r3, #0
 800a534:	61bb      	str	r3, [r7, #24]
 800a536:	e018      	b.n	800a56a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a538:	79fb      	ldrb	r3, [r7, #7]
 800a53a:	031a      	lsls	r2, r3, #12
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a544:	461a      	mov	r2, r3
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	3301      	adds	r3, #1
 800a550:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	3301      	adds	r3, #1
 800a556:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	3301      	adds	r3, #1
 800a55c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	3301      	adds	r3, #1
 800a562:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	3301      	adds	r3, #1
 800a568:	61bb      	str	r3, [r7, #24]
 800a56a:	69ba      	ldr	r2, [r7, #24]
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d3e2      	bcc.n	800a538 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3724      	adds	r7, #36	; 0x24
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a580:	b480      	push	{r7}
 800a582:	b08b      	sub	sp, #44	; 0x2c
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	4613      	mov	r3, r2
 800a58c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a596:	88fb      	ldrh	r3, [r7, #6]
 800a598:	089b      	lsrs	r3, r3, #2
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a59e:	88fb      	ldrh	r3, [r7, #6]
 800a5a0:	f003 0303 	and.w	r3, r3, #3
 800a5a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	623b      	str	r3, [r7, #32]
 800a5aa:	e014      	b.n	800a5d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a5d0:	6a3b      	ldr	r3, [r7, #32]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	623b      	str	r3, [r7, #32]
 800a5d6:	6a3a      	ldr	r2, [r7, #32]
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d3e6      	bcc.n	800a5ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a5de:	8bfb      	ldrh	r3, [r7, #30]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d01e      	beq.n	800a622 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f107 0310 	add.w	r3, r7, #16
 800a5f4:	6812      	ldr	r2, [r2, #0]
 800a5f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	00db      	lsls	r3, r3, #3
 800a600:	fa22 f303 	lsr.w	r3, r2, r3
 800a604:	b2da      	uxtb	r2, r3
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	701a      	strb	r2, [r3, #0]
      i++;
 800a60a:	6a3b      	ldr	r3, [r7, #32]
 800a60c:	3301      	adds	r3, #1
 800a60e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	3301      	adds	r3, #1
 800a614:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a616:	8bfb      	ldrh	r3, [r7, #30]
 800a618:	3b01      	subs	r3, #1
 800a61a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a61c:	8bfb      	ldrh	r3, [r7, #30]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1ea      	bne.n	800a5f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a624:	4618      	mov	r0, r3
 800a626:	372c      	adds	r7, #44	; 0x2c
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	785b      	ldrb	r3, [r3, #1]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d12c      	bne.n	800a6a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	015a      	lsls	r2, r3, #5
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4413      	add	r3, r2
 800a654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	db12      	blt.n	800a684 <USB_EPSetStall+0x54>
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00f      	beq.n	800a684 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	0151      	lsls	r1, r2, #5
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	440a      	add	r2, r1
 800a67a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a67e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a682:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	015a      	lsls	r2, r3, #5
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	4413      	add	r3, r2
 800a68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	0151      	lsls	r1, r2, #5
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	440a      	add	r2, r1
 800a69a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a69e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	e02b      	b.n	800a6fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	015a      	lsls	r2, r3, #5
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	db12      	blt.n	800a6de <USB_EPSetStall+0xae>
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00f      	beq.n	800a6de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	0151      	lsls	r1, r2, #5
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	440a      	add	r2, r1
 800a6d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	015a      	lsls	r2, r3, #5
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	0151      	lsls	r1, r2, #5
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	440a      	add	r2, r1
 800a6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	785b      	ldrb	r3, [r3, #1]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d128      	bne.n	800a77a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68ba      	ldr	r2, [r7, #8]
 800a738:	0151      	lsls	r1, r2, #5
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	440a      	add	r2, r1
 800a73e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a742:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a746:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	791b      	ldrb	r3, [r3, #4]
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d003      	beq.n	800a758 <USB_EPClearStall+0x4c>
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	791b      	ldrb	r3, [r3, #4]
 800a754:	2b02      	cmp	r3, #2
 800a756:	d138      	bne.n	800a7ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	0151      	lsls	r1, r2, #5
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	440a      	add	r2, r1
 800a76e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	e027      	b.n	800a7ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	4413      	add	r3, r2
 800a782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	0151      	lsls	r1, r2, #5
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	440a      	add	r2, r1
 800a790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a794:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a798:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	791b      	ldrb	r3, [r3, #4]
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d003      	beq.n	800a7aa <USB_EPClearStall+0x9e>
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	791b      	ldrb	r3, [r3, #4]
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d10f      	bne.n	800a7ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	0151      	lsls	r1, r2, #5
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	440a      	add	r2, r1
 800a7c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a7fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	011b      	lsls	r3, r3, #4
 800a808:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a80c:	68f9      	ldr	r1, [r7, #12]
 800a80e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a812:	4313      	orrs	r3, r2
 800a814:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a83e:	f023 0303 	bic.w	r3, r3, #3
 800a842:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a852:	f023 0302 	bic.w	r3, r3, #2
 800a856:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a866:	b480      	push	{r7}
 800a868:	b085      	sub	sp, #20
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a880:	f023 0303 	bic.w	r3, r3, #3
 800a884:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a894:	f043 0302 	orr.w	r3, r3, #2
 800a898:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	695b      	ldr	r3, [r3, #20]
 800a8b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	4013      	ands	r3, r2
 800a8be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b085      	sub	sp, #20
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ea:	69db      	ldr	r3, [r3, #28]
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	0c1b      	lsrs	r3, r3, #16
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a902:	b480      	push	{r7}
 800a904:	b085      	sub	sp, #20
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a91e:	69db      	ldr	r3, [r3, #28]
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	4013      	ands	r3, r2
 800a924:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	b29b      	uxth	r3, r3
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a936:	b480      	push	{r7}
 800a938:	b085      	sub	sp, #20
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	460b      	mov	r3, r1
 800a940:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	015a      	lsls	r2, r3, #5
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	4413      	add	r3, r2
 800a94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	4013      	ands	r3, r2
 800a962:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a964:	68bb      	ldr	r3, [r7, #8]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a972:	b480      	push	{r7}
 800a974:	b087      	sub	sp, #28
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	460b      	mov	r3, r1
 800a97c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a994:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a996:	78fb      	ldrb	r3, [r7, #3]
 800a998:	f003 030f 	and.w	r3, r3, #15
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	fa22 f303 	lsr.w	r3, r2, r3
 800a9a2:	01db      	lsls	r3, r3, #7
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a9ac:	78fb      	ldrb	r3, [r7, #3]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	4013      	ands	r3, r2
 800a9be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9c0:	68bb      	ldr	r3, [r7, #8]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	371c      	adds	r7, #28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	f003 0301 	and.w	r3, r3, #1
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aa08:	f023 0307 	bic.w	r3, r3, #7
 800aa0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b087      	sub	sp, #28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	607a      	str	r2, [r7, #4]
 800aa3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	333c      	adds	r3, #60	; 0x3c
 800aa46:	3304      	adds	r3, #4
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	4a26      	ldr	r2, [pc, #152]	; (800aae8 <USB_EP0_OutStart+0xb8>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d90a      	bls.n	800aa6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa64:	d101      	bne.n	800aa6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	e037      	b.n	800aada <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa70:	461a      	mov	r2, r3
 800aa72:	2300      	movs	r3, #0
 800aa74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa98:	f043 0318 	orr.w	r3, r3, #24
 800aa9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aab0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aab2:	7afb      	ldrb	r3, [r7, #11]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d10f      	bne.n	800aad8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aabe:	461a      	mov	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aad2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800aad6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	371c      	adds	r7, #28
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	4f54300a 	.word	0x4f54300a

0800aaec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	3301      	adds	r3, #1
 800aafc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	4a13      	ldr	r2, [pc, #76]	; (800ab50 <USB_CoreReset+0x64>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d901      	bls.n	800ab0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab06:	2303      	movs	r3, #3
 800ab08:	e01b      	b.n	800ab42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	daf2      	bge.n	800aaf8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab12:	2300      	movs	r3, #0
 800ab14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	f043 0201 	orr.w	r2, r3, #1
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	3301      	adds	r3, #1
 800ab26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4a09      	ldr	r2, [pc, #36]	; (800ab50 <USB_CoreReset+0x64>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d901      	bls.n	800ab34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e006      	b.n	800ab42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d0f0      	beq.n	800ab22 <USB_CoreReset+0x36>

  return HAL_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	00030d40 	.word	0x00030d40

0800ab54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ab64:	f005 fe70 	bl	8010848 <USBD_static_malloc>
 800ab68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d109      	bne.n	800ab84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	32b0      	adds	r2, #176	; 0xb0
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ab80:	2302      	movs	r3, #2
 800ab82:	e0d4      	b.n	800ad2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ab84:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ab88:	2100      	movs	r1, #0
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f005 fee8 	bl	8010960 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	32b0      	adds	r2, #176	; 0xb0
 800ab9a:	68f9      	ldr	r1, [r7, #12]
 800ab9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	32b0      	adds	r2, #176	; 0xb0
 800abaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	7c1b      	ldrb	r3, [r3, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d138      	bne.n	800ac2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abbc:	4b5e      	ldr	r3, [pc, #376]	; (800ad38 <USBD_CDC_Init+0x1e4>)
 800abbe:	7819      	ldrb	r1, [r3, #0]
 800abc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abc4:	2202      	movs	r2, #2
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f005 fd1b 	bl	8010602 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abcc:	4b5a      	ldr	r3, [pc, #360]	; (800ad38 <USBD_CDC_Init+0x1e4>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	f003 020f 	and.w	r2, r3, #15
 800abd4:	6879      	ldr	r1, [r7, #4]
 800abd6:	4613      	mov	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	440b      	add	r3, r1
 800abe0:	3324      	adds	r3, #36	; 0x24
 800abe2:	2201      	movs	r2, #1
 800abe4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800abe6:	4b55      	ldr	r3, [pc, #340]	; (800ad3c <USBD_CDC_Init+0x1e8>)
 800abe8:	7819      	ldrb	r1, [r3, #0]
 800abea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abee:	2202      	movs	r2, #2
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f005 fd06 	bl	8010602 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800abf6:	4b51      	ldr	r3, [pc, #324]	; (800ad3c <USBD_CDC_Init+0x1e8>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	f003 020f 	and.w	r2, r3, #15
 800abfe:	6879      	ldr	r1, [r7, #4]
 800ac00:	4613      	mov	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	440b      	add	r3, r1
 800ac0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac0e:	2201      	movs	r2, #1
 800ac10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac12:	4b4b      	ldr	r3, [pc, #300]	; (800ad40 <USBD_CDC_Init+0x1ec>)
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	f003 020f 	and.w	r2, r3, #15
 800ac1a:	6879      	ldr	r1, [r7, #4]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	440b      	add	r3, r1
 800ac26:	3326      	adds	r3, #38	; 0x26
 800ac28:	2210      	movs	r2, #16
 800ac2a:	801a      	strh	r2, [r3, #0]
 800ac2c:	e035      	b.n	800ac9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac2e:	4b42      	ldr	r3, [pc, #264]	; (800ad38 <USBD_CDC_Init+0x1e4>)
 800ac30:	7819      	ldrb	r1, [r3, #0]
 800ac32:	2340      	movs	r3, #64	; 0x40
 800ac34:	2202      	movs	r2, #2
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f005 fce3 	bl	8010602 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac3c:	4b3e      	ldr	r3, [pc, #248]	; (800ad38 <USBD_CDC_Init+0x1e4>)
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	f003 020f 	and.w	r2, r3, #15
 800ac44:	6879      	ldr	r1, [r7, #4]
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	440b      	add	r3, r1
 800ac50:	3324      	adds	r3, #36	; 0x24
 800ac52:	2201      	movs	r2, #1
 800ac54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac56:	4b39      	ldr	r3, [pc, #228]	; (800ad3c <USBD_CDC_Init+0x1e8>)
 800ac58:	7819      	ldrb	r1, [r3, #0]
 800ac5a:	2340      	movs	r3, #64	; 0x40
 800ac5c:	2202      	movs	r2, #2
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f005 fccf 	bl	8010602 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac64:	4b35      	ldr	r3, [pc, #212]	; (800ad3c <USBD_CDC_Init+0x1e8>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	f003 020f 	and.w	r2, r3, #15
 800ac6c:	6879      	ldr	r1, [r7, #4]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	440b      	add	r3, r1
 800ac78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ac80:	4b2f      	ldr	r3, [pc, #188]	; (800ad40 <USBD_CDC_Init+0x1ec>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	f003 020f 	and.w	r2, r3, #15
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	440b      	add	r3, r1
 800ac94:	3326      	adds	r3, #38	; 0x26
 800ac96:	2210      	movs	r2, #16
 800ac98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac9a:	4b29      	ldr	r3, [pc, #164]	; (800ad40 <USBD_CDC_Init+0x1ec>)
 800ac9c:	7819      	ldrb	r1, [r3, #0]
 800ac9e:	2308      	movs	r3, #8
 800aca0:	2203      	movs	r2, #3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f005 fcad 	bl	8010602 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800aca8:	4b25      	ldr	r3, [pc, #148]	; (800ad40 <USBD_CDC_Init+0x1ec>)
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	f003 020f 	and.w	r2, r3, #15
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	4613      	mov	r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	4413      	add	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	440b      	add	r3, r1
 800acbc:	3324      	adds	r3, #36	; 0x24
 800acbe:	2201      	movs	r2, #1
 800acc0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	33b0      	adds	r3, #176	; 0xb0
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800acf8:	2302      	movs	r3, #2
 800acfa:	e018      	b.n	800ad2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	7c1b      	ldrb	r3, [r3, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10a      	bne.n	800ad1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad04:	4b0d      	ldr	r3, [pc, #52]	; (800ad3c <USBD_CDC_Init+0x1e8>)
 800ad06:	7819      	ldrb	r1, [r3, #0]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f005 fd64 	bl	80107e0 <USBD_LL_PrepareReceive>
 800ad18:	e008      	b.n	800ad2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad1a:	4b08      	ldr	r3, [pc, #32]	; (800ad3c <USBD_CDC_Init+0x1e8>)
 800ad1c:	7819      	ldrb	r1, [r3, #0]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad24:	2340      	movs	r3, #64	; 0x40
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f005 fd5a 	bl	80107e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	2000011f 	.word	0x2000011f
 800ad3c:	20000120 	.word	0x20000120
 800ad40:	20000121 	.word	0x20000121

0800ad44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad50:	4b3a      	ldr	r3, [pc, #232]	; (800ae3c <USBD_CDC_DeInit+0xf8>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f005 fc79 	bl	801064e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad5c:	4b37      	ldr	r3, [pc, #220]	; (800ae3c <USBD_CDC_DeInit+0xf8>)
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	f003 020f 	and.w	r2, r3, #15
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	4613      	mov	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	440b      	add	r3, r1
 800ad70:	3324      	adds	r3, #36	; 0x24
 800ad72:	2200      	movs	r2, #0
 800ad74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ad76:	4b32      	ldr	r3, [pc, #200]	; (800ae40 <USBD_CDC_DeInit+0xfc>)
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f005 fc66 	bl	801064e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ad82:	4b2f      	ldr	r3, [pc, #188]	; (800ae40 <USBD_CDC_DeInit+0xfc>)
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	f003 020f 	and.w	r2, r3, #15
 800ad8a:	6879      	ldr	r1, [r7, #4]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4413      	add	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	440b      	add	r3, r1
 800ad96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ad9e:	4b29      	ldr	r3, [pc, #164]	; (800ae44 <USBD_CDC_DeInit+0x100>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	4619      	mov	r1, r3
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f005 fc52 	bl	801064e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800adaa:	4b26      	ldr	r3, [pc, #152]	; (800ae44 <USBD_CDC_DeInit+0x100>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	f003 020f 	and.w	r2, r3, #15
 800adb2:	6879      	ldr	r1, [r7, #4]
 800adb4:	4613      	mov	r3, r2
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	4413      	add	r3, r2
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	440b      	add	r3, r1
 800adbe:	3324      	adds	r3, #36	; 0x24
 800adc0:	2200      	movs	r2, #0
 800adc2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800adc4:	4b1f      	ldr	r3, [pc, #124]	; (800ae44 <USBD_CDC_DeInit+0x100>)
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	f003 020f 	and.w	r2, r3, #15
 800adcc:	6879      	ldr	r1, [r7, #4]
 800adce:	4613      	mov	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	440b      	add	r3, r1
 800add8:	3326      	adds	r3, #38	; 0x26
 800adda:	2200      	movs	r2, #0
 800addc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	32b0      	adds	r2, #176	; 0xb0
 800ade8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d01f      	beq.n	800ae30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	33b0      	adds	r3, #176	; 0xb0
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4413      	add	r3, r2
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	32b0      	adds	r2, #176	; 0xb0
 800ae0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f005 fd26 	bl	8010864 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	32b0      	adds	r2, #176	; 0xb0
 800ae22:	2100      	movs	r1, #0
 800ae24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	2000011f 	.word	0x2000011f
 800ae40:	20000120 	.word	0x20000120
 800ae44:	20000121 	.word	0x20000121

0800ae48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	32b0      	adds	r2, #176	; 0xb0
 800ae5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae62:	2300      	movs	r3, #0
 800ae64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae66:	2300      	movs	r3, #0
 800ae68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ae74:	2303      	movs	r3, #3
 800ae76:	e0bf      	b.n	800aff8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d050      	beq.n	800af26 <USBD_CDC_Setup+0xde>
 800ae84:	2b20      	cmp	r3, #32
 800ae86:	f040 80af 	bne.w	800afe8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	88db      	ldrh	r3, [r3, #6]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d03a      	beq.n	800af08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	b25b      	sxtb	r3, r3
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	da1b      	bge.n	800aed4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	33b0      	adds	r3, #176	; 0xb0
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	4413      	add	r3, r2
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aeb2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	88d2      	ldrh	r2, [r2, #6]
 800aeb8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	88db      	ldrh	r3, [r3, #6]
 800aebe:	2b07      	cmp	r3, #7
 800aec0:	bf28      	it	cs
 800aec2:	2307      	movcs	r3, #7
 800aec4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	89fa      	ldrh	r2, [r7, #14]
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f001 fd43 	bl	800c958 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aed2:	e090      	b.n	800aff6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	785a      	ldrb	r2, [r3, #1]
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	88db      	ldrh	r3, [r3, #6]
 800aee2:	2b3f      	cmp	r3, #63	; 0x3f
 800aee4:	d803      	bhi.n	800aeee <USBD_CDC_Setup+0xa6>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	88db      	ldrh	r3, [r3, #6]
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	e000      	b.n	800aef0 <USBD_CDC_Setup+0xa8>
 800aeee:	2240      	movs	r2, #64	; 0x40
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aef6:	6939      	ldr	r1, [r7, #16]
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800aefe:	461a      	mov	r2, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f001 fd55 	bl	800c9b0 <USBD_CtlPrepareRx>
      break;
 800af06:	e076      	b.n	800aff6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	33b0      	adds	r3, #176	; 0xb0
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	7850      	ldrb	r0, [r2, #1]
 800af1e:	2200      	movs	r2, #0
 800af20:	6839      	ldr	r1, [r7, #0]
 800af22:	4798      	blx	r3
      break;
 800af24:	e067      	b.n	800aff6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	785b      	ldrb	r3, [r3, #1]
 800af2a:	2b0b      	cmp	r3, #11
 800af2c:	d851      	bhi.n	800afd2 <USBD_CDC_Setup+0x18a>
 800af2e:	a201      	add	r2, pc, #4	; (adr r2, 800af34 <USBD_CDC_Setup+0xec>)
 800af30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af34:	0800af65 	.word	0x0800af65
 800af38:	0800afe1 	.word	0x0800afe1
 800af3c:	0800afd3 	.word	0x0800afd3
 800af40:	0800afd3 	.word	0x0800afd3
 800af44:	0800afd3 	.word	0x0800afd3
 800af48:	0800afd3 	.word	0x0800afd3
 800af4c:	0800afd3 	.word	0x0800afd3
 800af50:	0800afd3 	.word	0x0800afd3
 800af54:	0800afd3 	.word	0x0800afd3
 800af58:	0800afd3 	.word	0x0800afd3
 800af5c:	0800af8f 	.word	0x0800af8f
 800af60:	0800afb9 	.word	0x0800afb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	d107      	bne.n	800af80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af70:	f107 030a 	add.w	r3, r7, #10
 800af74:	2202      	movs	r2, #2
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f001 fced 	bl	800c958 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af7e:	e032      	b.n	800afe6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f001 fc77 	bl	800c876 <USBD_CtlError>
            ret = USBD_FAIL;
 800af88:	2303      	movs	r3, #3
 800af8a:	75fb      	strb	r3, [r7, #23]
          break;
 800af8c:	e02b      	b.n	800afe6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b03      	cmp	r3, #3
 800af98:	d107      	bne.n	800afaa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800af9a:	f107 030d 	add.w	r3, r7, #13
 800af9e:	2201      	movs	r2, #1
 800afa0:	4619      	mov	r1, r3
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f001 fcd8 	bl	800c958 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afa8:	e01d      	b.n	800afe6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 fc62 	bl	800c876 <USBD_CtlError>
            ret = USBD_FAIL;
 800afb2:	2303      	movs	r3, #3
 800afb4:	75fb      	strb	r3, [r7, #23]
          break;
 800afb6:	e016      	b.n	800afe6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	2b03      	cmp	r3, #3
 800afc2:	d00f      	beq.n	800afe4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800afc4:	6839      	ldr	r1, [r7, #0]
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f001 fc55 	bl	800c876 <USBD_CtlError>
            ret = USBD_FAIL;
 800afcc:	2303      	movs	r3, #3
 800afce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800afd0:	e008      	b.n	800afe4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 fc4e 	bl	800c876 <USBD_CtlError>
          ret = USBD_FAIL;
 800afda:	2303      	movs	r3, #3
 800afdc:	75fb      	strb	r3, [r7, #23]
          break;
 800afde:	e002      	b.n	800afe6 <USBD_CDC_Setup+0x19e>
          break;
 800afe0:	bf00      	nop
 800afe2:	e008      	b.n	800aff6 <USBD_CDC_Setup+0x1ae>
          break;
 800afe4:	bf00      	nop
      }
      break;
 800afe6:	e006      	b.n	800aff6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f001 fc43 	bl	800c876 <USBD_CtlError>
      ret = USBD_FAIL;
 800aff0:	2303      	movs	r3, #3
 800aff2:	75fb      	strb	r3, [r7, #23]
      break;
 800aff4:	bf00      	nop
  }

  return (uint8_t)ret;
 800aff6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3718      	adds	r7, #24
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	460b      	mov	r3, r1
 800b00a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b012:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	32b0      	adds	r2, #176	; 0xb0
 800b01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b026:	2303      	movs	r3, #3
 800b028:	e065      	b.n	800b0f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	32b0      	adds	r2, #176	; 0xb0
 800b034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b038:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b03a:	78fb      	ldrb	r3, [r7, #3]
 800b03c:	f003 020f 	and.w	r2, r3, #15
 800b040:	6879      	ldr	r1, [r7, #4]
 800b042:	4613      	mov	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	440b      	add	r3, r1
 800b04c:	3318      	adds	r3, #24
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d02f      	beq.n	800b0b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b054:	78fb      	ldrb	r3, [r7, #3]
 800b056:	f003 020f 	and.w	r2, r3, #15
 800b05a:	6879      	ldr	r1, [r7, #4]
 800b05c:	4613      	mov	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	440b      	add	r3, r1
 800b066:	3318      	adds	r3, #24
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	78fb      	ldrb	r3, [r7, #3]
 800b06c:	f003 010f 	and.w	r1, r3, #15
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	460b      	mov	r3, r1
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	440b      	add	r3, r1
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4403      	add	r3, r0
 800b07c:	3348      	adds	r3, #72	; 0x48
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	fbb2 f1f3 	udiv	r1, r2, r3
 800b084:	fb01 f303 	mul.w	r3, r1, r3
 800b088:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d112      	bne.n	800b0b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b08e:	78fb      	ldrb	r3, [r7, #3]
 800b090:	f003 020f 	and.w	r2, r3, #15
 800b094:	6879      	ldr	r1, [r7, #4]
 800b096:	4613      	mov	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	440b      	add	r3, r1
 800b0a0:	3318      	adds	r3, #24
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0a6:	78f9      	ldrb	r1, [r7, #3]
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f005 fb76 	bl	801079e <USBD_LL_Transmit>
 800b0b2:	e01f      	b.n	800b0f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	33b0      	adds	r3, #176	; 0xb0
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d010      	beq.n	800b0f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	33b0      	adds	r3, #176	; 0xb0
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b0f0:	78fa      	ldrb	r2, [r7, #3]
 800b0f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b084      	sub	sp, #16
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	460b      	mov	r3, r1
 800b108:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	32b0      	adds	r2, #176	; 0xb0
 800b114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b118:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	32b0      	adds	r2, #176	; 0xb0
 800b124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b12c:	2303      	movs	r3, #3
 800b12e:	e01a      	b.n	800b166 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b130:	78fb      	ldrb	r3, [r7, #3]
 800b132:	4619      	mov	r1, r3
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f005 fb74 	bl	8010822 <USBD_LL_GetRxDataSize>
 800b13a:	4602      	mov	r2, r0
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	33b0      	adds	r3, #176	; 0xb0
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b15a:	68fa      	ldr	r2, [r7, #12]
 800b15c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b160:	4611      	mov	r1, r2
 800b162:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b084      	sub	sp, #16
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	32b0      	adds	r2, #176	; 0xb0
 800b180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b184:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e025      	b.n	800b1dc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	33b0      	adds	r3, #176	; 0xb0
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d01a      	beq.n	800b1da <USBD_CDC_EP0_RxReady+0x6c>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b1aa:	2bff      	cmp	r3, #255	; 0xff
 800b1ac:	d015      	beq.n	800b1da <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	33b0      	adds	r3, #176	; 0xb0
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b1c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1ce:	b292      	uxth	r2, r2
 800b1d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	22ff      	movs	r2, #255	; 0xff
 800b1d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1ec:	2182      	movs	r1, #130	; 0x82
 800b1ee:	4818      	ldr	r0, [pc, #96]	; (800b250 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1f0:	f000 fd09 	bl	800bc06 <USBD_GetEpDesc>
 800b1f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	4815      	ldr	r0, [pc, #84]	; (800b250 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1fa:	f000 fd04 	bl	800bc06 <USBD_GetEpDesc>
 800b1fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b200:	2181      	movs	r1, #129	; 0x81
 800b202:	4813      	ldr	r0, [pc, #76]	; (800b250 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b204:	f000 fcff 	bl	800bc06 <USBD_GetEpDesc>
 800b208:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	2210      	movs	r2, #16
 800b214:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d006      	beq.n	800b22a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	2200      	movs	r2, #0
 800b220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b224:	711a      	strb	r2, [r3, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d006      	beq.n	800b23e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2200      	movs	r2, #0
 800b234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b238:	711a      	strb	r2, [r3, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2243      	movs	r2, #67	; 0x43
 800b242:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b244:	4b02      	ldr	r3, [pc, #8]	; (800b250 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b246:	4618      	mov	r0, r3
 800b248:	3718      	adds	r7, #24
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	200000dc 	.word	0x200000dc

0800b254 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b25c:	2182      	movs	r1, #130	; 0x82
 800b25e:	4818      	ldr	r0, [pc, #96]	; (800b2c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b260:	f000 fcd1 	bl	800bc06 <USBD_GetEpDesc>
 800b264:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b266:	2101      	movs	r1, #1
 800b268:	4815      	ldr	r0, [pc, #84]	; (800b2c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b26a:	f000 fccc 	bl	800bc06 <USBD_GetEpDesc>
 800b26e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b270:	2181      	movs	r1, #129	; 0x81
 800b272:	4813      	ldr	r0, [pc, #76]	; (800b2c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b274:	f000 fcc7 	bl	800bc06 <USBD_GetEpDesc>
 800b278:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2210      	movs	r2, #16
 800b284:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d006      	beq.n	800b29a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	2200      	movs	r2, #0
 800b290:	711a      	strb	r2, [r3, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f042 0202 	orr.w	r2, r2, #2
 800b298:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d006      	beq.n	800b2ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	711a      	strb	r2, [r3, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f042 0202 	orr.w	r2, r2, #2
 800b2ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2243      	movs	r2, #67	; 0x43
 800b2b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2b4:	4b02      	ldr	r3, [pc, #8]	; (800b2c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	200000dc 	.word	0x200000dc

0800b2c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2cc:	2182      	movs	r1, #130	; 0x82
 800b2ce:	4818      	ldr	r0, [pc, #96]	; (800b330 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2d0:	f000 fc99 	bl	800bc06 <USBD_GetEpDesc>
 800b2d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	4815      	ldr	r0, [pc, #84]	; (800b330 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2da:	f000 fc94 	bl	800bc06 <USBD_GetEpDesc>
 800b2de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2e0:	2181      	movs	r1, #129	; 0x81
 800b2e2:	4813      	ldr	r0, [pc, #76]	; (800b330 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2e4:	f000 fc8f 	bl	800bc06 <USBD_GetEpDesc>
 800b2e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	2210      	movs	r2, #16
 800b2f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d006      	beq.n	800b30a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b304:	711a      	strb	r2, [r3, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d006      	beq.n	800b31e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b318:	711a      	strb	r2, [r3, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2243      	movs	r2, #67	; 0x43
 800b322:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b324:	4b02      	ldr	r3, [pc, #8]	; (800b330 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b326:	4618      	mov	r0, r3
 800b328:	3718      	adds	r7, #24
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	200000dc 	.word	0x200000dc

0800b334 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	220a      	movs	r2, #10
 800b340:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b342:	4b03      	ldr	r3, [pc, #12]	; (800b350 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b344:	4618      	mov	r0, r3
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr
 800b350:	20000098 	.word	0x20000098

0800b354 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d101      	bne.n	800b368 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b364:	2303      	movs	r3, #3
 800b366:	e009      	b.n	800b37c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	33b0      	adds	r3, #176	; 0xb0
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b388:	b480      	push	{r7}
 800b38a:	b087      	sub	sp, #28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	32b0      	adds	r2, #176	; 0xb0
 800b39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d101      	bne.n	800b3ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	e008      	b.n	800b3c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	371c      	adds	r7, #28
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	32b0      	adds	r2, #176	; 0xb0
 800b3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d101      	bne.n	800b3f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e004      	b.n	800b3fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
	...

0800b408 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	32b0      	adds	r2, #176	; 0xb0
 800b41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b41e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	32b0      	adds	r2, #176	; 0xb0
 800b42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b432:	2303      	movs	r3, #3
 800b434:	e018      	b.n	800b468 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	7c1b      	ldrb	r3, [r3, #16]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10a      	bne.n	800b454 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b43e:	4b0c      	ldr	r3, [pc, #48]	; (800b470 <USBD_CDC_ReceivePacket+0x68>)
 800b440:	7819      	ldrb	r1, [r3, #0]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f005 f9c7 	bl	80107e0 <USBD_LL_PrepareReceive>
 800b452:	e008      	b.n	800b466 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b454:	4b06      	ldr	r3, [pc, #24]	; (800b470 <USBD_CDC_ReceivePacket+0x68>)
 800b456:	7819      	ldrb	r1, [r3, #0]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b45e:	2340      	movs	r3, #64	; 0x40
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f005 f9bd 	bl	80107e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20000120 	.word	0x20000120

0800b474 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	4613      	mov	r3, r2
 800b480:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b488:	2303      	movs	r3, #3
 800b48a:	e01f      	b.n	800b4cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	79fa      	ldrb	r2, [r7, #7]
 800b4be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f005 f837 	bl	8010534 <USBD_LL_Init>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3718      	adds	r7, #24
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d101      	bne.n	800b4ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	e025      	b.n	800b538 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	32ae      	adds	r2, #174	; 0xae
 800b4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00f      	beq.n	800b528 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	32ae      	adds	r2, #174	; 0xae
 800b512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	f107 020e 	add.w	r2, r7, #14
 800b51c:	4610      	mov	r0, r2
 800b51e:	4798      	blx	r3
 800b520:	4602      	mov	r2, r0
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b52e:	1c5a      	adds	r2, r3, #1
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f005 f83f 	bl	80105cc <USBD_LL_Start>
 800b54e:	4603      	mov	r3, r0
}
 800b550:	4618      	mov	r0, r3
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b560:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b562:	4618      	mov	r0, r3
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b084      	sub	sp, #16
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	460b      	mov	r3, r1
 800b578:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b584:	2b00      	cmp	r3, #0
 800b586:	d009      	beq.n	800b59c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	78fa      	ldrb	r2, [r7, #3]
 800b592:	4611      	mov	r1, r2
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	4798      	blx	r3
 800b598:	4603      	mov	r3, r0
 800b59a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	78fa      	ldrb	r2, [r7, #3]
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	4798      	blx	r3
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b084      	sub	sp, #16
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
 800b5e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f001 f908 	bl	800c802 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b600:	461a      	mov	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b60e:	f003 031f 	and.w	r3, r3, #31
 800b612:	2b02      	cmp	r3, #2
 800b614:	d01a      	beq.n	800b64c <USBD_LL_SetupStage+0x72>
 800b616:	2b02      	cmp	r3, #2
 800b618:	d822      	bhi.n	800b660 <USBD_LL_SetupStage+0x86>
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <USBD_LL_SetupStage+0x4a>
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d00a      	beq.n	800b638 <USBD_LL_SetupStage+0x5e>
 800b622:	e01d      	b.n	800b660 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b62a:	4619      	mov	r1, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fb5f 	bl	800bcf0 <USBD_StdDevReq>
 800b632:	4603      	mov	r3, r0
 800b634:	73fb      	strb	r3, [r7, #15]
      break;
 800b636:	e020      	b.n	800b67a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b63e:	4619      	mov	r1, r3
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fbc7 	bl	800bdd4 <USBD_StdItfReq>
 800b646:	4603      	mov	r3, r0
 800b648:	73fb      	strb	r3, [r7, #15]
      break;
 800b64a:	e016      	b.n	800b67a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b652:	4619      	mov	r1, r3
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fc29 	bl	800beac <USBD_StdEPReq>
 800b65a:	4603      	mov	r3, r0
 800b65c:	73fb      	strb	r3, [r7, #15]
      break;
 800b65e:	e00c      	b.n	800b67a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b666:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f005 f80c 	bl	801068c <USBD_LL_StallEP>
 800b674:	4603      	mov	r3, r0
 800b676:	73fb      	strb	r3, [r7, #15]
      break;
 800b678:	bf00      	nop
  }

  return ret;
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	460b      	mov	r3, r1
 800b68e:	607a      	str	r2, [r7, #4]
 800b690:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b696:	7afb      	ldrb	r3, [r7, #11]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d16e      	bne.n	800b77a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b6a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b6aa:	2b03      	cmp	r3, #3
 800b6ac:	f040 8098 	bne.w	800b7e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	689a      	ldr	r2, [r3, #8]
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d913      	bls.n	800b6e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	689a      	ldr	r2, [r3, #8]
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	1ad2      	subs	r2, r2, r3
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	68da      	ldr	r2, [r3, #12]
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	bf28      	it	cs
 800b6d6:	4613      	movcs	r3, r2
 800b6d8:	461a      	mov	r2, r3
 800b6da:	6879      	ldr	r1, [r7, #4]
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f001 f984 	bl	800c9ea <USBD_CtlContinueRx>
 800b6e2:	e07d      	b.n	800b7e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6ea:	f003 031f 	and.w	r3, r3, #31
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d014      	beq.n	800b71c <USBD_LL_DataOutStage+0x98>
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	d81d      	bhi.n	800b732 <USBD_LL_DataOutStage+0xae>
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <USBD_LL_DataOutStage+0x7c>
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d003      	beq.n	800b706 <USBD_LL_DataOutStage+0x82>
 800b6fe:	e018      	b.n	800b732 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	75bb      	strb	r3, [r7, #22]
            break;
 800b704:	e018      	b.n	800b738 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	4619      	mov	r1, r3
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f000 fa5e 	bl	800bbd2 <USBD_CoreFindIF>
 800b716:	4603      	mov	r3, r0
 800b718:	75bb      	strb	r3, [r7, #22]
            break;
 800b71a:	e00d      	b.n	800b738 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b722:	b2db      	uxtb	r3, r3
 800b724:	4619      	mov	r1, r3
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f000 fa60 	bl	800bbec <USBD_CoreFindEP>
 800b72c:	4603      	mov	r3, r0
 800b72e:	75bb      	strb	r3, [r7, #22]
            break;
 800b730:	e002      	b.n	800b738 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b732:	2300      	movs	r3, #0
 800b734:	75bb      	strb	r3, [r7, #22]
            break;
 800b736:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b738:	7dbb      	ldrb	r3, [r7, #22]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d119      	bne.n	800b772 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b03      	cmp	r3, #3
 800b748:	d113      	bne.n	800b772 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b74a:	7dba      	ldrb	r2, [r7, #22]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	32ae      	adds	r2, #174	; 0xae
 800b750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00b      	beq.n	800b772 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b75a:	7dba      	ldrb	r2, [r7, #22]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b762:	7dba      	ldrb	r2, [r7, #22]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	32ae      	adds	r2, #174	; 0xae
 800b768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f001 f94a 	bl	800ca0c <USBD_CtlSendStatus>
 800b778:	e032      	b.n	800b7e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b77a:	7afb      	ldrb	r3, [r7, #11]
 800b77c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b780:	b2db      	uxtb	r3, r3
 800b782:	4619      	mov	r1, r3
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f000 fa31 	bl	800bbec <USBD_CoreFindEP>
 800b78a:	4603      	mov	r3, r0
 800b78c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b78e:	7dbb      	ldrb	r3, [r7, #22]
 800b790:	2bff      	cmp	r3, #255	; 0xff
 800b792:	d025      	beq.n	800b7e0 <USBD_LL_DataOutStage+0x15c>
 800b794:	7dbb      	ldrb	r3, [r7, #22]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d122      	bne.n	800b7e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d117      	bne.n	800b7d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b7a6:	7dba      	ldrb	r2, [r7, #22]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	32ae      	adds	r2, #174	; 0xae
 800b7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b0:	699b      	ldr	r3, [r3, #24]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00f      	beq.n	800b7d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b7b6:	7dba      	ldrb	r2, [r7, #22]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b7be:	7dba      	ldrb	r2, [r7, #22]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	32ae      	adds	r2, #174	; 0xae
 800b7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	7afa      	ldrb	r2, [r7, #11]
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	4798      	blx	r3
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b7dc:	7dfb      	ldrb	r3, [r7, #23]
 800b7de:	e000      	b.n	800b7e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3718      	adds	r7, #24
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b086      	sub	sp, #24
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	60f8      	str	r0, [r7, #12]
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	607a      	str	r2, [r7, #4]
 800b7f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b7f8:	7afb      	ldrb	r3, [r7, #11]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d16f      	bne.n	800b8de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	3314      	adds	r3, #20
 800b802:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d15a      	bne.n	800b8c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	689a      	ldr	r2, [r3, #8]
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	429a      	cmp	r2, r3
 800b818:	d914      	bls.n	800b844 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	689a      	ldr	r2, [r3, #8]
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	1ad2      	subs	r2, r2, r3
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	461a      	mov	r2, r3
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f001 f8ac 	bl	800c98e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b836:	2300      	movs	r3, #0
 800b838:	2200      	movs	r2, #0
 800b83a:	2100      	movs	r1, #0
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f004 ffcf 	bl	80107e0 <USBD_LL_PrepareReceive>
 800b842:	e03f      	b.n	800b8c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	68da      	ldr	r2, [r3, #12]
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d11c      	bne.n	800b88a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b858:	429a      	cmp	r2, r3
 800b85a:	d316      	bcc.n	800b88a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	685a      	ldr	r2, [r3, #4]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b866:	429a      	cmp	r2, r3
 800b868:	d20f      	bcs.n	800b88a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b86a:	2200      	movs	r2, #0
 800b86c:	2100      	movs	r1, #0
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f001 f88d 	bl	800c98e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b87c:	2300      	movs	r3, #0
 800b87e:	2200      	movs	r2, #0
 800b880:	2100      	movs	r1, #0
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f004 ffac 	bl	80107e0 <USBD_LL_PrepareReceive>
 800b888:	e01c      	b.n	800b8c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b03      	cmp	r3, #3
 800b894:	d10f      	bne.n	800b8b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d009      	beq.n	800b8b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8b6:	2180      	movs	r1, #128	; 0x80
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f004 fee7 	bl	801068c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f001 f8b7 	bl	800ca32 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d03a      	beq.n	800b944 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f7ff fe42 	bl	800b558 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b8dc:	e032      	b.n	800b944 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b8de:	7afb      	ldrb	r3, [r7, #11]
 800b8e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f000 f97f 	bl	800bbec <USBD_CoreFindEP>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
 800b8f4:	2bff      	cmp	r3, #255	; 0xff
 800b8f6:	d025      	beq.n	800b944 <USBD_LL_DataInStage+0x15a>
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d122      	bne.n	800b944 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b03      	cmp	r3, #3
 800b908:	d11c      	bne.n	800b944 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b90a:	7dfa      	ldrb	r2, [r7, #23]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	32ae      	adds	r2, #174	; 0xae
 800b910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d014      	beq.n	800b944 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b91a:	7dfa      	ldrb	r2, [r7, #23]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b922:	7dfa      	ldrb	r2, [r7, #23]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	32ae      	adds	r2, #174	; 0xae
 800b928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b92c:	695b      	ldr	r3, [r3, #20]
 800b92e:	7afa      	ldrb	r2, [r7, #11]
 800b930:	4611      	mov	r1, r2
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	4798      	blx	r3
 800b936:	4603      	mov	r3, r0
 800b938:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b93a:	7dbb      	ldrb	r3, [r7, #22]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b940:	7dbb      	ldrb	r3, [r7, #22]
 800b942:	e000      	b.n	800b946 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3718      	adds	r7, #24
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b956:	2300      	movs	r3, #0
 800b958:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b986:	2b00      	cmp	r3, #0
 800b988:	d014      	beq.n	800b9b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00e      	beq.n	800b9b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	6852      	ldr	r2, [r2, #4]
 800b9a2:	b2d2      	uxtb	r2, r2
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	4798      	blx	r3
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9b4:	2340      	movs	r3, #64	; 0x40
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f004 fe21 	bl	8010602 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2240      	movs	r2, #64	; 0x40
 800b9cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9d0:	2340      	movs	r3, #64	; 0x40
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	2180      	movs	r1, #128	; 0x80
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f004 fe13 	bl	8010602 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2240      	movs	r2, #64	; 0x40
 800b9e6:	621a      	str	r2, [r3, #32]

  return ret;
 800b9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	78fa      	ldrb	r2, [r7, #3]
 800ba02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba12:	b480      	push	{r7}
 800ba14:	b083      	sub	sp, #12
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2204      	movs	r2, #4
 800ba2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	370c      	adds	r7, #12
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b083      	sub	sp, #12
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b04      	cmp	r3, #4
 800ba50:	d106      	bne.n	800ba60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	370c      	adds	r7, #12
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b082      	sub	sp, #8
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d110      	bne.n	800baa4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00b      	beq.n	800baa4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba92:	69db      	ldr	r3, [r3, #28]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba9e:	69db      	ldr	r3, [r3, #28]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b082      	sub	sp, #8
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	460b      	mov	r3, r1
 800bab8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	32ae      	adds	r2, #174	; 0xae
 800bac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d101      	bne.n	800bad0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bacc:	2303      	movs	r3, #3
 800bace:	e01c      	b.n	800bb0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	2b03      	cmp	r3, #3
 800bada:	d115      	bne.n	800bb08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	32ae      	adds	r2, #174	; 0xae
 800bae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baea:	6a1b      	ldr	r3, [r3, #32]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00b      	beq.n	800bb08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	32ae      	adds	r2, #174	; 0xae
 800bafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	78fa      	ldrb	r2, [r7, #3]
 800bb02:	4611      	mov	r1, r2
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	32ae      	adds	r2, #174	; 0xae
 800bb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e01c      	b.n	800bb6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	2b03      	cmp	r3, #3
 800bb3e:	d115      	bne.n	800bb6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	32ae      	adds	r2, #174	; 0xae
 800bb4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00b      	beq.n	800bb6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	32ae      	adds	r2, #174	; 0xae
 800bb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb64:	78fa      	ldrb	r2, [r7, #3]
 800bb66:	4611      	mov	r1, r2
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00e      	beq.n	800bbc8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	6852      	ldr	r2, [r2, #4]
 800bbb6:	b2d2      	uxtb	r2, r2
 800bbb8:	4611      	mov	r1, r2
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	4798      	blx	r3
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b083      	sub	sp, #12
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bbde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bbf8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	370c      	adds	r7, #12
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b086      	sub	sp, #24
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	460b      	mov	r3, r1
 800bc10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	885b      	ldrh	r3, [r3, #2]
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d920      	bls.n	800bc70 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bc36:	e013      	b.n	800bc60 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bc38:	f107 030a 	add.w	r3, r7, #10
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	6978      	ldr	r0, [r7, #20]
 800bc40:	f000 f81b 	bl	800bc7a <USBD_GetNextDesc>
 800bc44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	785b      	ldrb	r3, [r3, #1]
 800bc4a:	2b05      	cmp	r3, #5
 800bc4c:	d108      	bne.n	800bc60 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	789b      	ldrb	r3, [r3, #2]
 800bc56:	78fa      	ldrb	r2, [r7, #3]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d008      	beq.n	800bc6e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	885b      	ldrh	r3, [r3, #2]
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	897b      	ldrh	r3, [r7, #10]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d8e5      	bhi.n	800bc38 <USBD_GetEpDesc+0x32>
 800bc6c:	e000      	b.n	800bc70 <USBD_GetEpDesc+0x6a>
          break;
 800bc6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bc70:	693b      	ldr	r3, [r7, #16]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3718      	adds	r7, #24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b085      	sub	sp, #20
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	881a      	ldrh	r2, [r3, #0]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	4413      	add	r3, r2
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4413      	add	r3, r2
 800bca4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bca6:	68fb      	ldr	r3, [r7, #12]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3714      	adds	r7, #20
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b087      	sub	sp, #28
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bcd2:	8a3b      	ldrh	r3, [r7, #16]
 800bcd4:	021b      	lsls	r3, r3, #8
 800bcd6:	b21a      	sxth	r2, r3
 800bcd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	b21b      	sxth	r3, r3
 800bce0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bce2:	89fb      	ldrh	r3, [r7, #14]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	371c      	adds	r7, #28
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd06:	2b40      	cmp	r3, #64	; 0x40
 800bd08:	d005      	beq.n	800bd16 <USBD_StdDevReq+0x26>
 800bd0a:	2b40      	cmp	r3, #64	; 0x40
 800bd0c:	d857      	bhi.n	800bdbe <USBD_StdDevReq+0xce>
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00f      	beq.n	800bd32 <USBD_StdDevReq+0x42>
 800bd12:	2b20      	cmp	r3, #32
 800bd14:	d153      	bne.n	800bdbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	32ae      	adds	r2, #174	; 0xae
 800bd20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	6839      	ldr	r1, [r7, #0]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	4798      	blx	r3
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd30:	e04a      	b.n	800bdc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	785b      	ldrb	r3, [r3, #1]
 800bd36:	2b09      	cmp	r3, #9
 800bd38:	d83b      	bhi.n	800bdb2 <USBD_StdDevReq+0xc2>
 800bd3a:	a201      	add	r2, pc, #4	; (adr r2, 800bd40 <USBD_StdDevReq+0x50>)
 800bd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd40:	0800bd95 	.word	0x0800bd95
 800bd44:	0800bda9 	.word	0x0800bda9
 800bd48:	0800bdb3 	.word	0x0800bdb3
 800bd4c:	0800bd9f 	.word	0x0800bd9f
 800bd50:	0800bdb3 	.word	0x0800bdb3
 800bd54:	0800bd73 	.word	0x0800bd73
 800bd58:	0800bd69 	.word	0x0800bd69
 800bd5c:	0800bdb3 	.word	0x0800bdb3
 800bd60:	0800bd8b 	.word	0x0800bd8b
 800bd64:	0800bd7d 	.word	0x0800bd7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bd68:	6839      	ldr	r1, [r7, #0]
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 fa3c 	bl	800c1e8 <USBD_GetDescriptor>
          break;
 800bd70:	e024      	b.n	800bdbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bd72:	6839      	ldr	r1, [r7, #0]
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 fba1 	bl	800c4bc <USBD_SetAddress>
          break;
 800bd7a:	e01f      	b.n	800bdbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bd7c:	6839      	ldr	r1, [r7, #0]
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fbe0 	bl	800c544 <USBD_SetConfig>
 800bd84:	4603      	mov	r3, r0
 800bd86:	73fb      	strb	r3, [r7, #15]
          break;
 800bd88:	e018      	b.n	800bdbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bd8a:	6839      	ldr	r1, [r7, #0]
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fc83 	bl	800c698 <USBD_GetConfig>
          break;
 800bd92:	e013      	b.n	800bdbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fcb4 	bl	800c704 <USBD_GetStatus>
          break;
 800bd9c:	e00e      	b.n	800bdbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fce3 	bl	800c76c <USBD_SetFeature>
          break;
 800bda6:	e009      	b.n	800bdbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fd07 	bl	800c7be <USBD_ClrFeature>
          break;
 800bdb0:	e004      	b.n	800bdbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 fd5e 	bl	800c876 <USBD_CtlError>
          break;
 800bdba:	bf00      	nop
      }
      break;
 800bdbc:	e004      	b.n	800bdc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fd58 	bl	800c876 <USBD_CtlError>
      break;
 800bdc6:	bf00      	nop
  }

  return ret;
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop

0800bdd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdde:	2300      	movs	r3, #0
 800bde0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bdea:	2b40      	cmp	r3, #64	; 0x40
 800bdec:	d005      	beq.n	800bdfa <USBD_StdItfReq+0x26>
 800bdee:	2b40      	cmp	r3, #64	; 0x40
 800bdf0:	d852      	bhi.n	800be98 <USBD_StdItfReq+0xc4>
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d001      	beq.n	800bdfa <USBD_StdItfReq+0x26>
 800bdf6:	2b20      	cmp	r3, #32
 800bdf8:	d14e      	bne.n	800be98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be00:	b2db      	uxtb	r3, r3
 800be02:	3b01      	subs	r3, #1
 800be04:	2b02      	cmp	r3, #2
 800be06:	d840      	bhi.n	800be8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	889b      	ldrh	r3, [r3, #4]
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d836      	bhi.n	800be80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	889b      	ldrh	r3, [r3, #4]
 800be16:	b2db      	uxtb	r3, r3
 800be18:	4619      	mov	r1, r3
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7ff fed9 	bl	800bbd2 <USBD_CoreFindIF>
 800be20:	4603      	mov	r3, r0
 800be22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be24:	7bbb      	ldrb	r3, [r7, #14]
 800be26:	2bff      	cmp	r3, #255	; 0xff
 800be28:	d01d      	beq.n	800be66 <USBD_StdItfReq+0x92>
 800be2a:	7bbb      	ldrb	r3, [r7, #14]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d11a      	bne.n	800be66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800be30:	7bba      	ldrb	r2, [r7, #14]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	32ae      	adds	r2, #174	; 0xae
 800be36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00f      	beq.n	800be60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800be40:	7bba      	ldrb	r2, [r7, #14]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800be48:	7bba      	ldrb	r2, [r7, #14]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	32ae      	adds	r2, #174	; 0xae
 800be4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	4798      	blx	r3
 800be5a:	4603      	mov	r3, r0
 800be5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be5e:	e004      	b.n	800be6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800be60:	2303      	movs	r3, #3
 800be62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be64:	e001      	b.n	800be6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800be66:	2303      	movs	r3, #3
 800be68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	88db      	ldrh	r3, [r3, #6]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d110      	bne.n	800be94 <USBD_StdItfReq+0xc0>
 800be72:	7bfb      	ldrb	r3, [r7, #15]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10d      	bne.n	800be94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fdc7 	bl	800ca0c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be7e:	e009      	b.n	800be94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fcf7 	bl	800c876 <USBD_CtlError>
          break;
 800be88:	e004      	b.n	800be94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fcf2 	bl	800c876 <USBD_CtlError>
          break;
 800be92:	e000      	b.n	800be96 <USBD_StdItfReq+0xc2>
          break;
 800be94:	bf00      	nop
      }
      break;
 800be96:	e004      	b.n	800bea2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800be98:	6839      	ldr	r1, [r7, #0]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fceb 	bl	800c876 <USBD_CtlError>
      break;
 800bea0:	bf00      	nop
  }

  return ret;
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	889b      	ldrh	r3, [r3, #4]
 800bebe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bec8:	2b40      	cmp	r3, #64	; 0x40
 800beca:	d007      	beq.n	800bedc <USBD_StdEPReq+0x30>
 800becc:	2b40      	cmp	r3, #64	; 0x40
 800bece:	f200 817f 	bhi.w	800c1d0 <USBD_StdEPReq+0x324>
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d02a      	beq.n	800bf2c <USBD_StdEPReq+0x80>
 800bed6:	2b20      	cmp	r3, #32
 800bed8:	f040 817a 	bne.w	800c1d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bedc:	7bbb      	ldrb	r3, [r7, #14]
 800bede:	4619      	mov	r1, r3
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f7ff fe83 	bl	800bbec <USBD_CoreFindEP>
 800bee6:	4603      	mov	r3, r0
 800bee8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800beea:	7b7b      	ldrb	r3, [r7, #13]
 800beec:	2bff      	cmp	r3, #255	; 0xff
 800beee:	f000 8174 	beq.w	800c1da <USBD_StdEPReq+0x32e>
 800bef2:	7b7b      	ldrb	r3, [r7, #13]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f040 8170 	bne.w	800c1da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800befa:	7b7a      	ldrb	r2, [r7, #13]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bf02:	7b7a      	ldrb	r2, [r7, #13]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	32ae      	adds	r2, #174	; 0xae
 800bf08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f000 8163 	beq.w	800c1da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bf14:	7b7a      	ldrb	r2, [r7, #13]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	32ae      	adds	r2, #174	; 0xae
 800bf1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	4798      	blx	r3
 800bf26:	4603      	mov	r3, r0
 800bf28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bf2a:	e156      	b.n	800c1da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	785b      	ldrb	r3, [r3, #1]
 800bf30:	2b03      	cmp	r3, #3
 800bf32:	d008      	beq.n	800bf46 <USBD_StdEPReq+0x9a>
 800bf34:	2b03      	cmp	r3, #3
 800bf36:	f300 8145 	bgt.w	800c1c4 <USBD_StdEPReq+0x318>
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f000 809b 	beq.w	800c076 <USBD_StdEPReq+0x1ca>
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d03c      	beq.n	800bfbe <USBD_StdEPReq+0x112>
 800bf44:	e13e      	b.n	800c1c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	d002      	beq.n	800bf58 <USBD_StdEPReq+0xac>
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	d016      	beq.n	800bf84 <USBD_StdEPReq+0xd8>
 800bf56:	e02c      	b.n	800bfb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf58:	7bbb      	ldrb	r3, [r7, #14]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00d      	beq.n	800bf7a <USBD_StdEPReq+0xce>
 800bf5e:	7bbb      	ldrb	r3, [r7, #14]
 800bf60:	2b80      	cmp	r3, #128	; 0x80
 800bf62:	d00a      	beq.n	800bf7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf64:	7bbb      	ldrb	r3, [r7, #14]
 800bf66:	4619      	mov	r1, r3
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f004 fb8f 	bl	801068c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf6e:	2180      	movs	r1, #128	; 0x80
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f004 fb8b 	bl	801068c <USBD_LL_StallEP>
 800bf76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf78:	e020      	b.n	800bfbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bf7a:	6839      	ldr	r1, [r7, #0]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fc7a 	bl	800c876 <USBD_CtlError>
              break;
 800bf82:	e01b      	b.n	800bfbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	885b      	ldrh	r3, [r3, #2]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10e      	bne.n	800bfaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf8c:	7bbb      	ldrb	r3, [r7, #14]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00b      	beq.n	800bfaa <USBD_StdEPReq+0xfe>
 800bf92:	7bbb      	ldrb	r3, [r7, #14]
 800bf94:	2b80      	cmp	r3, #128	; 0x80
 800bf96:	d008      	beq.n	800bfaa <USBD_StdEPReq+0xfe>
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	88db      	ldrh	r3, [r3, #6]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d104      	bne.n	800bfaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfa0:	7bbb      	ldrb	r3, [r7, #14]
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f004 fb71 	bl	801068c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fd2e 	bl	800ca0c <USBD_CtlSendStatus>

              break;
 800bfb0:	e004      	b.n	800bfbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fc5e 	bl	800c876 <USBD_CtlError>
              break;
 800bfba:	bf00      	nop
          }
          break;
 800bfbc:	e107      	b.n	800c1ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b02      	cmp	r3, #2
 800bfc8:	d002      	beq.n	800bfd0 <USBD_StdEPReq+0x124>
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d016      	beq.n	800bffc <USBD_StdEPReq+0x150>
 800bfce:	e04b      	b.n	800c068 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfd0:	7bbb      	ldrb	r3, [r7, #14]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00d      	beq.n	800bff2 <USBD_StdEPReq+0x146>
 800bfd6:	7bbb      	ldrb	r3, [r7, #14]
 800bfd8:	2b80      	cmp	r3, #128	; 0x80
 800bfda:	d00a      	beq.n	800bff2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfdc:	7bbb      	ldrb	r3, [r7, #14]
 800bfde:	4619      	mov	r1, r3
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f004 fb53 	bl	801068c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfe6:	2180      	movs	r1, #128	; 0x80
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f004 fb4f 	bl	801068c <USBD_LL_StallEP>
 800bfee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bff0:	e040      	b.n	800c074 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bff2:	6839      	ldr	r1, [r7, #0]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fc3e 	bl	800c876 <USBD_CtlError>
              break;
 800bffa:	e03b      	b.n	800c074 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	885b      	ldrh	r3, [r3, #2]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d136      	bne.n	800c072 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c004:	7bbb      	ldrb	r3, [r7, #14]
 800c006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d004      	beq.n	800c018 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c00e:	7bbb      	ldrb	r3, [r7, #14]
 800c010:	4619      	mov	r1, r3
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f004 fb59 	bl	80106ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fcf7 	bl	800ca0c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c01e:	7bbb      	ldrb	r3, [r7, #14]
 800c020:	4619      	mov	r1, r3
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f7ff fde2 	bl	800bbec <USBD_CoreFindEP>
 800c028:	4603      	mov	r3, r0
 800c02a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c02c:	7b7b      	ldrb	r3, [r7, #13]
 800c02e:	2bff      	cmp	r3, #255	; 0xff
 800c030:	d01f      	beq.n	800c072 <USBD_StdEPReq+0x1c6>
 800c032:	7b7b      	ldrb	r3, [r7, #13]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d11c      	bne.n	800c072 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c038:	7b7a      	ldrb	r2, [r7, #13]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c040:	7b7a      	ldrb	r2, [r7, #13]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	32ae      	adds	r2, #174	; 0xae
 800c046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d010      	beq.n	800c072 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c050:	7b7a      	ldrb	r2, [r7, #13]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	32ae      	adds	r2, #174	; 0xae
 800c056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	4798      	blx	r3
 800c062:	4603      	mov	r3, r0
 800c064:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c066:	e004      	b.n	800c072 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fc03 	bl	800c876 <USBD_CtlError>
              break;
 800c070:	e000      	b.n	800c074 <USBD_StdEPReq+0x1c8>
              break;
 800c072:	bf00      	nop
          }
          break;
 800c074:	e0ab      	b.n	800c1ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b02      	cmp	r3, #2
 800c080:	d002      	beq.n	800c088 <USBD_StdEPReq+0x1dc>
 800c082:	2b03      	cmp	r3, #3
 800c084:	d032      	beq.n	800c0ec <USBD_StdEPReq+0x240>
 800c086:	e097      	b.n	800c1b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c088:	7bbb      	ldrb	r3, [r7, #14]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d007      	beq.n	800c09e <USBD_StdEPReq+0x1f2>
 800c08e:	7bbb      	ldrb	r3, [r7, #14]
 800c090:	2b80      	cmp	r3, #128	; 0x80
 800c092:	d004      	beq.n	800c09e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fbed 	bl	800c876 <USBD_CtlError>
                break;
 800c09c:	e091      	b.n	800c1c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c09e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	da0b      	bge.n	800c0be <USBD_StdEPReq+0x212>
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
 800c0a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	3310      	adds	r3, #16
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	e00b      	b.n	800c0d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
 800c0c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4413      	add	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	2202      	movs	r2, #2
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fc37 	bl	800c958 <USBD_CtlSendData>
              break;
 800c0ea:	e06a      	b.n	800c1c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	da11      	bge.n	800c118 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0f4:	7bbb      	ldrb	r3, [r7, #14]
 800c0f6:	f003 020f 	and.w	r2, r3, #15
 800c0fa:	6879      	ldr	r1, [r7, #4]
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	4413      	add	r3, r2
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	440b      	add	r3, r1
 800c106:	3324      	adds	r3, #36	; 0x24
 800c108:	881b      	ldrh	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d117      	bne.n	800c13e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 fbb0 	bl	800c876 <USBD_CtlError>
                  break;
 800c116:	e054      	b.n	800c1c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c118:	7bbb      	ldrb	r3, [r7, #14]
 800c11a:	f003 020f 	and.w	r2, r3, #15
 800c11e:	6879      	ldr	r1, [r7, #4]
 800c120:	4613      	mov	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4413      	add	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	440b      	add	r3, r1
 800c12a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c12e:	881b      	ldrh	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d104      	bne.n	800c13e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fb9d 	bl	800c876 <USBD_CtlError>
                  break;
 800c13c:	e041      	b.n	800c1c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c13e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c142:	2b00      	cmp	r3, #0
 800c144:	da0b      	bge.n	800c15e <USBD_StdEPReq+0x2b2>
 800c146:	7bbb      	ldrb	r3, [r7, #14]
 800c148:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c14c:	4613      	mov	r3, r2
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	4413      	add	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	3310      	adds	r3, #16
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	4413      	add	r3, r2
 800c15a:	3304      	adds	r3, #4
 800c15c:	e00b      	b.n	800c176 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c164:	4613      	mov	r3, r2
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	4413      	add	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	4413      	add	r3, r2
 800c174:	3304      	adds	r3, #4
 800c176:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c178:	7bbb      	ldrb	r3, [r7, #14]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d002      	beq.n	800c184 <USBD_StdEPReq+0x2d8>
 800c17e:	7bbb      	ldrb	r3, [r7, #14]
 800c180:	2b80      	cmp	r3, #128	; 0x80
 800c182:	d103      	bne.n	800c18c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	2200      	movs	r2, #0
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	e00e      	b.n	800c1aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c18c:	7bbb      	ldrb	r3, [r7, #14]
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f004 fab9 	bl	8010708 <USBD_LL_IsStallEP>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d003      	beq.n	800c1a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	601a      	str	r2, [r3, #0]
 800c1a2:	e002      	b.n	800c1aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fbd1 	bl	800c958 <USBD_CtlSendData>
              break;
 800c1b6:	e004      	b.n	800c1c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fb5b 	bl	800c876 <USBD_CtlError>
              break;
 800c1c0:	bf00      	nop
          }
          break;
 800c1c2:	e004      	b.n	800c1ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c1c4:	6839      	ldr	r1, [r7, #0]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fb55 	bl	800c876 <USBD_CtlError>
          break;
 800c1cc:	bf00      	nop
      }
      break;
 800c1ce:	e005      	b.n	800c1dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c1d0:	6839      	ldr	r1, [r7, #0]
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fb4f 	bl	800c876 <USBD_CtlError>
      break;
 800c1d8:	e000      	b.n	800c1dc <USBD_StdEPReq+0x330>
      break;
 800c1da:	bf00      	nop
  }

  return ret;
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
	...

0800c1e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	885b      	ldrh	r3, [r3, #2]
 800c202:	0a1b      	lsrs	r3, r3, #8
 800c204:	b29b      	uxth	r3, r3
 800c206:	3b01      	subs	r3, #1
 800c208:	2b06      	cmp	r3, #6
 800c20a:	f200 8128 	bhi.w	800c45e <USBD_GetDescriptor+0x276>
 800c20e:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <USBD_GetDescriptor+0x2c>)
 800c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c214:	0800c231 	.word	0x0800c231
 800c218:	0800c249 	.word	0x0800c249
 800c21c:	0800c289 	.word	0x0800c289
 800c220:	0800c45f 	.word	0x0800c45f
 800c224:	0800c45f 	.word	0x0800c45f
 800c228:	0800c3ff 	.word	0x0800c3ff
 800c22c:	0800c42b 	.word	0x0800c42b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	7c12      	ldrb	r2, [r2, #16]
 800c23c:	f107 0108 	add.w	r1, r7, #8
 800c240:	4610      	mov	r0, r2
 800c242:	4798      	blx	r3
 800c244:	60f8      	str	r0, [r7, #12]
      break;
 800c246:	e112      	b.n	800c46e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	7c1b      	ldrb	r3, [r3, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d10d      	bne.n	800c26c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c258:	f107 0208 	add.w	r2, r7, #8
 800c25c:	4610      	mov	r0, r2
 800c25e:	4798      	blx	r3
 800c260:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3301      	adds	r3, #1
 800c266:	2202      	movs	r2, #2
 800c268:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c26a:	e100      	b.n	800c46e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c274:	f107 0208 	add.w	r2, r7, #8
 800c278:	4610      	mov	r0, r2
 800c27a:	4798      	blx	r3
 800c27c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3301      	adds	r3, #1
 800c282:	2202      	movs	r2, #2
 800c284:	701a      	strb	r2, [r3, #0]
      break;
 800c286:	e0f2      	b.n	800c46e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	885b      	ldrh	r3, [r3, #2]
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	2b05      	cmp	r3, #5
 800c290:	f200 80ac 	bhi.w	800c3ec <USBD_GetDescriptor+0x204>
 800c294:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <USBD_GetDescriptor+0xb4>)
 800c296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29a:	bf00      	nop
 800c29c:	0800c2b5 	.word	0x0800c2b5
 800c2a0:	0800c2e9 	.word	0x0800c2e9
 800c2a4:	0800c31d 	.word	0x0800c31d
 800c2a8:	0800c351 	.word	0x0800c351
 800c2ac:	0800c385 	.word	0x0800c385
 800c2b0:	0800c3b9 	.word	0x0800c3b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00b      	beq.n	800c2d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	7c12      	ldrb	r2, [r2, #16]
 800c2cc:	f107 0108 	add.w	r1, r7, #8
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	4798      	blx	r3
 800c2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2d6:	e091      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 facb 	bl	800c876 <USBD_CtlError>
            err++;
 800c2e0:	7afb      	ldrb	r3, [r7, #11]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2e6:	e089      	b.n	800c3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00b      	beq.n	800c30c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	7c12      	ldrb	r2, [r2, #16]
 800c300:	f107 0108 	add.w	r1, r7, #8
 800c304:	4610      	mov	r0, r2
 800c306:	4798      	blx	r3
 800c308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c30a:	e077      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c30c:	6839      	ldr	r1, [r7, #0]
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fab1 	bl	800c876 <USBD_CtlError>
            err++;
 800c314:	7afb      	ldrb	r3, [r7, #11]
 800c316:	3301      	adds	r3, #1
 800c318:	72fb      	strb	r3, [r7, #11]
          break;
 800c31a:	e06f      	b.n	800c3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00b      	beq.n	800c340 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	7c12      	ldrb	r2, [r2, #16]
 800c334:	f107 0108 	add.w	r1, r7, #8
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3
 800c33c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c33e:	e05d      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fa97 	bl	800c876 <USBD_CtlError>
            err++;
 800c348:	7afb      	ldrb	r3, [r7, #11]
 800c34a:	3301      	adds	r3, #1
 800c34c:	72fb      	strb	r3, [r7, #11]
          break;
 800c34e:	e055      	b.n	800c3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00b      	beq.n	800c374 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	7c12      	ldrb	r2, [r2, #16]
 800c368:	f107 0108 	add.w	r1, r7, #8
 800c36c:	4610      	mov	r0, r2
 800c36e:	4798      	blx	r3
 800c370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c372:	e043      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fa7d 	bl	800c876 <USBD_CtlError>
            err++;
 800c37c:	7afb      	ldrb	r3, [r7, #11]
 800c37e:	3301      	adds	r3, #1
 800c380:	72fb      	strb	r3, [r7, #11]
          break;
 800c382:	e03b      	b.n	800c3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c38a:	695b      	ldr	r3, [r3, #20]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00b      	beq.n	800c3a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c396:	695b      	ldr	r3, [r3, #20]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	7c12      	ldrb	r2, [r2, #16]
 800c39c:	f107 0108 	add.w	r1, r7, #8
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	4798      	blx	r3
 800c3a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3a6:	e029      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 fa63 	bl	800c876 <USBD_CtlError>
            err++;
 800c3b0:	7afb      	ldrb	r3, [r7, #11]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3b6:	e021      	b.n	800c3fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00b      	beq.n	800c3dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ca:	699b      	ldr	r3, [r3, #24]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	7c12      	ldrb	r2, [r2, #16]
 800c3d0:	f107 0108 	add.w	r1, r7, #8
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	4798      	blx	r3
 800c3d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3da:	e00f      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fa49 	bl	800c876 <USBD_CtlError>
            err++;
 800c3e4:	7afb      	ldrb	r3, [r7, #11]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ea:	e007      	b.n	800c3fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 fa41 	bl	800c876 <USBD_CtlError>
          err++;
 800c3f4:	7afb      	ldrb	r3, [r7, #11]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c3fa:	bf00      	nop
      }
      break;
 800c3fc:	e037      	b.n	800c46e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	7c1b      	ldrb	r3, [r3, #16]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d109      	bne.n	800c41a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c40e:	f107 0208 	add.w	r2, r7, #8
 800c412:	4610      	mov	r0, r2
 800c414:	4798      	blx	r3
 800c416:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c418:	e029      	b.n	800c46e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c41a:	6839      	ldr	r1, [r7, #0]
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 fa2a 	bl	800c876 <USBD_CtlError>
        err++;
 800c422:	7afb      	ldrb	r3, [r7, #11]
 800c424:	3301      	adds	r3, #1
 800c426:	72fb      	strb	r3, [r7, #11]
      break;
 800c428:	e021      	b.n	800c46e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	7c1b      	ldrb	r3, [r3, #16]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10d      	bne.n	800c44e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c43a:	f107 0208 	add.w	r2, r7, #8
 800c43e:	4610      	mov	r0, r2
 800c440:	4798      	blx	r3
 800c442:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	3301      	adds	r3, #1
 800c448:	2207      	movs	r2, #7
 800c44a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c44c:	e00f      	b.n	800c46e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c44e:	6839      	ldr	r1, [r7, #0]
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fa10 	bl	800c876 <USBD_CtlError>
        err++;
 800c456:	7afb      	ldrb	r3, [r7, #11]
 800c458:	3301      	adds	r3, #1
 800c45a:	72fb      	strb	r3, [r7, #11]
      break;
 800c45c:	e007      	b.n	800c46e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c45e:	6839      	ldr	r1, [r7, #0]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 fa08 	bl	800c876 <USBD_CtlError>
      err++;
 800c466:	7afb      	ldrb	r3, [r7, #11]
 800c468:	3301      	adds	r3, #1
 800c46a:	72fb      	strb	r3, [r7, #11]
      break;
 800c46c:	bf00      	nop
  }

  if (err != 0U)
 800c46e:	7afb      	ldrb	r3, [r7, #11]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d11e      	bne.n	800c4b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	88db      	ldrh	r3, [r3, #6]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d016      	beq.n	800c4aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c47c:	893b      	ldrh	r3, [r7, #8]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00e      	beq.n	800c4a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	88da      	ldrh	r2, [r3, #6]
 800c486:	893b      	ldrh	r3, [r7, #8]
 800c488:	4293      	cmp	r3, r2
 800c48a:	bf28      	it	cs
 800c48c:	4613      	movcs	r3, r2
 800c48e:	b29b      	uxth	r3, r3
 800c490:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c492:	893b      	ldrh	r3, [r7, #8]
 800c494:	461a      	mov	r2, r3
 800c496:	68f9      	ldr	r1, [r7, #12]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 fa5d 	bl	800c958 <USBD_CtlSendData>
 800c49e:	e009      	b.n	800c4b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 f9e7 	bl	800c876 <USBD_CtlError>
 800c4a8:	e004      	b.n	800c4b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 faae 	bl	800ca0c <USBD_CtlSendStatus>
 800c4b0:	e000      	b.n	800c4b4 <USBD_GetDescriptor+0x2cc>
    return;
 800c4b2:	bf00      	nop
  }
}
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop

0800c4bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	889b      	ldrh	r3, [r3, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d131      	bne.n	800c532 <USBD_SetAddress+0x76>
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	88db      	ldrh	r3, [r3, #6]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d12d      	bne.n	800c532 <USBD_SetAddress+0x76>
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	885b      	ldrh	r3, [r3, #2]
 800c4da:	2b7f      	cmp	r3, #127	; 0x7f
 800c4dc:	d829      	bhi.n	800c532 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	885b      	ldrh	r3, [r3, #2]
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	d104      	bne.n	800c500 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c4f6:	6839      	ldr	r1, [r7, #0]
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 f9bc 	bl	800c876 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4fe:	e01d      	b.n	800c53c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	7bfa      	ldrb	r2, [r7, #15]
 800c504:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c508:	7bfb      	ldrb	r3, [r7, #15]
 800c50a:	4619      	mov	r1, r3
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f004 f927 	bl	8010760 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fa7a 	bl	800ca0c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c518:	7bfb      	ldrb	r3, [r7, #15]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d004      	beq.n	800c528 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2202      	movs	r2, #2
 800c522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c526:	e009      	b.n	800c53c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2201      	movs	r2, #1
 800c52c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c530:	e004      	b.n	800c53c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f99e 	bl	800c876 <USBD_CtlError>
  }
}
 800c53a:	bf00      	nop
 800c53c:	bf00      	nop
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c54e:	2300      	movs	r3, #0
 800c550:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	885b      	ldrh	r3, [r3, #2]
 800c556:	b2da      	uxtb	r2, r3
 800c558:	4b4e      	ldr	r3, [pc, #312]	; (800c694 <USBD_SetConfig+0x150>)
 800c55a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c55c:	4b4d      	ldr	r3, [pc, #308]	; (800c694 <USBD_SetConfig+0x150>)
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d905      	bls.n	800c570 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 f985 	bl	800c876 <USBD_CtlError>
    return USBD_FAIL;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e08c      	b.n	800c68a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c576:	b2db      	uxtb	r3, r3
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d002      	beq.n	800c582 <USBD_SetConfig+0x3e>
 800c57c:	2b03      	cmp	r3, #3
 800c57e:	d029      	beq.n	800c5d4 <USBD_SetConfig+0x90>
 800c580:	e075      	b.n	800c66e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c582:	4b44      	ldr	r3, [pc, #272]	; (800c694 <USBD_SetConfig+0x150>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d020      	beq.n	800c5cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c58a:	4b42      	ldr	r3, [pc, #264]	; (800c694 <USBD_SetConfig+0x150>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	461a      	mov	r2, r3
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c594:	4b3f      	ldr	r3, [pc, #252]	; (800c694 <USBD_SetConfig+0x150>)
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	4619      	mov	r1, r3
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7fe ffe7 	bl	800b56e <USBD_SetClassConfig>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d008      	beq.n	800c5bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c5aa:	6839      	ldr	r1, [r7, #0]
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 f962 	bl	800c876 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2202      	movs	r2, #2
 800c5b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5ba:	e065      	b.n	800c688 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fa25 	bl	800ca0c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2203      	movs	r2, #3
 800c5c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c5ca:	e05d      	b.n	800c688 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 fa1d 	bl	800ca0c <USBD_CtlSendStatus>
      break;
 800c5d2:	e059      	b.n	800c688 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5d4:	4b2f      	ldr	r3, [pc, #188]	; (800c694 <USBD_SetConfig+0x150>)
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d112      	bne.n	800c602 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2202      	movs	r2, #2
 800c5e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c5e4:	4b2b      	ldr	r3, [pc, #172]	; (800c694 <USBD_SetConfig+0x150>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5ee:	4b29      	ldr	r3, [pc, #164]	; (800c694 <USBD_SetConfig+0x150>)
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7fe ffd6 	bl	800b5a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 fa06 	bl	800ca0c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c600:	e042      	b.n	800c688 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c602:	4b24      	ldr	r3, [pc, #144]	; (800c694 <USBD_SetConfig+0x150>)
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	461a      	mov	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d02a      	beq.n	800c666 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	b2db      	uxtb	r3, r3
 800c616:	4619      	mov	r1, r3
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f7fe ffc4 	bl	800b5a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c61e:	4b1d      	ldr	r3, [pc, #116]	; (800c694 <USBD_SetConfig+0x150>)
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	461a      	mov	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c628:	4b1a      	ldr	r3, [pc, #104]	; (800c694 <USBD_SetConfig+0x150>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	4619      	mov	r1, r3
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7fe ff9d 	bl	800b56e <USBD_SetClassConfig>
 800c634:	4603      	mov	r3, r0
 800c636:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c638:	7bfb      	ldrb	r3, [r7, #15]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00f      	beq.n	800c65e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f918 	bl	800c876 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	4619      	mov	r1, r3
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7fe ffa9 	bl	800b5a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2202      	movs	r2, #2
 800c658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c65c:	e014      	b.n	800c688 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f9d4 	bl	800ca0c <USBD_CtlSendStatus>
      break;
 800c664:	e010      	b.n	800c688 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 f9d0 	bl	800ca0c <USBD_CtlSendStatus>
      break;
 800c66c:	e00c      	b.n	800c688 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c66e:	6839      	ldr	r1, [r7, #0]
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f900 	bl	800c876 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c676:	4b07      	ldr	r3, [pc, #28]	; (800c694 <USBD_SetConfig+0x150>)
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	4619      	mov	r1, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f7fe ff92 	bl	800b5a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c682:	2303      	movs	r3, #3
 800c684:	73fb      	strb	r3, [r7, #15]
      break;
 800c686:	bf00      	nop
  }

  return ret;
 800c688:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	20001520 	.word	0x20001520

0800c698 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	88db      	ldrh	r3, [r3, #6]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d004      	beq.n	800c6b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6aa:	6839      	ldr	r1, [r7, #0]
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 f8e2 	bl	800c876 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6b2:	e023      	b.n	800c6fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	dc02      	bgt.n	800c6c6 <USBD_GetConfig+0x2e>
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	dc03      	bgt.n	800c6cc <USBD_GetConfig+0x34>
 800c6c4:	e015      	b.n	800c6f2 <USBD_GetConfig+0x5a>
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d00b      	beq.n	800c6e2 <USBD_GetConfig+0x4a>
 800c6ca:	e012      	b.n	800c6f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f93c 	bl	800c958 <USBD_CtlSendData>
        break;
 800c6e0:	e00c      	b.n	800c6fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f934 	bl	800c958 <USBD_CtlSendData>
        break;
 800c6f0:	e004      	b.n	800c6fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f8be 	bl	800c876 <USBD_CtlError>
        break;
 800c6fa:	bf00      	nop
}
 800c6fc:	bf00      	nop
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c714:	b2db      	uxtb	r3, r3
 800c716:	3b01      	subs	r3, #1
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d81e      	bhi.n	800c75a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	88db      	ldrh	r3, [r3, #6]
 800c720:	2b02      	cmp	r3, #2
 800c722:	d004      	beq.n	800c72e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f8a5 	bl	800c876 <USBD_CtlError>
        break;
 800c72c:	e01a      	b.n	800c764 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2201      	movs	r2, #1
 800c732:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d005      	beq.n	800c74a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	f043 0202 	orr.w	r2, r3, #2
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	330c      	adds	r3, #12
 800c74e:	2202      	movs	r2, #2
 800c750:	4619      	mov	r1, r3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 f900 	bl	800c958 <USBD_CtlSendData>
      break;
 800c758:	e004      	b.n	800c764 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 f88a 	bl	800c876 <USBD_CtlError>
      break;
 800c762:	bf00      	nop
  }
}
 800c764:	bf00      	nop
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	885b      	ldrh	r3, [r3, #2]
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d107      	bne.n	800c78e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f940 	bl	800ca0c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c78c:	e013      	b.n	800c7b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	885b      	ldrh	r3, [r3, #2]
 800c792:	2b02      	cmp	r3, #2
 800c794:	d10b      	bne.n	800c7ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	889b      	ldrh	r3, [r3, #4]
 800c79a:	0a1b      	lsrs	r3, r3, #8
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f930 	bl	800ca0c <USBD_CtlSendStatus>
}
 800c7ac:	e003      	b.n	800c7b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c7ae:	6839      	ldr	r1, [r7, #0]
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f860 	bl	800c876 <USBD_CtlError>
}
 800c7b6:	bf00      	nop
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b082      	sub	sp, #8
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d80b      	bhi.n	800c7ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	885b      	ldrh	r3, [r3, #2]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d10c      	bne.n	800c7f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f910 	bl	800ca0c <USBD_CtlSendStatus>
      }
      break;
 800c7ec:	e004      	b.n	800c7f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f840 	bl	800c876 <USBD_CtlError>
      break;
 800c7f6:	e000      	b.n	800c7fa <USBD_ClrFeature+0x3c>
      break;
 800c7f8:	bf00      	nop
  }
}
 800c7fa:	bf00      	nop
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b084      	sub	sp, #16
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	781a      	ldrb	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	3301      	adds	r3, #1
 800c81c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	781a      	ldrb	r2, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	3301      	adds	r3, #1
 800c82a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f7ff fa41 	bl	800bcb4 <SWAPBYTE>
 800c832:	4603      	mov	r3, r0
 800c834:	461a      	mov	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	3301      	adds	r3, #1
 800c83e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	3301      	adds	r3, #1
 800c844:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c846:	68f8      	ldr	r0, [r7, #12]
 800c848:	f7ff fa34 	bl	800bcb4 <SWAPBYTE>
 800c84c:	4603      	mov	r3, r0
 800c84e:	461a      	mov	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	3301      	adds	r3, #1
 800c858:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	3301      	adds	r3, #1
 800c85e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f7ff fa27 	bl	800bcb4 <SWAPBYTE>
 800c866:	4603      	mov	r3, r0
 800c868:	461a      	mov	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	80da      	strh	r2, [r3, #6]
}
 800c86e:	bf00      	nop
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b082      	sub	sp, #8
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c880:	2180      	movs	r1, #128	; 0x80
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f003 ff02 	bl	801068c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c888:	2100      	movs	r1, #0
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f003 fefe 	bl	801068c <USBD_LL_StallEP>
}
 800c890:	bf00      	nop
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d036      	beq.n	800c91c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c8b2:	6938      	ldr	r0, [r7, #16]
 800c8b4:	f000 f836 	bl	800c924 <USBD_GetLen>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	7812      	ldrb	r2, [r2, #0]
 800c8d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8d2:	7dfb      	ldrb	r3, [r7, #23]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8d8:	7dfb      	ldrb	r3, [r7, #23]
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	4413      	add	r3, r2
 800c8de:	2203      	movs	r2, #3
 800c8e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8e8:	e013      	b.n	800c912 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c8ea:	7dfb      	ldrb	r3, [r7, #23]
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	693a      	ldr	r2, [r7, #16]
 800c8f2:	7812      	ldrb	r2, [r2, #0]
 800c8f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	613b      	str	r3, [r7, #16]
    idx++;
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
 800c8fe:	3301      	adds	r3, #1
 800c900:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c902:	7dfb      	ldrb	r3, [r7, #23]
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	4413      	add	r3, r2
 800c908:	2200      	movs	r2, #0
 800c90a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
 800c90e:	3301      	adds	r3, #1
 800c910:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1e7      	bne.n	800c8ea <USBD_GetString+0x52>
 800c91a:	e000      	b.n	800c91e <USBD_GetString+0x86>
    return;
 800c91c:	bf00      	nop
  }
}
 800c91e:	3718      	adds	r7, #24
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c92c:	2300      	movs	r3, #0
 800c92e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c934:	e005      	b.n	800c942 <USBD_GetLen+0x1e>
  {
    len++;
 800c936:	7bfb      	ldrb	r3, [r7, #15]
 800c938:	3301      	adds	r3, #1
 800c93a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	3301      	adds	r3, #1
 800c940:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1f5      	bne.n	800c936 <USBD_GetLen+0x12>
  }

  return len;
 800c94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3714      	adds	r7, #20
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr

0800c958 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2202      	movs	r2, #2
 800c968:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	68ba      	ldr	r2, [r7, #8]
 800c97c:	2100      	movs	r1, #0
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f003 ff0d 	bl	801079e <USBD_LL_Transmit>

  return USBD_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b084      	sub	sp, #16
 800c992:	af00      	add	r7, sp, #0
 800c994:	60f8      	str	r0, [r7, #12]
 800c996:	60b9      	str	r1, [r7, #8]
 800c998:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	2100      	movs	r1, #0
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f003 fefc 	bl	801079e <USBD_LL_Transmit>

  return USBD_OK;
 800c9a6:	2300      	movs	r3, #0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2203      	movs	r2, #3
 800c9c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	2100      	movs	r1, #0
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f003 ff00 	bl	80107e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b084      	sub	sp, #16
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	60f8      	str	r0, [r7, #12]
 800c9f2:	60b9      	str	r1, [r7, #8]
 800c9f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f003 feef 	bl	80107e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca02:	2300      	movs	r3, #0
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3710      	adds	r7, #16
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2204      	movs	r2, #4
 800ca18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	2200      	movs	r2, #0
 800ca20:	2100      	movs	r1, #0
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f003 febb 	bl	801079e <USBD_LL_Transmit>

  return USBD_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3708      	adds	r7, #8
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b082      	sub	sp, #8
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2205      	movs	r2, #5
 800ca3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca42:	2300      	movs	r3, #0
 800ca44:	2200      	movs	r2, #0
 800ca46:	2100      	movs	r1, #0
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f003 fec9 	bl	80107e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <__NVIC_SetPriority>:
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	6039      	str	r1, [r7, #0]
 800ca62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ca64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	db0a      	blt.n	800ca82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	b2da      	uxtb	r2, r3
 800ca70:	490c      	ldr	r1, [pc, #48]	; (800caa4 <__NVIC_SetPriority+0x4c>)
 800ca72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca76:	0112      	lsls	r2, r2, #4
 800ca78:	b2d2      	uxtb	r2, r2
 800ca7a:	440b      	add	r3, r1
 800ca7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ca80:	e00a      	b.n	800ca98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	4908      	ldr	r1, [pc, #32]	; (800caa8 <__NVIC_SetPriority+0x50>)
 800ca88:	79fb      	ldrb	r3, [r7, #7]
 800ca8a:	f003 030f 	and.w	r3, r3, #15
 800ca8e:	3b04      	subs	r3, #4
 800ca90:	0112      	lsls	r2, r2, #4
 800ca92:	b2d2      	uxtb	r2, r2
 800ca94:	440b      	add	r3, r1
 800ca96:	761a      	strb	r2, [r3, #24]
}
 800ca98:	bf00      	nop
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr
 800caa4:	e000e100 	.word	0xe000e100
 800caa8:	e000ed00 	.word	0xe000ed00

0800caac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800caac:	b580      	push	{r7, lr}
 800caae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cab0:	4b05      	ldr	r3, [pc, #20]	; (800cac8 <SysTick_Handler+0x1c>)
 800cab2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cab4:	f002 f900 	bl	800ecb8 <xTaskGetSchedulerState>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d001      	beq.n	800cac2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cabe:	f002 ffa3 	bl	800fa08 <xPortSysTickHandler>
  }
}
 800cac2:	bf00      	nop
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	e000e010 	.word	0xe000e010

0800cacc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cacc:	b580      	push	{r7, lr}
 800cace:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cad0:	2100      	movs	r1, #0
 800cad2:	f06f 0004 	mvn.w	r0, #4
 800cad6:	f7ff ffbf 	bl	800ca58 <__NVIC_SetPriority>
#endif
}
 800cada:	bf00      	nop
 800cadc:	bd80      	pop	{r7, pc}
	...

0800cae0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cae6:	f3ef 8305 	mrs	r3, IPSR
 800caea:	603b      	str	r3, [r7, #0]
  return(result);
 800caec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d003      	beq.n	800cafa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800caf2:	f06f 0305 	mvn.w	r3, #5
 800caf6:	607b      	str	r3, [r7, #4]
 800caf8:	e00c      	b.n	800cb14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cafa:	4b0a      	ldr	r3, [pc, #40]	; (800cb24 <osKernelInitialize+0x44>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d105      	bne.n	800cb0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cb02:	4b08      	ldr	r3, [pc, #32]	; (800cb24 <osKernelInitialize+0x44>)
 800cb04:	2201      	movs	r2, #1
 800cb06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	607b      	str	r3, [r7, #4]
 800cb0c:	e002      	b.n	800cb14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cb0e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb14:	687b      	ldr	r3, [r7, #4]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	370c      	adds	r7, #12
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	20001524 	.word	0x20001524

0800cb28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb2e:	f3ef 8305 	mrs	r3, IPSR
 800cb32:	603b      	str	r3, [r7, #0]
  return(result);
 800cb34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d003      	beq.n	800cb42 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cb3a:	f06f 0305 	mvn.w	r3, #5
 800cb3e:	607b      	str	r3, [r7, #4]
 800cb40:	e010      	b.n	800cb64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cb42:	4b0b      	ldr	r3, [pc, #44]	; (800cb70 <osKernelStart+0x48>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d109      	bne.n	800cb5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cb4a:	f7ff ffbf 	bl	800cacc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cb4e:	4b08      	ldr	r3, [pc, #32]	; (800cb70 <osKernelStart+0x48>)
 800cb50:	2202      	movs	r2, #2
 800cb52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cb54:	f001 fad0 	bl	800e0f8 <vTaskStartScheduler>
      stat = osOK;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	607b      	str	r3, [r7, #4]
 800cb5c:	e002      	b.n	800cb64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb64:	687b      	ldr	r3, [r7, #4]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	20001524 	.word	0x20001524

0800cb74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08e      	sub	sp, #56	; 0x38
 800cb78:	af04      	add	r7, sp, #16
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cb80:	2300      	movs	r3, #0
 800cb82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb84:	f3ef 8305 	mrs	r3, IPSR
 800cb88:	617b      	str	r3, [r7, #20]
  return(result);
 800cb8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d17e      	bne.n	800cc8e <osThreadNew+0x11a>
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d07b      	beq.n	800cc8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cb96:	2380      	movs	r3, #128	; 0x80
 800cb98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cb9a:	2318      	movs	r3, #24
 800cb9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cba2:	f04f 33ff 	mov.w	r3, #4294967295
 800cba6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d045      	beq.n	800cc3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <osThreadNew+0x48>
        name = attr->name;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d008      	beq.n	800cbe2 <osThreadNew+0x6e>
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	2b38      	cmp	r3, #56	; 0x38
 800cbd4:	d805      	bhi.n	800cbe2 <osThreadNew+0x6e>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	f003 0301 	and.w	r3, r3, #1
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d001      	beq.n	800cbe6 <osThreadNew+0x72>
        return (NULL);
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	e054      	b.n	800cc90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d003      	beq.n	800cbf6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	089b      	lsrs	r3, r3, #2
 800cbf4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	689b      	ldr	r3, [r3, #8]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00e      	beq.n	800cc1c <osThreadNew+0xa8>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	2bbf      	cmp	r3, #191	; 0xbf
 800cc04:	d90a      	bls.n	800cc1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d006      	beq.n	800cc1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	695b      	ldr	r3, [r3, #20]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d002      	beq.n	800cc1c <osThreadNew+0xa8>
        mem = 1;
 800cc16:	2301      	movs	r3, #1
 800cc18:	61bb      	str	r3, [r7, #24]
 800cc1a:	e010      	b.n	800cc3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10c      	bne.n	800cc3e <osThreadNew+0xca>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d108      	bne.n	800cc3e <osThreadNew+0xca>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	691b      	ldr	r3, [r3, #16]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d104      	bne.n	800cc3e <osThreadNew+0xca>
          mem = 0;
 800cc34:	2300      	movs	r3, #0
 800cc36:	61bb      	str	r3, [r7, #24]
 800cc38:	e001      	b.n	800cc3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d110      	bne.n	800cc66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc4c:	9202      	str	r2, [sp, #8]
 800cc4e:	9301      	str	r3, [sp, #4]
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	6a3a      	ldr	r2, [r7, #32]
 800cc58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc5a:	68f8      	ldr	r0, [r7, #12]
 800cc5c:	f000 fff6 	bl	800dc4c <xTaskCreateStatic>
 800cc60:	4603      	mov	r3, r0
 800cc62:	613b      	str	r3, [r7, #16]
 800cc64:	e013      	b.n	800cc8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d110      	bne.n	800cc8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cc6c:	6a3b      	ldr	r3, [r7, #32]
 800cc6e:	b29a      	uxth	r2, r3
 800cc70:	f107 0310 	add.w	r3, r7, #16
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	9300      	str	r3, [sp, #0]
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f001 f841 	bl	800dd06 <xTaskCreate>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d001      	beq.n	800cc8e <osThreadNew+0x11a>
            hTask = NULL;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cc8e:	693b      	ldr	r3, [r7, #16]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3728      	adds	r7, #40	; 0x28
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cca0:	f3ef 8305 	mrs	r3, IPSR
 800cca4:	60bb      	str	r3, [r7, #8]
  return(result);
 800cca6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d003      	beq.n	800ccb4 <osDelay+0x1c>
    stat = osErrorISR;
 800ccac:	f06f 0305 	mvn.w	r3, #5
 800ccb0:	60fb      	str	r3, [r7, #12]
 800ccb2:	e007      	b.n	800ccc4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d002      	beq.n	800ccc4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f001 f980 	bl	800dfc4 <vTaskDelay>
    }
  }

  return (stat);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3710      	adds	r7, #16
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b08a      	sub	sp, #40	; 0x28
 800ccd2:	af02      	add	r7, sp, #8
 800ccd4:	60f8      	str	r0, [r7, #12]
 800ccd6:	60b9      	str	r1, [r7, #8]
 800ccd8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccde:	f3ef 8305 	mrs	r3, IPSR
 800cce2:	613b      	str	r3, [r7, #16]
  return(result);
 800cce4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d15f      	bne.n	800cdaa <osMessageQueueNew+0xdc>
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d05c      	beq.n	800cdaa <osMessageQueueNew+0xdc>
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d059      	beq.n	800cdaa <osMessageQueueNew+0xdc>
    mem = -1;
 800ccf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d029      	beq.n	800cd56 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d012      	beq.n	800cd30 <osMessageQueueNew+0x62>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	2b4f      	cmp	r3, #79	; 0x4f
 800cd10:	d90e      	bls.n	800cd30 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00a      	beq.n	800cd30 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	695a      	ldr	r2, [r3, #20]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	68b9      	ldr	r1, [r7, #8]
 800cd22:	fb01 f303 	mul.w	r3, r1, r3
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d302      	bcc.n	800cd30 <osMessageQueueNew+0x62>
        mem = 1;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	61bb      	str	r3, [r7, #24]
 800cd2e:	e014      	b.n	800cd5a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d110      	bne.n	800cd5a <osMessageQueueNew+0x8c>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10c      	bne.n	800cd5a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d108      	bne.n	800cd5a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	695b      	ldr	r3, [r3, #20]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d104      	bne.n	800cd5a <osMessageQueueNew+0x8c>
          mem = 0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	61bb      	str	r3, [r7, #24]
 800cd54:	e001      	b.n	800cd5a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cd56:	2300      	movs	r3, #0
 800cd58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d10b      	bne.n	800cd78 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	691a      	ldr	r2, [r3, #16]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	2100      	movs	r1, #0
 800cd6a:	9100      	str	r1, [sp, #0]
 800cd6c:	68b9      	ldr	r1, [r7, #8]
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f000 fa2e 	bl	800d1d0 <xQueueGenericCreateStatic>
 800cd74:	61f8      	str	r0, [r7, #28]
 800cd76:	e008      	b.n	800cd8a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cd78:	69bb      	ldr	r3, [r7, #24]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d105      	bne.n	800cd8a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cd7e:	2200      	movs	r2, #0
 800cd80:	68b9      	ldr	r1, [r7, #8]
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f000 fa9c 	bl	800d2c0 <xQueueGenericCreate>
 800cd88:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00c      	beq.n	800cdaa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d003      	beq.n	800cd9e <osMessageQueueNew+0xd0>
        name = attr->name;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	617b      	str	r3, [r7, #20]
 800cd9c:	e001      	b.n	800cda2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cda2:	6979      	ldr	r1, [r7, #20]
 800cda4:	69f8      	ldr	r0, [r7, #28]
 800cda6:	f000 fef3 	bl	800db90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cdaa:	69fb      	ldr	r3, [r7, #28]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3720      	adds	r7, #32
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b088      	sub	sp, #32
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	603b      	str	r3, [r7, #0]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdcc:	f3ef 8305 	mrs	r3, IPSR
 800cdd0:	617b      	str	r3, [r7, #20]
  return(result);
 800cdd2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d028      	beq.n	800ce2a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d005      	beq.n	800cdea <osMessageQueuePut+0x36>
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d002      	beq.n	800cdea <osMessageQueuePut+0x36>
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d003      	beq.n	800cdf2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cdea:	f06f 0303 	mvn.w	r3, #3
 800cdee:	61fb      	str	r3, [r7, #28]
 800cdf0:	e038      	b.n	800ce64 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cdf6:	f107 0210 	add.w	r2, r7, #16
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	68b9      	ldr	r1, [r7, #8]
 800cdfe:	69b8      	ldr	r0, [r7, #24]
 800ce00:	f000 fbba 	bl	800d578 <xQueueGenericSendFromISR>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d003      	beq.n	800ce12 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ce0a:	f06f 0302 	mvn.w	r3, #2
 800ce0e:	61fb      	str	r3, [r7, #28]
 800ce10:	e028      	b.n	800ce64 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d025      	beq.n	800ce64 <osMessageQueuePut+0xb0>
 800ce18:	4b15      	ldr	r3, [pc, #84]	; (800ce70 <osMessageQueuePut+0xbc>)
 800ce1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	f3bf 8f6f 	isb	sy
 800ce28:	e01c      	b.n	800ce64 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d002      	beq.n	800ce36 <osMessageQueuePut+0x82>
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d103      	bne.n	800ce3e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ce36:	f06f 0303 	mvn.w	r3, #3
 800ce3a:	61fb      	str	r3, [r7, #28]
 800ce3c:	e012      	b.n	800ce64 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ce3e:	2300      	movs	r3, #0
 800ce40:	683a      	ldr	r2, [r7, #0]
 800ce42:	68b9      	ldr	r1, [r7, #8]
 800ce44:	69b8      	ldr	r0, [r7, #24]
 800ce46:	f000 fa99 	bl	800d37c <xQueueGenericSend>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d009      	beq.n	800ce64 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d003      	beq.n	800ce5e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ce56:	f06f 0301 	mvn.w	r3, #1
 800ce5a:	61fb      	str	r3, [r7, #28]
 800ce5c:	e002      	b.n	800ce64 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ce5e:	f06f 0302 	mvn.w	r3, #2
 800ce62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ce64:	69fb      	ldr	r3, [r7, #28]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3720      	adds	r7, #32
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	e000ed04 	.word	0xe000ed04

0800ce74 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b088      	sub	sp, #32
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
 800ce80:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ce86:	2300      	movs	r3, #0
 800ce88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce8a:	f3ef 8305 	mrs	r3, IPSR
 800ce8e:	617b      	str	r3, [r7, #20]
  return(result);
 800ce90:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d028      	beq.n	800cee8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d005      	beq.n	800cea8 <osMessageQueueGet+0x34>
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d002      	beq.n	800cea8 <osMessageQueueGet+0x34>
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d003      	beq.n	800ceb0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cea8:	f06f 0303 	mvn.w	r3, #3
 800ceac:	61fb      	str	r3, [r7, #28]
 800ceae:	e037      	b.n	800cf20 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ceb4:	f107 0310 	add.w	r3, r7, #16
 800ceb8:	461a      	mov	r2, r3
 800ceba:	68b9      	ldr	r1, [r7, #8]
 800cebc:	69b8      	ldr	r0, [r7, #24]
 800cebe:	f000 fcd7 	bl	800d870 <xQueueReceiveFromISR>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d003      	beq.n	800ced0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cec8:	f06f 0302 	mvn.w	r3, #2
 800cecc:	61fb      	str	r3, [r7, #28]
 800cece:	e027      	b.n	800cf20 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d024      	beq.n	800cf20 <osMessageQueueGet+0xac>
 800ced6:	4b15      	ldr	r3, [pc, #84]	; (800cf2c <osMessageQueueGet+0xb8>)
 800ced8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cedc:	601a      	str	r2, [r3, #0]
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	e01b      	b.n	800cf20 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d002      	beq.n	800cef4 <osMessageQueueGet+0x80>
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d103      	bne.n	800cefc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cef4:	f06f 0303 	mvn.w	r3, #3
 800cef8:	61fb      	str	r3, [r7, #28]
 800cefa:	e011      	b.n	800cf20 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	68b9      	ldr	r1, [r7, #8]
 800cf00:	69b8      	ldr	r0, [r7, #24]
 800cf02:	f000 fbd5 	bl	800d6b0 <xQueueReceive>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d009      	beq.n	800cf20 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d003      	beq.n	800cf1a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cf12:	f06f 0301 	mvn.w	r3, #1
 800cf16:	61fb      	str	r3, [r7, #28]
 800cf18:	e002      	b.n	800cf20 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cf1a:	f06f 0302 	mvn.w	r3, #2
 800cf1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cf20:	69fb      	ldr	r3, [r7, #28]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3720      	adds	r7, #32
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	e000ed04 	.word	0xe000ed04

0800cf30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	4a07      	ldr	r2, [pc, #28]	; (800cf5c <vApplicationGetIdleTaskMemory+0x2c>)
 800cf40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	4a06      	ldr	r2, [pc, #24]	; (800cf60 <vApplicationGetIdleTaskMemory+0x30>)
 800cf46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2280      	movs	r2, #128	; 0x80
 800cf4c:	601a      	str	r2, [r3, #0]
}
 800cf4e:	bf00      	nop
 800cf50:	3714      	adds	r7, #20
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop
 800cf5c:	20001528 	.word	0x20001528
 800cf60:	200015e8 	.word	0x200015e8

0800cf64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	4a07      	ldr	r2, [pc, #28]	; (800cf90 <vApplicationGetTimerTaskMemory+0x2c>)
 800cf74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	4a06      	ldr	r2, [pc, #24]	; (800cf94 <vApplicationGetTimerTaskMemory+0x30>)
 800cf7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf82:	601a      	str	r2, [r3, #0]
}
 800cf84:	bf00      	nop
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	200017e8 	.word	0x200017e8
 800cf94:	200018a8 	.word	0x200018a8

0800cf98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f103 0208 	add.w	r2, r3, #8
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f103 0208 	add.w	r2, r3, #8
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f103 0208 	add.w	r2, r3, #8
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cfcc:	bf00      	nop
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cfe6:	bf00      	nop
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cff2:	b480      	push	{r7}
 800cff4:	b085      	sub	sp, #20
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	689a      	ldr	r2, [r3, #8]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	683a      	ldr	r2, [r7, #0]
 800d016:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	683a      	ldr	r2, [r7, #0]
 800d01c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	1c5a      	adds	r2, r3, #1
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	601a      	str	r2, [r3, #0]
}
 800d02e:	bf00      	nop
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d03a:	b480      	push	{r7}
 800d03c:	b085      	sub	sp, #20
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d050:	d103      	bne.n	800d05a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	691b      	ldr	r3, [r3, #16]
 800d056:	60fb      	str	r3, [r7, #12]
 800d058:	e00c      	b.n	800d074 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	3308      	adds	r3, #8
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	e002      	b.n	800d068 <vListInsert+0x2e>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	60fb      	str	r3, [r7, #12]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	429a      	cmp	r2, r3
 800d072:	d2f6      	bcs.n	800d062 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	685a      	ldr	r2, [r3, #4]
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	683a      	ldr	r2, [r7, #0]
 800d082:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	683a      	ldr	r2, [r7, #0]
 800d08e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	601a      	str	r2, [r3, #0]
}
 800d0a0:	bf00      	nop
 800d0a2:	3714      	adds	r7, #20
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	6892      	ldr	r2, [r2, #8]
 800d0c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	6852      	ldr	r2, [r2, #4]
 800d0cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d103      	bne.n	800d0e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	689a      	ldr	r2, [r3, #8]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	1e5a      	subs	r2, r3, #1
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3714      	adds	r7, #20
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10a      	bne.n	800d12a <xQueueGenericReset+0x2a>
	__asm volatile
 800d114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d118:	f383 8811 	msr	BASEPRI, r3
 800d11c:	f3bf 8f6f 	isb	sy
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	60bb      	str	r3, [r7, #8]
}
 800d126:	bf00      	nop
 800d128:	e7fe      	b.n	800d128 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d12a:	f002 fbdb 	bl	800f8e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d136:	68f9      	ldr	r1, [r7, #12]
 800d138:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d13a:	fb01 f303 	mul.w	r3, r1, r3
 800d13e:	441a      	add	r2, r3
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d15a:	3b01      	subs	r3, #1
 800d15c:	68f9      	ldr	r1, [r7, #12]
 800d15e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d160:	fb01 f303 	mul.w	r3, r1, r3
 800d164:	441a      	add	r2, r3
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	22ff      	movs	r2, #255	; 0xff
 800d16e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	22ff      	movs	r2, #255	; 0xff
 800d176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d114      	bne.n	800d1aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	691b      	ldr	r3, [r3, #16]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d01a      	beq.n	800d1be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	3310      	adds	r3, #16
 800d18c:	4618      	mov	r0, r3
 800d18e:	f001 fafb 	bl	800e788 <xTaskRemoveFromEventList>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d012      	beq.n	800d1be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d198:	4b0c      	ldr	r3, [pc, #48]	; (800d1cc <xQueueGenericReset+0xcc>)
 800d19a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d19e:	601a      	str	r2, [r3, #0]
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	e009      	b.n	800d1be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	3310      	adds	r3, #16
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7ff fef2 	bl	800cf98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	3324      	adds	r3, #36	; 0x24
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7ff feed 	bl	800cf98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d1be:	f002 fbc1 	bl	800f944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d1c2:	2301      	movs	r3, #1
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3710      	adds	r7, #16
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	e000ed04 	.word	0xe000ed04

0800d1d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b08e      	sub	sp, #56	; 0x38
 800d1d4:	af02      	add	r7, sp, #8
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	607a      	str	r2, [r7, #4]
 800d1dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d10a      	bne.n	800d1fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e8:	f383 8811 	msr	BASEPRI, r3
 800d1ec:	f3bf 8f6f 	isb	sy
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d1f6:	bf00      	nop
 800d1f8:	e7fe      	b.n	800d1f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d10a      	bne.n	800d216 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d204:	f383 8811 	msr	BASEPRI, r3
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d212:	bf00      	nop
 800d214:	e7fe      	b.n	800d214 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <xQueueGenericCreateStatic+0x52>
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <xQueueGenericCreateStatic+0x56>
 800d222:	2301      	movs	r3, #1
 800d224:	e000      	b.n	800d228 <xQueueGenericCreateStatic+0x58>
 800d226:	2300      	movs	r3, #0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d10a      	bne.n	800d242 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d230:	f383 8811 	msr	BASEPRI, r3
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	623b      	str	r3, [r7, #32]
}
 800d23e:	bf00      	nop
 800d240:	e7fe      	b.n	800d240 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d102      	bne.n	800d24e <xQueueGenericCreateStatic+0x7e>
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d101      	bne.n	800d252 <xQueueGenericCreateStatic+0x82>
 800d24e:	2301      	movs	r3, #1
 800d250:	e000      	b.n	800d254 <xQueueGenericCreateStatic+0x84>
 800d252:	2300      	movs	r3, #0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10a      	bne.n	800d26e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	61fb      	str	r3, [r7, #28]
}
 800d26a:	bf00      	nop
 800d26c:	e7fe      	b.n	800d26c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d26e:	2350      	movs	r3, #80	; 0x50
 800d270:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	2b50      	cmp	r3, #80	; 0x50
 800d276:	d00a      	beq.n	800d28e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27c:	f383 8811 	msr	BASEPRI, r3
 800d280:	f3bf 8f6f 	isb	sy
 800d284:	f3bf 8f4f 	dsb	sy
 800d288:	61bb      	str	r3, [r7, #24]
}
 800d28a:	bf00      	nop
 800d28c:	e7fe      	b.n	800d28c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d28e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00d      	beq.n	800d2b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29c:	2201      	movs	r2, #1
 800d29e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d2a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	68b9      	ldr	r1, [r7, #8]
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f000 f83f 	bl	800d334 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3730      	adds	r7, #48	; 0x30
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b08a      	sub	sp, #40	; 0x28
 800d2c4:	af02      	add	r7, sp, #8
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d10a      	bne.n	800d2ea <xQueueGenericCreate+0x2a>
	__asm volatile
 800d2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d8:	f383 8811 	msr	BASEPRI, r3
 800d2dc:	f3bf 8f6f 	isb	sy
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	613b      	str	r3, [r7, #16]
}
 800d2e6:	bf00      	nop
 800d2e8:	e7fe      	b.n	800d2e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	68ba      	ldr	r2, [r7, #8]
 800d2ee:	fb02 f303 	mul.w	r3, r2, r3
 800d2f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	3350      	adds	r3, #80	; 0x50
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f002 fc15 	bl	800fb28 <pvPortMalloc>
 800d2fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d011      	beq.n	800d32a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	3350      	adds	r3, #80	; 0x50
 800d30e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	2200      	movs	r2, #0
 800d314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d318:	79fa      	ldrb	r2, [r7, #7]
 800d31a:	69bb      	ldr	r3, [r7, #24]
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	4613      	mov	r3, r2
 800d320:	697a      	ldr	r2, [r7, #20]
 800d322:	68b9      	ldr	r1, [r7, #8]
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	f000 f805 	bl	800d334 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d32a:	69bb      	ldr	r3, [r7, #24]
	}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3720      	adds	r7, #32
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	607a      	str	r2, [r7, #4]
 800d340:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d103      	bne.n	800d350 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	69ba      	ldr	r2, [r7, #24]
 800d34c:	601a      	str	r2, [r3, #0]
 800d34e:	e002      	b.n	800d356 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	68ba      	ldr	r2, [r7, #8]
 800d360:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d362:	2101      	movs	r1, #1
 800d364:	69b8      	ldr	r0, [r7, #24]
 800d366:	f7ff fecb 	bl	800d100 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	78fa      	ldrb	r2, [r7, #3]
 800d36e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d372:	bf00      	nop
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
	...

0800d37c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b08e      	sub	sp, #56	; 0x38
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
 800d388:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d38a:	2300      	movs	r3, #0
 800d38c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d394:	2b00      	cmp	r3, #0
 800d396:	d10a      	bne.n	800d3ae <xQueueGenericSend+0x32>
	__asm volatile
 800d398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39c:	f383 8811 	msr	BASEPRI, r3
 800d3a0:	f3bf 8f6f 	isb	sy
 800d3a4:	f3bf 8f4f 	dsb	sy
 800d3a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d3aa:	bf00      	nop
 800d3ac:	e7fe      	b.n	800d3ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d103      	bne.n	800d3bc <xQueueGenericSend+0x40>
 800d3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d101      	bne.n	800d3c0 <xQueueGenericSend+0x44>
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e000      	b.n	800d3c2 <xQueueGenericSend+0x46>
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d10a      	bne.n	800d3dc <xQueueGenericSend+0x60>
	__asm volatile
 800d3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ca:	f383 8811 	msr	BASEPRI, r3
 800d3ce:	f3bf 8f6f 	isb	sy
 800d3d2:	f3bf 8f4f 	dsb	sy
 800d3d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d3d8:	bf00      	nop
 800d3da:	e7fe      	b.n	800d3da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d103      	bne.n	800d3ea <xQueueGenericSend+0x6e>
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d101      	bne.n	800d3ee <xQueueGenericSend+0x72>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e000      	b.n	800d3f0 <xQueueGenericSend+0x74>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10a      	bne.n	800d40a <xQueueGenericSend+0x8e>
	__asm volatile
 800d3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f8:	f383 8811 	msr	BASEPRI, r3
 800d3fc:	f3bf 8f6f 	isb	sy
 800d400:	f3bf 8f4f 	dsb	sy
 800d404:	623b      	str	r3, [r7, #32]
}
 800d406:	bf00      	nop
 800d408:	e7fe      	b.n	800d408 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d40a:	f001 fc55 	bl	800ecb8 <xTaskGetSchedulerState>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d102      	bne.n	800d41a <xQueueGenericSend+0x9e>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d101      	bne.n	800d41e <xQueueGenericSend+0xa2>
 800d41a:	2301      	movs	r3, #1
 800d41c:	e000      	b.n	800d420 <xQueueGenericSend+0xa4>
 800d41e:	2300      	movs	r3, #0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d10a      	bne.n	800d43a <xQueueGenericSend+0xbe>
	__asm volatile
 800d424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d428:	f383 8811 	msr	BASEPRI, r3
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	f3bf 8f4f 	dsb	sy
 800d434:	61fb      	str	r3, [r7, #28]
}
 800d436:	bf00      	nop
 800d438:	e7fe      	b.n	800d438 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d43a:	f002 fa53 	bl	800f8e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d446:	429a      	cmp	r2, r3
 800d448:	d302      	bcc.n	800d450 <xQueueGenericSend+0xd4>
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2b02      	cmp	r3, #2
 800d44e:	d129      	bne.n	800d4a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d450:	683a      	ldr	r2, [r7, #0]
 800d452:	68b9      	ldr	r1, [r7, #8]
 800d454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d456:	f000 fa8b 	bl	800d970 <prvCopyDataToQueue>
 800d45a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d460:	2b00      	cmp	r3, #0
 800d462:	d010      	beq.n	800d486 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d466:	3324      	adds	r3, #36	; 0x24
 800d468:	4618      	mov	r0, r3
 800d46a:	f001 f98d 	bl	800e788 <xTaskRemoveFromEventList>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d013      	beq.n	800d49c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d474:	4b3f      	ldr	r3, [pc, #252]	; (800d574 <xQueueGenericSend+0x1f8>)
 800d476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d47a:	601a      	str	r2, [r3, #0]
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	f3bf 8f6f 	isb	sy
 800d484:	e00a      	b.n	800d49c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d007      	beq.n	800d49c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d48c:	4b39      	ldr	r3, [pc, #228]	; (800d574 <xQueueGenericSend+0x1f8>)
 800d48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d49c:	f002 fa52 	bl	800f944 <vPortExitCritical>
				return pdPASS;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	e063      	b.n	800d56c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d103      	bne.n	800d4b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4aa:	f002 fa4b 	bl	800f944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	e05c      	b.n	800d56c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d106      	bne.n	800d4c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4b8:	f107 0314 	add.w	r3, r7, #20
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f001 f9c7 	bl	800e850 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4c6:	f002 fa3d 	bl	800f944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4ca:	f000 fe87 	bl	800e1dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4ce:	f002 fa09 	bl	800f8e4 <vPortEnterCritical>
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4d8:	b25b      	sxtb	r3, r3
 800d4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4de:	d103      	bne.n	800d4e8 <xQueueGenericSend+0x16c>
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4ee:	b25b      	sxtb	r3, r3
 800d4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f4:	d103      	bne.n	800d4fe <xQueueGenericSend+0x182>
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4fe:	f002 fa21 	bl	800f944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d502:	1d3a      	adds	r2, r7, #4
 800d504:	f107 0314 	add.w	r3, r7, #20
 800d508:	4611      	mov	r1, r2
 800d50a:	4618      	mov	r0, r3
 800d50c:	f001 f9b6 	bl	800e87c <xTaskCheckForTimeOut>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d124      	bne.n	800d560 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d518:	f000 fb22 	bl	800db60 <prvIsQueueFull>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d018      	beq.n	800d554 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d524:	3310      	adds	r3, #16
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	4611      	mov	r1, r2
 800d52a:	4618      	mov	r0, r3
 800d52c:	f001 f8dc 	bl	800e6e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d532:	f000 faad 	bl	800da90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d536:	f000 fe5f 	bl	800e1f8 <xTaskResumeAll>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f47f af7c 	bne.w	800d43a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d542:	4b0c      	ldr	r3, [pc, #48]	; (800d574 <xQueueGenericSend+0x1f8>)
 800d544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d548:	601a      	str	r2, [r3, #0]
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	e772      	b.n	800d43a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d556:	f000 fa9b 	bl	800da90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d55a:	f000 fe4d 	bl	800e1f8 <xTaskResumeAll>
 800d55e:	e76c      	b.n	800d43a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d562:	f000 fa95 	bl	800da90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d566:	f000 fe47 	bl	800e1f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d56a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3738      	adds	r7, #56	; 0x38
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	e000ed04 	.word	0xe000ed04

0800d578 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b090      	sub	sp, #64	; 0x40
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
 800d584:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d10a      	bne.n	800d5a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d594:	f383 8811 	msr	BASEPRI, r3
 800d598:	f3bf 8f6f 	isb	sy
 800d59c:	f3bf 8f4f 	dsb	sy
 800d5a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d5a2:	bf00      	nop
 800d5a4:	e7fe      	b.n	800d5a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d103      	bne.n	800d5b4 <xQueueGenericSendFromISR+0x3c>
 800d5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d101      	bne.n	800d5b8 <xQueueGenericSendFromISR+0x40>
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e000      	b.n	800d5ba <xQueueGenericSendFromISR+0x42>
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10a      	bne.n	800d5d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c2:	f383 8811 	msr	BASEPRI, r3
 800d5c6:	f3bf 8f6f 	isb	sy
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d5d0:	bf00      	nop
 800d5d2:	e7fe      	b.n	800d5d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	d103      	bne.n	800d5e2 <xQueueGenericSendFromISR+0x6a>
 800d5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d101      	bne.n	800d5e6 <xQueueGenericSendFromISR+0x6e>
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e000      	b.n	800d5e8 <xQueueGenericSendFromISR+0x70>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d10a      	bne.n	800d602 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f0:	f383 8811 	msr	BASEPRI, r3
 800d5f4:	f3bf 8f6f 	isb	sy
 800d5f8:	f3bf 8f4f 	dsb	sy
 800d5fc:	623b      	str	r3, [r7, #32]
}
 800d5fe:	bf00      	nop
 800d600:	e7fe      	b.n	800d600 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d602:	f002 fa51 	bl	800faa8 <vPortValidateInterruptPriority>
	__asm volatile
 800d606:	f3ef 8211 	mrs	r2, BASEPRI
 800d60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	61fa      	str	r2, [r7, #28]
 800d61c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d61e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d620:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d302      	bcc.n	800d634 <xQueueGenericSendFromISR+0xbc>
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	2b02      	cmp	r3, #2
 800d632:	d12f      	bne.n	800d694 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d642:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d644:	683a      	ldr	r2, [r7, #0]
 800d646:	68b9      	ldr	r1, [r7, #8]
 800d648:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d64a:	f000 f991 	bl	800d970 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d64e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d656:	d112      	bne.n	800d67e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d016      	beq.n	800d68e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d662:	3324      	adds	r3, #36	; 0x24
 800d664:	4618      	mov	r0, r3
 800d666:	f001 f88f 	bl	800e788 <xTaskRemoveFromEventList>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d00e      	beq.n	800d68e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00b      	beq.n	800d68e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2201      	movs	r2, #1
 800d67a:	601a      	str	r2, [r3, #0]
 800d67c:	e007      	b.n	800d68e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d67e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d682:	3301      	adds	r3, #1
 800d684:	b2db      	uxtb	r3, r3
 800d686:	b25a      	sxtb	r2, r3
 800d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d68e:	2301      	movs	r3, #1
 800d690:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d692:	e001      	b.n	800d698 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d694:	2300      	movs	r3, #0
 800d696:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d69a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	f383 8811 	msr	BASEPRI, r3
}
 800d6a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3740      	adds	r7, #64	; 0x40
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
	...

0800d6b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b08c      	sub	sp, #48	; 0x30
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d10a      	bne.n	800d6e0 <xQueueReceive+0x30>
	__asm volatile
 800d6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ce:	f383 8811 	msr	BASEPRI, r3
 800d6d2:	f3bf 8f6f 	isb	sy
 800d6d6:	f3bf 8f4f 	dsb	sy
 800d6da:	623b      	str	r3, [r7, #32]
}
 800d6dc:	bf00      	nop
 800d6de:	e7fe      	b.n	800d6de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d103      	bne.n	800d6ee <xQueueReceive+0x3e>
 800d6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d101      	bne.n	800d6f2 <xQueueReceive+0x42>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e000      	b.n	800d6f4 <xQueueReceive+0x44>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d10a      	bne.n	800d70e <xQueueReceive+0x5e>
	__asm volatile
 800d6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fc:	f383 8811 	msr	BASEPRI, r3
 800d700:	f3bf 8f6f 	isb	sy
 800d704:	f3bf 8f4f 	dsb	sy
 800d708:	61fb      	str	r3, [r7, #28]
}
 800d70a:	bf00      	nop
 800d70c:	e7fe      	b.n	800d70c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d70e:	f001 fad3 	bl	800ecb8 <xTaskGetSchedulerState>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d102      	bne.n	800d71e <xQueueReceive+0x6e>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d101      	bne.n	800d722 <xQueueReceive+0x72>
 800d71e:	2301      	movs	r3, #1
 800d720:	e000      	b.n	800d724 <xQueueReceive+0x74>
 800d722:	2300      	movs	r3, #0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d10a      	bne.n	800d73e <xQueueReceive+0x8e>
	__asm volatile
 800d728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72c:	f383 8811 	msr	BASEPRI, r3
 800d730:	f3bf 8f6f 	isb	sy
 800d734:	f3bf 8f4f 	dsb	sy
 800d738:	61bb      	str	r3, [r7, #24]
}
 800d73a:	bf00      	nop
 800d73c:	e7fe      	b.n	800d73c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d73e:	f002 f8d1 	bl	800f8e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d746:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d01f      	beq.n	800d78e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d74e:	68b9      	ldr	r1, [r7, #8]
 800d750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d752:	f000 f977 	bl	800da44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d758:	1e5a      	subs	r2, r3, #1
 800d75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d760:	691b      	ldr	r3, [r3, #16]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00f      	beq.n	800d786 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d768:	3310      	adds	r3, #16
 800d76a:	4618      	mov	r0, r3
 800d76c:	f001 f80c 	bl	800e788 <xTaskRemoveFromEventList>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d007      	beq.n	800d786 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d776:	4b3d      	ldr	r3, [pc, #244]	; (800d86c <xQueueReceive+0x1bc>)
 800d778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d77c:	601a      	str	r2, [r3, #0]
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d786:	f002 f8dd 	bl	800f944 <vPortExitCritical>
				return pdPASS;
 800d78a:	2301      	movs	r3, #1
 800d78c:	e069      	b.n	800d862 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d103      	bne.n	800d79c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d794:	f002 f8d6 	bl	800f944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d798:	2300      	movs	r3, #0
 800d79a:	e062      	b.n	800d862 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d106      	bne.n	800d7b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7a2:	f107 0310 	add.w	r3, r7, #16
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f001 f852 	bl	800e850 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7b0:	f002 f8c8 	bl	800f944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7b4:	f000 fd12 	bl	800e1dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7b8:	f002 f894 	bl	800f8e4 <vPortEnterCritical>
 800d7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7c2:	b25b      	sxtb	r3, r3
 800d7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c8:	d103      	bne.n	800d7d2 <xQueueReceive+0x122>
 800d7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7d8:	b25b      	sxtb	r3, r3
 800d7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7de:	d103      	bne.n	800d7e8 <xQueueReceive+0x138>
 800d7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7e8:	f002 f8ac 	bl	800f944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7ec:	1d3a      	adds	r2, r7, #4
 800d7ee:	f107 0310 	add.w	r3, r7, #16
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f001 f841 	bl	800e87c <xTaskCheckForTimeOut>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d123      	bne.n	800d848 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d802:	f000 f997 	bl	800db34 <prvIsQueueEmpty>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d017      	beq.n	800d83c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80e:	3324      	adds	r3, #36	; 0x24
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	4611      	mov	r1, r2
 800d814:	4618      	mov	r0, r3
 800d816:	f000 ff67 	bl	800e6e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d81a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d81c:	f000 f938 	bl	800da90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d820:	f000 fcea 	bl	800e1f8 <xTaskResumeAll>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d189      	bne.n	800d73e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d82a:	4b10      	ldr	r3, [pc, #64]	; (800d86c <xQueueReceive+0x1bc>)
 800d82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d830:	601a      	str	r2, [r3, #0]
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	e780      	b.n	800d73e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d83c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d83e:	f000 f927 	bl	800da90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d842:	f000 fcd9 	bl	800e1f8 <xTaskResumeAll>
 800d846:	e77a      	b.n	800d73e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d84a:	f000 f921 	bl	800da90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d84e:	f000 fcd3 	bl	800e1f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d854:	f000 f96e 	bl	800db34 <prvIsQueueEmpty>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f43f af6f 	beq.w	800d73e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d860:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d862:	4618      	mov	r0, r3
 800d864:	3730      	adds	r7, #48	; 0x30
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	e000ed04 	.word	0xe000ed04

0800d870 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b08e      	sub	sp, #56	; 0x38
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10a      	bne.n	800d89c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88a:	f383 8811 	msr	BASEPRI, r3
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	623b      	str	r3, [r7, #32]
}
 800d898:	bf00      	nop
 800d89a:	e7fe      	b.n	800d89a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d103      	bne.n	800d8aa <xQueueReceiveFromISR+0x3a>
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d101      	bne.n	800d8ae <xQueueReceiveFromISR+0x3e>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e000      	b.n	800d8b0 <xQueueReceiveFromISR+0x40>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10a      	bne.n	800d8ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	61fb      	str	r3, [r7, #28]
}
 800d8c6:	bf00      	nop
 800d8c8:	e7fe      	b.n	800d8c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8ca:	f002 f8ed 	bl	800faa8 <vPortValidateInterruptPriority>
	__asm volatile
 800d8ce:	f3ef 8211 	mrs	r2, BASEPRI
 800d8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d6:	f383 8811 	msr	BASEPRI, r3
 800d8da:	f3bf 8f6f 	isb	sy
 800d8de:	f3bf 8f4f 	dsb	sy
 800d8e2:	61ba      	str	r2, [r7, #24]
 800d8e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d8e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d02f      	beq.n	800d956 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d900:	68b9      	ldr	r1, [r7, #8]
 800d902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d904:	f000 f89e 	bl	800da44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90a:	1e5a      	subs	r2, r3, #1
 800d90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d910:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d918:	d112      	bne.n	800d940 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91c:	691b      	ldr	r3, [r3, #16]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d016      	beq.n	800d950 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d924:	3310      	adds	r3, #16
 800d926:	4618      	mov	r0, r3
 800d928:	f000 ff2e 	bl	800e788 <xTaskRemoveFromEventList>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00e      	beq.n	800d950 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00b      	beq.n	800d950 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2201      	movs	r2, #1
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	e007      	b.n	800d950 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d944:	3301      	adds	r3, #1
 800d946:	b2db      	uxtb	r3, r3
 800d948:	b25a      	sxtb	r2, r3
 800d94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d950:	2301      	movs	r3, #1
 800d952:	637b      	str	r3, [r7, #52]	; 0x34
 800d954:	e001      	b.n	800d95a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d956:	2300      	movs	r3, #0
 800d958:	637b      	str	r3, [r7, #52]	; 0x34
 800d95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	f383 8811 	msr	BASEPRI, r3
}
 800d964:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3738      	adds	r7, #56	; 0x38
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d97c:	2300      	movs	r3, #0
 800d97e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d984:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d10d      	bne.n	800d9aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d14d      	bne.n	800da32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f001 f9aa 	bl	800ecf4 <xTaskPriorityDisinherit>
 800d9a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	609a      	str	r2, [r3, #8]
 800d9a8:	e043      	b.n	800da32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d119      	bne.n	800d9e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6858      	ldr	r0, [r3, #4]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	68b9      	ldr	r1, [r7, #8]
 800d9bc:	f002 ffc2 	bl	8010944 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	685a      	ldr	r2, [r3, #4]
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c8:	441a      	add	r2, r3
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	685a      	ldr	r2, [r3, #4]
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d32b      	bcc.n	800da32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681a      	ldr	r2, [r3, #0]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	605a      	str	r2, [r3, #4]
 800d9e2:	e026      	b.n	800da32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	68d8      	ldr	r0, [r3, #12]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	68b9      	ldr	r1, [r7, #8]
 800d9f0:	f002 ffa8 	bl	8010944 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	68da      	ldr	r2, [r3, #12]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9fc:	425b      	negs	r3, r3
 800d9fe:	441a      	add	r2, r3
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	68da      	ldr	r2, [r3, #12]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d207      	bcs.n	800da20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	689a      	ldr	r2, [r3, #8]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da18:	425b      	negs	r3, r3
 800da1a:	441a      	add	r2, r3
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b02      	cmp	r3, #2
 800da24:	d105      	bne.n	800da32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	3b01      	subs	r3, #1
 800da30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	1c5a      	adds	r2, r3, #1
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800da3a:	697b      	ldr	r3, [r7, #20]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3718      	adds	r7, #24
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da52:	2b00      	cmp	r3, #0
 800da54:	d018      	beq.n	800da88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	68da      	ldr	r2, [r3, #12]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da5e:	441a      	add	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	68da      	ldr	r2, [r3, #12]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d303      	bcc.n	800da78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	68d9      	ldr	r1, [r3, #12]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da80:	461a      	mov	r2, r3
 800da82:	6838      	ldr	r0, [r7, #0]
 800da84:	f002 ff5e 	bl	8010944 <memcpy>
	}
}
 800da88:	bf00      	nop
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800da98:	f001 ff24 	bl	800f8e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800daa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800daa4:	e011      	b.n	800daca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d012      	beq.n	800dad4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	3324      	adds	r3, #36	; 0x24
 800dab2:	4618      	mov	r0, r3
 800dab4:	f000 fe68 	bl	800e788 <xTaskRemoveFromEventList>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d001      	beq.n	800dac2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dabe:	f000 ff3f 	bl	800e940 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dac2:	7bfb      	ldrb	r3, [r7, #15]
 800dac4:	3b01      	subs	r3, #1
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800daca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	dce9      	bgt.n	800daa6 <prvUnlockQueue+0x16>
 800dad2:	e000      	b.n	800dad6 <prvUnlockQueue+0x46>
					break;
 800dad4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	22ff      	movs	r2, #255	; 0xff
 800dada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dade:	f001 ff31 	bl	800f944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dae2:	f001 feff 	bl	800f8e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800daec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800daee:	e011      	b.n	800db14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	691b      	ldr	r3, [r3, #16]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d012      	beq.n	800db1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	3310      	adds	r3, #16
 800dafc:	4618      	mov	r0, r3
 800dafe:	f000 fe43 	bl	800e788 <xTaskRemoveFromEventList>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d001      	beq.n	800db0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800db08:	f000 ff1a 	bl	800e940 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800db0c:	7bbb      	ldrb	r3, [r7, #14]
 800db0e:	3b01      	subs	r3, #1
 800db10:	b2db      	uxtb	r3, r3
 800db12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	dce9      	bgt.n	800daf0 <prvUnlockQueue+0x60>
 800db1c:	e000      	b.n	800db20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800db1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	22ff      	movs	r2, #255	; 0xff
 800db24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800db28:	f001 ff0c 	bl	800f944 <vPortExitCritical>
}
 800db2c:	bf00      	nop
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db3c:	f001 fed2 	bl	800f8e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db44:	2b00      	cmp	r3, #0
 800db46:	d102      	bne.n	800db4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800db48:	2301      	movs	r3, #1
 800db4a:	60fb      	str	r3, [r7, #12]
 800db4c:	e001      	b.n	800db52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800db4e:	2300      	movs	r3, #0
 800db50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db52:	f001 fef7 	bl	800f944 <vPortExitCritical>

	return xReturn;
 800db56:	68fb      	ldr	r3, [r7, #12]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3710      	adds	r7, #16
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db68:	f001 febc 	bl	800f8e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db74:	429a      	cmp	r2, r3
 800db76:	d102      	bne.n	800db7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800db78:	2301      	movs	r3, #1
 800db7a:	60fb      	str	r3, [r7, #12]
 800db7c:	e001      	b.n	800db82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800db7e:	2300      	movs	r3, #0
 800db80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db82:	f001 fedf 	bl	800f944 <vPortExitCritical>

	return xReturn;
 800db86:	68fb      	ldr	r3, [r7, #12]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db9a:	2300      	movs	r3, #0
 800db9c:	60fb      	str	r3, [r7, #12]
 800db9e:	e014      	b.n	800dbca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dba0:	4a0f      	ldr	r2, [pc, #60]	; (800dbe0 <vQueueAddToRegistry+0x50>)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d10b      	bne.n	800dbc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dbac:	490c      	ldr	r1, [pc, #48]	; (800dbe0 <vQueueAddToRegistry+0x50>)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	683a      	ldr	r2, [r7, #0]
 800dbb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dbb6:	4a0a      	ldr	r2, [pc, #40]	; (800dbe0 <vQueueAddToRegistry+0x50>)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	00db      	lsls	r3, r3, #3
 800dbbc:	4413      	add	r3, r2
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dbc2:	e006      	b.n	800dbd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	60fb      	str	r3, [r7, #12]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2b07      	cmp	r3, #7
 800dbce:	d9e7      	bls.n	800dba0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dbd0:	bf00      	nop
 800dbd2:	bf00      	nop
 800dbd4:	3714      	adds	r7, #20
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	20001ca8 	.word	0x20001ca8

0800dbe4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b086      	sub	sp, #24
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dbf4:	f001 fe76 	bl	800f8e4 <vPortEnterCritical>
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbfe:	b25b      	sxtb	r3, r3
 800dc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc04:	d103      	bne.n	800dc0e <vQueueWaitForMessageRestricted+0x2a>
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc14:	b25b      	sxtb	r3, r3
 800dc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc1a:	d103      	bne.n	800dc24 <vQueueWaitForMessageRestricted+0x40>
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc24:	f001 fe8e 	bl	800f944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d106      	bne.n	800dc3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	3324      	adds	r3, #36	; 0x24
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	68b9      	ldr	r1, [r7, #8]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f000 fd79 	bl	800e730 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dc3e:	6978      	ldr	r0, [r7, #20]
 800dc40:	f7ff ff26 	bl	800da90 <prvUnlockQueue>
	}
 800dc44:	bf00      	nop
 800dc46:	3718      	adds	r7, #24
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08e      	sub	sp, #56	; 0x38
 800dc50:	af04      	add	r7, sp, #16
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
 800dc58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dc5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d10a      	bne.n	800dc76 <xTaskCreateStatic+0x2a>
	__asm volatile
 800dc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc64:	f383 8811 	msr	BASEPRI, r3
 800dc68:	f3bf 8f6f 	isb	sy
 800dc6c:	f3bf 8f4f 	dsb	sy
 800dc70:	623b      	str	r3, [r7, #32]
}
 800dc72:	bf00      	nop
 800dc74:	e7fe      	b.n	800dc74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10a      	bne.n	800dc92 <xTaskCreateStatic+0x46>
	__asm volatile
 800dc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc80:	f383 8811 	msr	BASEPRI, r3
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	61fb      	str	r3, [r7, #28]
}
 800dc8e:	bf00      	nop
 800dc90:	e7fe      	b.n	800dc90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dc92:	23c0      	movs	r3, #192	; 0xc0
 800dc94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	2bc0      	cmp	r3, #192	; 0xc0
 800dc9a:	d00a      	beq.n	800dcb2 <xTaskCreateStatic+0x66>
	__asm volatile
 800dc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca0:	f383 8811 	msr	BASEPRI, r3
 800dca4:	f3bf 8f6f 	isb	sy
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	61bb      	str	r3, [r7, #24]
}
 800dcae:	bf00      	nop
 800dcb0:	e7fe      	b.n	800dcb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dcb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d01e      	beq.n	800dcf8 <xTaskCreateStatic+0xac>
 800dcba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d01b      	beq.n	800dcf8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dccc:	2202      	movs	r2, #2
 800dcce:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	9303      	str	r3, [sp, #12]
 800dcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd8:	9302      	str	r3, [sp, #8]
 800dcda:	f107 0314 	add.w	r3, r7, #20
 800dcde:	9301      	str	r3, [sp, #4]
 800dce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	68b9      	ldr	r1, [r7, #8]
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	f000 f850 	bl	800dd90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dcf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcf2:	f000 f8f7 	bl	800dee4 <prvAddNewTaskToReadyList>
 800dcf6:	e001      	b.n	800dcfc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dcfc:	697b      	ldr	r3, [r7, #20]
	}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3728      	adds	r7, #40	; 0x28
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}

0800dd06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b08c      	sub	sp, #48	; 0x30
 800dd0a:	af04      	add	r7, sp, #16
 800dd0c:	60f8      	str	r0, [r7, #12]
 800dd0e:	60b9      	str	r1, [r7, #8]
 800dd10:	603b      	str	r3, [r7, #0]
 800dd12:	4613      	mov	r3, r2
 800dd14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dd16:	88fb      	ldrh	r3, [r7, #6]
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f001 ff04 	bl	800fb28 <pvPortMalloc>
 800dd20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d00e      	beq.n	800dd46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dd28:	20c0      	movs	r0, #192	; 0xc0
 800dd2a:	f001 fefd 	bl	800fb28 <pvPortMalloc>
 800dd2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d003      	beq.n	800dd3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	697a      	ldr	r2, [r7, #20]
 800dd3a:	631a      	str	r2, [r3, #48]	; 0x30
 800dd3c:	e005      	b.n	800dd4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dd3e:	6978      	ldr	r0, [r7, #20]
 800dd40:	f001 ffbe 	bl	800fcc0 <vPortFree>
 800dd44:	e001      	b.n	800dd4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dd46:	2300      	movs	r3, #0
 800dd48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d017      	beq.n	800dd80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	2200      	movs	r2, #0
 800dd54:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd58:	88fa      	ldrh	r2, [r7, #6]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	9303      	str	r3, [sp, #12]
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	9302      	str	r3, [sp, #8]
 800dd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd64:	9301      	str	r3, [sp, #4]
 800dd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	68b9      	ldr	r1, [r7, #8]
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f000 f80e 	bl	800dd90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd74:	69f8      	ldr	r0, [r7, #28]
 800dd76:	f000 f8b5 	bl	800dee4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	61bb      	str	r3, [r7, #24]
 800dd7e:	e002      	b.n	800dd86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dd80:	f04f 33ff 	mov.w	r3, #4294967295
 800dd84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dd86:	69bb      	ldr	r3, [r7, #24]
	}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3720      	adds	r7, #32
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b088      	sub	sp, #32
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	607a      	str	r2, [r7, #4]
 800dd9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	461a      	mov	r2, r3
 800dda8:	21a5      	movs	r1, #165	; 0xa5
 800ddaa:	f002 fdd9 	bl	8010960 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ddae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	4413      	add	r3, r2
 800ddbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	f023 0307 	bic.w	r3, r3, #7
 800ddc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	f003 0307 	and.w	r3, r3, #7
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00a      	beq.n	800dde8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ddd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd6:	f383 8811 	msr	BASEPRI, r3
 800ddda:	f3bf 8f6f 	isb	sy
 800ddde:	f3bf 8f4f 	dsb	sy
 800dde2:	617b      	str	r3, [r7, #20]
}
 800dde4:	bf00      	nop
 800dde6:	e7fe      	b.n	800dde6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d01f      	beq.n	800de2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ddee:	2300      	movs	r3, #0
 800ddf0:	61fb      	str	r3, [r7, #28]
 800ddf2:	e012      	b.n	800de1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ddf4:	68ba      	ldr	r2, [r7, #8]
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	4413      	add	r3, r2
 800ddfa:	7819      	ldrb	r1, [r3, #0]
 800ddfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	4413      	add	r3, r2
 800de02:	3334      	adds	r3, #52	; 0x34
 800de04:	460a      	mov	r2, r1
 800de06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800de08:	68ba      	ldr	r2, [r7, #8]
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	4413      	add	r3, r2
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d006      	beq.n	800de22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	3301      	adds	r3, #1
 800de18:	61fb      	str	r3, [r7, #28]
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	2b0f      	cmp	r3, #15
 800de1e:	d9e9      	bls.n	800ddf4 <prvInitialiseNewTask+0x64>
 800de20:	e000      	b.n	800de24 <prvInitialiseNewTask+0x94>
			{
				break;
 800de22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800de24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de26:	2200      	movs	r2, #0
 800de28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800de2c:	e003      	b.n	800de36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800de2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de30:	2200      	movs	r2, #0
 800de32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de38:	2b37      	cmp	r3, #55	; 0x37
 800de3a:	d901      	bls.n	800de40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de3c:	2337      	movs	r3, #55	; 0x37
 800de3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800de40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800de46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800de4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4e:	2200      	movs	r2, #0
 800de50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	3304      	adds	r3, #4
 800de56:	4618      	mov	r0, r3
 800de58:	f7ff f8be 	bl	800cfd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800de5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5e:	3318      	adds	r3, #24
 800de60:	4618      	mov	r0, r3
 800de62:	f7ff f8b9 	bl	800cfd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800de76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800de7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7e:	2200      	movs	r2, #0
 800de80:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800de82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de84:	2200      	movs	r2, #0
 800de86:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de8c:	2200      	movs	r2, #0
 800de8e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800de92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de94:	3358      	adds	r3, #88	; 0x58
 800de96:	2260      	movs	r2, #96	; 0x60
 800de98:	2100      	movs	r1, #0
 800de9a:	4618      	mov	r0, r3
 800de9c:	f002 fd60 	bl	8010960 <memset>
 800dea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea2:	4a0d      	ldr	r2, [pc, #52]	; (800ded8 <prvInitialiseNewTask+0x148>)
 800dea4:	65da      	str	r2, [r3, #92]	; 0x5c
 800dea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea8:	4a0c      	ldr	r2, [pc, #48]	; (800dedc <prvInitialiseNewTask+0x14c>)
 800deaa:	661a      	str	r2, [r3, #96]	; 0x60
 800deac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deae:	4a0c      	ldr	r2, [pc, #48]	; (800dee0 <prvInitialiseNewTask+0x150>)
 800deb0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800deb2:	683a      	ldr	r2, [r7, #0]
 800deb4:	68f9      	ldr	r1, [r7, #12]
 800deb6:	69b8      	ldr	r0, [r7, #24]
 800deb8:	f001 fbe8 	bl	800f68c <pxPortInitialiseStack>
 800debc:	4602      	mov	r2, r0
 800debe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800decc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dece:	bf00      	nop
 800ded0:	3720      	adds	r7, #32
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	080138f8 	.word	0x080138f8
 800dedc:	08013918 	.word	0x08013918
 800dee0:	080138d8 	.word	0x080138d8

0800dee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800deec:	f001 fcfa 	bl	800f8e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800def0:	4b2d      	ldr	r3, [pc, #180]	; (800dfa8 <prvAddNewTaskToReadyList+0xc4>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	3301      	adds	r3, #1
 800def6:	4a2c      	ldr	r2, [pc, #176]	; (800dfa8 <prvAddNewTaskToReadyList+0xc4>)
 800def8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800defa:	4b2c      	ldr	r3, [pc, #176]	; (800dfac <prvAddNewTaskToReadyList+0xc8>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d109      	bne.n	800df16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800df02:	4a2a      	ldr	r2, [pc, #168]	; (800dfac <prvAddNewTaskToReadyList+0xc8>)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df08:	4b27      	ldr	r3, [pc, #156]	; (800dfa8 <prvAddNewTaskToReadyList+0xc4>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d110      	bne.n	800df32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800df10:	f000 fd3c 	bl	800e98c <prvInitialiseTaskLists>
 800df14:	e00d      	b.n	800df32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800df16:	4b26      	ldr	r3, [pc, #152]	; (800dfb0 <prvAddNewTaskToReadyList+0xcc>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d109      	bne.n	800df32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df1e:	4b23      	ldr	r3, [pc, #140]	; (800dfac <prvAddNewTaskToReadyList+0xc8>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df28:	429a      	cmp	r2, r3
 800df2a:	d802      	bhi.n	800df32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800df2c:	4a1f      	ldr	r2, [pc, #124]	; (800dfac <prvAddNewTaskToReadyList+0xc8>)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800df32:	4b20      	ldr	r3, [pc, #128]	; (800dfb4 <prvAddNewTaskToReadyList+0xd0>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	3301      	adds	r3, #1
 800df38:	4a1e      	ldr	r2, [pc, #120]	; (800dfb4 <prvAddNewTaskToReadyList+0xd0>)
 800df3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800df3c:	4b1d      	ldr	r3, [pc, #116]	; (800dfb4 <prvAddNewTaskToReadyList+0xd0>)
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df48:	4b1b      	ldr	r3, [pc, #108]	; (800dfb8 <prvAddNewTaskToReadyList+0xd4>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d903      	bls.n	800df58 <prvAddNewTaskToReadyList+0x74>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df54:	4a18      	ldr	r2, [pc, #96]	; (800dfb8 <prvAddNewTaskToReadyList+0xd4>)
 800df56:	6013      	str	r3, [r2, #0]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df5c:	4613      	mov	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	4413      	add	r3, r2
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	4a15      	ldr	r2, [pc, #84]	; (800dfbc <prvAddNewTaskToReadyList+0xd8>)
 800df66:	441a      	add	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3304      	adds	r3, #4
 800df6c:	4619      	mov	r1, r3
 800df6e:	4610      	mov	r0, r2
 800df70:	f7ff f83f 	bl	800cff2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800df74:	f001 fce6 	bl	800f944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800df78:	4b0d      	ldr	r3, [pc, #52]	; (800dfb0 <prvAddNewTaskToReadyList+0xcc>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00e      	beq.n	800df9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800df80:	4b0a      	ldr	r3, [pc, #40]	; (800dfac <prvAddNewTaskToReadyList+0xc8>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d207      	bcs.n	800df9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df8e:	4b0c      	ldr	r3, [pc, #48]	; (800dfc0 <prvAddNewTaskToReadyList+0xdc>)
 800df90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df94:	601a      	str	r2, [r3, #0]
 800df96:	f3bf 8f4f 	dsb	sy
 800df9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df9e:	bf00      	nop
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	200021bc 	.word	0x200021bc
 800dfac:	20001ce8 	.word	0x20001ce8
 800dfb0:	200021c8 	.word	0x200021c8
 800dfb4:	200021d8 	.word	0x200021d8
 800dfb8:	200021c4 	.word	0x200021c4
 800dfbc:	20001cec 	.word	0x20001cec
 800dfc0:	e000ed04 	.word	0xe000ed04

0800dfc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d017      	beq.n	800e006 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dfd6:	4b13      	ldr	r3, [pc, #76]	; (800e024 <vTaskDelay+0x60>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00a      	beq.n	800dff4 <vTaskDelay+0x30>
	__asm volatile
 800dfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe2:	f383 8811 	msr	BASEPRI, r3
 800dfe6:	f3bf 8f6f 	isb	sy
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	60bb      	str	r3, [r7, #8]
}
 800dff0:	bf00      	nop
 800dff2:	e7fe      	b.n	800dff2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dff4:	f000 f8f2 	bl	800e1dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dff8:	2100      	movs	r1, #0
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 ffa4 	bl	800ef48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e000:	f000 f8fa 	bl	800e1f8 <xTaskResumeAll>
 800e004:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d107      	bne.n	800e01c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e00c:	4b06      	ldr	r3, [pc, #24]	; (800e028 <vTaskDelay+0x64>)
 800e00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e012:	601a      	str	r2, [r3, #0]
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e01c:	bf00      	nop
 800e01e:	3710      	adds	r7, #16
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	200021e4 	.word	0x200021e4
 800e028:	e000ed04 	.word	0xe000ed04

0800e02c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b088      	sub	sp, #32
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800e038:	69bb      	ldr	r3, [r7, #24]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d10a      	bne.n	800e054 <eTaskGetState+0x28>
	__asm volatile
 800e03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e042:	f383 8811 	msr	BASEPRI, r3
 800e046:	f3bf 8f6f 	isb	sy
 800e04a:	f3bf 8f4f 	dsb	sy
 800e04e:	60bb      	str	r3, [r7, #8]
}
 800e050:	bf00      	nop
 800e052:	e7fe      	b.n	800e052 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800e054:	4b23      	ldr	r3, [pc, #140]	; (800e0e4 <eTaskGetState+0xb8>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	69ba      	ldr	r2, [r7, #24]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d102      	bne.n	800e064 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800e05e:	2300      	movs	r3, #0
 800e060:	77fb      	strb	r3, [r7, #31]
 800e062:	e03a      	b.n	800e0da <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800e064:	f001 fc3e 	bl	800f8e4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	695b      	ldr	r3, [r3, #20]
 800e06c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800e06e:	4b1e      	ldr	r3, [pc, #120]	; (800e0e8 <eTaskGetState+0xbc>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800e074:	4b1d      	ldr	r3, [pc, #116]	; (800e0ec <eTaskGetState+0xc0>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800e07a:	f001 fc63 	bl	800f944 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800e07e:	697a      	ldr	r2, [r7, #20]
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	429a      	cmp	r2, r3
 800e084:	d003      	beq.n	800e08e <eTaskGetState+0x62>
 800e086:	697a      	ldr	r2, [r7, #20]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d102      	bne.n	800e094 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800e08e:	2302      	movs	r3, #2
 800e090:	77fb      	strb	r3, [r7, #31]
 800e092:	e022      	b.n	800e0da <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	4a16      	ldr	r2, [pc, #88]	; (800e0f0 <eTaskGetState+0xc4>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d112      	bne.n	800e0c2 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10b      	bne.n	800e0bc <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d102      	bne.n	800e0b6 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800e0b0:	2302      	movs	r3, #2
 800e0b2:	77fb      	strb	r3, [r7, #31]
 800e0b4:	e011      	b.n	800e0da <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	77fb      	strb	r3, [r7, #31]
 800e0ba:	e00e      	b.n	800e0da <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800e0bc:	2302      	movs	r3, #2
 800e0be:	77fb      	strb	r3, [r7, #31]
 800e0c0:	e00b      	b.n	800e0da <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	4a0b      	ldr	r2, [pc, #44]	; (800e0f4 <eTaskGetState+0xc8>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d002      	beq.n	800e0d0 <eTaskGetState+0xa4>
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d102      	bne.n	800e0d6 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800e0d0:	2304      	movs	r3, #4
 800e0d2:	77fb      	strb	r3, [r7, #31]
 800e0d4:	e001      	b.n	800e0da <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800e0da:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3720      	adds	r7, #32
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	20001ce8 	.word	0x20001ce8
 800e0e8:	20002174 	.word	0x20002174
 800e0ec:	20002178 	.word	0x20002178
 800e0f0:	200021a8 	.word	0x200021a8
 800e0f4:	20002190 	.word	0x20002190

0800e0f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b08a      	sub	sp, #40	; 0x28
 800e0fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e0fe:	2300      	movs	r3, #0
 800e100:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e102:	2300      	movs	r3, #0
 800e104:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e106:	463a      	mov	r2, r7
 800e108:	1d39      	adds	r1, r7, #4
 800e10a:	f107 0308 	add.w	r3, r7, #8
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fe ff0e 	bl	800cf30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e114:	6839      	ldr	r1, [r7, #0]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	9202      	str	r2, [sp, #8]
 800e11c:	9301      	str	r3, [sp, #4]
 800e11e:	2300      	movs	r3, #0
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	2300      	movs	r3, #0
 800e124:	460a      	mov	r2, r1
 800e126:	4925      	ldr	r1, [pc, #148]	; (800e1bc <vTaskStartScheduler+0xc4>)
 800e128:	4825      	ldr	r0, [pc, #148]	; (800e1c0 <vTaskStartScheduler+0xc8>)
 800e12a:	f7ff fd8f 	bl	800dc4c <xTaskCreateStatic>
 800e12e:	4603      	mov	r3, r0
 800e130:	4a24      	ldr	r2, [pc, #144]	; (800e1c4 <vTaskStartScheduler+0xcc>)
 800e132:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e134:	4b23      	ldr	r3, [pc, #140]	; (800e1c4 <vTaskStartScheduler+0xcc>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d002      	beq.n	800e142 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e13c:	2301      	movs	r3, #1
 800e13e:	617b      	str	r3, [r7, #20]
 800e140:	e001      	b.n	800e146 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e142:	2300      	movs	r3, #0
 800e144:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d102      	bne.n	800e152 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e14c:	f000 ff50 	bl	800eff0 <xTimerCreateTimerTask>
 800e150:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	2b01      	cmp	r3, #1
 800e156:	d11d      	bne.n	800e194 <vTaskStartScheduler+0x9c>
	__asm volatile
 800e158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15c:	f383 8811 	msr	BASEPRI, r3
 800e160:	f3bf 8f6f 	isb	sy
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	613b      	str	r3, [r7, #16]
}
 800e16a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e16c:	4b16      	ldr	r3, [pc, #88]	; (800e1c8 <vTaskStartScheduler+0xd0>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	3358      	adds	r3, #88	; 0x58
 800e172:	4a16      	ldr	r2, [pc, #88]	; (800e1cc <vTaskStartScheduler+0xd4>)
 800e174:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e176:	4b16      	ldr	r3, [pc, #88]	; (800e1d0 <vTaskStartScheduler+0xd8>)
 800e178:	f04f 32ff 	mov.w	r2, #4294967295
 800e17c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e17e:	4b15      	ldr	r3, [pc, #84]	; (800e1d4 <vTaskStartScheduler+0xdc>)
 800e180:	2201      	movs	r2, #1
 800e182:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e184:	4b14      	ldr	r3, [pc, #80]	; (800e1d8 <vTaskStartScheduler+0xe0>)
 800e186:	2200      	movs	r2, #0
 800e188:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e18a:	f7f3 fab7 	bl	80016fc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e18e:	f001 fb07 	bl	800f7a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e192:	e00e      	b.n	800e1b2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19a:	d10a      	bne.n	800e1b2 <vTaskStartScheduler+0xba>
	__asm volatile
 800e19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a0:	f383 8811 	msr	BASEPRI, r3
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	60fb      	str	r3, [r7, #12]
}
 800e1ae:	bf00      	nop
 800e1b0:	e7fe      	b.n	800e1b0 <vTaskStartScheduler+0xb8>
}
 800e1b2:	bf00      	nop
 800e1b4:	3718      	adds	r7, #24
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	08011674 	.word	0x08011674
 800e1c0:	0800e959 	.word	0x0800e959
 800e1c4:	200021e0 	.word	0x200021e0
 800e1c8:	20001ce8 	.word	0x20001ce8
 800e1cc:	2000018c 	.word	0x2000018c
 800e1d0:	200021dc 	.word	0x200021dc
 800e1d4:	200021c8 	.word	0x200021c8
 800e1d8:	200021c0 	.word	0x200021c0

0800e1dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e1dc:	b480      	push	{r7}
 800e1de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e1e0:	4b04      	ldr	r3, [pc, #16]	; (800e1f4 <vTaskSuspendAll+0x18>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	4a03      	ldr	r2, [pc, #12]	; (800e1f4 <vTaskSuspendAll+0x18>)
 800e1e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e1ea:	bf00      	nop
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr
 800e1f4:	200021e4 	.word	0x200021e4

0800e1f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e1fe:	2300      	movs	r3, #0
 800e200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e202:	2300      	movs	r3, #0
 800e204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e206:	4b42      	ldr	r3, [pc, #264]	; (800e310 <xTaskResumeAll+0x118>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10a      	bne.n	800e224 <xTaskResumeAll+0x2c>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	603b      	str	r3, [r7, #0]
}
 800e220:	bf00      	nop
 800e222:	e7fe      	b.n	800e222 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e224:	f001 fb5e 	bl	800f8e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e228:	4b39      	ldr	r3, [pc, #228]	; (800e310 <xTaskResumeAll+0x118>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	3b01      	subs	r3, #1
 800e22e:	4a38      	ldr	r2, [pc, #224]	; (800e310 <xTaskResumeAll+0x118>)
 800e230:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e232:	4b37      	ldr	r3, [pc, #220]	; (800e310 <xTaskResumeAll+0x118>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d162      	bne.n	800e300 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e23a:	4b36      	ldr	r3, [pc, #216]	; (800e314 <xTaskResumeAll+0x11c>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d05e      	beq.n	800e300 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e242:	e02f      	b.n	800e2a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e244:	4b34      	ldr	r3, [pc, #208]	; (800e318 <xTaskResumeAll+0x120>)
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	68db      	ldr	r3, [r3, #12]
 800e24a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	3318      	adds	r3, #24
 800e250:	4618      	mov	r0, r3
 800e252:	f7fe ff2b 	bl	800d0ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	3304      	adds	r3, #4
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe ff26 	bl	800d0ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e264:	4b2d      	ldr	r3, [pc, #180]	; (800e31c <xTaskResumeAll+0x124>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d903      	bls.n	800e274 <xTaskResumeAll+0x7c>
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e270:	4a2a      	ldr	r2, [pc, #168]	; (800e31c <xTaskResumeAll+0x124>)
 800e272:	6013      	str	r3, [r2, #0]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e278:	4613      	mov	r3, r2
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	4413      	add	r3, r2
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	4a27      	ldr	r2, [pc, #156]	; (800e320 <xTaskResumeAll+0x128>)
 800e282:	441a      	add	r2, r3
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	3304      	adds	r3, #4
 800e288:	4619      	mov	r1, r3
 800e28a:	4610      	mov	r0, r2
 800e28c:	f7fe feb1 	bl	800cff2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e294:	4b23      	ldr	r3, [pc, #140]	; (800e324 <xTaskResumeAll+0x12c>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d302      	bcc.n	800e2a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e29e:	4b22      	ldr	r3, [pc, #136]	; (800e328 <xTaskResumeAll+0x130>)
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2a4:	4b1c      	ldr	r3, [pc, #112]	; (800e318 <xTaskResumeAll+0x120>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d1cb      	bne.n	800e244 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e2b2:	f000 fce1 	bl	800ec78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e2b6:	4b1d      	ldr	r3, [pc, #116]	; (800e32c <xTaskResumeAll+0x134>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d010      	beq.n	800e2e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e2c2:	f000 f8d7 	bl	800e474 <xTaskIncrementTick>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d002      	beq.n	800e2d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e2cc:	4b16      	ldr	r3, [pc, #88]	; (800e328 <xTaskResumeAll+0x130>)
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	3b01      	subs	r3, #1
 800e2d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1f1      	bne.n	800e2c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e2de:	4b13      	ldr	r3, [pc, #76]	; (800e32c <xTaskResumeAll+0x134>)
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e2e4:	4b10      	ldr	r3, [pc, #64]	; (800e328 <xTaskResumeAll+0x130>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d009      	beq.n	800e300 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e2f0:	4b0f      	ldr	r3, [pc, #60]	; (800e330 <xTaskResumeAll+0x138>)
 800e2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2f6:	601a      	str	r2, [r3, #0]
 800e2f8:	f3bf 8f4f 	dsb	sy
 800e2fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e300:	f001 fb20 	bl	800f944 <vPortExitCritical>

	return xAlreadyYielded;
 800e304:	68bb      	ldr	r3, [r7, #8]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	200021e4 	.word	0x200021e4
 800e314:	200021bc 	.word	0x200021bc
 800e318:	2000217c 	.word	0x2000217c
 800e31c:	200021c4 	.word	0x200021c4
 800e320:	20001cec 	.word	0x20001cec
 800e324:	20001ce8 	.word	0x20001ce8
 800e328:	200021d0 	.word	0x200021d0
 800e32c:	200021cc 	.word	0x200021cc
 800e330:	e000ed04 	.word	0xe000ed04

0800e334 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e33a:	4b05      	ldr	r3, [pc, #20]	; (800e350 <xTaskGetTickCount+0x1c>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e340:	687b      	ldr	r3, [r7, #4]
}
 800e342:	4618      	mov	r0, r3
 800e344:	370c      	adds	r7, #12
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	200021c0 	.word	0x200021c0

0800e354 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e360:	2300      	movs	r3, #0
 800e362:	617b      	str	r3, [r7, #20]
 800e364:	2338      	movs	r3, #56	; 0x38
 800e366:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800e368:	f7ff ff38 	bl	800e1dc <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e36c:	4b3b      	ldr	r3, [pc, #236]	; (800e45c <uxTaskGetSystemState+0x108>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	68ba      	ldr	r2, [r7, #8]
 800e372:	429a      	cmp	r2, r3
 800e374:	d36a      	bcc.n	800e44c <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	3b01      	subs	r3, #1
 800e37a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e37c:	697a      	ldr	r2, [r7, #20]
 800e37e:	4613      	mov	r3, r2
 800e380:	00db      	lsls	r3, r3, #3
 800e382:	4413      	add	r3, r2
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	461a      	mov	r2, r3
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	1898      	adds	r0, r3, r2
 800e38c:	693a      	ldr	r2, [r7, #16]
 800e38e:	4613      	mov	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	4413      	add	r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	4a32      	ldr	r2, [pc, #200]	; (800e460 <uxTaskGetSystemState+0x10c>)
 800e398:	4413      	add	r3, r2
 800e39a:	2201      	movs	r2, #1
 800e39c:	4619      	mov	r1, r3
 800e39e:	f000 fbc9 	bl	800eb34 <prvListTasksWithinSingleList>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	4413      	add	r3, r2
 800e3a8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1e2      	bne.n	800e376 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e3b0:	697a      	ldr	r2, [r7, #20]
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	00db      	lsls	r3, r3, #3
 800e3b6:	4413      	add	r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	4413      	add	r3, r2
 800e3c0:	4a28      	ldr	r2, [pc, #160]	; (800e464 <uxTaskGetSystemState+0x110>)
 800e3c2:	6811      	ldr	r1, [r2, #0]
 800e3c4:	2202      	movs	r2, #2
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f000 fbb4 	bl	800eb34 <prvListTasksWithinSingleList>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e3d4:	697a      	ldr	r2, [r7, #20]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	00db      	lsls	r3, r3, #3
 800e3da:	4413      	add	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	461a      	mov	r2, r3
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	4413      	add	r3, r2
 800e3e4:	4a20      	ldr	r2, [pc, #128]	; (800e468 <uxTaskGetSystemState+0x114>)
 800e3e6:	6811      	ldr	r1, [r2, #0]
 800e3e8:	2202      	movs	r2, #2
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f000 fba2 	bl	800eb34 <prvListTasksWithinSingleList>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800e3f8:	697a      	ldr	r2, [r7, #20]
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	00db      	lsls	r3, r3, #3
 800e3fe:	4413      	add	r3, r2
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	461a      	mov	r2, r3
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	4413      	add	r3, r2
 800e408:	2204      	movs	r2, #4
 800e40a:	4918      	ldr	r1, [pc, #96]	; (800e46c <uxTaskGetSystemState+0x118>)
 800e40c:	4618      	mov	r0, r3
 800e40e:	f000 fb91 	bl	800eb34 <prvListTasksWithinSingleList>
 800e412:	4602      	mov	r2, r0
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	4413      	add	r3, r2
 800e418:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e41a:	697a      	ldr	r2, [r7, #20]
 800e41c:	4613      	mov	r3, r2
 800e41e:	00db      	lsls	r3, r3, #3
 800e420:	4413      	add	r3, r2
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	461a      	mov	r2, r3
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	4413      	add	r3, r2
 800e42a:	2203      	movs	r2, #3
 800e42c:	4910      	ldr	r1, [pc, #64]	; (800e470 <uxTaskGetSystemState+0x11c>)
 800e42e:	4618      	mov	r0, r3
 800e430:	f000 fb80 	bl	800eb34 <prvListTasksWithinSingleList>
 800e434:	4602      	mov	r2, r0
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	4413      	add	r3, r2
 800e43a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d004      	beq.n	800e44c <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e442:	f7f3 f963 	bl	800170c <getRunTimeCounterValue>
 800e446:	4602      	mov	r2, r0
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800e44c:	f7ff fed4 	bl	800e1f8 <xTaskResumeAll>

		return uxTask;
 800e450:	697b      	ldr	r3, [r7, #20]
	}
 800e452:	4618      	mov	r0, r3
 800e454:	3718      	adds	r7, #24
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	200021bc 	.word	0x200021bc
 800e460:	20001cec 	.word	0x20001cec
 800e464:	20002174 	.word	0x20002174
 800e468:	20002178 	.word	0x20002178
 800e46c:	20002190 	.word	0x20002190
 800e470:	200021a8 	.word	0x200021a8

0800e474 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e47a:	2300      	movs	r3, #0
 800e47c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e47e:	4b4f      	ldr	r3, [pc, #316]	; (800e5bc <xTaskIncrementTick+0x148>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	f040 808f 	bne.w	800e5a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e488:	4b4d      	ldr	r3, [pc, #308]	; (800e5c0 <xTaskIncrementTick+0x14c>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	3301      	adds	r3, #1
 800e48e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e490:	4a4b      	ldr	r2, [pc, #300]	; (800e5c0 <xTaskIncrementTick+0x14c>)
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d120      	bne.n	800e4de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e49c:	4b49      	ldr	r3, [pc, #292]	; (800e5c4 <xTaskIncrementTick+0x150>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00a      	beq.n	800e4bc <xTaskIncrementTick+0x48>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4aa:	f383 8811 	msr	BASEPRI, r3
 800e4ae:	f3bf 8f6f 	isb	sy
 800e4b2:	f3bf 8f4f 	dsb	sy
 800e4b6:	603b      	str	r3, [r7, #0]
}
 800e4b8:	bf00      	nop
 800e4ba:	e7fe      	b.n	800e4ba <xTaskIncrementTick+0x46>
 800e4bc:	4b41      	ldr	r3, [pc, #260]	; (800e5c4 <xTaskIncrementTick+0x150>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	60fb      	str	r3, [r7, #12]
 800e4c2:	4b41      	ldr	r3, [pc, #260]	; (800e5c8 <xTaskIncrementTick+0x154>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	4a3f      	ldr	r2, [pc, #252]	; (800e5c4 <xTaskIncrementTick+0x150>)
 800e4c8:	6013      	str	r3, [r2, #0]
 800e4ca:	4a3f      	ldr	r2, [pc, #252]	; (800e5c8 <xTaskIncrementTick+0x154>)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6013      	str	r3, [r2, #0]
 800e4d0:	4b3e      	ldr	r3, [pc, #248]	; (800e5cc <xTaskIncrementTick+0x158>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	4a3d      	ldr	r2, [pc, #244]	; (800e5cc <xTaskIncrementTick+0x158>)
 800e4d8:	6013      	str	r3, [r2, #0]
 800e4da:	f000 fbcd 	bl	800ec78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e4de:	4b3c      	ldr	r3, [pc, #240]	; (800e5d0 <xTaskIncrementTick+0x15c>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	693a      	ldr	r2, [r7, #16]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d349      	bcc.n	800e57c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4e8:	4b36      	ldr	r3, [pc, #216]	; (800e5c4 <xTaskIncrementTick+0x150>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d104      	bne.n	800e4fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4f2:	4b37      	ldr	r3, [pc, #220]	; (800e5d0 <xTaskIncrementTick+0x15c>)
 800e4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f8:	601a      	str	r2, [r3, #0]
					break;
 800e4fa:	e03f      	b.n	800e57c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4fc:	4b31      	ldr	r3, [pc, #196]	; (800e5c4 <xTaskIncrementTick+0x150>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e50c:	693a      	ldr	r2, [r7, #16]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	429a      	cmp	r2, r3
 800e512:	d203      	bcs.n	800e51c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e514:	4a2e      	ldr	r2, [pc, #184]	; (800e5d0 <xTaskIncrementTick+0x15c>)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e51a:	e02f      	b.n	800e57c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	3304      	adds	r3, #4
 800e520:	4618      	mov	r0, r3
 800e522:	f7fe fdc3 	bl	800d0ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d004      	beq.n	800e538 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	3318      	adds	r3, #24
 800e532:	4618      	mov	r0, r3
 800e534:	f7fe fdba 	bl	800d0ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e53c:	4b25      	ldr	r3, [pc, #148]	; (800e5d4 <xTaskIncrementTick+0x160>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	429a      	cmp	r2, r3
 800e542:	d903      	bls.n	800e54c <xTaskIncrementTick+0xd8>
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e548:	4a22      	ldr	r2, [pc, #136]	; (800e5d4 <xTaskIncrementTick+0x160>)
 800e54a:	6013      	str	r3, [r2, #0]
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e550:	4613      	mov	r3, r2
 800e552:	009b      	lsls	r3, r3, #2
 800e554:	4413      	add	r3, r2
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	4a1f      	ldr	r2, [pc, #124]	; (800e5d8 <xTaskIncrementTick+0x164>)
 800e55a:	441a      	add	r2, r3
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	3304      	adds	r3, #4
 800e560:	4619      	mov	r1, r3
 800e562:	4610      	mov	r0, r2
 800e564:	f7fe fd45 	bl	800cff2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e56c:	4b1b      	ldr	r3, [pc, #108]	; (800e5dc <xTaskIncrementTick+0x168>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e572:	429a      	cmp	r2, r3
 800e574:	d3b8      	bcc.n	800e4e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e576:	2301      	movs	r3, #1
 800e578:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e57a:	e7b5      	b.n	800e4e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e57c:	4b17      	ldr	r3, [pc, #92]	; (800e5dc <xTaskIncrementTick+0x168>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e582:	4915      	ldr	r1, [pc, #84]	; (800e5d8 <xTaskIncrementTick+0x164>)
 800e584:	4613      	mov	r3, r2
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	4413      	add	r3, r2
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	440b      	add	r3, r1
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2b01      	cmp	r3, #1
 800e592:	d901      	bls.n	800e598 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e594:	2301      	movs	r3, #1
 800e596:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e598:	4b11      	ldr	r3, [pc, #68]	; (800e5e0 <xTaskIncrementTick+0x16c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d007      	beq.n	800e5b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	617b      	str	r3, [r7, #20]
 800e5a4:	e004      	b.n	800e5b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e5a6:	4b0f      	ldr	r3, [pc, #60]	; (800e5e4 <xTaskIncrementTick+0x170>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	4a0d      	ldr	r2, [pc, #52]	; (800e5e4 <xTaskIncrementTick+0x170>)
 800e5ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e5b0:	697b      	ldr	r3, [r7, #20]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3718      	adds	r7, #24
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	200021e4 	.word	0x200021e4
 800e5c0:	200021c0 	.word	0x200021c0
 800e5c4:	20002174 	.word	0x20002174
 800e5c8:	20002178 	.word	0x20002178
 800e5cc:	200021d4 	.word	0x200021d4
 800e5d0:	200021dc 	.word	0x200021dc
 800e5d4:	200021c4 	.word	0x200021c4
 800e5d8:	20001cec 	.word	0x20001cec
 800e5dc:	20001ce8 	.word	0x20001ce8
 800e5e0:	200021d0 	.word	0x200021d0
 800e5e4:	200021cc 	.word	0x200021cc

0800e5e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e5ee:	4b36      	ldr	r3, [pc, #216]	; (800e6c8 <vTaskSwitchContext+0xe0>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d003      	beq.n	800e5fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e5f6:	4b35      	ldr	r3, [pc, #212]	; (800e6cc <vTaskSwitchContext+0xe4>)
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e5fc:	e05f      	b.n	800e6be <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800e5fe:	4b33      	ldr	r3, [pc, #204]	; (800e6cc <vTaskSwitchContext+0xe4>)
 800e600:	2200      	movs	r2, #0
 800e602:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e604:	f7f3 f882 	bl	800170c <getRunTimeCounterValue>
 800e608:	4603      	mov	r3, r0
 800e60a:	4a31      	ldr	r2, [pc, #196]	; (800e6d0 <vTaskSwitchContext+0xe8>)
 800e60c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e60e:	4b30      	ldr	r3, [pc, #192]	; (800e6d0 <vTaskSwitchContext+0xe8>)
 800e610:	681a      	ldr	r2, [r3, #0]
 800e612:	4b30      	ldr	r3, [pc, #192]	; (800e6d4 <vTaskSwitchContext+0xec>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	429a      	cmp	r2, r3
 800e618:	d909      	bls.n	800e62e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e61a:	4b2f      	ldr	r3, [pc, #188]	; (800e6d8 <vTaskSwitchContext+0xf0>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e620:	4a2b      	ldr	r2, [pc, #172]	; (800e6d0 <vTaskSwitchContext+0xe8>)
 800e622:	6810      	ldr	r0, [r2, #0]
 800e624:	4a2b      	ldr	r2, [pc, #172]	; (800e6d4 <vTaskSwitchContext+0xec>)
 800e626:	6812      	ldr	r2, [r2, #0]
 800e628:	1a82      	subs	r2, r0, r2
 800e62a:	440a      	add	r2, r1
 800e62c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e62e:	4b28      	ldr	r3, [pc, #160]	; (800e6d0 <vTaskSwitchContext+0xe8>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4a28      	ldr	r2, [pc, #160]	; (800e6d4 <vTaskSwitchContext+0xec>)
 800e634:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e636:	4b29      	ldr	r3, [pc, #164]	; (800e6dc <vTaskSwitchContext+0xf4>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	60fb      	str	r3, [r7, #12]
 800e63c:	e010      	b.n	800e660 <vTaskSwitchContext+0x78>
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10a      	bne.n	800e65a <vTaskSwitchContext+0x72>
	__asm volatile
 800e644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e648:	f383 8811 	msr	BASEPRI, r3
 800e64c:	f3bf 8f6f 	isb	sy
 800e650:	f3bf 8f4f 	dsb	sy
 800e654:	607b      	str	r3, [r7, #4]
}
 800e656:	bf00      	nop
 800e658:	e7fe      	b.n	800e658 <vTaskSwitchContext+0x70>
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	60fb      	str	r3, [r7, #12]
 800e660:	491f      	ldr	r1, [pc, #124]	; (800e6e0 <vTaskSwitchContext+0xf8>)
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	4613      	mov	r3, r2
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	4413      	add	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	440b      	add	r3, r1
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d0e4      	beq.n	800e63e <vTaskSwitchContext+0x56>
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	4613      	mov	r3, r2
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	4413      	add	r3, r2
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	4a18      	ldr	r2, [pc, #96]	; (800e6e0 <vTaskSwitchContext+0xf8>)
 800e680:	4413      	add	r3, r2
 800e682:	60bb      	str	r3, [r7, #8]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	685a      	ldr	r2, [r3, #4]
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	605a      	str	r2, [r3, #4]
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	685a      	ldr	r2, [r3, #4]
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	3308      	adds	r3, #8
 800e696:	429a      	cmp	r2, r3
 800e698:	d104      	bne.n	800e6a4 <vTaskSwitchContext+0xbc>
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	685a      	ldr	r2, [r3, #4]
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	605a      	str	r2, [r3, #4]
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	68db      	ldr	r3, [r3, #12]
 800e6aa:	4a0b      	ldr	r2, [pc, #44]	; (800e6d8 <vTaskSwitchContext+0xf0>)
 800e6ac:	6013      	str	r3, [r2, #0]
 800e6ae:	4a0b      	ldr	r2, [pc, #44]	; (800e6dc <vTaskSwitchContext+0xf4>)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e6b4:	4b08      	ldr	r3, [pc, #32]	; (800e6d8 <vTaskSwitchContext+0xf0>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	3358      	adds	r3, #88	; 0x58
 800e6ba:	4a0a      	ldr	r2, [pc, #40]	; (800e6e4 <vTaskSwitchContext+0xfc>)
 800e6bc:	6013      	str	r3, [r2, #0]
}
 800e6be:	bf00      	nop
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	200021e4 	.word	0x200021e4
 800e6cc:	200021d0 	.word	0x200021d0
 800e6d0:	200021ec 	.word	0x200021ec
 800e6d4:	200021e8 	.word	0x200021e8
 800e6d8:	20001ce8 	.word	0x20001ce8
 800e6dc:	200021c4 	.word	0x200021c4
 800e6e0:	20001cec 	.word	0x20001cec
 800e6e4:	2000018c 	.word	0x2000018c

0800e6e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d10a      	bne.n	800e70e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fc:	f383 8811 	msr	BASEPRI, r3
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	60fb      	str	r3, [r7, #12]
}
 800e70a:	bf00      	nop
 800e70c:	e7fe      	b.n	800e70c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e70e:	4b07      	ldr	r3, [pc, #28]	; (800e72c <vTaskPlaceOnEventList+0x44>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	3318      	adds	r3, #24
 800e714:	4619      	mov	r1, r3
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f7fe fc8f 	bl	800d03a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e71c:	2101      	movs	r1, #1
 800e71e:	6838      	ldr	r0, [r7, #0]
 800e720:	f000 fc12 	bl	800ef48 <prvAddCurrentTaskToDelayedList>
}
 800e724:	bf00      	nop
 800e726:	3710      	adds	r7, #16
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	20001ce8 	.word	0x20001ce8

0800e730 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e730:	b580      	push	{r7, lr}
 800e732:	b086      	sub	sp, #24
 800e734:	af00      	add	r7, sp, #0
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d10a      	bne.n	800e758 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e746:	f383 8811 	msr	BASEPRI, r3
 800e74a:	f3bf 8f6f 	isb	sy
 800e74e:	f3bf 8f4f 	dsb	sy
 800e752:	617b      	str	r3, [r7, #20]
}
 800e754:	bf00      	nop
 800e756:	e7fe      	b.n	800e756 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e758:	4b0a      	ldr	r3, [pc, #40]	; (800e784 <vTaskPlaceOnEventListRestricted+0x54>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	3318      	adds	r3, #24
 800e75e:	4619      	mov	r1, r3
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	f7fe fc46 	bl	800cff2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d002      	beq.n	800e772 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e76c:	f04f 33ff 	mov.w	r3, #4294967295
 800e770:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e772:	6879      	ldr	r1, [r7, #4]
 800e774:	68b8      	ldr	r0, [r7, #8]
 800e776:	f000 fbe7 	bl	800ef48 <prvAddCurrentTaskToDelayedList>
	}
 800e77a:	bf00      	nop
 800e77c:	3718      	adds	r7, #24
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	20001ce8 	.word	0x20001ce8

0800e788 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b086      	sub	sp, #24
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d10a      	bne.n	800e7b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	60fb      	str	r3, [r7, #12]
}
 800e7b0:	bf00      	nop
 800e7b2:	e7fe      	b.n	800e7b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	3318      	adds	r3, #24
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7fe fc77 	bl	800d0ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7be:	4b1e      	ldr	r3, [pc, #120]	; (800e838 <xTaskRemoveFromEventList+0xb0>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d11d      	bne.n	800e802 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	3304      	adds	r3, #4
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7fe fc6e 	bl	800d0ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d4:	4b19      	ldr	r3, [pc, #100]	; (800e83c <xTaskRemoveFromEventList+0xb4>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d903      	bls.n	800e7e4 <xTaskRemoveFromEventList+0x5c>
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e0:	4a16      	ldr	r2, [pc, #88]	; (800e83c <xTaskRemoveFromEventList+0xb4>)
 800e7e2:	6013      	str	r3, [r2, #0]
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	4413      	add	r3, r2
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	4a13      	ldr	r2, [pc, #76]	; (800e840 <xTaskRemoveFromEventList+0xb8>)
 800e7f2:	441a      	add	r2, r3
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	3304      	adds	r3, #4
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	f7fe fbf9 	bl	800cff2 <vListInsertEnd>
 800e800:	e005      	b.n	800e80e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	3318      	adds	r3, #24
 800e806:	4619      	mov	r1, r3
 800e808:	480e      	ldr	r0, [pc, #56]	; (800e844 <xTaskRemoveFromEventList+0xbc>)
 800e80a:	f7fe fbf2 	bl	800cff2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e812:	4b0d      	ldr	r3, [pc, #52]	; (800e848 <xTaskRemoveFromEventList+0xc0>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e818:	429a      	cmp	r2, r3
 800e81a:	d905      	bls.n	800e828 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e81c:	2301      	movs	r3, #1
 800e81e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e820:	4b0a      	ldr	r3, [pc, #40]	; (800e84c <xTaskRemoveFromEventList+0xc4>)
 800e822:	2201      	movs	r2, #1
 800e824:	601a      	str	r2, [r3, #0]
 800e826:	e001      	b.n	800e82c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e828:	2300      	movs	r3, #0
 800e82a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e82c:	697b      	ldr	r3, [r7, #20]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3718      	adds	r7, #24
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	200021e4 	.word	0x200021e4
 800e83c:	200021c4 	.word	0x200021c4
 800e840:	20001cec 	.word	0x20001cec
 800e844:	2000217c 	.word	0x2000217c
 800e848:	20001ce8 	.word	0x20001ce8
 800e84c:	200021d0 	.word	0x200021d0

0800e850 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e858:	4b06      	ldr	r3, [pc, #24]	; (800e874 <vTaskInternalSetTimeOutState+0x24>)
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e860:	4b05      	ldr	r3, [pc, #20]	; (800e878 <vTaskInternalSetTimeOutState+0x28>)
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	605a      	str	r2, [r3, #4]
}
 800e868:	bf00      	nop
 800e86a:	370c      	adds	r7, #12
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr
 800e874:	200021d4 	.word	0x200021d4
 800e878:	200021c0 	.word	0x200021c0

0800e87c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b088      	sub	sp, #32
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10a      	bne.n	800e8a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	613b      	str	r3, [r7, #16]
}
 800e89e:	bf00      	nop
 800e8a0:	e7fe      	b.n	800e8a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d10a      	bne.n	800e8be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	60fb      	str	r3, [r7, #12]
}
 800e8ba:	bf00      	nop
 800e8bc:	e7fe      	b.n	800e8bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e8be:	f001 f811 	bl	800f8e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e8c2:	4b1d      	ldr	r3, [pc, #116]	; (800e938 <xTaskCheckForTimeOut+0xbc>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	69ba      	ldr	r2, [r7, #24]
 800e8ce:	1ad3      	subs	r3, r2, r3
 800e8d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8da:	d102      	bne.n	800e8e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	61fb      	str	r3, [r7, #28]
 800e8e0:	e023      	b.n	800e92a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	4b15      	ldr	r3, [pc, #84]	; (800e93c <xTaskCheckForTimeOut+0xc0>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d007      	beq.n	800e8fe <xTaskCheckForTimeOut+0x82>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	69ba      	ldr	r2, [r7, #24]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d302      	bcc.n	800e8fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	61fb      	str	r3, [r7, #28]
 800e8fc:	e015      	b.n	800e92a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	697a      	ldr	r2, [r7, #20]
 800e904:	429a      	cmp	r2, r3
 800e906:	d20b      	bcs.n	800e920 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	1ad2      	subs	r2, r2, r3
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f7ff ff9b 	bl	800e850 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e91a:	2300      	movs	r3, #0
 800e91c:	61fb      	str	r3, [r7, #28]
 800e91e:	e004      	b.n	800e92a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	2200      	movs	r2, #0
 800e924:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e926:	2301      	movs	r3, #1
 800e928:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e92a:	f001 f80b 	bl	800f944 <vPortExitCritical>

	return xReturn;
 800e92e:	69fb      	ldr	r3, [r7, #28]
}
 800e930:	4618      	mov	r0, r3
 800e932:	3720      	adds	r7, #32
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}
 800e938:	200021c0 	.word	0x200021c0
 800e93c:	200021d4 	.word	0x200021d4

0800e940 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e940:	b480      	push	{r7}
 800e942:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e944:	4b03      	ldr	r3, [pc, #12]	; (800e954 <vTaskMissedYield+0x14>)
 800e946:	2201      	movs	r2, #1
 800e948:	601a      	str	r2, [r3, #0]
}
 800e94a:	bf00      	nop
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	200021d0 	.word	0x200021d0

0800e958 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e960:	f000 f854 	bl	800ea0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e964:	4b07      	ldr	r3, [pc, #28]	; (800e984 <prvIdleTask+0x2c>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d907      	bls.n	800e97c <prvIdleTask+0x24>
			{
				taskYIELD();
 800e96c:	4b06      	ldr	r3, [pc, #24]	; (800e988 <prvIdleTask+0x30>)
 800e96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e972:	601a      	str	r2, [r3, #0]
 800e974:	f3bf 8f4f 	dsb	sy
 800e978:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e97c:	f7f2 fed2 	bl	8001724 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e980:	e7ee      	b.n	800e960 <prvIdleTask+0x8>
 800e982:	bf00      	nop
 800e984:	20001cec 	.word	0x20001cec
 800e988:	e000ed04 	.word	0xe000ed04

0800e98c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e992:	2300      	movs	r3, #0
 800e994:	607b      	str	r3, [r7, #4]
 800e996:	e00c      	b.n	800e9b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	4613      	mov	r3, r2
 800e99c:	009b      	lsls	r3, r3, #2
 800e99e:	4413      	add	r3, r2
 800e9a0:	009b      	lsls	r3, r3, #2
 800e9a2:	4a12      	ldr	r2, [pc, #72]	; (800e9ec <prvInitialiseTaskLists+0x60>)
 800e9a4:	4413      	add	r3, r2
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fe faf6 	bl	800cf98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	607b      	str	r3, [r7, #4]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2b37      	cmp	r3, #55	; 0x37
 800e9b6:	d9ef      	bls.n	800e998 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e9b8:	480d      	ldr	r0, [pc, #52]	; (800e9f0 <prvInitialiseTaskLists+0x64>)
 800e9ba:	f7fe faed 	bl	800cf98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e9be:	480d      	ldr	r0, [pc, #52]	; (800e9f4 <prvInitialiseTaskLists+0x68>)
 800e9c0:	f7fe faea 	bl	800cf98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9c4:	480c      	ldr	r0, [pc, #48]	; (800e9f8 <prvInitialiseTaskLists+0x6c>)
 800e9c6:	f7fe fae7 	bl	800cf98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e9ca:	480c      	ldr	r0, [pc, #48]	; (800e9fc <prvInitialiseTaskLists+0x70>)
 800e9cc:	f7fe fae4 	bl	800cf98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9d0:	480b      	ldr	r0, [pc, #44]	; (800ea00 <prvInitialiseTaskLists+0x74>)
 800e9d2:	f7fe fae1 	bl	800cf98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ea04 <prvInitialiseTaskLists+0x78>)
 800e9d8:	4a05      	ldr	r2, [pc, #20]	; (800e9f0 <prvInitialiseTaskLists+0x64>)
 800e9da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9dc:	4b0a      	ldr	r3, [pc, #40]	; (800ea08 <prvInitialiseTaskLists+0x7c>)
 800e9de:	4a05      	ldr	r2, [pc, #20]	; (800e9f4 <prvInitialiseTaskLists+0x68>)
 800e9e0:	601a      	str	r2, [r3, #0]
}
 800e9e2:	bf00      	nop
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	20001cec 	.word	0x20001cec
 800e9f0:	2000214c 	.word	0x2000214c
 800e9f4:	20002160 	.word	0x20002160
 800e9f8:	2000217c 	.word	0x2000217c
 800e9fc:	20002190 	.word	0x20002190
 800ea00:	200021a8 	.word	0x200021a8
 800ea04:	20002174 	.word	0x20002174
 800ea08:	20002178 	.word	0x20002178

0800ea0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea12:	e019      	b.n	800ea48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea14:	f000 ff66 	bl	800f8e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea18:	4b10      	ldr	r3, [pc, #64]	; (800ea5c <prvCheckTasksWaitingTermination+0x50>)
 800ea1a:	68db      	ldr	r3, [r3, #12]
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	3304      	adds	r3, #4
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7fe fb41 	bl	800d0ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea2a:	4b0d      	ldr	r3, [pc, #52]	; (800ea60 <prvCheckTasksWaitingTermination+0x54>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	4a0b      	ldr	r2, [pc, #44]	; (800ea60 <prvCheckTasksWaitingTermination+0x54>)
 800ea32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea34:	4b0b      	ldr	r3, [pc, #44]	; (800ea64 <prvCheckTasksWaitingTermination+0x58>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	4a0a      	ldr	r2, [pc, #40]	; (800ea64 <prvCheckTasksWaitingTermination+0x58>)
 800ea3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea3e:	f000 ff81 	bl	800f944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 f8e4 	bl	800ec10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea48:	4b06      	ldr	r3, [pc, #24]	; (800ea64 <prvCheckTasksWaitingTermination+0x58>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d1e1      	bne.n	800ea14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea50:	bf00      	nop
 800ea52:	bf00      	nop
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	20002190 	.word	0x20002190
 800ea60:	200021bc 	.word	0x200021bc
 800ea64:	200021a4 	.word	0x200021a4

0800ea68 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b086      	sub	sp, #24
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
 800ea74:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d102      	bne.n	800ea82 <vTaskGetInfo+0x1a>
 800ea7c:	4b2c      	ldr	r3, [pc, #176]	; (800eb30 <vTaskGetInfo+0xc8>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	e000      	b.n	800ea84 <vTaskGetInfo+0x1c>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	697a      	ldr	r2, [r7, #20]
 800ea8a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800eabe:	78fb      	ldrb	r3, [r7, #3]
 800eac0:	2b05      	cmp	r3, #5
 800eac2:	d01a      	beq.n	800eafa <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800eac4:	4b1a      	ldr	r3, [pc, #104]	; (800eb30 <vTaskGetInfo+0xc8>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	697a      	ldr	r2, [r7, #20]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d103      	bne.n	800ead6 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	2200      	movs	r2, #0
 800ead2:	731a      	strb	r2, [r3, #12]
 800ead4:	e018      	b.n	800eb08 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	78fa      	ldrb	r2, [r7, #3]
 800eada:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800eadc:	78fb      	ldrb	r3, [r7, #3]
 800eade:	2b03      	cmp	r3, #3
 800eae0:	d112      	bne.n	800eb08 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800eae2:	f7ff fb7b 	bl	800e1dc <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d002      	beq.n	800eaf4 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2202      	movs	r2, #2
 800eaf2:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800eaf4:	f7ff fb80 	bl	800e1f8 <xTaskResumeAll>
 800eaf8:	e006      	b.n	800eb08 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800eafa:	6978      	ldr	r0, [r7, #20]
 800eafc:	f7ff fa96 	bl	800e02c <eTaskGetState>
 800eb00:	4603      	mov	r3, r0
 800eb02:	461a      	mov	r2, r3
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d009      	beq.n	800eb22 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 f860 	bl	800ebd8 <prvTaskCheckFreeStackSpace>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800eb20:	e002      	b.n	800eb28 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	2200      	movs	r2, #0
 800eb26:	841a      	strh	r2, [r3, #32]
	}
 800eb28:	bf00      	nop
 800eb2a:	3718      	adds	r7, #24
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	20001ce8 	.word	0x20001ce8

0800eb34 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b08a      	sub	sp, #40	; 0x28
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	4613      	mov	r3, r2
 800eb40:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d03f      	beq.n	800ebce <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	623b      	str	r3, [r7, #32]
 800eb52:	6a3b      	ldr	r3, [r7, #32]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	685a      	ldr	r2, [r3, #4]
 800eb58:	6a3b      	ldr	r3, [r7, #32]
 800eb5a:	605a      	str	r2, [r3, #4]
 800eb5c:	6a3b      	ldr	r3, [r7, #32]
 800eb5e:	685a      	ldr	r2, [r3, #4]
 800eb60:	6a3b      	ldr	r3, [r7, #32]
 800eb62:	3308      	adds	r3, #8
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d104      	bne.n	800eb72 <prvListTasksWithinSingleList+0x3e>
 800eb68:	6a3b      	ldr	r3, [r7, #32]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	685a      	ldr	r2, [r3, #4]
 800eb6e:	6a3b      	ldr	r3, [r7, #32]
 800eb70:	605a      	str	r2, [r3, #4]
 800eb72:	6a3b      	ldr	r3, [r7, #32]
 800eb74:	685b      	ldr	r3, [r3, #4]
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	61bb      	str	r3, [r7, #24]
 800eb7e:	69bb      	ldr	r3, [r7, #24]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	685a      	ldr	r2, [r3, #4]
 800eb84:	69bb      	ldr	r3, [r7, #24]
 800eb86:	605a      	str	r2, [r3, #4]
 800eb88:	69bb      	ldr	r3, [r7, #24]
 800eb8a:	685a      	ldr	r2, [r3, #4]
 800eb8c:	69bb      	ldr	r3, [r7, #24]
 800eb8e:	3308      	adds	r3, #8
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d104      	bne.n	800eb9e <prvListTasksWithinSingleList+0x6a>
 800eb94:	69bb      	ldr	r3, [r7, #24]
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	685a      	ldr	r2, [r3, #4]
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	605a      	str	r2, [r3, #4]
 800eb9e:	69bb      	ldr	r3, [r7, #24]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800eba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eba8:	4613      	mov	r3, r2
 800ebaa:	00db      	lsls	r3, r3, #3
 800ebac:	4413      	add	r3, r2
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	1899      	adds	r1, r3, r2
 800ebb6:	79fb      	ldrb	r3, [r7, #7]
 800ebb8:	2201      	movs	r2, #1
 800ebba:	6978      	ldr	r0, [r7, #20]
 800ebbc:	f7ff ff54 	bl	800ea68 <vTaskGetInfo>
				uxTask++;
 800ebc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800ebc6:	697a      	ldr	r2, [r7, #20]
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d1d5      	bne.n	800eb7a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800ebce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3728      	adds	r7, #40	; 0x28
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800ebd8:	b480      	push	{r7}
 800ebda:	b085      	sub	sp, #20
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ebe4:	e005      	b.n	800ebf2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	607b      	str	r3, [r7, #4]
			ulCount++;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	2ba5      	cmp	r3, #165	; 0xa5
 800ebf8:	d0f5      	beq.n	800ebe6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	089b      	lsrs	r3, r3, #2
 800ebfe:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	b29b      	uxth	r3, r3
	}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3714      	adds	r7, #20
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	3358      	adds	r3, #88	; 0x58
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f001 ff95 	bl	8010b4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d108      	bne.n	800ec3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec30:	4618      	mov	r0, r3
 800ec32:	f001 f845 	bl	800fcc0 <vPortFree>
				vPortFree( pxTCB );
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f001 f842 	bl	800fcc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec3c:	e018      	b.n	800ec70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ec44:	2b01      	cmp	r3, #1
 800ec46:	d103      	bne.n	800ec50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f001 f839 	bl	800fcc0 <vPortFree>
	}
 800ec4e:	e00f      	b.n	800ec70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ec56:	2b02      	cmp	r3, #2
 800ec58:	d00a      	beq.n	800ec70 <prvDeleteTCB+0x60>
	__asm volatile
 800ec5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5e:	f383 8811 	msr	BASEPRI, r3
 800ec62:	f3bf 8f6f 	isb	sy
 800ec66:	f3bf 8f4f 	dsb	sy
 800ec6a:	60fb      	str	r3, [r7, #12]
}
 800ec6c:	bf00      	nop
 800ec6e:	e7fe      	b.n	800ec6e <prvDeleteTCB+0x5e>
	}
 800ec70:	bf00      	nop
 800ec72:	3710      	adds	r7, #16
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec7e:	4b0c      	ldr	r3, [pc, #48]	; (800ecb0 <prvResetNextTaskUnblockTime+0x38>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d104      	bne.n	800ec92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec88:	4b0a      	ldr	r3, [pc, #40]	; (800ecb4 <prvResetNextTaskUnblockTime+0x3c>)
 800ec8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec90:	e008      	b.n	800eca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec92:	4b07      	ldr	r3, [pc, #28]	; (800ecb0 <prvResetNextTaskUnblockTime+0x38>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	4a04      	ldr	r2, [pc, #16]	; (800ecb4 <prvResetNextTaskUnblockTime+0x3c>)
 800eca2:	6013      	str	r3, [r2, #0]
}
 800eca4:	bf00      	nop
 800eca6:	370c      	adds	r7, #12
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr
 800ecb0:	20002174 	.word	0x20002174
 800ecb4:	200021dc 	.word	0x200021dc

0800ecb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ecbe:	4b0b      	ldr	r3, [pc, #44]	; (800ecec <xTaskGetSchedulerState+0x34>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d102      	bne.n	800eccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	607b      	str	r3, [r7, #4]
 800ecca:	e008      	b.n	800ecde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eccc:	4b08      	ldr	r3, [pc, #32]	; (800ecf0 <xTaskGetSchedulerState+0x38>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d102      	bne.n	800ecda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ecd4:	2302      	movs	r3, #2
 800ecd6:	607b      	str	r3, [r7, #4]
 800ecd8:	e001      	b.n	800ecde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ecde:	687b      	ldr	r3, [r7, #4]
	}
 800ece0:	4618      	mov	r0, r3
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr
 800ecec:	200021c8 	.word	0x200021c8
 800ecf0:	200021e4 	.word	0x200021e4

0800ecf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b086      	sub	sp, #24
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed00:	2300      	movs	r3, #0
 800ed02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d056      	beq.n	800edb8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed0a:	4b2e      	ldr	r3, [pc, #184]	; (800edc4 <xTaskPriorityDisinherit+0xd0>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	693a      	ldr	r2, [r7, #16]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d00a      	beq.n	800ed2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ed14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed18:	f383 8811 	msr	BASEPRI, r3
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	f3bf 8f4f 	dsb	sy
 800ed24:	60fb      	str	r3, [r7, #12]
}
 800ed26:	bf00      	nop
 800ed28:	e7fe      	b.n	800ed28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d10a      	bne.n	800ed48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ed32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed36:	f383 8811 	msr	BASEPRI, r3
 800ed3a:	f3bf 8f6f 	isb	sy
 800ed3e:	f3bf 8f4f 	dsb	sy
 800ed42:	60bb      	str	r3, [r7, #8]
}
 800ed44:	bf00      	nop
 800ed46:	e7fe      	b.n	800ed46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed4c:	1e5a      	subs	r2, r3, #1
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d02c      	beq.n	800edb8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d128      	bne.n	800edb8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	3304      	adds	r3, #4
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fe f99e 	bl	800d0ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed88:	4b0f      	ldr	r3, [pc, #60]	; (800edc8 <xTaskPriorityDisinherit+0xd4>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d903      	bls.n	800ed98 <xTaskPriorityDisinherit+0xa4>
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed94:	4a0c      	ldr	r2, [pc, #48]	; (800edc8 <xTaskPriorityDisinherit+0xd4>)
 800ed96:	6013      	str	r3, [r2, #0]
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	4413      	add	r3, r2
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	4a09      	ldr	r2, [pc, #36]	; (800edcc <xTaskPriorityDisinherit+0xd8>)
 800eda6:	441a      	add	r2, r3
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	3304      	adds	r3, #4
 800edac:	4619      	mov	r1, r3
 800edae:	4610      	mov	r0, r2
 800edb0:	f7fe f91f 	bl	800cff2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800edb4:	2301      	movs	r3, #1
 800edb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edb8:	697b      	ldr	r3, [r7, #20]
	}
 800edba:	4618      	mov	r0, r3
 800edbc:	3718      	adds	r7, #24
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	20001ce8 	.word	0x20001ce8
 800edc8:	200021c4 	.word	0x200021c4
 800edcc:	20001cec 	.word	0x20001cec

0800edd0 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800edda:	6839      	ldr	r1, [r7, #0]
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f001 ff41 	bl	8010c64 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f7f1 f9fc 	bl	80001e0 <strlen>
 800ede8:	60f8      	str	r0, [r7, #12]
 800edea:	e007      	b.n	800edfc <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	4413      	add	r3, r2
 800edf2:	2220      	movs	r2, #32
 800edf4:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	3301      	adds	r3, #1
 800edfa:	60fb      	str	r3, [r7, #12]
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2b0e      	cmp	r3, #14
 800ee00:	d9f4      	bls.n	800edec <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	4413      	add	r3, r2
 800ee08:	2200      	movs	r2, #0
 800ee0a:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	4413      	add	r3, r2
	}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3710      	adds	r7, #16
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
	...

0800ee1c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ee1c:	b590      	push	{r4, r7, lr}
 800ee1e:	b089      	sub	sp, #36	; 0x24
 800ee20:	af02      	add	r7, sp, #8
 800ee22:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ee2a:	4b45      	ldr	r3, [pc, #276]	; (800ef40 <vTaskList+0x124>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800ee30:	4b43      	ldr	r3, [pc, #268]	; (800ef40 <vTaskList+0x124>)
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	4613      	mov	r3, r2
 800ee36:	00db      	lsls	r3, r3, #3
 800ee38:	4413      	add	r3, r2
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f000 fe73 	bl	800fb28 <pvPortMalloc>
 800ee42:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d076      	beq.n	800ef38 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	68f9      	ldr	r1, [r7, #12]
 800ee4e:	68b8      	ldr	r0, [r7, #8]
 800ee50:	f7ff fa80 	bl	800e354 <uxTaskGetSystemState>
 800ee54:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ee56:	2300      	movs	r3, #0
 800ee58:	617b      	str	r3, [r7, #20]
 800ee5a:	e066      	b.n	800ef2a <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ee5c:	697a      	ldr	r2, [r7, #20]
 800ee5e:	4613      	mov	r3, r2
 800ee60:	00db      	lsls	r3, r3, #3
 800ee62:	4413      	add	r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	461a      	mov	r2, r3
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	7b1b      	ldrb	r3, [r3, #12]
 800ee6e:	2b04      	cmp	r3, #4
 800ee70:	d81b      	bhi.n	800eeaa <vTaskList+0x8e>
 800ee72:	a201      	add	r2, pc, #4	; (adr r2, 800ee78 <vTaskList+0x5c>)
 800ee74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee78:	0800ee8d 	.word	0x0800ee8d
 800ee7c:	0800ee93 	.word	0x0800ee93
 800ee80:	0800ee99 	.word	0x0800ee99
 800ee84:	0800ee9f 	.word	0x0800ee9f
 800ee88:	0800eea5 	.word	0x0800eea5
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800ee8c:	2358      	movs	r3, #88	; 0x58
 800ee8e:	74fb      	strb	r3, [r7, #19]
										break;
 800ee90:	e00e      	b.n	800eeb0 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800ee92:	2352      	movs	r3, #82	; 0x52
 800ee94:	74fb      	strb	r3, [r7, #19]
										break;
 800ee96:	e00b      	b.n	800eeb0 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ee98:	2342      	movs	r3, #66	; 0x42
 800ee9a:	74fb      	strb	r3, [r7, #19]
										break;
 800ee9c:	e008      	b.n	800eeb0 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ee9e:	2353      	movs	r3, #83	; 0x53
 800eea0:	74fb      	strb	r3, [r7, #19]
										break;
 800eea2:	e005      	b.n	800eeb0 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800eea4:	2344      	movs	r3, #68	; 0x44
 800eea6:	74fb      	strb	r3, [r7, #19]
										break;
 800eea8:	e002      	b.n	800eeb0 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	74fb      	strb	r3, [r7, #19]
										break;
 800eeae:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800eeb0:	697a      	ldr	r2, [r7, #20]
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	00db      	lsls	r3, r3, #3
 800eeb6:	4413      	add	r3, r2
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	461a      	mov	r2, r3
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	4413      	add	r3, r2
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	4619      	mov	r1, r3
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f7ff ff83 	bl	800edd0 <prvWriteNameToBuffer>
 800eeca:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800eecc:	7cf9      	ldrb	r1, [r7, #19]
 800eece:	697a      	ldr	r2, [r7, #20]
 800eed0:	4613      	mov	r3, r2
 800eed2:	00db      	lsls	r3, r3, #3
 800eed4:	4413      	add	r3, r2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	461a      	mov	r2, r3
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	4413      	add	r3, r2
 800eede:	6918      	ldr	r0, [r3, #16]
 800eee0:	697a      	ldr	r2, [r7, #20]
 800eee2:	4613      	mov	r3, r2
 800eee4:	00db      	lsls	r3, r3, #3
 800eee6:	4413      	add	r3, r2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	461a      	mov	r2, r3
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	4413      	add	r3, r2
 800eef0:	8c1b      	ldrh	r3, [r3, #32]
 800eef2:	461c      	mov	r4, r3
 800eef4:	697a      	ldr	r2, [r7, #20]
 800eef6:	4613      	mov	r3, r2
 800eef8:	00db      	lsls	r3, r3, #3
 800eefa:	4413      	add	r3, r2
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	461a      	mov	r2, r3
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	4413      	add	r3, r2
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	9301      	str	r3, [sp, #4]
 800ef08:	9400      	str	r4, [sp, #0]
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	460a      	mov	r2, r1
 800ef0e:	490d      	ldr	r1, [pc, #52]	; (800ef44 <vTaskList+0x128>)
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f001 fe87 	bl	8010c24 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f7f1 f962 	bl	80001e0 <strlen>
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4413      	add	r3, r2
 800ef22:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	3301      	adds	r3, #1
 800ef28:	617b      	str	r3, [r7, #20]
 800ef2a:	697a      	ldr	r2, [r7, #20]
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d394      	bcc.n	800ee5c <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800ef32:	68b8      	ldr	r0, [r7, #8]
 800ef34:	f000 fec4 	bl	800fcc0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef38:	bf00      	nop
 800ef3a:	371c      	adds	r7, #28
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd90      	pop	{r4, r7, pc}
 800ef40:	200021bc 	.word	0x200021bc
 800ef44:	0801167c 	.word	0x0801167c

0800ef48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef52:	4b21      	ldr	r3, [pc, #132]	; (800efd8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef58:	4b20      	ldr	r3, [pc, #128]	; (800efdc <prvAddCurrentTaskToDelayedList+0x94>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	3304      	adds	r3, #4
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fe f8a4 	bl	800d0ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef6a:	d10a      	bne.n	800ef82 <prvAddCurrentTaskToDelayedList+0x3a>
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d007      	beq.n	800ef82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef72:	4b1a      	ldr	r3, [pc, #104]	; (800efdc <prvAddCurrentTaskToDelayedList+0x94>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	3304      	adds	r3, #4
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4819      	ldr	r0, [pc, #100]	; (800efe0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ef7c:	f7fe f839 	bl	800cff2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef80:	e026      	b.n	800efd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	4413      	add	r3, r2
 800ef88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef8a:	4b14      	ldr	r3, [pc, #80]	; (800efdc <prvAddCurrentTaskToDelayedList+0x94>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef92:	68ba      	ldr	r2, [r7, #8]
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d209      	bcs.n	800efae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef9a:	4b12      	ldr	r3, [pc, #72]	; (800efe4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	4b0f      	ldr	r3, [pc, #60]	; (800efdc <prvAddCurrentTaskToDelayedList+0x94>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	3304      	adds	r3, #4
 800efa4:	4619      	mov	r1, r3
 800efa6:	4610      	mov	r0, r2
 800efa8:	f7fe f847 	bl	800d03a <vListInsert>
}
 800efac:	e010      	b.n	800efd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efae:	4b0e      	ldr	r3, [pc, #56]	; (800efe8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	4b0a      	ldr	r3, [pc, #40]	; (800efdc <prvAddCurrentTaskToDelayedList+0x94>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	3304      	adds	r3, #4
 800efb8:	4619      	mov	r1, r3
 800efba:	4610      	mov	r0, r2
 800efbc:	f7fe f83d 	bl	800d03a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800efc0:	4b0a      	ldr	r3, [pc, #40]	; (800efec <prvAddCurrentTaskToDelayedList+0xa4>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	68ba      	ldr	r2, [r7, #8]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d202      	bcs.n	800efd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800efca:	4a08      	ldr	r2, [pc, #32]	; (800efec <prvAddCurrentTaskToDelayedList+0xa4>)
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	6013      	str	r3, [r2, #0]
}
 800efd0:	bf00      	nop
 800efd2:	3710      	adds	r7, #16
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	200021c0 	.word	0x200021c0
 800efdc:	20001ce8 	.word	0x20001ce8
 800efe0:	200021a8 	.word	0x200021a8
 800efe4:	20002178 	.word	0x20002178
 800efe8:	20002174 	.word	0x20002174
 800efec:	200021dc 	.word	0x200021dc

0800eff0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b08a      	sub	sp, #40	; 0x28
 800eff4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eff6:	2300      	movs	r3, #0
 800eff8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800effa:	f000 fb07 	bl	800f60c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800effe:	4b1c      	ldr	r3, [pc, #112]	; (800f070 <xTimerCreateTimerTask+0x80>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d021      	beq.n	800f04a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f006:	2300      	movs	r3, #0
 800f008:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f00a:	2300      	movs	r3, #0
 800f00c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f00e:	1d3a      	adds	r2, r7, #4
 800f010:	f107 0108 	add.w	r1, r7, #8
 800f014:	f107 030c 	add.w	r3, r7, #12
 800f018:	4618      	mov	r0, r3
 800f01a:	f7fd ffa3 	bl	800cf64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f01e:	6879      	ldr	r1, [r7, #4]
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	9202      	str	r2, [sp, #8]
 800f026:	9301      	str	r3, [sp, #4]
 800f028:	2302      	movs	r3, #2
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	2300      	movs	r3, #0
 800f02e:	460a      	mov	r2, r1
 800f030:	4910      	ldr	r1, [pc, #64]	; (800f074 <xTimerCreateTimerTask+0x84>)
 800f032:	4811      	ldr	r0, [pc, #68]	; (800f078 <xTimerCreateTimerTask+0x88>)
 800f034:	f7fe fe0a 	bl	800dc4c <xTaskCreateStatic>
 800f038:	4603      	mov	r3, r0
 800f03a:	4a10      	ldr	r2, [pc, #64]	; (800f07c <xTimerCreateTimerTask+0x8c>)
 800f03c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f03e:	4b0f      	ldr	r3, [pc, #60]	; (800f07c <xTimerCreateTimerTask+0x8c>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d001      	beq.n	800f04a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f046:	2301      	movs	r3, #1
 800f048:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d10a      	bne.n	800f066 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f054:	f383 8811 	msr	BASEPRI, r3
 800f058:	f3bf 8f6f 	isb	sy
 800f05c:	f3bf 8f4f 	dsb	sy
 800f060:	613b      	str	r3, [r7, #16]
}
 800f062:	bf00      	nop
 800f064:	e7fe      	b.n	800f064 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f066:	697b      	ldr	r3, [r7, #20]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3718      	adds	r7, #24
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	20002220 	.word	0x20002220
 800f074:	080116a4 	.word	0x080116a4
 800f078:	0800f1b5 	.word	0x0800f1b5
 800f07c:	20002224 	.word	0x20002224

0800f080 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b08a      	sub	sp, #40	; 0x28
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
 800f08c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f08e:	2300      	movs	r3, #0
 800f090:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d10a      	bne.n	800f0ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800f098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09c:	f383 8811 	msr	BASEPRI, r3
 800f0a0:	f3bf 8f6f 	isb	sy
 800f0a4:	f3bf 8f4f 	dsb	sy
 800f0a8:	623b      	str	r3, [r7, #32]
}
 800f0aa:	bf00      	nop
 800f0ac:	e7fe      	b.n	800f0ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f0ae:	4b1a      	ldr	r3, [pc, #104]	; (800f118 <xTimerGenericCommand+0x98>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d02a      	beq.n	800f10c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2b05      	cmp	r3, #5
 800f0c6:	dc18      	bgt.n	800f0fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f0c8:	f7ff fdf6 	bl	800ecb8 <xTaskGetSchedulerState>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b02      	cmp	r3, #2
 800f0d0:	d109      	bne.n	800f0e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f0d2:	4b11      	ldr	r3, [pc, #68]	; (800f118 <xTimerGenericCommand+0x98>)
 800f0d4:	6818      	ldr	r0, [r3, #0]
 800f0d6:	f107 0110 	add.w	r1, r7, #16
 800f0da:	2300      	movs	r3, #0
 800f0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0de:	f7fe f94d 	bl	800d37c <xQueueGenericSend>
 800f0e2:	6278      	str	r0, [r7, #36]	; 0x24
 800f0e4:	e012      	b.n	800f10c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f0e6:	4b0c      	ldr	r3, [pc, #48]	; (800f118 <xTimerGenericCommand+0x98>)
 800f0e8:	6818      	ldr	r0, [r3, #0]
 800f0ea:	f107 0110 	add.w	r1, r7, #16
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f7fe f943 	bl	800d37c <xQueueGenericSend>
 800f0f6:	6278      	str	r0, [r7, #36]	; 0x24
 800f0f8:	e008      	b.n	800f10c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f0fa:	4b07      	ldr	r3, [pc, #28]	; (800f118 <xTimerGenericCommand+0x98>)
 800f0fc:	6818      	ldr	r0, [r3, #0]
 800f0fe:	f107 0110 	add.w	r1, r7, #16
 800f102:	2300      	movs	r3, #0
 800f104:	683a      	ldr	r2, [r7, #0]
 800f106:	f7fe fa37 	bl	800d578 <xQueueGenericSendFromISR>
 800f10a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3728      	adds	r7, #40	; 0x28
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	20002220 	.word	0x20002220

0800f11c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b088      	sub	sp, #32
 800f120:	af02      	add	r7, sp, #8
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f126:	4b22      	ldr	r3, [pc, #136]	; (800f1b0 <prvProcessExpiredTimer+0x94>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	3304      	adds	r3, #4
 800f134:	4618      	mov	r0, r3
 800f136:	f7fd ffb9 	bl	800d0ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f140:	f003 0304 	and.w	r3, r3, #4
 800f144:	2b00      	cmp	r3, #0
 800f146:	d022      	beq.n	800f18e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	699a      	ldr	r2, [r3, #24]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	18d1      	adds	r1, r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	683a      	ldr	r2, [r7, #0]
 800f154:	6978      	ldr	r0, [r7, #20]
 800f156:	f000 f8d1 	bl	800f2fc <prvInsertTimerInActiveList>
 800f15a:	4603      	mov	r3, r0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d01f      	beq.n	800f1a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f160:	2300      	movs	r3, #0
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	2300      	movs	r3, #0
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	2100      	movs	r1, #0
 800f16a:	6978      	ldr	r0, [r7, #20]
 800f16c:	f7ff ff88 	bl	800f080 <xTimerGenericCommand>
 800f170:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d113      	bne.n	800f1a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17c:	f383 8811 	msr	BASEPRI, r3
 800f180:	f3bf 8f6f 	isb	sy
 800f184:	f3bf 8f4f 	dsb	sy
 800f188:	60fb      	str	r3, [r7, #12]
}
 800f18a:	bf00      	nop
 800f18c:	e7fe      	b.n	800f18c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f194:	f023 0301 	bic.w	r3, r3, #1
 800f198:	b2da      	uxtb	r2, r3
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	6a1b      	ldr	r3, [r3, #32]
 800f1a4:	6978      	ldr	r0, [r7, #20]
 800f1a6:	4798      	blx	r3
}
 800f1a8:	bf00      	nop
 800f1aa:	3718      	adds	r7, #24
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	20002218 	.word	0x20002218

0800f1b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1bc:	f107 0308 	add.w	r3, r7, #8
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f000 f857 	bl	800f274 <prvGetNextExpireTime>
 800f1c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f000 f803 	bl	800f1d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f1d2:	f000 f8d5 	bl	800f380 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1d6:	e7f1      	b.n	800f1bc <prvTimerTask+0x8>

0800f1d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f1e2:	f7fe fffb 	bl	800e1dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1e6:	f107 0308 	add.w	r3, r7, #8
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 f866 	bl	800f2bc <prvSampleTimeNow>
 800f1f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d130      	bne.n	800f25a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d10a      	bne.n	800f214 <prvProcessTimerOrBlockTask+0x3c>
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	429a      	cmp	r2, r3
 800f204:	d806      	bhi.n	800f214 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f206:	f7fe fff7 	bl	800e1f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f20a:	68f9      	ldr	r1, [r7, #12]
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f7ff ff85 	bl	800f11c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f212:	e024      	b.n	800f25e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d008      	beq.n	800f22c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f21a:	4b13      	ldr	r3, [pc, #76]	; (800f268 <prvProcessTimerOrBlockTask+0x90>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d101      	bne.n	800f228 <prvProcessTimerOrBlockTask+0x50>
 800f224:	2301      	movs	r3, #1
 800f226:	e000      	b.n	800f22a <prvProcessTimerOrBlockTask+0x52>
 800f228:	2300      	movs	r3, #0
 800f22a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f22c:	4b0f      	ldr	r3, [pc, #60]	; (800f26c <prvProcessTimerOrBlockTask+0x94>)
 800f22e:	6818      	ldr	r0, [r3, #0]
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	1ad3      	subs	r3, r2, r3
 800f236:	683a      	ldr	r2, [r7, #0]
 800f238:	4619      	mov	r1, r3
 800f23a:	f7fe fcd3 	bl	800dbe4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f23e:	f7fe ffdb 	bl	800e1f8 <xTaskResumeAll>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d10a      	bne.n	800f25e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f248:	4b09      	ldr	r3, [pc, #36]	; (800f270 <prvProcessTimerOrBlockTask+0x98>)
 800f24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f24e:	601a      	str	r2, [r3, #0]
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	f3bf 8f6f 	isb	sy
}
 800f258:	e001      	b.n	800f25e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f25a:	f7fe ffcd 	bl	800e1f8 <xTaskResumeAll>
}
 800f25e:	bf00      	nop
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	2000221c 	.word	0x2000221c
 800f26c:	20002220 	.word	0x20002220
 800f270:	e000ed04 	.word	0xe000ed04

0800f274 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f27c:	4b0e      	ldr	r3, [pc, #56]	; (800f2b8 <prvGetNextExpireTime+0x44>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d101      	bne.n	800f28a <prvGetNextExpireTime+0x16>
 800f286:	2201      	movs	r2, #1
 800f288:	e000      	b.n	800f28c <prvGetNextExpireTime+0x18>
 800f28a:	2200      	movs	r2, #0
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d105      	bne.n	800f2a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f298:	4b07      	ldr	r3, [pc, #28]	; (800f2b8 <prvGetNextExpireTime+0x44>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	60fb      	str	r3, [r7, #12]
 800f2a2:	e001      	b.n	800f2a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3714      	adds	r7, #20
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	20002218 	.word	0x20002218

0800f2bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f2c4:	f7ff f836 	bl	800e334 <xTaskGetTickCount>
 800f2c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f2ca:	4b0b      	ldr	r3, [pc, #44]	; (800f2f8 <prvSampleTimeNow+0x3c>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d205      	bcs.n	800f2e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f2d4:	f000 f936 	bl	800f544 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	e002      	b.n	800f2e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f2e6:	4a04      	ldr	r2, [pc, #16]	; (800f2f8 <prvSampleTimeNow+0x3c>)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	20002228 	.word	0x20002228

0800f2fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
 800f308:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f30a:	2300      	movs	r3, #0
 800f30c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	68ba      	ldr	r2, [r7, #8]
 800f312:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	68fa      	ldr	r2, [r7, #12]
 800f318:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d812      	bhi.n	800f348 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	1ad2      	subs	r2, r2, r3
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	699b      	ldr	r3, [r3, #24]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d302      	bcc.n	800f336 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f330:	2301      	movs	r3, #1
 800f332:	617b      	str	r3, [r7, #20]
 800f334:	e01b      	b.n	800f36e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f336:	4b10      	ldr	r3, [pc, #64]	; (800f378 <prvInsertTimerInActiveList+0x7c>)
 800f338:	681a      	ldr	r2, [r3, #0]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	3304      	adds	r3, #4
 800f33e:	4619      	mov	r1, r3
 800f340:	4610      	mov	r0, r2
 800f342:	f7fd fe7a 	bl	800d03a <vListInsert>
 800f346:	e012      	b.n	800f36e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d206      	bcs.n	800f35e <prvInsertTimerInActiveList+0x62>
 800f350:	68ba      	ldr	r2, [r7, #8]
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	429a      	cmp	r2, r3
 800f356:	d302      	bcc.n	800f35e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f358:	2301      	movs	r3, #1
 800f35a:	617b      	str	r3, [r7, #20]
 800f35c:	e007      	b.n	800f36e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f35e:	4b07      	ldr	r3, [pc, #28]	; (800f37c <prvInsertTimerInActiveList+0x80>)
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	3304      	adds	r3, #4
 800f366:	4619      	mov	r1, r3
 800f368:	4610      	mov	r0, r2
 800f36a:	f7fd fe66 	bl	800d03a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f36e:	697b      	ldr	r3, [r7, #20]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3718      	adds	r7, #24
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	2000221c 	.word	0x2000221c
 800f37c:	20002218 	.word	0x20002218

0800f380 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b08e      	sub	sp, #56	; 0x38
 800f384:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f386:	e0ca      	b.n	800f51e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	da18      	bge.n	800f3c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f38e:	1d3b      	adds	r3, r7, #4
 800f390:	3304      	adds	r3, #4
 800f392:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f396:	2b00      	cmp	r3, #0
 800f398:	d10a      	bne.n	800f3b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39e:	f383 8811 	msr	BASEPRI, r3
 800f3a2:	f3bf 8f6f 	isb	sy
 800f3a6:	f3bf 8f4f 	dsb	sy
 800f3aa:	61fb      	str	r3, [r7, #28]
}
 800f3ac:	bf00      	nop
 800f3ae:	e7fe      	b.n	800f3ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3b6:	6850      	ldr	r0, [r2, #4]
 800f3b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3ba:	6892      	ldr	r2, [r2, #8]
 800f3bc:	4611      	mov	r1, r2
 800f3be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f2c0 80aa 	blt.w	800f51c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ce:	695b      	ldr	r3, [r3, #20]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d004      	beq.n	800f3de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d6:	3304      	adds	r3, #4
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7fd fe67 	bl	800d0ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f3de:	463b      	mov	r3, r7
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7ff ff6b 	bl	800f2bc <prvSampleTimeNow>
 800f3e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2b09      	cmp	r3, #9
 800f3ec:	f200 8097 	bhi.w	800f51e <prvProcessReceivedCommands+0x19e>
 800f3f0:	a201      	add	r2, pc, #4	; (adr r2, 800f3f8 <prvProcessReceivedCommands+0x78>)
 800f3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f6:	bf00      	nop
 800f3f8:	0800f421 	.word	0x0800f421
 800f3fc:	0800f421 	.word	0x0800f421
 800f400:	0800f421 	.word	0x0800f421
 800f404:	0800f495 	.word	0x0800f495
 800f408:	0800f4a9 	.word	0x0800f4a9
 800f40c:	0800f4f3 	.word	0x0800f4f3
 800f410:	0800f421 	.word	0x0800f421
 800f414:	0800f421 	.word	0x0800f421
 800f418:	0800f495 	.word	0x0800f495
 800f41c:	0800f4a9 	.word	0x0800f4a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f426:	f043 0301 	orr.w	r3, r3, #1
 800f42a:	b2da      	uxtb	r2, r3
 800f42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f436:	699b      	ldr	r3, [r3, #24]
 800f438:	18d1      	adds	r1, r2, r3
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f43e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f440:	f7ff ff5c 	bl	800f2fc <prvInsertTimerInActiveList>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d069      	beq.n	800f51e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44c:	6a1b      	ldr	r3, [r3, #32]
 800f44e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f450:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f458:	f003 0304 	and.w	r3, r3, #4
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d05e      	beq.n	800f51e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f460:	68ba      	ldr	r2, [r7, #8]
 800f462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f464:	699b      	ldr	r3, [r3, #24]
 800f466:	441a      	add	r2, r3
 800f468:	2300      	movs	r3, #0
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	2300      	movs	r3, #0
 800f46e:	2100      	movs	r1, #0
 800f470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f472:	f7ff fe05 	bl	800f080 <xTimerGenericCommand>
 800f476:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f478:	6a3b      	ldr	r3, [r7, #32]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d14f      	bne.n	800f51e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f482:	f383 8811 	msr	BASEPRI, r3
 800f486:	f3bf 8f6f 	isb	sy
 800f48a:	f3bf 8f4f 	dsb	sy
 800f48e:	61bb      	str	r3, [r7, #24]
}
 800f490:	bf00      	nop
 800f492:	e7fe      	b.n	800f492 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f49a:	f023 0301 	bic.w	r3, r3, #1
 800f49e:	b2da      	uxtb	r2, r3
 800f4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f4a6:	e03a      	b.n	800f51e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4ae:	f043 0301 	orr.w	r3, r3, #1
 800f4b2:	b2da      	uxtb	r2, r3
 800f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f4ba:	68ba      	ldr	r2, [r7, #8]
 800f4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	699b      	ldr	r3, [r3, #24]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d10a      	bne.n	800f4de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4cc:	f383 8811 	msr	BASEPRI, r3
 800f4d0:	f3bf 8f6f 	isb	sy
 800f4d4:	f3bf 8f4f 	dsb	sy
 800f4d8:	617b      	str	r3, [r7, #20]
}
 800f4da:	bf00      	nop
 800f4dc:	e7fe      	b.n	800f4dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e0:	699a      	ldr	r2, [r3, #24]
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e4:	18d1      	adds	r1, r2, r3
 800f4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4ec:	f7ff ff06 	bl	800f2fc <prvInsertTimerInActiveList>
					break;
 800f4f0:	e015      	b.n	800f51e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4f8:	f003 0302 	and.w	r3, r3, #2
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d103      	bne.n	800f508 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f502:	f000 fbdd 	bl	800fcc0 <vPortFree>
 800f506:	e00a      	b.n	800f51e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f50e:	f023 0301 	bic.w	r3, r3, #1
 800f512:	b2da      	uxtb	r2, r3
 800f514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f51a:	e000      	b.n	800f51e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f51c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f51e:	4b08      	ldr	r3, [pc, #32]	; (800f540 <prvProcessReceivedCommands+0x1c0>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	1d39      	adds	r1, r7, #4
 800f524:	2200      	movs	r2, #0
 800f526:	4618      	mov	r0, r3
 800f528:	f7fe f8c2 	bl	800d6b0 <xQueueReceive>
 800f52c:	4603      	mov	r3, r0
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f47f af2a 	bne.w	800f388 <prvProcessReceivedCommands+0x8>
	}
}
 800f534:	bf00      	nop
 800f536:	bf00      	nop
 800f538:	3730      	adds	r7, #48	; 0x30
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	20002220 	.word	0x20002220

0800f544 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b088      	sub	sp, #32
 800f548:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f54a:	e048      	b.n	800f5de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f54c:	4b2d      	ldr	r3, [pc, #180]	; (800f604 <prvSwitchTimerLists+0xc0>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f556:	4b2b      	ldr	r3, [pc, #172]	; (800f604 <prvSwitchTimerLists+0xc0>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	3304      	adds	r3, #4
 800f564:	4618      	mov	r0, r3
 800f566:	f7fd fda1 	bl	800d0ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	6a1b      	ldr	r3, [r3, #32]
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f578:	f003 0304 	and.w	r3, r3, #4
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d02e      	beq.n	800f5de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	699b      	ldr	r3, [r3, #24]
 800f584:	693a      	ldr	r2, [r7, #16]
 800f586:	4413      	add	r3, r2
 800f588:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d90e      	bls.n	800f5b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	68ba      	ldr	r2, [r7, #8]
 800f596:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	68fa      	ldr	r2, [r7, #12]
 800f59c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f59e:	4b19      	ldr	r3, [pc, #100]	; (800f604 <prvSwitchTimerLists+0xc0>)
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	3304      	adds	r3, #4
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	f7fd fd46 	bl	800d03a <vListInsert>
 800f5ae:	e016      	b.n	800f5de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	693a      	ldr	r2, [r7, #16]
 800f5b8:	2100      	movs	r1, #0
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f7ff fd60 	bl	800f080 <xTimerGenericCommand>
 800f5c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d10a      	bne.n	800f5de <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5cc:	f383 8811 	msr	BASEPRI, r3
 800f5d0:	f3bf 8f6f 	isb	sy
 800f5d4:	f3bf 8f4f 	dsb	sy
 800f5d8:	603b      	str	r3, [r7, #0]
}
 800f5da:	bf00      	nop
 800f5dc:	e7fe      	b.n	800f5dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5de:	4b09      	ldr	r3, [pc, #36]	; (800f604 <prvSwitchTimerLists+0xc0>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d1b1      	bne.n	800f54c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f5e8:	4b06      	ldr	r3, [pc, #24]	; (800f604 <prvSwitchTimerLists+0xc0>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f5ee:	4b06      	ldr	r3, [pc, #24]	; (800f608 <prvSwitchTimerLists+0xc4>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a04      	ldr	r2, [pc, #16]	; (800f604 <prvSwitchTimerLists+0xc0>)
 800f5f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f5f6:	4a04      	ldr	r2, [pc, #16]	; (800f608 <prvSwitchTimerLists+0xc4>)
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	6013      	str	r3, [r2, #0]
}
 800f5fc:	bf00      	nop
 800f5fe:	3718      	adds	r7, #24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	20002218 	.word	0x20002218
 800f608:	2000221c 	.word	0x2000221c

0800f60c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f612:	f000 f967 	bl	800f8e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f616:	4b15      	ldr	r3, [pc, #84]	; (800f66c <prvCheckForValidListAndQueue+0x60>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d120      	bne.n	800f660 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f61e:	4814      	ldr	r0, [pc, #80]	; (800f670 <prvCheckForValidListAndQueue+0x64>)
 800f620:	f7fd fcba 	bl	800cf98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f624:	4813      	ldr	r0, [pc, #76]	; (800f674 <prvCheckForValidListAndQueue+0x68>)
 800f626:	f7fd fcb7 	bl	800cf98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f62a:	4b13      	ldr	r3, [pc, #76]	; (800f678 <prvCheckForValidListAndQueue+0x6c>)
 800f62c:	4a10      	ldr	r2, [pc, #64]	; (800f670 <prvCheckForValidListAndQueue+0x64>)
 800f62e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f630:	4b12      	ldr	r3, [pc, #72]	; (800f67c <prvCheckForValidListAndQueue+0x70>)
 800f632:	4a10      	ldr	r2, [pc, #64]	; (800f674 <prvCheckForValidListAndQueue+0x68>)
 800f634:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f636:	2300      	movs	r3, #0
 800f638:	9300      	str	r3, [sp, #0]
 800f63a:	4b11      	ldr	r3, [pc, #68]	; (800f680 <prvCheckForValidListAndQueue+0x74>)
 800f63c:	4a11      	ldr	r2, [pc, #68]	; (800f684 <prvCheckForValidListAndQueue+0x78>)
 800f63e:	2110      	movs	r1, #16
 800f640:	200a      	movs	r0, #10
 800f642:	f7fd fdc5 	bl	800d1d0 <xQueueGenericCreateStatic>
 800f646:	4603      	mov	r3, r0
 800f648:	4a08      	ldr	r2, [pc, #32]	; (800f66c <prvCheckForValidListAndQueue+0x60>)
 800f64a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f64c:	4b07      	ldr	r3, [pc, #28]	; (800f66c <prvCheckForValidListAndQueue+0x60>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d005      	beq.n	800f660 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f654:	4b05      	ldr	r3, [pc, #20]	; (800f66c <prvCheckForValidListAndQueue+0x60>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	490b      	ldr	r1, [pc, #44]	; (800f688 <prvCheckForValidListAndQueue+0x7c>)
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fe fa98 	bl	800db90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f660:	f000 f970 	bl	800f944 <vPortExitCritical>
}
 800f664:	bf00      	nop
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	20002220 	.word	0x20002220
 800f670:	200021f0 	.word	0x200021f0
 800f674:	20002204 	.word	0x20002204
 800f678:	20002218 	.word	0x20002218
 800f67c:	2000221c 	.word	0x2000221c
 800f680:	200022cc 	.word	0x200022cc
 800f684:	2000222c 	.word	0x2000222c
 800f688:	080116ac 	.word	0x080116ac

0800f68c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f68c:	b480      	push	{r7}
 800f68e:	b085      	sub	sp, #20
 800f690:	af00      	add	r7, sp, #0
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	3b04      	subs	r3, #4
 800f69c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f6a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	3b04      	subs	r3, #4
 800f6aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	f023 0201 	bic.w	r2, r3, #1
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	3b04      	subs	r3, #4
 800f6ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f6bc:	4a0c      	ldr	r2, [pc, #48]	; (800f6f0 <pxPortInitialiseStack+0x64>)
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	3b14      	subs	r3, #20
 800f6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f6c8:	687a      	ldr	r2, [r7, #4]
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	3b04      	subs	r3, #4
 800f6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f06f 0202 	mvn.w	r2, #2
 800f6da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	3b20      	subs	r3, #32
 800f6e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3714      	adds	r7, #20
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr
 800f6f0:	0800f6f5 	.word	0x0800f6f5

0800f6f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b085      	sub	sp, #20
 800f6f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f6fe:	4b12      	ldr	r3, [pc, #72]	; (800f748 <prvTaskExitError+0x54>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f706:	d00a      	beq.n	800f71e <prvTaskExitError+0x2a>
	__asm volatile
 800f708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f70c:	f383 8811 	msr	BASEPRI, r3
 800f710:	f3bf 8f6f 	isb	sy
 800f714:	f3bf 8f4f 	dsb	sy
 800f718:	60fb      	str	r3, [r7, #12]
}
 800f71a:	bf00      	nop
 800f71c:	e7fe      	b.n	800f71c <prvTaskExitError+0x28>
	__asm volatile
 800f71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f722:	f383 8811 	msr	BASEPRI, r3
 800f726:	f3bf 8f6f 	isb	sy
 800f72a:	f3bf 8f4f 	dsb	sy
 800f72e:	60bb      	str	r3, [r7, #8]
}
 800f730:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f732:	bf00      	nop
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d0fc      	beq.n	800f734 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f73a:	bf00      	nop
 800f73c:	bf00      	nop
 800f73e:	3714      	adds	r7, #20
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr
 800f748:	20000124 	.word	0x20000124
 800f74c:	00000000 	.word	0x00000000

0800f750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f750:	4b07      	ldr	r3, [pc, #28]	; (800f770 <pxCurrentTCBConst2>)
 800f752:	6819      	ldr	r1, [r3, #0]
 800f754:	6808      	ldr	r0, [r1, #0]
 800f756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75a:	f380 8809 	msr	PSP, r0
 800f75e:	f3bf 8f6f 	isb	sy
 800f762:	f04f 0000 	mov.w	r0, #0
 800f766:	f380 8811 	msr	BASEPRI, r0
 800f76a:	4770      	bx	lr
 800f76c:	f3af 8000 	nop.w

0800f770 <pxCurrentTCBConst2>:
 800f770:	20001ce8 	.word	0x20001ce8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f774:	bf00      	nop
 800f776:	bf00      	nop

0800f778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f778:	4808      	ldr	r0, [pc, #32]	; (800f79c <prvPortStartFirstTask+0x24>)
 800f77a:	6800      	ldr	r0, [r0, #0]
 800f77c:	6800      	ldr	r0, [r0, #0]
 800f77e:	f380 8808 	msr	MSP, r0
 800f782:	f04f 0000 	mov.w	r0, #0
 800f786:	f380 8814 	msr	CONTROL, r0
 800f78a:	b662      	cpsie	i
 800f78c:	b661      	cpsie	f
 800f78e:	f3bf 8f4f 	dsb	sy
 800f792:	f3bf 8f6f 	isb	sy
 800f796:	df00      	svc	0
 800f798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f79a:	bf00      	nop
 800f79c:	e000ed08 	.word	0xe000ed08

0800f7a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b086      	sub	sp, #24
 800f7a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f7a6:	4b46      	ldr	r3, [pc, #280]	; (800f8c0 <xPortStartScheduler+0x120>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4a46      	ldr	r2, [pc, #280]	; (800f8c4 <xPortStartScheduler+0x124>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d10a      	bne.n	800f7c6 <xPortStartScheduler+0x26>
	__asm volatile
 800f7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b4:	f383 8811 	msr	BASEPRI, r3
 800f7b8:	f3bf 8f6f 	isb	sy
 800f7bc:	f3bf 8f4f 	dsb	sy
 800f7c0:	613b      	str	r3, [r7, #16]
}
 800f7c2:	bf00      	nop
 800f7c4:	e7fe      	b.n	800f7c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f7c6:	4b3e      	ldr	r3, [pc, #248]	; (800f8c0 <xPortStartScheduler+0x120>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a3f      	ldr	r2, [pc, #252]	; (800f8c8 <xPortStartScheduler+0x128>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d10a      	bne.n	800f7e6 <xPortStartScheduler+0x46>
	__asm volatile
 800f7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d4:	f383 8811 	msr	BASEPRI, r3
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	60fb      	str	r3, [r7, #12]
}
 800f7e2:	bf00      	nop
 800f7e4:	e7fe      	b.n	800f7e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f7e6:	4b39      	ldr	r3, [pc, #228]	; (800f8cc <xPortStartScheduler+0x12c>)
 800f7e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	b2db      	uxtb	r3, r3
 800f7f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	22ff      	movs	r2, #255	; 0xff
 800f7f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	b2db      	uxtb	r3, r3
 800f7fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f800:	78fb      	ldrb	r3, [r7, #3]
 800f802:	b2db      	uxtb	r3, r3
 800f804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f808:	b2da      	uxtb	r2, r3
 800f80a:	4b31      	ldr	r3, [pc, #196]	; (800f8d0 <xPortStartScheduler+0x130>)
 800f80c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f80e:	4b31      	ldr	r3, [pc, #196]	; (800f8d4 <xPortStartScheduler+0x134>)
 800f810:	2207      	movs	r2, #7
 800f812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f814:	e009      	b.n	800f82a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f816:	4b2f      	ldr	r3, [pc, #188]	; (800f8d4 <xPortStartScheduler+0x134>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	3b01      	subs	r3, #1
 800f81c:	4a2d      	ldr	r2, [pc, #180]	; (800f8d4 <xPortStartScheduler+0x134>)
 800f81e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f820:	78fb      	ldrb	r3, [r7, #3]
 800f822:	b2db      	uxtb	r3, r3
 800f824:	005b      	lsls	r3, r3, #1
 800f826:	b2db      	uxtb	r3, r3
 800f828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f82a:	78fb      	ldrb	r3, [r7, #3]
 800f82c:	b2db      	uxtb	r3, r3
 800f82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f832:	2b80      	cmp	r3, #128	; 0x80
 800f834:	d0ef      	beq.n	800f816 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f836:	4b27      	ldr	r3, [pc, #156]	; (800f8d4 <xPortStartScheduler+0x134>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f1c3 0307 	rsb	r3, r3, #7
 800f83e:	2b04      	cmp	r3, #4
 800f840:	d00a      	beq.n	800f858 <xPortStartScheduler+0xb8>
	__asm volatile
 800f842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f846:	f383 8811 	msr	BASEPRI, r3
 800f84a:	f3bf 8f6f 	isb	sy
 800f84e:	f3bf 8f4f 	dsb	sy
 800f852:	60bb      	str	r3, [r7, #8]
}
 800f854:	bf00      	nop
 800f856:	e7fe      	b.n	800f856 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f858:	4b1e      	ldr	r3, [pc, #120]	; (800f8d4 <xPortStartScheduler+0x134>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	021b      	lsls	r3, r3, #8
 800f85e:	4a1d      	ldr	r2, [pc, #116]	; (800f8d4 <xPortStartScheduler+0x134>)
 800f860:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f862:	4b1c      	ldr	r3, [pc, #112]	; (800f8d4 <xPortStartScheduler+0x134>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f86a:	4a1a      	ldr	r2, [pc, #104]	; (800f8d4 <xPortStartScheduler+0x134>)
 800f86c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	b2da      	uxtb	r2, r3
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f876:	4b18      	ldr	r3, [pc, #96]	; (800f8d8 <xPortStartScheduler+0x138>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	4a17      	ldr	r2, [pc, #92]	; (800f8d8 <xPortStartScheduler+0x138>)
 800f87c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f882:	4b15      	ldr	r3, [pc, #84]	; (800f8d8 <xPortStartScheduler+0x138>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	4a14      	ldr	r2, [pc, #80]	; (800f8d8 <xPortStartScheduler+0x138>)
 800f888:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f88c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f88e:	f000 f8dd 	bl	800fa4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f892:	4b12      	ldr	r3, [pc, #72]	; (800f8dc <xPortStartScheduler+0x13c>)
 800f894:	2200      	movs	r2, #0
 800f896:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f898:	f000 f8fc 	bl	800fa94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f89c:	4b10      	ldr	r3, [pc, #64]	; (800f8e0 <xPortStartScheduler+0x140>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4a0f      	ldr	r2, [pc, #60]	; (800f8e0 <xPortStartScheduler+0x140>)
 800f8a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f8a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f8a8:	f7ff ff66 	bl	800f778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f8ac:	f7fe fe9c 	bl	800e5e8 <vTaskSwitchContext>
	prvTaskExitError();
 800f8b0:	f7ff ff20 	bl	800f6f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f8b4:	2300      	movs	r3, #0
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3718      	adds	r7, #24
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	e000ed00 	.word	0xe000ed00
 800f8c4:	410fc271 	.word	0x410fc271
 800f8c8:	410fc270 	.word	0x410fc270
 800f8cc:	e000e400 	.word	0xe000e400
 800f8d0:	2000231c 	.word	0x2000231c
 800f8d4:	20002320 	.word	0x20002320
 800f8d8:	e000ed20 	.word	0xe000ed20
 800f8dc:	20000124 	.word	0x20000124
 800f8e0:	e000ef34 	.word	0xe000ef34

0800f8e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
	__asm volatile
 800f8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ee:	f383 8811 	msr	BASEPRI, r3
 800f8f2:	f3bf 8f6f 	isb	sy
 800f8f6:	f3bf 8f4f 	dsb	sy
 800f8fa:	607b      	str	r3, [r7, #4]
}
 800f8fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f8fe:	4b0f      	ldr	r3, [pc, #60]	; (800f93c <vPortEnterCritical+0x58>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	3301      	adds	r3, #1
 800f904:	4a0d      	ldr	r2, [pc, #52]	; (800f93c <vPortEnterCritical+0x58>)
 800f906:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f908:	4b0c      	ldr	r3, [pc, #48]	; (800f93c <vPortEnterCritical+0x58>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d10f      	bne.n	800f930 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f910:	4b0b      	ldr	r3, [pc, #44]	; (800f940 <vPortEnterCritical+0x5c>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	b2db      	uxtb	r3, r3
 800f916:	2b00      	cmp	r3, #0
 800f918:	d00a      	beq.n	800f930 <vPortEnterCritical+0x4c>
	__asm volatile
 800f91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91e:	f383 8811 	msr	BASEPRI, r3
 800f922:	f3bf 8f6f 	isb	sy
 800f926:	f3bf 8f4f 	dsb	sy
 800f92a:	603b      	str	r3, [r7, #0]
}
 800f92c:	bf00      	nop
 800f92e:	e7fe      	b.n	800f92e <vPortEnterCritical+0x4a>
	}
}
 800f930:	bf00      	nop
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr
 800f93c:	20000124 	.word	0x20000124
 800f940:	e000ed04 	.word	0xe000ed04

0800f944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f94a:	4b12      	ldr	r3, [pc, #72]	; (800f994 <vPortExitCritical+0x50>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d10a      	bne.n	800f968 <vPortExitCritical+0x24>
	__asm volatile
 800f952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f956:	f383 8811 	msr	BASEPRI, r3
 800f95a:	f3bf 8f6f 	isb	sy
 800f95e:	f3bf 8f4f 	dsb	sy
 800f962:	607b      	str	r3, [r7, #4]
}
 800f964:	bf00      	nop
 800f966:	e7fe      	b.n	800f966 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f968:	4b0a      	ldr	r3, [pc, #40]	; (800f994 <vPortExitCritical+0x50>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	3b01      	subs	r3, #1
 800f96e:	4a09      	ldr	r2, [pc, #36]	; (800f994 <vPortExitCritical+0x50>)
 800f970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f972:	4b08      	ldr	r3, [pc, #32]	; (800f994 <vPortExitCritical+0x50>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d105      	bne.n	800f986 <vPortExitCritical+0x42>
 800f97a:	2300      	movs	r3, #0
 800f97c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	f383 8811 	msr	BASEPRI, r3
}
 800f984:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f986:	bf00      	nop
 800f988:	370c      	adds	r7, #12
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	20000124 	.word	0x20000124
	...

0800f9a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f9a0:	f3ef 8009 	mrs	r0, PSP
 800f9a4:	f3bf 8f6f 	isb	sy
 800f9a8:	4b15      	ldr	r3, [pc, #84]	; (800fa00 <pxCurrentTCBConst>)
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	f01e 0f10 	tst.w	lr, #16
 800f9b0:	bf08      	it	eq
 800f9b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f9b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ba:	6010      	str	r0, [r2, #0]
 800f9bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f9c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f9c4:	f380 8811 	msr	BASEPRI, r0
 800f9c8:	f3bf 8f4f 	dsb	sy
 800f9cc:	f3bf 8f6f 	isb	sy
 800f9d0:	f7fe fe0a 	bl	800e5e8 <vTaskSwitchContext>
 800f9d4:	f04f 0000 	mov.w	r0, #0
 800f9d8:	f380 8811 	msr	BASEPRI, r0
 800f9dc:	bc09      	pop	{r0, r3}
 800f9de:	6819      	ldr	r1, [r3, #0]
 800f9e0:	6808      	ldr	r0, [r1, #0]
 800f9e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e6:	f01e 0f10 	tst.w	lr, #16
 800f9ea:	bf08      	it	eq
 800f9ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f9f0:	f380 8809 	msr	PSP, r0
 800f9f4:	f3bf 8f6f 	isb	sy
 800f9f8:	4770      	bx	lr
 800f9fa:	bf00      	nop
 800f9fc:	f3af 8000 	nop.w

0800fa00 <pxCurrentTCBConst>:
 800fa00:	20001ce8 	.word	0x20001ce8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa04:	bf00      	nop
 800fa06:	bf00      	nop

0800fa08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa12:	f383 8811 	msr	BASEPRI, r3
 800fa16:	f3bf 8f6f 	isb	sy
 800fa1a:	f3bf 8f4f 	dsb	sy
 800fa1e:	607b      	str	r3, [r7, #4]
}
 800fa20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa22:	f7fe fd27 	bl	800e474 <xTaskIncrementTick>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d003      	beq.n	800fa34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa2c:	4b06      	ldr	r3, [pc, #24]	; (800fa48 <xPortSysTickHandler+0x40>)
 800fa2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa32:	601a      	str	r2, [r3, #0]
 800fa34:	2300      	movs	r3, #0
 800fa36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	f383 8811 	msr	BASEPRI, r3
}
 800fa3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fa40:	bf00      	nop
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	e000ed04 	.word	0xe000ed04

0800fa4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fa50:	4b0b      	ldr	r3, [pc, #44]	; (800fa80 <vPortSetupTimerInterrupt+0x34>)
 800fa52:	2200      	movs	r2, #0
 800fa54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fa56:	4b0b      	ldr	r3, [pc, #44]	; (800fa84 <vPortSetupTimerInterrupt+0x38>)
 800fa58:	2200      	movs	r2, #0
 800fa5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fa5c:	4b0a      	ldr	r3, [pc, #40]	; (800fa88 <vPortSetupTimerInterrupt+0x3c>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4a0a      	ldr	r2, [pc, #40]	; (800fa8c <vPortSetupTimerInterrupt+0x40>)
 800fa62:	fba2 2303 	umull	r2, r3, r2, r3
 800fa66:	099b      	lsrs	r3, r3, #6
 800fa68:	4a09      	ldr	r2, [pc, #36]	; (800fa90 <vPortSetupTimerInterrupt+0x44>)
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fa6e:	4b04      	ldr	r3, [pc, #16]	; (800fa80 <vPortSetupTimerInterrupt+0x34>)
 800fa70:	2207      	movs	r2, #7
 800fa72:	601a      	str	r2, [r3, #0]
}
 800fa74:	bf00      	nop
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr
 800fa7e:	bf00      	nop
 800fa80:	e000e010 	.word	0xe000e010
 800fa84:	e000e018 	.word	0xe000e018
 800fa88:	2000008c 	.word	0x2000008c
 800fa8c:	10624dd3 	.word	0x10624dd3
 800fa90:	e000e014 	.word	0xe000e014

0800fa94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fa94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800faa4 <vPortEnableVFP+0x10>
 800fa98:	6801      	ldr	r1, [r0, #0]
 800fa9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fa9e:	6001      	str	r1, [r0, #0]
 800faa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800faa2:	bf00      	nop
 800faa4:	e000ed88 	.word	0xe000ed88

0800faa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800faae:	f3ef 8305 	mrs	r3, IPSR
 800fab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2b0f      	cmp	r3, #15
 800fab8:	d914      	bls.n	800fae4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800faba:	4a17      	ldr	r2, [pc, #92]	; (800fb18 <vPortValidateInterruptPriority+0x70>)
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	4413      	add	r3, r2
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fac4:	4b15      	ldr	r3, [pc, #84]	; (800fb1c <vPortValidateInterruptPriority+0x74>)
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	7afa      	ldrb	r2, [r7, #11]
 800faca:	429a      	cmp	r2, r3
 800facc:	d20a      	bcs.n	800fae4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800face:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	607b      	str	r3, [r7, #4]
}
 800fae0:	bf00      	nop
 800fae2:	e7fe      	b.n	800fae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fae4:	4b0e      	ldr	r3, [pc, #56]	; (800fb20 <vPortValidateInterruptPriority+0x78>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800faec:	4b0d      	ldr	r3, [pc, #52]	; (800fb24 <vPortValidateInterruptPriority+0x7c>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d90a      	bls.n	800fb0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800faf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf8:	f383 8811 	msr	BASEPRI, r3
 800fafc:	f3bf 8f6f 	isb	sy
 800fb00:	f3bf 8f4f 	dsb	sy
 800fb04:	603b      	str	r3, [r7, #0]
}
 800fb06:	bf00      	nop
 800fb08:	e7fe      	b.n	800fb08 <vPortValidateInterruptPriority+0x60>
	}
 800fb0a:	bf00      	nop
 800fb0c:	3714      	adds	r7, #20
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr
 800fb16:	bf00      	nop
 800fb18:	e000e3f0 	.word	0xe000e3f0
 800fb1c:	2000231c 	.word	0x2000231c
 800fb20:	e000ed0c 	.word	0xe000ed0c
 800fb24:	20002320 	.word	0x20002320

0800fb28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08a      	sub	sp, #40	; 0x28
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb30:	2300      	movs	r3, #0
 800fb32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb34:	f7fe fb52 	bl	800e1dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb38:	4b5b      	ldr	r3, [pc, #364]	; (800fca8 <pvPortMalloc+0x180>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d101      	bne.n	800fb44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb40:	f000 f920 	bl	800fd84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb44:	4b59      	ldr	r3, [pc, #356]	; (800fcac <pvPortMalloc+0x184>)
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4013      	ands	r3, r2
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f040 8093 	bne.w	800fc78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d01d      	beq.n	800fb94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fb58:	2208      	movs	r2, #8
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f003 0307 	and.w	r3, r3, #7
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d014      	beq.n	800fb94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f023 0307 	bic.w	r3, r3, #7
 800fb70:	3308      	adds	r3, #8
 800fb72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f003 0307 	and.w	r3, r3, #7
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d00a      	beq.n	800fb94 <pvPortMalloc+0x6c>
	__asm volatile
 800fb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb82:	f383 8811 	msr	BASEPRI, r3
 800fb86:	f3bf 8f6f 	isb	sy
 800fb8a:	f3bf 8f4f 	dsb	sy
 800fb8e:	617b      	str	r3, [r7, #20]
}
 800fb90:	bf00      	nop
 800fb92:	e7fe      	b.n	800fb92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d06e      	beq.n	800fc78 <pvPortMalloc+0x150>
 800fb9a:	4b45      	ldr	r3, [pc, #276]	; (800fcb0 <pvPortMalloc+0x188>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d869      	bhi.n	800fc78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fba4:	4b43      	ldr	r3, [pc, #268]	; (800fcb4 <pvPortMalloc+0x18c>)
 800fba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fba8:	4b42      	ldr	r3, [pc, #264]	; (800fcb4 <pvPortMalloc+0x18c>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbae:	e004      	b.n	800fbba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d903      	bls.n	800fbcc <pvPortMalloc+0xa4>
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d1f1      	bne.n	800fbb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fbcc:	4b36      	ldr	r3, [pc, #216]	; (800fca8 <pvPortMalloc+0x180>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d050      	beq.n	800fc78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fbd6:	6a3b      	ldr	r3, [r7, #32]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2208      	movs	r2, #8
 800fbdc:	4413      	add	r3, r2
 800fbde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	6a3b      	ldr	r3, [r7, #32]
 800fbe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbea:	685a      	ldr	r2, [r3, #4]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	1ad2      	subs	r2, r2, r3
 800fbf0:	2308      	movs	r3, #8
 800fbf2:	005b      	lsls	r3, r3, #1
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d91f      	bls.n	800fc38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fbf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc00:	69bb      	ldr	r3, [r7, #24]
 800fc02:	f003 0307 	and.w	r3, r3, #7
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d00a      	beq.n	800fc20 <pvPortMalloc+0xf8>
	__asm volatile
 800fc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0e:	f383 8811 	msr	BASEPRI, r3
 800fc12:	f3bf 8f6f 	isb	sy
 800fc16:	f3bf 8f4f 	dsb	sy
 800fc1a:	613b      	str	r3, [r7, #16]
}
 800fc1c:	bf00      	nop
 800fc1e:	e7fe      	b.n	800fc1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc22:	685a      	ldr	r2, [r3, #4]
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	1ad2      	subs	r2, r2, r3
 800fc28:	69bb      	ldr	r3, [r7, #24]
 800fc2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc32:	69b8      	ldr	r0, [r7, #24]
 800fc34:	f000 f908 	bl	800fe48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc38:	4b1d      	ldr	r3, [pc, #116]	; (800fcb0 <pvPortMalloc+0x188>)
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	1ad3      	subs	r3, r2, r3
 800fc42:	4a1b      	ldr	r2, [pc, #108]	; (800fcb0 <pvPortMalloc+0x188>)
 800fc44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc46:	4b1a      	ldr	r3, [pc, #104]	; (800fcb0 <pvPortMalloc+0x188>)
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	4b1b      	ldr	r3, [pc, #108]	; (800fcb8 <pvPortMalloc+0x190>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d203      	bcs.n	800fc5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fc52:	4b17      	ldr	r3, [pc, #92]	; (800fcb0 <pvPortMalloc+0x188>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	4a18      	ldr	r2, [pc, #96]	; (800fcb8 <pvPortMalloc+0x190>)
 800fc58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5c:	685a      	ldr	r2, [r3, #4]
 800fc5e:	4b13      	ldr	r3, [pc, #76]	; (800fcac <pvPortMalloc+0x184>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	431a      	orrs	r2, r3
 800fc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fc6e:	4b13      	ldr	r3, [pc, #76]	; (800fcbc <pvPortMalloc+0x194>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	3301      	adds	r3, #1
 800fc74:	4a11      	ldr	r2, [pc, #68]	; (800fcbc <pvPortMalloc+0x194>)
 800fc76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fc78:	f7fe fabe 	bl	800e1f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	f003 0307 	and.w	r3, r3, #7
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d00a      	beq.n	800fc9c <pvPortMalloc+0x174>
	__asm volatile
 800fc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8a:	f383 8811 	msr	BASEPRI, r3
 800fc8e:	f3bf 8f6f 	isb	sy
 800fc92:	f3bf 8f4f 	dsb	sy
 800fc96:	60fb      	str	r3, [r7, #12]
}
 800fc98:	bf00      	nop
 800fc9a:	e7fe      	b.n	800fc9a <pvPortMalloc+0x172>
	return pvReturn;
 800fc9c:	69fb      	ldr	r3, [r7, #28]
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3728      	adds	r7, #40	; 0x28
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	2001b32c 	.word	0x2001b32c
 800fcac:	2001b340 	.word	0x2001b340
 800fcb0:	2001b330 	.word	0x2001b330
 800fcb4:	2001b324 	.word	0x2001b324
 800fcb8:	2001b334 	.word	0x2001b334
 800fcbc:	2001b338 	.word	0x2001b338

0800fcc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b086      	sub	sp, #24
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d04d      	beq.n	800fd6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fcd2:	2308      	movs	r3, #8
 800fcd4:	425b      	negs	r3, r3
 800fcd6:	697a      	ldr	r2, [r7, #20]
 800fcd8:	4413      	add	r3, r2
 800fcda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	685a      	ldr	r2, [r3, #4]
 800fce4:	4b24      	ldr	r3, [pc, #144]	; (800fd78 <vPortFree+0xb8>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4013      	ands	r3, r2
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d10a      	bne.n	800fd04 <vPortFree+0x44>
	__asm volatile
 800fcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf2:	f383 8811 	msr	BASEPRI, r3
 800fcf6:	f3bf 8f6f 	isb	sy
 800fcfa:	f3bf 8f4f 	dsb	sy
 800fcfe:	60fb      	str	r3, [r7, #12]
}
 800fd00:	bf00      	nop
 800fd02:	e7fe      	b.n	800fd02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d00a      	beq.n	800fd22 <vPortFree+0x62>
	__asm volatile
 800fd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd10:	f383 8811 	msr	BASEPRI, r3
 800fd14:	f3bf 8f6f 	isb	sy
 800fd18:	f3bf 8f4f 	dsb	sy
 800fd1c:	60bb      	str	r3, [r7, #8]
}
 800fd1e:	bf00      	nop
 800fd20:	e7fe      	b.n	800fd20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	685a      	ldr	r2, [r3, #4]
 800fd26:	4b14      	ldr	r3, [pc, #80]	; (800fd78 <vPortFree+0xb8>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	4013      	ands	r3, r2
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d01e      	beq.n	800fd6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d11a      	bne.n	800fd6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	685a      	ldr	r2, [r3, #4]
 800fd3c:	4b0e      	ldr	r3, [pc, #56]	; (800fd78 <vPortFree+0xb8>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	43db      	mvns	r3, r3
 800fd42:	401a      	ands	r2, r3
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd48:	f7fe fa48 	bl	800e1dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	685a      	ldr	r2, [r3, #4]
 800fd50:	4b0a      	ldr	r3, [pc, #40]	; (800fd7c <vPortFree+0xbc>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4413      	add	r3, r2
 800fd56:	4a09      	ldr	r2, [pc, #36]	; (800fd7c <vPortFree+0xbc>)
 800fd58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fd5a:	6938      	ldr	r0, [r7, #16]
 800fd5c:	f000 f874 	bl	800fe48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fd60:	4b07      	ldr	r3, [pc, #28]	; (800fd80 <vPortFree+0xc0>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	3301      	adds	r3, #1
 800fd66:	4a06      	ldr	r2, [pc, #24]	; (800fd80 <vPortFree+0xc0>)
 800fd68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fd6a:	f7fe fa45 	bl	800e1f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fd6e:	bf00      	nop
 800fd70:	3718      	adds	r7, #24
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	2001b340 	.word	0x2001b340
 800fd7c:	2001b330 	.word	0x2001b330
 800fd80:	2001b33c 	.word	0x2001b33c

0800fd84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fd84:	b480      	push	{r7}
 800fd86:	b085      	sub	sp, #20
 800fd88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fd8a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800fd8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fd90:	4b27      	ldr	r3, [pc, #156]	; (800fe30 <prvHeapInit+0xac>)
 800fd92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f003 0307 	and.w	r3, r3, #7
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00c      	beq.n	800fdb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	3307      	adds	r3, #7
 800fda2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f023 0307 	bic.w	r3, r3, #7
 800fdaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fdac:	68ba      	ldr	r2, [r7, #8]
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	1ad3      	subs	r3, r2, r3
 800fdb2:	4a1f      	ldr	r2, [pc, #124]	; (800fe30 <prvHeapInit+0xac>)
 800fdb4:	4413      	add	r3, r2
 800fdb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fdbc:	4a1d      	ldr	r2, [pc, #116]	; (800fe34 <prvHeapInit+0xb0>)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fdc2:	4b1c      	ldr	r3, [pc, #112]	; (800fe34 <prvHeapInit+0xb0>)
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	68ba      	ldr	r2, [r7, #8]
 800fdcc:	4413      	add	r3, r2
 800fdce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fdd0:	2208      	movs	r2, #8
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	1a9b      	subs	r3, r3, r2
 800fdd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f023 0307 	bic.w	r3, r3, #7
 800fdde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	4a15      	ldr	r2, [pc, #84]	; (800fe38 <prvHeapInit+0xb4>)
 800fde4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fde6:	4b14      	ldr	r3, [pc, #80]	; (800fe38 <prvHeapInit+0xb4>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2200      	movs	r2, #0
 800fdec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fdee:	4b12      	ldr	r3, [pc, #72]	; (800fe38 <prvHeapInit+0xb4>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	68fa      	ldr	r2, [r7, #12]
 800fdfe:	1ad2      	subs	r2, r2, r3
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe04:	4b0c      	ldr	r3, [pc, #48]	; (800fe38 <prvHeapInit+0xb4>)
 800fe06:	681a      	ldr	r2, [r3, #0]
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	4a0a      	ldr	r2, [pc, #40]	; (800fe3c <prvHeapInit+0xb8>)
 800fe12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	4a09      	ldr	r2, [pc, #36]	; (800fe40 <prvHeapInit+0xbc>)
 800fe1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe1c:	4b09      	ldr	r3, [pc, #36]	; (800fe44 <prvHeapInit+0xc0>)
 800fe1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe22:	601a      	str	r2, [r3, #0]
}
 800fe24:	bf00      	nop
 800fe26:	3714      	adds	r7, #20
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr
 800fe30:	20002324 	.word	0x20002324
 800fe34:	2001b324 	.word	0x2001b324
 800fe38:	2001b32c 	.word	0x2001b32c
 800fe3c:	2001b334 	.word	0x2001b334
 800fe40:	2001b330 	.word	0x2001b330
 800fe44:	2001b340 	.word	0x2001b340

0800fe48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe50:	4b28      	ldr	r3, [pc, #160]	; (800fef4 <prvInsertBlockIntoFreeList+0xac>)
 800fe52:	60fb      	str	r3, [r7, #12]
 800fe54:	e002      	b.n	800fe5c <prvInsertBlockIntoFreeList+0x14>
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	60fb      	str	r3, [r7, #12]
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d8f7      	bhi.n	800fe56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	68ba      	ldr	r2, [r7, #8]
 800fe70:	4413      	add	r3, r2
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d108      	bne.n	800fe8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	685a      	ldr	r2, [r3, #4]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	441a      	add	r2, r3
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	68ba      	ldr	r2, [r7, #8]
 800fe94:	441a      	add	r2, r3
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d118      	bne.n	800fed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	4b15      	ldr	r3, [pc, #84]	; (800fef8 <prvInsertBlockIntoFreeList+0xb0>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d00d      	beq.n	800fec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	685a      	ldr	r2, [r3, #4]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	441a      	add	r2, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	601a      	str	r2, [r3, #0]
 800fec4:	e008      	b.n	800fed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fec6:	4b0c      	ldr	r3, [pc, #48]	; (800fef8 <prvInsertBlockIntoFreeList+0xb0>)
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	601a      	str	r2, [r3, #0]
 800fece:	e003      	b.n	800fed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681a      	ldr	r2, [r3, #0]
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fed8:	68fa      	ldr	r2, [r7, #12]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	429a      	cmp	r2, r3
 800fede:	d002      	beq.n	800fee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fee6:	bf00      	nop
 800fee8:	3714      	adds	r7, #20
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr
 800fef2:	bf00      	nop
 800fef4:	2001b324 	.word	0x2001b324
 800fef8:	2001b32c 	.word	0x2001b32c

0800fefc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ff00:	2200      	movs	r2, #0
 800ff02:	4912      	ldr	r1, [pc, #72]	; (800ff4c <MX_USB_DEVICE_Init+0x50>)
 800ff04:	4812      	ldr	r0, [pc, #72]	; (800ff50 <MX_USB_DEVICE_Init+0x54>)
 800ff06:	f7fb fab5 	bl	800b474 <USBD_Init>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d001      	beq.n	800ff14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ff10:	f7f1 fed0 	bl	8001cb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ff14:	490f      	ldr	r1, [pc, #60]	; (800ff54 <MX_USB_DEVICE_Init+0x58>)
 800ff16:	480e      	ldr	r0, [pc, #56]	; (800ff50 <MX_USB_DEVICE_Init+0x54>)
 800ff18:	f7fb fadc 	bl	800b4d4 <USBD_RegisterClass>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d001      	beq.n	800ff26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ff22:	f7f1 fec7 	bl	8001cb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ff26:	490c      	ldr	r1, [pc, #48]	; (800ff58 <MX_USB_DEVICE_Init+0x5c>)
 800ff28:	4809      	ldr	r0, [pc, #36]	; (800ff50 <MX_USB_DEVICE_Init+0x54>)
 800ff2a:	f7fb fa13 	bl	800b354 <USBD_CDC_RegisterInterface>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d001      	beq.n	800ff38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ff34:	f7f1 febe 	bl	8001cb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ff38:	4805      	ldr	r0, [pc, #20]	; (800ff50 <MX_USB_DEVICE_Init+0x54>)
 800ff3a:	f7fb fb01 	bl	800b540 <USBD_Start>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d001      	beq.n	800ff48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ff44:	f7f1 feb6 	bl	8001cb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ff48:	bf00      	nop
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	2000013c 	.word	0x2000013c
 800ff50:	2001b344 	.word	0x2001b344
 800ff54:	200000a4 	.word	0x200000a4
 800ff58:	20000128 	.word	0x20000128

0800ff5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ff60:	2200      	movs	r2, #0
 800ff62:	4905      	ldr	r1, [pc, #20]	; (800ff78 <CDC_Init_FS+0x1c>)
 800ff64:	4805      	ldr	r0, [pc, #20]	; (800ff7c <CDC_Init_FS+0x20>)
 800ff66:	f7fb fa0f 	bl	800b388 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ff6a:	4905      	ldr	r1, [pc, #20]	; (800ff80 <CDC_Init_FS+0x24>)
 800ff6c:	4803      	ldr	r0, [pc, #12]	; (800ff7c <CDC_Init_FS+0x20>)
 800ff6e:	f7fb fa2d 	bl	800b3cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ff72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	2001be20 	.word	0x2001be20
 800ff7c:	2001b344 	.word	0x2001b344
 800ff80:	2001b620 	.word	0x2001b620

0800ff84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ff84:	b480      	push	{r7}
 800ff86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ff88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b083      	sub	sp, #12
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	6039      	str	r1, [r7, #0]
 800ff9e:	71fb      	strb	r3, [r7, #7]
 800ffa0:	4613      	mov	r3, r2
 800ffa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ffa4:	79fb      	ldrb	r3, [r7, #7]
 800ffa6:	2b23      	cmp	r3, #35	; 0x23
 800ffa8:	d84a      	bhi.n	8010040 <CDC_Control_FS+0xac>
 800ffaa:	a201      	add	r2, pc, #4	; (adr r2, 800ffb0 <CDC_Control_FS+0x1c>)
 800ffac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb0:	08010041 	.word	0x08010041
 800ffb4:	08010041 	.word	0x08010041
 800ffb8:	08010041 	.word	0x08010041
 800ffbc:	08010041 	.word	0x08010041
 800ffc0:	08010041 	.word	0x08010041
 800ffc4:	08010041 	.word	0x08010041
 800ffc8:	08010041 	.word	0x08010041
 800ffcc:	08010041 	.word	0x08010041
 800ffd0:	08010041 	.word	0x08010041
 800ffd4:	08010041 	.word	0x08010041
 800ffd8:	08010041 	.word	0x08010041
 800ffdc:	08010041 	.word	0x08010041
 800ffe0:	08010041 	.word	0x08010041
 800ffe4:	08010041 	.word	0x08010041
 800ffe8:	08010041 	.word	0x08010041
 800ffec:	08010041 	.word	0x08010041
 800fff0:	08010041 	.word	0x08010041
 800fff4:	08010041 	.word	0x08010041
 800fff8:	08010041 	.word	0x08010041
 800fffc:	08010041 	.word	0x08010041
 8010000:	08010041 	.word	0x08010041
 8010004:	08010041 	.word	0x08010041
 8010008:	08010041 	.word	0x08010041
 801000c:	08010041 	.word	0x08010041
 8010010:	08010041 	.word	0x08010041
 8010014:	08010041 	.word	0x08010041
 8010018:	08010041 	.word	0x08010041
 801001c:	08010041 	.word	0x08010041
 8010020:	08010041 	.word	0x08010041
 8010024:	08010041 	.word	0x08010041
 8010028:	08010041 	.word	0x08010041
 801002c:	08010041 	.word	0x08010041
 8010030:	08010041 	.word	0x08010041
 8010034:	08010041 	.word	0x08010041
 8010038:	08010041 	.word	0x08010041
 801003c:	08010041 	.word	0x08010041
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010040:	bf00      	nop
  }

  return (USBD_OK);
 8010042:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010044:	4618      	mov	r0, r3
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801005a:	6879      	ldr	r1, [r7, #4]
 801005c:	4805      	ldr	r0, [pc, #20]	; (8010074 <CDC_Receive_FS+0x24>)
 801005e:	f7fb f9b5 	bl	800b3cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010062:	4804      	ldr	r0, [pc, #16]	; (8010074 <CDC_Receive_FS+0x24>)
 8010064:	f7fb f9d0 	bl	800b408 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010068:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801006a:	4618      	mov	r0, r3
 801006c:	3708      	adds	r7, #8
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}
 8010072:	bf00      	nop
 8010074:	2001b344 	.word	0x2001b344

08010078 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010078:	b480      	push	{r7}
 801007a:	b087      	sub	sp, #28
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	4613      	mov	r3, r2
 8010084:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010086:	2300      	movs	r3, #0
 8010088:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801008a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801008e:	4618      	mov	r0, r3
 8010090:	371c      	adds	r7, #28
 8010092:	46bd      	mov	sp, r7
 8010094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010098:	4770      	bx	lr
	...

0801009c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801009c:	b480      	push	{r7}
 801009e:	b083      	sub	sp, #12
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	4603      	mov	r3, r0
 80100a4:	6039      	str	r1, [r7, #0]
 80100a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	2212      	movs	r2, #18
 80100ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80100ae:	4b03      	ldr	r3, [pc, #12]	; (80100bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr
 80100bc:	20000158 	.word	0x20000158

080100c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	4603      	mov	r3, r0
 80100c8:	6039      	str	r1, [r7, #0]
 80100ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	2204      	movs	r2, #4
 80100d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80100d2:	4b03      	ldr	r3, [pc, #12]	; (80100e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr
 80100e0:	2000016c 	.word	0x2000016c

080100e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	4603      	mov	r3, r0
 80100ec:	6039      	str	r1, [r7, #0]
 80100ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80100f0:	79fb      	ldrb	r3, [r7, #7]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d105      	bne.n	8010102 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80100f6:	683a      	ldr	r2, [r7, #0]
 80100f8:	4907      	ldr	r1, [pc, #28]	; (8010118 <USBD_FS_ProductStrDescriptor+0x34>)
 80100fa:	4808      	ldr	r0, [pc, #32]	; (801011c <USBD_FS_ProductStrDescriptor+0x38>)
 80100fc:	f7fc fbcc 	bl	800c898 <USBD_GetString>
 8010100:	e004      	b.n	801010c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010102:	683a      	ldr	r2, [r7, #0]
 8010104:	4904      	ldr	r1, [pc, #16]	; (8010118 <USBD_FS_ProductStrDescriptor+0x34>)
 8010106:	4805      	ldr	r0, [pc, #20]	; (801011c <USBD_FS_ProductStrDescriptor+0x38>)
 8010108:	f7fc fbc6 	bl	800c898 <USBD_GetString>
  }
  return USBD_StrDesc;
 801010c:	4b02      	ldr	r3, [pc, #8]	; (8010118 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801010e:	4618      	mov	r0, r3
 8010110:	3708      	adds	r7, #8
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	2001c620 	.word	0x2001c620
 801011c:	080116b4 	.word	0x080116b4

08010120 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	4603      	mov	r3, r0
 8010128:	6039      	str	r1, [r7, #0]
 801012a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801012c:	683a      	ldr	r2, [r7, #0]
 801012e:	4904      	ldr	r1, [pc, #16]	; (8010140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010130:	4804      	ldr	r0, [pc, #16]	; (8010144 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010132:	f7fc fbb1 	bl	800c898 <USBD_GetString>
  return USBD_StrDesc;
 8010136:	4b02      	ldr	r3, [pc, #8]	; (8010140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010138:	4618      	mov	r0, r3
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}
 8010140:	2001c620 	.word	0x2001c620
 8010144:	080116cc 	.word	0x080116cc

08010148 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	4603      	mov	r3, r0
 8010150:	6039      	str	r1, [r7, #0]
 8010152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	221a      	movs	r2, #26
 8010158:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801015a:	f000 f843 	bl	80101e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801015e:	4b02      	ldr	r3, [pc, #8]	; (8010168 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010160:	4618      	mov	r0, r3
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	20000170 	.word	0x20000170

0801016c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
 8010172:	4603      	mov	r3, r0
 8010174:	6039      	str	r1, [r7, #0]
 8010176:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d105      	bne.n	801018a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801017e:	683a      	ldr	r2, [r7, #0]
 8010180:	4907      	ldr	r1, [pc, #28]	; (80101a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010182:	4808      	ldr	r0, [pc, #32]	; (80101a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010184:	f7fc fb88 	bl	800c898 <USBD_GetString>
 8010188:	e004      	b.n	8010194 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801018a:	683a      	ldr	r2, [r7, #0]
 801018c:	4904      	ldr	r1, [pc, #16]	; (80101a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801018e:	4805      	ldr	r0, [pc, #20]	; (80101a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010190:	f7fc fb82 	bl	800c898 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010194:	4b02      	ldr	r3, [pc, #8]	; (80101a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010196:	4618      	mov	r0, r3
 8010198:	3708      	adds	r7, #8
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	2001c620 	.word	0x2001c620
 80101a4:	080116e0 	.word	0x080116e0

080101a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	4603      	mov	r3, r0
 80101b0:	6039      	str	r1, [r7, #0]
 80101b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101b4:	79fb      	ldrb	r3, [r7, #7]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d105      	bne.n	80101c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101ba:	683a      	ldr	r2, [r7, #0]
 80101bc:	4907      	ldr	r1, [pc, #28]	; (80101dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101be:	4808      	ldr	r0, [pc, #32]	; (80101e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101c0:	f7fc fb6a 	bl	800c898 <USBD_GetString>
 80101c4:	e004      	b.n	80101d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101c6:	683a      	ldr	r2, [r7, #0]
 80101c8:	4904      	ldr	r1, [pc, #16]	; (80101dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101ca:	4805      	ldr	r0, [pc, #20]	; (80101e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101cc:	f7fc fb64 	bl	800c898 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101d0:	4b02      	ldr	r3, [pc, #8]	; (80101dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	2001c620 	.word	0x2001c620
 80101e0:	080116ec 	.word	0x080116ec

080101e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80101ea:	4b0f      	ldr	r3, [pc, #60]	; (8010228 <Get_SerialNum+0x44>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80101f0:	4b0e      	ldr	r3, [pc, #56]	; (801022c <Get_SerialNum+0x48>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80101f6:	4b0e      	ldr	r3, [pc, #56]	; (8010230 <Get_SerialNum+0x4c>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4413      	add	r3, r2
 8010202:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d009      	beq.n	801021e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801020a:	2208      	movs	r2, #8
 801020c:	4909      	ldr	r1, [pc, #36]	; (8010234 <Get_SerialNum+0x50>)
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f000 f814 	bl	801023c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010214:	2204      	movs	r2, #4
 8010216:	4908      	ldr	r1, [pc, #32]	; (8010238 <Get_SerialNum+0x54>)
 8010218:	68b8      	ldr	r0, [r7, #8]
 801021a:	f000 f80f 	bl	801023c <IntToUnicode>
  }
}
 801021e:	bf00      	nop
 8010220:	3710      	adds	r7, #16
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	1fff7a10 	.word	0x1fff7a10
 801022c:	1fff7a14 	.word	0x1fff7a14
 8010230:	1fff7a18 	.word	0x1fff7a18
 8010234:	20000172 	.word	0x20000172
 8010238:	20000182 	.word	0x20000182

0801023c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801023c:	b480      	push	{r7}
 801023e:	b087      	sub	sp, #28
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	4613      	mov	r3, r2
 8010248:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801024a:	2300      	movs	r3, #0
 801024c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801024e:	2300      	movs	r3, #0
 8010250:	75fb      	strb	r3, [r7, #23]
 8010252:	e027      	b.n	80102a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	0f1b      	lsrs	r3, r3, #28
 8010258:	2b09      	cmp	r3, #9
 801025a:	d80b      	bhi.n	8010274 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	0f1b      	lsrs	r3, r3, #28
 8010260:	b2da      	uxtb	r2, r3
 8010262:	7dfb      	ldrb	r3, [r7, #23]
 8010264:	005b      	lsls	r3, r3, #1
 8010266:	4619      	mov	r1, r3
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	440b      	add	r3, r1
 801026c:	3230      	adds	r2, #48	; 0x30
 801026e:	b2d2      	uxtb	r2, r2
 8010270:	701a      	strb	r2, [r3, #0]
 8010272:	e00a      	b.n	801028a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	0f1b      	lsrs	r3, r3, #28
 8010278:	b2da      	uxtb	r2, r3
 801027a:	7dfb      	ldrb	r3, [r7, #23]
 801027c:	005b      	lsls	r3, r3, #1
 801027e:	4619      	mov	r1, r3
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	440b      	add	r3, r1
 8010284:	3237      	adds	r2, #55	; 0x37
 8010286:	b2d2      	uxtb	r2, r2
 8010288:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	011b      	lsls	r3, r3, #4
 801028e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010290:	7dfb      	ldrb	r3, [r7, #23]
 8010292:	005b      	lsls	r3, r3, #1
 8010294:	3301      	adds	r3, #1
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	4413      	add	r3, r2
 801029a:	2200      	movs	r2, #0
 801029c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801029e:	7dfb      	ldrb	r3, [r7, #23]
 80102a0:	3301      	adds	r3, #1
 80102a2:	75fb      	strb	r3, [r7, #23]
 80102a4:	7dfa      	ldrb	r2, [r7, #23]
 80102a6:	79fb      	ldrb	r3, [r7, #7]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d3d3      	bcc.n	8010254 <IntToUnicode+0x18>
  }
}
 80102ac:	bf00      	nop
 80102ae:	bf00      	nop
 80102b0:	371c      	adds	r7, #28
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr
	...

080102bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b08a      	sub	sp, #40	; 0x28
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102c4:	f107 0314 	add.w	r3, r7, #20
 80102c8:	2200      	movs	r2, #0
 80102ca:	601a      	str	r2, [r3, #0]
 80102cc:	605a      	str	r2, [r3, #4]
 80102ce:	609a      	str	r2, [r3, #8]
 80102d0:	60da      	str	r2, [r3, #12]
 80102d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80102dc:	d13a      	bne.n	8010354 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80102de:	2300      	movs	r3, #0
 80102e0:	613b      	str	r3, [r7, #16]
 80102e2:	4b1e      	ldr	r3, [pc, #120]	; (801035c <HAL_PCD_MspInit+0xa0>)
 80102e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102e6:	4a1d      	ldr	r2, [pc, #116]	; (801035c <HAL_PCD_MspInit+0xa0>)
 80102e8:	f043 0301 	orr.w	r3, r3, #1
 80102ec:	6313      	str	r3, [r2, #48]	; 0x30
 80102ee:	4b1b      	ldr	r3, [pc, #108]	; (801035c <HAL_PCD_MspInit+0xa0>)
 80102f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102f2:	f003 0301 	and.w	r3, r3, #1
 80102f6:	613b      	str	r3, [r7, #16]
 80102f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80102fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80102fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010300:	2302      	movs	r3, #2
 8010302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010304:	2300      	movs	r3, #0
 8010306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010308:	2303      	movs	r3, #3
 801030a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801030c:	230a      	movs	r3, #10
 801030e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010310:	f107 0314 	add.w	r3, r7, #20
 8010314:	4619      	mov	r1, r3
 8010316:	4812      	ldr	r0, [pc, #72]	; (8010360 <HAL_PCD_MspInit+0xa4>)
 8010318:	f7f3 fb7e 	bl	8003a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801031c:	4b0f      	ldr	r3, [pc, #60]	; (801035c <HAL_PCD_MspInit+0xa0>)
 801031e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010320:	4a0e      	ldr	r2, [pc, #56]	; (801035c <HAL_PCD_MspInit+0xa0>)
 8010322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010326:	6353      	str	r3, [r2, #52]	; 0x34
 8010328:	2300      	movs	r3, #0
 801032a:	60fb      	str	r3, [r7, #12]
 801032c:	4b0b      	ldr	r3, [pc, #44]	; (801035c <HAL_PCD_MspInit+0xa0>)
 801032e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010330:	4a0a      	ldr	r2, [pc, #40]	; (801035c <HAL_PCD_MspInit+0xa0>)
 8010332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010336:	6453      	str	r3, [r2, #68]	; 0x44
 8010338:	4b08      	ldr	r3, [pc, #32]	; (801035c <HAL_PCD_MspInit+0xa0>)
 801033a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801033c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010340:	60fb      	str	r3, [r7, #12]
 8010342:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010344:	2200      	movs	r2, #0
 8010346:	2105      	movs	r1, #5
 8010348:	2043      	movs	r0, #67	; 0x43
 801034a:	f7f2 fe15 	bl	8002f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801034e:	2043      	movs	r0, #67	; 0x43
 8010350:	f7f2 fe3e 	bl	8002fd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010354:	bf00      	nop
 8010356:	3728      	adds	r7, #40	; 0x28
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	40023800 	.word	0x40023800
 8010360:	40020000 	.word	0x40020000

08010364 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010378:	4619      	mov	r1, r3
 801037a:	4610      	mov	r0, r2
 801037c:	f7fb f92d 	bl	800b5da <USBD_LL_SetupStage>
}
 8010380:	bf00      	nop
 8010382:	3708      	adds	r7, #8
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	460b      	mov	r3, r1
 8010392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801039a:	78fa      	ldrb	r2, [r7, #3]
 801039c:	6879      	ldr	r1, [r7, #4]
 801039e:	4613      	mov	r3, r2
 80103a0:	00db      	lsls	r3, r3, #3
 80103a2:	4413      	add	r3, r2
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	440b      	add	r3, r1
 80103a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	78fb      	ldrb	r3, [r7, #3]
 80103b0:	4619      	mov	r1, r3
 80103b2:	f7fb f967 	bl	800b684 <USBD_LL_DataOutStage>
}
 80103b6:	bf00      	nop
 80103b8:	3708      	adds	r7, #8
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b082      	sub	sp, #8
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
 80103c6:	460b      	mov	r3, r1
 80103c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80103d0:	78fa      	ldrb	r2, [r7, #3]
 80103d2:	6879      	ldr	r1, [r7, #4]
 80103d4:	4613      	mov	r3, r2
 80103d6:	00db      	lsls	r3, r3, #3
 80103d8:	4413      	add	r3, r2
 80103da:	009b      	lsls	r3, r3, #2
 80103dc:	440b      	add	r3, r1
 80103de:	334c      	adds	r3, #76	; 0x4c
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	78fb      	ldrb	r3, [r7, #3]
 80103e4:	4619      	mov	r1, r3
 80103e6:	f7fb fa00 	bl	800b7ea <USBD_LL_DataInStage>
}
 80103ea:	bf00      	nop
 80103ec:	3708      	adds	r7, #8
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}

080103f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103f2:	b580      	push	{r7, lr}
 80103f4:	b082      	sub	sp, #8
 80103f6:	af00      	add	r7, sp, #0
 80103f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010400:	4618      	mov	r0, r3
 8010402:	f7fb fb34 	bl	800ba6e <USBD_LL_SOF>
}
 8010406:	bf00      	nop
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}

0801040e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801040e:	b580      	push	{r7, lr}
 8010410:	b084      	sub	sp, #16
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010416:	2301      	movs	r3, #1
 8010418:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	2b02      	cmp	r3, #2
 8010420:	d001      	beq.n	8010426 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010422:	f7f1 fc47 	bl	8001cb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801042c:	7bfa      	ldrb	r2, [r7, #15]
 801042e:	4611      	mov	r1, r2
 8010430:	4618      	mov	r0, r3
 8010432:	f7fb fade 	bl	800b9f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801043c:	4618      	mov	r0, r3
 801043e:	f7fb fa86 	bl	800b94e <USBD_LL_Reset>
}
 8010442:	bf00      	nop
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
	...

0801044c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801045a:	4618      	mov	r0, r3
 801045c:	f7fb fad9 	bl	800ba12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	6812      	ldr	r2, [r2, #0]
 801046e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010472:	f043 0301 	orr.w	r3, r3, #1
 8010476:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6a1b      	ldr	r3, [r3, #32]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d005      	beq.n	801048c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010480:	4b04      	ldr	r3, [pc, #16]	; (8010494 <HAL_PCD_SuspendCallback+0x48>)
 8010482:	691b      	ldr	r3, [r3, #16]
 8010484:	4a03      	ldr	r2, [pc, #12]	; (8010494 <HAL_PCD_SuspendCallback+0x48>)
 8010486:	f043 0306 	orr.w	r3, r3, #6
 801048a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801048c:	bf00      	nop
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}
 8010494:	e000ed00 	.word	0xe000ed00

08010498 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7fb fac9 	bl	800ba3e <USBD_LL_Resume>
}
 80104ac:	bf00      	nop
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}

080104b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	460b      	mov	r3, r1
 80104be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80104c6:	78fa      	ldrb	r2, [r7, #3]
 80104c8:	4611      	mov	r1, r2
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7fb fb21 	bl	800bb12 <USBD_LL_IsoOUTIncomplete>
}
 80104d0:	bf00      	nop
 80104d2:	3708      	adds	r7, #8
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	460b      	mov	r3, r1
 80104e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80104ea:	78fa      	ldrb	r2, [r7, #3]
 80104ec:	4611      	mov	r1, r2
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7fb fadd 	bl	800baae <USBD_LL_IsoINIncomplete>
}
 80104f4:	bf00      	nop
 80104f6:	3708      	adds	r7, #8
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801050a:	4618      	mov	r0, r3
 801050c:	f7fb fb33 	bl	800bb76 <USBD_LL_DevConnected>
}
 8010510:	bf00      	nop
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010526:	4618      	mov	r0, r3
 8010528:	f7fb fb30 	bl	800bb8c <USBD_LL_DevDisconnected>
}
 801052c:	bf00      	nop
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d13c      	bne.n	80105be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010544:	4a20      	ldr	r2, [pc, #128]	; (80105c8 <USBD_LL_Init+0x94>)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	4a1e      	ldr	r2, [pc, #120]	; (80105c8 <USBD_LL_Init+0x94>)
 8010550:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010554:	4b1c      	ldr	r3, [pc, #112]	; (80105c8 <USBD_LL_Init+0x94>)
 8010556:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801055a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801055c:	4b1a      	ldr	r3, [pc, #104]	; (80105c8 <USBD_LL_Init+0x94>)
 801055e:	2204      	movs	r2, #4
 8010560:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010562:	4b19      	ldr	r3, [pc, #100]	; (80105c8 <USBD_LL_Init+0x94>)
 8010564:	2202      	movs	r2, #2
 8010566:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010568:	4b17      	ldr	r3, [pc, #92]	; (80105c8 <USBD_LL_Init+0x94>)
 801056a:	2200      	movs	r2, #0
 801056c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801056e:	4b16      	ldr	r3, [pc, #88]	; (80105c8 <USBD_LL_Init+0x94>)
 8010570:	2202      	movs	r2, #2
 8010572:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010574:	4b14      	ldr	r3, [pc, #80]	; (80105c8 <USBD_LL_Init+0x94>)
 8010576:	2200      	movs	r2, #0
 8010578:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801057a:	4b13      	ldr	r3, [pc, #76]	; (80105c8 <USBD_LL_Init+0x94>)
 801057c:	2200      	movs	r2, #0
 801057e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010580:	4b11      	ldr	r3, [pc, #68]	; (80105c8 <USBD_LL_Init+0x94>)
 8010582:	2200      	movs	r2, #0
 8010584:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010586:	4b10      	ldr	r3, [pc, #64]	; (80105c8 <USBD_LL_Init+0x94>)
 8010588:	2200      	movs	r2, #0
 801058a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801058c:	4b0e      	ldr	r3, [pc, #56]	; (80105c8 <USBD_LL_Init+0x94>)
 801058e:	2200      	movs	r2, #0
 8010590:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010592:	480d      	ldr	r0, [pc, #52]	; (80105c8 <USBD_LL_Init+0x94>)
 8010594:	f7f3 fd4c 	bl	8004030 <HAL_PCD_Init>
 8010598:	4603      	mov	r3, r0
 801059a:	2b00      	cmp	r3, #0
 801059c:	d001      	beq.n	80105a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801059e:	f7f1 fb89 	bl	8001cb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80105a2:	2180      	movs	r1, #128	; 0x80
 80105a4:	4808      	ldr	r0, [pc, #32]	; (80105c8 <USBD_LL_Init+0x94>)
 80105a6:	f7f4 ffae 	bl	8005506 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80105aa:	2240      	movs	r2, #64	; 0x40
 80105ac:	2100      	movs	r1, #0
 80105ae:	4806      	ldr	r0, [pc, #24]	; (80105c8 <USBD_LL_Init+0x94>)
 80105b0:	f7f4 ff62 	bl	8005478 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80105b4:	2280      	movs	r2, #128	; 0x80
 80105b6:	2101      	movs	r1, #1
 80105b8:	4803      	ldr	r0, [pc, #12]	; (80105c8 <USBD_LL_Init+0x94>)
 80105ba:	f7f4 ff5d 	bl	8005478 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80105be:	2300      	movs	r3, #0
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3708      	adds	r7, #8
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	2001c820 	.word	0x2001c820

080105cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105d4:	2300      	movs	r3, #0
 80105d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105d8:	2300      	movs	r3, #0
 80105da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7f3 fe4c 	bl	8004280 <HAL_PCD_Start>
 80105e8:	4603      	mov	r3, r0
 80105ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105ec:	7bfb      	ldrb	r3, [r7, #15]
 80105ee:	4618      	mov	r0, r3
 80105f0:	f000 f942 	bl	8010878 <USBD_Get_USB_Status>
 80105f4:	4603      	mov	r3, r0
 80105f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3710      	adds	r7, #16
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010602:	b580      	push	{r7, lr}
 8010604:	b084      	sub	sp, #16
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
 801060a:	4608      	mov	r0, r1
 801060c:	4611      	mov	r1, r2
 801060e:	461a      	mov	r2, r3
 8010610:	4603      	mov	r3, r0
 8010612:	70fb      	strb	r3, [r7, #3]
 8010614:	460b      	mov	r3, r1
 8010616:	70bb      	strb	r3, [r7, #2]
 8010618:	4613      	mov	r3, r2
 801061a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801061c:	2300      	movs	r3, #0
 801061e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010620:	2300      	movs	r3, #0
 8010622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801062a:	78bb      	ldrb	r3, [r7, #2]
 801062c:	883a      	ldrh	r2, [r7, #0]
 801062e:	78f9      	ldrb	r1, [r7, #3]
 8010630:	f7f4 fb1d 	bl	8004c6e <HAL_PCD_EP_Open>
 8010634:	4603      	mov	r3, r0
 8010636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010638:	7bfb      	ldrb	r3, [r7, #15]
 801063a:	4618      	mov	r0, r3
 801063c:	f000 f91c 	bl	8010878 <USBD_Get_USB_Status>
 8010640:	4603      	mov	r3, r0
 8010642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010644:	7bbb      	ldrb	r3, [r7, #14]
}
 8010646:	4618      	mov	r0, r3
 8010648:	3710      	adds	r7, #16
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801064e:	b580      	push	{r7, lr}
 8010650:	b084      	sub	sp, #16
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
 8010656:	460b      	mov	r3, r1
 8010658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801065a:	2300      	movs	r3, #0
 801065c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801065e:	2300      	movs	r3, #0
 8010660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010668:	78fa      	ldrb	r2, [r7, #3]
 801066a:	4611      	mov	r1, r2
 801066c:	4618      	mov	r0, r3
 801066e:	f7f4 fb66 	bl	8004d3e <HAL_PCD_EP_Close>
 8010672:	4603      	mov	r3, r0
 8010674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010676:	7bfb      	ldrb	r3, [r7, #15]
 8010678:	4618      	mov	r0, r3
 801067a:	f000 f8fd 	bl	8010878 <USBD_Get_USB_Status>
 801067e:	4603      	mov	r3, r0
 8010680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010682:	7bbb      	ldrb	r3, [r7, #14]
}
 8010684:	4618      	mov	r0, r3
 8010686:	3710      	adds	r7, #16
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}

0801068c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	460b      	mov	r3, r1
 8010696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010698:	2300      	movs	r3, #0
 801069a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801069c:	2300      	movs	r3, #0
 801069e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80106a6:	78fa      	ldrb	r2, [r7, #3]
 80106a8:	4611      	mov	r1, r2
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7f4 fc3e 	bl	8004f2c <HAL_PCD_EP_SetStall>
 80106b0:	4603      	mov	r3, r0
 80106b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106b4:	7bfb      	ldrb	r3, [r7, #15]
 80106b6:	4618      	mov	r0, r3
 80106b8:	f000 f8de 	bl	8010878 <USBD_Get_USB_Status>
 80106bc:	4603      	mov	r3, r0
 80106be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3710      	adds	r7, #16
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106ca:	b580      	push	{r7, lr}
 80106cc:	b084      	sub	sp, #16
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
 80106d2:	460b      	mov	r3, r1
 80106d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106d6:	2300      	movs	r3, #0
 80106d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106da:	2300      	movs	r3, #0
 80106dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80106e4:	78fa      	ldrb	r2, [r7, #3]
 80106e6:	4611      	mov	r1, r2
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7f4 fc83 	bl	8004ff4 <HAL_PCD_EP_ClrStall>
 80106ee:	4603      	mov	r3, r0
 80106f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106f2:	7bfb      	ldrb	r3, [r7, #15]
 80106f4:	4618      	mov	r0, r3
 80106f6:	f000 f8bf 	bl	8010878 <USBD_Get_USB_Status>
 80106fa:	4603      	mov	r3, r0
 80106fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010700:	4618      	mov	r0, r3
 8010702:	3710      	adds	r7, #16
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010708:	b480      	push	{r7}
 801070a:	b085      	sub	sp, #20
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	460b      	mov	r3, r1
 8010712:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801071a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801071c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010720:	2b00      	cmp	r3, #0
 8010722:	da0b      	bge.n	801073c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010724:	78fb      	ldrb	r3, [r7, #3]
 8010726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801072a:	68f9      	ldr	r1, [r7, #12]
 801072c:	4613      	mov	r3, r2
 801072e:	00db      	lsls	r3, r3, #3
 8010730:	4413      	add	r3, r2
 8010732:	009b      	lsls	r3, r3, #2
 8010734:	440b      	add	r3, r1
 8010736:	333e      	adds	r3, #62	; 0x3e
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	e00b      	b.n	8010754 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801073c:	78fb      	ldrb	r3, [r7, #3]
 801073e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010742:	68f9      	ldr	r1, [r7, #12]
 8010744:	4613      	mov	r3, r2
 8010746:	00db      	lsls	r3, r3, #3
 8010748:	4413      	add	r3, r2
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	440b      	add	r3, r1
 801074e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010752:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010754:	4618      	mov	r0, r3
 8010756:	3714      	adds	r7, #20
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	4770      	bx	lr

08010760 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	460b      	mov	r3, r1
 801076a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801076c:	2300      	movs	r3, #0
 801076e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010770:	2300      	movs	r3, #0
 8010772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801077a:	78fa      	ldrb	r2, [r7, #3]
 801077c:	4611      	mov	r1, r2
 801077e:	4618      	mov	r0, r3
 8010780:	f7f4 fa50 	bl	8004c24 <HAL_PCD_SetAddress>
 8010784:	4603      	mov	r3, r0
 8010786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010788:	7bfb      	ldrb	r3, [r7, #15]
 801078a:	4618      	mov	r0, r3
 801078c:	f000 f874 	bl	8010878 <USBD_Get_USB_Status>
 8010790:	4603      	mov	r3, r0
 8010792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010794:	7bbb      	ldrb	r3, [r7, #14]
}
 8010796:	4618      	mov	r0, r3
 8010798:	3710      	adds	r7, #16
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}

0801079e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801079e:	b580      	push	{r7, lr}
 80107a0:	b086      	sub	sp, #24
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	60f8      	str	r0, [r7, #12]
 80107a6:	607a      	str	r2, [r7, #4]
 80107a8:	603b      	str	r3, [r7, #0]
 80107aa:	460b      	mov	r3, r1
 80107ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107ae:	2300      	movs	r3, #0
 80107b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107b2:	2300      	movs	r3, #0
 80107b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80107bc:	7af9      	ldrb	r1, [r7, #11]
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	687a      	ldr	r2, [r7, #4]
 80107c2:	f7f4 fb69 	bl	8004e98 <HAL_PCD_EP_Transmit>
 80107c6:	4603      	mov	r3, r0
 80107c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107ca:	7dfb      	ldrb	r3, [r7, #23]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f000 f853 	bl	8010878 <USBD_Get_USB_Status>
 80107d2:	4603      	mov	r3, r0
 80107d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80107d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3718      	adds	r7, #24
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b086      	sub	sp, #24
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	607a      	str	r2, [r7, #4]
 80107ea:	603b      	str	r3, [r7, #0]
 80107ec:	460b      	mov	r3, r1
 80107ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107f0:	2300      	movs	r3, #0
 80107f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107f4:	2300      	movs	r3, #0
 80107f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80107fe:	7af9      	ldrb	r1, [r7, #11]
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	687a      	ldr	r2, [r7, #4]
 8010804:	f7f4 fae5 	bl	8004dd2 <HAL_PCD_EP_Receive>
 8010808:	4603      	mov	r3, r0
 801080a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801080c:	7dfb      	ldrb	r3, [r7, #23]
 801080e:	4618      	mov	r0, r3
 8010810:	f000 f832 	bl	8010878 <USBD_Get_USB_Status>
 8010814:	4603      	mov	r3, r0
 8010816:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010818:	7dbb      	ldrb	r3, [r7, #22]
}
 801081a:	4618      	mov	r0, r3
 801081c:	3718      	adds	r7, #24
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}

08010822 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010822:	b580      	push	{r7, lr}
 8010824:	b082      	sub	sp, #8
 8010826:	af00      	add	r7, sp, #0
 8010828:	6078      	str	r0, [r7, #4]
 801082a:	460b      	mov	r3, r1
 801082c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010834:	78fa      	ldrb	r2, [r7, #3]
 8010836:	4611      	mov	r1, r2
 8010838:	4618      	mov	r0, r3
 801083a:	f7f4 fb15 	bl	8004e68 <HAL_PCD_EP_GetRxCount>
 801083e:	4603      	mov	r3, r0
}
 8010840:	4618      	mov	r0, r3
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010850:	4b03      	ldr	r3, [pc, #12]	; (8010860 <USBD_static_malloc+0x18>)
}
 8010852:	4618      	mov	r0, r3
 8010854:	370c      	adds	r7, #12
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	2001cd2c 	.word	0x2001cd2c

08010864 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010864:	b480      	push	{r7}
 8010866:	b083      	sub	sp, #12
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]

}
 801086c:	bf00      	nop
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010878:	b480      	push	{r7}
 801087a:	b085      	sub	sp, #20
 801087c:	af00      	add	r7, sp, #0
 801087e:	4603      	mov	r3, r0
 8010880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010882:	2300      	movs	r3, #0
 8010884:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010886:	79fb      	ldrb	r3, [r7, #7]
 8010888:	2b03      	cmp	r3, #3
 801088a:	d817      	bhi.n	80108bc <USBD_Get_USB_Status+0x44>
 801088c:	a201      	add	r2, pc, #4	; (adr r2, 8010894 <USBD_Get_USB_Status+0x1c>)
 801088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010892:	bf00      	nop
 8010894:	080108a5 	.word	0x080108a5
 8010898:	080108ab 	.word	0x080108ab
 801089c:	080108b1 	.word	0x080108b1
 80108a0:	080108b7 	.word	0x080108b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80108a4:	2300      	movs	r3, #0
 80108a6:	73fb      	strb	r3, [r7, #15]
    break;
 80108a8:	e00b      	b.n	80108c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108aa:	2303      	movs	r3, #3
 80108ac:	73fb      	strb	r3, [r7, #15]
    break;
 80108ae:	e008      	b.n	80108c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108b0:	2301      	movs	r3, #1
 80108b2:	73fb      	strb	r3, [r7, #15]
    break;
 80108b4:	e005      	b.n	80108c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108b6:	2303      	movs	r3, #3
 80108b8:	73fb      	strb	r3, [r7, #15]
    break;
 80108ba:	e002      	b.n	80108c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80108bc:	2303      	movs	r3, #3
 80108be:	73fb      	strb	r3, [r7, #15]
    break;
 80108c0:	bf00      	nop
  }
  return usb_status;
 80108c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3714      	adds	r7, #20
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <__errno>:
 80108d0:	4b01      	ldr	r3, [pc, #4]	; (80108d8 <__errno+0x8>)
 80108d2:	6818      	ldr	r0, [r3, #0]
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	2000018c 	.word	0x2000018c

080108dc <__libc_init_array>:
 80108dc:	b570      	push	{r4, r5, r6, lr}
 80108de:	4d0d      	ldr	r5, [pc, #52]	; (8010914 <__libc_init_array+0x38>)
 80108e0:	4c0d      	ldr	r4, [pc, #52]	; (8010918 <__libc_init_array+0x3c>)
 80108e2:	1b64      	subs	r4, r4, r5
 80108e4:	10a4      	asrs	r4, r4, #2
 80108e6:	2600      	movs	r6, #0
 80108e8:	42a6      	cmp	r6, r4
 80108ea:	d109      	bne.n	8010900 <__libc_init_array+0x24>
 80108ec:	4d0b      	ldr	r5, [pc, #44]	; (801091c <__libc_init_array+0x40>)
 80108ee:	4c0c      	ldr	r4, [pc, #48]	; (8010920 <__libc_init_array+0x44>)
 80108f0:	f000 fd0e 	bl	8011310 <_init>
 80108f4:	1b64      	subs	r4, r4, r5
 80108f6:	10a4      	asrs	r4, r4, #2
 80108f8:	2600      	movs	r6, #0
 80108fa:	42a6      	cmp	r6, r4
 80108fc:	d105      	bne.n	801090a <__libc_init_array+0x2e>
 80108fe:	bd70      	pop	{r4, r5, r6, pc}
 8010900:	f855 3b04 	ldr.w	r3, [r5], #4
 8010904:	4798      	blx	r3
 8010906:	3601      	adds	r6, #1
 8010908:	e7ee      	b.n	80108e8 <__libc_init_array+0xc>
 801090a:	f855 3b04 	ldr.w	r3, [r5], #4
 801090e:	4798      	blx	r3
 8010910:	3601      	adds	r6, #1
 8010912:	e7f2      	b.n	80108fa <__libc_init_array+0x1e>
 8010914:	08013974 	.word	0x08013974
 8010918:	08013974 	.word	0x08013974
 801091c:	08013974 	.word	0x08013974
 8010920:	08013978 	.word	0x08013978

08010924 <malloc>:
 8010924:	4b02      	ldr	r3, [pc, #8]	; (8010930 <malloc+0xc>)
 8010926:	4601      	mov	r1, r0
 8010928:	6818      	ldr	r0, [r3, #0]
 801092a:	f000 b88d 	b.w	8010a48 <_malloc_r>
 801092e:	bf00      	nop
 8010930:	2000018c 	.word	0x2000018c

08010934 <free>:
 8010934:	4b02      	ldr	r3, [pc, #8]	; (8010940 <free+0xc>)
 8010936:	4601      	mov	r1, r0
 8010938:	6818      	ldr	r0, [r3, #0]
 801093a:	f000 b819 	b.w	8010970 <_free_r>
 801093e:	bf00      	nop
 8010940:	2000018c 	.word	0x2000018c

08010944 <memcpy>:
 8010944:	440a      	add	r2, r1
 8010946:	4291      	cmp	r1, r2
 8010948:	f100 33ff 	add.w	r3, r0, #4294967295
 801094c:	d100      	bne.n	8010950 <memcpy+0xc>
 801094e:	4770      	bx	lr
 8010950:	b510      	push	{r4, lr}
 8010952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010956:	f803 4f01 	strb.w	r4, [r3, #1]!
 801095a:	4291      	cmp	r1, r2
 801095c:	d1f9      	bne.n	8010952 <memcpy+0xe>
 801095e:	bd10      	pop	{r4, pc}

08010960 <memset>:
 8010960:	4402      	add	r2, r0
 8010962:	4603      	mov	r3, r0
 8010964:	4293      	cmp	r3, r2
 8010966:	d100      	bne.n	801096a <memset+0xa>
 8010968:	4770      	bx	lr
 801096a:	f803 1b01 	strb.w	r1, [r3], #1
 801096e:	e7f9      	b.n	8010964 <memset+0x4>

08010970 <_free_r>:
 8010970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010972:	2900      	cmp	r1, #0
 8010974:	d044      	beq.n	8010a00 <_free_r+0x90>
 8010976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801097a:	9001      	str	r0, [sp, #4]
 801097c:	2b00      	cmp	r3, #0
 801097e:	f1a1 0404 	sub.w	r4, r1, #4
 8010982:	bfb8      	it	lt
 8010984:	18e4      	addlt	r4, r4, r3
 8010986:	f000 f975 	bl	8010c74 <__malloc_lock>
 801098a:	4a1e      	ldr	r2, [pc, #120]	; (8010a04 <_free_r+0x94>)
 801098c:	9801      	ldr	r0, [sp, #4]
 801098e:	6813      	ldr	r3, [r2, #0]
 8010990:	b933      	cbnz	r3, 80109a0 <_free_r+0x30>
 8010992:	6063      	str	r3, [r4, #4]
 8010994:	6014      	str	r4, [r2, #0]
 8010996:	b003      	add	sp, #12
 8010998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801099c:	f000 b970 	b.w	8010c80 <__malloc_unlock>
 80109a0:	42a3      	cmp	r3, r4
 80109a2:	d908      	bls.n	80109b6 <_free_r+0x46>
 80109a4:	6825      	ldr	r5, [r4, #0]
 80109a6:	1961      	adds	r1, r4, r5
 80109a8:	428b      	cmp	r3, r1
 80109aa:	bf01      	itttt	eq
 80109ac:	6819      	ldreq	r1, [r3, #0]
 80109ae:	685b      	ldreq	r3, [r3, #4]
 80109b0:	1949      	addeq	r1, r1, r5
 80109b2:	6021      	streq	r1, [r4, #0]
 80109b4:	e7ed      	b.n	8010992 <_free_r+0x22>
 80109b6:	461a      	mov	r2, r3
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	b10b      	cbz	r3, 80109c0 <_free_r+0x50>
 80109bc:	42a3      	cmp	r3, r4
 80109be:	d9fa      	bls.n	80109b6 <_free_r+0x46>
 80109c0:	6811      	ldr	r1, [r2, #0]
 80109c2:	1855      	adds	r5, r2, r1
 80109c4:	42a5      	cmp	r5, r4
 80109c6:	d10b      	bne.n	80109e0 <_free_r+0x70>
 80109c8:	6824      	ldr	r4, [r4, #0]
 80109ca:	4421      	add	r1, r4
 80109cc:	1854      	adds	r4, r2, r1
 80109ce:	42a3      	cmp	r3, r4
 80109d0:	6011      	str	r1, [r2, #0]
 80109d2:	d1e0      	bne.n	8010996 <_free_r+0x26>
 80109d4:	681c      	ldr	r4, [r3, #0]
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	6053      	str	r3, [r2, #4]
 80109da:	4421      	add	r1, r4
 80109dc:	6011      	str	r1, [r2, #0]
 80109de:	e7da      	b.n	8010996 <_free_r+0x26>
 80109e0:	d902      	bls.n	80109e8 <_free_r+0x78>
 80109e2:	230c      	movs	r3, #12
 80109e4:	6003      	str	r3, [r0, #0]
 80109e6:	e7d6      	b.n	8010996 <_free_r+0x26>
 80109e8:	6825      	ldr	r5, [r4, #0]
 80109ea:	1961      	adds	r1, r4, r5
 80109ec:	428b      	cmp	r3, r1
 80109ee:	bf04      	itt	eq
 80109f0:	6819      	ldreq	r1, [r3, #0]
 80109f2:	685b      	ldreq	r3, [r3, #4]
 80109f4:	6063      	str	r3, [r4, #4]
 80109f6:	bf04      	itt	eq
 80109f8:	1949      	addeq	r1, r1, r5
 80109fa:	6021      	streq	r1, [r4, #0]
 80109fc:	6054      	str	r4, [r2, #4]
 80109fe:	e7ca      	b.n	8010996 <_free_r+0x26>
 8010a00:	b003      	add	sp, #12
 8010a02:	bd30      	pop	{r4, r5, pc}
 8010a04:	2001cf4c 	.word	0x2001cf4c

08010a08 <sbrk_aligned>:
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	4e0e      	ldr	r6, [pc, #56]	; (8010a44 <sbrk_aligned+0x3c>)
 8010a0c:	460c      	mov	r4, r1
 8010a0e:	6831      	ldr	r1, [r6, #0]
 8010a10:	4605      	mov	r5, r0
 8010a12:	b911      	cbnz	r1, 8010a1a <sbrk_aligned+0x12>
 8010a14:	f000 f8f6 	bl	8010c04 <_sbrk_r>
 8010a18:	6030      	str	r0, [r6, #0]
 8010a1a:	4621      	mov	r1, r4
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	f000 f8f1 	bl	8010c04 <_sbrk_r>
 8010a22:	1c43      	adds	r3, r0, #1
 8010a24:	d00a      	beq.n	8010a3c <sbrk_aligned+0x34>
 8010a26:	1cc4      	adds	r4, r0, #3
 8010a28:	f024 0403 	bic.w	r4, r4, #3
 8010a2c:	42a0      	cmp	r0, r4
 8010a2e:	d007      	beq.n	8010a40 <sbrk_aligned+0x38>
 8010a30:	1a21      	subs	r1, r4, r0
 8010a32:	4628      	mov	r0, r5
 8010a34:	f000 f8e6 	bl	8010c04 <_sbrk_r>
 8010a38:	3001      	adds	r0, #1
 8010a3a:	d101      	bne.n	8010a40 <sbrk_aligned+0x38>
 8010a3c:	f04f 34ff 	mov.w	r4, #4294967295
 8010a40:	4620      	mov	r0, r4
 8010a42:	bd70      	pop	{r4, r5, r6, pc}
 8010a44:	2001cf50 	.word	0x2001cf50

08010a48 <_malloc_r>:
 8010a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a4c:	1ccd      	adds	r5, r1, #3
 8010a4e:	f025 0503 	bic.w	r5, r5, #3
 8010a52:	3508      	adds	r5, #8
 8010a54:	2d0c      	cmp	r5, #12
 8010a56:	bf38      	it	cc
 8010a58:	250c      	movcc	r5, #12
 8010a5a:	2d00      	cmp	r5, #0
 8010a5c:	4607      	mov	r7, r0
 8010a5e:	db01      	blt.n	8010a64 <_malloc_r+0x1c>
 8010a60:	42a9      	cmp	r1, r5
 8010a62:	d905      	bls.n	8010a70 <_malloc_r+0x28>
 8010a64:	230c      	movs	r3, #12
 8010a66:	603b      	str	r3, [r7, #0]
 8010a68:	2600      	movs	r6, #0
 8010a6a:	4630      	mov	r0, r6
 8010a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a70:	4e2e      	ldr	r6, [pc, #184]	; (8010b2c <_malloc_r+0xe4>)
 8010a72:	f000 f8ff 	bl	8010c74 <__malloc_lock>
 8010a76:	6833      	ldr	r3, [r6, #0]
 8010a78:	461c      	mov	r4, r3
 8010a7a:	bb34      	cbnz	r4, 8010aca <_malloc_r+0x82>
 8010a7c:	4629      	mov	r1, r5
 8010a7e:	4638      	mov	r0, r7
 8010a80:	f7ff ffc2 	bl	8010a08 <sbrk_aligned>
 8010a84:	1c43      	adds	r3, r0, #1
 8010a86:	4604      	mov	r4, r0
 8010a88:	d14d      	bne.n	8010b26 <_malloc_r+0xde>
 8010a8a:	6834      	ldr	r4, [r6, #0]
 8010a8c:	4626      	mov	r6, r4
 8010a8e:	2e00      	cmp	r6, #0
 8010a90:	d140      	bne.n	8010b14 <_malloc_r+0xcc>
 8010a92:	6823      	ldr	r3, [r4, #0]
 8010a94:	4631      	mov	r1, r6
 8010a96:	4638      	mov	r0, r7
 8010a98:	eb04 0803 	add.w	r8, r4, r3
 8010a9c:	f000 f8b2 	bl	8010c04 <_sbrk_r>
 8010aa0:	4580      	cmp	r8, r0
 8010aa2:	d13a      	bne.n	8010b1a <_malloc_r+0xd2>
 8010aa4:	6821      	ldr	r1, [r4, #0]
 8010aa6:	3503      	adds	r5, #3
 8010aa8:	1a6d      	subs	r5, r5, r1
 8010aaa:	f025 0503 	bic.w	r5, r5, #3
 8010aae:	3508      	adds	r5, #8
 8010ab0:	2d0c      	cmp	r5, #12
 8010ab2:	bf38      	it	cc
 8010ab4:	250c      	movcc	r5, #12
 8010ab6:	4629      	mov	r1, r5
 8010ab8:	4638      	mov	r0, r7
 8010aba:	f7ff ffa5 	bl	8010a08 <sbrk_aligned>
 8010abe:	3001      	adds	r0, #1
 8010ac0:	d02b      	beq.n	8010b1a <_malloc_r+0xd2>
 8010ac2:	6823      	ldr	r3, [r4, #0]
 8010ac4:	442b      	add	r3, r5
 8010ac6:	6023      	str	r3, [r4, #0]
 8010ac8:	e00e      	b.n	8010ae8 <_malloc_r+0xa0>
 8010aca:	6822      	ldr	r2, [r4, #0]
 8010acc:	1b52      	subs	r2, r2, r5
 8010ace:	d41e      	bmi.n	8010b0e <_malloc_r+0xc6>
 8010ad0:	2a0b      	cmp	r2, #11
 8010ad2:	d916      	bls.n	8010b02 <_malloc_r+0xba>
 8010ad4:	1961      	adds	r1, r4, r5
 8010ad6:	42a3      	cmp	r3, r4
 8010ad8:	6025      	str	r5, [r4, #0]
 8010ada:	bf18      	it	ne
 8010adc:	6059      	strne	r1, [r3, #4]
 8010ade:	6863      	ldr	r3, [r4, #4]
 8010ae0:	bf08      	it	eq
 8010ae2:	6031      	streq	r1, [r6, #0]
 8010ae4:	5162      	str	r2, [r4, r5]
 8010ae6:	604b      	str	r3, [r1, #4]
 8010ae8:	4638      	mov	r0, r7
 8010aea:	f104 060b 	add.w	r6, r4, #11
 8010aee:	f000 f8c7 	bl	8010c80 <__malloc_unlock>
 8010af2:	f026 0607 	bic.w	r6, r6, #7
 8010af6:	1d23      	adds	r3, r4, #4
 8010af8:	1af2      	subs	r2, r6, r3
 8010afa:	d0b6      	beq.n	8010a6a <_malloc_r+0x22>
 8010afc:	1b9b      	subs	r3, r3, r6
 8010afe:	50a3      	str	r3, [r4, r2]
 8010b00:	e7b3      	b.n	8010a6a <_malloc_r+0x22>
 8010b02:	6862      	ldr	r2, [r4, #4]
 8010b04:	42a3      	cmp	r3, r4
 8010b06:	bf0c      	ite	eq
 8010b08:	6032      	streq	r2, [r6, #0]
 8010b0a:	605a      	strne	r2, [r3, #4]
 8010b0c:	e7ec      	b.n	8010ae8 <_malloc_r+0xa0>
 8010b0e:	4623      	mov	r3, r4
 8010b10:	6864      	ldr	r4, [r4, #4]
 8010b12:	e7b2      	b.n	8010a7a <_malloc_r+0x32>
 8010b14:	4634      	mov	r4, r6
 8010b16:	6876      	ldr	r6, [r6, #4]
 8010b18:	e7b9      	b.n	8010a8e <_malloc_r+0x46>
 8010b1a:	230c      	movs	r3, #12
 8010b1c:	603b      	str	r3, [r7, #0]
 8010b1e:	4638      	mov	r0, r7
 8010b20:	f000 f8ae 	bl	8010c80 <__malloc_unlock>
 8010b24:	e7a1      	b.n	8010a6a <_malloc_r+0x22>
 8010b26:	6025      	str	r5, [r4, #0]
 8010b28:	e7de      	b.n	8010ae8 <_malloc_r+0xa0>
 8010b2a:	bf00      	nop
 8010b2c:	2001cf4c 	.word	0x2001cf4c

08010b30 <cleanup_glue>:
 8010b30:	b538      	push	{r3, r4, r5, lr}
 8010b32:	460c      	mov	r4, r1
 8010b34:	6809      	ldr	r1, [r1, #0]
 8010b36:	4605      	mov	r5, r0
 8010b38:	b109      	cbz	r1, 8010b3e <cleanup_glue+0xe>
 8010b3a:	f7ff fff9 	bl	8010b30 <cleanup_glue>
 8010b3e:	4621      	mov	r1, r4
 8010b40:	4628      	mov	r0, r5
 8010b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b46:	f7ff bf13 	b.w	8010970 <_free_r>
	...

08010b4c <_reclaim_reent>:
 8010b4c:	4b2c      	ldr	r3, [pc, #176]	; (8010c00 <_reclaim_reent+0xb4>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4283      	cmp	r3, r0
 8010b52:	b570      	push	{r4, r5, r6, lr}
 8010b54:	4604      	mov	r4, r0
 8010b56:	d051      	beq.n	8010bfc <_reclaim_reent+0xb0>
 8010b58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010b5a:	b143      	cbz	r3, 8010b6e <_reclaim_reent+0x22>
 8010b5c:	68db      	ldr	r3, [r3, #12]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d14a      	bne.n	8010bf8 <_reclaim_reent+0xac>
 8010b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b64:	6819      	ldr	r1, [r3, #0]
 8010b66:	b111      	cbz	r1, 8010b6e <_reclaim_reent+0x22>
 8010b68:	4620      	mov	r0, r4
 8010b6a:	f7ff ff01 	bl	8010970 <_free_r>
 8010b6e:	6961      	ldr	r1, [r4, #20]
 8010b70:	b111      	cbz	r1, 8010b78 <_reclaim_reent+0x2c>
 8010b72:	4620      	mov	r0, r4
 8010b74:	f7ff fefc 	bl	8010970 <_free_r>
 8010b78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010b7a:	b111      	cbz	r1, 8010b82 <_reclaim_reent+0x36>
 8010b7c:	4620      	mov	r0, r4
 8010b7e:	f7ff fef7 	bl	8010970 <_free_r>
 8010b82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010b84:	b111      	cbz	r1, 8010b8c <_reclaim_reent+0x40>
 8010b86:	4620      	mov	r0, r4
 8010b88:	f7ff fef2 	bl	8010970 <_free_r>
 8010b8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010b8e:	b111      	cbz	r1, 8010b96 <_reclaim_reent+0x4a>
 8010b90:	4620      	mov	r0, r4
 8010b92:	f7ff feed 	bl	8010970 <_free_r>
 8010b96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010b98:	b111      	cbz	r1, 8010ba0 <_reclaim_reent+0x54>
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f7ff fee8 	bl	8010970 <_free_r>
 8010ba0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010ba2:	b111      	cbz	r1, 8010baa <_reclaim_reent+0x5e>
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	f7ff fee3 	bl	8010970 <_free_r>
 8010baa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010bac:	b111      	cbz	r1, 8010bb4 <_reclaim_reent+0x68>
 8010bae:	4620      	mov	r0, r4
 8010bb0:	f7ff fede 	bl	8010970 <_free_r>
 8010bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bb6:	b111      	cbz	r1, 8010bbe <_reclaim_reent+0x72>
 8010bb8:	4620      	mov	r0, r4
 8010bba:	f7ff fed9 	bl	8010970 <_free_r>
 8010bbe:	69a3      	ldr	r3, [r4, #24]
 8010bc0:	b1e3      	cbz	r3, 8010bfc <_reclaim_reent+0xb0>
 8010bc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	4798      	blx	r3
 8010bc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010bca:	b1b9      	cbz	r1, 8010bfc <_reclaim_reent+0xb0>
 8010bcc:	4620      	mov	r0, r4
 8010bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bd2:	f7ff bfad 	b.w	8010b30 <cleanup_glue>
 8010bd6:	5949      	ldr	r1, [r1, r5]
 8010bd8:	b941      	cbnz	r1, 8010bec <_reclaim_reent+0xa0>
 8010bda:	3504      	adds	r5, #4
 8010bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bde:	2d80      	cmp	r5, #128	; 0x80
 8010be0:	68d9      	ldr	r1, [r3, #12]
 8010be2:	d1f8      	bne.n	8010bd6 <_reclaim_reent+0x8a>
 8010be4:	4620      	mov	r0, r4
 8010be6:	f7ff fec3 	bl	8010970 <_free_r>
 8010bea:	e7ba      	b.n	8010b62 <_reclaim_reent+0x16>
 8010bec:	680e      	ldr	r6, [r1, #0]
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f7ff febe 	bl	8010970 <_free_r>
 8010bf4:	4631      	mov	r1, r6
 8010bf6:	e7ef      	b.n	8010bd8 <_reclaim_reent+0x8c>
 8010bf8:	2500      	movs	r5, #0
 8010bfa:	e7ef      	b.n	8010bdc <_reclaim_reent+0x90>
 8010bfc:	bd70      	pop	{r4, r5, r6, pc}
 8010bfe:	bf00      	nop
 8010c00:	2000018c 	.word	0x2000018c

08010c04 <_sbrk_r>:
 8010c04:	b538      	push	{r3, r4, r5, lr}
 8010c06:	4d06      	ldr	r5, [pc, #24]	; (8010c20 <_sbrk_r+0x1c>)
 8010c08:	2300      	movs	r3, #0
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	4608      	mov	r0, r1
 8010c0e:	602b      	str	r3, [r5, #0]
 8010c10:	f7f1 fd52 	bl	80026b8 <_sbrk>
 8010c14:	1c43      	adds	r3, r0, #1
 8010c16:	d102      	bne.n	8010c1e <_sbrk_r+0x1a>
 8010c18:	682b      	ldr	r3, [r5, #0]
 8010c1a:	b103      	cbz	r3, 8010c1e <_sbrk_r+0x1a>
 8010c1c:	6023      	str	r3, [r4, #0]
 8010c1e:	bd38      	pop	{r3, r4, r5, pc}
 8010c20:	2001cf54 	.word	0x2001cf54

08010c24 <siprintf>:
 8010c24:	b40e      	push	{r1, r2, r3}
 8010c26:	b500      	push	{lr}
 8010c28:	b09c      	sub	sp, #112	; 0x70
 8010c2a:	ab1d      	add	r3, sp, #116	; 0x74
 8010c2c:	9002      	str	r0, [sp, #8]
 8010c2e:	9006      	str	r0, [sp, #24]
 8010c30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010c34:	4809      	ldr	r0, [pc, #36]	; (8010c5c <siprintf+0x38>)
 8010c36:	9107      	str	r1, [sp, #28]
 8010c38:	9104      	str	r1, [sp, #16]
 8010c3a:	4909      	ldr	r1, [pc, #36]	; (8010c60 <siprintf+0x3c>)
 8010c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c40:	9105      	str	r1, [sp, #20]
 8010c42:	6800      	ldr	r0, [r0, #0]
 8010c44:	9301      	str	r3, [sp, #4]
 8010c46:	a902      	add	r1, sp, #8
 8010c48:	f000 f87c 	bl	8010d44 <_svfiprintf_r>
 8010c4c:	9b02      	ldr	r3, [sp, #8]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	701a      	strb	r2, [r3, #0]
 8010c52:	b01c      	add	sp, #112	; 0x70
 8010c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c58:	b003      	add	sp, #12
 8010c5a:	4770      	bx	lr
 8010c5c:	2000018c 	.word	0x2000018c
 8010c60:	ffff0208 	.word	0xffff0208

08010c64 <strcpy>:
 8010c64:	4603      	mov	r3, r0
 8010c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c6a:	f803 2b01 	strb.w	r2, [r3], #1
 8010c6e:	2a00      	cmp	r2, #0
 8010c70:	d1f9      	bne.n	8010c66 <strcpy+0x2>
 8010c72:	4770      	bx	lr

08010c74 <__malloc_lock>:
 8010c74:	4801      	ldr	r0, [pc, #4]	; (8010c7c <__malloc_lock+0x8>)
 8010c76:	f7f2 b822 	b.w	8002cbe <__retarget_lock_acquire_recursive>
 8010c7a:	bf00      	nop
 8010c7c:	20001510 	.word	0x20001510

08010c80 <__malloc_unlock>:
 8010c80:	4801      	ldr	r0, [pc, #4]	; (8010c88 <__malloc_unlock+0x8>)
 8010c82:	f7f2 b830 	b.w	8002ce6 <__retarget_lock_release_recursive>
 8010c86:	bf00      	nop
 8010c88:	20001510 	.word	0x20001510

08010c8c <__ssputs_r>:
 8010c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c90:	688e      	ldr	r6, [r1, #8]
 8010c92:	429e      	cmp	r6, r3
 8010c94:	4682      	mov	sl, r0
 8010c96:	460c      	mov	r4, r1
 8010c98:	4690      	mov	r8, r2
 8010c9a:	461f      	mov	r7, r3
 8010c9c:	d838      	bhi.n	8010d10 <__ssputs_r+0x84>
 8010c9e:	898a      	ldrh	r2, [r1, #12]
 8010ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ca4:	d032      	beq.n	8010d0c <__ssputs_r+0x80>
 8010ca6:	6825      	ldr	r5, [r4, #0]
 8010ca8:	6909      	ldr	r1, [r1, #16]
 8010caa:	eba5 0901 	sub.w	r9, r5, r1
 8010cae:	6965      	ldr	r5, [r4, #20]
 8010cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010cb8:	3301      	adds	r3, #1
 8010cba:	444b      	add	r3, r9
 8010cbc:	106d      	asrs	r5, r5, #1
 8010cbe:	429d      	cmp	r5, r3
 8010cc0:	bf38      	it	cc
 8010cc2:	461d      	movcc	r5, r3
 8010cc4:	0553      	lsls	r3, r2, #21
 8010cc6:	d531      	bpl.n	8010d2c <__ssputs_r+0xa0>
 8010cc8:	4629      	mov	r1, r5
 8010cca:	f7ff febd 	bl	8010a48 <_malloc_r>
 8010cce:	4606      	mov	r6, r0
 8010cd0:	b950      	cbnz	r0, 8010ce8 <__ssputs_r+0x5c>
 8010cd2:	230c      	movs	r3, #12
 8010cd4:	f8ca 3000 	str.w	r3, [sl]
 8010cd8:	89a3      	ldrh	r3, [r4, #12]
 8010cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cde:	81a3      	strh	r3, [r4, #12]
 8010ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ce8:	6921      	ldr	r1, [r4, #16]
 8010cea:	464a      	mov	r2, r9
 8010cec:	f7ff fe2a 	bl	8010944 <memcpy>
 8010cf0:	89a3      	ldrh	r3, [r4, #12]
 8010cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cfa:	81a3      	strh	r3, [r4, #12]
 8010cfc:	6126      	str	r6, [r4, #16]
 8010cfe:	6165      	str	r5, [r4, #20]
 8010d00:	444e      	add	r6, r9
 8010d02:	eba5 0509 	sub.w	r5, r5, r9
 8010d06:	6026      	str	r6, [r4, #0]
 8010d08:	60a5      	str	r5, [r4, #8]
 8010d0a:	463e      	mov	r6, r7
 8010d0c:	42be      	cmp	r6, r7
 8010d0e:	d900      	bls.n	8010d12 <__ssputs_r+0x86>
 8010d10:	463e      	mov	r6, r7
 8010d12:	6820      	ldr	r0, [r4, #0]
 8010d14:	4632      	mov	r2, r6
 8010d16:	4641      	mov	r1, r8
 8010d18:	f000 faa8 	bl	801126c <memmove>
 8010d1c:	68a3      	ldr	r3, [r4, #8]
 8010d1e:	1b9b      	subs	r3, r3, r6
 8010d20:	60a3      	str	r3, [r4, #8]
 8010d22:	6823      	ldr	r3, [r4, #0]
 8010d24:	4433      	add	r3, r6
 8010d26:	6023      	str	r3, [r4, #0]
 8010d28:	2000      	movs	r0, #0
 8010d2a:	e7db      	b.n	8010ce4 <__ssputs_r+0x58>
 8010d2c:	462a      	mov	r2, r5
 8010d2e:	f000 fab7 	bl	80112a0 <_realloc_r>
 8010d32:	4606      	mov	r6, r0
 8010d34:	2800      	cmp	r0, #0
 8010d36:	d1e1      	bne.n	8010cfc <__ssputs_r+0x70>
 8010d38:	6921      	ldr	r1, [r4, #16]
 8010d3a:	4650      	mov	r0, sl
 8010d3c:	f7ff fe18 	bl	8010970 <_free_r>
 8010d40:	e7c7      	b.n	8010cd2 <__ssputs_r+0x46>
	...

08010d44 <_svfiprintf_r>:
 8010d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d48:	4698      	mov	r8, r3
 8010d4a:	898b      	ldrh	r3, [r1, #12]
 8010d4c:	061b      	lsls	r3, r3, #24
 8010d4e:	b09d      	sub	sp, #116	; 0x74
 8010d50:	4607      	mov	r7, r0
 8010d52:	460d      	mov	r5, r1
 8010d54:	4614      	mov	r4, r2
 8010d56:	d50e      	bpl.n	8010d76 <_svfiprintf_r+0x32>
 8010d58:	690b      	ldr	r3, [r1, #16]
 8010d5a:	b963      	cbnz	r3, 8010d76 <_svfiprintf_r+0x32>
 8010d5c:	2140      	movs	r1, #64	; 0x40
 8010d5e:	f7ff fe73 	bl	8010a48 <_malloc_r>
 8010d62:	6028      	str	r0, [r5, #0]
 8010d64:	6128      	str	r0, [r5, #16]
 8010d66:	b920      	cbnz	r0, 8010d72 <_svfiprintf_r+0x2e>
 8010d68:	230c      	movs	r3, #12
 8010d6a:	603b      	str	r3, [r7, #0]
 8010d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d70:	e0d1      	b.n	8010f16 <_svfiprintf_r+0x1d2>
 8010d72:	2340      	movs	r3, #64	; 0x40
 8010d74:	616b      	str	r3, [r5, #20]
 8010d76:	2300      	movs	r3, #0
 8010d78:	9309      	str	r3, [sp, #36]	; 0x24
 8010d7a:	2320      	movs	r3, #32
 8010d7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d84:	2330      	movs	r3, #48	; 0x30
 8010d86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010f30 <_svfiprintf_r+0x1ec>
 8010d8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d8e:	f04f 0901 	mov.w	r9, #1
 8010d92:	4623      	mov	r3, r4
 8010d94:	469a      	mov	sl, r3
 8010d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d9a:	b10a      	cbz	r2, 8010da0 <_svfiprintf_r+0x5c>
 8010d9c:	2a25      	cmp	r2, #37	; 0x25
 8010d9e:	d1f9      	bne.n	8010d94 <_svfiprintf_r+0x50>
 8010da0:	ebba 0b04 	subs.w	fp, sl, r4
 8010da4:	d00b      	beq.n	8010dbe <_svfiprintf_r+0x7a>
 8010da6:	465b      	mov	r3, fp
 8010da8:	4622      	mov	r2, r4
 8010daa:	4629      	mov	r1, r5
 8010dac:	4638      	mov	r0, r7
 8010dae:	f7ff ff6d 	bl	8010c8c <__ssputs_r>
 8010db2:	3001      	adds	r0, #1
 8010db4:	f000 80aa 	beq.w	8010f0c <_svfiprintf_r+0x1c8>
 8010db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dba:	445a      	add	r2, fp
 8010dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8010dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	f000 80a2 	beq.w	8010f0c <_svfiprintf_r+0x1c8>
 8010dc8:	2300      	movs	r3, #0
 8010dca:	f04f 32ff 	mov.w	r2, #4294967295
 8010dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dd2:	f10a 0a01 	add.w	sl, sl, #1
 8010dd6:	9304      	str	r3, [sp, #16]
 8010dd8:	9307      	str	r3, [sp, #28]
 8010dda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010dde:	931a      	str	r3, [sp, #104]	; 0x68
 8010de0:	4654      	mov	r4, sl
 8010de2:	2205      	movs	r2, #5
 8010de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010de8:	4851      	ldr	r0, [pc, #324]	; (8010f30 <_svfiprintf_r+0x1ec>)
 8010dea:	f7ef fa01 	bl	80001f0 <memchr>
 8010dee:	9a04      	ldr	r2, [sp, #16]
 8010df0:	b9d8      	cbnz	r0, 8010e2a <_svfiprintf_r+0xe6>
 8010df2:	06d0      	lsls	r0, r2, #27
 8010df4:	bf44      	itt	mi
 8010df6:	2320      	movmi	r3, #32
 8010df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dfc:	0711      	lsls	r1, r2, #28
 8010dfe:	bf44      	itt	mi
 8010e00:	232b      	movmi	r3, #43	; 0x2b
 8010e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e06:	f89a 3000 	ldrb.w	r3, [sl]
 8010e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8010e0c:	d015      	beq.n	8010e3a <_svfiprintf_r+0xf6>
 8010e0e:	9a07      	ldr	r2, [sp, #28]
 8010e10:	4654      	mov	r4, sl
 8010e12:	2000      	movs	r0, #0
 8010e14:	f04f 0c0a 	mov.w	ip, #10
 8010e18:	4621      	mov	r1, r4
 8010e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e1e:	3b30      	subs	r3, #48	; 0x30
 8010e20:	2b09      	cmp	r3, #9
 8010e22:	d94e      	bls.n	8010ec2 <_svfiprintf_r+0x17e>
 8010e24:	b1b0      	cbz	r0, 8010e54 <_svfiprintf_r+0x110>
 8010e26:	9207      	str	r2, [sp, #28]
 8010e28:	e014      	b.n	8010e54 <_svfiprintf_r+0x110>
 8010e2a:	eba0 0308 	sub.w	r3, r0, r8
 8010e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8010e32:	4313      	orrs	r3, r2
 8010e34:	9304      	str	r3, [sp, #16]
 8010e36:	46a2      	mov	sl, r4
 8010e38:	e7d2      	b.n	8010de0 <_svfiprintf_r+0x9c>
 8010e3a:	9b03      	ldr	r3, [sp, #12]
 8010e3c:	1d19      	adds	r1, r3, #4
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	9103      	str	r1, [sp, #12]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	bfbb      	ittet	lt
 8010e46:	425b      	neglt	r3, r3
 8010e48:	f042 0202 	orrlt.w	r2, r2, #2
 8010e4c:	9307      	strge	r3, [sp, #28]
 8010e4e:	9307      	strlt	r3, [sp, #28]
 8010e50:	bfb8      	it	lt
 8010e52:	9204      	strlt	r2, [sp, #16]
 8010e54:	7823      	ldrb	r3, [r4, #0]
 8010e56:	2b2e      	cmp	r3, #46	; 0x2e
 8010e58:	d10c      	bne.n	8010e74 <_svfiprintf_r+0x130>
 8010e5a:	7863      	ldrb	r3, [r4, #1]
 8010e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8010e5e:	d135      	bne.n	8010ecc <_svfiprintf_r+0x188>
 8010e60:	9b03      	ldr	r3, [sp, #12]
 8010e62:	1d1a      	adds	r2, r3, #4
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	9203      	str	r2, [sp, #12]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	bfb8      	it	lt
 8010e6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e70:	3402      	adds	r4, #2
 8010e72:	9305      	str	r3, [sp, #20]
 8010e74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010f40 <_svfiprintf_r+0x1fc>
 8010e78:	7821      	ldrb	r1, [r4, #0]
 8010e7a:	2203      	movs	r2, #3
 8010e7c:	4650      	mov	r0, sl
 8010e7e:	f7ef f9b7 	bl	80001f0 <memchr>
 8010e82:	b140      	cbz	r0, 8010e96 <_svfiprintf_r+0x152>
 8010e84:	2340      	movs	r3, #64	; 0x40
 8010e86:	eba0 000a 	sub.w	r0, r0, sl
 8010e8a:	fa03 f000 	lsl.w	r0, r3, r0
 8010e8e:	9b04      	ldr	r3, [sp, #16]
 8010e90:	4303      	orrs	r3, r0
 8010e92:	3401      	adds	r4, #1
 8010e94:	9304      	str	r3, [sp, #16]
 8010e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e9a:	4826      	ldr	r0, [pc, #152]	; (8010f34 <_svfiprintf_r+0x1f0>)
 8010e9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ea0:	2206      	movs	r2, #6
 8010ea2:	f7ef f9a5 	bl	80001f0 <memchr>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	d038      	beq.n	8010f1c <_svfiprintf_r+0x1d8>
 8010eaa:	4b23      	ldr	r3, [pc, #140]	; (8010f38 <_svfiprintf_r+0x1f4>)
 8010eac:	bb1b      	cbnz	r3, 8010ef6 <_svfiprintf_r+0x1b2>
 8010eae:	9b03      	ldr	r3, [sp, #12]
 8010eb0:	3307      	adds	r3, #7
 8010eb2:	f023 0307 	bic.w	r3, r3, #7
 8010eb6:	3308      	adds	r3, #8
 8010eb8:	9303      	str	r3, [sp, #12]
 8010eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ebc:	4433      	add	r3, r6
 8010ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8010ec0:	e767      	b.n	8010d92 <_svfiprintf_r+0x4e>
 8010ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	2001      	movs	r0, #1
 8010eca:	e7a5      	b.n	8010e18 <_svfiprintf_r+0xd4>
 8010ecc:	2300      	movs	r3, #0
 8010ece:	3401      	adds	r4, #1
 8010ed0:	9305      	str	r3, [sp, #20]
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	f04f 0c0a 	mov.w	ip, #10
 8010ed8:	4620      	mov	r0, r4
 8010eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ede:	3a30      	subs	r2, #48	; 0x30
 8010ee0:	2a09      	cmp	r2, #9
 8010ee2:	d903      	bls.n	8010eec <_svfiprintf_r+0x1a8>
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d0c5      	beq.n	8010e74 <_svfiprintf_r+0x130>
 8010ee8:	9105      	str	r1, [sp, #20]
 8010eea:	e7c3      	b.n	8010e74 <_svfiprintf_r+0x130>
 8010eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ef0:	4604      	mov	r4, r0
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	e7f0      	b.n	8010ed8 <_svfiprintf_r+0x194>
 8010ef6:	ab03      	add	r3, sp, #12
 8010ef8:	9300      	str	r3, [sp, #0]
 8010efa:	462a      	mov	r2, r5
 8010efc:	4b0f      	ldr	r3, [pc, #60]	; (8010f3c <_svfiprintf_r+0x1f8>)
 8010efe:	a904      	add	r1, sp, #16
 8010f00:	4638      	mov	r0, r7
 8010f02:	f3af 8000 	nop.w
 8010f06:	1c42      	adds	r2, r0, #1
 8010f08:	4606      	mov	r6, r0
 8010f0a:	d1d6      	bne.n	8010eba <_svfiprintf_r+0x176>
 8010f0c:	89ab      	ldrh	r3, [r5, #12]
 8010f0e:	065b      	lsls	r3, r3, #25
 8010f10:	f53f af2c 	bmi.w	8010d6c <_svfiprintf_r+0x28>
 8010f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f16:	b01d      	add	sp, #116	; 0x74
 8010f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f1c:	ab03      	add	r3, sp, #12
 8010f1e:	9300      	str	r3, [sp, #0]
 8010f20:	462a      	mov	r2, r5
 8010f22:	4b06      	ldr	r3, [pc, #24]	; (8010f3c <_svfiprintf_r+0x1f8>)
 8010f24:	a904      	add	r1, sp, #16
 8010f26:	4638      	mov	r0, r7
 8010f28:	f000 f87a 	bl	8011020 <_printf_i>
 8010f2c:	e7eb      	b.n	8010f06 <_svfiprintf_r+0x1c2>
 8010f2e:	bf00      	nop
 8010f30:	08013938 	.word	0x08013938
 8010f34:	08013942 	.word	0x08013942
 8010f38:	00000000 	.word	0x00000000
 8010f3c:	08010c8d 	.word	0x08010c8d
 8010f40:	0801393e 	.word	0x0801393e

08010f44 <_printf_common>:
 8010f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f48:	4616      	mov	r6, r2
 8010f4a:	4699      	mov	r9, r3
 8010f4c:	688a      	ldr	r2, [r1, #8]
 8010f4e:	690b      	ldr	r3, [r1, #16]
 8010f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010f54:	4293      	cmp	r3, r2
 8010f56:	bfb8      	it	lt
 8010f58:	4613      	movlt	r3, r2
 8010f5a:	6033      	str	r3, [r6, #0]
 8010f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010f60:	4607      	mov	r7, r0
 8010f62:	460c      	mov	r4, r1
 8010f64:	b10a      	cbz	r2, 8010f6a <_printf_common+0x26>
 8010f66:	3301      	adds	r3, #1
 8010f68:	6033      	str	r3, [r6, #0]
 8010f6a:	6823      	ldr	r3, [r4, #0]
 8010f6c:	0699      	lsls	r1, r3, #26
 8010f6e:	bf42      	ittt	mi
 8010f70:	6833      	ldrmi	r3, [r6, #0]
 8010f72:	3302      	addmi	r3, #2
 8010f74:	6033      	strmi	r3, [r6, #0]
 8010f76:	6825      	ldr	r5, [r4, #0]
 8010f78:	f015 0506 	ands.w	r5, r5, #6
 8010f7c:	d106      	bne.n	8010f8c <_printf_common+0x48>
 8010f7e:	f104 0a19 	add.w	sl, r4, #25
 8010f82:	68e3      	ldr	r3, [r4, #12]
 8010f84:	6832      	ldr	r2, [r6, #0]
 8010f86:	1a9b      	subs	r3, r3, r2
 8010f88:	42ab      	cmp	r3, r5
 8010f8a:	dc26      	bgt.n	8010fda <_printf_common+0x96>
 8010f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010f90:	1e13      	subs	r3, r2, #0
 8010f92:	6822      	ldr	r2, [r4, #0]
 8010f94:	bf18      	it	ne
 8010f96:	2301      	movne	r3, #1
 8010f98:	0692      	lsls	r2, r2, #26
 8010f9a:	d42b      	bmi.n	8010ff4 <_printf_common+0xb0>
 8010f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010fa0:	4649      	mov	r1, r9
 8010fa2:	4638      	mov	r0, r7
 8010fa4:	47c0      	blx	r8
 8010fa6:	3001      	adds	r0, #1
 8010fa8:	d01e      	beq.n	8010fe8 <_printf_common+0xa4>
 8010faa:	6823      	ldr	r3, [r4, #0]
 8010fac:	68e5      	ldr	r5, [r4, #12]
 8010fae:	6832      	ldr	r2, [r6, #0]
 8010fb0:	f003 0306 	and.w	r3, r3, #6
 8010fb4:	2b04      	cmp	r3, #4
 8010fb6:	bf08      	it	eq
 8010fb8:	1aad      	subeq	r5, r5, r2
 8010fba:	68a3      	ldr	r3, [r4, #8]
 8010fbc:	6922      	ldr	r2, [r4, #16]
 8010fbe:	bf0c      	ite	eq
 8010fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010fc4:	2500      	movne	r5, #0
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	bfc4      	itt	gt
 8010fca:	1a9b      	subgt	r3, r3, r2
 8010fcc:	18ed      	addgt	r5, r5, r3
 8010fce:	2600      	movs	r6, #0
 8010fd0:	341a      	adds	r4, #26
 8010fd2:	42b5      	cmp	r5, r6
 8010fd4:	d11a      	bne.n	801100c <_printf_common+0xc8>
 8010fd6:	2000      	movs	r0, #0
 8010fd8:	e008      	b.n	8010fec <_printf_common+0xa8>
 8010fda:	2301      	movs	r3, #1
 8010fdc:	4652      	mov	r2, sl
 8010fde:	4649      	mov	r1, r9
 8010fe0:	4638      	mov	r0, r7
 8010fe2:	47c0      	blx	r8
 8010fe4:	3001      	adds	r0, #1
 8010fe6:	d103      	bne.n	8010ff0 <_printf_common+0xac>
 8010fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ff0:	3501      	adds	r5, #1
 8010ff2:	e7c6      	b.n	8010f82 <_printf_common+0x3e>
 8010ff4:	18e1      	adds	r1, r4, r3
 8010ff6:	1c5a      	adds	r2, r3, #1
 8010ff8:	2030      	movs	r0, #48	; 0x30
 8010ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ffe:	4422      	add	r2, r4
 8011000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011008:	3302      	adds	r3, #2
 801100a:	e7c7      	b.n	8010f9c <_printf_common+0x58>
 801100c:	2301      	movs	r3, #1
 801100e:	4622      	mov	r2, r4
 8011010:	4649      	mov	r1, r9
 8011012:	4638      	mov	r0, r7
 8011014:	47c0      	blx	r8
 8011016:	3001      	adds	r0, #1
 8011018:	d0e6      	beq.n	8010fe8 <_printf_common+0xa4>
 801101a:	3601      	adds	r6, #1
 801101c:	e7d9      	b.n	8010fd2 <_printf_common+0x8e>
	...

08011020 <_printf_i>:
 8011020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011024:	7e0f      	ldrb	r7, [r1, #24]
 8011026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011028:	2f78      	cmp	r7, #120	; 0x78
 801102a:	4691      	mov	r9, r2
 801102c:	4680      	mov	r8, r0
 801102e:	460c      	mov	r4, r1
 8011030:	469a      	mov	sl, r3
 8011032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011036:	d807      	bhi.n	8011048 <_printf_i+0x28>
 8011038:	2f62      	cmp	r7, #98	; 0x62
 801103a:	d80a      	bhi.n	8011052 <_printf_i+0x32>
 801103c:	2f00      	cmp	r7, #0
 801103e:	f000 80d8 	beq.w	80111f2 <_printf_i+0x1d2>
 8011042:	2f58      	cmp	r7, #88	; 0x58
 8011044:	f000 80a3 	beq.w	801118e <_printf_i+0x16e>
 8011048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801104c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011050:	e03a      	b.n	80110c8 <_printf_i+0xa8>
 8011052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011056:	2b15      	cmp	r3, #21
 8011058:	d8f6      	bhi.n	8011048 <_printf_i+0x28>
 801105a:	a101      	add	r1, pc, #4	; (adr r1, 8011060 <_printf_i+0x40>)
 801105c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011060:	080110b9 	.word	0x080110b9
 8011064:	080110cd 	.word	0x080110cd
 8011068:	08011049 	.word	0x08011049
 801106c:	08011049 	.word	0x08011049
 8011070:	08011049 	.word	0x08011049
 8011074:	08011049 	.word	0x08011049
 8011078:	080110cd 	.word	0x080110cd
 801107c:	08011049 	.word	0x08011049
 8011080:	08011049 	.word	0x08011049
 8011084:	08011049 	.word	0x08011049
 8011088:	08011049 	.word	0x08011049
 801108c:	080111d9 	.word	0x080111d9
 8011090:	080110fd 	.word	0x080110fd
 8011094:	080111bb 	.word	0x080111bb
 8011098:	08011049 	.word	0x08011049
 801109c:	08011049 	.word	0x08011049
 80110a0:	080111fb 	.word	0x080111fb
 80110a4:	08011049 	.word	0x08011049
 80110a8:	080110fd 	.word	0x080110fd
 80110ac:	08011049 	.word	0x08011049
 80110b0:	08011049 	.word	0x08011049
 80110b4:	080111c3 	.word	0x080111c3
 80110b8:	682b      	ldr	r3, [r5, #0]
 80110ba:	1d1a      	adds	r2, r3, #4
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	602a      	str	r2, [r5, #0]
 80110c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80110c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80110c8:	2301      	movs	r3, #1
 80110ca:	e0a3      	b.n	8011214 <_printf_i+0x1f4>
 80110cc:	6820      	ldr	r0, [r4, #0]
 80110ce:	6829      	ldr	r1, [r5, #0]
 80110d0:	0606      	lsls	r6, r0, #24
 80110d2:	f101 0304 	add.w	r3, r1, #4
 80110d6:	d50a      	bpl.n	80110ee <_printf_i+0xce>
 80110d8:	680e      	ldr	r6, [r1, #0]
 80110da:	602b      	str	r3, [r5, #0]
 80110dc:	2e00      	cmp	r6, #0
 80110de:	da03      	bge.n	80110e8 <_printf_i+0xc8>
 80110e0:	232d      	movs	r3, #45	; 0x2d
 80110e2:	4276      	negs	r6, r6
 80110e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110e8:	485e      	ldr	r0, [pc, #376]	; (8011264 <_printf_i+0x244>)
 80110ea:	230a      	movs	r3, #10
 80110ec:	e019      	b.n	8011122 <_printf_i+0x102>
 80110ee:	680e      	ldr	r6, [r1, #0]
 80110f0:	602b      	str	r3, [r5, #0]
 80110f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80110f6:	bf18      	it	ne
 80110f8:	b236      	sxthne	r6, r6
 80110fa:	e7ef      	b.n	80110dc <_printf_i+0xbc>
 80110fc:	682b      	ldr	r3, [r5, #0]
 80110fe:	6820      	ldr	r0, [r4, #0]
 8011100:	1d19      	adds	r1, r3, #4
 8011102:	6029      	str	r1, [r5, #0]
 8011104:	0601      	lsls	r1, r0, #24
 8011106:	d501      	bpl.n	801110c <_printf_i+0xec>
 8011108:	681e      	ldr	r6, [r3, #0]
 801110a:	e002      	b.n	8011112 <_printf_i+0xf2>
 801110c:	0646      	lsls	r6, r0, #25
 801110e:	d5fb      	bpl.n	8011108 <_printf_i+0xe8>
 8011110:	881e      	ldrh	r6, [r3, #0]
 8011112:	4854      	ldr	r0, [pc, #336]	; (8011264 <_printf_i+0x244>)
 8011114:	2f6f      	cmp	r7, #111	; 0x6f
 8011116:	bf0c      	ite	eq
 8011118:	2308      	moveq	r3, #8
 801111a:	230a      	movne	r3, #10
 801111c:	2100      	movs	r1, #0
 801111e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011122:	6865      	ldr	r5, [r4, #4]
 8011124:	60a5      	str	r5, [r4, #8]
 8011126:	2d00      	cmp	r5, #0
 8011128:	bfa2      	ittt	ge
 801112a:	6821      	ldrge	r1, [r4, #0]
 801112c:	f021 0104 	bicge.w	r1, r1, #4
 8011130:	6021      	strge	r1, [r4, #0]
 8011132:	b90e      	cbnz	r6, 8011138 <_printf_i+0x118>
 8011134:	2d00      	cmp	r5, #0
 8011136:	d04d      	beq.n	80111d4 <_printf_i+0x1b4>
 8011138:	4615      	mov	r5, r2
 801113a:	fbb6 f1f3 	udiv	r1, r6, r3
 801113e:	fb03 6711 	mls	r7, r3, r1, r6
 8011142:	5dc7      	ldrb	r7, [r0, r7]
 8011144:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011148:	4637      	mov	r7, r6
 801114a:	42bb      	cmp	r3, r7
 801114c:	460e      	mov	r6, r1
 801114e:	d9f4      	bls.n	801113a <_printf_i+0x11a>
 8011150:	2b08      	cmp	r3, #8
 8011152:	d10b      	bne.n	801116c <_printf_i+0x14c>
 8011154:	6823      	ldr	r3, [r4, #0]
 8011156:	07de      	lsls	r6, r3, #31
 8011158:	d508      	bpl.n	801116c <_printf_i+0x14c>
 801115a:	6923      	ldr	r3, [r4, #16]
 801115c:	6861      	ldr	r1, [r4, #4]
 801115e:	4299      	cmp	r1, r3
 8011160:	bfde      	ittt	le
 8011162:	2330      	movle	r3, #48	; 0x30
 8011164:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011168:	f105 35ff 	addle.w	r5, r5, #4294967295
 801116c:	1b52      	subs	r2, r2, r5
 801116e:	6122      	str	r2, [r4, #16]
 8011170:	f8cd a000 	str.w	sl, [sp]
 8011174:	464b      	mov	r3, r9
 8011176:	aa03      	add	r2, sp, #12
 8011178:	4621      	mov	r1, r4
 801117a:	4640      	mov	r0, r8
 801117c:	f7ff fee2 	bl	8010f44 <_printf_common>
 8011180:	3001      	adds	r0, #1
 8011182:	d14c      	bne.n	801121e <_printf_i+0x1fe>
 8011184:	f04f 30ff 	mov.w	r0, #4294967295
 8011188:	b004      	add	sp, #16
 801118a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801118e:	4835      	ldr	r0, [pc, #212]	; (8011264 <_printf_i+0x244>)
 8011190:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011194:	6829      	ldr	r1, [r5, #0]
 8011196:	6823      	ldr	r3, [r4, #0]
 8011198:	f851 6b04 	ldr.w	r6, [r1], #4
 801119c:	6029      	str	r1, [r5, #0]
 801119e:	061d      	lsls	r5, r3, #24
 80111a0:	d514      	bpl.n	80111cc <_printf_i+0x1ac>
 80111a2:	07df      	lsls	r7, r3, #31
 80111a4:	bf44      	itt	mi
 80111a6:	f043 0320 	orrmi.w	r3, r3, #32
 80111aa:	6023      	strmi	r3, [r4, #0]
 80111ac:	b91e      	cbnz	r6, 80111b6 <_printf_i+0x196>
 80111ae:	6823      	ldr	r3, [r4, #0]
 80111b0:	f023 0320 	bic.w	r3, r3, #32
 80111b4:	6023      	str	r3, [r4, #0]
 80111b6:	2310      	movs	r3, #16
 80111b8:	e7b0      	b.n	801111c <_printf_i+0xfc>
 80111ba:	6823      	ldr	r3, [r4, #0]
 80111bc:	f043 0320 	orr.w	r3, r3, #32
 80111c0:	6023      	str	r3, [r4, #0]
 80111c2:	2378      	movs	r3, #120	; 0x78
 80111c4:	4828      	ldr	r0, [pc, #160]	; (8011268 <_printf_i+0x248>)
 80111c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80111ca:	e7e3      	b.n	8011194 <_printf_i+0x174>
 80111cc:	0659      	lsls	r1, r3, #25
 80111ce:	bf48      	it	mi
 80111d0:	b2b6      	uxthmi	r6, r6
 80111d2:	e7e6      	b.n	80111a2 <_printf_i+0x182>
 80111d4:	4615      	mov	r5, r2
 80111d6:	e7bb      	b.n	8011150 <_printf_i+0x130>
 80111d8:	682b      	ldr	r3, [r5, #0]
 80111da:	6826      	ldr	r6, [r4, #0]
 80111dc:	6961      	ldr	r1, [r4, #20]
 80111de:	1d18      	adds	r0, r3, #4
 80111e0:	6028      	str	r0, [r5, #0]
 80111e2:	0635      	lsls	r5, r6, #24
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	d501      	bpl.n	80111ec <_printf_i+0x1cc>
 80111e8:	6019      	str	r1, [r3, #0]
 80111ea:	e002      	b.n	80111f2 <_printf_i+0x1d2>
 80111ec:	0670      	lsls	r0, r6, #25
 80111ee:	d5fb      	bpl.n	80111e8 <_printf_i+0x1c8>
 80111f0:	8019      	strh	r1, [r3, #0]
 80111f2:	2300      	movs	r3, #0
 80111f4:	6123      	str	r3, [r4, #16]
 80111f6:	4615      	mov	r5, r2
 80111f8:	e7ba      	b.n	8011170 <_printf_i+0x150>
 80111fa:	682b      	ldr	r3, [r5, #0]
 80111fc:	1d1a      	adds	r2, r3, #4
 80111fe:	602a      	str	r2, [r5, #0]
 8011200:	681d      	ldr	r5, [r3, #0]
 8011202:	6862      	ldr	r2, [r4, #4]
 8011204:	2100      	movs	r1, #0
 8011206:	4628      	mov	r0, r5
 8011208:	f7ee fff2 	bl	80001f0 <memchr>
 801120c:	b108      	cbz	r0, 8011212 <_printf_i+0x1f2>
 801120e:	1b40      	subs	r0, r0, r5
 8011210:	6060      	str	r0, [r4, #4]
 8011212:	6863      	ldr	r3, [r4, #4]
 8011214:	6123      	str	r3, [r4, #16]
 8011216:	2300      	movs	r3, #0
 8011218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801121c:	e7a8      	b.n	8011170 <_printf_i+0x150>
 801121e:	6923      	ldr	r3, [r4, #16]
 8011220:	462a      	mov	r2, r5
 8011222:	4649      	mov	r1, r9
 8011224:	4640      	mov	r0, r8
 8011226:	47d0      	blx	sl
 8011228:	3001      	adds	r0, #1
 801122a:	d0ab      	beq.n	8011184 <_printf_i+0x164>
 801122c:	6823      	ldr	r3, [r4, #0]
 801122e:	079b      	lsls	r3, r3, #30
 8011230:	d413      	bmi.n	801125a <_printf_i+0x23a>
 8011232:	68e0      	ldr	r0, [r4, #12]
 8011234:	9b03      	ldr	r3, [sp, #12]
 8011236:	4298      	cmp	r0, r3
 8011238:	bfb8      	it	lt
 801123a:	4618      	movlt	r0, r3
 801123c:	e7a4      	b.n	8011188 <_printf_i+0x168>
 801123e:	2301      	movs	r3, #1
 8011240:	4632      	mov	r2, r6
 8011242:	4649      	mov	r1, r9
 8011244:	4640      	mov	r0, r8
 8011246:	47d0      	blx	sl
 8011248:	3001      	adds	r0, #1
 801124a:	d09b      	beq.n	8011184 <_printf_i+0x164>
 801124c:	3501      	adds	r5, #1
 801124e:	68e3      	ldr	r3, [r4, #12]
 8011250:	9903      	ldr	r1, [sp, #12]
 8011252:	1a5b      	subs	r3, r3, r1
 8011254:	42ab      	cmp	r3, r5
 8011256:	dcf2      	bgt.n	801123e <_printf_i+0x21e>
 8011258:	e7eb      	b.n	8011232 <_printf_i+0x212>
 801125a:	2500      	movs	r5, #0
 801125c:	f104 0619 	add.w	r6, r4, #25
 8011260:	e7f5      	b.n	801124e <_printf_i+0x22e>
 8011262:	bf00      	nop
 8011264:	08013949 	.word	0x08013949
 8011268:	0801395a 	.word	0x0801395a

0801126c <memmove>:
 801126c:	4288      	cmp	r0, r1
 801126e:	b510      	push	{r4, lr}
 8011270:	eb01 0402 	add.w	r4, r1, r2
 8011274:	d902      	bls.n	801127c <memmove+0x10>
 8011276:	4284      	cmp	r4, r0
 8011278:	4623      	mov	r3, r4
 801127a:	d807      	bhi.n	801128c <memmove+0x20>
 801127c:	1e43      	subs	r3, r0, #1
 801127e:	42a1      	cmp	r1, r4
 8011280:	d008      	beq.n	8011294 <memmove+0x28>
 8011282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011286:	f803 2f01 	strb.w	r2, [r3, #1]!
 801128a:	e7f8      	b.n	801127e <memmove+0x12>
 801128c:	4402      	add	r2, r0
 801128e:	4601      	mov	r1, r0
 8011290:	428a      	cmp	r2, r1
 8011292:	d100      	bne.n	8011296 <memmove+0x2a>
 8011294:	bd10      	pop	{r4, pc}
 8011296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801129a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801129e:	e7f7      	b.n	8011290 <memmove+0x24>

080112a0 <_realloc_r>:
 80112a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112a4:	4680      	mov	r8, r0
 80112a6:	4614      	mov	r4, r2
 80112a8:	460e      	mov	r6, r1
 80112aa:	b921      	cbnz	r1, 80112b6 <_realloc_r+0x16>
 80112ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112b0:	4611      	mov	r1, r2
 80112b2:	f7ff bbc9 	b.w	8010a48 <_malloc_r>
 80112b6:	b92a      	cbnz	r2, 80112c4 <_realloc_r+0x24>
 80112b8:	f7ff fb5a 	bl	8010970 <_free_r>
 80112bc:	4625      	mov	r5, r4
 80112be:	4628      	mov	r0, r5
 80112c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c4:	f000 f81b 	bl	80112fe <_malloc_usable_size_r>
 80112c8:	4284      	cmp	r4, r0
 80112ca:	4607      	mov	r7, r0
 80112cc:	d802      	bhi.n	80112d4 <_realloc_r+0x34>
 80112ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80112d2:	d812      	bhi.n	80112fa <_realloc_r+0x5a>
 80112d4:	4621      	mov	r1, r4
 80112d6:	4640      	mov	r0, r8
 80112d8:	f7ff fbb6 	bl	8010a48 <_malloc_r>
 80112dc:	4605      	mov	r5, r0
 80112de:	2800      	cmp	r0, #0
 80112e0:	d0ed      	beq.n	80112be <_realloc_r+0x1e>
 80112e2:	42bc      	cmp	r4, r7
 80112e4:	4622      	mov	r2, r4
 80112e6:	4631      	mov	r1, r6
 80112e8:	bf28      	it	cs
 80112ea:	463a      	movcs	r2, r7
 80112ec:	f7ff fb2a 	bl	8010944 <memcpy>
 80112f0:	4631      	mov	r1, r6
 80112f2:	4640      	mov	r0, r8
 80112f4:	f7ff fb3c 	bl	8010970 <_free_r>
 80112f8:	e7e1      	b.n	80112be <_realloc_r+0x1e>
 80112fa:	4635      	mov	r5, r6
 80112fc:	e7df      	b.n	80112be <_realloc_r+0x1e>

080112fe <_malloc_usable_size_r>:
 80112fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011302:	1f18      	subs	r0, r3, #4
 8011304:	2b00      	cmp	r3, #0
 8011306:	bfbc      	itt	lt
 8011308:	580b      	ldrlt	r3, [r1, r0]
 801130a:	18c0      	addlt	r0, r0, r3
 801130c:	4770      	bx	lr
	...

08011310 <_init>:
 8011310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011312:	bf00      	nop
 8011314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011316:	bc08      	pop	{r3}
 8011318:	469e      	mov	lr, r3
 801131a:	4770      	bx	lr

0801131c <_fini>:
 801131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131e:	bf00      	nop
 8011320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011322:	bc08      	pop	{r3}
 8011324:	469e      	mov	lr, r3
 8011326:	4770      	bx	lr


rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001032c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ce4  080104cc  080104cc  000204cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131b0  080131b0  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  080131b0  080131b0  000231b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080131b8  080131b8  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080131b8  080131b8  000231b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080131bc  080131bc  000231bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  080131c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001bccc  200001d0  08013390  000301d0  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  2001be9c  08013390  0003be9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a553  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063aa  00000000  00000000  0005a753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b8  00000000  00000000  00060b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f00  00000000  00000000  00062cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f390  00000000  00000000  00064bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d917  00000000  00000000  00083f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a67a9  00000000  00000000  000b185f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158008  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009100  00000000  00000000  00158058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080104b4 	.word	0x080104b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	080104b4 	.word	0x080104b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <displayBackgrounds>:
char buff[20];

uint16_t light_color = ST7735_COLOR565(125, 160, 175);
uint16_t dark_color = ST7735_COLOR565(40, 80, 130);

void displayBackgrounds() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af04      	add	r7, sp, #16
	/* backgriund */
	ST7735_FillRectangleFast(0, 0, 160, 80, light_color);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <displayBackgrounds+0xbc>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2350      	movs	r3, #80	; 0x50
 8000592:	22a0      	movs	r2, #160	; 0xa0
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f000 ffd2 	bl	8001540 <ST7735_FillRectangleFast>
	/* down string */
	ST7735_FillRectangleFast(0, 64, 160, 16, dark_color);
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <displayBackgrounds+0xc0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2310      	movs	r3, #16
 80005a4:	22a0      	movs	r2, #160	; 0xa0
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 ffc9 	bl	8001540 <ST7735_FillRectangleFast>
	/* up string */
	ST7735_FillRectangleFast(0, 0, 160, 20, dark_color);
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <displayBackgrounds+0xc0>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2314      	movs	r3, #20
 80005b6:	22a0      	movs	r2, #160	; 0xa0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 ffc0 	bl	8001540 <ST7735_FillRectangleFast>
	/* labels */
	ST7735_WriteString(1, 6, "BAND",Font_7x10, light_color, dark_color);
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <displayBackgrounds+0xbc>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <displayBackgrounds+0xc0>)
 80005c6:	8819      	ldrh	r1, [r3, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <displayBackgrounds+0xc4>)
 80005ca:	9102      	str	r1, [sp, #8]
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <displayBackgrounds+0xc8>)
 80005d6:	2106      	movs	r1, #6
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 fef4 	bl	80013c6 <ST7735_WriteString>
	ST7735_WriteString(72, 6,"STEP",Font_7x10, light_color, dark_color);
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <displayBackgrounds+0xbc>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <displayBackgrounds+0xc0>)
 80005e4:	8819      	ldrh	r1, [r3, #0]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <displayBackgrounds+0xc4>)
 80005e8:	9102      	str	r1, [sp, #8]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <displayBackgrounds+0xcc>)
 80005f4:	2106      	movs	r1, #6
 80005f6:	2048      	movs	r0, #72	; 0x48
 80005f8:	f000 fee5 	bl	80013c6 <ST7735_WriteString>
    ST7735_WriteString(2, 35, "VFO", Font_7x10, dark_color, light_color);
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <displayBackgrounds+0xc0>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <displayBackgrounds+0xbc>)
 8000602:	8819      	ldrh	r1, [r3, #0]
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <displayBackgrounds+0xc4>)
 8000606:	9102      	str	r1, [sp, #8]
 8000608:	9201      	str	r2, [sp, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <displayBackgrounds+0xd0>)
 8000612:	2123      	movs	r1, #35	; 0x23
 8000614:	2002      	movs	r0, #2
 8000616:	f000 fed6 	bl	80013c6 <ST7735_WriteString>
    ST7735_WriteString(2, 43, " Hz", Font_7x10, dark_color, light_color);
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <displayBackgrounds+0xc0>)
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <displayBackgrounds+0xbc>)
 8000620:	8819      	ldrh	r1, [r3, #0]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <displayBackgrounds+0xc4>)
 8000624:	9102      	str	r1, [sp, #8]
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <displayBackgrounds+0xd4>)
 8000630:	212b      	movs	r1, #43	; 0x2b
 8000632:	2002      	movs	r0, #2
 8000634:	f000 fec7 	bl	80013c6 <ST7735_WriteString>
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000002 	.word	0x20000002
 8000648:	20000004 	.word	0x20000004
 800064c:	080104cc 	.word	0x080104cc
 8000650:	080104d4 	.word	0x080104d4
 8000654:	080104dc 	.word	0x080104dc
 8000658:	080104e0 	.word	0x080104e0

0800065c <displayBand>:

void displayBand(const char * band)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]

	ST7735_WriteString(35, 2, band, Font_11x18, light_color, dark_color);
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <displayBand+0x30>)
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <displayBand+0x34>)
 800066a:	8819      	ldrh	r1, [r3, #0]
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <displayBand+0x38>)
 800066e:	9102      	str	r1, [sp, #8]
 8000670:	9201      	str	r2, [sp, #4]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	9200      	str	r2, [sp, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	2102      	movs	r1, #2
 800067c:	2023      	movs	r0, #35	; 0x23
 800067e:	f000 fea2 	bl	80013c6 <ST7735_WriteString>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	20000002 	.word	0x20000002
 8000694:	2000000c 	.word	0x2000000c

08000698 <displayStep>:

void displayStep(const char * step)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af04      	add	r7, sp, #16
 800069e:	6078      	str	r0, [r7, #4]
	ST7735_WriteString(104, 2, step, Font_11x18, light_color, dark_color);
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <displayStep+0x30>)
 80006a2:	881a      	ldrh	r2, [r3, #0]
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <displayStep+0x34>)
 80006a6:	8819      	ldrh	r1, [r3, #0]
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <displayStep+0x38>)
 80006aa:	9102      	str	r1, [sp, #8]
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	9200      	str	r2, [sp, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	2102      	movs	r1, #2
 80006b8:	2068      	movs	r0, #104	; 0x68
 80006ba:	f000 fe84 	bl	80013c6 <ST7735_WriteString>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000002 	.word	0x20000002
 80006d0:	2000000c 	.word	0x2000000c

080006d4 <displayFrequency>:

void displayFrequency(uint32_t freq) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af04      	add	r7, sp, #16
 80006da:	6078      	str	r0, [r7, #4]
	uint16_t th, dig, mi;
	th = freq%1000;
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <displayFrequency+0xa4>)
 80006e0:	fba3 1302 	umull	r1, r3, r3, r2
 80006e4:	099b      	lsrs	r3, r3, #6
 80006e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ea:	fb01 f303 	mul.w	r3, r1, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	81fb      	strh	r3, [r7, #14]
	dig = (freq / 1000)%1000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a20      	ldr	r2, [pc, #128]	; (8000778 <displayFrequency+0xa4>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	099a      	lsrs	r2, r3, #6
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <displayFrequency+0xa4>)
 80006fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000702:	099b      	lsrs	r3, r3, #6
 8000704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000708:	fb01 f303 	mul.w	r3, r1, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	81bb      	strh	r3, [r7, #12]
	mi = (freq / 1000000);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <displayFrequency+0xa8>)
 8000714:	fba2 2303 	umull	r2, r3, r2, r3
 8000718:	0c9b      	lsrs	r3, r3, #18
 800071a:	817b      	strh	r3, [r7, #10]
	sprintf(buff, "%02d.%03d",mi, dig);
 800071c:	897a      	ldrh	r2, [r7, #10]
 800071e:	89bb      	ldrh	r3, [r7, #12]
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <displayFrequency+0xac>)
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <displayFrequency+0xb0>)
 8000724:	f00f fb58 	bl	800fdd8 <siprintf>
	ST7735_WriteString(26, 32, buff, Font_16x26, dark_color, light_color);
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <displayFrequency+0xb4>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <displayFrequency+0xb8>)
 800072e:	8819      	ldrh	r1, [r3, #0]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <displayFrequency+0xbc>)
 8000732:	9102      	str	r1, [sp, #8]
 8000734:	9201      	str	r2, [sp, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	9200      	str	r2, [sp, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <displayFrequency+0xb0>)
 800073e:	2120      	movs	r1, #32
 8000740:	201a      	movs	r0, #26
 8000742:	f000 fe40 	bl	80013c6 <ST7735_WriteString>
	sprintf(buff, "%03d",th);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	461a      	mov	r2, r3
 800074a:	4912      	ldr	r1, [pc, #72]	; (8000794 <displayFrequency+0xc0>)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <displayFrequency+0xb0>)
 800074e:	f00f fb43 	bl	800fdd8 <siprintf>
	ST7735_WriteString(125, 37, buff, Font_11x18, dark_color, light_color);
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <displayFrequency+0xb4>)
 8000754:	881a      	ldrh	r2, [r3, #0]
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <displayFrequency+0xb8>)
 8000758:	8819      	ldrh	r1, [r3, #0]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <displayFrequency+0xc4>)
 800075c:	9102      	str	r1, [sp, #8]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <displayFrequency+0xb0>)
 8000768:	2125      	movs	r1, #37	; 0x25
 800076a:	207d      	movs	r0, #125	; 0x7d
 800076c:	f000 fe2b 	bl	80013c6 <ST7735_WriteString>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	10624dd3 	.word	0x10624dd3
 800077c:	431bde83 	.word	0x431bde83
 8000780:	080104e4 	.word	0x080104e4
 8000784:	200001ec 	.word	0x200001ec
 8000788:	20000002 	.word	0x20000002
 800078c:	20000000 	.word	0x20000000
 8000790:	20000014 	.word	0x20000014
 8000794:	080104f0 	.word	0x080104f0
 8000798:	2000000c 	.word	0x2000000c

0800079c <blk_pwm_setvalue>:

void blk_pwm_setvalue(uint16_t value)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	  USR_TIM_PWM_OpenTim5Ch2();
 80007a6:	f001 fb35 	bl	8001e14 <USR_TIM_PWM_OpenTim5Ch2>
	  USR_TIM_PWM_SetCompare(value * 10);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	461a      	mov	r2, r3
 80007ae:	0092      	lsls	r2, r2, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fb36 	bl	8001e28 <USR_TIM_PWM_SetCompare>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <setBacklight>:

void setBacklight(uint8_t percent) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	81fb      	strh	r3, [r7, #14]
	uint16_t d = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i <= percent; i++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	81fb      	strh	r3, [r7, #14]
 80007da:	e013      	b.n	8000804 <setBacklight+0x40>
		blk_pwm_setvalue(i);
 80007dc:	89fb      	ldrh	r3, [r7, #14]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffdc 	bl	800079c <blk_pwm_setvalue>
		for (d = 0; d <=60000; d++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	81bb      	strh	r3, [r7, #12]
 80007e8:	e002      	b.n	80007f0 <setBacklight+0x2c>
 80007ea:	89bb      	ldrh	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	81bb      	strh	r3, [r7, #12]
 80007f0:	89bb      	ldrh	r3, [r7, #12]
 80007f2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d9f7      	bls.n	80007ea <setBacklight+0x26>
		{

		}
		d = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i <= percent; i++) {
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	3301      	adds	r3, #1
 8000802:	81fb      	strh	r3, [r7, #14]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	b29b      	uxth	r3, r3
 8000808:	89fa      	ldrh	r2, [r7, #14]
 800080a:	429a      	cmp	r2, r3
 800080c:	d9e6      	bls.n	80007dc <setBacklight+0x18>
	}
	i=0;
 800080e:	2300      	movs	r3, #0
 8000810:	81fb      	strh	r3, [r7, #14]
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <getRunTimeCounterValue+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	2000025c 	.word	0x2000025c

08000840 <vApplicationIdleHook>:
extern uint16_t current_step;
extern uint8_t current_band;
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	//vTaskList(taskListStatus);
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <MX_FREERTOS_Init+0x28>)
 8000856:	2100      	movs	r1, #0
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <MX_FREERTOS_Init+0x2c>)
 800085a:	f00b fed1 	bl	800c600 <osThreadNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <MX_FREERTOS_Init+0x30>)
 8000862:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8000864:	4a07      	ldr	r2, [pc, #28]	; (8000884 <MX_FREERTOS_Init+0x34>)
 8000866:	2100      	movs	r1, #0
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_FREERTOS_Init+0x38>)
 800086a:	f00b fec9 	bl	800c600 <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <MX_FREERTOS_Init+0x3c>)
 8000872:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	08013044 	.word	0x08013044
 800087c:	08000891 	.word	0x08000891
 8000880:	20000200 	.word	0x20000200
 8000884:	08013068 	.word	0x08013068
 8000888:	080008c9 	.word	0x080008c9
 800088c:	20000204 	.word	0x20000204

08000890 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000898:	f00e fc08 	bl	800f0ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	current_freq = band[current_band].minFreq;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <StartDefaultTask+0x2c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <StartDefaultTask+0x30>)
 80008a4:	460b      	mov	r3, r1
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	440b      	add	r3, r1
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	4413      	add	r3, r2
 80008ae:	3304      	adds	r3, #4
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <StartDefaultTask+0x34>)
 80008b6:	601a      	str	r2, [r3, #0]
	//current_step = step[current_step].step;
	for (;;) {
 80008b8:	e7fe      	b.n	80008b8 <StartDefaultTask+0x28>
 80008ba:	bf00      	nop
 80008bc:	20000266 	.word	0x20000266
 80008c0:	20000054 	.word	0x20000054
 80008c4:	20000260 	.word	0x20000260

080008c8 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
	uint8_t buttonNumber = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	76fb      	strb	r3, [r7, #27]
	/*  */
	const uint32_t max_freq = band[current_band].maxFreq;
 80008d8:	4b63      	ldr	r3, [pc, #396]	; (8000a68 <StartEncoderTask+0x1a0>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	4a63      	ldr	r2, [pc, #396]	; (8000a6c <StartEncoderTask+0x1a4>)
 80008e0:	460b      	mov	r3, r1
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	440b      	add	r3, r1
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	3308      	adds	r3, #8
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	617b      	str	r3, [r7, #20]
	const uint32_t min_freq = band[current_band].minFreq;
 80008f0:	4b5d      	ldr	r3, [pc, #372]	; (8000a68 <StartEncoderTask+0x1a0>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <StartEncoderTask+0x1a4>)
 80008f8:	460b      	mov	r3, r1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	440b      	add	r3, r1
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	3304      	adds	r3, #4
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	613b      	str	r3, [r7, #16]
	current_freq = min_freq;
 8000908:	4a59      	ldr	r2, [pc, #356]	; (8000a70 <StartEncoderTask+0x1a8>)
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	6013      	str	r3, [r2, #0]
	/* */
	//ST7735_FillScreenFast(ST7735_BLACK);
	displayBackgrounds();
 800090e:	f7ff fe39 	bl	8000584 <displayBackgrounds>
	displayBand(band[current_band].name);
 8000912:	4b55      	ldr	r3, [pc, #340]	; (8000a68 <StartEncoderTask+0x1a0>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4619      	mov	r1, r3
 8000918:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <StartEncoderTask+0x1a4>)
 800091a:	460b      	mov	r3, r1
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	440b      	add	r3, r1
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4413      	add	r3, r2
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe98 	bl	800065c <displayBand>
	displayStep(step[current_step].name);
 800092c:	4b51      	ldr	r3, [pc, #324]	; (8000a74 <StartEncoderTask+0x1ac>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b51      	ldr	r3, [pc, #324]	; (8000a78 <StartEncoderTask+0x1b0>)
 8000934:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fead 	bl	8000698 <displayStep>
	displayFrequency(current_freq);
 800093e:	4b4c      	ldr	r3, [pc, #304]	; (8000a70 <StartEncoderTask+0x1a8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fec6 	bl	80006d4 <displayFrequency>
	/* */
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8000948:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <StartEncoderTask+0x1b4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	60fb      	str	r3, [r7, #12]
		uint16_t step_value = step[current_step].step;
 8000950:	4b48      	ldr	r3, [pc, #288]	; (8000a74 <StartEncoderTask+0x1ac>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	4a48      	ldr	r2, [pc, #288]	; (8000a78 <StartEncoderTask+0x1b0>)
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	4413      	add	r3, r2
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	817b      	strh	r3, [r7, #10]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	3b01      	subs	r3, #1
 8000962:	b29b      	uxth	r3, r3
 8000964:	0fda      	lsrs	r2, r3, #31
 8000966:	4413      	add	r3, r2
 8000968:	105b      	asrs	r3, r3, #1
 800096a:	425b      	negs	r3, r3
 800096c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000970:	337f      	adds	r3, #127	; 0x7f
 8000972:	60fb      	str	r3, [r7, #12]

		if (currCounter != prevCounter) {
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	429a      	cmp	r2, r3
 800097a:	d044      	beq.n	8000a06 <StartEncoderTask+0x13e>
			if (currCounter > prevCounter) {
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	429a      	cmp	r2, r3
 8000982:	dd1d      	ble.n	80009c0 <StartEncoderTask+0xf8>
				if (current_freq != min_freq) {
 8000984:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <StartEncoderTask+0x1a8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	429a      	cmp	r2, r3
 800098c:	d006      	beq.n	800099c <StartEncoderTask+0xd4>
					current_freq -= step_value;
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <StartEncoderTask+0x1a8>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	897b      	ldrh	r3, [r7, #10]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a36      	ldr	r2, [pc, #216]	; (8000a70 <StartEncoderTask+0x1a8>)
 8000998:	6013      	str	r3, [r2, #0]
 800099a:	e002      	b.n	80009a2 <StartEncoderTask+0xda>
				} else {
					current_freq = max_freq;
 800099c:	4a34      	ldr	r2, [pc, #208]	; (8000a70 <StartEncoderTask+0x1a8>)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 80009a2:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <StartEncoderTask+0x1a8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2101      	movs	r1, #1
 80009a8:	4618      	mov	r0, r3
 80009aa:	f009 fd49 	bl	800a440 <si5351_SetupCLK0>
				displayFrequency(current_freq);
 80009ae:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <StartEncoderTask+0x1a8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe8e 	bl	80006d4 <displayFrequency>
				osDelay(5);
 80009b8:	2005      	movs	r0, #5
 80009ba:	f00b feb3 	bl	800c724 <osDelay>
 80009be:	e020      	b.n	8000a02 <StartEncoderTask+0x13a>
			} else if (currCounter < prevCounter) {
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	da1c      	bge.n	8000a02 <StartEncoderTask+0x13a>
				if (current_freq != max_freq) {
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <StartEncoderTask+0x1a8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d006      	beq.n	80009e0 <StartEncoderTask+0x118>
					current_freq += step_value;
 80009d2:	897a      	ldrh	r2, [r7, #10]
 80009d4:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <StartEncoderTask+0x1a8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4413      	add	r3, r2
 80009da:	4a25      	ldr	r2, [pc, #148]	; (8000a70 <StartEncoderTask+0x1a8>)
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	e002      	b.n	80009e6 <StartEncoderTask+0x11e>
				} else {
					current_freq = min_freq;
 80009e0:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <StartEncoderTask+0x1a8>)
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	6013      	str	r3, [r2, #0]
				}
				si5351_SetupCLK0(current_freq, SI5351_DRIVE_STRENGTH_4MA);
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <StartEncoderTask+0x1a8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2101      	movs	r1, #1
 80009ec:	4618      	mov	r0, r3
 80009ee:	f009 fd27 	bl	800a440 <si5351_SetupCLK0>
				displayFrequency(current_freq);
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <StartEncoderTask+0x1a8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fe6c 	bl	80006d4 <displayFrequency>
				osDelay(5);
 80009fc:	2005      	movs	r0, #5
 80009fe:	f00b fe91 	bl	800c724 <osDelay>
			} else {

			}
			prevCounter = currCounter;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if (buttonPressed[buttonNumber]) {
 8000a06:	7efb      	ldrb	r3, [r7, #27]
 8000a08:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <StartEncoderTask+0x1b8>)
 8000a0a:	5cd3      	ldrb	r3, [r2, r3]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d025      	beq.n	8000a5e <StartEncoderTask+0x196>
			buttonPressed[buttonNumber] = 0;
 8000a12:	7efb      	ldrb	r3, [r7, #27]
 8000a14:	4a1a      	ldr	r2, [pc, #104]	; (8000a80 <StartEncoderTask+0x1b8>)
 8000a16:	2100      	movs	r1, #0
 8000a18:	54d1      	strb	r1, [r2, r3]
			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			if (current_step != lastStep)
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <StartEncoderTask+0x1ac>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	2306      	movs	r3, #6
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d00f      	beq.n	8000a46 <StartEncoderTask+0x17e>
			{
				current_step++;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <StartEncoderTask+0x1ac>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <StartEncoderTask+0x1ac>)
 8000a30:	801a      	strh	r2, [r3, #0]
				displayStep(step[current_step].name);
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <StartEncoderTask+0x1ac>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <StartEncoderTask+0x1b0>)
 8000a3a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fe2a 	bl	8000698 <displayStep>
 8000a44:	e00b      	b.n	8000a5e <StartEncoderTask+0x196>
			} else
			{
				current_step = 0;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <StartEncoderTask+0x1ac>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	801a      	strh	r2, [r3, #0]
				displayStep(step[current_step].name);
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <StartEncoderTask+0x1ac>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <StartEncoderTask+0x1b0>)
 8000a54:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fe1d 	bl	8000698 <displayStep>
			}
		}
		osDelay(5);
 8000a5e:	2005      	movs	r0, #5
 8000a60:	f00b fe60 	bl	800c724 <osDelay>
	for (;;) {
 8000a64:	e770      	b.n	8000948 <StartEncoderTask+0x80>
 8000a66:	bf00      	nop
 8000a68:	20000266 	.word	0x20000266
 8000a6c:	20000054 	.word	0x20000054
 8000a70:	20000260 	.word	0x20000260
 8000a74:	20000264 	.word	0x20000264
 8000a78:	2000001c 	.word	0x2000001c
 8000a7c:	20000380 	.word	0x20000380
 8000a80:	20000328 	.word	0x20000328

08000a84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <MX_GPIO_Init+0x108>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a3a      	ldr	r2, [pc, #232]	; (8000b8c <MX_GPIO_Init+0x108>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <MX_GPIO_Init+0x108>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <MX_GPIO_Init+0x108>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a33      	ldr	r2, [pc, #204]	; (8000b8c <MX_GPIO_Init+0x108>)
 8000ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <MX_GPIO_Init+0x108>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <MX_GPIO_Init+0x108>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a2c      	ldr	r2, [pc, #176]	; (8000b8c <MX_GPIO_Init+0x108>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <MX_GPIO_Init+0x108>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <MX_GPIO_Init+0x108>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a25      	ldr	r2, [pc, #148]	; (8000b8c <MX_GPIO_Init+0x108>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <MX_GPIO_Init+0x108>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b10:	481f      	ldr	r0, [pc, #124]	; (8000b90 <MX_GPIO_Init+0x10c>)
 8000b12:	f001 fddd 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	211c      	movs	r1, #28
 8000b1a:	481e      	ldr	r0, [pc, #120]	; (8000b94 <MX_GPIO_Init+0x110>)
 8000b1c:	f001 fdd8 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4815      	ldr	r0, [pc, #84]	; (8000b90 <MX_GPIO_Init+0x10c>)
 8000b3a:	f001 fb2f 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000b3e:	231c      	movs	r3, #28
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	480f      	ldr	r0, [pc, #60]	; (8000b94 <MX_GPIO_Init+0x110>)
 8000b56:	f001 fb21 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480a      	ldr	r0, [pc, #40]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000b70:	f001 fb14 	bl	800219c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2105      	movs	r1, #5
 8000b78:	2006      	movs	r0, #6
 8000b7a:	f001 facb 	bl	8002114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b7e:	2006      	movs	r0, #6
 8000b80:	f001 faf4 	bl	800216c <HAL_NVIC_EnableIRQ>

}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020400 	.word	0x40020400

08000b9c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_I2C3_Init+0x50>)
 8000ba2:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <MX_I2C3_Init+0x54>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_I2C3_Init+0x50>)
 8000ba8:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <MX_I2C3_Init+0x58>)
 8000baa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_I2C3_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_I2C3_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_I2C3_Init+0x50>)
 8000bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bbe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <MX_I2C3_Init+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_I2C3_Init+0x50>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <MX_I2C3_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_I2C3_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_I2C3_Init+0x50>)
 8000bda:	f001 fdc3 	bl	8002764 <HAL_I2C_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000be4:	f000 f964 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000208 	.word	0x20000208
 8000bf0:	40005c00 	.word	0x40005c00
 8000bf4:	000186a0 	.word	0x000186a0

08000bf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <HAL_I2C_MspInit+0xc0>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d14a      	bne.n	8000cb0 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c58:	2312      	movs	r3, #18
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c64:	2304      	movs	r3, #4
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <HAL_I2C_MspInit+0xc8>)
 8000c70:	f001 fa94 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c74:	2310      	movs	r3, #16
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c78:	2312      	movs	r3, #18
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000c84:	2309      	movs	r3, #9
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <HAL_I2C_MspInit+0xcc>)
 8000c90:	f001 fa84 	bl	800219c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000c9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <HAL_I2C_MspInit+0xc4>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40005c00 	.word	0x40005c00
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000cce:	f000 fae9 	bl	80012a4 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_COLOR565(40, 80, 130));
 8000cd2:	f642 2090 	movw	r0, #10896	; 0x2a90
 8000cd6:	f000 fcb7 	bl	8001648 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(8, 10, "ShortWave", Font_16x26, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <Display_Init+0x5c>)
 8000cdc:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000ce0:	9202      	str	r2, [sp, #8]
 8000ce2:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000ce6:	9201      	str	r2, [sp, #4]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	9200      	str	r2, [sp, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <Display_Init+0x60>)
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	2008      	movs	r0, #8
 8000cf4:	f000 fb67 	bl	80013c6 <ST7735_WriteString>
    ST7735_WriteString(34, 35, "receiver", Font_11x18, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <Display_Init+0x64>)
 8000cfa:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000cfe:	9202      	str	r2, [sp, #8]
 8000d00:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000d04:	9201      	str	r2, [sp, #4]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	9200      	str	r2, [sp, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <Display_Init+0x68>)
 8000d0e:	2123      	movs	r1, #35	; 0x23
 8000d10:	2022      	movs	r0, #34	; 0x22
 8000d12:	f000 fb58 	bl	80013c6 <ST7735_WriteString>
    HAL_Delay(3000);
 8000d16:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d1a:	f001 f909 	bl	8001f30 <HAL_Delay>
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000014 	.word	0x20000014
 8000d28:	08010550 	.word	0x08010550
 8000d2c:	2000000c 	.word	0x2000000c
 8000d30:	0801055c 	.word	0x0801055c

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d38:	f001 f8b8 	bl	8001eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3c:	f000 f83c 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d40:	f7ff fea0 	bl	8000a84 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d44:	f000 f94a 	bl	8000fdc <MX_SPI1_Init>
  MX_TIM3_Init();
 8000d48:	f000 fe40 	bl	80019cc <MX_TIM3_Init>
  MX_RTC_Init();
 8000d4c:	f000 f8c0 	bl	8000ed0 <MX_RTC_Init>
  MX_TIM4_Init();
 8000d50:	f000 fe90 	bl	8001a74 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000d54:	f000 fdea 	bl	800192c <MX_TIM1_Init>
  MX_I2C3_Init();
 8000d58:	f7ff ff20 	bl	8000b9c <MX_I2C3_Init>
  MX_TIM5_Init();
 8000d5c:	f000 fed6 	bl	8001b0c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000d60:	f00e f9a4 	bl	800f0ac <MX_USB_DEVICE_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000d64:	213c      	movs	r1, #60	; 0x3c
 8000d66:	4810      	ldr	r0, [pc, #64]	; (8000da8 <main+0x74>)
 8000d68:	f006 fa24 	bl	80071b4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	480f      	ldr	r0, [pc, #60]	; (8000dac <main+0x78>)
 8000d70:	f005 ff5a 	bl	8006c28 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000d74:	480e      	ldr	r0, [pc, #56]	; (8000db0 <main+0x7c>)
 8000d76:	f005 fdf5 	bl	8006964 <HAL_TIM_Base_Start_IT>
  /* Display */
  setBacklight(50);
 8000d7a:	2032      	movs	r0, #50	; 0x32
 8000d7c:	f7ff fd22 	bl	80007c4 <setBacklight>
  Display_Init();
 8000d80:	f7ff ffa2 	bl	8000cc8 <Display_Init>
  /* si5251*/
  si5351_Init(0);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f009 f975 	bl	800a074 <si5351_Init>
  si5351_SetupCLK0(7000000, SI5351_DRIVE_STRENGTH_4MA);
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <main+0x80>)
 8000d8e:	f009 fb57 	bl	800a440 <si5351_SetupCLK0>
  si5351_EnableOutputs(1 << 0);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f009 fb75 	bl	800a482 <si5351_EnableOutputs>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000d98:	f00b fbe8 	bl	800c56c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000d9c:	f7ff fd58 	bl	8000850 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000da0:	f00b fc08 	bl	800c5b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <main+0x70>
 8000da6:	bf00      	nop
 8000da8:	20000380 	.word	0x20000380
 8000dac:	20000410 	.word	0x20000410
 8000db0:	20000338 	.word	0x20000338
 8000db4:	006acfc0 	.word	0x006acfc0

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	; 0x50
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	2230      	movs	r2, #48	; 0x30
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f00e fea4 	bl	800fb14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <SystemClock_Config+0xcc>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	4a27      	ldr	r2, [pc, #156]	; (8000e84 <SystemClock_Config+0xcc>)
 8000de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <SystemClock_Config+0xcc>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <SystemClock_Config+0xd0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <SystemClock_Config+0xd0>)
 8000e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <SystemClock_Config+0xd0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e14:	2305      	movs	r3, #5
 8000e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e2c:	2319      	movs	r3, #25
 8000e2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e30:	23c0      	movs	r3, #192	; 0xc0
 8000e32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0320 	add.w	r3, r7, #32
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 fd35 	bl	80048b0 <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e4c:	f000 f830 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2302      	movs	r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f004 f847 	bl	8004f00 <HAL_RCC_ClockConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e78:	f000 f81a 	bl	8000eb0 <Error_Handler>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3750      	adds	r7, #80	; 0x50
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40007000 	.word	0x40007000

08000e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {

  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e9e:	f001 f827 	bl	8001ef0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40014800 	.word	0x40014800

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>

08000eba <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <MX_RTC_Init+0xac>)
 8000eea:	4a25      	ldr	r2, [pc, #148]	; (8000f80 <MX_RTC_Init+0xb0>)
 8000eec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <MX_RTC_Init+0xac>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <MX_RTC_Init+0xac>)
 8000ef6:	227f      	movs	r2, #127	; 0x7f
 8000ef8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <MX_RTC_Init+0xac>)
 8000efc:	22ff      	movs	r2, #255	; 0xff
 8000efe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <MX_RTC_Init+0xac>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_RTC_Init+0xac>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_RTC_Init+0xac>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f12:	481a      	ldr	r0, [pc, #104]	; (8000f7c <MX_RTC_Init+0xac>)
 8000f14:	f004 fcc4 	bl	80058a0 <HAL_RTC_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f7ff ffc7 	bl	8000eb0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480f      	ldr	r0, [pc, #60]	; (8000f7c <MX_RTC_Init+0xac>)
 8000f3e:	f004 fd87 	bl	8005a50 <HAL_RTC_SetTime>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000f48:	f7ff ffb2 	bl	8000eb0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000f50:	2305      	movs	r3, #5
 8000f52:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8000f54:	2307      	movs	r3, #7
 8000f56:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000f58:	2316      	movs	r3, #22
 8000f5a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_RTC_Init+0xac>)
 8000f64:	f004 febc 	bl	8005ce0 <HAL_RTC_SetDate>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f6e:	f7ff ff9f 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000268 	.word	0x20000268
 8000f80:	40002800 	.word	0x40002800

08000f84 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <HAL_RTC_MspInit+0x50>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d111      	bne.n	8000fcc <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f004 fa5c 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000fc2:	f7ff ff75 	bl	8000eb0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <HAL_RTC_MspInit+0x54>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40002800 	.word	0x40002800
 8000fd8:	42470e3c 	.word	0x42470e3c

08000fdc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_SPI1_Init+0x64>)
 8000fe2:	4a18      	ldr	r2, [pc, #96]	; (8001044 <MX_SPI1_Init+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_SPI1_Init+0x64>)
 8000fe8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_SPI1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_SPI1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_SPI1_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_SPI1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_SPI1_Init+0x64>)
 8001008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_SPI1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <MX_SPI1_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_SPI1_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <MX_SPI1_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_SPI1_Init+0x64>)
 8001028:	220a      	movs	r2, #10
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_SPI1_Init+0x64>)
 800102e:	f005 f821 	bl	8006074 <HAL_SPI_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001038:	f7ff ff3a 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000288 	.word	0x20000288
 8001044:	40013000 	.word	0x40013000

08001048 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a19      	ldr	r2, [pc, #100]	; (80010cc <HAL_SPI_MspInit+0x84>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d12b      	bne.n	80010c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_SPI_MspInit+0x88>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <HAL_SPI_MspInit+0x88>)
 8001074:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_SPI_MspInit+0x88>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_SPI_MspInit+0x88>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <HAL_SPI_MspInit+0x88>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_SPI_MspInit+0x88>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010a2:	23a0      	movs	r3, #160	; 0xa0
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b2:	2305      	movs	r3, #5
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <HAL_SPI_MspInit+0x8c>)
 80010be:	f001 f86d 	bl	800219c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40013000 	.word	0x40013000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020000 	.word	0x40020000

080010d8 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2110      	movs	r1, #16
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <ST7735_Select+0x14>)
 80010e2:	f001 faf5 	bl	80026d0 <HAL_GPIO_WritePin>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020000 	.word	0x40020000

080010f0 <ST7735_Unselect>:

void ST7735_Unselect() {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2110      	movs	r1, #16
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <ST7735_Unselect+0x14>)
 80010fa:	f001 fae9 	bl	80026d0 <HAL_GPIO_WritePin>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40020000 	.word	0x40020000

08001108 <ST7735_Reset>:

static void ST7735_Reset() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2108      	movs	r1, #8
 8001110:	4806      	ldr	r0, [pc, #24]	; (800112c <ST7735_Reset+0x24>)
 8001112:	f001 fadd 	bl	80026d0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001116:	2005      	movs	r0, #5
 8001118:	f000 ff0a 	bl	8001f30 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2108      	movs	r1, #8
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <ST7735_Reset+0x24>)
 8001122:	f001 fad5 	bl	80026d0 <HAL_GPIO_WritePin>
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40020000 	.word	0x40020000

08001130 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2104      	movs	r1, #4
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <ST7735_WriteCommand+0x2c>)
 8001140:	f001 fac6 	bl	80026d0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001144:	1df9      	adds	r1, r7, #7
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	2201      	movs	r2, #1
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <ST7735_WriteCommand+0x30>)
 800114e:	f005 f92d 	bl	80063ac <HAL_SPI_Transmit>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40020000 	.word	0x40020000
 8001160:	20000288 	.word	0x20000288

08001164 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2104      	movs	r1, #4
 8001172:	4807      	ldr	r0, [pc, #28]	; (8001190 <ST7735_WriteData+0x2c>)
 8001174:	f001 faac 	bl	80026d0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b29a      	uxth	r2, r3
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4804      	ldr	r0, [pc, #16]	; (8001194 <ST7735_WriteData+0x30>)
 8001184:	f005 f912 	bl	80063ac <HAL_SPI_Transmit>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40020000 	.word	0x40020000
 8001194:	20000288 	.word	0x20000288

08001198 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80011aa:	e034      	b.n	8001216 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ffb9 	bl	8001130 <ST7735_WriteCommand>

        numArgs = *addr++;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80011c8:	7abb      	ldrb	r3, [r7, #10]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80011d2:	7abb      	ldrb	r3, [r7, #10]
 80011d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011d8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80011da:	7abb      	ldrb	r3, [r7, #10]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d008      	beq.n	80011f2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80011e0:	7abb      	ldrb	r3, [r7, #10]
 80011e2:	4619      	mov	r1, r3
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ffbd 	bl	8001164 <ST7735_WriteData>
            addr += numArgs;
 80011ea:	7abb      	ldrb	r3, [r7, #10]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80011f2:	89bb      	ldrh	r3, [r7, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00e      	beq.n	8001216 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001202:	89bb      	ldrh	r3, [r7, #12]
 8001204:	2bff      	cmp	r3, #255	; 0xff
 8001206:	d102      	bne.n	800120e <ST7735_ExecuteCommandList+0x76>
 8001208:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800120c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800120e:	89bb      	ldrh	r3, [r7, #12]
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fe8d 	bl	8001f30 <HAL_Delay>
    while(numCommands--) {
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	73fa      	strb	r2, [r7, #15]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1c5      	bne.n	80011ac <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800122a:	b590      	push	{r4, r7, lr}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	4604      	mov	r4, r0
 8001232:	4608      	mov	r0, r1
 8001234:	4611      	mov	r1, r2
 8001236:	461a      	mov	r2, r3
 8001238:	4623      	mov	r3, r4
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	4603      	mov	r3, r0
 800123e:	71bb      	strb	r3, [r7, #6]
 8001240:	460b      	mov	r3, r1
 8001242:	717b      	strb	r3, [r7, #5]
 8001244:	4613      	mov	r3, r2
 8001246:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001248:	202a      	movs	r0, #42	; 0x2a
 800124a:	f7ff ff71 	bl	8001130 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800124e:	2300      	movs	r3, #0
 8001250:	733b      	strb	r3, [r7, #12]
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	3301      	adds	r3, #1
 8001256:	b2db      	uxtb	r3, r3
 8001258:	737b      	strb	r3, [r7, #13]
 800125a:	2300      	movs	r3, #0
 800125c:	73bb      	strb	r3, [r7, #14]
 800125e:	797b      	ldrb	r3, [r7, #5]
 8001260:	3301      	adds	r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2104      	movs	r1, #4
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff79 	bl	8001164 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001272:	202b      	movs	r0, #43	; 0x2b
 8001274:	f7ff ff5c 	bl	8001130 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	331a      	adds	r3, #26
 800127c:	b2db      	uxtb	r3, r3
 800127e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001280:	793b      	ldrb	r3, [r7, #4]
 8001282:	331a      	adds	r3, #26
 8001284:	b2db      	uxtb	r3, r3
 8001286:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2104      	movs	r1, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff68 	bl	8001164 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001294:	202c      	movs	r0, #44	; 0x2c
 8001296:	f7ff ff4b 	bl	8001130 <ST7735_WriteCommand>
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd90      	pop	{r4, r7, pc}
	...

080012a4 <ST7735_Init>:

void ST7735_Init() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
    ST7735_Select();
 80012a8:	f7ff ff16 	bl	80010d8 <ST7735_Select>
    ST7735_Reset();
 80012ac:	f7ff ff2c 	bl	8001108 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80012b0:	4806      	ldr	r0, [pc, #24]	; (80012cc <ST7735_Init+0x28>)
 80012b2:	f7ff ff71 	bl	8001198 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <ST7735_Init+0x2c>)
 80012b8:	f7ff ff6e 	bl	8001198 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <ST7735_Init+0x30>)
 80012be:	f7ff ff6b 	bl	8001198 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80012c2:	f7ff ff15 	bl	80010f0 <ST7735_Unselect>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	0801308c 	.word	0x0801308c
 80012d0:	080130c8 	.word	0x080130c8
 80012d4:	080130d8 	.word	0x080130d8

080012d8 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80012d8:	b082      	sub	sp, #8
 80012da:	b590      	push	{r4, r7, lr}
 80012dc:	b089      	sub	sp, #36	; 0x24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
 80012e6:	460b      	mov	r3, r1
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	b2d8      	uxtb	r0, r3
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	b2d9      	uxtb	r1, r3
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012fe:	4413      	add	r3, r2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	3b01      	subs	r3, #1
 8001304:	b2dc      	uxtb	r4, r3
 8001306:	88bb      	ldrh	r3, [r7, #4]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800130e:	4413      	add	r3, r2
 8001310:	b2db      	uxtb	r3, r3
 8001312:	3b01      	subs	r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4622      	mov	r2, r4
 8001318:	f7ff ff87 	bl	800122a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	e043      	b.n	80013aa <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	3b20      	subs	r3, #32
 8001328:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800132c:	fb01 f303 	mul.w	r3, r1, r3
 8001330:	4619      	mov	r1, r3
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	440b      	add	r3, r1
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	e029      	b.n	8001398 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00e      	beq.n	8001372 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001354:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	b29b      	uxth	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	743b      	strb	r3, [r7, #16]
 800135e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001360:	b2db      	uxtb	r3, r3
 8001362:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2102      	movs	r1, #2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fefa 	bl	8001164 <ST7735_WriteData>
 8001370:	e00f      	b.n	8001392 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b29b      	uxth	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	733b      	strb	r3, [r7, #12]
 800137e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001382:	b2db      	uxtb	r3, r3
 8001384:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2102      	movs	r1, #2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fee9 	bl	8001164 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	3301      	adds	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800139c:	461a      	mov	r2, r3
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d3cf      	bcc.n	8001344 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	3301      	adds	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80013ae:	461a      	mov	r2, r3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d3b5      	bcc.n	8001322 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	3724      	adds	r7, #36	; 0x24
 80013bc:	46bd      	mov	sp, r7
 80013be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80013c2:	b002      	add	sp, #8
 80013c4:	4770      	bx	lr

080013c6 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80013c6:	b082      	sub	sp, #8
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af04      	add	r7, sp, #16
 80013ce:	603a      	str	r2, [r7, #0]
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
 80013d6:	460b      	mov	r3, r1
 80013d8:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80013da:	f7ff fe7d 	bl	80010d8 <ST7735_Select>

    while(*str) {
 80013de:	e02d      	b.n	800143c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	7d3a      	ldrb	r2, [r7, #20]
 80013e4:	4413      	add	r3, r2
 80013e6:	2b9f      	cmp	r3, #159	; 0x9f
 80013e8:	dd13      	ble.n	8001412 <ST7735_WriteString+0x4c>
            x = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80013ee:	7d7b      	ldrb	r3, [r7, #21]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	88bb      	ldrh	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	7d7a      	ldrb	r2, [r7, #21]
 80013fc:	4413      	add	r3, r2
 80013fe:	2b4f      	cmp	r3, #79	; 0x4f
 8001400:	dc21      	bgt.n	8001446 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b20      	cmp	r3, #32
 8001408:	d103      	bne.n	8001412 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	603b      	str	r3, [r7, #0]
                continue;
 8001410:	e014      	b.n	800143c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	781a      	ldrb	r2, [r3, #0]
 8001416:	88b9      	ldrh	r1, [r7, #4]
 8001418:	88f8      	ldrh	r0, [r7, #6]
 800141a:	8c3b      	ldrh	r3, [r7, #32]
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	8bbb      	ldrh	r3, [r7, #28]
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f7ff ff56 	bl	80012d8 <ST7735_WriteChar>
        x += font.width;
 800142c:	7d3b      	ldrb	r3, [r7, #20]
 800142e:	b29a      	uxth	r2, r3
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	4413      	add	r3, r2
 8001434:	80fb      	strh	r3, [r7, #6]
        str++;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1cd      	bne.n	80013e0 <ST7735_WriteString+0x1a>
 8001444:	e000      	b.n	8001448 <ST7735_WriteString+0x82>
                break;
 8001446:	bf00      	nop
    }

    ST7735_Unselect();
 8001448:	f7ff fe52 	bl	80010f0 <ST7735_Unselect>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001456:	b002      	add	sp, #8
 8001458:	4770      	bx	lr
	...

0800145c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	4604      	mov	r4, r0
 8001464:	4608      	mov	r0, r1
 8001466:	4611      	mov	r1, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4623      	mov	r3, r4
 800146c:	80fb      	strh	r3, [r7, #6]
 800146e:	4603      	mov	r3, r0
 8001470:	80bb      	strh	r3, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	807b      	strh	r3, [r7, #2]
 8001476:	4613      	mov	r3, r2
 8001478:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	2b9f      	cmp	r3, #159	; 0x9f
 800147e:	d857      	bhi.n	8001530 <ST7735_FillRectangle+0xd4>
 8001480:	88bb      	ldrh	r3, [r7, #4]
 8001482:	2b4f      	cmp	r3, #79	; 0x4f
 8001484:	d854      	bhi.n	8001530 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001486:	88fa      	ldrh	r2, [r7, #6]
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	4413      	add	r3, r2
 800148c:	2ba0      	cmp	r3, #160	; 0xa0
 800148e:	dd03      	ble.n	8001498 <ST7735_FillRectangle+0x3c>
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001496:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001498:	88ba      	ldrh	r2, [r7, #4]
 800149a:	883b      	ldrh	r3, [r7, #0]
 800149c:	4413      	add	r3, r2
 800149e:	2b50      	cmp	r3, #80	; 0x50
 80014a0:	dd03      	ble.n	80014aa <ST7735_FillRectangle+0x4e>
 80014a2:	88bb      	ldrh	r3, [r7, #4]
 80014a4:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80014a8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80014aa:	f7ff fe15 	bl	80010d8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	b2d8      	uxtb	r0, r3
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	b2d9      	uxtb	r1, r3
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4413      	add	r3, r2
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	3b01      	subs	r3, #1
 80014c4:	b2dc      	uxtb	r4, r3
 80014c6:	88bb      	ldrh	r3, [r7, #4]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	883b      	ldrh	r3, [r7, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	3b01      	subs	r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4622      	mov	r2, r4
 80014d8:	f7ff fea7 	bl	800122a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80014dc:	8c3b      	ldrh	r3, [r7, #32]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	733b      	strb	r3, [r7, #12]
 80014e6:	8c3b      	ldrh	r3, [r7, #32]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2104      	movs	r1, #4
 80014f0:	4811      	ldr	r0, [pc, #68]	; (8001538 <ST7735_FillRectangle+0xdc>)
 80014f2:	f001 f8ed 	bl	80026d0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80014f6:	883b      	ldrh	r3, [r7, #0]
 80014f8:	80bb      	strh	r3, [r7, #4]
 80014fa:	e013      	b.n	8001524 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	80fb      	strh	r3, [r7, #6]
 8001500:	e00a      	b.n	8001518 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001502:	f107 010c 	add.w	r1, r7, #12
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	2202      	movs	r2, #2
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <ST7735_FillRectangle+0xe0>)
 800150e:	f004 ff4d 	bl	80063ac <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	3b01      	subs	r3, #1
 8001516:	80fb      	strh	r3, [r7, #6]
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f1      	bne.n	8001502 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800151e:	88bb      	ldrh	r3, [r7, #4]
 8001520:	3b01      	subs	r3, #1
 8001522:	80bb      	strh	r3, [r7, #4]
 8001524:	88bb      	ldrh	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1e8      	bne.n	80014fc <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800152a:	f7ff fde1 	bl	80010f0 <ST7735_Unselect>
 800152e:	e000      	b.n	8001532 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001530:	bf00      	nop
}
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bd90      	pop	{r4, r7, pc}
 8001538:	40020000 	.word	0x40020000
 800153c:	20000288 	.word	0x20000288

08001540 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	4604      	mov	r4, r0
 8001548:	4608      	mov	r0, r1
 800154a:	4611      	mov	r1, r2
 800154c:	461a      	mov	r2, r3
 800154e:	4623      	mov	r3, r4
 8001550:	80fb      	strh	r3, [r7, #6]
 8001552:	4603      	mov	r3, r0
 8001554:	80bb      	strh	r3, [r7, #4]
 8001556:	460b      	mov	r3, r1
 8001558:	807b      	strh	r3, [r7, #2]
 800155a:	4613      	mov	r3, r2
 800155c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	2b9f      	cmp	r3, #159	; 0x9f
 8001562:	d869      	bhi.n	8001638 <ST7735_FillRectangleFast+0xf8>
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	2b4f      	cmp	r3, #79	; 0x4f
 8001568:	d866      	bhi.n	8001638 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800156a:	88fa      	ldrh	r2, [r7, #6]
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	4413      	add	r3, r2
 8001570:	2ba0      	cmp	r3, #160	; 0xa0
 8001572:	dd03      	ble.n	800157c <ST7735_FillRectangleFast+0x3c>
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800157a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800157c:	88ba      	ldrh	r2, [r7, #4]
 800157e:	883b      	ldrh	r3, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	2b50      	cmp	r3, #80	; 0x50
 8001584:	dd03      	ble.n	800158e <ST7735_FillRectangleFast+0x4e>
 8001586:	88bb      	ldrh	r3, [r7, #4]
 8001588:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800158c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800158e:	f7ff fda3 	bl	80010d8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	b2d8      	uxtb	r0, r3
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	b2d9      	uxtb	r1, r3
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b2dc      	uxtb	r4, r3
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	883b      	ldrh	r3, [r7, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4622      	mov	r2, r4
 80015bc:	f7ff fe35 	bl	800122a <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80015c0:	8c3b      	ldrh	r3, [r7, #32]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	723b      	strb	r3, [r7, #8]
 80015ca:	8c3b      	ldrh	r3, [r7, #32]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4618      	mov	r0, r3
 80015d6:	f00e fa7f 	bl	800fad8 <malloc>
 80015da:	4603      	mov	r3, r0
 80015dc:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80015de:	2300      	movs	r3, #0
 80015e0:	80fb      	strh	r3, [r7, #6]
 80015e2:	e008      	b.n	80015f6 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	893a      	ldrh	r2, [r7, #8]
 80015ee:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	3301      	adds	r3, #1
 80015f4:	80fb      	strh	r3, [r7, #6]
 80015f6:	88fa      	ldrh	r2, [r7, #6]
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d3f2      	bcc.n	80015e4 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	2104      	movs	r1, #4
 8001602:	480f      	ldr	r0, [pc, #60]	; (8001640 <ST7735_FillRectangleFast+0x100>)
 8001604:	f001 f864 	bl	80026d0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001608:	883b      	ldrh	r3, [r7, #0]
 800160a:	80bb      	strh	r3, [r7, #4]
 800160c:	e00b      	b.n	8001626 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800160e:	887b      	ldrh	r3, [r7, #2]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	68f9      	ldr	r1, [r7, #12]
 800161a:	480a      	ldr	r0, [pc, #40]	; (8001644 <ST7735_FillRectangleFast+0x104>)
 800161c:	f004 fec6 	bl	80063ac <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8001620:	88bb      	ldrh	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	80bb      	strh	r3, [r7, #4]
 8001626:	88bb      	ldrh	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <ST7735_FillRectangleFast+0xce>

    free(line);
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f00e fa5b 	bl	800fae8 <free>
    ST7735_Unselect();
 8001632:	f7ff fd5d 	bl	80010f0 <ST7735_Unselect>
 8001636:	e000      	b.n	800163a <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001638:	bf00      	nop
}
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}
 8001640:	40020000 	.word	0x40020000
 8001644:	20000288 	.word	0x20000288

08001648 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af02      	add	r7, sp, #8
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2350      	movs	r3, #80	; 0x50
 8001658:	22a0      	movs	r2, #160	; 0xa0
 800165a:	2100      	movs	r1, #0
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fefd 	bl	800145c <ST7735_FillRectangle>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_MspInit+0x54>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <HAL_MspInit+0x54>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_MspInit+0x54>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_MspInit+0x54>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_MspInit+0x54>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_MspInit+0x54>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	210f      	movs	r1, #15
 80016ae:	f06f 0001 	mvn.w	r0, #1
 80016b2:	f000 fd2f 	bl	8002114 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	201a      	movs	r0, #26
 80016da:	f000 fd1b 	bl	8002114 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016de:	201a      	movs	r0, #26
 80016e0:	f000 fd44 	bl	800216c <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <HAL_InitTick+0xa0>)
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_InitTick+0xa0>)
 80016ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f2:	6453      	str	r3, [r2, #68]	; 0x44
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_InitTick+0xa0>)
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001700:	f107 0210 	add.w	r2, r7, #16
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f003 fe80 	bl	8005410 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001710:	f003 fe6a 	bl	80053e8 <HAL_RCC_GetPCLK2Freq>
 8001714:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	4a13      	ldr	r2, [pc, #76]	; (8001768 <HAL_InitTick+0xa4>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9b      	lsrs	r3, r3, #18
 8001720:	3b01      	subs	r3, #1
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_InitTick+0xa8>)
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <HAL_InitTick+0xac>)
 8001728:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_InitTick+0xa8>)
 800172c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001730:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001732:	4a0e      	ldr	r2, [pc, #56]	; (800176c <HAL_InitTick+0xa8>)
 8001734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001736:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_InitTick+0xa8>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_InitTick+0xa8>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8001744:	4809      	ldr	r0, [pc, #36]	; (800176c <HAL_InitTick+0xa8>)
 8001746:	f005 f847 	bl	80067d8 <HAL_TIM_Base_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d104      	bne.n	800175a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8001750:	4806      	ldr	r0, [pc, #24]	; (800176c <HAL_InitTick+0xa8>)
 8001752:	f005 f907 	bl	8006964 <HAL_TIM_Base_Start_IT>
 8001756:	4603      	mov	r3, r0
 8001758:	e000      	b.n	800175c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	3730      	adds	r7, #48	; 0x30
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	431bde83 	.word	0x431bde83
 800176c:	200002e0 	.word	0x200002e0
 8001770:	40014800 	.word	0x40014800

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <NMI_Handler+0x4>

0800177a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <MemManage_Handler+0x4>

08001786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <UsageFault_Handler+0x4>

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f000 ffc5 	bl	8002734 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80017b6:	f005 fdbb 	bl	8007330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a02      	ldr	r2, [pc, #8]	; (80017cc <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80017c2:	6013      	str	r3, [r2, #0]
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000338 	.word	0x20000338
 80017cc:	2000025c 	.word	0x2000025c

080017d0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80017d6:	f005 fdab 	bl	8007330 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80017dc:	f005 fda8 	bl	8007330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000338 	.word	0x20000338
 80017e8:	200002e0 	.word	0x200002e0

080017ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017f0:	4808      	ldr	r0, [pc, #32]	; (8001814 <TIM3_IRQHandler+0x28>)
 80017f2:	f005 fd9d 	bl	8007330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <TIM3_IRQHandler+0x2c>)
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <TIM3_IRQHandler+0x2c>)
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <TIM3_IRQHandler+0x2c>)
 8001808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800180c:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000380 	.word	0x20000380
 8001818:	40000400 	.word	0x40000400

0800181c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <TIM5_IRQHandler+0x10>)
 8001822:	f005 fd85 	bl	8007330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000410 	.word	0x20000410

08001830 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <OTG_FS_IRQHandler+0x10>)
 8001836:	f001 ff0e 	bl	8003656 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2001b760 	.word	0x2001b760

08001844 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 800184e:	23ff      	movs	r3, #255	; 0xff
 8001850:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 800185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db11      	blt.n	8001888 <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8001864:	f000 fb58 	bl	8001f18 <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_GPIO_EXTI_Callback+0x50>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b63      	cmp	r3, #99	; 0x63
 8001874:	d90a      	bls.n	800188c <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_GPIO_EXTI_Callback+0x50>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 800187c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001880:	4a05      	ldr	r2, [pc, #20]	; (8001898 <HAL_GPIO_EXTI_Callback+0x54>)
 8001882:	2101      	movs	r1, #1
 8001884:	54d1      	strb	r1, [r2, r3]
 8001886:	e002      	b.n	800188e <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 8001888:	bf00      	nop
 800188a:	e000      	b.n	800188e <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 800188c:	bf00      	nop
}
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000330 	.word	0x20000330
 8001898:	20000328 	.word	0x20000328

0800189c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <_sbrk+0x5c>)
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <_sbrk+0x60>)
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <_sbrk+0x64>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <_sbrk+0x68>)
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d207      	bcs.n	80018dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018cc:	f00e f8d8 	bl	800fa80 <__errno>
 80018d0:	4603      	mov	r3, r0
 80018d2:	220c      	movs	r2, #12
 80018d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	e009      	b.n	80018f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <_sbrk+0x64>)
 80018ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20020000 	.word	0x20020000
 80018fc:	00001000 	.word	0x00001000
 8001900:	20000334 	.word	0x20000334
 8001904:	2001bea0 	.word	0x2001bea0

08001908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <SystemInit+0x20>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <SystemInit+0x20>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	463b      	mov	r3, r7
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <MX_TIM1_Init+0x98>)
 800194a:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <MX_TIM1_Init+0x9c>)
 800194c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <MX_TIM1_Init+0x98>)
 8001950:	222f      	movs	r2, #47	; 0x2f
 8001952:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <MX_TIM1_Init+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <MX_TIM1_Init+0x98>)
 800195c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001960:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <MX_TIM1_Init+0x98>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_TIM1_Init+0x98>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_TIM1_Init+0x98>)
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001974:	4813      	ldr	r0, [pc, #76]	; (80019c4 <MX_TIM1_Init+0x98>)
 8001976:	f004 ff2f 	bl	80067d8 <HAL_TIM_Base_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001980:	f7ff fa96 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4619      	mov	r1, r3
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <MX_TIM1_Init+0x98>)
 8001992:	f005 ff7b 	bl	800788c <HAL_TIM_ConfigClockSource>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800199c:	f7ff fa88 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019a0:	2320      	movs	r3, #32
 80019a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_TIM1_Init+0x98>)
 80019ae:	f006 fe41 	bl	8008634 <HAL_TIMEx_MasterConfigSynchronization>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019b8:	f7ff fa7a 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000338 	.word	0x20000338
 80019c8:	40010000 	.word	0x40010000

080019cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	2224      	movs	r2, #36	; 0x24
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f00e f89a 	bl	800fb14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <MX_TIM3_Init+0xa0>)
 80019ea:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <MX_TIM3_Init+0xa4>)
 80019ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <MX_TIM3_Init+0xa0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <MX_TIM3_Init+0xa0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <MX_TIM3_Init+0xa0>)
 80019fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_TIM3_Init+0xa0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_TIM3_Init+0xa0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a16:	2301      	movs	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a26:	2301      	movs	r3, #1
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	4619      	mov	r1, r3
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <MX_TIM3_Init+0xa0>)
 8001a3a:	f005 fa21 	bl	8006e80 <HAL_TIM_Encoder_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a44:	f7ff fa34 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_TIM3_Init+0xa0>)
 8001a56:	f006 fded 	bl	8008634 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a60:	f7ff fa26 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	3730      	adds	r7, #48	; 0x30
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000380 	.word	0x20000380
 8001a70:	40000400 	.word	0x40000400

08001a74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <MX_TIM4_Init+0x90>)
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <MX_TIM4_Init+0x94>)
 8001a94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_TIM4_Init+0x90>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <MX_TIM4_Init+0x90>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_TIM4_Init+0x90>)
 8001aa4:	223c      	movs	r2, #60	; 0x3c
 8001aa6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_TIM4_Init+0x90>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_TIM4_Init+0x90>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ab4:	4813      	ldr	r0, [pc, #76]	; (8001b04 <MX_TIM4_Init+0x90>)
 8001ab6:	f004 fe8f 	bl	80067d8 <HAL_TIM_Base_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001ac0:	f7ff f9f6 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <MX_TIM4_Init+0x90>)
 8001ad2:	f005 fedb 	bl	800788c <HAL_TIM_ConfigClockSource>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001adc:	f7ff f9e8 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ae8:	463b      	mov	r3, r7
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_TIM4_Init+0x90>)
 8001aee:	f006 fda1 	bl	8008634 <HAL_TIMEx_MasterConfigSynchronization>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001af8:	f7ff f9da 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200003c8 	.word	0x200003c8
 8001b08:	40000800 	.word	0x40000800

08001b0c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08e      	sub	sp, #56	; 0x38
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b20:	f107 0320 	add.w	r3, r7, #32
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	615a      	str	r2, [r3, #20]
 8001b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <MX_TIM5_Init+0xe4>)
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <MX_TIM5_Init+0xe8>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48-1;
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <MX_TIM5_Init+0xe4>)
 8001b44:	222f      	movs	r2, #47	; 0x2f
 8001b46:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <MX_TIM5_Init+0xe4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <MX_TIM5_Init+0xe4>)
 8001b50:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001b54:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <MX_TIM5_Init+0xe4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <MX_TIM5_Init+0xe4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b62:	4823      	ldr	r0, [pc, #140]	; (8001bf0 <MX_TIM5_Init+0xe4>)
 8001b64:	f004 fe38 	bl	80067d8 <HAL_TIM_Base_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001b6e:	f7ff f99f 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	481c      	ldr	r0, [pc, #112]	; (8001bf0 <MX_TIM5_Init+0xe4>)
 8001b80:	f005 fe84 	bl	800788c <HAL_TIM_ConfigClockSource>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001b8a:	f7ff f991 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b8e:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <MX_TIM5_Init+0xe4>)
 8001b90:	f004 ff7a 	bl	8006a88 <HAL_TIM_PWM_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001b9a:	f7ff f989 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ba6:	f107 0320 	add.w	r3, r7, #32
 8001baa:	4619      	mov	r1, r3
 8001bac:	4810      	ldr	r0, [pc, #64]	; (8001bf0 <MX_TIM5_Init+0xe4>)
 8001bae:	f006 fd41 	bl	8008634 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001bb8:	f7ff f97a 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bbc:	2360      	movs	r3, #96	; 0x60
 8001bbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2204      	movs	r2, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4807      	ldr	r0, [pc, #28]	; (8001bf0 <MX_TIM5_Init+0xe4>)
 8001bd4:	f005 fcb4 	bl	8007540 <HAL_TIM_PWM_ConfigChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001bde:	f7ff f967 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001be2:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <MX_TIM5_Init+0xe4>)
 8001be4:	f000 f8dc 	bl	8001da0 <HAL_TIM_MspPostInit>

}
 8001be8:	bf00      	nop
 8001bea:	3738      	adds	r7, #56	; 0x38
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000410 	.word	0x20000410
 8001bf4:	40000c00 	.word	0x40000c00

08001bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a2a      	ldr	r2, [pc, #168]	; (8001cb0 <HAL_TIM_Base_MspInit+0xb8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d11e      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2105      	movs	r1, #5
 8001c2a:	2019      	movs	r0, #25
 8001c2c:	f000 fa72 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c30:	2019      	movs	r0, #25
 8001c32:	f000 fa9b 	bl	800216c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	210f      	movs	r1, #15
 8001c3a:	201a      	movs	r0, #26
 8001c3c:	f000 fa6a 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c40:	201a      	movs	r0, #26
 8001c42:	f000 fa93 	bl	800216c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001c46:	e02e      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_TIM_Base_MspInit+0xc0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10e      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
}
 8001c6e:	e01a      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <HAL_TIM_Base_MspInit+0xc4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d115      	bne.n	8001ca6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2105      	movs	r1, #5
 8001c9a:	2032      	movs	r0, #50	; 0x32
 8001c9c:	f000 fa3a 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ca0:	2032      	movs	r0, #50	; 0x32
 8001ca2:	f000 fa63 	bl	800216c <HAL_NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	40000c00 	.word	0x40000c00

08001cc0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a2c      	ldr	r2, [pc, #176]	; (8001d90 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d151      	bne.n	8001d86 <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a2a      	ldr	r2, [pc, #168]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001d36:	2340      	movs	r3, #64	; 0x40
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d46:	2302      	movs	r3, #2
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4811      	ldr	r0, [pc, #68]	; (8001d98 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001d52:	f000 fa23 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001d56:	2320      	movs	r3, #32
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d66:	2302      	movs	r3, #2
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480a      	ldr	r0, [pc, #40]	; (8001d9c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d72:	f000 fa13 	bl	800219c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2105      	movs	r1, #5
 8001d7a:	201d      	movs	r0, #29
 8001d7c:	f000 f9ca 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d80:	201d      	movs	r0, #29
 8001d82:	f000 f9f3 	bl	800216c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	; 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40000400 	.word	0x40000400
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020400 	.word	0x40020400

08001da0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_TIM_MspPostInit+0x68>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d11d      	bne.n	8001dfe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_TIM_MspPostInit+0x6c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <HAL_TIM_MspPostInit+0x6c>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_TIM_MspPostInit+0x6c>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8001dde:	2302      	movs	r3, #2
 8001de0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	4619      	mov	r1, r3
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <HAL_TIM_MspPostInit+0x70>)
 8001dfa:	f000 f9cf 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001dfe:	bf00      	nop
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40000c00 	.word	0x40000c00
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020000 	.word	0x40020000

08001e14 <USR_TIM_PWM_OpenTim5Ch2>:
  }
}

/* USER CODE BEGIN 1 */
void USR_TIM_PWM_OpenTim5Ch2()
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_2);
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4802      	ldr	r0, [pc, #8]	; (8001e24 <USR_TIM_PWM_OpenTim5Ch2+0x10>)
 8001e1c:	f004 ff04 	bl	8006c28 <HAL_TIM_PWM_Start>
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000410 	.word	0x20000410

08001e28 <USR_TIM_PWM_SetCompare>:
  HAL_TIM_PWM_Stop(&htim5,TIM_CHANNEL_2);
}

//duty == 0~1000
void USR_TIM_PWM_SetCompare(uint16_t duty)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]
       if (duty> 1000) // здесь 1000, потому что порог подсчета установлен в 1 тысячу
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e38:	d902      	bls.n	8001e40 <USR_TIM_PWM_SetCompare+0x18>
     {
          duty=1000;
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	80fb      	strh	r3, [r7, #6]
     }
     __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, duty);
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <USR_TIM_PWM_SetCompare+0x2c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	88fa      	ldrh	r2, [r7, #6]
 8001e46:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	20000410 	.word	0x20000410

08001e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e5c:	480d      	ldr	r0, [pc, #52]	; (8001e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e5e:	490e      	ldr	r1, [pc, #56]	; (8001e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e60:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e64:	e002      	b.n	8001e6c <LoopCopyDataInit>

08001e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6a:	3304      	adds	r3, #4

08001e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e70:	d3f9      	bcc.n	8001e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e72:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e74:	4c0b      	ldr	r4, [pc, #44]	; (8001ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e78:	e001      	b.n	8001e7e <LoopFillZerobss>

08001e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e7c:	3204      	adds	r2, #4

08001e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e80:	d3fb      	bcc.n	8001e7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e82:	f7ff fd41 	bl	8001908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e86:	f00d fe01 	bl	800fa8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8a:	f7fe ff53 	bl	8000d34 <main>
  bx  lr    
 8001e8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e98:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001e9c:	080131c0 	.word	0x080131c0
  ldr r2, =_sbss
 8001ea0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001ea4:	2001be9c 	.word	0x2001be9c

08001ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC_IRQHandler>
	...

08001eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <HAL_Init+0x40>)
 8001eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_Init+0x40>)
 8001ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_Init+0x40>)
 8001ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f000 f8fd 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eda:	200f      	movs	r0, #15
 8001edc:	f7ff fbf2 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee0:	f7ff fbc4 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023c00 	.word	0x40023c00

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000074 	.word	0x20000074
 8001f14:	20000458 	.word	0x20000458

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000458 	.word	0x20000458

08001f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff ffee 	bl	8001f18 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d005      	beq.n	8001f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_Delay+0x44>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f56:	bf00      	nop
 8001f58:	f7ff ffde 	bl	8001f18 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8f7      	bhi.n	8001f58 <HAL_Delay+0x28>
  {
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000074 	.word	0x20000074

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	; (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b07      	cmp	r3, #7
 80020e0:	d00f      	beq.n	8002102 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d00c      	beq.n	8002102 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d009      	beq.n	8002102 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d006      	beq.n	8002102 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d003      	beq.n	8002102 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020fa:	2190      	movs	r1, #144	; 0x90
 80020fc:	4804      	ldr	r0, [pc, #16]	; (8002110 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80020fe:	f7fe fedc 	bl	8000eba <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff38 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	08010568 	.word	0x08010568

08002114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b0f      	cmp	r3, #15
 800212a:	d903      	bls.n	8002134 <HAL_NVIC_SetPriority+0x20>
 800212c:	21a8      	movs	r1, #168	; 0xa8
 800212e:	480e      	ldr	r0, [pc, #56]	; (8002168 <HAL_NVIC_SetPriority+0x54>)
 8002130:	f7fe fec3 	bl	8000eba <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b0f      	cmp	r3, #15
 8002138:	d903      	bls.n	8002142 <HAL_NVIC_SetPriority+0x2e>
 800213a:	21a9      	movs	r1, #169	; 0xa9
 800213c:	480a      	ldr	r0, [pc, #40]	; (8002168 <HAL_NVIC_SetPriority+0x54>)
 800213e:	f7fe febc 	bl	8000eba <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002142:	f7ff ff3d 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002146:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	6978      	ldr	r0, [r7, #20]
 800214e:	f7ff ff8d 	bl	800206c <NVIC_EncodePriority>
 8002152:	4602      	mov	r2, r0
 8002154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff5c 	bl	8002018 <__NVIC_SetPriority>
}
 8002160:	bf00      	nop
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	08010568 	.word	0x08010568

0800216c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	2b00      	cmp	r3, #0
 800217c:	da03      	bge.n	8002186 <HAL_NVIC_EnableIRQ+0x1a>
 800217e:	21bc      	movs	r1, #188	; 0xbc
 8002180:	4805      	ldr	r0, [pc, #20]	; (8002198 <HAL_NVIC_EnableIRQ+0x2c>)
 8002182:	f7fe fe9a 	bl	8000eba <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff26 	bl	8001fdc <__NVIC_EnableIRQ>
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	08010568 	.word	0x08010568

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a33      	ldr	r2, [pc, #204]	; (8002284 <HAL_GPIO_Init+0xe8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d017      	beq.n	80021ea <HAL_GPIO_Init+0x4e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a32      	ldr	r2, [pc, #200]	; (8002288 <HAL_GPIO_Init+0xec>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0x4e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a31      	ldr	r2, [pc, #196]	; (800228c <HAL_GPIO_Init+0xf0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00f      	beq.n	80021ea <HAL_GPIO_Init+0x4e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a30      	ldr	r2, [pc, #192]	; (8002290 <HAL_GPIO_Init+0xf4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00b      	beq.n	80021ea <HAL_GPIO_Init+0x4e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <HAL_GPIO_Init+0xf8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x4e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2e      	ldr	r2, [pc, #184]	; (8002298 <HAL_GPIO_Init+0xfc>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x4e>
 80021e2:	21ac      	movs	r1, #172	; 0xac
 80021e4:	482d      	ldr	r0, [pc, #180]	; (800229c <HAL_GPIO_Init+0x100>)
 80021e6:	f7fe fe68 	bl	8000eba <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_GPIO_Init+0x64>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0c1b      	lsrs	r3, r3, #16
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x6c>
 8002200:	21ad      	movs	r1, #173	; 0xad
 8002202:	4826      	ldr	r0, [pc, #152]	; (800229c <HAL_GPIO_Init+0x100>)
 8002204:	f7fe fe59 	bl	8000eba <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d035      	beq.n	800227c <HAL_GPIO_Init+0xe0>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d031      	beq.n	800227c <HAL_GPIO_Init+0xe0>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b11      	cmp	r3, #17
 800221e:	d02d      	beq.n	800227c <HAL_GPIO_Init+0xe0>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d029      	beq.n	800227c <HAL_GPIO_Init+0xe0>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b12      	cmp	r3, #18
 800222e:	d025      	beq.n	800227c <HAL_GPIO_Init+0xe0>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002238:	d020      	beq.n	800227c <HAL_GPIO_Init+0xe0>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002242:	d01b      	beq.n	800227c <HAL_GPIO_Init+0xe0>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800224c:	d016      	beq.n	800227c <HAL_GPIO_Init+0xe0>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002256:	d011      	beq.n	800227c <HAL_GPIO_Init+0xe0>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002260:	d00c      	beq.n	800227c <HAL_GPIO_Init+0xe0>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800226a:	d007      	beq.n	800227c <HAL_GPIO_Init+0xe0>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0xe0>
 8002274:	21ae      	movs	r1, #174	; 0xae
 8002276:	4809      	ldr	r0, [pc, #36]	; (800229c <HAL_GPIO_Init+0x100>)
 8002278:	f7fe fe1f 	bl	8000eba <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	e20c      	b.n	800269c <HAL_GPIO_Init+0x500>
 8002282:	bf00      	nop
 8002284:	40020000 	.word	0x40020000
 8002288:	40020400 	.word	0x40020400
 800228c:	40020800 	.word	0x40020800
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40021000 	.word	0x40021000
 8002298:	40021c00 	.word	0x40021c00
 800229c:	080105a4 	.word	0x080105a4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a0:	2201      	movs	r2, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	f040 81ec 	bne.w	8002696 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d005      	beq.n	80022d6 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d144      	bne.n	8002360 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00f      	beq.n	80022fe <HAL_GPIO_Init+0x162>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d00b      	beq.n	80022fe <HAL_GPIO_Init+0x162>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_Init+0x162>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x162>
 80022f6:	21c0      	movs	r1, #192	; 0xc0
 80022f8:	4884      	ldr	r0, [pc, #528]	; (800250c <HAL_GPIO_Init+0x370>)
 80022fa:	f7fe fdde 	bl	8000eba <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002334:	2201      	movs	r2, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 0201 	and.w	r2, r3, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b03      	cmp	r3, #3
 800236a:	d027      	beq.n	80023bc <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00b      	beq.n	800238c <HAL_GPIO_Init+0x1f0>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d007      	beq.n	800238c <HAL_GPIO_Init+0x1f0>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x1f0>
 8002384:	21d1      	movs	r1, #209	; 0xd1
 8002386:	4861      	ldr	r0, [pc, #388]	; (800250c <HAL_GPIO_Init+0x370>)
 8002388:	f7fe fd97 	bl	8000eba <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	f040 80a3 	bne.w	8002510 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d077      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b09      	cmp	r3, #9
 80023d8:	d073      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d06f      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d06b      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d067      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d063      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d05f      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d05b      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d057      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d053      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d04f      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b04      	cmp	r3, #4
 8002428:	d04b      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b04      	cmp	r3, #4
 8002430:	d047      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b04      	cmp	r3, #4
 8002438:	d043      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d03f      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b05      	cmp	r3, #5
 8002448:	d03b      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b05      	cmp	r3, #5
 8002450:	d037      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b06      	cmp	r3, #6
 8002458:	d033      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b06      	cmp	r3, #6
 8002460:	d02f      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b05      	cmp	r3, #5
 8002468:	d02b      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b06      	cmp	r3, #6
 8002470:	d027      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b07      	cmp	r3, #7
 8002478:	d023      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b07      	cmp	r3, #7
 8002480:	d01f      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b07      	cmp	r3, #7
 8002488:	d01b      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b08      	cmp	r3, #8
 8002490:	d017      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b0a      	cmp	r3, #10
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b09      	cmp	r3, #9
 80024a0:	d00f      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b09      	cmp	r3, #9
 80024a8:	d00b      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	d007      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x326>
 80024ba:	21de      	movs	r1, #222	; 0xde
 80024bc:	4813      	ldr	r0, [pc, #76]	; (800250c <HAL_GPIO_Init+0x370>)
 80024be:	f7fe fcfc 	bl	8000eba <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	08da      	lsrs	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3208      	adds	r2, #8
 80024ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	220f      	movs	r2, #15
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	08da      	lsrs	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3208      	adds	r2, #8
 8002504:	69b9      	ldr	r1, [r7, #24]
 8002506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800250a:	e001      	b.n	8002510 <HAL_GPIO_Init+0x374>
 800250c:	080105a4 	.word	0x080105a4
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0203 	and.w	r2, r3, #3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80a2 	beq.w	8002696 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <HAL_GPIO_Init+0x514>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a55      	ldr	r2, [pc, #340]	; (80026b0 <HAL_GPIO_Init+0x514>)
 800255c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <HAL_GPIO_Init+0x514>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800256e:	4a51      	ldr	r2, [pc, #324]	; (80026b4 <HAL_GPIO_Init+0x518>)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	3302      	adds	r3, #2
 8002576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	220f      	movs	r2, #15
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a48      	ldr	r2, [pc, #288]	; (80026b8 <HAL_GPIO_Init+0x51c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d019      	beq.n	80025ce <HAL_GPIO_Init+0x432>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a47      	ldr	r2, [pc, #284]	; (80026bc <HAL_GPIO_Init+0x520>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_GPIO_Init+0x42e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a46      	ldr	r2, [pc, #280]	; (80026c0 <HAL_GPIO_Init+0x524>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00d      	beq.n	80025c6 <HAL_GPIO_Init+0x42a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a45      	ldr	r2, [pc, #276]	; (80026c4 <HAL_GPIO_Init+0x528>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d007      	beq.n	80025c2 <HAL_GPIO_Init+0x426>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a44      	ldr	r2, [pc, #272]	; (80026c8 <HAL_GPIO_Init+0x52c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_GPIO_Init+0x422>
 80025ba:	2304      	movs	r3, #4
 80025bc:	e008      	b.n	80025d0 <HAL_GPIO_Init+0x434>
 80025be:	2307      	movs	r3, #7
 80025c0:	e006      	b.n	80025d0 <HAL_GPIO_Init+0x434>
 80025c2:	2303      	movs	r3, #3
 80025c4:	e004      	b.n	80025d0 <HAL_GPIO_Init+0x434>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e002      	b.n	80025d0 <HAL_GPIO_Init+0x434>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <HAL_GPIO_Init+0x434>
 80025ce:	2300      	movs	r3, #0
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	f002 0203 	and.w	r2, r2, #3
 80025d6:	0092      	lsls	r2, r2, #2
 80025d8:	4093      	lsls	r3, r2
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e0:	4934      	ldr	r1, [pc, #208]	; (80026b4 <HAL_GPIO_Init+0x518>)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	3302      	adds	r3, #2
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ee:	4b37      	ldr	r3, [pc, #220]	; (80026cc <HAL_GPIO_Init+0x530>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002612:	4a2e      	ldr	r2, [pc, #184]	; (80026cc <HAL_GPIO_Init+0x530>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002618:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <HAL_GPIO_Init+0x530>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800263c:	4a23      	ldr	r2, [pc, #140]	; (80026cc <HAL_GPIO_Init+0x530>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002642:	4b22      	ldr	r3, [pc, #136]	; (80026cc <HAL_GPIO_Init+0x530>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002666:	4a19      	ldr	r2, [pc, #100]	; (80026cc <HAL_GPIO_Init+0x530>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800266c:	4b17      	ldr	r3, [pc, #92]	; (80026cc <HAL_GPIO_Init+0x530>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002690:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <HAL_GPIO_Init+0x530>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3301      	adds	r3, #1
 800269a:	61fb      	str	r3, [r7, #28]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b0f      	cmp	r3, #15
 80026a0:	f67f adfe 	bls.w	80022a0 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	3720      	adds	r7, #32
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40013800 	.word	0x40013800
 80026b8:	40020000 	.word	0x40020000
 80026bc:	40020400 	.word	0x40020400
 80026c0:	40020800 	.word	0x40020800
 80026c4:	40020c00 	.word	0x40020c00
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40013c00 	.word	0x40013c00

080026d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
 80026dc:	4613      	mov	r3, r2
 80026de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80026e0:	887b      	ldrh	r3, [r7, #2]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_GPIO_WritePin+0x20>
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d004      	beq.n	80026fa <HAL_GPIO_WritePin+0x2a>
 80026f0:	f240 119d 	movw	r1, #413	; 0x19d
 80026f4:	480e      	ldr	r0, [pc, #56]	; (8002730 <HAL_GPIO_WritePin+0x60>)
 80026f6:	f7fe fbe0 	bl	8000eba <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80026fa:	787b      	ldrb	r3, [r7, #1]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_GPIO_WritePin+0x40>
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d004      	beq.n	8002710 <HAL_GPIO_WritePin+0x40>
 8002706:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800270a:	4809      	ldr	r0, [pc, #36]	; (8002730 <HAL_GPIO_WritePin+0x60>)
 800270c:	f7fe fbd5 	bl	8000eba <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002710:	787b      	ldrb	r3, [r7, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800271c:	e003      	b.n	8002726 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	619a      	str	r2, [r3, #24]
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	080105a4 	.word	0x080105a4

08002734 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800274a:	4a05      	ldr	r2, [pc, #20]	; (8002760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f876 	bl	8001844 <HAL_GPIO_EXTI_Callback>
  }
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40013c00 	.word	0x40013c00

08002764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e1bd      	b.n	8002af2 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a93      	ldr	r2, [pc, #588]	; (80029c8 <HAL_I2C_Init+0x264>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <HAL_I2C_Init+0x3a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a91      	ldr	r2, [pc, #580]	; (80029cc <HAL_I2C_Init+0x268>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d009      	beq.n	800279e <HAL_I2C_Init+0x3a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a90      	ldr	r2, [pc, #576]	; (80029d0 <HAL_I2C_Init+0x26c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_I2C_Init+0x3a>
 8002794:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002798:	488e      	ldr	r0, [pc, #568]	; (80029d4 <HAL_I2C_Init+0x270>)
 800279a:	f7fe fb8e 	bl	8000eba <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <HAL_I2C_Init+0x4c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a8b      	ldr	r2, [pc, #556]	; (80029d8 <HAL_I2C_Init+0x274>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d904      	bls.n	80027ba <HAL_I2C_Init+0x56>
 80027b0:	f240 11bf 	movw	r1, #447	; 0x1bf
 80027b4:	4887      	ldr	r0, [pc, #540]	; (80029d4 <HAL_I2C_Init+0x270>)
 80027b6:	f7fe fb80 	bl	8000eba <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_I2C_Init+0x72>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027ca:	d004      	beq.n	80027d6 <HAL_I2C_Init+0x72>
 80027cc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80027d0:	4880      	ldr	r0, [pc, #512]	; (80029d4 <HAL_I2C_Init+0x270>)
 80027d2:	f7fe fb72 	bl	8000eba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <HAL_I2C_Init+0x8c>
 80027e6:	f240 11c1 	movw	r1, #449	; 0x1c1
 80027ea:	487a      	ldr	r0, [pc, #488]	; (80029d4 <HAL_I2C_Init+0x270>)
 80027ec:	f7fe fb65 	bl	8000eba <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027f8:	d009      	beq.n	800280e <HAL_I2C_Init+0xaa>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002802:	d004      	beq.n	800280e <HAL_I2C_Init+0xaa>
 8002804:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002808:	4872      	ldr	r0, [pc, #456]	; (80029d4 <HAL_I2C_Init+0x270>)
 800280a:	f7fe fb56 	bl	8000eba <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_I2C_Init+0xc4>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d004      	beq.n	8002828 <HAL_I2C_Init+0xc4>
 800281e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002822:	486c      	ldr	r0, [pc, #432]	; (80029d4 <HAL_I2C_Init+0x270>)
 8002824:	f7fe fb49 	bl	8000eba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <HAL_I2C_Init+0xda>
 8002834:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002838:	4866      	ldr	r0, [pc, #408]	; (80029d4 <HAL_I2C_Init+0x270>)
 800283a:	f7fe fb3e 	bl	8000eba <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_I2C_Init+0xf4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d004      	beq.n	8002858 <HAL_I2C_Init+0xf4>
 800284e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002852:	4860      	ldr	r0, [pc, #384]	; (80029d4 <HAL_I2C_Init+0x270>)
 8002854:	f7fe fb31 	bl	8000eba <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_I2C_Init+0x10e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d004      	beq.n	8002872 <HAL_I2C_Init+0x10e>
 8002868:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800286c:	4859      	ldr	r0, [pc, #356]	; (80029d4 <HAL_I2C_Init+0x270>)
 800286e:	f7fe fb24 	bl	8000eba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe f9b6 	bl	8000bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	; 0x24
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028c4:	f002 fd7c 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80028c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a43      	ldr	r2, [pc, #268]	; (80029dc <HAL_I2C_Init+0x278>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d807      	bhi.n	80028e4 <HAL_I2C_Init+0x180>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a42      	ldr	r2, [pc, #264]	; (80029e0 <HAL_I2C_Init+0x27c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	bf94      	ite	ls
 80028dc:	2301      	movls	r3, #1
 80028de:	2300      	movhi	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e006      	b.n	80028f2 <HAL_I2C_Init+0x18e>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a3f      	ldr	r2, [pc, #252]	; (80029e4 <HAL_I2C_Init+0x280>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	bf94      	ite	ls
 80028ec:	2301      	movls	r3, #1
 80028ee:	2300      	movhi	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0fb      	b.n	8002af2 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a3a      	ldr	r2, [pc, #232]	; (80029e8 <HAL_I2C_Init+0x284>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0c9b      	lsrs	r3, r3, #18
 8002904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a2c      	ldr	r2, [pc, #176]	; (80029dc <HAL_I2C_Init+0x278>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d802      	bhi.n	8002934 <HAL_I2C_Init+0x1d0>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3301      	adds	r3, #1
 8002932:	e009      	b.n	8002948 <HAL_I2C_Init+0x1e4>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	4a2b      	ldr	r2, [pc, #172]	; (80029ec <HAL_I2C_Init+0x288>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	3301      	adds	r3, #1
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	430b      	orrs	r3, r1
 800294e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800295a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	491e      	ldr	r1, [pc, #120]	; (80029dc <HAL_I2C_Init+0x278>)
 8002964:	428b      	cmp	r3, r1
 8002966:	d819      	bhi.n	800299c <HAL_I2C_Init+0x238>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1e59      	subs	r1, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fbb1 f3f3 	udiv	r3, r1, r3
 8002976:	1c59      	adds	r1, r3, #1
 8002978:	f640 73fc 	movw	r3, #4092	; 0xffc
 800297c:	400b      	ands	r3, r1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_I2C_Init+0x234>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1e59      	subs	r1, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002990:	3301      	adds	r3, #1
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	e065      	b.n	8002a64 <HAL_I2C_Init+0x300>
 8002998:	2304      	movs	r3, #4
 800299a:	e063      	b.n	8002a64 <HAL_I2C_Init+0x300>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d125      	bne.n	80029f0 <HAL_I2C_Init+0x28c>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1e58      	subs	r0, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	440b      	add	r3, r1
 80029b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e026      	b.n	8002a16 <HAL_I2C_Init+0x2b2>
 80029c8:	40005400 	.word	0x40005400
 80029cc:	40005800 	.word	0x40005800
 80029d0:	40005c00 	.word	0x40005c00
 80029d4:	080105e0 	.word	0x080105e0
 80029d8:	00061a80 	.word	0x00061a80
 80029dc:	000186a0 	.word	0x000186a0
 80029e0:	001e847f 	.word	0x001e847f
 80029e4:	003d08ff 	.word	0x003d08ff
 80029e8:	431bde83 	.word	0x431bde83
 80029ec:	10624dd3 	.word	0x10624dd3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e58      	subs	r0, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	0099      	lsls	r1, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Init+0x2ba>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e022      	b.n	8002a64 <HAL_I2C_Init+0x300>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10e      	bne.n	8002a44 <HAL_I2C_Init+0x2e0>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1e58      	subs	r0, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	440b      	add	r3, r1
 8002a34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a42:	e00f      	b.n	8002a64 <HAL_I2C_Init+0x300>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e58      	subs	r0, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	0099      	lsls	r1, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	6809      	ldr	r1, [r1, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6911      	ldr	r1, [r2, #16]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68d2      	ldr	r2, [r2, #12]
 8002a9e:	4311      	orrs	r1, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop

08002afc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	813b      	strh	r3, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b16:	f7ff f9ff 	bl	8001f18 <HAL_GetTick>
 8002b1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d007      	beq.n	8002b32 <HAL_I2C_Mem_Write+0x36>
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d004      	beq.n	8002b32 <HAL_I2C_Mem_Write+0x36>
 8002b28:	f640 11b9 	movw	r1, #2489	; 0x9b9
 8002b2c:	4873      	ldr	r0, [pc, #460]	; (8002cfc <HAL_I2C_Mem_Write+0x200>)
 8002b2e:	f7fe f9c4 	bl	8000eba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	f040 80d9 	bne.w	8002cf2 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2319      	movs	r3, #25
 8002b46:	2201      	movs	r2, #1
 8002b48:	496d      	ldr	r1, [pc, #436]	; (8002d00 <HAL_I2C_Mem_Write+0x204>)
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 faa0 	bl	8003090 <I2C_WaitOnFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
 8002b58:	e0cc      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_I2C_Mem_Write+0x6c>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e0c5      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x1f8>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d007      	beq.n	8002b8e <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0201 	orr.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2221      	movs	r2, #33	; 0x21
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2240      	movs	r2, #64	; 0x40
 8002baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a3a      	ldr	r2, [r7, #32]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4a4d      	ldr	r2, [pc, #308]	; (8002d04 <HAL_I2C_Mem_Write+0x208>)
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bd0:	88f8      	ldrh	r0, [r7, #6]
 8002bd2:	893a      	ldrh	r2, [r7, #8]
 8002bd4:	8979      	ldrh	r1, [r7, #10]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	9301      	str	r3, [sp, #4]
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	4603      	mov	r3, r0
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f9bf 	bl	8002f64 <I2C_RequestMemoryWrite>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d052      	beq.n	8002c92 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e081      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fb21 	bl	800323c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d107      	bne.n	8002c18 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e06b      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d11b      	bne.n	8002c92 <HAL_I2C_Mem_Write+0x196>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d017      	beq.n	8002c92 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1aa      	bne.n	8002bf0 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fb0d 	bl	80032be <I2C_WaitOnBTFFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d107      	bne.n	8002cc2 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e016      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
  }
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	080105e0 	.word	0x080105e0
 8002d00:	00100002 	.word	0x00100002
 8002d04:	ffff0000 	.word	0xffff0000

08002d08 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	460b      	mov	r3, r1
 8002d16:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff f8fe 	bl	8001f18 <HAL_GetTick>
 8002d1c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	f040 8111 	bne.w	8002f52 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2319      	movs	r3, #25
 8002d36:	2201      	movs	r2, #1
 8002d38:	4988      	ldr	r1, [pc, #544]	; (8002f5c <HAL_I2C_IsDeviceReady+0x254>)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f9a8 	bl	8003090 <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
 8002d48:	e104      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_I2C_IsDeviceReady+0x50>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e0fd      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d007      	beq.n	8002d7e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2224      	movs	r2, #36	; 0x24
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4a70      	ldr	r2, [pc, #448]	; (8002f60 <HAL_I2C_IsDeviceReady+0x258>)
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f966 	bl	8003090 <I2C_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd8:	d103      	bne.n	8002de2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0b6      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002df4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002df6:	f7ff f88f 	bl	8001f18 <HAL_GetTick>
 8002dfa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e20:	bf0c      	ite	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	2300      	movne	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e2a:	e025      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e2c:	f7ff f874 	bl	8001f18 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d302      	bcc.n	8002e42 <HAL_I2C_IsDeviceReady+0x13a>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	22a0      	movs	r2, #160	; 0xa0
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2ba0      	cmp	r3, #160	; 0xa0
 8002e82:	d005      	beq.n	8002e90 <HAL_I2C_IsDeviceReady+0x188>
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <HAL_I2C_IsDeviceReady+0x188>
 8002e8a:	7dbb      	ldrb	r3, [r7, #22]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0cd      	beq.n	8002e2c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d129      	bne.n	8002efa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2319      	movs	r3, #25
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4921      	ldr	r1, [pc, #132]	; (8002f5c <HAL_I2C_IsDeviceReady+0x254>)
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f8da 	bl	8003090 <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e036      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e02c      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f08:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f12:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2319      	movs	r3, #25
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	490f      	ldr	r1, [pc, #60]	; (8002f5c <HAL_I2C_IsDeviceReady+0x254>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f8b6 	bl	8003090 <I2C_WaitOnFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e012      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f4ff af32 	bcc.w	8002da2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
  }
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	00100002 	.word	0x00100002
 8002f60:	ffff0000 	.word	0xffff0000

08002f64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	4608      	mov	r0, r1
 8002f6e:	4611      	mov	r1, r2
 8002f70:	461a      	mov	r2, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	817b      	strh	r3, [r7, #10]
 8002f76:	460b      	mov	r3, r1
 8002f78:	813b      	strh	r3, [r7, #8]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f878 	bl	8003090 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb4:	d103      	bne.n	8002fbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e05f      	b.n	8003082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fc2:	897b      	ldrh	r3, [r7, #10]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	492d      	ldr	r1, [pc, #180]	; (800308c <I2C_RequestMemoryWrite+0x128>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f8b0 	bl	800313e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e04c      	b.n	8003082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	6a39      	ldr	r1, [r7, #32]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f91a 	bl	800323c <I2C_WaitOnTXEFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	2b04      	cmp	r3, #4
 8003014:	d107      	bne.n	8003026 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003024:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e02b      	b.n	8003082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003030:	893b      	ldrh	r3, [r7, #8]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]
 800303a:	e021      	b.n	8003080 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800303c:	893b      	ldrh	r3, [r7, #8]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	b29b      	uxth	r3, r3
 8003042:	b2da      	uxtb	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	6a39      	ldr	r1, [r7, #32]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f8f4 	bl	800323c <I2C_WaitOnTXEFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	2b04      	cmp	r3, #4
 8003060:	d107      	bne.n	8003072 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003070:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e005      	b.n	8003082 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003076:	893b      	ldrh	r3, [r7, #8]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	00010002 	.word	0x00010002

08003090 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a0:	e025      	b.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d021      	beq.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7fe ff35 	bl	8001f18 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d116      	bne.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e023      	b.n	8003136 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10d      	bne.n	8003114 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	43da      	mvns	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf0c      	ite	eq
 800310a:	2301      	moveq	r3, #1
 800310c:	2300      	movne	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	e00c      	b.n	800312e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4013      	ands	r3, r2
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf0c      	ite	eq
 8003126:	2301      	moveq	r3, #1
 8003128:	2300      	movne	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	429a      	cmp	r2, r3
 8003132:	d0b6      	beq.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800314c:	e051      	b.n	80031f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315c:	d123      	bne.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003176:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f043 0204 	orr.w	r2, r3, #4
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e046      	b.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d021      	beq.n	80031f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ae:	f7fe feb3 	bl	8001f18 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d302      	bcc.n	80031c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d116      	bne.n	80031f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f043 0220 	orr.w	r2, r3, #32
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e020      	b.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d10c      	bne.n	8003216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf14      	ite	ne
 800320e:	2301      	movne	r3, #1
 8003210:	2300      	moveq	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	e00b      	b.n	800322e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	43da      	mvns	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d18d      	bne.n	800314e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003248:	e02d      	b.n	80032a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f878 	bl	8003340 <I2C_IsAcknowledgeFailed>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e02d      	b.n	80032b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d021      	beq.n	80032a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7fe fe59 	bl	8001f18 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d116      	bne.n	80032a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e007      	b.n	80032b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b0:	2b80      	cmp	r3, #128	; 0x80
 80032b2:	d1ca      	bne.n	800324a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032ca:	e02d      	b.n	8003328 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f837 	bl	8003340 <I2C_IsAcknowledgeFailed>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e02d      	b.n	8003338 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d021      	beq.n	8003328 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7fe fe18 	bl	8001f18 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d116      	bne.n	8003328 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e007      	b.n	8003338 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b04      	cmp	r3, #4
 8003334:	d1ca      	bne.n	80032cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003356:	d11b      	bne.n	8003390 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003360:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f043 0204 	orr.w	r2, r3, #4
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a2:	b08f      	sub	sp, #60	; 0x3c
 80033a4:	af0a      	add	r7, sp, #40	; 0x28
 80033a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e118      	b.n	80035e4 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ba:	d003      	beq.n	80033c4 <HAL_PCD_Init+0x24>
 80033bc:	2187      	movs	r1, #135	; 0x87
 80033be:	488b      	ldr	r0, [pc, #556]	; (80035ec <HAL_PCD_Init+0x24c>)
 80033c0:	f7fd fd7b 	bl	8000eba <assert_failed>

  USBx = hpcd->Instance;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f00c f844 	bl	800f46c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2203      	movs	r2, #3
 80033e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f005 fafd 	bl	8008a02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	687e      	ldr	r6, [r7, #4]
 8003410:	466d      	mov	r5, sp
 8003412:	f106 0410 	add.w	r4, r6, #16
 8003416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800341a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800341c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800341e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003422:	e885 0003 	stmia.w	r5, {r0, r1}
 8003426:	1d33      	adds	r3, r6, #4
 8003428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800342a:	6838      	ldr	r0, [r7, #0]
 800342c:	f005 f9d4 	bl	80087d8 <USB_CoreInit>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0d0      	b.n	80035e4 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f005 faeb 	bl	8008a24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
 8003452:	e04a      	b.n	80034ea <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	333d      	adds	r3, #61	; 0x3d
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	333c      	adds	r3, #60	; 0x3c
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	b298      	uxth	r0, r3
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	3344      	adds	r3, #68	; 0x44
 8003490:	4602      	mov	r2, r0
 8003492:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	3340      	adds	r3, #64	; 0x40
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	3348      	adds	r3, #72	; 0x48
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	334c      	adds	r3, #76	; 0x4c
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3354      	adds	r3, #84	; 0x54
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	3301      	adds	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d3af      	bcc.n	8003454 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e044      	b.n	8003584 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	3301      	adds	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d3b5      	bcc.n	80034fa <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	687e      	ldr	r6, [r7, #4]
 8003596:	466d      	mov	r5, sp
 8003598:	f106 0410 	add.w	r4, r6, #16
 800359c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800359e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80035ac:	1d33      	adds	r3, r6, #4
 80035ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035b0:	6838      	ldr	r0, [r7, #0]
 80035b2:	f005 fa83 	bl	8008abc <USB_DevInit>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e00d      	b.n	80035e4 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f006 fbd2 	bl	8009d86 <USB_DevDisconnect>

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ec:	08010618 	.word	0x08010618

080035f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_PCD_Start+0x1c>
 8003608:	2302      	movs	r3, #2
 800360a:	e020      	b.n	800364e <HAL_PCD_Start+0x5e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	2b01      	cmp	r3, #1
 800361a:	d109      	bne.n	8003630 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003620:	2b01      	cmp	r3, #1
 8003622:	d005      	beq.n	8003630 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f005 f9d3 	bl	80089e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f006 fb80 	bl	8009d44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003656:	b590      	push	{r4, r7, lr}
 8003658:	b08d      	sub	sp, #52	; 0x34
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f006 fc3e 	bl	8009eee <USB_GetMode>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	f040 848a 	bne.w	8003f8e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f006 fba2 	bl	8009dc8 <USB_ReadInterrupts>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8480 	beq.w	8003f8c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f006 fb8f 	bl	8009dc8 <USB_ReadInterrupts>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d107      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f002 0202 	and.w	r2, r2, #2
 80036c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f006 fb7d 	bl	8009dc8 <USB_ReadInterrupts>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d161      	bne.n	800379c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0210 	bic.w	r2, r2, #16
 80036e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 020f 	and.w	r2, r3, #15
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4413      	add	r3, r2
 8003704:	3304      	adds	r3, #4
 8003706:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	0c5b      	lsrs	r3, r3, #17
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	2b02      	cmp	r3, #2
 8003712:	d124      	bne.n	800375e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d035      	beq.n	800378c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800372a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800372e:	b29b      	uxth	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	6a38      	ldr	r0, [r7, #32]
 8003734:	f006 f9b4 	bl	8009aa0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003744:	441a      	add	r2, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	6a1a      	ldr	r2, [r3, #32]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003756:	441a      	add	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	621a      	str	r2, [r3, #32]
 800375c:	e016      	b.n	800378c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	0c5b      	lsrs	r3, r3, #17
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	2b06      	cmp	r3, #6
 8003768:	d110      	bne.n	800378c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003770:	2208      	movs	r2, #8
 8003772:	4619      	mov	r1, r3
 8003774:	6a38      	ldr	r0, [r7, #32]
 8003776:	f006 f993 	bl	8009aa0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	6a1a      	ldr	r2, [r3, #32]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003786:	441a      	add	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0210 	orr.w	r2, r2, #16
 800379a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f006 fb11 	bl	8009dc8 <USB_ReadInterrupts>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037b0:	f040 80a7 	bne.w	8003902 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f006 fb16 	bl	8009dee <USB_ReadDevAllOutEpInterrupt>
 80037c2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80037c4:	e099      	b.n	80038fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 808e 	beq.w	80038ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f006 fb3a 	bl	8009e56 <USB_ReadDevOutEPInterrupt>
 80037e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fa:	461a      	mov	r2, r3
 80037fc:	2301      	movs	r3, #1
 80037fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fec2 	bl	800458c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381e:	461a      	mov	r2, r3
 8003820:	2308      	movs	r3, #8
 8003822:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 ff98 	bl	800475c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003842:	461a      	mov	r2, r3
 8003844:	2310      	movs	r3, #16
 8003846:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d030      	beq.n	80038b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385a:	2b80      	cmp	r3, #128	; 0x80
 800385c:	d109      	bne.n	8003872 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003870:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	3304      	adds	r3, #4
 8003886:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	78db      	ldrb	r3, [r3, #3]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d108      	bne.n	80038a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2200      	movs	r2, #0
 8003894:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	b2db      	uxtb	r3, r3
 800389a:	4619      	mov	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f00b fee1 	bl	800f664 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ae:	461a      	mov	r2, r3
 80038b0:	2302      	movs	r3, #2
 80038b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ca:	461a      	mov	r2, r3
 80038cc:	2320      	movs	r3, #32
 80038ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e6:	461a      	mov	r2, r3
 80038e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	3301      	adds	r3, #1
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f47f af62 	bne.w	80037c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f006 fa5e 	bl	8009dc8 <USB_ReadInterrupts>
 800390c:	4603      	mov	r3, r0
 800390e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003912:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003916:	f040 80db 	bne.w	8003ad0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f006 fa7f 	bl	8009e22 <USB_ReadDevAllInEpInterrupt>
 8003924:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800392a:	e0cd      	b.n	8003ac8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80c2 	beq.w	8003abc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	4611      	mov	r1, r2
 8003942:	4618      	mov	r0, r3
 8003944:	f006 faa5 	bl	8009e92 <USB_ReadDevInEPInterrupt>
 8003948:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d057      	beq.n	8003a04 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	2201      	movs	r2, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	43db      	mvns	r3, r3
 800396e:	69f9      	ldr	r1, [r7, #28]
 8003970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003974:	4013      	ands	r3, r2
 8003976:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003984:	461a      	mov	r2, r3
 8003986:	2301      	movs	r3, #1
 8003988:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d132      	bne.n	80039f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	334c      	adds	r3, #76	; 0x4c
 80039a2:	6819      	ldr	r1, [r3, #0]
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4403      	add	r3, r0
 80039b2:	3348      	adds	r3, #72	; 0x48
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4419      	add	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4403      	add	r3, r0
 80039c6:	334c      	adds	r3, #76	; 0x4c
 80039c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d113      	bne.n	80039f8 <HAL_PCD_IRQHandler+0x3a2>
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	3354      	adds	r3, #84	; 0x54
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039f0:	461a      	mov	r2, r3
 80039f2:	2101      	movs	r1, #1
 80039f4:	f006 faac 	bl	8009f50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	4619      	mov	r1, r3
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f00b fdb5 	bl	800f56e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a36:	461a      	mov	r2, r3
 8003a38:	2310      	movs	r3, #16
 8003a3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a52:	461a      	mov	r2, r3
 8003a54:	2340      	movs	r3, #64	; 0x40
 8003a56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d023      	beq.n	8003aaa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a64:	6a38      	ldr	r0, [r7, #32]
 8003a66:	f005 f98d 	bl	8008d84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	3338      	adds	r3, #56	; 0x38
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	78db      	ldrb	r3, [r3, #3]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d108      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	4619      	mov	r1, r3
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f00b fdf8 	bl	800f688 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fcdb 	bl	8004472 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	3301      	adds	r3, #1
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f47f af2e 	bne.w	800392c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f006 f977 	bl	8009dc8 <USB_ReadInterrupts>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ae4:	d122      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d108      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fec2 	bl	8004898 <HAL_PCDEx_LPM_Callback>
 8003b14:	e002      	b.n	8003b1c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f00b fd96 	bl	800f648 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f006 f949 	bl	8009dc8 <USB_ReadInterrupts>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b40:	d112      	bne.n	8003b68 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d102      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f00b fd52 	bl	800f5fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b66:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f006 f92b 	bl	8009dc8 <USB_ReadInterrupts>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7c:	f040 80b7 	bne.w	8003cee <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2110      	movs	r1, #16
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f005 f8f2 	bl	8008d84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba4:	e046      	b.n	8003c34 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bb8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bca:	0151      	lsls	r1, r2, #5
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	440a      	add	r2, r1
 8003bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be6:	461a      	mov	r2, r3
 8003be8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bfe:	0151      	lsls	r1, r2, #5
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	440a      	add	r2, r1
 8003c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1e:	0151      	lsls	r1, r2, #5
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	440a      	add	r2, r1
 8003c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c30:	3301      	adds	r3, #1
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d3b3      	bcc.n	8003ba6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c4c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d016      	beq.n	8003c88 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c6a:	f043 030b 	orr.w	r3, r3, #11
 8003c6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c80:	f043 030b 	orr.w	r3, r3, #11
 8003c84:	6453      	str	r3, [r2, #68]	; 0x44
 8003c86:	e015      	b.n	8003cb4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c9a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cae:	f043 030b 	orr.w	r3, r3, #11
 8003cb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cc6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f006 f939 	bl	8009f50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f006 f868 	bl	8009dc8 <USB_ReadInterrupts>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d02:	d124      	bne.n	8003d4e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f006 f8fe 	bl	8009f0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f005 f8b3 	bl	8008e7e <USB_GetDevSpeed>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681c      	ldr	r4, [r3, #0]
 8003d24:	f001 fb40 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 8003d28:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	4620      	mov	r0, r4
 8003d34:	f004 fdb2 	bl	800889c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f00b fc40 	bl	800f5be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f006 f838 	bl	8009dc8 <USB_ReadInterrupts>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d10a      	bne.n	8003d78 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f00b fc1d 	bl	800f5a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f002 0208 	and.w	r2, r2, #8
 8003d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f006 f823 	bl	8009dc8 <USB_ReadInterrupts>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	2b80      	cmp	r3, #128	; 0x80
 8003d8a:	d122      	bne.n	8003dd2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d98:	2301      	movs	r3, #1
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9c:	e014      	b.n	8003dc8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d105      	bne.n	8003dc2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fb27 	bl	8004410 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d3e5      	bcc.n	8003d9e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f005 fff6 	bl	8009dc8 <USB_ReadInterrupts>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de6:	d13b      	bne.n	8003e60 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003de8:	2301      	movs	r3, #1
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
 8003dec:	e02b      	b.n	8003e46 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3340      	adds	r3, #64	; 0x40
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d115      	bne.n	8003e40 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	da12      	bge.n	8003e40 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	4613      	mov	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	333f      	adds	r3, #63	; 0x3f
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fae8 	bl	8004410 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	3301      	adds	r3, #1
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d3ce      	bcc.n	8003dee <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f005 ffaf 	bl	8009dc8 <USB_ReadInterrupts>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e74:	d155      	bne.n	8003f22 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e76:	2301      	movs	r3, #1
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7a:	e045      	b.n	8003f08 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d12e      	bne.n	8003f02 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ea4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	da2b      	bge.n	8003f02 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003eb6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d121      	bne.n	8003f02 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003efe:	6053      	str	r3, [r2, #4]
            break;
 8003f00:	e007      	b.n	8003f12 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	3301      	adds	r3, #1
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d3b4      	bcc.n	8003e7c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f005 ff4e 	bl	8009dc8 <USB_ReadInterrupts>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d10a      	bne.n	8003f4e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f00b fbb7 	bl	800f6ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f005 ff38 	bl	8009dc8 <USB_ReadInterrupts>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d115      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f00b fba7 	bl	800f6c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	e000      	b.n	8003f8e <HAL_PCD_IRQHandler+0x938>
      return;
 8003f8c:	bf00      	nop
    }
  }
}
 8003f8e:	3734      	adds	r7, #52	; 0x34
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd90      	pop	{r4, r7, pc}

08003f94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_PCD_SetAddress+0x1a>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e013      	b.n	8003fd6 <HAL_PCD_SetAddress+0x42>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	78fa      	ldrb	r2, [r7, #3]
 8003fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f005 fe96 	bl	8009cf8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	4608      	mov	r0, r1
 8003fe8:	4611      	mov	r1, r2
 8003fea:	461a      	mov	r2, r3
 8003fec:	4603      	mov	r3, r0
 8003fee:	70fb      	strb	r3, [r7, #3]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	803b      	strh	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004000:	2b00      	cmp	r3, #0
 8004002:	da0f      	bge.n	8004024 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	f003 020f 	and.w	r2, r3, #15
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	3338      	adds	r3, #56	; 0x38
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	3304      	adds	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	705a      	strb	r2, [r3, #1]
 8004022:	e00f      	b.n	8004044 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	f003 020f 	and.w	r2, r3, #15
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	3304      	adds	r3, #4
 800403c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	b2da      	uxtb	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004050:	883a      	ldrh	r2, [r7, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	78ba      	ldrb	r2, [r7, #2]
 800405a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	785b      	ldrb	r3, [r3, #1]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d004      	beq.n	800406e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800406e:	78bb      	ldrb	r3, [r7, #2]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d102      	bne.n	800407a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_PCD_EP_Open+0xaa>
 8004084:	2302      	movs	r3, #2
 8004086:	e00e      	b.n	80040a6 <HAL_PCD_EP_Open+0xc8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68f9      	ldr	r1, [r7, #12]
 8004096:	4618      	mov	r0, r3
 8004098:	f004 ff16 	bl	8008ec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80040a4:	7afb      	ldrb	r3, [r7, #11]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	460b      	mov	r3, r1
 80040b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	da0f      	bge.n	80040e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	f003 020f 	and.w	r2, r3, #15
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	3338      	adds	r3, #56	; 0x38
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4413      	add	r3, r2
 80040d6:	3304      	adds	r3, #4
 80040d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	705a      	strb	r2, [r3, #1]
 80040e0:	e00f      	b.n	8004102 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f003 020f 	and.w	r2, r3, #15
 80040e8:	4613      	mov	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4413      	add	r3, r2
 80040f8:	3304      	adds	r3, #4
 80040fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_PCD_EP_Close+0x6e>
 8004118:	2302      	movs	r3, #2
 800411a:	e00e      	b.n	800413a <HAL_PCD_EP_Close+0x8c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68f9      	ldr	r1, [r7, #12]
 800412a:	4618      	mov	r0, r3
 800412c:	f004 ff54 	bl	8008fd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	460b      	mov	r3, r1
 8004150:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004152:	7afb      	ldrb	r3, [r7, #11]
 8004154:	f003 020f 	and.w	r2, r3, #15
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	3304      	adds	r3, #4
 800416a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2200      	movs	r2, #0
 800417c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2200      	movs	r2, #0
 8004182:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004184:	7afb      	ldrb	r3, [r7, #11]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	b2da      	uxtb	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d102      	bne.n	800419e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800419e:	7afb      	ldrb	r3, [r7, #11]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	6979      	ldr	r1, [r7, #20]
 80041b6:	f005 fa33 	bl	8009620 <USB_EP0StartXfer>
 80041ba:	e008      	b.n	80041ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	6979      	ldr	r1, [r7, #20]
 80041ca:	f004 ffe1 	bl	8009190 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	f003 020f 	and.w	r2, r3, #15
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	460b      	mov	r3, r1
 8004216:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004218:	7afb      	ldrb	r3, [r7, #11]
 800421a:	f003 020f 	and.w	r2, r3, #15
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	3338      	adds	r3, #56	; 0x38
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	3304      	adds	r3, #4
 800422e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2200      	movs	r2, #0
 8004240:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2201      	movs	r2, #1
 8004246:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004248:	7afb      	ldrb	r3, [r7, #11]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	b2da      	uxtb	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	6979      	ldr	r1, [r7, #20]
 800427a:	f005 f9d1 	bl	8009620 <USB_EP0StartXfer>
 800427e:	e008      	b.n	8004292 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	6979      	ldr	r1, [r7, #20]
 800428e:	f004 ff7f 	bl	8009190 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 020f 	and.w	r2, r3, #15
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d901      	bls.n	80042ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e050      	b.n	800435c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	da0f      	bge.n	80042e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	f003 020f 	and.w	r2, r3, #15
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	3338      	adds	r3, #56	; 0x38
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4413      	add	r3, r2
 80042d6:	3304      	adds	r3, #4
 80042d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	705a      	strb	r2, [r3, #1]
 80042e0:	e00d      	b.n	80042fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	4413      	add	r3, r2
 80042f4:	3304      	adds	r3, #4
 80042f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	b2da      	uxtb	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_PCD_EP_SetStall+0x82>
 800431a:	2302      	movs	r3, #2
 800431c:	e01e      	b.n	800435c <HAL_PCD_EP_SetStall+0xc0>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68f9      	ldr	r1, [r7, #12]
 800432c:	4618      	mov	r0, r3
 800432e:	f005 fc0f 	bl	8009b50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	b2d9      	uxtb	r1, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800434c:	461a      	mov	r2, r3
 800434e:	f005 fdff 	bl	8009f50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	f003 020f 	and.w	r2, r3, #15
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	d901      	bls.n	8004382 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e042      	b.n	8004408 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004386:	2b00      	cmp	r3, #0
 8004388:	da0f      	bge.n	80043aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	f003 020f 	and.w	r2, r3, #15
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	3338      	adds	r3, #56	; 0x38
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	3304      	adds	r3, #4
 80043a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	705a      	strb	r2, [r3, #1]
 80043a8:	e00f      	b.n	80043ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	f003 020f 	and.w	r2, r3, #15
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	4413      	add	r3, r2
 80043c0:	3304      	adds	r3, #4
 80043c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_PCD_EP_ClrStall+0x86>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e00e      	b.n	8004408 <HAL_PCD_EP_ClrStall+0xa4>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68f9      	ldr	r1, [r7, #12]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f005 fc17 	bl	8009c2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800441c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004420:	2b00      	cmp	r3, #0
 8004422:	da0c      	bge.n	800443e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	f003 020f 	and.w	r2, r3, #15
 800442a:	4613      	mov	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	3338      	adds	r3, #56	; 0x38
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4413      	add	r3, r2
 8004438:	3304      	adds	r3, #4
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	e00c      	b.n	8004458 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	4413      	add	r3, r2
 8004454:	3304      	adds	r3, #4
 8004456:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68f9      	ldr	r1, [r7, #12]
 800445e:	4618      	mov	r0, r3
 8004460:	f005 fa36 	bl	80098d0 <USB_EPStopXfer>
 8004464:	4603      	mov	r3, r0
 8004466:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004468:	7afb      	ldrb	r3, [r7, #11]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b08a      	sub	sp, #40	; 0x28
 8004476:	af02      	add	r7, sp, #8
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	3338      	adds	r3, #56	; 0x38
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	3304      	adds	r3, #4
 8004498:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1a      	ldr	r2, [r3, #32]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d901      	bls.n	80044aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e06c      	b.n	8004584 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d902      	bls.n	80044c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3303      	adds	r3, #3
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044ce:	e02b      	b.n	8004528 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d902      	bls.n	80044ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	3303      	adds	r3, #3
 80044f0:	089b      	lsrs	r3, r3, #2
 80044f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6919      	ldr	r1, [r3, #16]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004504:	b2db      	uxtb	r3, r3
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	4603      	mov	r3, r0
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	f005 fa8a 	bl	8009a24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	441a      	add	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a1a      	ldr	r2, [r3, #32]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	441a      	add	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	b29b      	uxth	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	429a      	cmp	r2, r3
 800453c:	d809      	bhi.n	8004552 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1a      	ldr	r2, [r3, #32]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004546:	429a      	cmp	r2, r3
 8004548:	d203      	bcs.n	8004552 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1be      	bne.n	80044d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	429a      	cmp	r2, r3
 800455c:	d811      	bhi.n	8004582 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	2201      	movs	r2, #1
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	43db      	mvns	r3, r3
 8004578:	6939      	ldr	r1, [r7, #16]
 800457a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800457e:	4013      	ands	r3, r2
 8004580:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	333c      	adds	r3, #60	; 0x3c
 80045a4:	3304      	adds	r3, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d17b      	bne.n	80046ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d015      	beq.n	80045f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4a61      	ldr	r2, [pc, #388]	; (8004754 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	f240 80b9 	bls.w	8004748 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80b3 	beq.w	8004748 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ee:	461a      	mov	r2, r3
 80045f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f4:	6093      	str	r3, [r2, #8]
 80045f6:	e0a7      	b.n	8004748 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460e:	461a      	mov	r2, r3
 8004610:	2320      	movs	r3, #32
 8004612:	6093      	str	r3, [r2, #8]
 8004614:	e098      	b.n	8004748 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800461c:	2b00      	cmp	r3, #0
 800461e:	f040 8093 	bne.w	8004748 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	4a4b      	ldr	r2, [pc, #300]	; (8004754 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d90f      	bls.n	800464a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	461a      	mov	r2, r3
 8004642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004646:	6093      	str	r3, [r2, #8]
 8004648:	e07e      	b.n	8004748 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4413      	add	r3, r2
 800465c:	3304      	adds	r3, #4
 800465e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	0159      	lsls	r1, r3, #5
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	440b      	add	r3, r1
 800466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004676:	1ad2      	subs	r2, r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d114      	bne.n	80046ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004694:	461a      	mov	r2, r3
 8004696:	2101      	movs	r1, #1
 8004698:	f005 fc5a 	bl	8009f50 <USB_EP0_OutStart>
 800469c:	e006      	b.n	80046ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	441a      	add	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f00a ff40 	bl	800f538 <HAL_PCD_DataOutStageCallback>
 80046b8:	e046      	b.n	8004748 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	4a26      	ldr	r2, [pc, #152]	; (8004758 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d124      	bne.n	800470c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d8:	461a      	mov	r2, r3
 80046da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046de:	6093      	str	r3, [r2, #8]
 80046e0:	e032      	b.n	8004748 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f8:	461a      	mov	r2, r3
 80046fa:	2320      	movs	r3, #32
 80046fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	4619      	mov	r1, r3
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f00a ff17 	bl	800f538 <HAL_PCD_DataOutStageCallback>
 800470a:	e01d      	b.n	8004748 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d114      	bne.n	800473c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d108      	bne.n	800473c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004734:	461a      	mov	r2, r3
 8004736:	2100      	movs	r1, #0
 8004738:	f005 fc0a 	bl	8009f50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f00a fef8 	bl	800f538 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	4f54300a 	.word	0x4f54300a
 8004758:	4f54310a 	.word	0x4f54310a

0800475c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	333c      	adds	r3, #60	; 0x3c
 8004774:	3304      	adds	r3, #4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d90e      	bls.n	80047b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004798:	2b00      	cmp	r3, #0
 800479a:	d009      	beq.n	80047b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	461a      	mov	r2, r3
 80047aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f00a feaf 	bl	800f514 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a0a      	ldr	r2, [pc, #40]	; (80047e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d90c      	bls.n	80047d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d108      	bne.n	80047d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047d0:	461a      	mov	r2, r3
 80047d2:	2101      	movs	r1, #1
 80047d4:	f005 fbbc 	bl	8009f50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	4f54300a 	.word	0x4f54300a

080047e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
 80047f4:	4613      	mov	r3, r2
 80047f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d107      	bne.n	8004816 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004806:	883b      	ldrh	r3, [r7, #0]
 8004808:	0419      	lsls	r1, r3, #16
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	430a      	orrs	r2, r1
 8004812:	629a      	str	r2, [r3, #40]	; 0x28
 8004814:	e028      	b.n	8004868 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	4413      	add	r3, r2
 8004822:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004824:	2300      	movs	r3, #0
 8004826:	73fb      	strb	r3, [r7, #15]
 8004828:	e00d      	b.n	8004846 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	3340      	adds	r3, #64	; 0x40
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	0c1b      	lsrs	r3, r3, #16
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	4413      	add	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	3301      	adds	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
 8004846:	7bfa      	ldrb	r2, [r7, #15]
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	3b01      	subs	r3, #1
 800484c:	429a      	cmp	r2, r3
 800484e:	d3ec      	bcc.n	800482a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004850:	883b      	ldrh	r3, [r7, #0]
 8004852:	0418      	lsls	r0, r3, #16
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6819      	ldr	r1, [r3, #0]
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	3b01      	subs	r3, #1
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	4302      	orrs	r2, r0
 8004860:	3340      	adds	r3, #64	; 0x40
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	460b      	mov	r3, r1
 8004880:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	887a      	ldrh	r2, [r7, #2]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e314      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b0f      	cmp	r3, #15
 80048c8:	d903      	bls.n	80048d2 <HAL_RCC_OscConfig+0x22>
 80048ca:	21e6      	movs	r1, #230	; 0xe6
 80048cc:	4897      	ldr	r0, [pc, #604]	; (8004b2c <HAL_RCC_OscConfig+0x27c>)
 80048ce:	f7fc faf4 	bl	8000eba <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8088 	beq.w	80049f0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00d      	beq.n	8004904 <HAL_RCC_OscConfig+0x54>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f0:	d008      	beq.n	8004904 <HAL_RCC_OscConfig+0x54>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048fa:	d003      	beq.n	8004904 <HAL_RCC_OscConfig+0x54>
 80048fc:	21eb      	movs	r1, #235	; 0xeb
 80048fe:	488b      	ldr	r0, [pc, #556]	; (8004b2c <HAL_RCC_OscConfig+0x27c>)
 8004900:	f7fc fadb 	bl	8000eba <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004904:	4b8a      	ldr	r3, [pc, #552]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b04      	cmp	r3, #4
 800490e:	d00c      	beq.n	800492a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004910:	4b87      	ldr	r3, [pc, #540]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004918:	2b08      	cmp	r3, #8
 800491a:	d112      	bne.n	8004942 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800491c:	4b84      	ldr	r3, [pc, #528]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004928:	d10b      	bne.n	8004942 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492a:	4b81      	ldr	r3, [pc, #516]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d05b      	beq.n	80049ee <HAL_RCC_OscConfig+0x13e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d157      	bne.n	80049ee <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e2d4      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0xaa>
 800494c:	4b78      	ldr	r3, [pc, #480]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a77      	ldr	r2, [pc, #476]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	e01d      	b.n	8004996 <HAL_RCC_OscConfig+0xe6>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004962:	d10c      	bne.n	800497e <HAL_RCC_OscConfig+0xce>
 8004964:	4b72      	ldr	r3, [pc, #456]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a71      	ldr	r2, [pc, #452]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 800496a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b6f      	ldr	r3, [pc, #444]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a6e      	ldr	r2, [pc, #440]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	e00b      	b.n	8004996 <HAL_RCC_OscConfig+0xe6>
 800497e:	4b6c      	ldr	r3, [pc, #432]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a6b      	ldr	r2, [pc, #428]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	4b69      	ldr	r3, [pc, #420]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a68      	ldr	r2, [pc, #416]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004994:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d013      	beq.n	80049c6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499e:	f7fd fabb 	bl	8001f18 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a6:	f7fd fab7 	bl	8001f18 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b64      	cmp	r3, #100	; 0x64
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e299      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b8:	4b5d      	ldr	r3, [pc, #372]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0xf6>
 80049c4:	e014      	b.n	80049f0 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c6:	f7fd faa7 	bl	8001f18 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ce:	f7fd faa3 	bl	8001f18 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b64      	cmp	r3, #100	; 0x64
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e285      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e0:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f0      	bne.n	80049ce <HAL_RCC_OscConfig+0x11e>
 80049ec:	e000      	b.n	80049f0 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d079      	beq.n	8004af0 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCC_OscConfig+0x166>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d004      	beq.n	8004a16 <HAL_RCC_OscConfig+0x166>
 8004a0c:	f240 111d 	movw	r1, #285	; 0x11d
 8004a10:	4846      	ldr	r0, [pc, #280]	; (8004b2c <HAL_RCC_OscConfig+0x27c>)
 8004a12:	f7fc fa52 	bl	8000eba <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b1f      	cmp	r3, #31
 8004a1c:	d904      	bls.n	8004a28 <HAL_RCC_OscConfig+0x178>
 8004a1e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004a22:	4842      	ldr	r0, [pc, #264]	; (8004b2c <HAL_RCC_OscConfig+0x27c>)
 8004a24:	f7fc fa49 	bl	8000eba <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a28:	4b41      	ldr	r3, [pc, #260]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00b      	beq.n	8004a4c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a34:	4b3e      	ldr	r3, [pc, #248]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d11c      	bne.n	8004a7a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a40:	4b3b      	ldr	r3, [pc, #236]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d116      	bne.n	8004a7a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4c:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_OscConfig+0x1b4>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e243      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a64:	4b32      	ldr	r3, [pc, #200]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	492f      	ldr	r1, [pc, #188]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a78:	e03a      	b.n	8004af0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d020      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a82:	4b2c      	ldr	r3, [pc, #176]	; (8004b34 <HAL_RCC_OscConfig+0x284>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fd fa46 	bl	8001f18 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a90:	f7fd fa42 	bl	8001f18 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e224      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa2:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aae:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	491c      	ldr	r1, [pc, #112]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]
 8004ac2:	e015      	b.n	8004af0 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <HAL_RCC_OscConfig+0x284>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7fd fa25 	bl	8001f18 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad2:	f7fd fa21 	bl	8001f18 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e203      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae4:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <HAL_RCC_OscConfig+0x280>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f0      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d045      	beq.n	8004b88 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_RCC_OscConfig+0x266>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d004      	beq.n	8004b16 <HAL_RCC_OscConfig+0x266>
 8004b0c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004b10:	4806      	ldr	r0, [pc, #24]	; (8004b2c <HAL_RCC_OscConfig+0x27c>)
 8004b12:	f7fc f9d2 	bl	8000eba <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01e      	beq.n	8004b5c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b24:	f7fd f9f8 	bl	8001f18 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2a:	e010      	b.n	8004b4e <HAL_RCC_OscConfig+0x29e>
 8004b2c:	08010650 	.word	0x08010650
 8004b30:	40023800 	.word	0x40023800
 8004b34:	42470000 	.word	0x42470000
 8004b38:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b3c:	f7fd f9ec 	bl	8001f18 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e1ce      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4e:	4b5e      	ldr	r3, [pc, #376]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x28c>
 8004b5a:	e015      	b.n	8004b88 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5c:	4b5b      	ldr	r3, [pc, #364]	; (8004ccc <HAL_RCC_OscConfig+0x41c>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b62:	f7fd f9d9 	bl	8001f18 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b6a:	f7fd f9d5 	bl	8001f18 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e1b7      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b7c:	4b52      	ldr	r3, [pc, #328]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f0      	bne.n	8004b6a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80b0 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00c      	beq.n	8004bbc <HAL_RCC_OscConfig+0x30c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d008      	beq.n	8004bbc <HAL_RCC_OscConfig+0x30c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d004      	beq.n	8004bbc <HAL_RCC_OscConfig+0x30c>
 8004bb2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004bb6:	4846      	ldr	r0, [pc, #280]	; (8004cd0 <HAL_RCC_OscConfig+0x420>)
 8004bb8:	f7fc f97f 	bl	8000eba <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bbc:	4b42      	ldr	r3, [pc, #264]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10f      	bne.n	8004be8 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60bb      	str	r3, [r7, #8]
 8004bcc:	4b3e      	ldr	r3, [pc, #248]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	4a3d      	ldr	r2, [pc, #244]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8004bd8:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be8:	4b3a      	ldr	r3, [pc, #232]	; (8004cd4 <HAL_RCC_OscConfig+0x424>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d118      	bne.n	8004c26 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bf4:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <HAL_RCC_OscConfig+0x424>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a36      	ldr	r2, [pc, #216]	; (8004cd4 <HAL_RCC_OscConfig+0x424>)
 8004bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c00:	f7fd f98a 	bl	8001f18 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c08:	f7fd f986 	bl	8001f18 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e168      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1a:	4b2e      	ldr	r3, [pc, #184]	; (8004cd4 <HAL_RCC_OscConfig+0x424>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d106      	bne.n	8004c3c <HAL_RCC_OscConfig+0x38c>
 8004c2e:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c32:	4a25      	ldr	r2, [pc, #148]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	6713      	str	r3, [r2, #112]	; 0x70
 8004c3a:	e01c      	b.n	8004c76 <HAL_RCC_OscConfig+0x3c6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b05      	cmp	r3, #5
 8004c42:	d10c      	bne.n	8004c5e <HAL_RCC_OscConfig+0x3ae>
 8004c44:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004c4a:	f043 0304 	orr.w	r3, r3, #4
 8004c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5c:	e00b      	b.n	8004c76 <HAL_RCC_OscConfig+0x3c6>
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6a:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	4a16      	ldr	r2, [pc, #88]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004c70:	f023 0304 	bic.w	r3, r3, #4
 8004c74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d015      	beq.n	8004caa <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7e:	f7fd f94b 	bl	8001f18 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c84:	e00a      	b.n	8004c9c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c86:	f7fd f947 	bl	8001f18 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e127      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <HAL_RCC_OscConfig+0x418>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0ee      	beq.n	8004c86 <HAL_RCC_OscConfig+0x3d6>
 8004ca8:	e01c      	b.n	8004ce4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004caa:	f7fd f935 	bl	8001f18 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb0:	e012      	b.n	8004cd8 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb2:	f7fd f931 	bl	8001f18 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d909      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e111      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	42470e80 	.word	0x42470e80
 8004cd0:	08010650 	.word	0x08010650
 8004cd4:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd8:	4b86      	ldr	r3, [pc, #536]	; (8004ef4 <HAL_RCC_OscConfig+0x644>)
 8004cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e6      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d105      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cea:	4b82      	ldr	r3, [pc, #520]	; (8004ef4 <HAL_RCC_OscConfig+0x644>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	4a81      	ldr	r2, [pc, #516]	; (8004ef4 <HAL_RCC_OscConfig+0x644>)
 8004cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00c      	beq.n	8004d18 <HAL_RCC_OscConfig+0x468>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d008      	beq.n	8004d18 <HAL_RCC_OscConfig+0x468>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d004      	beq.n	8004d18 <HAL_RCC_OscConfig+0x468>
 8004d0e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004d12:	4879      	ldr	r0, [pc, #484]	; (8004ef8 <HAL_RCC_OscConfig+0x648>)
 8004d14:	f7fc f8d1 	bl	8000eba <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80e4 	beq.w	8004eea <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d22:	4b74      	ldr	r3, [pc, #464]	; (8004ef4 <HAL_RCC_OscConfig+0x644>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	f000 80a5 	beq.w	8004e7a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	f040 8089 	bne.w	8004e4c <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_RCC_OscConfig+0x4a6>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d4a:	d004      	beq.n	8004d56 <HAL_RCC_OscConfig+0x4a6>
 8004d4c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004d50:	4869      	ldr	r0, [pc, #420]	; (8004ef8 <HAL_RCC_OscConfig+0x648>)
 8004d52:	f7fc f8b2 	bl	8000eba <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	2b3f      	cmp	r3, #63	; 0x3f
 8004d5c:	d904      	bls.n	8004d68 <HAL_RCC_OscConfig+0x4b8>
 8004d5e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004d62:	4865      	ldr	r0, [pc, #404]	; (8004ef8 <HAL_RCC_OscConfig+0x648>)
 8004d64:	f7fc f8a9 	bl	8000eba <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	2b31      	cmp	r3, #49	; 0x31
 8004d6e:	d904      	bls.n	8004d7a <HAL_RCC_OscConfig+0x4ca>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004d78:	d904      	bls.n	8004d84 <HAL_RCC_OscConfig+0x4d4>
 8004d7a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004d7e:	485e      	ldr	r0, [pc, #376]	; (8004ef8 <HAL_RCC_OscConfig+0x648>)
 8004d80:	f7fc f89b 	bl	8000eba <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d010      	beq.n	8004dae <HAL_RCC_OscConfig+0x4fe>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d00c      	beq.n	8004dae <HAL_RCC_OscConfig+0x4fe>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d98:	2b06      	cmp	r3, #6
 8004d9a:	d008      	beq.n	8004dae <HAL_RCC_OscConfig+0x4fe>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d004      	beq.n	8004dae <HAL_RCC_OscConfig+0x4fe>
 8004da4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004da8:	4853      	ldr	r0, [pc, #332]	; (8004ef8 <HAL_RCC_OscConfig+0x648>)
 8004daa:	f7fc f886 	bl	8000eba <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d903      	bls.n	8004dbe <HAL_RCC_OscConfig+0x50e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d904      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x518>
 8004dbe:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004dc2:	484d      	ldr	r0, [pc, #308]	; (8004ef8 <HAL_RCC_OscConfig+0x648>)
 8004dc4:	f7fc f879 	bl	8000eba <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc8:	4b4c      	ldr	r3, [pc, #304]	; (8004efc <HAL_RCC_OscConfig+0x64c>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dce:	f7fd f8a3 	bl	8001f18 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd6:	f7fd f89f 	bl	8001f18 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e081      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de8:	4b42      	ldr	r3, [pc, #264]	; (8004ef4 <HAL_RCC_OscConfig+0x644>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f0      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	019b      	lsls	r3, r3, #6
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	085b      	lsrs	r3, r3, #1
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	061b      	lsls	r3, r3, #24
 8004e18:	4936      	ldr	r1, [pc, #216]	; (8004ef4 <HAL_RCC_OscConfig+0x644>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e1e:	4b37      	ldr	r3, [pc, #220]	; (8004efc <HAL_RCC_OscConfig+0x64c>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e24:	f7fd f878 	bl	8001f18 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2c:	f7fd f874 	bl	8001f18 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e056      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3e:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <HAL_RCC_OscConfig+0x644>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x57c>
 8004e4a:	e04e      	b.n	8004eea <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4c:	4b2b      	ldr	r3, [pc, #172]	; (8004efc <HAL_RCC_OscConfig+0x64c>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fd f861 	bl	8001f18 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fd f85d 	bl	8001f18 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e03f      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6c:	4b21      	ldr	r3, [pc, #132]	; (8004ef4 <HAL_RCC_OscConfig+0x644>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f0      	bne.n	8004e5a <HAL_RCC_OscConfig+0x5aa>
 8004e78:	e037      	b.n	8004eea <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e032      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e86:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <HAL_RCC_OscConfig+0x644>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d028      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d121      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d11a      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ebc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d111      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	085b      	lsrs	r3, r3, #1
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d107      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	08010650 	.word	0x08010650
 8004efc:	42470060 	.word	0x42470060

08004f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e174      	b.n	80051fe <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x24>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b0f      	cmp	r3, #15
 8004f22:	d904      	bls.n	8004f2e <HAL_RCC_ClockConfig+0x2e>
 8004f24:	f240 215a 	movw	r1, #602	; 0x25a
 8004f28:	487b      	ldr	r0, [pc, #492]	; (8005118 <HAL_RCC_ClockConfig+0x218>)
 8004f2a:	f7fb ffc6 	bl	8000eba <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d019      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x68>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d016      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x68>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d013      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x68>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d010      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x68>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d00d      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x68>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b05      	cmp	r3, #5
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x68>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b06      	cmp	r3, #6
 8004f56:	d007      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x68>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b07      	cmp	r3, #7
 8004f5c:	d004      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x68>
 8004f5e:	f240 215b 	movw	r1, #603	; 0x25b
 8004f62:	486d      	ldr	r0, [pc, #436]	; (8005118 <HAL_RCC_ClockConfig+0x218>)
 8004f64:	f7fb ffa9 	bl	8000eba <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f68:	4b6c      	ldr	r3, [pc, #432]	; (800511c <HAL_RCC_ClockConfig+0x21c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d90c      	bls.n	8004f90 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	4b69      	ldr	r3, [pc, #420]	; (800511c <HAL_RCC_ClockConfig+0x21c>)
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7e:	4b67      	ldr	r3, [pc, #412]	; (800511c <HAL_RCC_ClockConfig+0x21c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e136      	b.n	80051fe <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d049      	beq.n	8005030 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fa8:	4b5d      	ldr	r3, [pc, #372]	; (8005120 <HAL_RCC_ClockConfig+0x220>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4a5c      	ldr	r2, [pc, #368]	; (8005120 <HAL_RCC_ClockConfig+0x220>)
 8004fae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fc0:	4b57      	ldr	r3, [pc, #348]	; (8005120 <HAL_RCC_ClockConfig+0x220>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	4a56      	ldr	r2, [pc, #344]	; (8005120 <HAL_RCC_ClockConfig+0x220>)
 8004fc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d024      	beq.n	800501e <HAL_RCC_ClockConfig+0x11e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	d020      	beq.n	800501e <HAL_RCC_ClockConfig+0x11e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b90      	cmp	r3, #144	; 0x90
 8004fe2:	d01c      	beq.n	800501e <HAL_RCC_ClockConfig+0x11e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2ba0      	cmp	r3, #160	; 0xa0
 8004fea:	d018      	beq.n	800501e <HAL_RCC_ClockConfig+0x11e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2bb0      	cmp	r3, #176	; 0xb0
 8004ff2:	d014      	beq.n	800501e <HAL_RCC_ClockConfig+0x11e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2bc0      	cmp	r3, #192	; 0xc0
 8004ffa:	d010      	beq.n	800501e <HAL_RCC_ClockConfig+0x11e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2bd0      	cmp	r3, #208	; 0xd0
 8005002:	d00c      	beq.n	800501e <HAL_RCC_ClockConfig+0x11e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2be0      	cmp	r3, #224	; 0xe0
 800500a:	d008      	beq.n	800501e <HAL_RCC_ClockConfig+0x11e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2bf0      	cmp	r3, #240	; 0xf0
 8005012:	d004      	beq.n	800501e <HAL_RCC_ClockConfig+0x11e>
 8005014:	f240 217e 	movw	r1, #638	; 0x27e
 8005018:	483f      	ldr	r0, [pc, #252]	; (8005118 <HAL_RCC_ClockConfig+0x218>)
 800501a:	f7fb ff4e 	bl	8000eba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800501e:	4b40      	ldr	r3, [pc, #256]	; (8005120 <HAL_RCC_ClockConfig+0x220>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	493d      	ldr	r1, [pc, #244]	; (8005120 <HAL_RCC_ClockConfig+0x220>)
 800502c:	4313      	orrs	r3, r2
 800502e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d059      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d010      	beq.n	8005066 <HAL_RCC_ClockConfig+0x166>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d00c      	beq.n	8005066 <HAL_RCC_ClockConfig+0x166>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d008      	beq.n	8005066 <HAL_RCC_ClockConfig+0x166>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d004      	beq.n	8005066 <HAL_RCC_ClockConfig+0x166>
 800505c:	f240 2185 	movw	r1, #645	; 0x285
 8005060:	482d      	ldr	r0, [pc, #180]	; (8005118 <HAL_RCC_ClockConfig+0x218>)
 8005062:	f7fb ff2a 	bl	8000eba <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d107      	bne.n	800507e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506e:	4b2c      	ldr	r3, [pc, #176]	; (8005120 <HAL_RCC_ClockConfig+0x220>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d119      	bne.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e0bf      	b.n	80051fe <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d003      	beq.n	800508e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508a:	2b03      	cmp	r3, #3
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508e:	4b24      	ldr	r3, [pc, #144]	; (8005120 <HAL_RCC_ClockConfig+0x220>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0af      	b.n	80051fe <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509e:	4b20      	ldr	r3, [pc, #128]	; (8005120 <HAL_RCC_ClockConfig+0x220>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e0a7      	b.n	80051fe <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ae:	4b1c      	ldr	r3, [pc, #112]	; (8005120 <HAL_RCC_ClockConfig+0x220>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f023 0203 	bic.w	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4919      	ldr	r1, [pc, #100]	; (8005120 <HAL_RCC_ClockConfig+0x220>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c0:	f7fc ff2a 	bl	8001f18 <HAL_GetTick>
 80050c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c6:	e00a      	b.n	80050de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c8:	f7fc ff26 	bl	8001f18 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e08f      	b.n	80051fe <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <HAL_RCC_ClockConfig+0x220>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 020c 	and.w	r2, r3, #12
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d1eb      	bne.n	80050c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <HAL_RCC_ClockConfig+0x21c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d212      	bcs.n	8005124 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b07      	ldr	r3, [pc, #28]	; (800511c <HAL_RCC_ClockConfig+0x21c>)
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_RCC_ClockConfig+0x21c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d007      	beq.n	8005124 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e072      	b.n	80051fe <HAL_RCC_ClockConfig+0x2fe>
 8005118:	08010650 	.word	0x08010650
 800511c:	40023c00 	.word	0x40023c00
 8005120:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d025      	beq.n	800517c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d018      	beq.n	800516a <HAL_RCC_ClockConfig+0x26a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005140:	d013      	beq.n	800516a <HAL_RCC_ClockConfig+0x26a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800514a:	d00e      	beq.n	800516a <HAL_RCC_ClockConfig+0x26a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005154:	d009      	beq.n	800516a <HAL_RCC_ClockConfig+0x26a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800515e:	d004      	beq.n	800516a <HAL_RCC_ClockConfig+0x26a>
 8005160:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005164:	4828      	ldr	r0, [pc, #160]	; (8005208 <HAL_RCC_ClockConfig+0x308>)
 8005166:	f7fb fea8 	bl	8000eba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800516a:	4b28      	ldr	r3, [pc, #160]	; (800520c <HAL_RCC_ClockConfig+0x30c>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	4925      	ldr	r1, [pc, #148]	; (800520c <HAL_RCC_ClockConfig+0x30c>)
 8005178:	4313      	orrs	r3, r2
 800517a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d026      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d018      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x2c2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005198:	d013      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x2c2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051a2:	d00e      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x2c2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80051ac:	d009      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x2c2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80051b6:	d004      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x2c2>
 80051b8:	f240 21ca 	movw	r1, #714	; 0x2ca
 80051bc:	4812      	ldr	r0, [pc, #72]	; (8005208 <HAL_RCC_ClockConfig+0x308>)
 80051be:	f7fb fe7c 	bl	8000eba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <HAL_RCC_ClockConfig+0x30c>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	490e      	ldr	r1, [pc, #56]	; (800520c <HAL_RCC_ClockConfig+0x30c>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051d6:	f000 f821 	bl	800521c <HAL_RCC_GetSysClockFreq>
 80051da:	4602      	mov	r2, r0
 80051dc:	4b0b      	ldr	r3, [pc, #44]	; (800520c <HAL_RCC_ClockConfig+0x30c>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	490a      	ldr	r1, [pc, #40]	; (8005210 <HAL_RCC_ClockConfig+0x310>)
 80051e8:	5ccb      	ldrb	r3, [r1, r3]
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	4a09      	ldr	r2, [pc, #36]	; (8005214 <HAL_RCC_ClockConfig+0x314>)
 80051f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <HAL_RCC_ClockConfig+0x318>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fc fa64 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	08010650 	.word	0x08010650
 800520c:	40023800 	.word	0x40023800
 8005210:	08013104 	.word	0x08013104
 8005214:	2000006c 	.word	0x2000006c
 8005218:	20000070 	.word	0x20000070

0800521c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800521c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005220:	b090      	sub	sp, #64	; 0x40
 8005222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
 8005228:	2300      	movs	r3, #0
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800522c:	2300      	movs	r3, #0
 800522e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005234:	4b59      	ldr	r3, [pc, #356]	; (800539c <HAL_RCC_GetSysClockFreq+0x180>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 030c 	and.w	r3, r3, #12
 800523c:	2b08      	cmp	r3, #8
 800523e:	d00d      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x40>
 8005240:	2b08      	cmp	r3, #8
 8005242:	f200 80a1 	bhi.w	8005388 <HAL_RCC_GetSysClockFreq+0x16c>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x34>
 800524a:	2b04      	cmp	r3, #4
 800524c:	d003      	beq.n	8005256 <HAL_RCC_GetSysClockFreq+0x3a>
 800524e:	e09b      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005250:	4b53      	ldr	r3, [pc, #332]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005252:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005254:	e09b      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005256:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005258:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800525a:	e098      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800525c:	4b4f      	ldr	r3, [pc, #316]	; (800539c <HAL_RCC_GetSysClockFreq+0x180>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005266:	4b4d      	ldr	r3, [pc, #308]	; (800539c <HAL_RCC_GetSysClockFreq+0x180>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d028      	beq.n	80052c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005272:	4b4a      	ldr	r3, [pc, #296]	; (800539c <HAL_RCC_GetSysClockFreq+0x180>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	099b      	lsrs	r3, r3, #6
 8005278:	2200      	movs	r2, #0
 800527a:	623b      	str	r3, [r7, #32]
 800527c:	627a      	str	r2, [r7, #36]	; 0x24
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005284:	2100      	movs	r1, #0
 8005286:	4b47      	ldr	r3, [pc, #284]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005288:	fb03 f201 	mul.w	r2, r3, r1
 800528c:	2300      	movs	r3, #0
 800528e:	fb00 f303 	mul.w	r3, r0, r3
 8005292:	4413      	add	r3, r2
 8005294:	4a43      	ldr	r2, [pc, #268]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005296:	fba0 1202 	umull	r1, r2, r0, r2
 800529a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800529c:	460a      	mov	r2, r1
 800529e:	62ba      	str	r2, [r7, #40]	; 0x28
 80052a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a2:	4413      	add	r3, r2
 80052a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a8:	2200      	movs	r2, #0
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	61fa      	str	r2, [r7, #28]
 80052ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052b6:	f7fa ffe3 	bl	8000280 <__aeabi_uldivmod>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4613      	mov	r3, r2
 80052c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c2:	e053      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052c4:	4b35      	ldr	r3, [pc, #212]	; (800539c <HAL_RCC_GetSysClockFreq+0x180>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	099b      	lsrs	r3, r3, #6
 80052ca:	2200      	movs	r2, #0
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	617a      	str	r2, [r7, #20]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80052d6:	f04f 0b00 	mov.w	fp, #0
 80052da:	4652      	mov	r2, sl
 80052dc:	465b      	mov	r3, fp
 80052de:	f04f 0000 	mov.w	r0, #0
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	0159      	lsls	r1, r3, #5
 80052e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ec:	0150      	lsls	r0, r2, #5
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	ebb2 080a 	subs.w	r8, r2, sl
 80052f6:	eb63 090b 	sbc.w	r9, r3, fp
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005306:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800530a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800530e:	ebb2 0408 	subs.w	r4, r2, r8
 8005312:	eb63 0509 	sbc.w	r5, r3, r9
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	00eb      	lsls	r3, r5, #3
 8005320:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005324:	00e2      	lsls	r2, r4, #3
 8005326:	4614      	mov	r4, r2
 8005328:	461d      	mov	r5, r3
 800532a:	eb14 030a 	adds.w	r3, r4, sl
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	eb45 030b 	adc.w	r3, r5, fp
 8005334:	607b      	str	r3, [r7, #4]
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005342:	4629      	mov	r1, r5
 8005344:	028b      	lsls	r3, r1, #10
 8005346:	4621      	mov	r1, r4
 8005348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800534c:	4621      	mov	r1, r4
 800534e:	028a      	lsls	r2, r1, #10
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005356:	2200      	movs	r2, #0
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	60fa      	str	r2, [r7, #12]
 800535c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005360:	f7fa ff8e 	bl	8000280 <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4613      	mov	r3, r2
 800536a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <HAL_RCC_GetSysClockFreq+0x180>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	0c1b      	lsrs	r3, r3, #16
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	3301      	adds	r3, #1
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800537c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005386:	e002      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800538a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800538c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005390:	4618      	mov	r0, r3
 8005392:	3740      	adds	r7, #64	; 0x40
 8005394:	46bd      	mov	sp, r7
 8005396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539a:	bf00      	nop
 800539c:	40023800 	.word	0x40023800
 80053a0:	00f42400 	.word	0x00f42400
 80053a4:	017d7840 	.word	0x017d7840

080053a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ae:	681b      	ldr	r3, [r3, #0]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	2000006c 	.word	0x2000006c

080053c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053c4:	f7ff fff0 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	0a9b      	lsrs	r3, r3, #10
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	4903      	ldr	r1, [pc, #12]	; (80053e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053d6:	5ccb      	ldrb	r3, [r1, r3]
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053dc:	4618      	mov	r0, r3
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40023800 	.word	0x40023800
 80053e4:	08013114 	.word	0x08013114

080053e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053ec:	f7ff ffdc 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 80053f0:	4602      	mov	r2, r0
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	0b5b      	lsrs	r3, r3, #13
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	4903      	ldr	r1, [pc, #12]	; (800540c <HAL_RCC_GetPCLK2Freq+0x24>)
 80053fe:	5ccb      	ldrb	r3, [r1, r3]
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005404:	4618      	mov	r0, r3
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40023800 	.word	0x40023800
 800540c:	08013114 	.word	0x08013114

08005410 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	220f      	movs	r2, #15
 800541e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005420:	4b12      	ldr	r3, [pc, #72]	; (800546c <HAL_RCC_GetClockConfig+0x5c>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 0203 	and.w	r2, r3, #3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <HAL_RCC_GetClockConfig+0x5c>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <HAL_RCC_GetClockConfig+0x5c>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCC_GetClockConfig+0x5c>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	08db      	lsrs	r3, r3, #3
 800544a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005452:	4b07      	ldr	r3, [pc, #28]	; (8005470 <HAL_RCC_GetClockConfig+0x60>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0207 	and.w	r2, r3, #7
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	601a      	str	r2, [r3, #0]
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40023800 	.word	0x40023800
 8005470:	40023c00 	.word	0x40023c00

08005474 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b0f      	cmp	r3, #15
 8005492:	d904      	bls.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8005494:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8005498:	4834      	ldr	r0, [pc, #208]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800549a:	f7fb fd0e 	bl	8000eba <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d105      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d066      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d903      	bls.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	2b07      	cmp	r3, #7
 80054c4:	d904      	bls.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80054c6:	f640 11de 	movw	r1, #2526	; 0x9de
 80054ca:	4828      	ldr	r0, [pc, #160]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80054cc:	f7fb fcf5 	bl	8000eba <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b31      	cmp	r3, #49	; 0x31
 80054d6:	d904      	bls.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80054e0:	d904      	bls.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 80054e2:	f640 11df 	movw	r1, #2527	; 0x9df
 80054e6:	4821      	ldr	r0, [pc, #132]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80054e8:	f7fb fce7 	bl	8000eba <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d903      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x88>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b3f      	cmp	r3, #63	; 0x3f
 80054fa:	d904      	bls.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x92>
 80054fc:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8005500:	481a      	ldr	r0, [pc, #104]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005502:	f7fb fcda 	bl	8000eba <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005506:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800550c:	f7fc fd04 	bl	8001f18 <HAL_GetTick>
 8005510:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005514:	f7fc fd00 	bl	8001f18 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e1b3      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	019b      	lsls	r3, r3, #6
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	071b      	lsls	r3, r3, #28
 8005544:	490b      	ldr	r1, [pc, #44]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800554c:	4b08      	ldr	r3, [pc, #32]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005552:	f7fc fce1 	bl	8001f18 <HAL_GetTick>
 8005556:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005558:	e00e      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800555a:	f7fc fcdd 	bl	8001f18 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d907      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e190      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800556c:	08010688 	.word	0x08010688
 8005570:	42470068 	.word	0x42470068
 8005574:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005578:	4b88      	ldr	r3, [pc, #544]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ea      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 8173 	beq.w	8005878 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800559a:	f000 80a6 	beq.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a6:	f000 80a0 	beq.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	4a7c      	ldr	r2, [pc, #496]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	f000 809a 	beq.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	4a7a      	ldr	r2, [pc, #488]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	f000 8094 	beq.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	4a78      	ldr	r2, [pc, #480]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	f000 808e 	beq.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	4a76      	ldr	r2, [pc, #472]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	f000 8088 	beq.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	4a74      	ldr	r2, [pc, #464]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	f000 8082 	beq.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	4a72      	ldr	r2, [pc, #456]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d07c      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	4a70      	ldr	r2, [pc, #448]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d077      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	4a6f      	ldr	r2, [pc, #444]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d072      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	4a6d      	ldr	r2, [pc, #436]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d06d      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	4a6c      	ldr	r2, [pc, #432]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d068      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	4a6a      	ldr	r2, [pc, #424]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d063      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	4a69      	ldr	r2, [pc, #420]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d05e      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	4a67      	ldr	r2, [pc, #412]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d059      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	4a66      	ldr	r2, [pc, #408]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d054      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	4a64      	ldr	r2, [pc, #400]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d04f      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	4a63      	ldr	r2, [pc, #396]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d04a      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	4a61      	ldr	r2, [pc, #388]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d045      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	4a60      	ldr	r2, [pc, #384]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d040      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	4a5e      	ldr	r2, [pc, #376]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d03b      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	4a5d      	ldr	r2, [pc, #372]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d036      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	4a5b      	ldr	r2, [pc, #364]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d031      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	4a5a      	ldr	r2, [pc, #360]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d02c      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	4a58      	ldr	r2, [pc, #352]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d027      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	4a57      	ldr	r2, [pc, #348]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d022      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	4a55      	ldr	r2, [pc, #340]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01d      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	4a54      	ldr	r2, [pc, #336]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	4a52      	ldr	r2, [pc, #328]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	4a51      	ldr	r2, [pc, #324]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	4a4f      	ldr	r2, [pc, #316]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	4a4e      	ldr	r2, [pc, #312]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x276>
 80056e0:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 80056e4:	484c      	ldr	r0, [pc, #304]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80056e6:	f7fb fbe8 	bl	8000eba <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	4b2b      	ldr	r3, [pc, #172]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	4a2a      	ldr	r2, [pc, #168]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80056f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f8:	6413      	str	r3, [r2, #64]	; 0x40
 80056fa:	4b28      	ldr	r3, [pc, #160]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005706:	4b45      	ldr	r3, [pc, #276]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a44      	ldr	r2, [pc, #272]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800570c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005710:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005712:	f7fc fc01 	bl	8001f18 <HAL_GetTick>
 8005716:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005718:	e008      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800571a:	f7fc fbfd 	bl	8001f18 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e0b0      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800572c:	4b3b      	ldr	r3, [pc, #236]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005738:	4b18      	ldr	r3, [pc, #96]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800573a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005740:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d073      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	429a      	cmp	r2, r3
 8005754:	d06c      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005756:	4b11      	ldr	r3, [pc, #68]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005760:	4b2f      	ldr	r3, [pc, #188]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005766:	4b2e      	ldr	r3, [pc, #184]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800576c:	4a0b      	ldr	r2, [pc, #44]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005772:	4b0a      	ldr	r3, [pc, #40]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b01      	cmp	r3, #1
 800577c:	d158      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800577e:	f7fc fbcb 	bl	8001f18 <HAL_GetTick>
 8005782:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005784:	e04e      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005786:	f7fc fbc7 	bl	8001f18 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f241 3288 	movw	r2, #5000	; 0x1388
 8005794:	4293      	cmp	r3, r2
 8005796:	d945      	bls.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e078      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800579c:	40023800 	.word	0x40023800
 80057a0:	00020300 	.word	0x00020300
 80057a4:	00030300 	.word	0x00030300
 80057a8:	00040300 	.word	0x00040300
 80057ac:	00050300 	.word	0x00050300
 80057b0:	00060300 	.word	0x00060300
 80057b4:	00070300 	.word	0x00070300
 80057b8:	00080300 	.word	0x00080300
 80057bc:	00090300 	.word	0x00090300
 80057c0:	000a0300 	.word	0x000a0300
 80057c4:	000b0300 	.word	0x000b0300
 80057c8:	000c0300 	.word	0x000c0300
 80057cc:	000d0300 	.word	0x000d0300
 80057d0:	000e0300 	.word	0x000e0300
 80057d4:	000f0300 	.word	0x000f0300
 80057d8:	00100300 	.word	0x00100300
 80057dc:	00110300 	.word	0x00110300
 80057e0:	00120300 	.word	0x00120300
 80057e4:	00130300 	.word	0x00130300
 80057e8:	00140300 	.word	0x00140300
 80057ec:	00150300 	.word	0x00150300
 80057f0:	00160300 	.word	0x00160300
 80057f4:	00170300 	.word	0x00170300
 80057f8:	00180300 	.word	0x00180300
 80057fc:	00190300 	.word	0x00190300
 8005800:	001a0300 	.word	0x001a0300
 8005804:	001b0300 	.word	0x001b0300
 8005808:	001c0300 	.word	0x001c0300
 800580c:	001d0300 	.word	0x001d0300
 8005810:	001e0300 	.word	0x001e0300
 8005814:	001f0300 	.word	0x001f0300
 8005818:	08010688 	.word	0x08010688
 800581c:	40007000 	.word	0x40007000
 8005820:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005824:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0aa      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800583c:	d10d      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800583e:	4b16      	ldr	r3, [pc, #88]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800584e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005852:	4911      	ldr	r1, [pc, #68]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005854:	4313      	orrs	r3, r2
 8005856:	608b      	str	r3, [r1, #8]
 8005858:	e005      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800585a:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	4a0e      	ldr	r2, [pc, #56]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005860:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005864:	6093      	str	r3, [r2, #8]
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005872:	4909      	ldr	r1, [pc, #36]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005874:	4313      	orrs	r3, r2
 8005876:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	7d1a      	ldrb	r2, [r3, #20]
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800588a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40023800 	.word	0x40023800
 800589c:	424711e0 	.word	0x424711e0

080058a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e0c4      	b.n	8005a40 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a63      	ldr	r2, [pc, #396]	; (8005a48 <HAL_RTC_Init+0x1a8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d004      	beq.n	80058ca <HAL_RTC_Init+0x2a>
 80058c0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80058c4:	4861      	ldr	r0, [pc, #388]	; (8005a4c <HAL_RTC_Init+0x1ac>)
 80058c6:	f7fb faf8 	bl	8000eba <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d008      	beq.n	80058e4 <HAL_RTC_Init+0x44>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d004      	beq.n	80058e4 <HAL_RTC_Init+0x44>
 80058da:	f240 1105 	movw	r1, #261	; 0x105
 80058de:	485b      	ldr	r0, [pc, #364]	; (8005a4c <HAL_RTC_Init+0x1ac>)
 80058e0:	f7fb faeb 	bl	8000eba <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b7f      	cmp	r3, #127	; 0x7f
 80058ea:	d904      	bls.n	80058f6 <HAL_RTC_Init+0x56>
 80058ec:	f44f 7183 	mov.w	r1, #262	; 0x106
 80058f0:	4856      	ldr	r0, [pc, #344]	; (8005a4c <HAL_RTC_Init+0x1ac>)
 80058f2:	f7fb fae2 	bl	8000eba <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fe:	d304      	bcc.n	800590a <HAL_RTC_Init+0x6a>
 8005900:	f240 1107 	movw	r1, #263	; 0x107
 8005904:	4851      	ldr	r0, [pc, #324]	; (8005a4c <HAL_RTC_Init+0x1ac>)
 8005906:	f7fb fad8 	bl	8000eba <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d013      	beq.n	800593a <HAL_RTC_Init+0x9a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800591a:	d00e      	beq.n	800593a <HAL_RTC_Init+0x9a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005924:	d009      	beq.n	800593a <HAL_RTC_Init+0x9a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800592e:	d004      	beq.n	800593a <HAL_RTC_Init+0x9a>
 8005930:	f44f 7184 	mov.w	r1, #264	; 0x108
 8005934:	4845      	ldr	r0, [pc, #276]	; (8005a4c <HAL_RTC_Init+0x1ac>)
 8005936:	f7fb fac0 	bl	8000eba <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <HAL_RTC_Init+0xb6>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800594a:	d004      	beq.n	8005956 <HAL_RTC_Init+0xb6>
 800594c:	f240 1109 	movw	r1, #265	; 0x109
 8005950:	483e      	ldr	r0, [pc, #248]	; (8005a4c <HAL_RTC_Init+0x1ac>)
 8005952:	f7fb fab2 	bl	8000eba <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d009      	beq.n	8005972 <HAL_RTC_Init+0xd2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005966:	d004      	beq.n	8005972 <HAL_RTC_Init+0xd2>
 8005968:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800596c:	4837      	ldr	r0, [pc, #220]	; (8005a4c <HAL_RTC_Init+0x1ac>)
 800596e:	f7fb faa4 	bl	8000eba <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	7f5b      	ldrb	r3, [r3, #29]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d105      	bne.n	8005988 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fb fafe 	bl	8000f84 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	22ca      	movs	r2, #202	; 0xca
 8005994:	625a      	str	r2, [r3, #36]	; 0x24
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2253      	movs	r2, #83	; 0x53
 800599c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fad2 	bl	8005f48 <RTC_EnterInitMode>
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d12c      	bne.n	8005a08 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6899      	ldr	r1, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	68d2      	ldr	r2, [r2, #12]
 80059e8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6919      	ldr	r1, [r3, #16]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	041a      	lsls	r2, r3, #16
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fad9 	bl	8005fb6 <RTC_ExitInitMode>
 8005a04:	4603      	mov	r3, r0
 8005a06:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d113      	bne.n	8005a36 <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	22ff      	movs	r2, #255	; 0xff
 8005a3c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40002800 	.word	0x40002800
 8005a4c:	080106c4 	.word	0x080106c4

08005a50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a50:	b590      	push	{r4, r7, lr}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <HAL_RTC_SetTime+0x26>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d004      	beq.n	8005a76 <HAL_RTC_SetTime+0x26>
 8005a6c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8005a70:	489a      	ldr	r0, [pc, #616]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005a72:	f7fb fa22 	bl	8000eba <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a7e:	d00d      	beq.n	8005a9c <HAL_RTC_SetTime+0x4c>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a88:	d008      	beq.n	8005a9c <HAL_RTC_SetTime+0x4c>
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <HAL_RTC_SetTime+0x4c>
 8005a92:	f240 21b5 	movw	r1, #693	; 0x2b5
 8005a96:	4891      	ldr	r0, [pc, #580]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005a98:	f7fb fa0f 	bl	8000eba <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d009      	beq.n	8005ab8 <HAL_RTC_SetTime+0x68>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aac:	d004      	beq.n	8005ab8 <HAL_RTC_SetTime+0x68>
 8005aae:	f240 21b6 	movw	r1, #694	; 0x2b6
 8005ab2:	488a      	ldr	r0, [pc, #552]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005ab4:	f7fb fa01 	bl	8000eba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	7f1b      	ldrb	r3, [r3, #28]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_RTC_SetTime+0x74>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e107      	b.n	8005cd4 <HAL_RTC_SetTime+0x284>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2202      	movs	r2, #2
 8005ace:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d15c      	bne.n	8005b90 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01a      	beq.n	8005b1a <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_RTC_SetTime+0xa4>
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b0c      	cmp	r3, #12
 8005af2:	d904      	bls.n	8005afe <HAL_RTC_SetTime+0xae>
 8005af4:	f240 21c1 	movw	r1, #705	; 0x2c1
 8005af8:	4878      	ldr	r0, [pc, #480]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005afa:	f7fb f9de 	bl	8000eba <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	78db      	ldrb	r3, [r3, #3]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d015      	beq.n	8005b32 <HAL_RTC_SetTime+0xe2>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	78db      	ldrb	r3, [r3, #3]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d011      	beq.n	8005b32 <HAL_RTC_SetTime+0xe2>
 8005b0e:	f240 21c2 	movw	r1, #706	; 0x2c2
 8005b12:	4872      	ldr	r0, [pc, #456]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005b14:	f7fb f9d1 	bl	8000eba <assert_failed>
 8005b18:	e00b      	b.n	8005b32 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b17      	cmp	r3, #23
 8005b26:	d904      	bls.n	8005b32 <HAL_RTC_SetTime+0xe2>
 8005b28:	f240 21c7 	movw	r1, #711	; 0x2c7
 8005b2c:	486b      	ldr	r0, [pc, #428]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005b2e:	f7fb f9c4 	bl	8000eba <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	785b      	ldrb	r3, [r3, #1]
 8005b36:	2b3b      	cmp	r3, #59	; 0x3b
 8005b38:	d904      	bls.n	8005b44 <HAL_RTC_SetTime+0xf4>
 8005b3a:	f240 21c9 	movw	r1, #713	; 0x2c9
 8005b3e:	4867      	ldr	r0, [pc, #412]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005b40:	f7fb f9bb 	bl	8000eba <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	789b      	ldrb	r3, [r3, #2]
 8005b48:	2b3b      	cmp	r3, #59	; 0x3b
 8005b4a:	d904      	bls.n	8005b56 <HAL_RTC_SetTime+0x106>
 8005b4c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005b50:	4862      	ldr	r0, [pc, #392]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005b52:	f7fb f9b2 	bl	8000eba <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fa50 	bl	8006000 <RTC_ByteToBcd2>
 8005b60:	4603      	mov	r3, r0
 8005b62:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fa49 	bl	8006000 <RTC_ByteToBcd2>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b72:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	789b      	ldrb	r3, [r3, #2]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fa41 	bl	8006000 <RTC_ByteToBcd2>
 8005b7e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b80:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	78db      	ldrb	r3, [r3, #3]
 8005b88:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	e062      	b.n	8005c56 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d022      	beq.n	8005be4 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fa49 	bl	800603a <RTC_Bcd2ToByte>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d007      	beq.n	8005bbe <HAL_RTC_SetTime+0x16e>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fa41 	bl	800603a <RTC_Bcd2ToByte>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b0c      	cmp	r3, #12
 8005bbc:	d904      	bls.n	8005bc8 <HAL_RTC_SetTime+0x178>
 8005bbe:	f240 21d5 	movw	r1, #725	; 0x2d5
 8005bc2:	4846      	ldr	r0, [pc, #280]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005bc4:	f7fb f979 	bl	8000eba <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	78db      	ldrb	r3, [r3, #3]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d019      	beq.n	8005c04 <HAL_RTC_SetTime+0x1b4>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	78db      	ldrb	r3, [r3, #3]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d015      	beq.n	8005c04 <HAL_RTC_SetTime+0x1b4>
 8005bd8:	f240 21d6 	movw	r1, #726	; 0x2d6
 8005bdc:	483f      	ldr	r0, [pc, #252]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005bde:	f7fb f96c 	bl	8000eba <assert_failed>
 8005be2:	e00f      	b.n	8005c04 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2200      	movs	r2, #0
 8005be8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fa23 	bl	800603a <RTC_Bcd2ToByte>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b17      	cmp	r3, #23
 8005bf8:	d904      	bls.n	8005c04 <HAL_RTC_SetTime+0x1b4>
 8005bfa:	f240 21db 	movw	r1, #731	; 0x2db
 8005bfe:	4837      	ldr	r0, [pc, #220]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005c00:	f7fb f95b 	bl	8000eba <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fa16 	bl	800603a <RTC_Bcd2ToByte>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b3b      	cmp	r3, #59	; 0x3b
 8005c12:	d904      	bls.n	8005c1e <HAL_RTC_SetTime+0x1ce>
 8005c14:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005c18:	4830      	ldr	r0, [pc, #192]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005c1a:	f7fb f94e 	bl	8000eba <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	789b      	ldrb	r3, [r3, #2]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fa09 	bl	800603a <RTC_Bcd2ToByte>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b3b      	cmp	r3, #59	; 0x3b
 8005c2c:	d904      	bls.n	8005c38 <HAL_RTC_SetTime+0x1e8>
 8005c2e:	f240 21de 	movw	r1, #734	; 0x2de
 8005c32:	482a      	ldr	r0, [pc, #168]	; (8005cdc <HAL_RTC_SetTime+0x28c>)
 8005c34:	f7fb f941 	bl	8000eba <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c44:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c4a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	78db      	ldrb	r3, [r3, #3]
 8005c50:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	22ca      	movs	r2, #202	; 0xca
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2253      	movs	r2, #83	; 0x53
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f96e 	bl	8005f48 <RTC_EnterInitMode>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d120      	bne.n	8005cb8 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c80:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c84:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c94:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6899      	ldr	r1, [r3, #8]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f981 	bl	8005fb6 <RTC_ExitInitMode>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005cb8:	7cfb      	ldrb	r3, [r7, #19]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d102      	bne.n	8005cc4 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	22ff      	movs	r2, #255	; 0xff
 8005cca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	771a      	strb	r2, [r3, #28]

  return status;
 8005cd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd90      	pop	{r4, r7, pc}
 8005cdc:	080106c4 	.word	0x080106c4

08005ce0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ce0:	b590      	push	{r4, r7, lr}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d007      	beq.n	8005d06 <HAL_RTC_SetDate+0x26>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d004      	beq.n	8005d06 <HAL_RTC_SetDate+0x26>
 8005cfc:	f240 3153 	movw	r1, #851	; 0x353
 8005d00:	487c      	ldr	r0, [pc, #496]	; (8005ef4 <HAL_RTC_SetDate+0x214>)
 8005d02:	f7fb f8da 	bl	8000eba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	7f1b      	ldrb	r3, [r3, #28]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <HAL_RTC_SetDate+0x32>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e0ec      	b.n	8005eec <HAL_RTC_SetDate+0x20c>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10e      	bne.n	8005d42 <HAL_RTC_SetDate+0x62>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	f023 0310 	bic.w	r3, r3, #16
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	330a      	adds	r3, #10
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d01c      	beq.n	8005d84 <HAL_RTC_SetDate+0xa4>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d018      	beq.n	8005d84 <HAL_RTC_SetDate+0xa4>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d014      	beq.n	8005d84 <HAL_RTC_SetDate+0xa4>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d010      	beq.n	8005d84 <HAL_RTC_SetDate+0xa4>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b05      	cmp	r3, #5
 8005d68:	d00c      	beq.n	8005d84 <HAL_RTC_SetDate+0xa4>
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b06      	cmp	r3, #6
 8005d70:	d008      	beq.n	8005d84 <HAL_RTC_SetDate+0xa4>
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b07      	cmp	r3, #7
 8005d78:	d004      	beq.n	8005d84 <HAL_RTC_SetDate+0xa4>
 8005d7a:	f240 315f 	movw	r1, #863	; 0x35f
 8005d7e:	485d      	ldr	r0, [pc, #372]	; (8005ef4 <HAL_RTC_SetDate+0x214>)
 8005d80:	f7fb f89b 	bl	8000eba <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d13f      	bne.n	8005e0a <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	78db      	ldrb	r3, [r3, #3]
 8005d8e:	2b63      	cmp	r3, #99	; 0x63
 8005d90:	d904      	bls.n	8005d9c <HAL_RTC_SetDate+0xbc>
 8005d92:	f240 3163 	movw	r1, #867	; 0x363
 8005d96:	4857      	ldr	r0, [pc, #348]	; (8005ef4 <HAL_RTC_SetDate+0x214>)
 8005d98:	f7fb f88f 	bl	8000eba <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_RTC_SetDate+0xcc>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	2b0c      	cmp	r3, #12
 8005daa:	d904      	bls.n	8005db6 <HAL_RTC_SetDate+0xd6>
 8005dac:	f44f 7159 	mov.w	r1, #868	; 0x364
 8005db0:	4850      	ldr	r0, [pc, #320]	; (8005ef4 <HAL_RTC_SetDate+0x214>)
 8005db2:	f7fb f882 	bl	8000eba <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	789b      	ldrb	r3, [r3, #2]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_RTC_SetDate+0xe6>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	789b      	ldrb	r3, [r3, #2]
 8005dc2:	2b1f      	cmp	r3, #31
 8005dc4:	d904      	bls.n	8005dd0 <HAL_RTC_SetDate+0xf0>
 8005dc6:	f240 3165 	movw	r1, #869	; 0x365
 8005dca:	484a      	ldr	r0, [pc, #296]	; (8005ef4 <HAL_RTC_SetDate+0x214>)
 8005dcc:	f7fb f875 	bl	8000eba <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	78db      	ldrb	r3, [r3, #3]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 f913 	bl	8006000 <RTC_ByteToBcd2>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 f90c 	bl	8006000 <RTC_ByteToBcd2>
 8005de8:	4603      	mov	r3, r0
 8005dea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005dec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	789b      	ldrb	r3, [r3, #2]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 f904 	bl	8006000 <RTC_ByteToBcd2>
 8005df8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dfa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e045      	b.n	8005e96 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	78db      	ldrb	r3, [r3, #3]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 f913 	bl	800603a <RTC_Bcd2ToByte>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b63      	cmp	r3, #99	; 0x63
 8005e18:	d904      	bls.n	8005e24 <HAL_RTC_SetDate+0x144>
 8005e1a:	f240 316e 	movw	r1, #878	; 0x36e
 8005e1e:	4835      	ldr	r0, [pc, #212]	; (8005ef4 <HAL_RTC_SetDate+0x214>)
 8005e20:	f7fb f84b 	bl	8000eba <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 f906 	bl	800603a <RTC_Bcd2ToByte>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <HAL_RTC_SetDate+0x164>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 f8fe 	bl	800603a <RTC_Bcd2ToByte>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	d904      	bls.n	8005e4e <HAL_RTC_SetDate+0x16e>
 8005e44:	f240 316f 	movw	r1, #879	; 0x36f
 8005e48:	482a      	ldr	r0, [pc, #168]	; (8005ef4 <HAL_RTC_SetDate+0x214>)
 8005e4a:	f7fb f836 	bl	8000eba <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	789b      	ldrb	r3, [r3, #2]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 f8f1 	bl	800603a <RTC_Bcd2ToByte>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <HAL_RTC_SetDate+0x18e>
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	789b      	ldrb	r3, [r3, #2]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 f8e9 	bl	800603a <RTC_Bcd2ToByte>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b1f      	cmp	r3, #31
 8005e6c:	d904      	bls.n	8005e78 <HAL_RTC_SetDate+0x198>
 8005e6e:	f44f 715c 	mov.w	r1, #880	; 0x370
 8005e72:	4820      	ldr	r0, [pc, #128]	; (8005ef4 <HAL_RTC_SetDate+0x214>)
 8005e74:	f7fb f821 	bl	8000eba <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	78db      	ldrb	r3, [r3, #3]
 8005e7c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	785b      	ldrb	r3, [r3, #1]
 8005e82:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e84:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e8a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	22ca      	movs	r2, #202	; 0xca
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2253      	movs	r2, #83	; 0x53
 8005ea4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 f84e 	bl	8005f48 <RTC_EnterInitMode>
 8005eac:	4603      	mov	r3, r0
 8005eae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005eb0:	7cfb      	ldrb	r3, [r7, #19]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10c      	bne.n	8005ed0 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ec0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ec4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 f875 	bl	8005fb6 <RTC_ExitInitMode>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	22ff      	movs	r2, #255	; 0xff
 8005ee2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	771a      	strb	r2, [r3, #28]

  return status;
 8005eea:	7cfb      	ldrb	r3, [r7, #19]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd90      	pop	{r4, r7, pc}
 8005ef4:	080106c4 	.word	0x080106c4

08005ef8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f12:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f14:	f7fc f800 	bl	8001f18 <HAL_GetTick>
 8005f18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f1a:	e009      	b.n	8005f30 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f1c:	f7fb fffc 	bl	8001f18 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f2a:	d901      	bls.n	8005f30 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e007      	b.n	8005f40 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0ee      	beq.n	8005f1c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d122      	bne.n	8005fac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f76:	f7fb ffcf 	bl	8001f18 <HAL_GetTick>
 8005f7a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f7c:	e00c      	b.n	8005f98 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f7e:	f7fb ffcb 	bl	8001f18 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f8c:	d904      	bls.n	8005f98 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2204      	movs	r2, #4
 8005f92:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d102      	bne.n	8005fac <RTC_EnterInitMode+0x64>
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d1e8      	bne.n	8005f7e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fd0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ff89 	bl	8005ef8 <HAL_RTC_WaitForSynchro>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2204      	movs	r2, #4
 8005ff0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800600e:	e005      	b.n	800601c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	3301      	adds	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	3b0a      	subs	r3, #10
 800601a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	2b09      	cmp	r3, #9
 8006020:	d8f6      	bhi.n	8006010 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	b2da      	uxtb	r2, r3
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	4313      	orrs	r3, r2
 800602c:	b2db      	uxtb	r3, r3
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	4603      	mov	r3, r0
 8006042:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	091b      	lsrs	r3, r3, #4
 800604c:	b2db      	uxtb	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	0092      	lsls	r2, r2, #2
 8006052:	4413      	add	r3, r2
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	b2da      	uxtb	r2, r3
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	4413      	add	r3, r2
 8006064:	b2db      	uxtb	r3, r3
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e18c      	b.n	80063a0 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a75      	ldr	r2, [pc, #468]	; (8006260 <HAL_SPI_Init+0x1ec>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d018      	beq.n	80060c2 <HAL_SPI_Init+0x4e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a73      	ldr	r2, [pc, #460]	; (8006264 <HAL_SPI_Init+0x1f0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d013      	beq.n	80060c2 <HAL_SPI_Init+0x4e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a72      	ldr	r2, [pc, #456]	; (8006268 <HAL_SPI_Init+0x1f4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00e      	beq.n	80060c2 <HAL_SPI_Init+0x4e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a70      	ldr	r2, [pc, #448]	; (800626c <HAL_SPI_Init+0x1f8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d009      	beq.n	80060c2 <HAL_SPI_Init+0x4e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a6f      	ldr	r2, [pc, #444]	; (8006270 <HAL_SPI_Init+0x1fc>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d004      	beq.n	80060c2 <HAL_SPI_Init+0x4e>
 80060b8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060bc:	486d      	ldr	r0, [pc, #436]	; (8006274 <HAL_SPI_Init+0x200>)
 80060be:	f7fa fefc 	bl	8000eba <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <HAL_SPI_Init+0x6a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060d2:	d004      	beq.n	80060de <HAL_SPI_Init+0x6a>
 80060d4:	f240 1141 	movw	r1, #321	; 0x141
 80060d8:	4866      	ldr	r0, [pc, #408]	; (8006274 <HAL_SPI_Init+0x200>)
 80060da:	f7fa feee 	bl	8000eba <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00e      	beq.n	8006104 <HAL_SPI_Init+0x90>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ee:	d009      	beq.n	8006104 <HAL_SPI_Init+0x90>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f8:	d004      	beq.n	8006104 <HAL_SPI_Init+0x90>
 80060fa:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80060fe:	485d      	ldr	r0, [pc, #372]	; (8006274 <HAL_SPI_Init+0x200>)
 8006100:	f7fa fedb 	bl	8000eba <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800610c:	d008      	beq.n	8006120 <HAL_SPI_Init+0xac>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d004      	beq.n	8006120 <HAL_SPI_Init+0xac>
 8006116:	f240 1143 	movw	r1, #323	; 0x143
 800611a:	4856      	ldr	r0, [pc, #344]	; (8006274 <HAL_SPI_Init+0x200>)
 800611c:	f7fa fecd 	bl	8000eba <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006128:	d00d      	beq.n	8006146 <HAL_SPI_Init+0xd2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <HAL_SPI_Init+0xd2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800613a:	d004      	beq.n	8006146 <HAL_SPI_Init+0xd2>
 800613c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006140:	484c      	ldr	r0, [pc, #304]	; (8006274 <HAL_SPI_Init+0x200>)
 8006142:	f7fa feba 	bl	8000eba <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d020      	beq.n	8006190 <HAL_SPI_Init+0x11c>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	2b08      	cmp	r3, #8
 8006154:	d01c      	beq.n	8006190 <HAL_SPI_Init+0x11c>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	2b10      	cmp	r3, #16
 800615c:	d018      	beq.n	8006190 <HAL_SPI_Init+0x11c>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	2b18      	cmp	r3, #24
 8006164:	d014      	beq.n	8006190 <HAL_SPI_Init+0x11c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	2b20      	cmp	r3, #32
 800616c:	d010      	beq.n	8006190 <HAL_SPI_Init+0x11c>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	2b28      	cmp	r3, #40	; 0x28
 8006174:	d00c      	beq.n	8006190 <HAL_SPI_Init+0x11c>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	2b30      	cmp	r3, #48	; 0x30
 800617c:	d008      	beq.n	8006190 <HAL_SPI_Init+0x11c>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	2b38      	cmp	r3, #56	; 0x38
 8006184:	d004      	beq.n	8006190 <HAL_SPI_Init+0x11c>
 8006186:	f240 1145 	movw	r1, #325	; 0x145
 800618a:	483a      	ldr	r0, [pc, #232]	; (8006274 <HAL_SPI_Init+0x200>)
 800618c:	f7fa fe95 	bl	8000eba <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <HAL_SPI_Init+0x136>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	2b80      	cmp	r3, #128	; 0x80
 800619e:	d004      	beq.n	80061aa <HAL_SPI_Init+0x136>
 80061a0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80061a4:	4833      	ldr	r0, [pc, #204]	; (8006274 <HAL_SPI_Init+0x200>)
 80061a6:	f7fa fe88 	bl	8000eba <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d008      	beq.n	80061c4 <HAL_SPI_Init+0x150>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	2b10      	cmp	r3, #16
 80061b8:	d004      	beq.n	80061c4 <HAL_SPI_Init+0x150>
 80061ba:	f240 1147 	movw	r1, #327	; 0x147
 80061be:	482d      	ldr	r0, [pc, #180]	; (8006274 <HAL_SPI_Init+0x200>)
 80061c0:	f7fa fe7b 	bl	8000eba <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d155      	bne.n	8006278 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d008      	beq.n	80061e6 <HAL_SPI_Init+0x172>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d004      	beq.n	80061e6 <HAL_SPI_Init+0x172>
 80061dc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80061e0:	4824      	ldr	r0, [pc, #144]	; (8006274 <HAL_SPI_Init+0x200>)
 80061e2:	f7fa fe6a 	bl	8000eba <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d008      	beq.n	8006200 <HAL_SPI_Init+0x18c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d004      	beq.n	8006200 <HAL_SPI_Init+0x18c>
 80061f6:	f240 114b 	movw	r1, #331	; 0x14b
 80061fa:	481e      	ldr	r0, [pc, #120]	; (8006274 <HAL_SPI_Init+0x200>)
 80061fc:	f7fa fe5d 	bl	8000eba <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006208:	d125      	bne.n	8006256 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d05d      	beq.n	80062ce <HAL_SPI_Init+0x25a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	2b08      	cmp	r3, #8
 8006218:	d059      	beq.n	80062ce <HAL_SPI_Init+0x25a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	2b10      	cmp	r3, #16
 8006220:	d055      	beq.n	80062ce <HAL_SPI_Init+0x25a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	2b18      	cmp	r3, #24
 8006228:	d051      	beq.n	80062ce <HAL_SPI_Init+0x25a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	2b20      	cmp	r3, #32
 8006230:	d04d      	beq.n	80062ce <HAL_SPI_Init+0x25a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	2b28      	cmp	r3, #40	; 0x28
 8006238:	d049      	beq.n	80062ce <HAL_SPI_Init+0x25a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	2b30      	cmp	r3, #48	; 0x30
 8006240:	d045      	beq.n	80062ce <HAL_SPI_Init+0x25a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	2b38      	cmp	r3, #56	; 0x38
 8006248:	d041      	beq.n	80062ce <HAL_SPI_Init+0x25a>
 800624a:	f240 114f 	movw	r1, #335	; 0x14f
 800624e:	4809      	ldr	r0, [pc, #36]	; (8006274 <HAL_SPI_Init+0x200>)
 8006250:	f7fa fe33 	bl	8000eba <assert_failed>
 8006254:	e03b      	b.n	80062ce <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	61da      	str	r2, [r3, #28]
 800625c:	e037      	b.n	80062ce <HAL_SPI_Init+0x25a>
 800625e:	bf00      	nop
 8006260:	40013000 	.word	0x40013000
 8006264:	40003800 	.word	0x40003800
 8006268:	40003c00 	.word	0x40003c00
 800626c:	40013400 	.word	0x40013400
 8006270:	40015000 	.word	0x40015000
 8006274:	080106fc 	.word	0x080106fc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d020      	beq.n	80062c2 <HAL_SPI_Init+0x24e>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	2b08      	cmp	r3, #8
 8006286:	d01c      	beq.n	80062c2 <HAL_SPI_Init+0x24e>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	2b10      	cmp	r3, #16
 800628e:	d018      	beq.n	80062c2 <HAL_SPI_Init+0x24e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	2b18      	cmp	r3, #24
 8006296:	d014      	beq.n	80062c2 <HAL_SPI_Init+0x24e>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	2b20      	cmp	r3, #32
 800629e:	d010      	beq.n	80062c2 <HAL_SPI_Init+0x24e>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	2b28      	cmp	r3, #40	; 0x28
 80062a6:	d00c      	beq.n	80062c2 <HAL_SPI_Init+0x24e>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	2b30      	cmp	r3, #48	; 0x30
 80062ae:	d008      	beq.n	80062c2 <HAL_SPI_Init+0x24e>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	2b38      	cmp	r3, #56	; 0x38
 80062b6:	d004      	beq.n	80062c2 <HAL_SPI_Init+0x24e>
 80062b8:	f240 1159 	movw	r1, #345	; 0x159
 80062bc:	483a      	ldr	r0, [pc, #232]	; (80063a8 <HAL_SPI_Init+0x334>)
 80062be:	f7fa fdfc 	bl	8000eba <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d106      	bne.n	80062ee <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fa fead 	bl	8001048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006304:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	ea42 0103 	orr.w	r1, r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	0c1b      	lsrs	r3, r3, #16
 800636c:	f003 0104 	and.w	r1, r3, #4
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	f003 0210 	and.w	r2, r3, #16
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69da      	ldr	r2, [r3, #28]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800638e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	080106fc 	.word	0x080106fc

080063ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d009      	beq.n	80063dc <HAL_SPI_Transmit+0x30>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d0:	d004      	beq.n	80063dc <HAL_SPI_Transmit+0x30>
 80063d2:	f44f 7142 	mov.w	r1, #776	; 0x308
 80063d6:	4880      	ldr	r0, [pc, #512]	; (80065d8 <HAL_SPI_Transmit+0x22c>)
 80063d8:	f7fa fd6f 	bl	8000eba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_SPI_Transmit+0x3e>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e128      	b.n	800663c <HAL_SPI_Transmit+0x290>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063f2:	f7fb fd91 	bl	8001f18 <HAL_GetTick>
 80063f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063f8:	88fb      	ldrh	r3, [r7, #6]
 80063fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	d002      	beq.n	800640e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006408:	2302      	movs	r3, #2
 800640a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800640c:	e10d      	b.n	800662a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_SPI_Transmit+0x6e>
 8006414:	88fb      	ldrh	r3, [r7, #6]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d102      	bne.n	8006420 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800641e:	e104      	b.n	800662a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2203      	movs	r2, #3
 8006424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	88fa      	ldrh	r2, [r7, #6]
 800643e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006466:	d10f      	bne.n	8006488 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006476:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006486:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006492:	2b40      	cmp	r3, #64	; 0x40
 8006494:	d007      	beq.n	80064a6 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ae:	d14b      	bne.n	8006548 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <HAL_SPI_Transmit+0x112>
 80064b8:	8afb      	ldrh	r3, [r7, #22]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d13e      	bne.n	800653c <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	881a      	ldrh	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	1c9a      	adds	r2, r3, #2
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064e2:	e02b      	b.n	800653c <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d112      	bne.n	8006518 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	881a      	ldrh	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	1c9a      	adds	r2, r3, #2
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	86da      	strh	r2, [r3, #54]	; 0x36
 8006516:	e011      	b.n	800653c <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006518:	f7fb fcfe 	bl	8001f18 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d803      	bhi.n	8006530 <HAL_SPI_Transmit+0x184>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652e:	d102      	bne.n	8006536 <HAL_SPI_Transmit+0x18a>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d102      	bne.n	800653c <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	77fb      	strb	r3, [r7, #31]
          goto error;
 800653a:	e076      	b.n	800662a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1ce      	bne.n	80064e4 <HAL_SPI_Transmit+0x138>
 8006546:	e04e      	b.n	80065e6 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <HAL_SPI_Transmit+0x1aa>
 8006550:	8afb      	ldrh	r3, [r7, #22]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d142      	bne.n	80065dc <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	330c      	adds	r3, #12
 8006560:	7812      	ldrb	r2, [r2, #0]
 8006562:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800657c:	e02e      	b.n	80065dc <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b02      	cmp	r3, #2
 800658a:	d113      	bne.n	80065b4 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	330c      	adds	r3, #12
 8006596:	7812      	ldrb	r2, [r2, #0]
 8006598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80065b2:	e013      	b.n	80065dc <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065b4:	f7fb fcb0 	bl	8001f18 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d803      	bhi.n	80065cc <HAL_SPI_Transmit+0x220>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d102      	bne.n	80065d2 <HAL_SPI_Transmit+0x226>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d104      	bne.n	80065dc <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065d6:	e028      	b.n	800662a <HAL_SPI_Transmit+0x27e>
 80065d8:	080106fc 	.word	0x080106fc
    while (hspi->TxXferCount > 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1cb      	bne.n	800657e <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 f8b2 	bl	8006754 <SPI_EndRxTxTransaction>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006604:	2300      	movs	r3, #0
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	77fb      	strb	r3, [r7, #31]
 8006626:	e000      	b.n	800662a <HAL_SPI_Transmit+0x27e>
  }

error:
 8006628:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800663a:	7ffb      	ldrb	r3, [r7, #31]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3720      	adds	r7, #32
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b088      	sub	sp, #32
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	4613      	mov	r3, r2
 8006652:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006654:	f7fb fc60 	bl	8001f18 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	1a9b      	subs	r3, r3, r2
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	4413      	add	r3, r2
 8006662:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006664:	f7fb fc58 	bl	8001f18 <HAL_GetTick>
 8006668:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800666a:	4b39      	ldr	r3, [pc, #228]	; (8006750 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	015b      	lsls	r3, r3, #5
 8006670:	0d1b      	lsrs	r3, r3, #20
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	fb02 f303 	mul.w	r3, r2, r3
 8006678:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800667a:	e054      	b.n	8006726 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006682:	d050      	beq.n	8006726 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006684:	f7fb fc48 	bl	8001f18 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	429a      	cmp	r2, r3
 8006692:	d902      	bls.n	800669a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d13d      	bne.n	8006716 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066b2:	d111      	bne.n	80066d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066bc:	d004      	beq.n	80066c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c6:	d107      	bne.n	80066d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e0:	d10f      	bne.n	8006702 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006700:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e017      	b.n	8006746 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	3b01      	subs	r3, #1
 8006724:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4013      	ands	r3, r2
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	429a      	cmp	r2, r3
 8006734:	bf0c      	ite	eq
 8006736:	2301      	moveq	r3, #1
 8006738:	2300      	movne	r3, #0
 800673a:	b2db      	uxtb	r3, r3
 800673c:	461a      	mov	r2, r3
 800673e:	79fb      	ldrb	r3, [r7, #7]
 8006740:	429a      	cmp	r2, r3
 8006742:	d19b      	bne.n	800667c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3720      	adds	r7, #32
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	2000006c 	.word	0x2000006c

08006754 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af02      	add	r7, sp, #8
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006760:	4b1b      	ldr	r3, [pc, #108]	; (80067d0 <SPI_EndRxTxTransaction+0x7c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a1b      	ldr	r2, [pc, #108]	; (80067d4 <SPI_EndRxTxTransaction+0x80>)
 8006766:	fba2 2303 	umull	r2, r3, r2, r3
 800676a:	0d5b      	lsrs	r3, r3, #21
 800676c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006770:	fb02 f303 	mul.w	r3, r2, r3
 8006774:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800677e:	d112      	bne.n	80067a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2200      	movs	r2, #0
 8006788:	2180      	movs	r1, #128	; 0x80
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7ff ff5a 	bl	8006644 <SPI_WaitFlagStateUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d016      	beq.n	80067c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679a:	f043 0220 	orr.w	r2, r3, #32
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e00f      	b.n	80067c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	d0f2      	beq.n	80067a6 <SPI_EndRxTxTransaction+0x52>
 80067c0:	e000      	b.n	80067c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80067c2:	bf00      	nop
  }

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	2000006c 	.word	0x2000006c
 80067d4:	165e9f81 	.word	0x165e9f81

080067d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e0a7      	b.n	800693a <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a55      	ldr	r2, [pc, #340]	; (8006944 <HAL_TIM_Base_Init+0x16c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d027      	beq.n	8006844 <HAL_TIM_Base_Init+0x6c>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fc:	d022      	beq.n	8006844 <HAL_TIM_Base_Init+0x6c>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a51      	ldr	r2, [pc, #324]	; (8006948 <HAL_TIM_Base_Init+0x170>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d01d      	beq.n	8006844 <HAL_TIM_Base_Init+0x6c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a4f      	ldr	r2, [pc, #316]	; (800694c <HAL_TIM_Base_Init+0x174>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d018      	beq.n	8006844 <HAL_TIM_Base_Init+0x6c>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a4e      	ldr	r2, [pc, #312]	; (8006950 <HAL_TIM_Base_Init+0x178>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d013      	beq.n	8006844 <HAL_TIM_Base_Init+0x6c>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a4c      	ldr	r2, [pc, #304]	; (8006954 <HAL_TIM_Base_Init+0x17c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00e      	beq.n	8006844 <HAL_TIM_Base_Init+0x6c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a4b      	ldr	r2, [pc, #300]	; (8006958 <HAL_TIM_Base_Init+0x180>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d009      	beq.n	8006844 <HAL_TIM_Base_Init+0x6c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a49      	ldr	r2, [pc, #292]	; (800695c <HAL_TIM_Base_Init+0x184>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d004      	beq.n	8006844 <HAL_TIM_Base_Init+0x6c>
 800683a:	f240 1113 	movw	r1, #275	; 0x113
 800683e:	4848      	ldr	r0, [pc, #288]	; (8006960 <HAL_TIM_Base_Init+0x188>)
 8006840:	f7fa fb3b 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d014      	beq.n	8006876 <HAL_TIM_Base_Init+0x9e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	2b10      	cmp	r3, #16
 8006852:	d010      	beq.n	8006876 <HAL_TIM_Base_Init+0x9e>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	2b20      	cmp	r3, #32
 800685a:	d00c      	beq.n	8006876 <HAL_TIM_Base_Init+0x9e>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	2b40      	cmp	r3, #64	; 0x40
 8006862:	d008      	beq.n	8006876 <HAL_TIM_Base_Init+0x9e>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b60      	cmp	r3, #96	; 0x60
 800686a:	d004      	beq.n	8006876 <HAL_TIM_Base_Init+0x9e>
 800686c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006870:	483b      	ldr	r0, [pc, #236]	; (8006960 <HAL_TIM_Base_Init+0x188>)
 8006872:	f7fa fb22 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00e      	beq.n	800689c <HAL_TIM_Base_Init+0xc4>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006886:	d009      	beq.n	800689c <HAL_TIM_Base_Init+0xc4>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006890:	d004      	beq.n	800689c <HAL_TIM_Base_Init+0xc4>
 8006892:	f240 1115 	movw	r1, #277	; 0x115
 8006896:	4832      	ldr	r0, [pc, #200]	; (8006960 <HAL_TIM_Base_Init+0x188>)
 8006898:	f7fa fb0f 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d008      	beq.n	80068b6 <HAL_TIM_Base_Init+0xde>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	2b80      	cmp	r3, #128	; 0x80
 80068aa:	d004      	beq.n	80068b6 <HAL_TIM_Base_Init+0xde>
 80068ac:	f44f 718b 	mov.w	r1, #278	; 0x116
 80068b0:	482b      	ldr	r0, [pc, #172]	; (8006960 <HAL_TIM_Base_Init+0x188>)
 80068b2:	f7fa fb02 	bl	8000eba <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fb f994 	bl	8001bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3304      	adds	r3, #4
 80068e0:	4619      	mov	r1, r3
 80068e2:	4610      	mov	r0, r2
 80068e4:	f001 fb0a 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40014000 	.word	0x40014000
 8006958:	40014400 	.word	0x40014400
 800695c:	40014800 	.word	0x40014800
 8006960:	08010734 	.word	0x08010734

08006964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a3d      	ldr	r2, [pc, #244]	; (8006a68 <HAL_TIM_Base_Start_IT+0x104>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d027      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x62>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697e:	d022      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x62>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a39      	ldr	r2, [pc, #228]	; (8006a6c <HAL_TIM_Base_Start_IT+0x108>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01d      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x62>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a38      	ldr	r2, [pc, #224]	; (8006a70 <HAL_TIM_Base_Start_IT+0x10c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d018      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x62>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a36      	ldr	r2, [pc, #216]	; (8006a74 <HAL_TIM_Base_Start_IT+0x110>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d013      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x62>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a35      	ldr	r2, [pc, #212]	; (8006a78 <HAL_TIM_Base_Start_IT+0x114>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00e      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x62>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a33      	ldr	r2, [pc, #204]	; (8006a7c <HAL_TIM_Base_Start_IT+0x118>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d009      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x62>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a32      	ldr	r2, [pc, #200]	; (8006a80 <HAL_TIM_Base_Start_IT+0x11c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d004      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x62>
 80069bc:	f240 11cf 	movw	r1, #463	; 0x1cf
 80069c0:	4830      	ldr	r0, [pc, #192]	; (8006a84 <HAL_TIM_Base_Start_IT+0x120>)
 80069c2:	f7fa fa7a 	bl	8000eba <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d001      	beq.n	80069d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e044      	b.n	8006a60 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0201 	orr.w	r2, r2, #1
 80069ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1d      	ldr	r2, [pc, #116]	; (8006a68 <HAL_TIM_Base_Start_IT+0x104>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d018      	beq.n	8006a2a <HAL_TIM_Base_Start_IT+0xc6>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a00:	d013      	beq.n	8006a2a <HAL_TIM_Base_Start_IT+0xc6>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a19      	ldr	r2, [pc, #100]	; (8006a6c <HAL_TIM_Base_Start_IT+0x108>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00e      	beq.n	8006a2a <HAL_TIM_Base_Start_IT+0xc6>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a17      	ldr	r2, [pc, #92]	; (8006a70 <HAL_TIM_Base_Start_IT+0x10c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d009      	beq.n	8006a2a <HAL_TIM_Base_Start_IT+0xc6>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a16      	ldr	r2, [pc, #88]	; (8006a74 <HAL_TIM_Base_Start_IT+0x110>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d004      	beq.n	8006a2a <HAL_TIM_Base_Start_IT+0xc6>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a14      	ldr	r2, [pc, #80]	; (8006a78 <HAL_TIM_Base_Start_IT+0x114>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d111      	bne.n	8006a4e <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b06      	cmp	r3, #6
 8006a3a:	d010      	beq.n	8006a5e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4c:	e007      	b.n	8006a5e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0201 	orr.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40010000 	.word	0x40010000
 8006a6c:	40000400 	.word	0x40000400
 8006a70:	40000800 	.word	0x40000800
 8006a74:	40000c00 	.word	0x40000c00
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40014400 	.word	0x40014400
 8006a80:	40014800 	.word	0x40014800
 8006a84:	08010734 	.word	0x08010734

08006a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e0a7      	b.n	8006bea <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a55      	ldr	r2, [pc, #340]	; (8006bf4 <HAL_TIM_PWM_Init+0x16c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d027      	beq.n	8006af4 <HAL_TIM_PWM_Init+0x6c>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aac:	d022      	beq.n	8006af4 <HAL_TIM_PWM_Init+0x6c>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a51      	ldr	r2, [pc, #324]	; (8006bf8 <HAL_TIM_PWM_Init+0x170>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d01d      	beq.n	8006af4 <HAL_TIM_PWM_Init+0x6c>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a4f      	ldr	r2, [pc, #316]	; (8006bfc <HAL_TIM_PWM_Init+0x174>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d018      	beq.n	8006af4 <HAL_TIM_PWM_Init+0x6c>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a4e      	ldr	r2, [pc, #312]	; (8006c00 <HAL_TIM_PWM_Init+0x178>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d013      	beq.n	8006af4 <HAL_TIM_PWM_Init+0x6c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a4c      	ldr	r2, [pc, #304]	; (8006c04 <HAL_TIM_PWM_Init+0x17c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00e      	beq.n	8006af4 <HAL_TIM_PWM_Init+0x6c>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a4b      	ldr	r2, [pc, #300]	; (8006c08 <HAL_TIM_PWM_Init+0x180>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d009      	beq.n	8006af4 <HAL_TIM_PWM_Init+0x6c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a49      	ldr	r2, [pc, #292]	; (8006c0c <HAL_TIM_PWM_Init+0x184>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d004      	beq.n	8006af4 <HAL_TIM_PWM_Init+0x6c>
 8006aea:	f240 5129 	movw	r1, #1321	; 0x529
 8006aee:	4848      	ldr	r0, [pc, #288]	; (8006c10 <HAL_TIM_PWM_Init+0x188>)
 8006af0:	f7fa f9e3 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d014      	beq.n	8006b26 <HAL_TIM_PWM_Init+0x9e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	2b10      	cmp	r3, #16
 8006b02:	d010      	beq.n	8006b26 <HAL_TIM_PWM_Init+0x9e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d00c      	beq.n	8006b26 <HAL_TIM_PWM_Init+0x9e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	2b40      	cmp	r3, #64	; 0x40
 8006b12:	d008      	beq.n	8006b26 <HAL_TIM_PWM_Init+0x9e>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b60      	cmp	r3, #96	; 0x60
 8006b1a:	d004      	beq.n	8006b26 <HAL_TIM_PWM_Init+0x9e>
 8006b1c:	f240 512a 	movw	r1, #1322	; 0x52a
 8006b20:	483b      	ldr	r0, [pc, #236]	; (8006c10 <HAL_TIM_PWM_Init+0x188>)
 8006b22:	f7fa f9ca 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00e      	beq.n	8006b4c <HAL_TIM_PWM_Init+0xc4>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b36:	d009      	beq.n	8006b4c <HAL_TIM_PWM_Init+0xc4>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b40:	d004      	beq.n	8006b4c <HAL_TIM_PWM_Init+0xc4>
 8006b42:	f240 512b 	movw	r1, #1323	; 0x52b
 8006b46:	4832      	ldr	r0, [pc, #200]	; (8006c10 <HAL_TIM_PWM_Init+0x188>)
 8006b48:	f7fa f9b7 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d008      	beq.n	8006b66 <HAL_TIM_PWM_Init+0xde>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	2b80      	cmp	r3, #128	; 0x80
 8006b5a:	d004      	beq.n	8006b66 <HAL_TIM_PWM_Init+0xde>
 8006b5c:	f240 512c 	movw	r1, #1324	; 0x52c
 8006b60:	482b      	ldr	r0, [pc, #172]	; (8006c10 <HAL_TIM_PWM_Init+0x188>)
 8006b62:	f7fa f9aa 	bl	8000eba <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f84a 	bl	8006c14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	f001 f9b2 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40010000 	.word	0x40010000
 8006bf8:	40000400 	.word	0x40000400
 8006bfc:	40000800 	.word	0x40000800
 8006c00:	40000c00 	.word	0x40000c00
 8006c04:	40014000 	.word	0x40014000
 8006c08:	40014400 	.word	0x40014400
 8006c0c:	40014800 	.word	0x40014800
 8006c10:	08010734 	.word	0x08010734

08006c14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a8a      	ldr	r2, [pc, #552]	; (8006e60 <HAL_TIM_PWM_Start+0x238>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d10b      	bne.n	8006c54 <HAL_TIM_PWM_Start+0x2c>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d06c      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d069      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d066      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b0c      	cmp	r3, #12
 8006c52:	d063      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5c:	d10b      	bne.n	8006c76 <HAL_TIM_PWM_Start+0x4e>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d05b      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d058      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d055      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b0c      	cmp	r3, #12
 8006c74:	d052      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a7a      	ldr	r2, [pc, #488]	; (8006e64 <HAL_TIM_PWM_Start+0x23c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d10b      	bne.n	8006c98 <HAL_TIM_PWM_Start+0x70>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d04a      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d047      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d044      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b0c      	cmp	r3, #12
 8006c96:	d041      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a72      	ldr	r2, [pc, #456]	; (8006e68 <HAL_TIM_PWM_Start+0x240>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d10b      	bne.n	8006cba <HAL_TIM_PWM_Start+0x92>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d039      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d036      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d033      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b0c      	cmp	r3, #12
 8006cb8:	d030      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a6b      	ldr	r2, [pc, #428]	; (8006e6c <HAL_TIM_PWM_Start+0x244>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d10b      	bne.n	8006cdc <HAL_TIM_PWM_Start+0xb4>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d028      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d025      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d022      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b0c      	cmp	r3, #12
 8006cda:	d01f      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a63      	ldr	r2, [pc, #396]	; (8006e70 <HAL_TIM_PWM_Start+0x248>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d105      	bne.n	8006cf2 <HAL_TIM_PWM_Start+0xca>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d017      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d014      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a5f      	ldr	r2, [pc, #380]	; (8006e74 <HAL_TIM_PWM_Start+0x24c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d102      	bne.n	8006d02 <HAL_TIM_PWM_Start+0xda>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00c      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a5c      	ldr	r2, [pc, #368]	; (8006e78 <HAL_TIM_PWM_Start+0x250>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d102      	bne.n	8006d12 <HAL_TIM_PWM_Start+0xea>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xf4>
 8006d12:	f240 51af 	movw	r1, #1455	; 0x5af
 8006d16:	4859      	ldr	r0, [pc, #356]	; (8006e7c <HAL_TIM_PWM_Start+0x254>)
 8006d18:	f7fa f8cf 	bl	8000eba <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <HAL_TIM_PWM_Start+0x10e>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	bf14      	ite	ne
 8006d2e:	2301      	movne	r3, #1
 8006d30:	2300      	moveq	r3, #0
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	e022      	b.n	8006d7c <HAL_TIM_PWM_Start+0x154>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d109      	bne.n	8006d50 <HAL_TIM_PWM_Start+0x128>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	bf14      	ite	ne
 8006d48:	2301      	movne	r3, #1
 8006d4a:	2300      	moveq	r3, #0
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	e015      	b.n	8006d7c <HAL_TIM_PWM_Start+0x154>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d109      	bne.n	8006d6a <HAL_TIM_PWM_Start+0x142>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	bf14      	ite	ne
 8006d62:	2301      	movne	r3, #1
 8006d64:	2300      	moveq	r3, #0
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	e008      	b.n	8006d7c <HAL_TIM_PWM_Start+0x154>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	bf14      	ite	ne
 8006d76:	2301      	movne	r3, #1
 8006d78:	2300      	moveq	r3, #0
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <HAL_TIM_PWM_Start+0x15c>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e068      	b.n	8006e56 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d104      	bne.n	8006d94 <HAL_TIM_PWM_Start+0x16c>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d92:	e013      	b.n	8006dbc <HAL_TIM_PWM_Start+0x194>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d104      	bne.n	8006da4 <HAL_TIM_PWM_Start+0x17c>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006da2:	e00b      	b.n	8006dbc <HAL_TIM_PWM_Start+0x194>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d104      	bne.n	8006db4 <HAL_TIM_PWM_Start+0x18c>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2202      	movs	r2, #2
 8006dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db2:	e003      	b.n	8006dbc <HAL_TIM_PWM_Start+0x194>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 fbc9 	bl	800855c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a24      	ldr	r2, [pc, #144]	; (8006e60 <HAL_TIM_PWM_Start+0x238>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d107      	bne.n	8006de4 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006de2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1d      	ldr	r2, [pc, #116]	; (8006e60 <HAL_TIM_PWM_Start+0x238>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d018      	beq.n	8006e20 <HAL_TIM_PWM_Start+0x1f8>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df6:	d013      	beq.n	8006e20 <HAL_TIM_PWM_Start+0x1f8>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a19      	ldr	r2, [pc, #100]	; (8006e64 <HAL_TIM_PWM_Start+0x23c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00e      	beq.n	8006e20 <HAL_TIM_PWM_Start+0x1f8>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <HAL_TIM_PWM_Start+0x240>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d009      	beq.n	8006e20 <HAL_TIM_PWM_Start+0x1f8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a16      	ldr	r2, [pc, #88]	; (8006e6c <HAL_TIM_PWM_Start+0x244>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <HAL_TIM_PWM_Start+0x1f8>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a15      	ldr	r2, [pc, #84]	; (8006e70 <HAL_TIM_PWM_Start+0x248>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d111      	bne.n	8006e44 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b06      	cmp	r3, #6
 8006e30:	d010      	beq.n	8006e54 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f042 0201 	orr.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e42:	e007      	b.n	8006e54 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	40010000 	.word	0x40010000
 8006e64:	40000400 	.word	0x40000400
 8006e68:	40000800 	.word	0x40000800
 8006e6c:	40000c00 	.word	0x40000c00
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40014400 	.word	0x40014400
 8006e78:	40014800 	.word	0x40014800
 8006e7c:	08010734 	.word	0x08010734

08006e80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e18a      	b.n	80071aa <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a78      	ldr	r2, [pc, #480]	; (800707c <HAL_TIM_Encoder_Init+0x1fc>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d01d      	beq.n	8006eda <HAL_TIM_Encoder_Init+0x5a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea6:	d018      	beq.n	8006eda <HAL_TIM_Encoder_Init+0x5a>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a74      	ldr	r2, [pc, #464]	; (8007080 <HAL_TIM_Encoder_Init+0x200>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <HAL_TIM_Encoder_Init+0x5a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a73      	ldr	r2, [pc, #460]	; (8007084 <HAL_TIM_Encoder_Init+0x204>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00e      	beq.n	8006eda <HAL_TIM_Encoder_Init+0x5a>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a71      	ldr	r2, [pc, #452]	; (8007088 <HAL_TIM_Encoder_Init+0x208>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d009      	beq.n	8006eda <HAL_TIM_Encoder_Init+0x5a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a70      	ldr	r2, [pc, #448]	; (800708c <HAL_TIM_Encoder_Init+0x20c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <HAL_TIM_Encoder_Init+0x5a>
 8006ed0:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8006ed4:	486e      	ldr	r0, [pc, #440]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 8006ed6:	f7f9 fff0 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d014      	beq.n	8006f0c <HAL_TIM_Encoder_Init+0x8c>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b10      	cmp	r3, #16
 8006ee8:	d010      	beq.n	8006f0c <HAL_TIM_Encoder_Init+0x8c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d00c      	beq.n	8006f0c <HAL_TIM_Encoder_Init+0x8c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d008      	beq.n	8006f0c <HAL_TIM_Encoder_Init+0x8c>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	2b60      	cmp	r3, #96	; 0x60
 8006f00:	d004      	beq.n	8006f0c <HAL_TIM_Encoder_Init+0x8c>
 8006f02:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8006f06:	4862      	ldr	r0, [pc, #392]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 8006f08:	f7f9 ffd7 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00e      	beq.n	8006f32 <HAL_TIM_Encoder_Init+0xb2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1c:	d009      	beq.n	8006f32 <HAL_TIM_Encoder_Init+0xb2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f26:	d004      	beq.n	8006f32 <HAL_TIM_Encoder_Init+0xb2>
 8006f28:	f640 31d3 	movw	r1, #3027	; 0xbd3
 8006f2c:	4858      	ldr	r0, [pc, #352]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 8006f2e:	f7f9 ffc4 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d008      	beq.n	8006f4c <HAL_TIM_Encoder_Init+0xcc>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	2b80      	cmp	r3, #128	; 0x80
 8006f40:	d004      	beq.n	8006f4c <HAL_TIM_Encoder_Init+0xcc>
 8006f42:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8006f46:	4852      	ldr	r0, [pc, #328]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 8006f48:	f7f9 ffb7 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d00c      	beq.n	8006f6e <HAL_TIM_Encoder_Init+0xee>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d008      	beq.n	8006f6e <HAL_TIM_Encoder_Init+0xee>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d004      	beq.n	8006f6e <HAL_TIM_Encoder_Init+0xee>
 8006f64:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8006f68:	4849      	ldr	r0, [pc, #292]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 8006f6a:	f7f9 ffa6 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d00c      	beq.n	8006f90 <HAL_TIM_Encoder_Init+0x110>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d008      	beq.n	8006f90 <HAL_TIM_Encoder_Init+0x110>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d004      	beq.n	8006f90 <HAL_TIM_Encoder_Init+0x110>
 8006f86:	f640 31d6 	movw	r1, #3030	; 0xbd6
 8006f8a:	4841      	ldr	r0, [pc, #260]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 8006f8c:	f7f9 ff95 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d00c      	beq.n	8006fb2 <HAL_TIM_Encoder_Init+0x132>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d008      	beq.n	8006fb2 <HAL_TIM_Encoder_Init+0x132>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d004      	beq.n	8006fb2 <HAL_TIM_Encoder_Init+0x132>
 8006fa8:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8006fac:	4838      	ldr	r0, [pc, #224]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 8006fae:	f7f9 ff84 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d008      	beq.n	8006fcc <HAL_TIM_Encoder_Init+0x14c>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d004      	beq.n	8006fcc <HAL_TIM_Encoder_Init+0x14c>
 8006fc2:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8006fc6:	4832      	ldr	r0, [pc, #200]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 8006fc8:	f7f9 ff77 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d008      	beq.n	8006fe6 <HAL_TIM_Encoder_Init+0x166>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d004      	beq.n	8006fe6 <HAL_TIM_Encoder_Init+0x166>
 8006fdc:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8006fe0:	482b      	ldr	r0, [pc, #172]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 8006fe2:	f7f9 ff6a 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d010      	beq.n	8007010 <HAL_TIM_Encoder_Init+0x190>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d00c      	beq.n	8007010 <HAL_TIM_Encoder_Init+0x190>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	d008      	beq.n	8007010 <HAL_TIM_Encoder_Init+0x190>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	2b0c      	cmp	r3, #12
 8007004:	d004      	beq.n	8007010 <HAL_TIM_Encoder_Init+0x190>
 8007006:	f640 31da 	movw	r1, #3034	; 0xbda
 800700a:	4821      	ldr	r0, [pc, #132]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 800700c:	f7f9 ff55 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d010      	beq.n	800703a <HAL_TIM_Encoder_Init+0x1ba>
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	2b04      	cmp	r3, #4
 800701e:	d00c      	beq.n	800703a <HAL_TIM_Encoder_Init+0x1ba>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	2b08      	cmp	r3, #8
 8007026:	d008      	beq.n	800703a <HAL_TIM_Encoder_Init+0x1ba>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	2b0c      	cmp	r3, #12
 800702e:	d004      	beq.n	800703a <HAL_TIM_Encoder_Init+0x1ba>
 8007030:	f640 31db 	movw	r1, #3035	; 0xbdb
 8007034:	4816      	ldr	r0, [pc, #88]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 8007036:	f7f9 ff40 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	2b0f      	cmp	r3, #15
 8007040:	d904      	bls.n	800704c <HAL_TIM_Encoder_Init+0x1cc>
 8007042:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8007046:	4812      	ldr	r0, [pc, #72]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 8007048:	f7f9 ff37 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	2b0f      	cmp	r3, #15
 8007052:	d904      	bls.n	800705e <HAL_TIM_Encoder_Init+0x1de>
 8007054:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8007058:	480d      	ldr	r0, [pc, #52]	; (8007090 <HAL_TIM_Encoder_Init+0x210>)
 800705a:	f7f9 ff2e 	bl	8000eba <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d114      	bne.n	8007094 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7fa fe24 	bl	8001cc0 <HAL_TIM_Encoder_MspInit>
 8007078:	e00c      	b.n	8007094 <HAL_TIM_Encoder_Init+0x214>
 800707a:	bf00      	nop
 800707c:	40010000 	.word	0x40010000
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40014000 	.word	0x40014000
 8007090:	08010734 	.word	0x08010734
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6812      	ldr	r2, [r2, #0]
 80070a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070aa:	f023 0307 	bic.w	r3, r3, #7
 80070ae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f000 ff1e 	bl	8007efc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070e8:	f023 0303 	bic.w	r3, r3, #3
 80070ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	4313      	orrs	r3, r2
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007106:	f023 030c 	bic.w	r3, r3, #12
 800710a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	021b      	lsls	r3, r3, #8
 8007122:	4313      	orrs	r3, r2
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	011a      	lsls	r2, r3, #4
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	031b      	lsls	r3, r3, #12
 8007136:	4313      	orrs	r3, r2
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007144:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800714c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	4313      	orrs	r3, r2
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop

080071b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a4d      	ldr	r2, [pc, #308]	; (8007318 <HAL_TIM_Encoder_Start+0x164>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d01d      	beq.n	8007224 <HAL_TIM_Encoder_Start+0x70>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f0:	d018      	beq.n	8007224 <HAL_TIM_Encoder_Start+0x70>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a49      	ldr	r2, [pc, #292]	; (800731c <HAL_TIM_Encoder_Start+0x168>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d013      	beq.n	8007224 <HAL_TIM_Encoder_Start+0x70>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a47      	ldr	r2, [pc, #284]	; (8007320 <HAL_TIM_Encoder_Start+0x16c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00e      	beq.n	8007224 <HAL_TIM_Encoder_Start+0x70>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a46      	ldr	r2, [pc, #280]	; (8007324 <HAL_TIM_Encoder_Start+0x170>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d009      	beq.n	8007224 <HAL_TIM_Encoder_Start+0x70>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a44      	ldr	r2, [pc, #272]	; (8007328 <HAL_TIM_Encoder_Start+0x174>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d004      	beq.n	8007224 <HAL_TIM_Encoder_Start+0x70>
 800721a:	f640 418e 	movw	r1, #3214	; 0xc8e
 800721e:	4843      	ldr	r0, [pc, #268]	; (800732c <HAL_TIM_Encoder_Start+0x178>)
 8007220:	f7f9 fe4b 	bl	8000eba <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d110      	bne.n	800724c <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d102      	bne.n	8007236 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007230:	7b7b      	ldrb	r3, [r7, #13]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d001      	beq.n	800723a <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e069      	b.n	800730e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2202      	movs	r2, #2
 8007246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800724a:	e031      	b.n	80072b0 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b04      	cmp	r3, #4
 8007250:	d110      	bne.n	8007274 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d102      	bne.n	800725e <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007258:	7b3b      	ldrb	r3, [r7, #12]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d001      	beq.n	8007262 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e055      	b.n	800730e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2202      	movs	r2, #2
 800726e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007272:	e01d      	b.n	80072b0 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d108      	bne.n	800728c <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d105      	bne.n	800728c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007280:	7b7b      	ldrb	r3, [r7, #13]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d102      	bne.n	800728c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007286:	7b3b      	ldrb	r3, [r7, #12]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d001      	beq.n	8007290 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e03e      	b.n	800730e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_TIM_Encoder_Start+0x10a>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d008      	beq.n	80072ce <HAL_TIM_Encoder_Start+0x11a>
 80072bc:	e00f      	b.n	80072de <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2201      	movs	r2, #1
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 f948 	bl	800855c <TIM_CCxChannelCmd>
      break;
 80072cc:	e016      	b.n	80072fc <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2201      	movs	r2, #1
 80072d4:	2104      	movs	r1, #4
 80072d6:	4618      	mov	r0, r3
 80072d8:	f001 f940 	bl	800855c <TIM_CCxChannelCmd>
      break;
 80072dc:	e00e      	b.n	80072fc <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2201      	movs	r2, #1
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 f938 	bl	800855c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2201      	movs	r2, #1
 80072f2:	2104      	movs	r1, #4
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 f931 	bl	800855c <TIM_CCxChannelCmd>
      break;
 80072fa:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0201 	orr.w	r2, r2, #1
 800730a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	40010000 	.word	0x40010000
 800731c:	40000400 	.word	0x40000400
 8007320:	40000800 	.word	0x40000800
 8007324:	40000c00 	.word	0x40000c00
 8007328:	40014000 	.word	0x40014000
 800732c:	08010734 	.word	0x08010734

08007330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b02      	cmp	r3, #2
 8007344:	d122      	bne.n	800738c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b02      	cmp	r3, #2
 8007352:	d11b      	bne.n	800738c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0202 	mvn.w	r2, #2
 800735c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fda4 	bl	8007ec0 <HAL_TIM_IC_CaptureCallback>
 8007378:	e005      	b.n	8007386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fd96 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fda7 	bl	8007ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b04      	cmp	r3, #4
 8007398:	d122      	bne.n	80073e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d11b      	bne.n	80073e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0204 	mvn.w	r2, #4
 80073b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fd7a 	bl	8007ec0 <HAL_TIM_IC_CaptureCallback>
 80073cc:	e005      	b.n	80073da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fd6c 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fd7d 	bl	8007ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b08      	cmp	r3, #8
 80073ec:	d122      	bne.n	8007434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f003 0308 	and.w	r3, r3, #8
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d11b      	bne.n	8007434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f06f 0208 	mvn.w	r2, #8
 8007404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2204      	movs	r2, #4
 800740a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fd50 	bl	8007ec0 <HAL_TIM_IC_CaptureCallback>
 8007420:	e005      	b.n	800742e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fd42 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fd53 	bl	8007ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0310 	and.w	r3, r3, #16
 800743e:	2b10      	cmp	r3, #16
 8007440:	d122      	bne.n	8007488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b10      	cmp	r3, #16
 800744e:	d11b      	bne.n	8007488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0210 	mvn.w	r2, #16
 8007458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2208      	movs	r2, #8
 800745e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fd26 	bl	8007ec0 <HAL_TIM_IC_CaptureCallback>
 8007474:	e005      	b.n	8007482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fd18 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fd29 	bl	8007ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b01      	cmp	r3, #1
 8007494:	d10e      	bne.n	80074b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d107      	bne.n	80074b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f06f 0201 	mvn.w	r2, #1
 80074ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7f9 fcec 	bl	8000e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074be:	2b80      	cmp	r3, #128	; 0x80
 80074c0:	d10e      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074cc:	2b80      	cmp	r3, #128	; 0x80
 80074ce:	d107      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 f972 	bl	80087c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ea:	2b40      	cmp	r3, #64	; 0x40
 80074ec:	d10e      	bne.n	800750c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f8:	2b40      	cmp	r3, #64	; 0x40
 80074fa:	d107      	bne.n	800750c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fcee 	bl	8007ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b20      	cmp	r3, #32
 8007518:	d10e      	bne.n	8007538 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b20      	cmp	r3, #32
 8007526:	d107      	bne.n	8007538 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f06f 0220 	mvn.w	r2, #32
 8007530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 f93c 	bl	80087b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007538:	bf00      	nop
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d010      	beq.n	8007578 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b04      	cmp	r3, #4
 800755a:	d00d      	beq.n	8007578 <HAL_TIM_PWM_ConfigChannel+0x38>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b08      	cmp	r3, #8
 8007560:	d00a      	beq.n	8007578 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b0c      	cmp	r3, #12
 8007566:	d007      	beq.n	8007578 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b3c      	cmp	r3, #60	; 0x3c
 800756c:	d004      	beq.n	8007578 <HAL_TIM_PWM_ConfigChannel+0x38>
 800756e:	f241 0177 	movw	r1, #4215	; 0x1077
 8007572:	4893      	ldr	r0, [pc, #588]	; (80077c0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007574:	f7f9 fca1 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b60      	cmp	r3, #96	; 0x60
 800757e:	d008      	beq.n	8007592 <HAL_TIM_PWM_ConfigChannel+0x52>
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b70      	cmp	r3, #112	; 0x70
 8007586:	d004      	beq.n	8007592 <HAL_TIM_PWM_ConfigChannel+0x52>
 8007588:	f241 0178 	movw	r1, #4216	; 0x1078
 800758c:	488c      	ldr	r0, [pc, #560]	; (80077c0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800758e:	f7f9 fc94 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d008      	beq.n	80075ac <HAL_TIM_PWM_ConfigChannel+0x6c>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d004      	beq.n	80075ac <HAL_TIM_PWM_ConfigChannel+0x6c>
 80075a2:	f241 0179 	movw	r1, #4217	; 0x1079
 80075a6:	4886      	ldr	r0, [pc, #536]	; (80077c0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80075a8:	f7f9 fc87 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d008      	beq.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d004      	beq.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80075bc:	f241 017a 	movw	r1, #4218	; 0x107a
 80075c0:	487f      	ldr	r0, [pc, #508]	; (80077c0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80075c2:	f7f9 fc7a 	bl	8000eba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d101      	bne.n	80075d4 <HAL_TIM_PWM_ConfigChannel+0x94>
 80075d0:	2302      	movs	r3, #2
 80075d2:	e14c      	b.n	800786e <HAL_TIM_PWM_ConfigChannel+0x32e>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b0c      	cmp	r3, #12
 80075e0:	f200 813d 	bhi.w	800785e <HAL_TIM_PWM_ConfigChannel+0x31e>
 80075e4:	a201      	add	r2, pc, #4	; (adr r2, 80075ec <HAL_TIM_PWM_ConfigChannel+0xac>)
 80075e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ea:	bf00      	nop
 80075ec:	08007621 	.word	0x08007621
 80075f0:	0800785f 	.word	0x0800785f
 80075f4:	0800785f 	.word	0x0800785f
 80075f8:	0800785f 	.word	0x0800785f
 80075fc:	080076bb 	.word	0x080076bb
 8007600:	0800785f 	.word	0x0800785f
 8007604:	0800785f 	.word	0x0800785f
 8007608:	0800785f 	.word	0x0800785f
 800760c:	08007743 	.word	0x08007743
 8007610:	0800785f 	.word	0x0800785f
 8007614:	0800785f 	.word	0x0800785f
 8007618:	0800785f 	.word	0x0800785f
 800761c:	080077e1 	.word	0x080077e1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a67      	ldr	r2, [pc, #412]	; (80077c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d027      	beq.n	800767a <HAL_TIM_PWM_ConfigChannel+0x13a>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007632:	d022      	beq.n	800767a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a63      	ldr	r2, [pc, #396]	; (80077c8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d01d      	beq.n	800767a <HAL_TIM_PWM_ConfigChannel+0x13a>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a62      	ldr	r2, [pc, #392]	; (80077cc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d018      	beq.n	800767a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a60      	ldr	r2, [pc, #384]	; (80077d0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d013      	beq.n	800767a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a5f      	ldr	r2, [pc, #380]	; (80077d4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00e      	beq.n	800767a <HAL_TIM_PWM_ConfigChannel+0x13a>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a5d      	ldr	r2, [pc, #372]	; (80077d8 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d009      	beq.n	800767a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a5c      	ldr	r2, [pc, #368]	; (80077dc <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d004      	beq.n	800767a <HAL_TIM_PWM_ConfigChannel+0x13a>
 8007670:	f241 0184 	movw	r1, #4228	; 0x1084
 8007674:	4852      	ldr	r0, [pc, #328]	; (80077c0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007676:	f7f9 fc20 	bl	8000eba <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68b9      	ldr	r1, [r7, #8]
 8007680:	4618      	mov	r0, r3
 8007682:	f000 fcbb 	bl	8007ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	699a      	ldr	r2, [r3, #24]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0208 	orr.w	r2, r2, #8
 8007694:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	699a      	ldr	r2, [r3, #24]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0204 	bic.w	r2, r2, #4
 80076a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6999      	ldr	r1, [r3, #24]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	691a      	ldr	r2, [r3, #16]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	619a      	str	r2, [r3, #24]
      break;
 80076b8:	e0d4      	b.n	8007864 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a41      	ldr	r2, [pc, #260]	; (80077c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d01d      	beq.n	8007700 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076cc:	d018      	beq.n	8007700 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a3d      	ldr	r2, [pc, #244]	; (80077c8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a3b      	ldr	r2, [pc, #236]	; (80077cc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00e      	beq.n	8007700 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a3a      	ldr	r2, [pc, #232]	; (80077d0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a38      	ldr	r2, [pc, #224]	; (80077d4 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d004      	beq.n	8007700 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80076f6:	f241 0195 	movw	r1, #4245	; 0x1095
 80076fa:	4831      	ldr	r0, [pc, #196]	; (80077c0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80076fc:	f7f9 fbdd 	bl	8000eba <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fd08 	bl	800811c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800771a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699a      	ldr	r2, [r3, #24]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800772a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6999      	ldr	r1, [r3, #24]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	021a      	lsls	r2, r3, #8
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	619a      	str	r2, [r3, #24]
      break;
 8007740:	e090      	b.n	8007864 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a1f      	ldr	r2, [pc, #124]	; (80077c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d018      	beq.n	800777e <HAL_TIM_PWM_ConfigChannel+0x23e>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007754:	d013      	beq.n	800777e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1b      	ldr	r2, [pc, #108]	; (80077c8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00e      	beq.n	800777e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a19      	ldr	r2, [pc, #100]	; (80077cc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d009      	beq.n	800777e <HAL_TIM_PWM_ConfigChannel+0x23e>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a18      	ldr	r2, [pc, #96]	; (80077d0 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d004      	beq.n	800777e <HAL_TIM_PWM_ConfigChannel+0x23e>
 8007774:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8007778:	4811      	ldr	r0, [pc, #68]	; (80077c0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800777a:	f7f9 fb9e 	bl	8000eba <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 fd5d 	bl	8008244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 0208 	orr.w	r2, r2, #8
 8007798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0204 	bic.w	r2, r2, #4
 80077a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69d9      	ldr	r1, [r3, #28]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	61da      	str	r2, [r3, #28]
      break;
 80077bc:	e052      	b.n	8007864 <HAL_TIM_PWM_ConfigChannel+0x324>
 80077be:	bf00      	nop
 80077c0:	08010734 	.word	0x08010734
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40000800 	.word	0x40000800
 80077d0:	40000c00 	.word	0x40000c00
 80077d4:	40014000 	.word	0x40014000
 80077d8:	40014400 	.word	0x40014400
 80077dc:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a24      	ldr	r2, [pc, #144]	; (8007878 <HAL_TIM_PWM_ConfigChannel+0x338>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d018      	beq.n	800781c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f2:	d013      	beq.n	800781c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a20      	ldr	r2, [pc, #128]	; (800787c <HAL_TIM_PWM_ConfigChannel+0x33c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d00e      	beq.n	800781c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a1f      	ldr	r2, [pc, #124]	; (8007880 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d009      	beq.n	800781c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a1d      	ldr	r2, [pc, #116]	; (8007884 <HAL_TIM_PWM_ConfigChannel+0x344>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d004      	beq.n	800781c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007812:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8007816:	481c      	ldr	r0, [pc, #112]	; (8007888 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8007818:	f7f9 fb4f 	bl	8000eba <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fda2 	bl	800836c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69da      	ldr	r2, [r3, #28]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007836:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007846:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	69d9      	ldr	r1, [r3, #28]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	021a      	lsls	r2, r3, #8
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	61da      	str	r2, [r3, #28]
      break;
 800785c:	e002      	b.n	8007864 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	75fb      	strb	r3, [r7, #23]
      break;
 8007862:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800786c:	7dfb      	ldrb	r3, [r7, #23]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	40010000 	.word	0x40010000
 800787c:	40000400 	.word	0x40000400
 8007880:	40000800 	.word	0x40000800
 8007884:	40000c00 	.word	0x40000c00
 8007888:	08010734 	.word	0x08010734

0800788c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_TIM_ConfigClockSource+0x1c>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e2f0      	b.n	8007e8a <HAL_TIM_ConfigClockSource+0x5fe>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c0:	d029      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x8a>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b70      	cmp	r3, #112	; 0x70
 80078c8:	d025      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x8a>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078d2:	d020      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x8a>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b40      	cmp	r3, #64	; 0x40
 80078da:	d01c      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x8a>
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b50      	cmp	r3, #80	; 0x50
 80078e2:	d018      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x8a>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b60      	cmp	r3, #96	; 0x60
 80078ea:	d014      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x8a>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d010      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x8a>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b10      	cmp	r3, #16
 80078fa:	d00c      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x8a>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b20      	cmp	r3, #32
 8007902:	d008      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x8a>
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b30      	cmp	r3, #48	; 0x30
 800790a:	d004      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x8a>
 800790c:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8007910:	487c      	ldr	r0, [pc, #496]	; (8007b04 <HAL_TIM_ConfigClockSource+0x278>)
 8007912:	f7f9 fad2 	bl	8000eba <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007924:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800792c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800793e:	f000 80f1 	beq.w	8007b24 <HAL_TIM_ConfigClockSource+0x298>
 8007942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007946:	f200 8293 	bhi.w	8007e70 <HAL_TIM_ConfigClockSource+0x5e4>
 800794a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794e:	d02d      	beq.n	80079ac <HAL_TIM_ConfigClockSource+0x120>
 8007950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007954:	f200 828c 	bhi.w	8007e70 <HAL_TIM_ConfigClockSource+0x5e4>
 8007958:	2b70      	cmp	r3, #112	; 0x70
 800795a:	d05d      	beq.n	8007a18 <HAL_TIM_ConfigClockSource+0x18c>
 800795c:	2b70      	cmp	r3, #112	; 0x70
 800795e:	f200 8287 	bhi.w	8007e70 <HAL_TIM_ConfigClockSource+0x5e4>
 8007962:	2b60      	cmp	r3, #96	; 0x60
 8007964:	f000 81a0 	beq.w	8007ca8 <HAL_TIM_ConfigClockSource+0x41c>
 8007968:	2b60      	cmp	r3, #96	; 0x60
 800796a:	f200 8281 	bhi.w	8007e70 <HAL_TIM_ConfigClockSource+0x5e4>
 800796e:	2b50      	cmp	r3, #80	; 0x50
 8007970:	f000 8144 	beq.w	8007bfc <HAL_TIM_ConfigClockSource+0x370>
 8007974:	2b50      	cmp	r3, #80	; 0x50
 8007976:	f200 827b 	bhi.w	8007e70 <HAL_TIM_ConfigClockSource+0x5e4>
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	f000 81f6 	beq.w	8007d6c <HAL_TIM_ConfigClockSource+0x4e0>
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	f200 8275 	bhi.w	8007e70 <HAL_TIM_ConfigClockSource+0x5e4>
 8007986:	2b30      	cmp	r3, #48	; 0x30
 8007988:	f000 8246 	beq.w	8007e18 <HAL_TIM_ConfigClockSource+0x58c>
 800798c:	2b30      	cmp	r3, #48	; 0x30
 800798e:	f200 826f 	bhi.w	8007e70 <HAL_TIM_ConfigClockSource+0x5e4>
 8007992:	2b20      	cmp	r3, #32
 8007994:	f000 8240 	beq.w	8007e18 <HAL_TIM_ConfigClockSource+0x58c>
 8007998:	2b20      	cmp	r3, #32
 800799a:	f200 8269 	bhi.w	8007e70 <HAL_TIM_ConfigClockSource+0x5e4>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 823a 	beq.w	8007e18 <HAL_TIM_ConfigClockSource+0x58c>
 80079a4:	2b10      	cmp	r3, #16
 80079a6:	f000 8237 	beq.w	8007e18 <HAL_TIM_ConfigClockSource+0x58c>
 80079aa:	e261      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a55      	ldr	r2, [pc, #340]	; (8007b08 <HAL_TIM_ConfigClockSource+0x27c>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	f000 825f 	beq.w	8007e76 <HAL_TIM_ConfigClockSource+0x5ea>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c0:	f000 8259 	beq.w	8007e76 <HAL_TIM_ConfigClockSource+0x5ea>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a50      	ldr	r2, [pc, #320]	; (8007b0c <HAL_TIM_ConfigClockSource+0x280>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	f000 8253 	beq.w	8007e76 <HAL_TIM_ConfigClockSource+0x5ea>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a4e      	ldr	r2, [pc, #312]	; (8007b10 <HAL_TIM_ConfigClockSource+0x284>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	f000 824d 	beq.w	8007e76 <HAL_TIM_ConfigClockSource+0x5ea>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a4c      	ldr	r2, [pc, #304]	; (8007b14 <HAL_TIM_ConfigClockSource+0x288>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	f000 8247 	beq.w	8007e76 <HAL_TIM_ConfigClockSource+0x5ea>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a4a      	ldr	r2, [pc, #296]	; (8007b18 <HAL_TIM_ConfigClockSource+0x28c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	f000 8241 	beq.w	8007e76 <HAL_TIM_ConfigClockSource+0x5ea>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a48      	ldr	r2, [pc, #288]	; (8007b1c <HAL_TIM_ConfigClockSource+0x290>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	f000 823b 	beq.w	8007e76 <HAL_TIM_ConfigClockSource+0x5ea>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a46      	ldr	r2, [pc, #280]	; (8007b20 <HAL_TIM_ConfigClockSource+0x294>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	f000 8235 	beq.w	8007e76 <HAL_TIM_ConfigClockSource+0x5ea>
 8007a0c:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8007a10:	483c      	ldr	r0, [pc, #240]	; (8007b04 <HAL_TIM_ConfigClockSource+0x278>)
 8007a12:	f7f9 fa52 	bl	8000eba <assert_failed>
      break;
 8007a16:	e22e      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a3a      	ldr	r2, [pc, #232]	; (8007b08 <HAL_TIM_ConfigClockSource+0x27c>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d01d      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x1d2>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a2a:	d018      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x1d2>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a36      	ldr	r2, [pc, #216]	; (8007b0c <HAL_TIM_ConfigClockSource+0x280>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d013      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x1d2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a35      	ldr	r2, [pc, #212]	; (8007b10 <HAL_TIM_ConfigClockSource+0x284>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00e      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x1d2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a33      	ldr	r2, [pc, #204]	; (8007b14 <HAL_TIM_ConfigClockSource+0x288>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d009      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x1d2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a32      	ldr	r2, [pc, #200]	; (8007b18 <HAL_TIM_ConfigClockSource+0x28c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d004      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x1d2>
 8007a54:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8007a58:	482a      	ldr	r0, [pc, #168]	; (8007b04 <HAL_TIM_ConfigClockSource+0x278>)
 8007a5a:	f7f9 fa2e 	bl	8000eba <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d013      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x202>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6e:	d00e      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x202>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a78:	d009      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x202>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a82:	d004      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x202>
 8007a84:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8007a88:	481e      	ldr	r0, [pc, #120]	; (8007b04 <HAL_TIM_ConfigClockSource+0x278>)
 8007a8a:	f7f9 fa16 	bl	8000eba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a96:	d014      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x236>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d010      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x236>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00c      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x236>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d008      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x236>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	2b0a      	cmp	r3, #10
 8007ab6:	d004      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x236>
 8007ab8:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8007abc:	4811      	ldr	r0, [pc, #68]	; (8007b04 <HAL_TIM_ConfigClockSource+0x278>)
 8007abe:	f7f9 f9fc 	bl	8000eba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	2b0f      	cmp	r3, #15
 8007ac8:	d904      	bls.n	8007ad4 <HAL_TIM_ConfigClockSource+0x248>
 8007aca:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8007ace:	480d      	ldr	r0, [pc, #52]	; (8007b04 <HAL_TIM_ConfigClockSource+0x278>)
 8007ad0:	f7f9 f9f3 	bl	8000eba <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	6899      	ldr	r1, [r3, #8]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f000 fd1a 	bl	800851c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007af6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	609a      	str	r2, [r3, #8]
      break;
 8007b00:	e1ba      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x5ec>
 8007b02:	bf00      	nop
 8007b04:	08010734 	.word	0x08010734
 8007b08:	40010000 	.word	0x40010000
 8007b0c:	40000400 	.word	0x40000400
 8007b10:	40000800 	.word	0x40000800
 8007b14:	40000c00 	.word	0x40000c00
 8007b18:	40014000 	.word	0x40014000
 8007b1c:	40014400 	.word	0x40014400
 8007b20:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a8a      	ldr	r2, [pc, #552]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d018      	beq.n	8007b60 <HAL_TIM_ConfigClockSource+0x2d4>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b36:	d013      	beq.n	8007b60 <HAL_TIM_ConfigClockSource+0x2d4>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a86      	ldr	r2, [pc, #536]	; (8007d58 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00e      	beq.n	8007b60 <HAL_TIM_ConfigClockSource+0x2d4>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a85      	ldr	r2, [pc, #532]	; (8007d5c <HAL_TIM_ConfigClockSource+0x4d0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d009      	beq.n	8007b60 <HAL_TIM_ConfigClockSource+0x2d4>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a83      	ldr	r2, [pc, #524]	; (8007d60 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d004      	beq.n	8007b60 <HAL_TIM_ConfigClockSource+0x2d4>
 8007b56:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8007b5a:	4882      	ldr	r0, [pc, #520]	; (8007d64 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007b5c:	f7f9 f9ad 	bl	8000eba <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d013      	beq.n	8007b90 <HAL_TIM_ConfigClockSource+0x304>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b70:	d00e      	beq.n	8007b90 <HAL_TIM_ConfigClockSource+0x304>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7a:	d009      	beq.n	8007b90 <HAL_TIM_ConfigClockSource+0x304>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b84:	d004      	beq.n	8007b90 <HAL_TIM_ConfigClockSource+0x304>
 8007b86:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8007b8a:	4876      	ldr	r0, [pc, #472]	; (8007d64 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007b8c:	f7f9 f995 	bl	8000eba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b98:	d014      	beq.n	8007bc4 <HAL_TIM_ConfigClockSource+0x338>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d010      	beq.n	8007bc4 <HAL_TIM_ConfigClockSource+0x338>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00c      	beq.n	8007bc4 <HAL_TIM_ConfigClockSource+0x338>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d008      	beq.n	8007bc4 <HAL_TIM_ConfigClockSource+0x338>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b0a      	cmp	r3, #10
 8007bb8:	d004      	beq.n	8007bc4 <HAL_TIM_ConfigClockSource+0x338>
 8007bba:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8007bbe:	4869      	ldr	r0, [pc, #420]	; (8007d64 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007bc0:	f7f9 f97b 	bl	8000eba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	2b0f      	cmp	r3, #15
 8007bca:	d904      	bls.n	8007bd6 <HAL_TIM_ConfigClockSource+0x34a>
 8007bcc:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8007bd0:	4864      	ldr	r0, [pc, #400]	; (8007d64 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007bd2:	f7f9 f972 	bl	8000eba <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	6899      	ldr	r1, [r3, #8]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f000 fc99 	bl	800851c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bf8:	609a      	str	r2, [r3, #8]
      break;
 8007bfa:	e13d      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a54      	ldr	r2, [pc, #336]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d01d      	beq.n	8007c42 <HAL_TIM_ConfigClockSource+0x3b6>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c0e:	d018      	beq.n	8007c42 <HAL_TIM_ConfigClockSource+0x3b6>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a50      	ldr	r2, [pc, #320]	; (8007d58 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d013      	beq.n	8007c42 <HAL_TIM_ConfigClockSource+0x3b6>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a4f      	ldr	r2, [pc, #316]	; (8007d5c <HAL_TIM_ConfigClockSource+0x4d0>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00e      	beq.n	8007c42 <HAL_TIM_ConfigClockSource+0x3b6>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a4d      	ldr	r2, [pc, #308]	; (8007d60 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d009      	beq.n	8007c42 <HAL_TIM_ConfigClockSource+0x3b6>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a4d      	ldr	r2, [pc, #308]	; (8007d68 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d004      	beq.n	8007c42 <HAL_TIM_ConfigClockSource+0x3b6>
 8007c38:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8007c3c:	4849      	ldr	r0, [pc, #292]	; (8007d64 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007c3e:	f7f9 f93c 	bl	8000eba <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c4a:	d014      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0x3ea>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d010      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0x3ea>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00c      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0x3ea>
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d008      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0x3ea>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b0a      	cmp	r3, #10
 8007c6a:	d004      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0x3ea>
 8007c6c:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8007c70:	483c      	ldr	r0, [pc, #240]	; (8007d64 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007c72:	f7f9 f922 	bl	8000eba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	2b0f      	cmp	r3, #15
 8007c7c:	d904      	bls.n	8007c88 <HAL_TIM_ConfigClockSource+0x3fc>
 8007c7e:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8007c82:	4838      	ldr	r0, [pc, #224]	; (8007d64 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007c84:	f7f9 f919 	bl	8000eba <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	6859      	ldr	r1, [r3, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	461a      	mov	r2, r3
 8007c96:	f000 fbc7 	bl	8008428 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2150      	movs	r1, #80	; 0x50
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 fc20 	bl	80084e6 <TIM_ITRx_SetConfig>
      break;
 8007ca6:	e0e7      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a29      	ldr	r2, [pc, #164]	; (8007d54 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d01d      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x462>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cba:	d018      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x462>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a25      	ldr	r2, [pc, #148]	; (8007d58 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d013      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x462>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a24      	ldr	r2, [pc, #144]	; (8007d5c <HAL_TIM_ConfigClockSource+0x4d0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00e      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x462>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a22      	ldr	r2, [pc, #136]	; (8007d60 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d009      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x462>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a22      	ldr	r2, [pc, #136]	; (8007d68 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d004      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x462>
 8007ce4:	f241 5106 	movw	r1, #5382	; 0x1506
 8007ce8:	481e      	ldr	r0, [pc, #120]	; (8007d64 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007cea:	f7f9 f8e6 	bl	8000eba <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cf6:	d014      	beq.n	8007d22 <HAL_TIM_ConfigClockSource+0x496>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d010      	beq.n	8007d22 <HAL_TIM_ConfigClockSource+0x496>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00c      	beq.n	8007d22 <HAL_TIM_ConfigClockSource+0x496>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d008      	beq.n	8007d22 <HAL_TIM_ConfigClockSource+0x496>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	2b0a      	cmp	r3, #10
 8007d16:	d004      	beq.n	8007d22 <HAL_TIM_ConfigClockSource+0x496>
 8007d18:	f241 5109 	movw	r1, #5385	; 0x1509
 8007d1c:	4811      	ldr	r0, [pc, #68]	; (8007d64 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d1e:	f7f9 f8cc 	bl	8000eba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	2b0f      	cmp	r3, #15
 8007d28:	d904      	bls.n	8007d34 <HAL_TIM_ConfigClockSource+0x4a8>
 8007d2a:	f241 510a 	movw	r1, #5386	; 0x150a
 8007d2e:	480d      	ldr	r0, [pc, #52]	; (8007d64 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d30:	f7f9 f8c3 	bl	8000eba <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	6859      	ldr	r1, [r3, #4]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	461a      	mov	r2, r3
 8007d42:	f000 fba0 	bl	8008486 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2160      	movs	r1, #96	; 0x60
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fbca 	bl	80084e6 <TIM_ITRx_SetConfig>
      break;
 8007d52:	e091      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x5ec>
 8007d54:	40010000 	.word	0x40010000
 8007d58:	40000400 	.word	0x40000400
 8007d5c:	40000800 	.word	0x40000800
 8007d60:	40000c00 	.word	0x40000c00
 8007d64:	08010734 	.word	0x08010734
 8007d68:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a48      	ldr	r2, [pc, #288]	; (8007e94 <HAL_TIM_ConfigClockSource+0x608>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d01d      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0x526>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7e:	d018      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0x526>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a44      	ldr	r2, [pc, #272]	; (8007e98 <HAL_TIM_ConfigClockSource+0x60c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0x526>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a43      	ldr	r2, [pc, #268]	; (8007e9c <HAL_TIM_ConfigClockSource+0x610>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00e      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0x526>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a41      	ldr	r2, [pc, #260]	; (8007ea0 <HAL_TIM_ConfigClockSource+0x614>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d009      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0x526>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a40      	ldr	r2, [pc, #256]	; (8007ea4 <HAL_TIM_ConfigClockSource+0x618>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d004      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0x526>
 8007da8:	f241 5116 	movw	r1, #5398	; 0x1516
 8007dac:	483e      	ldr	r0, [pc, #248]	; (8007ea8 <HAL_TIM_ConfigClockSource+0x61c>)
 8007dae:	f7f9 f884 	bl	8000eba <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dba:	d014      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x55a>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d010      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x55a>
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00c      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x55a>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d008      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x55a>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	2b0a      	cmp	r3, #10
 8007dda:	d004      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x55a>
 8007ddc:	f241 5119 	movw	r1, #5401	; 0x1519
 8007de0:	4831      	ldr	r0, [pc, #196]	; (8007ea8 <HAL_TIM_ConfigClockSource+0x61c>)
 8007de2:	f7f9 f86a 	bl	8000eba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	2b0f      	cmp	r3, #15
 8007dec:	d904      	bls.n	8007df8 <HAL_TIM_ConfigClockSource+0x56c>
 8007dee:	f241 511a 	movw	r1, #5402	; 0x151a
 8007df2:	482d      	ldr	r0, [pc, #180]	; (8007ea8 <HAL_TIM_ConfigClockSource+0x61c>)
 8007df4:	f7f9 f861 	bl	8000eba <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	6859      	ldr	r1, [r3, #4]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	461a      	mov	r2, r3
 8007e06:	f000 fb0f 	bl	8008428 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2140      	movs	r1, #64	; 0x40
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fb68 	bl	80084e6 <TIM_ITRx_SetConfig>
      break;
 8007e16:	e02f      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	; (8007e94 <HAL_TIM_ConfigClockSource+0x608>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d01d      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x5d2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2a:	d018      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x5d2>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a19      	ldr	r2, [pc, #100]	; (8007e98 <HAL_TIM_ConfigClockSource+0x60c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x5d2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a18      	ldr	r2, [pc, #96]	; (8007e9c <HAL_TIM_ConfigClockSource+0x610>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00e      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x5d2>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a16      	ldr	r2, [pc, #88]	; (8007ea0 <HAL_TIM_ConfigClockSource+0x614>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d009      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x5d2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a15      	ldr	r2, [pc, #84]	; (8007ea4 <HAL_TIM_ConfigClockSource+0x618>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x5d2>
 8007e54:	f241 5129 	movw	r1, #5417	; 0x1529
 8007e58:	4813      	ldr	r0, [pc, #76]	; (8007ea8 <HAL_TIM_ConfigClockSource+0x61c>)
 8007e5a:	f7f9 f82e 	bl	8000eba <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f000 fb3c 	bl	80084e6 <TIM_ITRx_SetConfig>
      break;
 8007e6e:	e003      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	73fb      	strb	r3, [r7, #15]
      break;
 8007e74:	e000      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 8007e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	40010000 	.word	0x40010000
 8007e98:	40000400 	.word	0x40000400
 8007e9c:	40000800 	.word	0x40000800
 8007ea0:	40000c00 	.word	0x40000c00
 8007ea4:	40014000 	.word	0x40014000
 8007ea8:	08010734 	.word	0x08010734

08007eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a34      	ldr	r2, [pc, #208]	; (8007fe0 <TIM_Base_SetConfig+0xe4>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00f      	beq.n	8007f34 <TIM_Base_SetConfig+0x38>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1a:	d00b      	beq.n	8007f34 <TIM_Base_SetConfig+0x38>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a31      	ldr	r2, [pc, #196]	; (8007fe4 <TIM_Base_SetConfig+0xe8>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d007      	beq.n	8007f34 <TIM_Base_SetConfig+0x38>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a30      	ldr	r2, [pc, #192]	; (8007fe8 <TIM_Base_SetConfig+0xec>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_Base_SetConfig+0x38>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a2f      	ldr	r2, [pc, #188]	; (8007fec <TIM_Base_SetConfig+0xf0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d108      	bne.n	8007f46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a25      	ldr	r2, [pc, #148]	; (8007fe0 <TIM_Base_SetConfig+0xe4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d01b      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f54:	d017      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a22      	ldr	r2, [pc, #136]	; (8007fe4 <TIM_Base_SetConfig+0xe8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d013      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a21      	ldr	r2, [pc, #132]	; (8007fe8 <TIM_Base_SetConfig+0xec>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00f      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a20      	ldr	r2, [pc, #128]	; (8007fec <TIM_Base_SetConfig+0xf0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d00b      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a1f      	ldr	r2, [pc, #124]	; (8007ff0 <TIM_Base_SetConfig+0xf4>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d007      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a1e      	ldr	r2, [pc, #120]	; (8007ff4 <TIM_Base_SetConfig+0xf8>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d003      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a1d      	ldr	r2, [pc, #116]	; (8007ff8 <TIM_Base_SetConfig+0xfc>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d108      	bne.n	8007f98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a08      	ldr	r2, [pc, #32]	; (8007fe0 <TIM_Base_SetConfig+0xe4>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d103      	bne.n	8007fcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	691a      	ldr	r2, [r3, #16]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	615a      	str	r2, [r3, #20]
}
 8007fd2:	bf00      	nop
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	40010000 	.word	0x40010000
 8007fe4:	40000400 	.word	0x40000400
 8007fe8:	40000800 	.word	0x40000800
 8007fec:	40000c00 	.word	0x40000c00
 8007ff0:	40014000 	.word	0x40014000
 8007ff4:	40014400 	.word	0x40014400
 8007ff8:	40014800 	.word	0x40014800

08007ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	f023 0201 	bic.w	r2, r3, #1
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0303 	bic.w	r3, r3, #3
 8008032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f023 0302 	bic.w	r3, r3, #2
 8008044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a30      	ldr	r2, [pc, #192]	; (8008114 <TIM_OC1_SetConfig+0x118>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d119      	bne.n	800808c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d008      	beq.n	8008072 <TIM_OC1_SetConfig+0x76>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	2b08      	cmp	r3, #8
 8008066:	d004      	beq.n	8008072 <TIM_OC1_SetConfig+0x76>
 8008068:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 800806c:	482a      	ldr	r0, [pc, #168]	; (8008118 <TIM_OC1_SetConfig+0x11c>)
 800806e:	f7f8 ff24 	bl	8000eba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f023 0308 	bic.w	r3, r3, #8
 8008078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f023 0304 	bic.w	r3, r3, #4
 800808a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a21      	ldr	r2, [pc, #132]	; (8008114 <TIM_OC1_SetConfig+0x118>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d12d      	bne.n	80080f0 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800809c:	d008      	beq.n	80080b0 <TIM_OC1_SetConfig+0xb4>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d004      	beq.n	80080b0 <TIM_OC1_SetConfig+0xb4>
 80080a6:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 80080aa:	481b      	ldr	r0, [pc, #108]	; (8008118 <TIM_OC1_SetConfig+0x11c>)
 80080ac:	f7f8 ff05 	bl	8000eba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b8:	d008      	beq.n	80080cc <TIM_OC1_SetConfig+0xd0>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d004      	beq.n	80080cc <TIM_OC1_SetConfig+0xd0>
 80080c2:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 80080c6:	4814      	ldr	r0, [pc, #80]	; (8008118 <TIM_OC1_SetConfig+0x11c>)
 80080c8:	f7f8 fef7 	bl	8000eba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	621a      	str	r2, [r3, #32]
}
 800810a:	bf00      	nop
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	40010000 	.word	0x40010000
 8008118:	08010734 	.word	0x08010734

0800811c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	f023 0210 	bic.w	r2, r3, #16
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800814a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	021b      	lsls	r3, r3, #8
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	4313      	orrs	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f023 0320 	bic.w	r3, r3, #32
 8008166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	4313      	orrs	r3, r2
 8008172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a31      	ldr	r2, [pc, #196]	; (800823c <TIM_OC2_SetConfig+0x120>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d11a      	bne.n	80081b2 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d008      	beq.n	8008196 <TIM_OC2_SetConfig+0x7a>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	2b08      	cmp	r3, #8
 800818a:	d004      	beq.n	8008196 <TIM_OC2_SetConfig+0x7a>
 800818c:	f641 3112 	movw	r1, #6930	; 0x1b12
 8008190:	482b      	ldr	r0, [pc, #172]	; (8008240 <TIM_OC2_SetConfig+0x124>)
 8008192:	f7f8 fe92 	bl	8000eba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800819c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	011b      	lsls	r3, r3, #4
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a21      	ldr	r2, [pc, #132]	; (800823c <TIM_OC2_SetConfig+0x120>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d12f      	bne.n	800821a <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c2:	d008      	beq.n	80081d6 <TIM_OC2_SetConfig+0xba>
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <TIM_OC2_SetConfig+0xba>
 80081cc:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 80081d0:	481b      	ldr	r0, [pc, #108]	; (8008240 <TIM_OC2_SetConfig+0x124>)
 80081d2:	f7f8 fe72 	bl	8000eba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081de:	d008      	beq.n	80081f2 <TIM_OC2_SetConfig+0xd6>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d004      	beq.n	80081f2 <TIM_OC2_SetConfig+0xd6>
 80081e8:	f641 3121 	movw	r1, #6945	; 0x1b21
 80081ec:	4814      	ldr	r0, [pc, #80]	; (8008240 <TIM_OC2_SetConfig+0x124>)
 80081ee:	f7f8 fe64 	bl	8000eba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	621a      	str	r2, [r3, #32]
}
 8008234:	bf00      	nop
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	40010000 	.word	0x40010000
 8008240:	08010734 	.word	0x08010734

08008244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 0303 	bic.w	r3, r3, #3
 800827a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800828c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	021b      	lsls	r3, r3, #8
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a31      	ldr	r2, [pc, #196]	; (8008364 <TIM_OC3_SetConfig+0x120>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d11a      	bne.n	80082d8 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d008      	beq.n	80082bc <TIM_OC3_SetConfig+0x78>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	2b08      	cmp	r3, #8
 80082b0:	d004      	beq.n	80082bc <TIM_OC3_SetConfig+0x78>
 80082b2:	f641 315d 	movw	r1, #7005	; 0x1b5d
 80082b6:	482c      	ldr	r0, [pc, #176]	; (8008368 <TIM_OC3_SetConfig+0x124>)
 80082b8:	f7f8 fdff 	bl	8000eba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a22      	ldr	r2, [pc, #136]	; (8008364 <TIM_OC3_SetConfig+0x120>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d12f      	bne.n	8008340 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082e8:	d008      	beq.n	80082fc <TIM_OC3_SetConfig+0xb8>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d004      	beq.n	80082fc <TIM_OC3_SetConfig+0xb8>
 80082f2:	f641 316a 	movw	r1, #7018	; 0x1b6a
 80082f6:	481c      	ldr	r0, [pc, #112]	; (8008368 <TIM_OC3_SetConfig+0x124>)
 80082f8:	f7f8 fddf 	bl	8000eba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008304:	d008      	beq.n	8008318 <TIM_OC3_SetConfig+0xd4>
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d004      	beq.n	8008318 <TIM_OC3_SetConfig+0xd4>
 800830e:	f641 316b 	movw	r1, #7019	; 0x1b6b
 8008312:	4815      	ldr	r0, [pc, #84]	; (8008368 <TIM_OC3_SetConfig+0x124>)
 8008314:	f7f8 fdd1 	bl	8000eba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800831e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	011b      	lsls	r3, r3, #4
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	621a      	str	r2, [r3, #32]
}
 800835a:	bf00      	nop
 800835c:	3718      	adds	r7, #24
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	40010000 	.word	0x40010000
 8008368:	08010734 	.word	0x08010734

0800836c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800839a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	021b      	lsls	r3, r3, #8
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	031b      	lsls	r3, r3, #12
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a16      	ldr	r2, [pc, #88]	; (8008420 <TIM_OC4_SetConfig+0xb4>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d117      	bne.n	80083fc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d4:	d008      	beq.n	80083e8 <TIM_OC4_SetConfig+0x7c>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d004      	beq.n	80083e8 <TIM_OC4_SetConfig+0x7c>
 80083de:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 80083e2:	4810      	ldr	r0, [pc, #64]	; (8008424 <TIM_OC4_SetConfig+0xb8>)
 80083e4:	f7f8 fd69 	bl	8000eba <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	019b      	lsls	r3, r3, #6
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	621a      	str	r2, [r3, #32]
}
 8008416:	bf00      	nop
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40010000 	.word	0x40010000
 8008424:	08010734 	.word	0x08010734

08008428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	f023 0201 	bic.w	r2, r3, #1
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	011b      	lsls	r3, r3, #4
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f023 030a 	bic.w	r3, r3, #10
 8008464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4313      	orrs	r3, r2
 800846c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	621a      	str	r2, [r3, #32]
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008486:	b480      	push	{r7}
 8008488:	b087      	sub	sp, #28
 800848a:	af00      	add	r7, sp, #0
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	f023 0210 	bic.w	r2, r3, #16
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6a1b      	ldr	r3, [r3, #32]
 80084a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	031b      	lsls	r3, r3, #12
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	011b      	lsls	r3, r3, #4
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	621a      	str	r2, [r3, #32]
}
 80084da:	bf00      	nop
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b085      	sub	sp, #20
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4313      	orrs	r3, r2
 8008504:	f043 0307 	orr.w	r3, r3, #7
 8008508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	609a      	str	r2, [r3, #8]
}
 8008510:	bf00      	nop
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008536:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	021a      	lsls	r2, r3, #8
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	431a      	orrs	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	4313      	orrs	r3, r2
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	609a      	str	r2, [r3, #8]
}
 8008550:	bf00      	nop
 8008552:	371c      	adds	r7, #28
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4a2a      	ldr	r2, [pc, #168]	; (8008614 <TIM_CCxChannelCmd+0xb8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d020      	beq.n	80085b2 <TIM_CCxChannelCmd+0x56>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008576:	d01c      	beq.n	80085b2 <TIM_CCxChannelCmd+0x56>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4a27      	ldr	r2, [pc, #156]	; (8008618 <TIM_CCxChannelCmd+0xbc>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d018      	beq.n	80085b2 <TIM_CCxChannelCmd+0x56>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4a26      	ldr	r2, [pc, #152]	; (800861c <TIM_CCxChannelCmd+0xc0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d014      	beq.n	80085b2 <TIM_CCxChannelCmd+0x56>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4a25      	ldr	r2, [pc, #148]	; (8008620 <TIM_CCxChannelCmd+0xc4>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d010      	beq.n	80085b2 <TIM_CCxChannelCmd+0x56>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4a24      	ldr	r2, [pc, #144]	; (8008624 <TIM_CCxChannelCmd+0xc8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00c      	beq.n	80085b2 <TIM_CCxChannelCmd+0x56>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	4a23      	ldr	r2, [pc, #140]	; (8008628 <TIM_CCxChannelCmd+0xcc>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d008      	beq.n	80085b2 <TIM_CCxChannelCmd+0x56>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4a22      	ldr	r2, [pc, #136]	; (800862c <TIM_CCxChannelCmd+0xd0>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d004      	beq.n	80085b2 <TIM_CCxChannelCmd+0x56>
 80085a8:	f641 5194 	movw	r1, #7572	; 0x1d94
 80085ac:	4820      	ldr	r0, [pc, #128]	; (8008630 <TIM_CCxChannelCmd+0xd4>)
 80085ae:	f7f8 fc84 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d010      	beq.n	80085da <TIM_CCxChannelCmd+0x7e>
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d00d      	beq.n	80085da <TIM_CCxChannelCmd+0x7e>
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d00a      	beq.n	80085da <TIM_CCxChannelCmd+0x7e>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b0c      	cmp	r3, #12
 80085c8:	d007      	beq.n	80085da <TIM_CCxChannelCmd+0x7e>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b3c      	cmp	r3, #60	; 0x3c
 80085ce:	d004      	beq.n	80085da <TIM_CCxChannelCmd+0x7e>
 80085d0:	f641 5195 	movw	r1, #7573	; 0x1d95
 80085d4:	4816      	ldr	r0, [pc, #88]	; (8008630 <TIM_CCxChannelCmd+0xd4>)
 80085d6:	f7f8 fc70 	bl	8000eba <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f003 031f 	and.w	r3, r3, #31
 80085e0:	2201      	movs	r2, #1
 80085e2:	fa02 f303 	lsl.w	r3, r2, r3
 80085e6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a1a      	ldr	r2, [r3, #32]
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	43db      	mvns	r3, r3
 80085f0:	401a      	ands	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6a1a      	ldr	r2, [r3, #32]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	f003 031f 	and.w	r3, r3, #31
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	fa01 f303 	lsl.w	r3, r1, r3
 8008606:	431a      	orrs	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	621a      	str	r2, [r3, #32]
}
 800860c:	bf00      	nop
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	40010000 	.word	0x40010000
 8008618:	40000400 	.word	0x40000400
 800861c:	40000800 	.word	0x40000800
 8008620:	40000c00 	.word	0x40000c00
 8008624:	40014000 	.word	0x40014000
 8008628:	40014400 	.word	0x40014400
 800862c:	40014800 	.word	0x40014800
 8008630:	08010734 	.word	0x08010734

08008634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a55      	ldr	r2, [pc, #340]	; (8008798 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d018      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008650:	d013      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a51      	ldr	r2, [pc, #324]	; (800879c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00e      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a4f      	ldr	r2, [pc, #316]	; (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d009      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a4e      	ldr	r2, [pc, #312]	; (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d004      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008670:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8008674:	484c      	ldr	r0, [pc, #304]	; (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008676:	f7f8 fc20 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d020      	beq.n	80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b10      	cmp	r3, #16
 8008688:	d01c      	beq.n	80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b20      	cmp	r3, #32
 8008690:	d018      	beq.n	80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b30      	cmp	r3, #48	; 0x30
 8008698:	d014      	beq.n	80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b40      	cmp	r3, #64	; 0x40
 80086a0:	d010      	beq.n	80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b50      	cmp	r3, #80	; 0x50
 80086a8:	d00c      	beq.n	80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b60      	cmp	r3, #96	; 0x60
 80086b0:	d008      	beq.n	80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b70      	cmp	r3, #112	; 0x70
 80086b8:	d004      	beq.n	80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80086ba:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80086be:	483a      	ldr	r0, [pc, #232]	; (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80086c0:	f7f8 fbfb 	bl	8000eba <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	2b80      	cmp	r3, #128	; 0x80
 80086ca:	d008      	beq.n	80086de <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80086d4:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80086d8:	4833      	ldr	r0, [pc, #204]	; (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80086da:	f7f8 fbee 	bl	8000eba <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e050      	b.n	800878e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a1b      	ldr	r2, [pc, #108]	; (8008798 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d018      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008738:	d013      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a17      	ldr	r2, [pc, #92]	; (800879c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d00e      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a15      	ldr	r2, [pc, #84]	; (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d009      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a14      	ldr	r2, [pc, #80]	; (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d004      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a13      	ldr	r2, [pc, #76]	; (80087ac <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d10c      	bne.n	800877c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	4313      	orrs	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	40010000 	.word	0x40010000
 800879c:	40000400 	.word	0x40000400
 80087a0:	40000800 	.word	0x40000800
 80087a4:	40000c00 	.word	0x40000c00
 80087a8:	0801076c 	.word	0x0801076c
 80087ac:	40014000 	.word	0x40014000

080087b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087d8:	b084      	sub	sp, #16
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	f107 001c 	add.w	r0, r7, #28
 80087e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d122      	bne.n	8008836 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800881a:	2b01      	cmp	r3, #1
 800881c:	d105      	bne.n	800882a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 fbee 	bl	800a00c <USB_CoreReset>
 8008830:	4603      	mov	r3, r0
 8008832:	73fb      	strb	r3, [r7, #15]
 8008834:	e01a      	b.n	800886c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f001 fbe2 	bl	800a00c <USB_CoreReset>
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800884c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800884e:	2b00      	cmp	r3, #0
 8008850:	d106      	bne.n	8008860 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	639a      	str	r2, [r3, #56]	; 0x38
 800885e:	e005      	b.n	800886c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008864:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	2b01      	cmp	r3, #1
 8008870:	d10b      	bne.n	800888a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f043 0206 	orr.w	r2, r3, #6
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f043 0220 	orr.w	r2, r3, #32
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008896:	b004      	add	sp, #16
 8008898:	4770      	bx	lr
	...

0800889c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	4613      	mov	r3, r2
 80088a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d165      	bne.n	800897c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	4a41      	ldr	r2, [pc, #260]	; (80089b8 <USB_SetTurnaroundTime+0x11c>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d906      	bls.n	80088c6 <USB_SetTurnaroundTime+0x2a>
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	4a40      	ldr	r2, [pc, #256]	; (80089bc <USB_SetTurnaroundTime+0x120>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d202      	bcs.n	80088c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80088c0:	230f      	movs	r3, #15
 80088c2:	617b      	str	r3, [r7, #20]
 80088c4:	e062      	b.n	800898c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	4a3c      	ldr	r2, [pc, #240]	; (80089bc <USB_SetTurnaroundTime+0x120>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d306      	bcc.n	80088dc <USB_SetTurnaroundTime+0x40>
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	4a3b      	ldr	r2, [pc, #236]	; (80089c0 <USB_SetTurnaroundTime+0x124>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d202      	bcs.n	80088dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80088d6:	230e      	movs	r3, #14
 80088d8:	617b      	str	r3, [r7, #20]
 80088da:	e057      	b.n	800898c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	4a38      	ldr	r2, [pc, #224]	; (80089c0 <USB_SetTurnaroundTime+0x124>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d306      	bcc.n	80088f2 <USB_SetTurnaroundTime+0x56>
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4a37      	ldr	r2, [pc, #220]	; (80089c4 <USB_SetTurnaroundTime+0x128>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d202      	bcs.n	80088f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80088ec:	230d      	movs	r3, #13
 80088ee:	617b      	str	r3, [r7, #20]
 80088f0:	e04c      	b.n	800898c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	4a33      	ldr	r2, [pc, #204]	; (80089c4 <USB_SetTurnaroundTime+0x128>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d306      	bcc.n	8008908 <USB_SetTurnaroundTime+0x6c>
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	4a32      	ldr	r2, [pc, #200]	; (80089c8 <USB_SetTurnaroundTime+0x12c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d802      	bhi.n	8008908 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008902:	230c      	movs	r3, #12
 8008904:	617b      	str	r3, [r7, #20]
 8008906:	e041      	b.n	800898c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	4a2f      	ldr	r2, [pc, #188]	; (80089c8 <USB_SetTurnaroundTime+0x12c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d906      	bls.n	800891e <USB_SetTurnaroundTime+0x82>
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	4a2e      	ldr	r2, [pc, #184]	; (80089cc <USB_SetTurnaroundTime+0x130>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d802      	bhi.n	800891e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008918:	230b      	movs	r3, #11
 800891a:	617b      	str	r3, [r7, #20]
 800891c:	e036      	b.n	800898c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	4a2a      	ldr	r2, [pc, #168]	; (80089cc <USB_SetTurnaroundTime+0x130>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d906      	bls.n	8008934 <USB_SetTurnaroundTime+0x98>
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	4a29      	ldr	r2, [pc, #164]	; (80089d0 <USB_SetTurnaroundTime+0x134>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d802      	bhi.n	8008934 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800892e:	230a      	movs	r3, #10
 8008930:	617b      	str	r3, [r7, #20]
 8008932:	e02b      	b.n	800898c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	4a26      	ldr	r2, [pc, #152]	; (80089d0 <USB_SetTurnaroundTime+0x134>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d906      	bls.n	800894a <USB_SetTurnaroundTime+0xae>
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4a25      	ldr	r2, [pc, #148]	; (80089d4 <USB_SetTurnaroundTime+0x138>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d202      	bcs.n	800894a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008944:	2309      	movs	r3, #9
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	e020      	b.n	800898c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	4a21      	ldr	r2, [pc, #132]	; (80089d4 <USB_SetTurnaroundTime+0x138>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d306      	bcc.n	8008960 <USB_SetTurnaroundTime+0xc4>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	4a20      	ldr	r2, [pc, #128]	; (80089d8 <USB_SetTurnaroundTime+0x13c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d802      	bhi.n	8008960 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800895a:	2308      	movs	r3, #8
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	e015      	b.n	800898c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4a1d      	ldr	r2, [pc, #116]	; (80089d8 <USB_SetTurnaroundTime+0x13c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d906      	bls.n	8008976 <USB_SetTurnaroundTime+0xda>
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	4a1c      	ldr	r2, [pc, #112]	; (80089dc <USB_SetTurnaroundTime+0x140>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d202      	bcs.n	8008976 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008970:	2307      	movs	r3, #7
 8008972:	617b      	str	r3, [r7, #20]
 8008974:	e00a      	b.n	800898c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008976:	2306      	movs	r3, #6
 8008978:	617b      	str	r3, [r7, #20]
 800897a:	e007      	b.n	800898c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008982:	2309      	movs	r3, #9
 8008984:	617b      	str	r3, [r7, #20]
 8008986:	e001      	b.n	800898c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008988:	2309      	movs	r3, #9
 800898a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	029b      	lsls	r3, r3, #10
 80089a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80089a4:	431a      	orrs	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	371c      	adds	r7, #28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	00d8acbf 	.word	0x00d8acbf
 80089bc:	00e4e1c0 	.word	0x00e4e1c0
 80089c0:	00f42400 	.word	0x00f42400
 80089c4:	01067380 	.word	0x01067380
 80089c8:	011a499f 	.word	0x011a499f
 80089cc:	01312cff 	.word	0x01312cff
 80089d0:	014ca43f 	.word	0x014ca43f
 80089d4:	016e3600 	.word	0x016e3600
 80089d8:	01a6ab1f 	.word	0x01a6ab1f
 80089dc:	01e84800 	.word	0x01e84800

080089e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f043 0201 	orr.w	r2, r3, #1
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f023 0201 	bic.w	r2, r3, #1
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d115      	bne.n	8008a72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a52:	2001      	movs	r0, #1
 8008a54:	f7f9 fa6c 	bl	8001f30 <HAL_Delay>
      ms++;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 fa45 	bl	8009eee <USB_GetMode>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d01e      	beq.n	8008aa8 <USB_SetCurrentMode+0x84>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2b31      	cmp	r3, #49	; 0x31
 8008a6e:	d9f0      	bls.n	8008a52 <USB_SetCurrentMode+0x2e>
 8008a70:	e01a      	b.n	8008aa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a72:	78fb      	ldrb	r3, [r7, #3]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d115      	bne.n	8008aa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a84:	2001      	movs	r0, #1
 8008a86:	f7f9 fa53 	bl	8001f30 <HAL_Delay>
      ms++;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 fa2c 	bl	8009eee <USB_GetMode>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <USB_SetCurrentMode+0x84>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b31      	cmp	r3, #49	; 0x31
 8008aa0:	d9f0      	bls.n	8008a84 <USB_SetCurrentMode+0x60>
 8008aa2:	e001      	b.n	8008aa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e005      	b.n	8008ab4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b32      	cmp	r3, #50	; 0x32
 8008aac:	d101      	bne.n	8008ab2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008abc:	b084      	sub	sp, #16
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b086      	sub	sp, #24
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	613b      	str	r3, [r7, #16]
 8008ada:	e009      	b.n	8008af0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	3340      	adds	r3, #64	; 0x40
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	3301      	adds	r3, #1
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	2b0e      	cmp	r3, #14
 8008af4:	d9f2      	bls.n	8008adc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d11c      	bne.n	8008b36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b0a:	f043 0302 	orr.w	r3, r3, #2
 8008b0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	639a      	str	r2, [r3, #56]	; 0x38
 8008b34:	e00b      	b.n	8008b4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b54:	461a      	mov	r2, r3
 8008b56:	2300      	movs	r3, #0
 8008b58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b60:	4619      	mov	r1, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b68:	461a      	mov	r2, r3
 8008b6a:	680b      	ldr	r3, [r1, #0]
 8008b6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d10c      	bne.n	8008b8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d104      	bne.n	8008b84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f965 	bl	8008e4c <USB_SetDevSpeed>
 8008b82:	e008      	b.n	8008b96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b84:	2101      	movs	r1, #1
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f960 	bl	8008e4c <USB_SetDevSpeed>
 8008b8c:	e003      	b.n	8008b96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b8e:	2103      	movs	r1, #3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f95b 	bl	8008e4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b96:	2110      	movs	r1, #16
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f8f3 	bl	8008d84 <USB_FlushTxFifo>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f91f 	bl	8008dec <USB_FlushRxFifo>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bca:	461a      	mov	r2, r3
 8008bcc:	2300      	movs	r3, #0
 8008bce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bdc:	2300      	movs	r3, #0
 8008bde:	613b      	str	r3, [r7, #16]
 8008be0:	e043      	b.n	8008c6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bf8:	d118      	bne.n	8008c2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	e013      	b.n	8008c3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c22:	461a      	mov	r2, r3
 8008c24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	e008      	b.n	8008c3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c38:	461a      	mov	r2, r3
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	3301      	adds	r3, #1
 8008c68:	613b      	str	r3, [r7, #16]
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d3b7      	bcc.n	8008be2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c72:	2300      	movs	r3, #0
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	e043      	b.n	8008d00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c8e:	d118      	bne.n	8008cc2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10a      	bne.n	8008cac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	e013      	b.n	8008cd4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb8:	461a      	mov	r2, r3
 8008cba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	e008      	b.n	8008cd4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cce:	461a      	mov	r2, r3
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	613b      	str	r3, [r7, #16]
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d3b7      	bcc.n	8008c78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d105      	bne.n	8008d3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	f043 0210 	orr.w	r2, r3, #16
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	699a      	ldr	r2, [r3, #24]
 8008d40:	4b0f      	ldr	r3, [pc, #60]	; (8008d80 <USB_DevInit+0x2c4>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d005      	beq.n	8008d5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	f043 0208 	orr.w	r2, r3, #8
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d107      	bne.n	8008d70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d68:	f043 0304 	orr.w	r3, r3, #4
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d7c:	b004      	add	sp, #16
 8008d7e:	4770      	bx	lr
 8008d80:	803c3800 	.word	0x803c3800

08008d84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3301      	adds	r3, #1
 8008d96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4a13      	ldr	r2, [pc, #76]	; (8008de8 <USB_FlushTxFifo+0x64>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d901      	bls.n	8008da4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e01b      	b.n	8008ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	daf2      	bge.n	8008d92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	019b      	lsls	r3, r3, #6
 8008db4:	f043 0220 	orr.w	r2, r3, #32
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4a08      	ldr	r2, [pc, #32]	; (8008de8 <USB_FlushTxFifo+0x64>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d901      	bls.n	8008dce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e006      	b.n	8008ddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b20      	cmp	r3, #32
 8008dd8:	d0f0      	beq.n	8008dbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	00030d40 	.word	0x00030d40

08008dec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4a11      	ldr	r2, [pc, #68]	; (8008e48 <USB_FlushRxFifo+0x5c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d901      	bls.n	8008e0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e018      	b.n	8008e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	daf2      	bge.n	8008df8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2210      	movs	r2, #16
 8008e1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4a08      	ldr	r2, [pc, #32]	; (8008e48 <USB_FlushRxFifo+0x5c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d901      	bls.n	8008e2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e006      	b.n	8008e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	f003 0310 	and.w	r3, r3, #16
 8008e36:	2b10      	cmp	r3, #16
 8008e38:	d0f0      	beq.n	8008e1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	00030d40 	.word	0x00030d40

08008e4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b087      	sub	sp, #28
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f003 0306 	and.w	r3, r3, #6
 8008e96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d102      	bne.n	8008ea4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	75fb      	strb	r3, [r7, #23]
 8008ea2:	e00a      	b.n	8008eba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d002      	beq.n	8008eb0 <USB_GetDevSpeed+0x32>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b06      	cmp	r3, #6
 8008eae:	d102      	bne.n	8008eb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	75fb      	strb	r3, [r7, #23]
 8008eb4:	e001      	b.n	8008eba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008eb6:	230f      	movs	r3, #15
 8008eb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	371c      	adds	r7, #28
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	785b      	ldrb	r3, [r3, #1]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d13a      	bne.n	8008f5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eea:	69da      	ldr	r2, [r3, #28]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	f003 030f 	and.w	r3, r3, #15
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	68f9      	ldr	r1, [r7, #12]
 8008efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f02:	4313      	orrs	r3, r2
 8008f04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d155      	bne.n	8008fc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	791b      	ldrb	r3, [r3, #4]
 8008f36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	059b      	lsls	r3, r3, #22
 8008f3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f40:	4313      	orrs	r3, r2
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	0151      	lsls	r1, r2, #5
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	440a      	add	r2, r1
 8008f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	e036      	b.n	8008fc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f60:	69da      	ldr	r2, [r3, #28]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	f003 030f 	and.w	r3, r3, #15
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f70:	041b      	lsls	r3, r3, #16
 8008f72:	68f9      	ldr	r1, [r7, #12]
 8008f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d11a      	bne.n	8008fc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	791b      	ldrb	r3, [r3, #4]
 8008fac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008fae:	430b      	orrs	r3, r1
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	0151      	lsls	r1, r2, #5
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	440a      	add	r2, r1
 8008fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
	...

08008fd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	785b      	ldrb	r3, [r3, #1]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d161      	bne.n	80090b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	015a      	lsls	r2, r3, #5
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800900a:	d11f      	bne.n	800904c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	0151      	lsls	r1, r2, #5
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	440a      	add	r2, r1
 8009022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009026:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800902a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	0151      	lsls	r1, r2, #5
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	440a      	add	r2, r1
 8009042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009046:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800904a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	f003 030f 	and.w	r3, r3, #15
 800905c:	2101      	movs	r1, #1
 800905e:	fa01 f303 	lsl.w	r3, r1, r3
 8009062:	b29b      	uxth	r3, r3
 8009064:	43db      	mvns	r3, r3
 8009066:	68f9      	ldr	r1, [r7, #12]
 8009068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800906c:	4013      	ands	r3, r2
 800906e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009076:	69da      	ldr	r2, [r3, #28]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	f003 030f 	and.w	r3, r3, #15
 8009080:	2101      	movs	r1, #1
 8009082:	fa01 f303 	lsl.w	r3, r1, r3
 8009086:	b29b      	uxth	r3, r3
 8009088:	43db      	mvns	r3, r3
 800908a:	68f9      	ldr	r1, [r7, #12]
 800908c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009090:	4013      	ands	r3, r2
 8009092:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4413      	add	r3, r2
 800909c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	0159      	lsls	r1, r3, #5
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	440b      	add	r3, r1
 80090aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ae:	4619      	mov	r1, r3
 80090b0:	4b35      	ldr	r3, [pc, #212]	; (8009188 <USB_DeactivateEndpoint+0x1b0>)
 80090b2:	4013      	ands	r3, r2
 80090b4:	600b      	str	r3, [r1, #0]
 80090b6:	e060      	b.n	800917a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ce:	d11f      	bne.n	8009110 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	0151      	lsls	r1, r2, #5
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	440a      	add	r2, r1
 80090e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	0151      	lsls	r1, r2, #5
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	440a      	add	r2, r1
 8009106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800910a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800910e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	2101      	movs	r1, #1
 8009122:	fa01 f303 	lsl.w	r3, r1, r3
 8009126:	041b      	lsls	r3, r3, #16
 8009128:	43db      	mvns	r3, r3
 800912a:	68f9      	ldr	r1, [r7, #12]
 800912c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009130:	4013      	ands	r3, r2
 8009132:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913a:	69da      	ldr	r2, [r3, #28]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	f003 030f 	and.w	r3, r3, #15
 8009144:	2101      	movs	r1, #1
 8009146:	fa01 f303 	lsl.w	r3, r1, r3
 800914a:	041b      	lsls	r3, r3, #16
 800914c:	43db      	mvns	r3, r3
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009154:	4013      	ands	r3, r2
 8009156:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	0159      	lsls	r1, r3, #5
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	440b      	add	r3, r1
 800916e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009172:	4619      	mov	r1, r3
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <USB_DeactivateEndpoint+0x1b4>)
 8009176:	4013      	ands	r3, r2
 8009178:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	ec337800 	.word	0xec337800
 800918c:	eff37800 	.word	0xeff37800

08009190 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b08a      	sub	sp, #40	; 0x28
 8009194:	af02      	add	r7, sp, #8
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	4613      	mov	r3, r2
 800919c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	f040 815c 	bne.w	800946a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d132      	bne.n	8009220 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	0151      	lsls	r1, r2, #5
 80091cc:	69fa      	ldr	r2, [r7, #28]
 80091ce:	440a      	add	r2, r1
 80091d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	0151      	lsls	r1, r2, #5
 80091f0:	69fa      	ldr	r2, [r7, #28]
 80091f2:	440a      	add	r2, r1
 80091f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	0151      	lsls	r1, r2, #5
 8009210:	69fa      	ldr	r2, [r7, #28]
 8009212:	440a      	add	r2, r1
 8009214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009218:	0cdb      	lsrs	r3, r3, #19
 800921a:	04db      	lsls	r3, r3, #19
 800921c:	6113      	str	r3, [r2, #16]
 800921e:	e074      	b.n	800930a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	0151      	lsls	r1, r2, #5
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	440a      	add	r2, r1
 8009236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800923a:	0cdb      	lsrs	r3, r3, #19
 800923c:	04db      	lsls	r3, r3, #19
 800923e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	69fa      	ldr	r2, [r7, #28]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800925a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800925e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009270:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	6999      	ldr	r1, [r3, #24]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	440b      	add	r3, r1
 800927c:	1e59      	subs	r1, r3, #1
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	fbb1 f3f3 	udiv	r3, r1, r3
 8009286:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009288:	4b9d      	ldr	r3, [pc, #628]	; (8009500 <USB_EPStartXfer+0x370>)
 800928a:	400b      	ands	r3, r1
 800928c:	69b9      	ldr	r1, [r7, #24]
 800928e:	0148      	lsls	r0, r1, #5
 8009290:	69f9      	ldr	r1, [r7, #28]
 8009292:	4401      	add	r1, r0
 8009294:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009298:	4313      	orrs	r3, r2
 800929a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a8:	691a      	ldr	r2, [r3, #16]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092b2:	69b9      	ldr	r1, [r7, #24]
 80092b4:	0148      	lsls	r0, r1, #5
 80092b6:	69f9      	ldr	r1, [r7, #28]
 80092b8:	4401      	add	r1, r0
 80092ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80092be:	4313      	orrs	r3, r2
 80092c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	791b      	ldrb	r3, [r3, #4]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d11f      	bne.n	800930a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	0151      	lsls	r1, r2, #5
 80092dc:	69fa      	ldr	r2, [r7, #28]
 80092de:	440a      	add	r2, r1
 80092e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80092e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	0151      	lsls	r1, r2, #5
 80092fc:	69fa      	ldr	r2, [r7, #28]
 80092fe:	440a      	add	r2, r1
 8009300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009304:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009308:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d14b      	bne.n	80093a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d009      	beq.n	800932c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	015a      	lsls	r2, r3, #5
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	4413      	add	r3, r2
 8009320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009324:	461a      	mov	r2, r3
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	791b      	ldrb	r3, [r3, #4]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d128      	bne.n	8009386 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009340:	2b00      	cmp	r3, #0
 8009342:	d110      	bne.n	8009366 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	0151      	lsls	r1, r2, #5
 8009356:	69fa      	ldr	r2, [r7, #28]
 8009358:	440a      	add	r2, r1
 800935a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800935e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	e00f      	b.n	8009386 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	69ba      	ldr	r2, [r7, #24]
 8009376:	0151      	lsls	r1, r2, #5
 8009378:	69fa      	ldr	r2, [r7, #28]
 800937a:	440a      	add	r2, r1
 800937c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009384:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	4413      	add	r3, r2
 800938e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	0151      	lsls	r1, r2, #5
 8009398:	69fa      	ldr	r2, [r7, #28]
 800939a:	440a      	add	r2, r1
 800939c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093a4:	6013      	str	r3, [r2, #0]
 80093a6:	e133      	b.n	8009610 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	69ba      	ldr	r2, [r7, #24]
 80093b8:	0151      	lsls	r1, r2, #5
 80093ba:	69fa      	ldr	r2, [r7, #28]
 80093bc:	440a      	add	r2, r1
 80093be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	791b      	ldrb	r3, [r3, #4]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d015      	beq.n	80093fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 811b 	beq.w	8009610 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	f003 030f 	and.w	r3, r3, #15
 80093ea:	2101      	movs	r1, #1
 80093ec:	fa01 f303 	lsl.w	r3, r1, r3
 80093f0:	69f9      	ldr	r1, [r7, #28]
 80093f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093f6:	4313      	orrs	r3, r2
 80093f8:	634b      	str	r3, [r1, #52]	; 0x34
 80093fa:	e109      	b.n	8009610 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009408:	2b00      	cmp	r3, #0
 800940a:	d110      	bne.n	800942e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	4413      	add	r3, r2
 8009414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	0151      	lsls	r1, r2, #5
 800941e:	69fa      	ldr	r2, [r7, #28]
 8009420:	440a      	add	r2, r1
 8009422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009426:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	e00f      	b.n	800944e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	69ba      	ldr	r2, [r7, #24]
 800943e:	0151      	lsls	r1, r2, #5
 8009440:	69fa      	ldr	r2, [r7, #28]
 8009442:	440a      	add	r2, r1
 8009444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800944c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	6919      	ldr	r1, [r3, #16]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	781a      	ldrb	r2, [r3, #0]
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	b298      	uxth	r0, r3
 800945c:	79fb      	ldrb	r3, [r7, #7]
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	4603      	mov	r3, r0
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fade 	bl	8009a24 <USB_WritePacket>
 8009468:	e0d2      	b.n	8009610 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	0151      	lsls	r1, r2, #5
 800947c:	69fa      	ldr	r2, [r7, #28]
 800947e:	440a      	add	r2, r1
 8009480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009484:	0cdb      	lsrs	r3, r3, #19
 8009486:	04db      	lsls	r3, r3, #19
 8009488:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	4413      	add	r3, r2
 8009492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	69ba      	ldr	r2, [r7, #24]
 800949a:	0151      	lsls	r1, r2, #5
 800949c:	69fa      	ldr	r2, [r7, #28]
 800949e:	440a      	add	r2, r1
 80094a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d126      	bne.n	8009504 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c2:	691a      	ldr	r2, [r3, #16]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094cc:	69b9      	ldr	r1, [r7, #24]
 80094ce:	0148      	lsls	r0, r1, #5
 80094d0:	69f9      	ldr	r1, [r7, #28]
 80094d2:	4401      	add	r1, r0
 80094d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094d8:	4313      	orrs	r3, r2
 80094da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	0151      	lsls	r1, r2, #5
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	440a      	add	r2, r1
 80094f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094fa:	6113      	str	r3, [r2, #16]
 80094fc:	e03a      	b.n	8009574 <USB_EPStartXfer+0x3e4>
 80094fe:	bf00      	nop
 8009500:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	699a      	ldr	r2, [r3, #24]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	4413      	add	r3, r2
 800950e:	1e5a      	subs	r2, r3, #1
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	fbb2 f3f3 	udiv	r3, r2, r3
 8009518:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	8afa      	ldrh	r2, [r7, #22]
 8009520:	fb03 f202 	mul.w	r2, r3, r2
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	015a      	lsls	r2, r3, #5
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	4413      	add	r3, r2
 8009530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009534:	691a      	ldr	r2, [r3, #16]
 8009536:	8afb      	ldrh	r3, [r7, #22]
 8009538:	04d9      	lsls	r1, r3, #19
 800953a:	4b38      	ldr	r3, [pc, #224]	; (800961c <USB_EPStartXfer+0x48c>)
 800953c:	400b      	ands	r3, r1
 800953e:	69b9      	ldr	r1, [r7, #24]
 8009540:	0148      	lsls	r0, r1, #5
 8009542:	69f9      	ldr	r1, [r7, #28]
 8009544:	4401      	add	r1, r0
 8009546:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800954a:	4313      	orrs	r3, r2
 800954c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955a:	691a      	ldr	r2, [r3, #16]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009564:	69b9      	ldr	r1, [r7, #24]
 8009566:	0148      	lsls	r0, r1, #5
 8009568:	69f9      	ldr	r1, [r7, #28]
 800956a:	4401      	add	r1, r0
 800956c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009570:	4313      	orrs	r3, r2
 8009572:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d10d      	bne.n	8009596 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d009      	beq.n	8009596 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	6919      	ldr	r1, [r3, #16]
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	4413      	add	r3, r2
 800958e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009592:	460a      	mov	r2, r1
 8009594:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	791b      	ldrb	r3, [r3, #4]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d128      	bne.n	80095f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d110      	bne.n	80095d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	0151      	lsls	r1, r2, #5
 80095c0:	69fa      	ldr	r2, [r7, #28]
 80095c2:	440a      	add	r2, r1
 80095c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095cc:	6013      	str	r3, [r2, #0]
 80095ce:	e00f      	b.n	80095f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	0151      	lsls	r1, r2, #5
 80095e2:	69fa      	ldr	r2, [r7, #28]
 80095e4:	440a      	add	r2, r1
 80095e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	0151      	lsls	r1, r2, #5
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	440a      	add	r2, r1
 8009606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800960a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800960e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3720      	adds	r7, #32
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	1ff80000 	.word	0x1ff80000

08009620 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	785b      	ldrb	r3, [r3, #1]
 800963c:	2b01      	cmp	r3, #1
 800963e:	f040 80ce 	bne.w	80097de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d132      	bne.n	80096b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	0151      	lsls	r1, r2, #5
 800965c:	697a      	ldr	r2, [r7, #20]
 800965e:	440a      	add	r2, r1
 8009660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009664:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009668:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800966c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	0151      	lsls	r1, r2, #5
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	440a      	add	r2, r1
 8009684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800968c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	4413      	add	r3, r2
 8009696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	0151      	lsls	r1, r2, #5
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	440a      	add	r2, r1
 80096a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096a8:	0cdb      	lsrs	r3, r3, #19
 80096aa:	04db      	lsls	r3, r3, #19
 80096ac:	6113      	str	r3, [r2, #16]
 80096ae:	e04e      	b.n	800974e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	0151      	lsls	r1, r2, #5
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	440a      	add	r2, r1
 80096c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ca:	0cdb      	lsrs	r3, r3, #19
 80096cc:	04db      	lsls	r3, r3, #19
 80096ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	0151      	lsls	r1, r2, #5
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	440a      	add	r2, r1
 80096e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	699a      	ldr	r2, [r3, #24]
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d903      	bls.n	8009708 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	68da      	ldr	r2, [r3, #12]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	015a      	lsls	r2, r3, #5
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	4413      	add	r3, r2
 8009710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	0151      	lsls	r1, r2, #5
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	440a      	add	r2, r1
 800971e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009726:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009734:	691a      	ldr	r2, [r3, #16]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800973e:	6939      	ldr	r1, [r7, #16]
 8009740:	0148      	lsls	r0, r1, #5
 8009742:	6979      	ldr	r1, [r7, #20]
 8009744:	4401      	add	r1, r0
 8009746:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800974a:	4313      	orrs	r3, r2
 800974c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d11e      	bne.n	8009792 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d009      	beq.n	8009770 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009768:	461a      	mov	r2, r3
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	0151      	lsls	r1, r2, #5
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	440a      	add	r2, r1
 8009786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800978a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	e097      	b.n	80098c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	4413      	add	r3, r2
 800979a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	0151      	lsls	r1, r2, #5
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	440a      	add	r2, r1
 80097a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 8083 	beq.w	80098c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f003 030f 	and.w	r3, r3, #15
 80097cc:	2101      	movs	r1, #1
 80097ce:	fa01 f303 	lsl.w	r3, r1, r3
 80097d2:	6979      	ldr	r1, [r7, #20]
 80097d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097d8:	4313      	orrs	r3, r2
 80097da:	634b      	str	r3, [r1, #52]	; 0x34
 80097dc:	e071      	b.n	80098c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	0151      	lsls	r1, r2, #5
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	440a      	add	r2, r1
 80097f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097f8:	0cdb      	lsrs	r3, r3, #19
 80097fa:	04db      	lsls	r3, r3, #19
 80097fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	4413      	add	r3, r2
 8009806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	0151      	lsls	r1, r2, #5
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	440a      	add	r2, r1
 8009814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009818:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800981c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009820:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	68da      	ldr	r2, [r3, #12]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	68da      	ldr	r2, [r3, #12]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	015a      	lsls	r2, r3, #5
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	4413      	add	r3, r2
 8009842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	0151      	lsls	r1, r2, #5
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	440a      	add	r2, r1
 8009850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	4413      	add	r3, r2
 8009862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009866:	691a      	ldr	r2, [r3, #16]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009870:	6939      	ldr	r1, [r7, #16]
 8009872:	0148      	lsls	r0, r1, #5
 8009874:	6979      	ldr	r1, [r7, #20]
 8009876:	4401      	add	r1, r0
 8009878:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800987c:	4313      	orrs	r3, r2
 800987e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009880:	79fb      	ldrb	r3, [r7, #7]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d10d      	bne.n	80098a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d009      	beq.n	80098a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	6919      	ldr	r1, [r3, #16]
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989e:	460a      	mov	r2, r1
 80098a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	0151      	lsls	r1, r2, #5
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	440a      	add	r2, r1
 80098b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	371c      	adds	r7, #28
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098da:	2300      	movs	r3, #0
 80098dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	785b      	ldrb	r3, [r3, #1]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d14a      	bne.n	8009984 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009906:	f040 8086 	bne.w	8009a16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	7812      	ldrb	r2, [r2, #0]
 800991e:	0151      	lsls	r1, r2, #5
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	440a      	add	r2, r1
 8009924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009928:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800992c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	7812      	ldrb	r2, [r2, #0]
 8009942:	0151      	lsls	r1, r2, #5
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	440a      	add	r2, r1
 8009948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800994c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009950:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3301      	adds	r3, #1
 8009956:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f242 7210 	movw	r2, #10000	; 0x2710
 800995e:	4293      	cmp	r3, r2
 8009960:	d902      	bls.n	8009968 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	75fb      	strb	r3, [r7, #23]
          break;
 8009966:	e056      	b.n	8009a16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800997c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009980:	d0e7      	beq.n	8009952 <USB_EPStopXfer+0x82>
 8009982:	e048      	b.n	8009a16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800999c:	d13b      	bne.n	8009a16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	015a      	lsls	r2, r3, #5
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	4413      	add	r3, r2
 80099a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	7812      	ldrb	r2, [r2, #0]
 80099b2:	0151      	lsls	r1, r2, #5
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	440a      	add	r2, r1
 80099b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	015a      	lsls	r2, r3, #5
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	4413      	add	r3, r2
 80099cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	7812      	ldrb	r2, [r2, #0]
 80099d6:	0151      	lsls	r1, r2, #5
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	440a      	add	r2, r1
 80099dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3301      	adds	r3, #1
 80099ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d902      	bls.n	80099fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	75fb      	strb	r3, [r7, #23]
          break;
 80099fa:	e00c      	b.n	8009a16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a14:	d0e7      	beq.n	80099e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	371c      	adds	r7, #28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b089      	sub	sp, #36	; 0x24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	4611      	mov	r1, r2
 8009a30:	461a      	mov	r2, r3
 8009a32:	460b      	mov	r3, r1
 8009a34:	71fb      	strb	r3, [r7, #7]
 8009a36:	4613      	mov	r3, r2
 8009a38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d123      	bne.n	8009a92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a4a:	88bb      	ldrh	r3, [r7, #4]
 8009a4c:	3303      	adds	r3, #3
 8009a4e:	089b      	lsrs	r3, r3, #2
 8009a50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a52:	2300      	movs	r3, #0
 8009a54:	61bb      	str	r3, [r7, #24]
 8009a56:	e018      	b.n	8009a8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a58:	79fb      	ldrb	r3, [r7, #7]
 8009a5a:	031a      	lsls	r2, r3, #12
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a64:	461a      	mov	r2, r3
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	3301      	adds	r3, #1
 8009a76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	3301      	adds	r3, #1
 8009a82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	3301      	adds	r3, #1
 8009a88:	61bb      	str	r3, [r7, #24]
 8009a8a:	69ba      	ldr	r2, [r7, #24]
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d3e2      	bcc.n	8009a58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3724      	adds	r7, #36	; 0x24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b08b      	sub	sp, #44	; 0x2c
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ab6:	88fb      	ldrh	r3, [r7, #6]
 8009ab8:	089b      	lsrs	r3, r3, #2
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009abe:	88fb      	ldrh	r3, [r7, #6]
 8009ac0:	f003 0303 	and.w	r3, r3, #3
 8009ac4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	623b      	str	r3, [r7, #32]
 8009aca:	e014      	b.n	8009af6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	3301      	adds	r3, #1
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	3301      	adds	r3, #1
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009af0:	6a3b      	ldr	r3, [r7, #32]
 8009af2:	3301      	adds	r3, #1
 8009af4:	623b      	str	r3, [r7, #32]
 8009af6:	6a3a      	ldr	r2, [r7, #32]
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d3e6      	bcc.n	8009acc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009afe:	8bfb      	ldrh	r3, [r7, #30]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d01e      	beq.n	8009b42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009b04:	2300      	movs	r3, #0
 8009b06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f107 0310 	add.w	r3, r7, #16
 8009b14:	6812      	ldr	r2, [r2, #0]
 8009b16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	fa22 f303 	lsr.w	r3, r2, r3
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	701a      	strb	r2, [r3, #0]
      i++;
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	3301      	adds	r3, #1
 8009b34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009b36:	8bfb      	ldrh	r3, [r7, #30]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b3c:	8bfb      	ldrh	r3, [r7, #30]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1ea      	bne.n	8009b18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	372c      	adds	r7, #44	; 0x2c
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	785b      	ldrb	r3, [r3, #1]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d12c      	bne.n	8009bc6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	db12      	blt.n	8009ba4 <USB_EPSetStall+0x54>
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00f      	beq.n	8009ba4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	0151      	lsls	r1, r2, #5
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	440a      	add	r2, r1
 8009b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ba2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	0151      	lsls	r1, r2, #5
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	440a      	add	r2, r1
 8009bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bc2:	6013      	str	r3, [r2, #0]
 8009bc4:	e02b      	b.n	8009c1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	015a      	lsls	r2, r3, #5
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4413      	add	r3, r2
 8009bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	db12      	blt.n	8009bfe <USB_EPSetStall+0xae>
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00f      	beq.n	8009bfe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	0151      	lsls	r1, r2, #5
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	440a      	add	r2, r1
 8009bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bfc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	0151      	lsls	r1, r2, #5
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	440a      	add	r2, r1
 8009c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	785b      	ldrb	r3, [r3, #1]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d128      	bne.n	8009c9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	0151      	lsls	r1, r2, #5
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	440a      	add	r2, r1
 8009c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	791b      	ldrb	r3, [r3, #4]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d003      	beq.n	8009c78 <USB_EPClearStall+0x4c>
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	791b      	ldrb	r3, [r3, #4]
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d138      	bne.n	8009cea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	0151      	lsls	r1, r2, #5
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	440a      	add	r2, r1
 8009c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	e027      	b.n	8009cea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	015a      	lsls	r2, r3, #5
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	0151      	lsls	r1, r2, #5
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	440a      	add	r2, r1
 8009cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	791b      	ldrb	r3, [r3, #4]
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	d003      	beq.n	8009cca <USB_EPClearStall+0x9e>
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	791b      	ldrb	r3, [r3, #4]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d10f      	bne.n	8009cea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	015a      	lsls	r2, r3, #5
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	0151      	lsls	r1, r2, #5
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	440a      	add	r2, r1
 8009ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	78fb      	ldrb	r3, [r7, #3]
 8009d26:	011b      	lsls	r3, r3, #4
 8009d28:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d2c:	68f9      	ldr	r1, [r7, #12]
 8009d2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d32:	4313      	orrs	r3, r2
 8009d34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d5e:	f023 0303 	bic.w	r3, r3, #3
 8009d62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d72:	f023 0302 	bic.w	r3, r3, #2
 8009d76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d86:	b480      	push	{r7}
 8009d88:	b085      	sub	sp, #20
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009da0:	f023 0303 	bic.w	r3, r3, #3
 8009da4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009db4:	f043 0302 	orr.w	r3, r3, #2
 8009db8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4013      	ands	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009de0:	68fb      	ldr	r3, [r7, #12]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b085      	sub	sp, #20
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	4013      	ands	r3, r2
 8009e10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	0c1b      	lsrs	r3, r3, #16
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b085      	sub	sp, #20
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	4013      	ands	r3, r2
 8009e44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	b29b      	uxth	r3, r3
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3714      	adds	r7, #20
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b085      	sub	sp, #20
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	460b      	mov	r3, r1
 8009e60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	4013      	ands	r3, r2
 8009e82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e84:	68bb      	ldr	r3, [r7, #8]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b087      	sub	sp, #28
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009eb6:	78fb      	ldrb	r3, [r7, #3]
 8009eb8:	f003 030f 	and.w	r3, r3, #15
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8009ec2:	01db      	lsls	r3, r3, #7
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009ecc:	78fb      	ldrb	r3, [r7, #3]
 8009ece:	015a      	lsls	r2, r3, #5
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	4013      	ands	r3, r2
 8009ede:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	371c      	adds	r7, #28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b083      	sub	sp, #12
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	f003 0301 	and.w	r3, r3, #1
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f28:	f023 0307 	bic.w	r3, r3, #7
 8009f2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b087      	sub	sp, #28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	607a      	str	r2, [r7, #4]
 8009f5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	333c      	adds	r3, #60	; 0x3c
 8009f66:	3304      	adds	r3, #4
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	4a26      	ldr	r2, [pc, #152]	; (800a008 <USB_EP0_OutStart+0xb8>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d90a      	bls.n	8009f8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f84:	d101      	bne.n	8009f8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	e037      	b.n	8009ffa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f90:	461a      	mov	r2, r3
 8009f92:	2300      	movs	r3, #0
 8009f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fb8:	f043 0318 	orr.w	r3, r3, #24
 8009fbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fcc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009fd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009fd2:	7afb      	ldrb	r3, [r7, #11]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d10f      	bne.n	8009ff8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fde:	461a      	mov	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	697a      	ldr	r2, [r7, #20]
 8009fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ff2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009ff6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	371c      	adds	r7, #28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	4f54300a 	.word	0x4f54300a

0800a00c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a014:	2300      	movs	r3, #0
 800a016:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3301      	adds	r3, #1
 800a01c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	4a13      	ldr	r2, [pc, #76]	; (800a070 <USB_CoreReset+0x64>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d901      	bls.n	800a02a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e01b      	b.n	800a062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	daf2      	bge.n	800a018 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	f043 0201 	orr.w	r2, r3, #1
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3301      	adds	r3, #1
 800a046:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	4a09      	ldr	r2, [pc, #36]	; (800a070 <USB_CoreReset+0x64>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d901      	bls.n	800a054 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e006      	b.n	800a062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d0f0      	beq.n	800a042 <USB_CoreReset+0x36>

  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3714      	adds	r7, #20
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	00030d40 	.word	0x00030d40

0800a074 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency an desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 800a07c:	4a18      	ldr	r2, [pc, #96]	; (800a0e0 <si5351_Init+0x6c>)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 800a082:	21ff      	movs	r1, #255	; 0xff
 800a084:	2003      	movs	r0, #3
 800a086:	f000 fa0d 	bl	800a4a4 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 800a08a:	2180      	movs	r1, #128	; 0x80
 800a08c:	2010      	movs	r0, #16
 800a08e:	f000 fa09 	bl	800a4a4 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 800a092:	2180      	movs	r1, #128	; 0x80
 800a094:	2011      	movs	r0, #17
 800a096:	f000 fa05 	bl	800a4a4 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 800a09a:	2180      	movs	r1, #128	; 0x80
 800a09c:	2012      	movs	r0, #18
 800a09e:	f000 fa01 	bl	800a4a4 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 800a0a2:	2180      	movs	r1, #128	; 0x80
 800a0a4:	2013      	movs	r0, #19
 800a0a6:	f000 f9fd 	bl	800a4a4 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 800a0aa:	2180      	movs	r1, #128	; 0x80
 800a0ac:	2014      	movs	r0, #20
 800a0ae:	f000 f9f9 	bl	800a4a4 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 800a0b2:	2180      	movs	r1, #128	; 0x80
 800a0b4:	2015      	movs	r0, #21
 800a0b6:	f000 f9f5 	bl	800a4a4 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 800a0ba:	2180      	movs	r1, #128	; 0x80
 800a0bc:	2016      	movs	r0, #22
 800a0be:	f000 f9f1 	bl	800a4a4 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 800a0c2:	2180      	movs	r1, #128	; 0x80
 800a0c4:	2017      	movs	r0, #23
 800a0c6:	f000 f9ed 	bl	800a4a4 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 800a0ca:	23c0      	movs	r3, #192	; 0xc0
 800a0cc:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	20b7      	movs	r0, #183	; 0xb7
 800a0d4:	f000 f9e6 	bl	800a4a4 <si5351_write>
}
 800a0d8:	bf00      	nop
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	2000045c 	.word	0x2000045c

0800a0e4 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08c      	sub	sp, #48	; 0x30
 800a0e8:	af02      	add	r7, sp, #8
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	6039      	str	r1, [r7, #0]
 800a0ee:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 800a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a104:	01da      	lsls	r2, r3, #7
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	01d9      	lsls	r1, r3, #7
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	fb91 f3f3 	sdiv	r3, r1, r3
 800a110:	4413      	add	r3, r2
 800a112:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a116:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	01db      	lsls	r3, r3, #7
 800a11c:	69fa      	ldr	r2, [r7, #28]
 800a11e:	fb93 f2f2 	sdiv	r2, r3, r2
 800a122:	69f9      	ldr	r1, [r7, #28]
 800a124:	fb01 f202 	mul.w	r2, r1, r2
 800a128:	1a9b      	subs	r3, r3, r2
 800a12a:	617b      	str	r3, [r7, #20]
    P3 = denom;
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 800a130:	79fb      	ldrb	r3, [r7, #7]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d101      	bne.n	800a13a <si5351_SetupPLL+0x56>
 800a136:	231a      	movs	r3, #26
 800a138:	e000      	b.n	800a13c <si5351_SetupPLL+0x58>
 800a13a:	2322      	movs	r3, #34	; 0x22
 800a13c:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 800a13e:	7bf8      	ldrb	r0, [r7, #15]
 800a140:	2300      	movs	r3, #0
 800a142:	9301      	str	r3, [sp, #4]
 800a144:	2300      	movs	r3, #0
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	69b9      	ldr	r1, [r7, #24]
 800a14e:	f000 f9d1 	bl	800a4f4 <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 800a152:	21a0      	movs	r1, #160	; 0xa0
 800a154:	20b1      	movs	r0, #177	; 0xb1
 800a156:	f000 f9a5 	bl	800a4a4 <si5351_write>
}
 800a15a:	bf00      	nop
 800a15c:	3728      	adds	r7, #40	; 0x28
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 800a162:	b580      	push	{r7, lr}
 800a164:	b08c      	sub	sp, #48	; 0x30
 800a166:	af02      	add	r7, sp, #8
 800a168:	603b      	str	r3, [r7, #0]
 800a16a:	4603      	mov	r3, r0
 800a16c:	71fb      	strb	r3, [r7, #7]
 800a16e:	460b      	mov	r3, r1
 800a170:	71bb      	strb	r3, [r7, #6]
 800a172:	4613      	mov	r3, r2
 800a174:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	2b02      	cmp	r3, #2
 800a192:	d901      	bls.n	800a198 <si5351_SetupOutput+0x36>
        return 1;
 800a194:	2301      	movs	r3, #1
 800a196:	e08d      	b.n	800a2b4 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10a      	bne.n	800a1b6 <si5351_SetupOutput+0x54>
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	2b07      	cmp	r3, #7
 800a1a4:	dd05      	ble.n	800a1b2 <si5351_SetupOutput+0x50>
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	2b08      	cmp	r3, #8
 800a1aa:	d104      	bne.n	800a1b6 <si5351_SetupOutput+0x54>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	e07e      	b.n	800a2b4 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d109      	bne.n	800a1d0 <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	623b      	str	r3, [r7, #32]
        P2 = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1ce:	e016      	b.n	800a1fe <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	01da      	lsls	r2, r3, #7
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	01d9      	lsls	r1, r3, #7
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	fb91 f3f3 	sdiv	r3, r1, r3
 800a1de:	4413      	add	r3, r2
 800a1e0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a1e4:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	01db      	lsls	r3, r3, #7
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	fb93 f2f2 	sdiv	r2, r3, r2
 800a1f0:	68b9      	ldr	r1, [r7, #8]
 800a1f2:	fb01 f202 	mul.w	r2, r1, r2
 800a1f6:	1a9b      	subs	r3, r3, r2
 800a1f8:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 800a202:	2300      	movs	r3, #0
 800a204:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	757b      	strb	r3, [r7, #21]
    switch (output) {
 800a20a:	79fb      	ldrb	r3, [r7, #7]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d014      	beq.n	800a23a <si5351_SetupOutput+0xd8>
 800a210:	2b02      	cmp	r3, #2
 800a212:	dc19      	bgt.n	800a248 <si5351_SetupOutput+0xe6>
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <si5351_SetupOutput+0xbc>
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d007      	beq.n	800a22c <si5351_SetupOutput+0xca>
 800a21c:	e014      	b.n	800a248 <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 800a21e:	232a      	movs	r3, #42	; 0x2a
 800a220:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 800a222:	23a5      	movs	r3, #165	; 0xa5
 800a224:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 800a226:	2310      	movs	r3, #16
 800a228:	757b      	strb	r3, [r7, #21]
        break;
 800a22a:	e00d      	b.n	800a248 <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 800a22c:	2332      	movs	r3, #50	; 0x32
 800a22e:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 800a230:	23a6      	movs	r3, #166	; 0xa6
 800a232:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 800a234:	2311      	movs	r3, #17
 800a236:	757b      	strb	r3, [r7, #21]
        break;
 800a238:	e006      	b.n	800a248 <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800a23a:	233a      	movs	r3, #58	; 0x3a
 800a23c:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 800a23e:	23a7      	movs	r3, #167	; 0xa7
 800a240:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 800a242:	2312      	movs	r3, #18
 800a244:	757b      	strb	r3, [r7, #21]
        break;
 800a246:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 800a248:	797b      	ldrb	r3, [r7, #5]
 800a24a:	f043 030c 	orr.w	r3, r3, #12
 800a24e:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 800a250:	79bb      	ldrb	r3, [r7, #6]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d103      	bne.n	800a25e <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 800a256:	7d3b      	ldrb	r3, [r7, #20]
 800a258:	f043 0320 	orr.w	r3, r3, #32
 800a25c:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d009      	beq.n	800a27a <si5351_SetupOutput+0x118>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <si5351_SetupOutput+0x110>
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d103      	bne.n	800a27a <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 800a272:	7d3b      	ldrb	r3, [r7, #20]
 800a274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a278:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 800a27a:	7d3a      	ldrb	r2, [r7, #20]
 800a27c:	7d7b      	ldrb	r3, [r7, #21]
 800a27e:	4611      	mov	r1, r2
 800a280:	4618      	mov	r0, r3
 800a282:	f000 f90f 	bl	800a4a4 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	7c1b      	ldrb	r3, [r3, #16]
 800a28a:	7df8      	ldrb	r0, [r7, #23]
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	6a39      	ldr	r1, [r7, #32]
 800a29a:	f000 f92b 	bl	800a4f4 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 800a29e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	7dbb      	ldrb	r3, [r7, #22]
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 f8f9 	bl	800a4a4 <si5351_write>

    return 0;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3728      	adds	r7, #40	; 0x28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 800a2bc:	b480      	push	{r7}
 800a2be:	b08f      	sub	sp, #60	; 0x3c
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a2ce:	da03      	bge.n	800a2d8 <si5351_Calc+0x1c>
 800a2d0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a2d4:	60fb      	str	r3, [r7, #12]
 800a2d6:	e005      	b.n	800a2e4 <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	4a4f      	ldr	r2, [pc, #316]	; (800a418 <si5351_Calc+0x15c>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	dd01      	ble.n	800a2e4 <si5351_Calc+0x28>
 800a2e0:	4b4d      	ldr	r3, [pc, #308]	; (800a418 <si5351_Calc+0x15c>)
 800a2e2:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	4a4b      	ldr	r2, [pc, #300]	; (800a41c <si5351_Calc+0x160>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	dc06      	bgt.n	800a300 <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	019b      	lsls	r3, r3, #6
 800a2f6:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2206      	movs	r2, #6
 800a2fc:	741a      	strb	r2, [r3, #16]
 800a2fe:	e002      	b.n	800a306 <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - ((Fclk/1000000)*si5351Correction)/100;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	4a45      	ldr	r2, [pc, #276]	; (800a420 <si5351_Calc+0x164>)
 800a30a:	fb82 1203 	smull	r1, r2, r2, r3
 800a30e:	1492      	asrs	r2, r2, #18
 800a310:	17db      	asrs	r3, r3, #31
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	4a43      	ldr	r2, [pc, #268]	; (800a424 <si5351_Calc+0x168>)
 800a316:	6812      	ldr	r2, [r2, #0]
 800a318:	fb02 f303 	mul.w	r3, r2, r3
 800a31c:	4a42      	ldr	r2, [pc, #264]	; (800a428 <si5351_Calc+0x16c>)
 800a31e:	fb82 1203 	smull	r1, r2, r2, r3
 800a322:	1152      	asrs	r2, r2, #5
 800a324:	17db      	asrs	r3, r3, #31
 800a326:	1a9b      	subs	r3, r3, r2
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4413      	add	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 800a32e:	4b3f      	ldr	r3, [pc, #252]	; (800a42c <si5351_Calc+0x170>)
 800a330:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	4a3e      	ldr	r2, [pc, #248]	; (800a430 <si5351_Calc+0x174>)
 800a336:	4293      	cmp	r3, r2
 800a338:	dc22      	bgt.n	800a380 <si5351_Calc+0xc4>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 800a33a:	2324      	movs	r3, #36	; 0x24
 800a33c:	637b      	str	r3, [r7, #52]	; 0x34
        b = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	633b      	str	r3, [r7, #48]	; 0x30
        c = 1;
 800a342:	2301      	movs	r3, #1
 800a344:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t Fpll = 900000000;
 800a346:	4b3b      	ldr	r3, [pc, #236]	; (800a434 <si5351_Calc+0x178>)
 800a348:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	fb92 f3f3 	sdiv	r3, r2, r3
 800a352:	62bb      	str	r3, [r7, #40]	; 0x28
        t = (Fclk >> 20) + 1;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	151b      	asrs	r3, r3, #20
 800a358:	3301      	adds	r3, #1
 800a35a:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	fb93 f2f2 	sdiv	r2, r3, r2
 800a364:	68f9      	ldr	r1, [r7, #12]
 800a366:	fb01 f202 	mul.w	r2, r1, r2
 800a36a:	1a9a      	subs	r2, r3, r2
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	fb92 f3f3 	sdiv	r3, r2, r3
 800a372:	627b      	str	r3, [r7, #36]	; 0x24
        z = Fclk / t;
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	fb92 f3f3 	sdiv	r3, r2, r3
 800a37c:	623b      	str	r3, [r7, #32]
 800a37e:	e032      	b.n	800a3e6 <si5351_Calc+0x12a>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	4a2d      	ldr	r2, [pc, #180]	; (800a438 <si5351_Calc+0x17c>)
 800a384:	4293      	cmp	r3, r2
 800a386:	dd02      	ble.n	800a38e <si5351_Calc+0xd2>
            x = 4;
 800a388:	2304      	movs	r3, #4
 800a38a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a38c:	e008      	b.n	800a3a0 <si5351_Calc+0xe4>
        } else if (Fclk >= 100000000) {
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	4a2a      	ldr	r2, [pc, #168]	; (800a43c <si5351_Calc+0x180>)
 800a392:	4293      	cmp	r3, r2
 800a394:	dd02      	ble.n	800a39c <si5351_Calc+0xe0>
            x = 6;
 800a396:	2306      	movs	r3, #6
 800a398:	62bb      	str	r3, [r7, #40]	; 0x28
 800a39a:	e001      	b.n	800a3a0 <si5351_Calc+0xe4>
        } else {
            x = 8;
 800a39c:	2308      	movs	r3, #8
 800a39e:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        y = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	627b      	str	r3, [r7, #36]	; 0x24
        z = 1;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	623b      	str	r3, [r7, #32]
        
        int32_t numerator = x*Fclk;
 800a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	fb02 f303 	mul.w	r3, r2, r3
 800a3b0:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 800a3b2:	69ba      	ldr	r2, [r7, #24]
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	fb92 f3f3 	sdiv	r3, r2, r3
 800a3ba:	637b      	str	r3, [r7, #52]	; 0x34
        t = (Fxtal >> 20) + 1;
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	151b      	asrs	r3, r3, #20
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	69fa      	ldr	r2, [r7, #28]
 800a3c8:	fb93 f2f2 	sdiv	r2, r3, r2
 800a3cc:	69f9      	ldr	r1, [r7, #28]
 800a3ce:	fb01 f202 	mul.w	r2, r1, r2
 800a3d2:	1a9a      	subs	r2, r3, r2
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	fb92 f3f3 	sdiv	r3, r2, r3
 800a3da:	633b      	str	r3, [r7, #48]	; 0x30
        c = Fxtal / t;
 800a3dc:	69fa      	ldr	r2, [r7, #28]
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	fb92 f3f3 	sdiv	r3, r2, r3
 800a3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    pll_conf->mult = a;
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3ea:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3f0:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3f6:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3fc:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a402:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a3a      	ldr	r2, [r7, #32]
 800a408:	60da      	str	r2, [r3, #12]
}
 800a40a:	bf00      	nop
 800a40c:	373c      	adds	r7, #60	; 0x3c
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	09896800 	.word	0x09896800
 800a41c:	000f423f 	.word	0x000f423f
 800a420:	431bde83 	.word	0x431bde83
 800a424:	2000045c 	.word	0x2000045c
 800a428:	51eb851f 	.word	0x51eb851f
 800a42c:	017d7840 	.word	0x017d7840
 800a430:	04d3f63f 	.word	0x04d3f63f
 800a434:	35a4e900 	.word	0x35a4e900
 800a438:	08f0d17f 	.word	0x08f0d17f
 800a43c:	05f5e0ff 	.word	0x05f5e0ff

0800a440 <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 800a440:	b580      	push	{r7, lr}
 800a442:	b08c      	sub	sp, #48	; 0x30
 800a444:	af02      	add	r7, sp, #8
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 800a44c:	f107 0208 	add.w	r2, r7, #8
 800a450:	f107 031c 	add.w	r3, r7, #28
 800a454:	4619      	mov	r1, r3
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff ff30 	bl	800a2bc <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 800a45c:	f107 031c 	add.w	r3, r7, #28
 800a460:	4619      	mov	r1, r3
 800a462:	2000      	movs	r0, #0
 800a464:	f7ff fe3e 	bl	800a0e4 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 800a468:	f107 0308 	add.w	r3, r7, #8
 800a46c:	78fa      	ldrb	r2, [r7, #3]
 800a46e:	2100      	movs	r1, #0
 800a470:	9100      	str	r1, [sp, #0]
 800a472:	2100      	movs	r1, #0
 800a474:	2000      	movs	r0, #0
 800a476:	f7ff fe74 	bl	800a162 <si5351_SetupOutput>
}
 800a47a:	bf00      	nop
 800a47c:	3728      	adds	r7, #40	; 0x28
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 800a482:	b580      	push	{r7, lr}
 800a484:	b082      	sub	sp, #8
 800a486:	af00      	add	r7, sp, #0
 800a488:	4603      	mov	r3, r0
 800a48a:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 800a48c:	79fb      	ldrb	r3, [r7, #7]
 800a48e:	43db      	mvns	r3, r3
 800a490:	b2db      	uxtb	r3, r3
 800a492:	4619      	mov	r1, r3
 800a494:	2003      	movs	r0, #3
 800a496:	f000 f805 	bl	800a4a4 <si5351_write>
}
 800a49a:	bf00      	nop
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
	...

0800a4a4 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af04      	add	r7, sp, #16
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	460a      	mov	r2, r1
 800a4ae:	71fb      	strb	r3, [r7, #7]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 800a4b4:	bf00      	nop
 800a4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ba:	2203      	movs	r2, #3
 800a4bc:	21c0      	movs	r1, #192	; 0xc0
 800a4be:	480c      	ldr	r0, [pc, #48]	; (800a4f0 <si5351_write+0x4c>)
 800a4c0:	f7f8 fc22 	bl	8002d08 <HAL_I2C_IsDeviceReady>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1f5      	bne.n	800a4b6 <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d2:	9302      	str	r3, [sp, #8]
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	9301      	str	r3, [sp, #4]
 800a4d8:	1dbb      	adds	r3, r7, #6
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	2301      	movs	r3, #1
 800a4de:	21c0      	movs	r1, #192	; 0xc0
 800a4e0:	4803      	ldr	r0, [pc, #12]	; (800a4f0 <si5351_write+0x4c>)
 800a4e2:	f7f8 fb0b 	bl	8002afc <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 800a4e6:	bf00      	nop
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20000208 	.word	0x20000208

0800a4f4 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	607a      	str	r2, [r7, #4]
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	121b      	asrs	r3, r3, #8
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	7bfb      	ldrb	r3, [r7, #15]
 800a50c:	4611      	mov	r1, r2
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff ffc8 	bl	800a4a4 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	3301      	adds	r3, #1
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	b2d2      	uxtb	r2, r2
 800a51e:	4611      	mov	r1, r2
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff ffbf 	bl	800a4a4 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	3302      	adds	r3, #2
 800a52a:	b2d8      	uxtb	r0, r3
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	141b      	asrs	r3, r3, #16
 800a530:	b25b      	sxtb	r3, r3
 800a532:	f003 0303 	and.w	r3, r3, #3
 800a536:	b25a      	sxtb	r2, r3
 800a538:	7e3b      	ldrb	r3, [r7, #24]
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	b25b      	sxtb	r3, r3
 800a53e:	f003 030c 	and.w	r3, r3, #12
 800a542:	b25b      	sxtb	r3, r3
 800a544:	4313      	orrs	r3, r2
 800a546:	b25a      	sxtb	r2, r3
 800a548:	7f3b      	ldrb	r3, [r7, #28]
 800a54a:	011b      	lsls	r3, r3, #4
 800a54c:	b25b      	sxtb	r3, r3
 800a54e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a552:	b25b      	sxtb	r3, r3
 800a554:	4313      	orrs	r3, r2
 800a556:	b25b      	sxtb	r3, r3
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	4619      	mov	r1, r3
 800a55c:	f7ff ffa2 	bl	800a4a4 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	3303      	adds	r3, #3
 800a564:	b2da      	uxtb	r2, r3
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	121b      	asrs	r3, r3, #8
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	4619      	mov	r1, r3
 800a56e:	4610      	mov	r0, r2
 800a570:	f7ff ff98 	bl	800a4a4 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 800a574:	7bfb      	ldrb	r3, [r7, #15]
 800a576:	3304      	adds	r3, #4
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	b2d2      	uxtb	r2, r2
 800a57e:	4611      	mov	r1, r2
 800a580:	4618      	mov	r0, r3
 800a582:	f7ff ff8f 	bl	800a4a4 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 800a586:	7bfb      	ldrb	r3, [r7, #15]
 800a588:	3305      	adds	r3, #5
 800a58a:	b2d8      	uxtb	r0, r3
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	131b      	asrs	r3, r3, #12
 800a590:	b25b      	sxtb	r3, r3
 800a592:	f023 030f 	bic.w	r3, r3, #15
 800a596:	b25a      	sxtb	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	141b      	asrs	r3, r3, #16
 800a59c:	b25b      	sxtb	r3, r3
 800a59e:	f003 030f 	and.w	r3, r3, #15
 800a5a2:	b25b      	sxtb	r3, r3
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	b25b      	sxtb	r3, r3
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	f7ff ff7a 	bl	800a4a4 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
 800a5b2:	3306      	adds	r3, #6
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	121b      	asrs	r3, r3, #8
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f7ff ff70 	bl	800a4a4 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
 800a5c6:	3307      	adds	r3, #7
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	b2d2      	uxtb	r2, r2
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7ff ff67 	bl	800a4a4 <si5351_write>
}
 800a5d6:	bf00      	nop
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a5ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a5f0:	f005 fa02 	bl	800f9f8 <USBD_static_malloc>
 800a5f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d109      	bne.n	800a610 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	32b0      	adds	r2, #176	; 0xb0
 800a606:	2100      	movs	r1, #0
 800a608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a60c:	2302      	movs	r3, #2
 800a60e:	e0d4      	b.n	800a7ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a610:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a614:	2100      	movs	r1, #0
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f005 fa7c 	bl	800fb14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	32b0      	adds	r2, #176	; 0xb0
 800a626:	68f9      	ldr	r1, [r7, #12]
 800a628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	32b0      	adds	r2, #176	; 0xb0
 800a636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	7c1b      	ldrb	r3, [r3, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d138      	bne.n	800a6ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a648:	4b5e      	ldr	r3, [pc, #376]	; (800a7c4 <USBD_CDC_Init+0x1e4>)
 800a64a:	7819      	ldrb	r1, [r3, #0]
 800a64c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a650:	2202      	movs	r2, #2
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f005 f8ad 	bl	800f7b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a658:	4b5a      	ldr	r3, [pc, #360]	; (800a7c4 <USBD_CDC_Init+0x1e4>)
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	f003 020f 	and.w	r2, r3, #15
 800a660:	6879      	ldr	r1, [r7, #4]
 800a662:	4613      	mov	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	440b      	add	r3, r1
 800a66c:	3324      	adds	r3, #36	; 0x24
 800a66e:	2201      	movs	r2, #1
 800a670:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a672:	4b55      	ldr	r3, [pc, #340]	; (800a7c8 <USBD_CDC_Init+0x1e8>)
 800a674:	7819      	ldrb	r1, [r3, #0]
 800a676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a67a:	2202      	movs	r2, #2
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f005 f898 	bl	800f7b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a682:	4b51      	ldr	r3, [pc, #324]	; (800a7c8 <USBD_CDC_Init+0x1e8>)
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	f003 020f 	and.w	r2, r3, #15
 800a68a:	6879      	ldr	r1, [r7, #4]
 800a68c:	4613      	mov	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	440b      	add	r3, r1
 800a696:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a69a:	2201      	movs	r2, #1
 800a69c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a69e:	4b4b      	ldr	r3, [pc, #300]	; (800a7cc <USBD_CDC_Init+0x1ec>)
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	f003 020f 	and.w	r2, r3, #15
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	440b      	add	r3, r1
 800a6b2:	3326      	adds	r3, #38	; 0x26
 800a6b4:	2210      	movs	r2, #16
 800a6b6:	801a      	strh	r2, [r3, #0]
 800a6b8:	e035      	b.n	800a726 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6ba:	4b42      	ldr	r3, [pc, #264]	; (800a7c4 <USBD_CDC_Init+0x1e4>)
 800a6bc:	7819      	ldrb	r1, [r3, #0]
 800a6be:	2340      	movs	r3, #64	; 0x40
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f005 f875 	bl	800f7b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6c8:	4b3e      	ldr	r3, [pc, #248]	; (800a7c4 <USBD_CDC_Init+0x1e4>)
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	f003 020f 	and.w	r2, r3, #15
 800a6d0:	6879      	ldr	r1, [r7, #4]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	440b      	add	r3, r1
 800a6dc:	3324      	adds	r3, #36	; 0x24
 800a6de:	2201      	movs	r2, #1
 800a6e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6e2:	4b39      	ldr	r3, [pc, #228]	; (800a7c8 <USBD_CDC_Init+0x1e8>)
 800a6e4:	7819      	ldrb	r1, [r3, #0]
 800a6e6:	2340      	movs	r3, #64	; 0x40
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f005 f861 	bl	800f7b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6f0:	4b35      	ldr	r3, [pc, #212]	; (800a7c8 <USBD_CDC_Init+0x1e8>)
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	f003 020f 	and.w	r2, r3, #15
 800a6f8:	6879      	ldr	r1, [r7, #4]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	440b      	add	r3, r1
 800a704:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a708:	2201      	movs	r2, #1
 800a70a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a70c:	4b2f      	ldr	r3, [pc, #188]	; (800a7cc <USBD_CDC_Init+0x1ec>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	f003 020f 	and.w	r2, r3, #15
 800a714:	6879      	ldr	r1, [r7, #4]
 800a716:	4613      	mov	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	440b      	add	r3, r1
 800a720:	3326      	adds	r3, #38	; 0x26
 800a722:	2210      	movs	r2, #16
 800a724:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a726:	4b29      	ldr	r3, [pc, #164]	; (800a7cc <USBD_CDC_Init+0x1ec>)
 800a728:	7819      	ldrb	r1, [r3, #0]
 800a72a:	2308      	movs	r3, #8
 800a72c:	2203      	movs	r2, #3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f005 f83f 	bl	800f7b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a734:	4b25      	ldr	r3, [pc, #148]	; (800a7cc <USBD_CDC_Init+0x1ec>)
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	f003 020f 	and.w	r2, r3, #15
 800a73c:	6879      	ldr	r1, [r7, #4]
 800a73e:	4613      	mov	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	440b      	add	r3, r1
 800a748:	3324      	adds	r3, #36	; 0x24
 800a74a:	2201      	movs	r2, #1
 800a74c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	33b0      	adds	r3, #176	; 0xb0
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a784:	2302      	movs	r3, #2
 800a786:	e018      	b.n	800a7ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	7c1b      	ldrb	r3, [r3, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a790:	4b0d      	ldr	r3, [pc, #52]	; (800a7c8 <USBD_CDC_Init+0x1e8>)
 800a792:	7819      	ldrb	r1, [r3, #0]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a79a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f005 f8f6 	bl	800f990 <USBD_LL_PrepareReceive>
 800a7a4:	e008      	b.n	800a7b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7a6:	4b08      	ldr	r3, [pc, #32]	; (800a7c8 <USBD_CDC_Init+0x1e8>)
 800a7a8:	7819      	ldrb	r1, [r3, #0]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7b0:	2340      	movs	r3, #64	; 0x40
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f005 f8ec 	bl	800f990 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	200000ff 	.word	0x200000ff
 800a7c8:	20000100 	.word	0x20000100
 800a7cc:	20000101 	.word	0x20000101

0800a7d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a7dc:	4b3a      	ldr	r3, [pc, #232]	; (800a8c8 <USBD_CDC_DeInit+0xf8>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f005 f80b 	bl	800f7fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a7e8:	4b37      	ldr	r3, [pc, #220]	; (800a8c8 <USBD_CDC_DeInit+0xf8>)
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	f003 020f 	and.w	r2, r3, #15
 800a7f0:	6879      	ldr	r1, [r7, #4]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	440b      	add	r3, r1
 800a7fc:	3324      	adds	r3, #36	; 0x24
 800a7fe:	2200      	movs	r2, #0
 800a800:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a802:	4b32      	ldr	r3, [pc, #200]	; (800a8cc <USBD_CDC_DeInit+0xfc>)
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f004 fff8 	bl	800f7fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a80e:	4b2f      	ldr	r3, [pc, #188]	; (800a8cc <USBD_CDC_DeInit+0xfc>)
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	f003 020f 	and.w	r2, r3, #15
 800a816:	6879      	ldr	r1, [r7, #4]
 800a818:	4613      	mov	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	440b      	add	r3, r1
 800a822:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a826:	2200      	movs	r2, #0
 800a828:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a82a:	4b29      	ldr	r3, [pc, #164]	; (800a8d0 <USBD_CDC_DeInit+0x100>)
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f004 ffe4 	bl	800f7fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a836:	4b26      	ldr	r3, [pc, #152]	; (800a8d0 <USBD_CDC_DeInit+0x100>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	f003 020f 	and.w	r2, r3, #15
 800a83e:	6879      	ldr	r1, [r7, #4]
 800a840:	4613      	mov	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	440b      	add	r3, r1
 800a84a:	3324      	adds	r3, #36	; 0x24
 800a84c:	2200      	movs	r2, #0
 800a84e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a850:	4b1f      	ldr	r3, [pc, #124]	; (800a8d0 <USBD_CDC_DeInit+0x100>)
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	f003 020f 	and.w	r2, r3, #15
 800a858:	6879      	ldr	r1, [r7, #4]
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	440b      	add	r3, r1
 800a864:	3326      	adds	r3, #38	; 0x26
 800a866:	2200      	movs	r2, #0
 800a868:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	32b0      	adds	r2, #176	; 0xb0
 800a874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d01f      	beq.n	800a8bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	33b0      	adds	r3, #176	; 0xb0
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	32b0      	adds	r2, #176	; 0xb0
 800a89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f005 f8b8 	bl	800fa14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	32b0      	adds	r2, #176	; 0xb0
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	200000ff 	.word	0x200000ff
 800a8cc:	20000100 	.word	0x20000100
 800a8d0:	20000101 	.word	0x20000101

0800a8d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	32b0      	adds	r2, #176	; 0xb0
 800a8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a900:	2303      	movs	r3, #3
 800a902:	e0bf      	b.n	800aa84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d050      	beq.n	800a9b2 <USBD_CDC_Setup+0xde>
 800a910:	2b20      	cmp	r3, #32
 800a912:	f040 80af 	bne.w	800aa74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	88db      	ldrh	r3, [r3, #6]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d03a      	beq.n	800a994 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	b25b      	sxtb	r3, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	da1b      	bge.n	800a960 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	33b0      	adds	r3, #176	; 0xb0
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a93e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	88d2      	ldrh	r2, [r2, #6]
 800a944:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	88db      	ldrh	r3, [r3, #6]
 800a94a:	2b07      	cmp	r3, #7
 800a94c:	bf28      	it	cs
 800a94e:	2307      	movcs	r3, #7
 800a950:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	89fa      	ldrh	r2, [r7, #14]
 800a956:	4619      	mov	r1, r3
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f001 fd43 	bl	800c3e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a95e:	e090      	b.n	800aa82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	785a      	ldrb	r2, [r3, #1]
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	88db      	ldrh	r3, [r3, #6]
 800a96e:	2b3f      	cmp	r3, #63	; 0x3f
 800a970:	d803      	bhi.n	800a97a <USBD_CDC_Setup+0xa6>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	88db      	ldrh	r3, [r3, #6]
 800a976:	b2da      	uxtb	r2, r3
 800a978:	e000      	b.n	800a97c <USBD_CDC_Setup+0xa8>
 800a97a:	2240      	movs	r2, #64	; 0x40
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a982:	6939      	ldr	r1, [r7, #16]
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a98a:	461a      	mov	r2, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 fd55 	bl	800c43c <USBD_CtlPrepareRx>
      break;
 800a992:	e076      	b.n	800aa82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	33b0      	adds	r3, #176	; 0xb0
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	7850      	ldrb	r0, [r2, #1]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	4798      	blx	r3
      break;
 800a9b0:	e067      	b.n	800aa82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	785b      	ldrb	r3, [r3, #1]
 800a9b6:	2b0b      	cmp	r3, #11
 800a9b8:	d851      	bhi.n	800aa5e <USBD_CDC_Setup+0x18a>
 800a9ba:	a201      	add	r2, pc, #4	; (adr r2, 800a9c0 <USBD_CDC_Setup+0xec>)
 800a9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c0:	0800a9f1 	.word	0x0800a9f1
 800a9c4:	0800aa6d 	.word	0x0800aa6d
 800a9c8:	0800aa5f 	.word	0x0800aa5f
 800a9cc:	0800aa5f 	.word	0x0800aa5f
 800a9d0:	0800aa5f 	.word	0x0800aa5f
 800a9d4:	0800aa5f 	.word	0x0800aa5f
 800a9d8:	0800aa5f 	.word	0x0800aa5f
 800a9dc:	0800aa5f 	.word	0x0800aa5f
 800a9e0:	0800aa5f 	.word	0x0800aa5f
 800a9e4:	0800aa5f 	.word	0x0800aa5f
 800a9e8:	0800aa1b 	.word	0x0800aa1b
 800a9ec:	0800aa45 	.word	0x0800aa45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b03      	cmp	r3, #3
 800a9fa:	d107      	bne.n	800aa0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a9fc:	f107 030a 	add.w	r3, r7, #10
 800aa00:	2202      	movs	r2, #2
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f001 fced 	bl	800c3e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa0a:	e032      	b.n	800aa72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 fc77 	bl	800c302 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa14:	2303      	movs	r3, #3
 800aa16:	75fb      	strb	r3, [r7, #23]
          break;
 800aa18:	e02b      	b.n	800aa72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d107      	bne.n	800aa36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa26:	f107 030d 	add.w	r3, r7, #13
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 fcd8 	bl	800c3e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa34:	e01d      	b.n	800aa72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f001 fc62 	bl	800c302 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	75fb      	strb	r3, [r7, #23]
          break;
 800aa42:	e016      	b.n	800aa72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b03      	cmp	r3, #3
 800aa4e:	d00f      	beq.n	800aa70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f001 fc55 	bl	800c302 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa5c:	e008      	b.n	800aa70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f001 fc4e 	bl	800c302 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa66:	2303      	movs	r3, #3
 800aa68:	75fb      	strb	r3, [r7, #23]
          break;
 800aa6a:	e002      	b.n	800aa72 <USBD_CDC_Setup+0x19e>
          break;
 800aa6c:	bf00      	nop
 800aa6e:	e008      	b.n	800aa82 <USBD_CDC_Setup+0x1ae>
          break;
 800aa70:	bf00      	nop
      }
      break;
 800aa72:	e006      	b.n	800aa82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 fc43 	bl	800c302 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa80:	bf00      	nop
  }

  return (uint8_t)ret;
 800aa82:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3718      	adds	r7, #24
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	32b0      	adds	r2, #176	; 0xb0
 800aaaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d101      	bne.n	800aab6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aab2:	2303      	movs	r3, #3
 800aab4:	e065      	b.n	800ab82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	32b0      	adds	r2, #176	; 0xb0
 800aac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aac6:	78fb      	ldrb	r3, [r7, #3]
 800aac8:	f003 020f 	and.w	r2, r3, #15
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	440b      	add	r3, r1
 800aad8:	3318      	adds	r3, #24
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d02f      	beq.n	800ab40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	f003 020f 	and.w	r2, r3, #15
 800aae6:	6879      	ldr	r1, [r7, #4]
 800aae8:	4613      	mov	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	440b      	add	r3, r1
 800aaf2:	3318      	adds	r3, #24
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	78fb      	ldrb	r3, [r7, #3]
 800aaf8:	f003 010f 	and.w	r1, r3, #15
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	460b      	mov	r3, r1
 800ab00:	00db      	lsls	r3, r3, #3
 800ab02:	440b      	add	r3, r1
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4403      	add	r3, r0
 800ab08:	3348      	adds	r3, #72	; 0x48
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab10:	fb01 f303 	mul.w	r3, r1, r3
 800ab14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d112      	bne.n	800ab40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab1a:	78fb      	ldrb	r3, [r7, #3]
 800ab1c:	f003 020f 	and.w	r2, r3, #15
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	440b      	add	r3, r1
 800ab2c:	3318      	adds	r3, #24
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab32:	78f9      	ldrb	r1, [r7, #3]
 800ab34:	2300      	movs	r3, #0
 800ab36:	2200      	movs	r2, #0
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f004 ff08 	bl	800f94e <USBD_LL_Transmit>
 800ab3e:	e01f      	b.n	800ab80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	33b0      	adds	r3, #176	; 0xb0
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4413      	add	r3, r2
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d010      	beq.n	800ab80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	33b0      	adds	r3, #176	; 0xb0
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ab7c:	78fa      	ldrb	r2, [r7, #3]
 800ab7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	460b      	mov	r3, r1
 800ab94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	32b0      	adds	r2, #176	; 0xb0
 800aba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	32b0      	adds	r2, #176	; 0xb0
 800abb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d101      	bne.n	800abbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800abb8:	2303      	movs	r3, #3
 800abba:	e01a      	b.n	800abf2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800abbc:	78fb      	ldrb	r3, [r7, #3]
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f004 ff06 	bl	800f9d2 <USBD_LL_GetRxDataSize>
 800abc6:	4602      	mov	r2, r0
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	33b0      	adds	r3, #176	; 0xb0
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800abec:	4611      	mov	r1, r2
 800abee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b084      	sub	sp, #16
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	32b0      	adds	r2, #176	; 0xb0
 800ac0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e025      	b.n	800ac68 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	33b0      	adds	r3, #176	; 0xb0
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d01a      	beq.n	800ac66 <USBD_CDC_EP0_RxReady+0x6c>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ac36:	2bff      	cmp	r3, #255	; 0xff
 800ac38:	d015      	beq.n	800ac66 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	33b0      	adds	r3, #176	; 0xb0
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ac52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac5a:	b292      	uxth	r2, r2
 800ac5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	22ff      	movs	r2, #255	; 0xff
 800ac62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac78:	2182      	movs	r1, #130	; 0x82
 800ac7a:	4818      	ldr	r0, [pc, #96]	; (800acdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac7c:	f000 fd09 	bl	800b692 <USBD_GetEpDesc>
 800ac80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac82:	2101      	movs	r1, #1
 800ac84:	4815      	ldr	r0, [pc, #84]	; (800acdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac86:	f000 fd04 	bl	800b692 <USBD_GetEpDesc>
 800ac8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac8c:	2181      	movs	r1, #129	; 0x81
 800ac8e:	4813      	ldr	r0, [pc, #76]	; (800acdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac90:	f000 fcff 	bl	800b692 <USBD_GetEpDesc>
 800ac94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	2210      	movs	r2, #16
 800aca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d006      	beq.n	800acb6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	2200      	movs	r2, #0
 800acac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acb0:	711a      	strb	r2, [r3, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d006      	beq.n	800acca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acc4:	711a      	strb	r2, [r3, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2243      	movs	r2, #67	; 0x43
 800acce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800acd0:	4b02      	ldr	r3, [pc, #8]	; (800acdc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	200000bc 	.word	0x200000bc

0800ace0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ace8:	2182      	movs	r1, #130	; 0x82
 800acea:	4818      	ldr	r0, [pc, #96]	; (800ad4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acec:	f000 fcd1 	bl	800b692 <USBD_GetEpDesc>
 800acf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acf2:	2101      	movs	r1, #1
 800acf4:	4815      	ldr	r0, [pc, #84]	; (800ad4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acf6:	f000 fccc 	bl	800b692 <USBD_GetEpDesc>
 800acfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acfc:	2181      	movs	r1, #129	; 0x81
 800acfe:	4813      	ldr	r0, [pc, #76]	; (800ad4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad00:	f000 fcc7 	bl	800b692 <USBD_GetEpDesc>
 800ad04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2210      	movs	r2, #16
 800ad10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d006      	beq.n	800ad26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	711a      	strb	r2, [r3, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f042 0202 	orr.w	r2, r2, #2
 800ad24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d006      	beq.n	800ad3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	711a      	strb	r2, [r3, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f042 0202 	orr.w	r2, r2, #2
 800ad38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2243      	movs	r2, #67	; 0x43
 800ad3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad40:	4b02      	ldr	r3, [pc, #8]	; (800ad4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	200000bc 	.word	0x200000bc

0800ad50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad58:	2182      	movs	r1, #130	; 0x82
 800ad5a:	4818      	ldr	r0, [pc, #96]	; (800adbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad5c:	f000 fc99 	bl	800b692 <USBD_GetEpDesc>
 800ad60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad62:	2101      	movs	r1, #1
 800ad64:	4815      	ldr	r0, [pc, #84]	; (800adbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad66:	f000 fc94 	bl	800b692 <USBD_GetEpDesc>
 800ad6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad6c:	2181      	movs	r1, #129	; 0x81
 800ad6e:	4813      	ldr	r0, [pc, #76]	; (800adbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad70:	f000 fc8f 	bl	800b692 <USBD_GetEpDesc>
 800ad74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	2210      	movs	r2, #16
 800ad80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d006      	beq.n	800ad96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad90:	711a      	strb	r2, [r3, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d006      	beq.n	800adaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ada4:	711a      	strb	r2, [r3, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2243      	movs	r2, #67	; 0x43
 800adae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adb0:	4b02      	ldr	r3, [pc, #8]	; (800adbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3718      	adds	r7, #24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	200000bc 	.word	0x200000bc

0800adc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	220a      	movs	r2, #10
 800adcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800adce:	4b03      	ldr	r3, [pc, #12]	; (800addc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800add0:	4618      	mov	r0, r3
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr
 800addc:	20000078 	.word	0x20000078

0800ade0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800adf0:	2303      	movs	r3, #3
 800adf2:	e009      	b.n	800ae08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	33b0      	adds	r3, #176	; 0xb0
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	32b0      	adds	r2, #176	; 0xb0
 800ae2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae2e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e008      	b.n	800ae4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	371c      	adds	r7, #28
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	32b0      	adds	r2, #176	; 0xb0
 800ae6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d101      	bne.n	800ae7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	e004      	b.n	800ae86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
	...

0800ae94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	32b0      	adds	r2, #176	; 0xb0
 800aea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeaa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	32b0      	adds	r2, #176	; 0xb0
 800aeb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d101      	bne.n	800aec2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e018      	b.n	800aef4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	7c1b      	ldrb	r3, [r3, #16]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10a      	bne.n	800aee0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aeca:	4b0c      	ldr	r3, [pc, #48]	; (800aefc <USBD_CDC_ReceivePacket+0x68>)
 800aecc:	7819      	ldrb	r1, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f004 fd59 	bl	800f990 <USBD_LL_PrepareReceive>
 800aede:	e008      	b.n	800aef2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aee0:	4b06      	ldr	r3, [pc, #24]	; (800aefc <USBD_CDC_ReceivePacket+0x68>)
 800aee2:	7819      	ldrb	r1, [r3, #0]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aeea:	2340      	movs	r3, #64	; 0x40
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f004 fd4f 	bl	800f990 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	20000100 	.word	0x20000100

0800af00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	4613      	mov	r3, r2
 800af0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af14:	2303      	movs	r3, #3
 800af16:	e01f      	b.n	800af58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d003      	beq.n	800af3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	79fa      	ldrb	r2, [r7, #7]
 800af4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f004 fbc9 	bl	800f6e4 <USBD_LL_Init>
 800af52:	4603      	mov	r3, r0
 800af54:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af56:	7dfb      	ldrb	r3, [r7, #23]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3718      	adds	r7, #24
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af74:	2303      	movs	r3, #3
 800af76:	e025      	b.n	800afc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	32ae      	adds	r2, #174	; 0xae
 800af8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00f      	beq.n	800afb4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	32ae      	adds	r2, #174	; 0xae
 800af9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa4:	f107 020e 	add.w	r2, r7, #14
 800afa8:	4610      	mov	r0, r2
 800afaa:	4798      	blx	r3
 800afac:	4602      	mov	r2, r0
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f004 fbd1 	bl	800f77c <USBD_LL_Start>
 800afda:	4603      	mov	r3, r0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800afee:	4618      	mov	r0, r3
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	460b      	mov	r3, r1
 800b004:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b010:	2b00      	cmp	r3, #0
 800b012:	d009      	beq.n	800b028 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	78fa      	ldrb	r2, [r7, #3]
 800b01e:	4611      	mov	r1, r2
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	4798      	blx	r3
 800b024:	4603      	mov	r3, r0
 800b026:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b028:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b084      	sub	sp, #16
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	460b      	mov	r3, r1
 800b03c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b03e:	2300      	movs	r3, #0
 800b040:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	78fa      	ldrb	r2, [r7, #3]
 800b04c:	4611      	mov	r1, r2
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	4798      	blx	r3
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b058:	2303      	movs	r3, #3
 800b05a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	4618      	mov	r0, r3
 800b07a:	f001 f908 	bl	800c28e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b08c:	461a      	mov	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b09a:	f003 031f 	and.w	r3, r3, #31
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d01a      	beq.n	800b0d8 <USBD_LL_SetupStage+0x72>
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d822      	bhi.n	800b0ec <USBD_LL_SetupStage+0x86>
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <USBD_LL_SetupStage+0x4a>
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d00a      	beq.n	800b0c4 <USBD_LL_SetupStage+0x5e>
 800b0ae:	e01d      	b.n	800b0ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 fb5f 	bl	800b77c <USBD_StdDevReq>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c2:	e020      	b.n	800b106 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fbc7 	bl	800b860 <USBD_StdItfReq>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b0d6:	e016      	b.n	800b106 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fc29 	bl	800b938 <USBD_StdEPReq>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ea:	e00c      	b.n	800b106 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b0f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f004 fb9e 	bl	800f83c <USBD_LL_StallEP>
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]
      break;
 800b104:	bf00      	nop
  }

  return ret;
 800b106:	7bfb      	ldrb	r3, [r7, #15]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	460b      	mov	r3, r1
 800b11a:	607a      	str	r2, [r7, #4]
 800b11c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b122:	7afb      	ldrb	r3, [r7, #11]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d16e      	bne.n	800b206 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b12e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b136:	2b03      	cmp	r3, #3
 800b138:	f040 8098 	bne.w	800b26c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	689a      	ldr	r2, [r3, #8]
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	429a      	cmp	r2, r3
 800b146:	d913      	bls.n	800b170 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	689a      	ldr	r2, [r3, #8]
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	1ad2      	subs	r2, r2, r3
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	68da      	ldr	r2, [r3, #12]
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	4293      	cmp	r3, r2
 800b160:	bf28      	it	cs
 800b162:	4613      	movcs	r3, r2
 800b164:	461a      	mov	r2, r3
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f001 f984 	bl	800c476 <USBD_CtlContinueRx>
 800b16e:	e07d      	b.n	800b26c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b176:	f003 031f 	and.w	r3, r3, #31
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d014      	beq.n	800b1a8 <USBD_LL_DataOutStage+0x98>
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d81d      	bhi.n	800b1be <USBD_LL_DataOutStage+0xae>
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <USBD_LL_DataOutStage+0x7c>
 800b186:	2b01      	cmp	r3, #1
 800b188:	d003      	beq.n	800b192 <USBD_LL_DataOutStage+0x82>
 800b18a:	e018      	b.n	800b1be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b18c:	2300      	movs	r3, #0
 800b18e:	75bb      	strb	r3, [r7, #22]
            break;
 800b190:	e018      	b.n	800b1c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	4619      	mov	r1, r3
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f000 fa5e 	bl	800b65e <USBD_CoreFindIF>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	75bb      	strb	r3, [r7, #22]
            break;
 800b1a6:	e00d      	b.n	800b1c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f000 fa60 	bl	800b678 <USBD_CoreFindEP>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	75bb      	strb	r3, [r7, #22]
            break;
 800b1bc:	e002      	b.n	800b1c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	75bb      	strb	r3, [r7, #22]
            break;
 800b1c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b1c4:	7dbb      	ldrb	r3, [r7, #22]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d119      	bne.n	800b1fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	d113      	bne.n	800b1fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b1d6:	7dba      	ldrb	r2, [r7, #22]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	32ae      	adds	r2, #174	; 0xae
 800b1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00b      	beq.n	800b1fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b1e6:	7dba      	ldrb	r2, [r7, #22]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b1ee:	7dba      	ldrb	r2, [r7, #22]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	32ae      	adds	r2, #174	; 0xae
 800b1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f001 f94a 	bl	800c498 <USBD_CtlSendStatus>
 800b204:	e032      	b.n	800b26c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b206:	7afb      	ldrb	r3, [r7, #11]
 800b208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	4619      	mov	r1, r3
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f000 fa31 	bl	800b678 <USBD_CoreFindEP>
 800b216:	4603      	mov	r3, r0
 800b218:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b21a:	7dbb      	ldrb	r3, [r7, #22]
 800b21c:	2bff      	cmp	r3, #255	; 0xff
 800b21e:	d025      	beq.n	800b26c <USBD_LL_DataOutStage+0x15c>
 800b220:	7dbb      	ldrb	r3, [r7, #22]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d122      	bne.n	800b26c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	2b03      	cmp	r3, #3
 800b230:	d117      	bne.n	800b262 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b232:	7dba      	ldrb	r2, [r7, #22]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	32ae      	adds	r2, #174	; 0xae
 800b238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00f      	beq.n	800b262 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b242:	7dba      	ldrb	r2, [r7, #22]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b24a:	7dba      	ldrb	r2, [r7, #22]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	32ae      	adds	r2, #174	; 0xae
 800b250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	7afa      	ldrb	r2, [r7, #11]
 800b258:	4611      	mov	r1, r2
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	4798      	blx	r3
 800b25e:	4603      	mov	r3, r0
 800b260:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b262:	7dfb      	ldrb	r3, [r7, #23]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d001      	beq.n	800b26c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	e000      	b.n	800b26e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b086      	sub	sp, #24
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	60f8      	str	r0, [r7, #12]
 800b27e:	460b      	mov	r3, r1
 800b280:	607a      	str	r2, [r7, #4]
 800b282:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b284:	7afb      	ldrb	r3, [r7, #11]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d16f      	bne.n	800b36a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	3314      	adds	r3, #20
 800b28e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b296:	2b02      	cmp	r3, #2
 800b298:	d15a      	bne.n	800b350 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	689a      	ldr	r2, [r3, #8]
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d914      	bls.n	800b2d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	689a      	ldr	r2, [r3, #8]
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	1ad2      	subs	r2, r2, r3
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	6879      	ldr	r1, [r7, #4]
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f001 f8ac 	bl	800c41a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f004 fb61 	bl	800f990 <USBD_LL_PrepareReceive>
 800b2ce:	e03f      	b.n	800b350 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	68da      	ldr	r2, [r3, #12]
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d11c      	bne.n	800b316 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d316      	bcc.n	800b316 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d20f      	bcs.n	800b316 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f001 f88d 	bl	800c41a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b308:	2300      	movs	r3, #0
 800b30a:	2200      	movs	r2, #0
 800b30c:	2100      	movs	r1, #0
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f004 fb3e 	bl	800f990 <USBD_LL_PrepareReceive>
 800b314:	e01c      	b.n	800b350 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b03      	cmp	r3, #3
 800b320:	d10f      	bne.n	800b342 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d009      	beq.n	800b342 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b342:	2180      	movs	r1, #128	; 0x80
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f004 fa79 	bl	800f83c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f001 f8b7 	bl	800c4be <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d03a      	beq.n	800b3d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7ff fe42 	bl	800afe4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2200      	movs	r2, #0
 800b364:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b368:	e032      	b.n	800b3d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b36a:	7afb      	ldrb	r3, [r7, #11]
 800b36c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b370:	b2db      	uxtb	r3, r3
 800b372:	4619      	mov	r1, r3
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 f97f 	bl	800b678 <USBD_CoreFindEP>
 800b37a:	4603      	mov	r3, r0
 800b37c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
 800b380:	2bff      	cmp	r3, #255	; 0xff
 800b382:	d025      	beq.n	800b3d0 <USBD_LL_DataInStage+0x15a>
 800b384:	7dfb      	ldrb	r3, [r7, #23]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d122      	bne.n	800b3d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b390:	b2db      	uxtb	r3, r3
 800b392:	2b03      	cmp	r3, #3
 800b394:	d11c      	bne.n	800b3d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b396:	7dfa      	ldrb	r2, [r7, #23]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	32ae      	adds	r2, #174	; 0xae
 800b39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d014      	beq.n	800b3d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b3a6:	7dfa      	ldrb	r2, [r7, #23]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b3ae:	7dfa      	ldrb	r2, [r7, #23]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	32ae      	adds	r2, #174	; 0xae
 800b3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	7afa      	ldrb	r2, [r7, #11]
 800b3bc:	4611      	mov	r1, r2
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	4798      	blx	r3
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b3c6:	7dbb      	ldrb	r3, [r7, #22]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d001      	beq.n	800b3d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b3cc:	7dbb      	ldrb	r3, [r7, #22]
 800b3ce:	e000      	b.n	800b3d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3718      	adds	r7, #24
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b412:	2b00      	cmp	r3, #0
 800b414:	d014      	beq.n	800b440 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00e      	beq.n	800b440 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	6852      	ldr	r2, [r2, #4]
 800b42e:	b2d2      	uxtb	r2, r2
 800b430:	4611      	mov	r1, r2
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	4798      	blx	r3
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b43c:	2303      	movs	r3, #3
 800b43e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b440:	2340      	movs	r3, #64	; 0x40
 800b442:	2200      	movs	r2, #0
 800b444:	2100      	movs	r1, #0
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f004 f9b3 	bl	800f7b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2240      	movs	r2, #64	; 0x40
 800b458:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b45c:	2340      	movs	r3, #64	; 0x40
 800b45e:	2200      	movs	r2, #0
 800b460:	2180      	movs	r1, #128	; 0x80
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f004 f9a5 	bl	800f7b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2240      	movs	r2, #64	; 0x40
 800b472:	621a      	str	r2, [r3, #32]

  return ret;
 800b474:	7bfb      	ldrb	r3, [r7, #15]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	460b      	mov	r3, r1
 800b488:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	78fa      	ldrb	r2, [r7, #3]
 800b48e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b49e:	b480      	push	{r7}
 800b4a0:	b083      	sub	sp, #12
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2204      	movs	r2, #4
 800b4b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	370c      	adds	r7, #12
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr

0800b4ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	b083      	sub	sp, #12
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b04      	cmp	r3, #4
 800b4dc:	d106      	bne.n	800b4ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b4e4:	b2da      	uxtb	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b082      	sub	sp, #8
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b03      	cmp	r3, #3
 800b50c:	d110      	bne.n	800b530 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00b      	beq.n	800b530 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b51e:	69db      	ldr	r3, [r3, #28]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d005      	beq.n	800b530 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b52a:	69db      	ldr	r3, [r3, #28]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b082      	sub	sp, #8
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	460b      	mov	r3, r1
 800b544:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	32ae      	adds	r2, #174	; 0xae
 800b550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b558:	2303      	movs	r3, #3
 800b55a:	e01c      	b.n	800b596 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b03      	cmp	r3, #3
 800b566:	d115      	bne.n	800b594 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	32ae      	adds	r2, #174	; 0xae
 800b572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b576:	6a1b      	ldr	r3, [r3, #32]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00b      	beq.n	800b594 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	32ae      	adds	r2, #174	; 0xae
 800b586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58a:	6a1b      	ldr	r3, [r3, #32]
 800b58c:	78fa      	ldrb	r2, [r7, #3]
 800b58e:	4611      	mov	r1, r2
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b082      	sub	sp, #8
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	32ae      	adds	r2, #174	; 0xae
 800b5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	e01c      	b.n	800b5fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b03      	cmp	r3, #3
 800b5ca:	d115      	bne.n	800b5f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	32ae      	adds	r2, #174	; 0xae
 800b5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00b      	beq.n	800b5f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	32ae      	adds	r2, #174	; 0xae
 800b5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f0:	78fa      	ldrb	r2, [r7, #3]
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b602:	b480      	push	{r7}
 800b604:	b083      	sub	sp, #12
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00e      	beq.n	800b654 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	6852      	ldr	r2, [r2, #4]
 800b642:	b2d2      	uxtb	r2, r2
 800b644:	4611      	mov	r1, r2
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	4798      	blx	r3
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d001      	beq.n	800b654 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b650:	2303      	movs	r3, #3
 800b652:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b654:	7bfb      	ldrb	r3, [r7, #15]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b65e:	b480      	push	{r7}
 800b660:	b083      	sub	sp, #12
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	460b      	mov	r3, r1
 800b668:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b66a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	460b      	mov	r3, r1
 800b682:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b684:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b686:	4618      	mov	r0, r3
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b086      	sub	sp, #24
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	885b      	ldrh	r3, [r3, #2]
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d920      	bls.n	800b6fc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b6c2:	e013      	b.n	800b6ec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b6c4:	f107 030a 	add.w	r3, r7, #10
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	6978      	ldr	r0, [r7, #20]
 800b6cc:	f000 f81b 	bl	800b706 <USBD_GetNextDesc>
 800b6d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	785b      	ldrb	r3, [r3, #1]
 800b6d6:	2b05      	cmp	r3, #5
 800b6d8:	d108      	bne.n	800b6ec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	789b      	ldrb	r3, [r3, #2]
 800b6e2:	78fa      	ldrb	r2, [r7, #3]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d008      	beq.n	800b6fa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	885b      	ldrh	r3, [r3, #2]
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	897b      	ldrh	r3, [r7, #10]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d8e5      	bhi.n	800b6c4 <USBD_GetEpDesc+0x32>
 800b6f8:	e000      	b.n	800b6fc <USBD_GetEpDesc+0x6a>
          break;
 800b6fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b6fc:	693b      	ldr	r3, [r7, #16]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b706:	b480      	push	{r7}
 800b708:	b085      	sub	sp, #20
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	881a      	ldrh	r2, [r3, #0]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	4413      	add	r3, r2
 800b720:	b29a      	uxth	r2, r3
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4413      	add	r3, r2
 800b730:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b732:	68fb      	ldr	r3, [r7, #12]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b740:	b480      	push	{r7}
 800b742:	b087      	sub	sp, #28
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	3301      	adds	r3, #1
 800b756:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b75e:	8a3b      	ldrh	r3, [r7, #16]
 800b760:	021b      	lsls	r3, r3, #8
 800b762:	b21a      	sxth	r2, r3
 800b764:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b768:	4313      	orrs	r3, r2
 800b76a:	b21b      	sxth	r3, r3
 800b76c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b76e:	89fb      	ldrh	r3, [r7, #14]
}
 800b770:	4618      	mov	r0, r3
 800b772:	371c      	adds	r7, #28
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b792:	2b40      	cmp	r3, #64	; 0x40
 800b794:	d005      	beq.n	800b7a2 <USBD_StdDevReq+0x26>
 800b796:	2b40      	cmp	r3, #64	; 0x40
 800b798:	d857      	bhi.n	800b84a <USBD_StdDevReq+0xce>
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00f      	beq.n	800b7be <USBD_StdDevReq+0x42>
 800b79e:	2b20      	cmp	r3, #32
 800b7a0:	d153      	bne.n	800b84a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	32ae      	adds	r2, #174	; 0xae
 800b7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	4798      	blx	r3
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b7bc:	e04a      	b.n	800b854 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	785b      	ldrb	r3, [r3, #1]
 800b7c2:	2b09      	cmp	r3, #9
 800b7c4:	d83b      	bhi.n	800b83e <USBD_StdDevReq+0xc2>
 800b7c6:	a201      	add	r2, pc, #4	; (adr r2, 800b7cc <USBD_StdDevReq+0x50>)
 800b7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7cc:	0800b821 	.word	0x0800b821
 800b7d0:	0800b835 	.word	0x0800b835
 800b7d4:	0800b83f 	.word	0x0800b83f
 800b7d8:	0800b82b 	.word	0x0800b82b
 800b7dc:	0800b83f 	.word	0x0800b83f
 800b7e0:	0800b7ff 	.word	0x0800b7ff
 800b7e4:	0800b7f5 	.word	0x0800b7f5
 800b7e8:	0800b83f 	.word	0x0800b83f
 800b7ec:	0800b817 	.word	0x0800b817
 800b7f0:	0800b809 	.word	0x0800b809
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b7f4:	6839      	ldr	r1, [r7, #0]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fa3c 	bl	800bc74 <USBD_GetDescriptor>
          break;
 800b7fc:	e024      	b.n	800b848 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 fba1 	bl	800bf48 <USBD_SetAddress>
          break;
 800b806:	e01f      	b.n	800b848 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fbe0 	bl	800bfd0 <USBD_SetConfig>
 800b810:	4603      	mov	r3, r0
 800b812:	73fb      	strb	r3, [r7, #15]
          break;
 800b814:	e018      	b.n	800b848 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fc83 	bl	800c124 <USBD_GetConfig>
          break;
 800b81e:	e013      	b.n	800b848 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fcb4 	bl	800c190 <USBD_GetStatus>
          break;
 800b828:	e00e      	b.n	800b848 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b82a:	6839      	ldr	r1, [r7, #0]
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fce3 	bl	800c1f8 <USBD_SetFeature>
          break;
 800b832:	e009      	b.n	800b848 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 fd07 	bl	800c24a <USBD_ClrFeature>
          break;
 800b83c:	e004      	b.n	800b848 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 fd5e 	bl	800c302 <USBD_CtlError>
          break;
 800b846:	bf00      	nop
      }
      break;
 800b848:	e004      	b.n	800b854 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 fd58 	bl	800c302 <USBD_CtlError>
      break;
 800b852:	bf00      	nop
  }

  return ret;
 800b854:	7bfb      	ldrb	r3, [r7, #15]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop

0800b860 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b876:	2b40      	cmp	r3, #64	; 0x40
 800b878:	d005      	beq.n	800b886 <USBD_StdItfReq+0x26>
 800b87a:	2b40      	cmp	r3, #64	; 0x40
 800b87c:	d852      	bhi.n	800b924 <USBD_StdItfReq+0xc4>
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d001      	beq.n	800b886 <USBD_StdItfReq+0x26>
 800b882:	2b20      	cmp	r3, #32
 800b884:	d14e      	bne.n	800b924 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	3b01      	subs	r3, #1
 800b890:	2b02      	cmp	r3, #2
 800b892:	d840      	bhi.n	800b916 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	889b      	ldrh	r3, [r3, #4]
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d836      	bhi.n	800b90c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	889b      	ldrh	r3, [r3, #4]
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7ff fed9 	bl	800b65e <USBD_CoreFindIF>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8b0:	7bbb      	ldrb	r3, [r7, #14]
 800b8b2:	2bff      	cmp	r3, #255	; 0xff
 800b8b4:	d01d      	beq.n	800b8f2 <USBD_StdItfReq+0x92>
 800b8b6:	7bbb      	ldrb	r3, [r7, #14]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d11a      	bne.n	800b8f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b8bc:	7bba      	ldrb	r2, [r7, #14]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	32ae      	adds	r2, #174	; 0xae
 800b8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00f      	beq.n	800b8ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b8cc:	7bba      	ldrb	r2, [r7, #14]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b8d4:	7bba      	ldrb	r2, [r7, #14]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	32ae      	adds	r2, #174	; 0xae
 800b8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	6839      	ldr	r1, [r7, #0]
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	4798      	blx	r3
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8ea:	e004      	b.n	800b8f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b8ec:	2303      	movs	r3, #3
 800b8ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8f0:	e001      	b.n	800b8f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	88db      	ldrh	r3, [r3, #6]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d110      	bne.n	800b920 <USBD_StdItfReq+0xc0>
 800b8fe:	7bfb      	ldrb	r3, [r7, #15]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10d      	bne.n	800b920 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fdc7 	bl	800c498 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b90a:	e009      	b.n	800b920 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fcf7 	bl	800c302 <USBD_CtlError>
          break;
 800b914:	e004      	b.n	800b920 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fcf2 	bl	800c302 <USBD_CtlError>
          break;
 800b91e:	e000      	b.n	800b922 <USBD_StdItfReq+0xc2>
          break;
 800b920:	bf00      	nop
      }
      break;
 800b922:	e004      	b.n	800b92e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b924:	6839      	ldr	r1, [r7, #0]
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 fceb 	bl	800c302 <USBD_CtlError>
      break;
 800b92c:	bf00      	nop
  }

  return ret;
 800b92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	889b      	ldrh	r3, [r3, #4]
 800b94a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b954:	2b40      	cmp	r3, #64	; 0x40
 800b956:	d007      	beq.n	800b968 <USBD_StdEPReq+0x30>
 800b958:	2b40      	cmp	r3, #64	; 0x40
 800b95a:	f200 817f 	bhi.w	800bc5c <USBD_StdEPReq+0x324>
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d02a      	beq.n	800b9b8 <USBD_StdEPReq+0x80>
 800b962:	2b20      	cmp	r3, #32
 800b964:	f040 817a 	bne.w	800bc5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f7ff fe83 	bl	800b678 <USBD_CoreFindEP>
 800b972:	4603      	mov	r3, r0
 800b974:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b976:	7b7b      	ldrb	r3, [r7, #13]
 800b978:	2bff      	cmp	r3, #255	; 0xff
 800b97a:	f000 8174 	beq.w	800bc66 <USBD_StdEPReq+0x32e>
 800b97e:	7b7b      	ldrb	r3, [r7, #13]
 800b980:	2b00      	cmp	r3, #0
 800b982:	f040 8170 	bne.w	800bc66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b986:	7b7a      	ldrb	r2, [r7, #13]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b98e:	7b7a      	ldrb	r2, [r7, #13]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	32ae      	adds	r2, #174	; 0xae
 800b994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f000 8163 	beq.w	800bc66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b9a0:	7b7a      	ldrb	r2, [r7, #13]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	32ae      	adds	r2, #174	; 0xae
 800b9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	6839      	ldr	r1, [r7, #0]
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	4798      	blx	r3
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b9b6:	e156      	b.n	800bc66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	785b      	ldrb	r3, [r3, #1]
 800b9bc:	2b03      	cmp	r3, #3
 800b9be:	d008      	beq.n	800b9d2 <USBD_StdEPReq+0x9a>
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	f300 8145 	bgt.w	800bc50 <USBD_StdEPReq+0x318>
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 809b 	beq.w	800bb02 <USBD_StdEPReq+0x1ca>
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d03c      	beq.n	800ba4a <USBD_StdEPReq+0x112>
 800b9d0:	e13e      	b.n	800bc50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d002      	beq.n	800b9e4 <USBD_StdEPReq+0xac>
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	d016      	beq.n	800ba10 <USBD_StdEPReq+0xd8>
 800b9e2:	e02c      	b.n	800ba3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9e4:	7bbb      	ldrb	r3, [r7, #14]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00d      	beq.n	800ba06 <USBD_StdEPReq+0xce>
 800b9ea:	7bbb      	ldrb	r3, [r7, #14]
 800b9ec:	2b80      	cmp	r3, #128	; 0x80
 800b9ee:	d00a      	beq.n	800ba06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9f0:	7bbb      	ldrb	r3, [r7, #14]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f003 ff21 	bl	800f83c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9fa:	2180      	movs	r1, #128	; 0x80
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f003 ff1d 	bl	800f83c <USBD_LL_StallEP>
 800ba02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba04:	e020      	b.n	800ba48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fc7a 	bl	800c302 <USBD_CtlError>
              break;
 800ba0e:	e01b      	b.n	800ba48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	885b      	ldrh	r3, [r3, #2]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10e      	bne.n	800ba36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba18:	7bbb      	ldrb	r3, [r7, #14]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00b      	beq.n	800ba36 <USBD_StdEPReq+0xfe>
 800ba1e:	7bbb      	ldrb	r3, [r7, #14]
 800ba20:	2b80      	cmp	r3, #128	; 0x80
 800ba22:	d008      	beq.n	800ba36 <USBD_StdEPReq+0xfe>
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	88db      	ldrh	r3, [r3, #6]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d104      	bne.n	800ba36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f003 ff03 	bl	800f83c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fd2e 	bl	800c498 <USBD_CtlSendStatus>

              break;
 800ba3c:	e004      	b.n	800ba48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ba3e:	6839      	ldr	r1, [r7, #0]
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fc5e 	bl	800c302 <USBD_CtlError>
              break;
 800ba46:	bf00      	nop
          }
          break;
 800ba48:	e107      	b.n	800bc5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d002      	beq.n	800ba5c <USBD_StdEPReq+0x124>
 800ba56:	2b03      	cmp	r3, #3
 800ba58:	d016      	beq.n	800ba88 <USBD_StdEPReq+0x150>
 800ba5a:	e04b      	b.n	800baf4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00d      	beq.n	800ba7e <USBD_StdEPReq+0x146>
 800ba62:	7bbb      	ldrb	r3, [r7, #14]
 800ba64:	2b80      	cmp	r3, #128	; 0x80
 800ba66:	d00a      	beq.n	800ba7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba68:	7bbb      	ldrb	r3, [r7, #14]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f003 fee5 	bl	800f83c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba72:	2180      	movs	r1, #128	; 0x80
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f003 fee1 	bl	800f83c <USBD_LL_StallEP>
 800ba7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba7c:	e040      	b.n	800bb00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fc3e 	bl	800c302 <USBD_CtlError>
              break;
 800ba86:	e03b      	b.n	800bb00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	885b      	ldrh	r3, [r3, #2]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d136      	bne.n	800bafe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba90:	7bbb      	ldrb	r3, [r7, #14]
 800ba92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d004      	beq.n	800baa4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba9a:	7bbb      	ldrb	r3, [r7, #14]
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f003 feeb 	bl	800f87a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fcf7 	bl	800c498 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
 800baac:	4619      	mov	r1, r3
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f7ff fde2 	bl	800b678 <USBD_CoreFindEP>
 800bab4:	4603      	mov	r3, r0
 800bab6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bab8:	7b7b      	ldrb	r3, [r7, #13]
 800baba:	2bff      	cmp	r3, #255	; 0xff
 800babc:	d01f      	beq.n	800bafe <USBD_StdEPReq+0x1c6>
 800babe:	7b7b      	ldrb	r3, [r7, #13]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d11c      	bne.n	800bafe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bac4:	7b7a      	ldrb	r2, [r7, #13]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bacc:	7b7a      	ldrb	r2, [r7, #13]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	32ae      	adds	r2, #174	; 0xae
 800bad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d010      	beq.n	800bafe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800badc:	7b7a      	ldrb	r2, [r7, #13]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	32ae      	adds	r2, #174	; 0xae
 800bae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	4798      	blx	r3
 800baee:	4603      	mov	r3, r0
 800baf0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800baf2:	e004      	b.n	800bafe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800baf4:	6839      	ldr	r1, [r7, #0]
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fc03 	bl	800c302 <USBD_CtlError>
              break;
 800bafc:	e000      	b.n	800bb00 <USBD_StdEPReq+0x1c8>
              break;
 800bafe:	bf00      	nop
          }
          break;
 800bb00:	e0ab      	b.n	800bc5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d002      	beq.n	800bb14 <USBD_StdEPReq+0x1dc>
 800bb0e:	2b03      	cmp	r3, #3
 800bb10:	d032      	beq.n	800bb78 <USBD_StdEPReq+0x240>
 800bb12:	e097      	b.n	800bc44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb14:	7bbb      	ldrb	r3, [r7, #14]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d007      	beq.n	800bb2a <USBD_StdEPReq+0x1f2>
 800bb1a:	7bbb      	ldrb	r3, [r7, #14]
 800bb1c:	2b80      	cmp	r3, #128	; 0x80
 800bb1e:	d004      	beq.n	800bb2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fbed 	bl	800c302 <USBD_CtlError>
                break;
 800bb28:	e091      	b.n	800bc4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	da0b      	bge.n	800bb4a <USBD_StdEPReq+0x212>
 800bb32:	7bbb      	ldrb	r3, [r7, #14]
 800bb34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb38:	4613      	mov	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	3310      	adds	r3, #16
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	4413      	add	r3, r2
 800bb46:	3304      	adds	r3, #4
 800bb48:	e00b      	b.n	800bb62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb4a:	7bbb      	ldrb	r3, [r7, #14]
 800bb4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb50:	4613      	mov	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	4413      	add	r3, r2
 800bb60:	3304      	adds	r3, #4
 800bb62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	2200      	movs	r2, #0
 800bb68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	2202      	movs	r2, #2
 800bb6e:	4619      	mov	r1, r3
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fc37 	bl	800c3e4 <USBD_CtlSendData>
              break;
 800bb76:	e06a      	b.n	800bc4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	da11      	bge.n	800bba4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb80:	7bbb      	ldrb	r3, [r7, #14]
 800bb82:	f003 020f 	and.w	r2, r3, #15
 800bb86:	6879      	ldr	r1, [r7, #4]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	4413      	add	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	440b      	add	r3, r1
 800bb92:	3324      	adds	r3, #36	; 0x24
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d117      	bne.n	800bbca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fbb0 	bl	800c302 <USBD_CtlError>
                  break;
 800bba2:	e054      	b.n	800bc4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bba4:	7bbb      	ldrb	r3, [r7, #14]
 800bba6:	f003 020f 	and.w	r2, r3, #15
 800bbaa:	6879      	ldr	r1, [r7, #4]
 800bbac:	4613      	mov	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	440b      	add	r3, r1
 800bbb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bbba:	881b      	ldrh	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d104      	bne.n	800bbca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fb9d 	bl	800c302 <USBD_CtlError>
                  break;
 800bbc8:	e041      	b.n	800bc4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	da0b      	bge.n	800bbea <USBD_StdEPReq+0x2b2>
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbd8:	4613      	mov	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4413      	add	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	3310      	adds	r3, #16
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	e00b      	b.n	800bc02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbea:	7bbb      	ldrb	r3, [r7, #14]
 800bbec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	4413      	add	r3, r2
 800bc00:	3304      	adds	r3, #4
 800bc02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d002      	beq.n	800bc10 <USBD_StdEPReq+0x2d8>
 800bc0a:	7bbb      	ldrb	r3, [r7, #14]
 800bc0c:	2b80      	cmp	r3, #128	; 0x80
 800bc0e:	d103      	bne.n	800bc18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	2200      	movs	r2, #0
 800bc14:	601a      	str	r2, [r3, #0]
 800bc16:	e00e      	b.n	800bc36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc18:	7bbb      	ldrb	r3, [r7, #14]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f003 fe4b 	bl	800f8b8 <USBD_LL_IsStallEP>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d003      	beq.n	800bc30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	601a      	str	r2, [r3, #0]
 800bc2e:	e002      	b.n	800bc36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2200      	movs	r2, #0
 800bc34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	2202      	movs	r2, #2
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fbd1 	bl	800c3e4 <USBD_CtlSendData>
              break;
 800bc42:	e004      	b.n	800bc4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bc44:	6839      	ldr	r1, [r7, #0]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fb5b 	bl	800c302 <USBD_CtlError>
              break;
 800bc4c:	bf00      	nop
          }
          break;
 800bc4e:	e004      	b.n	800bc5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fb55 	bl	800c302 <USBD_CtlError>
          break;
 800bc58:	bf00      	nop
      }
      break;
 800bc5a:	e005      	b.n	800bc68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fb4f 	bl	800c302 <USBD_CtlError>
      break;
 800bc64:	e000      	b.n	800bc68 <USBD_StdEPReq+0x330>
      break;
 800bc66:	bf00      	nop
  }

  return ret;
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
	...

0800bc74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc82:	2300      	movs	r3, #0
 800bc84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	885b      	ldrh	r3, [r3, #2]
 800bc8e:	0a1b      	lsrs	r3, r3, #8
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	3b01      	subs	r3, #1
 800bc94:	2b06      	cmp	r3, #6
 800bc96:	f200 8128 	bhi.w	800beea <USBD_GetDescriptor+0x276>
 800bc9a:	a201      	add	r2, pc, #4	; (adr r2, 800bca0 <USBD_GetDescriptor+0x2c>)
 800bc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca0:	0800bcbd 	.word	0x0800bcbd
 800bca4:	0800bcd5 	.word	0x0800bcd5
 800bca8:	0800bd15 	.word	0x0800bd15
 800bcac:	0800beeb 	.word	0x0800beeb
 800bcb0:	0800beeb 	.word	0x0800beeb
 800bcb4:	0800be8b 	.word	0x0800be8b
 800bcb8:	0800beb7 	.word	0x0800beb7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	7c12      	ldrb	r2, [r2, #16]
 800bcc8:	f107 0108 	add.w	r1, r7, #8
 800bccc:	4610      	mov	r0, r2
 800bcce:	4798      	blx	r3
 800bcd0:	60f8      	str	r0, [r7, #12]
      break;
 800bcd2:	e112      	b.n	800befa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	7c1b      	ldrb	r3, [r3, #16]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10d      	bne.n	800bcf8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce4:	f107 0208 	add.w	r2, r7, #8
 800bce8:	4610      	mov	r0, r2
 800bcea:	4798      	blx	r3
 800bcec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bcf6:	e100      	b.n	800befa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd00:	f107 0208 	add.w	r2, r7, #8
 800bd04:	4610      	mov	r0, r2
 800bd06:	4798      	blx	r3
 800bd08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	2202      	movs	r2, #2
 800bd10:	701a      	strb	r2, [r3, #0]
      break;
 800bd12:	e0f2      	b.n	800befa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	885b      	ldrh	r3, [r3, #2]
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b05      	cmp	r3, #5
 800bd1c:	f200 80ac 	bhi.w	800be78 <USBD_GetDescriptor+0x204>
 800bd20:	a201      	add	r2, pc, #4	; (adr r2, 800bd28 <USBD_GetDescriptor+0xb4>)
 800bd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd26:	bf00      	nop
 800bd28:	0800bd41 	.word	0x0800bd41
 800bd2c:	0800bd75 	.word	0x0800bd75
 800bd30:	0800bda9 	.word	0x0800bda9
 800bd34:	0800bddd 	.word	0x0800bddd
 800bd38:	0800be11 	.word	0x0800be11
 800bd3c:	0800be45 	.word	0x0800be45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00b      	beq.n	800bd64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	7c12      	ldrb	r2, [r2, #16]
 800bd58:	f107 0108 	add.w	r1, r7, #8
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	4798      	blx	r3
 800bd60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd62:	e091      	b.n	800be88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd64:	6839      	ldr	r1, [r7, #0]
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 facb 	bl	800c302 <USBD_CtlError>
            err++;
 800bd6c:	7afb      	ldrb	r3, [r7, #11]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	72fb      	strb	r3, [r7, #11]
          break;
 800bd72:	e089      	b.n	800be88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00b      	beq.n	800bd98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	7c12      	ldrb	r2, [r2, #16]
 800bd8c:	f107 0108 	add.w	r1, r7, #8
 800bd90:	4610      	mov	r0, r2
 800bd92:	4798      	blx	r3
 800bd94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd96:	e077      	b.n	800be88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fab1 	bl	800c302 <USBD_CtlError>
            err++;
 800bda0:	7afb      	ldrb	r3, [r7, #11]
 800bda2:	3301      	adds	r3, #1
 800bda4:	72fb      	strb	r3, [r7, #11]
          break;
 800bda6:	e06f      	b.n	800be88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00b      	beq.n	800bdcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	7c12      	ldrb	r2, [r2, #16]
 800bdc0:	f107 0108 	add.w	r1, r7, #8
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	4798      	blx	r3
 800bdc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdca:	e05d      	b.n	800be88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fa97 	bl	800c302 <USBD_CtlError>
            err++;
 800bdd4:	7afb      	ldrb	r3, [r7, #11]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdda:	e055      	b.n	800be88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00b      	beq.n	800be00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdee:	691b      	ldr	r3, [r3, #16]
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	7c12      	ldrb	r2, [r2, #16]
 800bdf4:	f107 0108 	add.w	r1, r7, #8
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	4798      	blx	r3
 800bdfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdfe:	e043      	b.n	800be88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be00:	6839      	ldr	r1, [r7, #0]
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fa7d 	bl	800c302 <USBD_CtlError>
            err++;
 800be08:	7afb      	ldrb	r3, [r7, #11]
 800be0a:	3301      	adds	r3, #1
 800be0c:	72fb      	strb	r3, [r7, #11]
          break;
 800be0e:	e03b      	b.n	800be88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00b      	beq.n	800be34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be22:	695b      	ldr	r3, [r3, #20]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	7c12      	ldrb	r2, [r2, #16]
 800be28:	f107 0108 	add.w	r1, r7, #8
 800be2c:	4610      	mov	r0, r2
 800be2e:	4798      	blx	r3
 800be30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be32:	e029      	b.n	800be88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fa63 	bl	800c302 <USBD_CtlError>
            err++;
 800be3c:	7afb      	ldrb	r3, [r7, #11]
 800be3e:	3301      	adds	r3, #1
 800be40:	72fb      	strb	r3, [r7, #11]
          break;
 800be42:	e021      	b.n	800be88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00b      	beq.n	800be68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be56:	699b      	ldr	r3, [r3, #24]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	7c12      	ldrb	r2, [r2, #16]
 800be5c:	f107 0108 	add.w	r1, r7, #8
 800be60:	4610      	mov	r0, r2
 800be62:	4798      	blx	r3
 800be64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be66:	e00f      	b.n	800be88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be68:	6839      	ldr	r1, [r7, #0]
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fa49 	bl	800c302 <USBD_CtlError>
            err++;
 800be70:	7afb      	ldrb	r3, [r7, #11]
 800be72:	3301      	adds	r3, #1
 800be74:	72fb      	strb	r3, [r7, #11]
          break;
 800be76:	e007      	b.n	800be88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fa41 	bl	800c302 <USBD_CtlError>
          err++;
 800be80:	7afb      	ldrb	r3, [r7, #11]
 800be82:	3301      	adds	r3, #1
 800be84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800be86:	bf00      	nop
      }
      break;
 800be88:	e037      	b.n	800befa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	7c1b      	ldrb	r3, [r3, #16]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d109      	bne.n	800bea6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be9a:	f107 0208 	add.w	r2, r7, #8
 800be9e:	4610      	mov	r0, r2
 800bea0:	4798      	blx	r3
 800bea2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bea4:	e029      	b.n	800befa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fa2a 	bl	800c302 <USBD_CtlError>
        err++;
 800beae:	7afb      	ldrb	r3, [r7, #11]
 800beb0:	3301      	adds	r3, #1
 800beb2:	72fb      	strb	r3, [r7, #11]
      break;
 800beb4:	e021      	b.n	800befa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	7c1b      	ldrb	r3, [r3, #16]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10d      	bne.n	800beda <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec6:	f107 0208 	add.w	r2, r7, #8
 800beca:	4610      	mov	r0, r2
 800becc:	4798      	blx	r3
 800bece:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	3301      	adds	r3, #1
 800bed4:	2207      	movs	r2, #7
 800bed6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bed8:	e00f      	b.n	800befa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fa10 	bl	800c302 <USBD_CtlError>
        err++;
 800bee2:	7afb      	ldrb	r3, [r7, #11]
 800bee4:	3301      	adds	r3, #1
 800bee6:	72fb      	strb	r3, [r7, #11]
      break;
 800bee8:	e007      	b.n	800befa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800beea:	6839      	ldr	r1, [r7, #0]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fa08 	bl	800c302 <USBD_CtlError>
      err++;
 800bef2:	7afb      	ldrb	r3, [r7, #11]
 800bef4:	3301      	adds	r3, #1
 800bef6:	72fb      	strb	r3, [r7, #11]
      break;
 800bef8:	bf00      	nop
  }

  if (err != 0U)
 800befa:	7afb      	ldrb	r3, [r7, #11]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d11e      	bne.n	800bf3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	88db      	ldrh	r3, [r3, #6]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d016      	beq.n	800bf36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bf08:	893b      	ldrh	r3, [r7, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00e      	beq.n	800bf2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	88da      	ldrh	r2, [r3, #6]
 800bf12:	893b      	ldrh	r3, [r7, #8]
 800bf14:	4293      	cmp	r3, r2
 800bf16:	bf28      	it	cs
 800bf18:	4613      	movcs	r3, r2
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf1e:	893b      	ldrh	r3, [r7, #8]
 800bf20:	461a      	mov	r2, r3
 800bf22:	68f9      	ldr	r1, [r7, #12]
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fa5d 	bl	800c3e4 <USBD_CtlSendData>
 800bf2a:	e009      	b.n	800bf40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f9e7 	bl	800c302 <USBD_CtlError>
 800bf34:	e004      	b.n	800bf40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 faae 	bl	800c498 <USBD_CtlSendStatus>
 800bf3c:	e000      	b.n	800bf40 <USBD_GetDescriptor+0x2cc>
    return;
 800bf3e:	bf00      	nop
  }
}
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop

0800bf48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	889b      	ldrh	r3, [r3, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d131      	bne.n	800bfbe <USBD_SetAddress+0x76>
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	88db      	ldrh	r3, [r3, #6]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d12d      	bne.n	800bfbe <USBD_SetAddress+0x76>
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	885b      	ldrh	r3, [r3, #2]
 800bf66:	2b7f      	cmp	r3, #127	; 0x7f
 800bf68:	d829      	bhi.n	800bfbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	885b      	ldrh	r3, [r3, #2]
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	2b03      	cmp	r3, #3
 800bf80:	d104      	bne.n	800bf8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f9bc 	bl	800c302 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf8a:	e01d      	b.n	800bfc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	7bfa      	ldrb	r2, [r7, #15]
 800bf90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
 800bf96:	4619      	mov	r1, r3
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f003 fcb9 	bl	800f910 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fa7a 	bl	800c498 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bfa4:	7bfb      	ldrb	r3, [r7, #15]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d004      	beq.n	800bfb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2202      	movs	r2, #2
 800bfae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfb2:	e009      	b.n	800bfc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfbc:	e004      	b.n	800bfc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 f99e 	bl	800c302 <USBD_CtlError>
  }
}
 800bfc6:	bf00      	nop
 800bfc8:	bf00      	nop
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	885b      	ldrh	r3, [r3, #2]
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	4b4e      	ldr	r3, [pc, #312]	; (800c120 <USBD_SetConfig+0x150>)
 800bfe6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bfe8:	4b4d      	ldr	r3, [pc, #308]	; (800c120 <USBD_SetConfig+0x150>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d905      	bls.n	800bffc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f985 	bl	800c302 <USBD_CtlError>
    return USBD_FAIL;
 800bff8:	2303      	movs	r3, #3
 800bffa:	e08c      	b.n	800c116 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c002:	b2db      	uxtb	r3, r3
 800c004:	2b02      	cmp	r3, #2
 800c006:	d002      	beq.n	800c00e <USBD_SetConfig+0x3e>
 800c008:	2b03      	cmp	r3, #3
 800c00a:	d029      	beq.n	800c060 <USBD_SetConfig+0x90>
 800c00c:	e075      	b.n	800c0fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c00e:	4b44      	ldr	r3, [pc, #272]	; (800c120 <USBD_SetConfig+0x150>)
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d020      	beq.n	800c058 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c016:	4b42      	ldr	r3, [pc, #264]	; (800c120 <USBD_SetConfig+0x150>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	461a      	mov	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c020:	4b3f      	ldr	r3, [pc, #252]	; (800c120 <USBD_SetConfig+0x150>)
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	4619      	mov	r1, r3
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7fe ffe7 	bl	800affa <USBD_SetClassConfig>
 800c02c:	4603      	mov	r3, r0
 800c02e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c030:	7bfb      	ldrb	r3, [r7, #15]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d008      	beq.n	800c048 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 f962 	bl	800c302 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2202      	movs	r2, #2
 800c042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c046:	e065      	b.n	800c114 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fa25 	bl	800c498 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2203      	movs	r2, #3
 800c052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c056:	e05d      	b.n	800c114 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fa1d 	bl	800c498 <USBD_CtlSendStatus>
      break;
 800c05e:	e059      	b.n	800c114 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c060:	4b2f      	ldr	r3, [pc, #188]	; (800c120 <USBD_SetConfig+0x150>)
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d112      	bne.n	800c08e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2202      	movs	r2, #2
 800c06c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c070:	4b2b      	ldr	r3, [pc, #172]	; (800c120 <USBD_SetConfig+0x150>)
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	461a      	mov	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c07a:	4b29      	ldr	r3, [pc, #164]	; (800c120 <USBD_SetConfig+0x150>)
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	4619      	mov	r1, r3
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f7fe ffd6 	bl	800b032 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fa06 	bl	800c498 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c08c:	e042      	b.n	800c114 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c08e:	4b24      	ldr	r3, [pc, #144]	; (800c120 <USBD_SetConfig+0x150>)
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	461a      	mov	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d02a      	beq.n	800c0f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7fe ffc4 	bl	800b032 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c0aa:	4b1d      	ldr	r3, [pc, #116]	; (800c120 <USBD_SetConfig+0x150>)
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0b4:	4b1a      	ldr	r3, [pc, #104]	; (800c120 <USBD_SetConfig+0x150>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f7fe ff9d 	bl	800affa <USBD_SetClassConfig>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c0c4:	7bfb      	ldrb	r3, [r7, #15]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00f      	beq.n	800c0ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f918 	bl	800c302 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	4619      	mov	r1, r3
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7fe ffa9 	bl	800b032 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c0e8:	e014      	b.n	800c114 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f9d4 	bl	800c498 <USBD_CtlSendStatus>
      break;
 800c0f0:	e010      	b.n	800c114 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f9d0 	bl	800c498 <USBD_CtlSendStatus>
      break;
 800c0f8:	e00c      	b.n	800c114 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f900 	bl	800c302 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c102:	4b07      	ldr	r3, [pc, #28]	; (800c120 <USBD_SetConfig+0x150>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7fe ff92 	bl	800b032 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c10e:	2303      	movs	r3, #3
 800c110:	73fb      	strb	r3, [r7, #15]
      break;
 800c112:	bf00      	nop
  }

  return ret;
 800c114:	7bfb      	ldrb	r3, [r7, #15]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	20000460 	.word	0x20000460

0800c124 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	88db      	ldrh	r3, [r3, #6]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d004      	beq.n	800c140 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f8e2 	bl	800c302 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c13e:	e023      	b.n	800c188 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b02      	cmp	r3, #2
 800c14a:	dc02      	bgt.n	800c152 <USBD_GetConfig+0x2e>
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	dc03      	bgt.n	800c158 <USBD_GetConfig+0x34>
 800c150:	e015      	b.n	800c17e <USBD_GetConfig+0x5a>
 800c152:	2b03      	cmp	r3, #3
 800c154:	d00b      	beq.n	800c16e <USBD_GetConfig+0x4a>
 800c156:	e012      	b.n	800c17e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2200      	movs	r2, #0
 800c15c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3308      	adds	r3, #8
 800c162:	2201      	movs	r2, #1
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f93c 	bl	800c3e4 <USBD_CtlSendData>
        break;
 800c16c:	e00c      	b.n	800c188 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	3304      	adds	r3, #4
 800c172:	2201      	movs	r2, #1
 800c174:	4619      	mov	r1, r3
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 f934 	bl	800c3e4 <USBD_CtlSendData>
        break;
 800c17c:	e004      	b.n	800c188 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f8be 	bl	800c302 <USBD_CtlError>
        break;
 800c186:	bf00      	nop
}
 800c188:	bf00      	nop
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d81e      	bhi.n	800c1e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	88db      	ldrh	r3, [r3, #6]
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	d004      	beq.n	800c1ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c1b0:	6839      	ldr	r1, [r7, #0]
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 f8a5 	bl	800c302 <USBD_CtlError>
        break;
 800c1b8:	e01a      	b.n	800c1f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2201      	movs	r2, #1
 800c1be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d005      	beq.n	800c1d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	f043 0202 	orr.w	r2, r3, #2
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	330c      	adds	r3, #12
 800c1da:	2202      	movs	r2, #2
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f900 	bl	800c3e4 <USBD_CtlSendData>
      break;
 800c1e4:	e004      	b.n	800c1f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c1e6:	6839      	ldr	r1, [r7, #0]
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f88a 	bl	800c302 <USBD_CtlError>
      break;
 800c1ee:	bf00      	nop
  }
}
 800c1f0:	bf00      	nop
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	885b      	ldrh	r3, [r3, #2]
 800c206:	2b01      	cmp	r3, #1
 800c208:	d107      	bne.n	800c21a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 f940 	bl	800c498 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c218:	e013      	b.n	800c242 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	885b      	ldrh	r3, [r3, #2]
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d10b      	bne.n	800c23a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	889b      	ldrh	r3, [r3, #4]
 800c226:	0a1b      	lsrs	r3, r3, #8
 800c228:	b29b      	uxth	r3, r3
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f930 	bl	800c498 <USBD_CtlSendStatus>
}
 800c238:	e003      	b.n	800c242 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f860 	bl	800c302 <USBD_CtlError>
}
 800c242:	bf00      	nop
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b082      	sub	sp, #8
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	3b01      	subs	r3, #1
 800c25e:	2b02      	cmp	r3, #2
 800c260:	d80b      	bhi.n	800c27a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	885b      	ldrh	r3, [r3, #2]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d10c      	bne.n	800c284 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f910 	bl	800c498 <USBD_CtlSendStatus>
      }
      break;
 800c278:	e004      	b.n	800c284 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f840 	bl	800c302 <USBD_CtlError>
      break;
 800c282:	e000      	b.n	800c286 <USBD_ClrFeature+0x3c>
      break;
 800c284:	bf00      	nop
  }
}
 800c286:	bf00      	nop
 800c288:	3708      	adds	r7, #8
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b084      	sub	sp, #16
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
 800c296:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	781a      	ldrb	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	781a      	ldrb	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f7ff fa41 	bl	800b740 <SWAPBYTE>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f7ff fa34 	bl	800b740 <SWAPBYTE>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	461a      	mov	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f7ff fa27 	bl	800b740 <SWAPBYTE>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	80da      	strh	r2, [r3, #6]
}
 800c2fa:	bf00      	nop
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b082      	sub	sp, #8
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c30c:	2180      	movs	r1, #128	; 0x80
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f003 fa94 	bl	800f83c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c314:	2100      	movs	r1, #0
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f003 fa90 	bl	800f83c <USBD_LL_StallEP>
}
 800c31c:	bf00      	nop
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c330:	2300      	movs	r3, #0
 800c332:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d036      	beq.n	800c3a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c33e:	6938      	ldr	r0, [r7, #16]
 800c340:	f000 f836 	bl	800c3b0 <USBD_GetLen>
 800c344:	4603      	mov	r3, r0
 800c346:	3301      	adds	r3, #1
 800c348:	b29b      	uxth	r3, r3
 800c34a:	005b      	lsls	r3, r3, #1
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c352:	7dfb      	ldrb	r3, [r7, #23]
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	4413      	add	r3, r2
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	7812      	ldrb	r2, [r2, #0]
 800c35c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c35e:	7dfb      	ldrb	r3, [r7, #23]
 800c360:	3301      	adds	r3, #1
 800c362:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c364:	7dfb      	ldrb	r3, [r7, #23]
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	4413      	add	r3, r2
 800c36a:	2203      	movs	r2, #3
 800c36c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c36e:	7dfb      	ldrb	r3, [r7, #23]
 800c370:	3301      	adds	r3, #1
 800c372:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c374:	e013      	b.n	800c39e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c376:	7dfb      	ldrb	r3, [r7, #23]
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	4413      	add	r3, r2
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	7812      	ldrb	r2, [r2, #0]
 800c380:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	3301      	adds	r3, #1
 800c386:	613b      	str	r3, [r7, #16]
    idx++;
 800c388:	7dfb      	ldrb	r3, [r7, #23]
 800c38a:	3301      	adds	r3, #1
 800c38c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c38e:	7dfb      	ldrb	r3, [r7, #23]
 800c390:	68ba      	ldr	r2, [r7, #8]
 800c392:	4413      	add	r3, r2
 800c394:	2200      	movs	r2, #0
 800c396:	701a      	strb	r2, [r3, #0]
    idx++;
 800c398:	7dfb      	ldrb	r3, [r7, #23]
 800c39a:	3301      	adds	r3, #1
 800c39c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1e7      	bne.n	800c376 <USBD_GetString+0x52>
 800c3a6:	e000      	b.n	800c3aa <USBD_GetString+0x86>
    return;
 800c3a8:	bf00      	nop
  }
}
 800c3aa:	3718      	adds	r7, #24
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c3c0:	e005      	b.n	800c3ce <USBD_GetLen+0x1e>
  {
    len++;
 800c3c2:	7bfb      	ldrb	r3, [r7, #15]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1f5      	bne.n	800c3c2 <USBD_GetLen+0x12>
  }

  return len;
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	2100      	movs	r1, #0
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f003 fa9f 	bl	800f94e <USBD_LL_Transmit>

  return USBD_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	60f8      	str	r0, [r7, #12]
 800c422:	60b9      	str	r1, [r7, #8]
 800c424:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	2100      	movs	r1, #0
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f003 fa8e 	bl	800f94e <USBD_LL_Transmit>

  return USBD_OK;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2203      	movs	r2, #3
 800c44c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	2100      	movs	r1, #0
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f003 fa92 	bl	800f990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b084      	sub	sp, #16
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	60f8      	str	r0, [r7, #12]
 800c47e:	60b9      	str	r1, [r7, #8]
 800c480:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	2100      	movs	r1, #0
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f003 fa81 	bl	800f990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2204      	movs	r2, #4
 800c4a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f003 fa4d 	bl	800f94e <USBD_LL_Transmit>

  return USBD_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b082      	sub	sp, #8
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2205      	movs	r2, #5
 800c4ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f003 fa5b 	bl	800f990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <__NVIC_SetPriority>:
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	6039      	str	r1, [r7, #0]
 800c4ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c4f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	db0a      	blt.n	800c50e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	b2da      	uxtb	r2, r3
 800c4fc:	490c      	ldr	r1, [pc, #48]	; (800c530 <__NVIC_SetPriority+0x4c>)
 800c4fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c502:	0112      	lsls	r2, r2, #4
 800c504:	b2d2      	uxtb	r2, r2
 800c506:	440b      	add	r3, r1
 800c508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c50c:	e00a      	b.n	800c524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	b2da      	uxtb	r2, r3
 800c512:	4908      	ldr	r1, [pc, #32]	; (800c534 <__NVIC_SetPriority+0x50>)
 800c514:	79fb      	ldrb	r3, [r7, #7]
 800c516:	f003 030f 	and.w	r3, r3, #15
 800c51a:	3b04      	subs	r3, #4
 800c51c:	0112      	lsls	r2, r2, #4
 800c51e:	b2d2      	uxtb	r2, r2
 800c520:	440b      	add	r3, r1
 800c522:	761a      	strb	r2, [r3, #24]
}
 800c524:	bf00      	nop
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	e000e100 	.word	0xe000e100
 800c534:	e000ed00 	.word	0xe000ed00

0800c538 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c538:	b580      	push	{r7, lr}
 800c53a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c53c:	4b05      	ldr	r3, [pc, #20]	; (800c554 <SysTick_Handler+0x1c>)
 800c53e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c540:	f001 fd4c 	bl	800dfdc <xTaskGetSchedulerState>
 800c544:	4603      	mov	r3, r0
 800c546:	2b01      	cmp	r3, #1
 800c548:	d001      	beq.n	800c54e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c54a:	f002 fb35 	bl	800ebb8 <xPortSysTickHandler>
  }
}
 800c54e:	bf00      	nop
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	e000e010 	.word	0xe000e010

0800c558 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c558:	b580      	push	{r7, lr}
 800c55a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c55c:	2100      	movs	r1, #0
 800c55e:	f06f 0004 	mvn.w	r0, #4
 800c562:	f7ff ffbf 	bl	800c4e4 <__NVIC_SetPriority>
#endif
}
 800c566:	bf00      	nop
 800c568:	bd80      	pop	{r7, pc}
	...

0800c56c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c572:	f3ef 8305 	mrs	r3, IPSR
 800c576:	603b      	str	r3, [r7, #0]
  return(result);
 800c578:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d003      	beq.n	800c586 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c57e:	f06f 0305 	mvn.w	r3, #5
 800c582:	607b      	str	r3, [r7, #4]
 800c584:	e00c      	b.n	800c5a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c586:	4b0a      	ldr	r3, [pc, #40]	; (800c5b0 <osKernelInitialize+0x44>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d105      	bne.n	800c59a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c58e:	4b08      	ldr	r3, [pc, #32]	; (800c5b0 <osKernelInitialize+0x44>)
 800c590:	2201      	movs	r2, #1
 800c592:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c594:	2300      	movs	r3, #0
 800c596:	607b      	str	r3, [r7, #4]
 800c598:	e002      	b.n	800c5a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c59a:	f04f 33ff 	mov.w	r3, #4294967295
 800c59e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c5a0:	687b      	ldr	r3, [r7, #4]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	370c      	adds	r7, #12
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	20000464 	.word	0x20000464

0800c5b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5ba:	f3ef 8305 	mrs	r3, IPSR
 800c5be:	603b      	str	r3, [r7, #0]
  return(result);
 800c5c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d003      	beq.n	800c5ce <osKernelStart+0x1a>
    stat = osErrorISR;
 800c5c6:	f06f 0305 	mvn.w	r3, #5
 800c5ca:	607b      	str	r3, [r7, #4]
 800c5cc:	e010      	b.n	800c5f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c5ce:	4b0b      	ldr	r3, [pc, #44]	; (800c5fc <osKernelStart+0x48>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d109      	bne.n	800c5ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c5d6:	f7ff ffbf 	bl	800c558 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c5da:	4b08      	ldr	r3, [pc, #32]	; (800c5fc <osKernelStart+0x48>)
 800c5dc:	2202      	movs	r2, #2
 800c5de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c5e0:	f001 f880 	bl	800d6e4 <vTaskStartScheduler>
      stat = osOK;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	607b      	str	r3, [r7, #4]
 800c5e8:	e002      	b.n	800c5f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c5f0:	687b      	ldr	r3, [r7, #4]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20000464 	.word	0x20000464

0800c600 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c600:	b580      	push	{r7, lr}
 800c602:	b08e      	sub	sp, #56	; 0x38
 800c604:	af04      	add	r7, sp, #16
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c60c:	2300      	movs	r3, #0
 800c60e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c610:	f3ef 8305 	mrs	r3, IPSR
 800c614:	617b      	str	r3, [r7, #20]
  return(result);
 800c616:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d17e      	bne.n	800c71a <osThreadNew+0x11a>
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d07b      	beq.n	800c71a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c622:	2380      	movs	r3, #128	; 0x80
 800c624:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c626:	2318      	movs	r3, #24
 800c628:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c62a:	2300      	movs	r3, #0
 800c62c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c62e:	f04f 33ff 	mov.w	r3, #4294967295
 800c632:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d045      	beq.n	800c6c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d002      	beq.n	800c648 <osThreadNew+0x48>
        name = attr->name;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d008      	beq.n	800c66e <osThreadNew+0x6e>
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	2b38      	cmp	r3, #56	; 0x38
 800c660:	d805      	bhi.n	800c66e <osThreadNew+0x6e>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	f003 0301 	and.w	r3, r3, #1
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d001      	beq.n	800c672 <osThreadNew+0x72>
        return (NULL);
 800c66e:	2300      	movs	r3, #0
 800c670:	e054      	b.n	800c71c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	695b      	ldr	r3, [r3, #20]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d003      	beq.n	800c682 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	695b      	ldr	r3, [r3, #20]
 800c67e:	089b      	lsrs	r3, r3, #2
 800c680:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00e      	beq.n	800c6a8 <osThreadNew+0xa8>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	2bbf      	cmp	r3, #191	; 0xbf
 800c690:	d90a      	bls.n	800c6a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c696:	2b00      	cmp	r3, #0
 800c698:	d006      	beq.n	800c6a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d002      	beq.n	800c6a8 <osThreadNew+0xa8>
        mem = 1;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	61bb      	str	r3, [r7, #24]
 800c6a6:	e010      	b.n	800c6ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10c      	bne.n	800c6ca <osThreadNew+0xca>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d108      	bne.n	800c6ca <osThreadNew+0xca>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d104      	bne.n	800c6ca <osThreadNew+0xca>
          mem = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	61bb      	str	r3, [r7, #24]
 800c6c4:	e001      	b.n	800c6ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d110      	bne.n	800c6f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6d8:	9202      	str	r2, [sp, #8]
 800c6da:	9301      	str	r3, [sp, #4]
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	6a3a      	ldr	r2, [r7, #32]
 800c6e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f000 fe0c 	bl	800d304 <xTaskCreateStatic>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	613b      	str	r3, [r7, #16]
 800c6f0:	e013      	b.n	800c71a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d110      	bne.n	800c71a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	f107 0310 	add.w	r3, r7, #16
 800c700:	9301      	str	r3, [sp, #4]
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	9300      	str	r3, [sp, #0]
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f000 fe57 	bl	800d3be <xTaskCreate>
 800c710:	4603      	mov	r3, r0
 800c712:	2b01      	cmp	r3, #1
 800c714:	d001      	beq.n	800c71a <osThreadNew+0x11a>
            hTask = NULL;
 800c716:	2300      	movs	r3, #0
 800c718:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c71a:	693b      	ldr	r3, [r7, #16]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3728      	adds	r7, #40	; 0x28
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c72c:	f3ef 8305 	mrs	r3, IPSR
 800c730:	60bb      	str	r3, [r7, #8]
  return(result);
 800c732:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c734:	2b00      	cmp	r3, #0
 800c736:	d003      	beq.n	800c740 <osDelay+0x1c>
    stat = osErrorISR;
 800c738:	f06f 0305 	mvn.w	r3, #5
 800c73c:	60fb      	str	r3, [r7, #12]
 800c73e:	e007      	b.n	800c750 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c740:	2300      	movs	r3, #0
 800c742:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d002      	beq.n	800c750 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 ff96 	bl	800d67c <vTaskDelay>
    }
  }

  return (stat);
 800c750:	68fb      	ldr	r3, [r7, #12]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
	...

0800c75c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	4a07      	ldr	r2, [pc, #28]	; (800c788 <vApplicationGetIdleTaskMemory+0x2c>)
 800c76c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	4a06      	ldr	r2, [pc, #24]	; (800c78c <vApplicationGetIdleTaskMemory+0x30>)
 800c772:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2280      	movs	r2, #128	; 0x80
 800c778:	601a      	str	r2, [r3, #0]
}
 800c77a:	bf00      	nop
 800c77c:	3714      	adds	r7, #20
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	20000468 	.word	0x20000468
 800c78c:	20000528 	.word	0x20000528

0800c790 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	4a07      	ldr	r2, [pc, #28]	; (800c7bc <vApplicationGetTimerTaskMemory+0x2c>)
 800c7a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	4a06      	ldr	r2, [pc, #24]	; (800c7c0 <vApplicationGetTimerTaskMemory+0x30>)
 800c7a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c7ae:	601a      	str	r2, [r3, #0]
}
 800c7b0:	bf00      	nop
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr
 800c7bc:	20000728 	.word	0x20000728
 800c7c0:	200007e8 	.word	0x200007e8

0800c7c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f103 0208 	add.w	r2, r3, #8
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f103 0208 	add.w	r2, r3, #8
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f103 0208 	add.w	r2, r3, #8
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c812:	bf00      	nop
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c81e:	b480      	push	{r7}
 800c820:	b085      	sub	sp, #20
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
 800c826:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	689a      	ldr	r2, [r3, #8]
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	683a      	ldr	r2, [r7, #0]
 800c842:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	1c5a      	adds	r2, r3, #1
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	601a      	str	r2, [r3, #0]
}
 800c85a:	bf00      	nop
 800c85c:	3714      	adds	r7, #20
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr

0800c866 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c866:	b480      	push	{r7}
 800c868:	b085      	sub	sp, #20
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c87c:	d103      	bne.n	800c886 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	691b      	ldr	r3, [r3, #16]
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	e00c      	b.n	800c8a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	3308      	adds	r3, #8
 800c88a:	60fb      	str	r3, [r7, #12]
 800c88c:	e002      	b.n	800c894 <vListInsert+0x2e>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d2f6      	bcs.n	800c88e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	685a      	ldr	r2, [r3, #4]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	683a      	ldr	r2, [r7, #0]
 800c8ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	1c5a      	adds	r2, r3, #1
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	601a      	str	r2, [r3, #0]
}
 800c8cc:	bf00      	nop
 800c8ce:	3714      	adds	r7, #20
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	6892      	ldr	r2, [r2, #8]
 800c8ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	6852      	ldr	r2, [r2, #4]
 800c8f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	429a      	cmp	r2, r3
 800c902:	d103      	bne.n	800c90c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	689a      	ldr	r2, [r3, #8]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	1e5a      	subs	r2, r3, #1
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3714      	adds	r7, #20
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10a      	bne.n	800c956 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c952:	bf00      	nop
 800c954:	e7fe      	b.n	800c954 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c956:	f002 f89d 	bl	800ea94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c962:	68f9      	ldr	r1, [r7, #12]
 800c964:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c966:	fb01 f303 	mul.w	r3, r1, r3
 800c96a:	441a      	add	r2, r3
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2200      	movs	r2, #0
 800c974:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c986:	3b01      	subs	r3, #1
 800c988:	68f9      	ldr	r1, [r7, #12]
 800c98a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c98c:	fb01 f303 	mul.w	r3, r1, r3
 800c990:	441a      	add	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	22ff      	movs	r2, #255	; 0xff
 800c99a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	22ff      	movs	r2, #255	; 0xff
 800c9a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d114      	bne.n	800c9d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	691b      	ldr	r3, [r3, #16]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d01a      	beq.n	800c9ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	3310      	adds	r3, #16
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f001 f94b 	bl	800dc54 <xTaskRemoveFromEventList>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d012      	beq.n	800c9ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c9c4:	4b0c      	ldr	r3, [pc, #48]	; (800c9f8 <xQueueGenericReset+0xcc>)
 800c9c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ca:	601a      	str	r2, [r3, #0]
 800c9cc:	f3bf 8f4f 	dsb	sy
 800c9d0:	f3bf 8f6f 	isb	sy
 800c9d4:	e009      	b.n	800c9ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	3310      	adds	r3, #16
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7ff fef2 	bl	800c7c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	3324      	adds	r3, #36	; 0x24
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7ff feed 	bl	800c7c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c9ea:	f002 f883 	bl	800eaf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c9ee:	2301      	movs	r3, #1
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	e000ed04 	.word	0xe000ed04

0800c9fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b08e      	sub	sp, #56	; 0x38
 800ca00:	af02      	add	r7, sp, #8
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	607a      	str	r2, [r7, #4]
 800ca08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10a      	bne.n	800ca26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10a      	bne.n	800ca42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ca2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca30:	f383 8811 	msr	BASEPRI, r3
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca3e:	bf00      	nop
 800ca40:	e7fe      	b.n	800ca40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d002      	beq.n	800ca4e <xQueueGenericCreateStatic+0x52>
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <xQueueGenericCreateStatic+0x56>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e000      	b.n	800ca54 <xQueueGenericCreateStatic+0x58>
 800ca52:	2300      	movs	r3, #0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d10a      	bne.n	800ca6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ca58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5c:	f383 8811 	msr	BASEPRI, r3
 800ca60:	f3bf 8f6f 	isb	sy
 800ca64:	f3bf 8f4f 	dsb	sy
 800ca68:	623b      	str	r3, [r7, #32]
}
 800ca6a:	bf00      	nop
 800ca6c:	e7fe      	b.n	800ca6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d102      	bne.n	800ca7a <xQueueGenericCreateStatic+0x7e>
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d101      	bne.n	800ca7e <xQueueGenericCreateStatic+0x82>
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	e000      	b.n	800ca80 <xQueueGenericCreateStatic+0x84>
 800ca7e:	2300      	movs	r3, #0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d10a      	bne.n	800ca9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ca84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca88:	f383 8811 	msr	BASEPRI, r3
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f3bf 8f4f 	dsb	sy
 800ca94:	61fb      	str	r3, [r7, #28]
}
 800ca96:	bf00      	nop
 800ca98:	e7fe      	b.n	800ca98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca9a:	2350      	movs	r3, #80	; 0x50
 800ca9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	2b50      	cmp	r3, #80	; 0x50
 800caa2:	d00a      	beq.n	800caba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800caa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	61bb      	str	r3, [r7, #24]
}
 800cab6:	bf00      	nop
 800cab8:	e7fe      	b.n	800cab8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800caba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00d      	beq.n	800cae2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cace:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad4:	9300      	str	r3, [sp, #0]
 800cad6:	4613      	mov	r3, r2
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	68b9      	ldr	r1, [r7, #8]
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f000 f805 	bl	800caec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3730      	adds	r7, #48	; 0x30
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
 800caf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d103      	bne.n	800cb08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	69ba      	ldr	r2, [r7, #24]
 800cb04:	601a      	str	r2, [r3, #0]
 800cb06:	e002      	b.n	800cb0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb1a:	2101      	movs	r1, #1
 800cb1c:	69b8      	ldr	r0, [r7, #24]
 800cb1e:	f7ff ff05 	bl	800c92c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	78fa      	ldrb	r2, [r7, #3]
 800cb26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb2a:	bf00      	nop
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
	...

0800cb34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b08e      	sub	sp, #56	; 0x38
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
 800cb40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb42:	2300      	movs	r3, #0
 800cb44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10a      	bne.n	800cb66 <xQueueGenericSend+0x32>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d103      	bne.n	800cb74 <xQueueGenericSend+0x40>
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d101      	bne.n	800cb78 <xQueueGenericSend+0x44>
 800cb74:	2301      	movs	r3, #1
 800cb76:	e000      	b.n	800cb7a <xQueueGenericSend+0x46>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10a      	bne.n	800cb94 <xQueueGenericSend+0x60>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb90:	bf00      	nop
 800cb92:	e7fe      	b.n	800cb92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d103      	bne.n	800cba2 <xQueueGenericSend+0x6e>
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d101      	bne.n	800cba6 <xQueueGenericSend+0x72>
 800cba2:	2301      	movs	r3, #1
 800cba4:	e000      	b.n	800cba8 <xQueueGenericSend+0x74>
 800cba6:	2300      	movs	r3, #0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10a      	bne.n	800cbc2 <xQueueGenericSend+0x8e>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	623b      	str	r3, [r7, #32]
}
 800cbbe:	bf00      	nop
 800cbc0:	e7fe      	b.n	800cbc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbc2:	f001 fa0b 	bl	800dfdc <xTaskGetSchedulerState>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d102      	bne.n	800cbd2 <xQueueGenericSend+0x9e>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d101      	bne.n	800cbd6 <xQueueGenericSend+0xa2>
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	e000      	b.n	800cbd8 <xQueueGenericSend+0xa4>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d10a      	bne.n	800cbf2 <xQueueGenericSend+0xbe>
	__asm volatile
 800cbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe0:	f383 8811 	msr	BASEPRI, r3
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	61fb      	str	r3, [r7, #28]
}
 800cbee:	bf00      	nop
 800cbf0:	e7fe      	b.n	800cbf0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbf2:	f001 ff4f 	bl	800ea94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d302      	bcc.n	800cc08 <xQueueGenericSend+0xd4>
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d129      	bne.n	800cc5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	68b9      	ldr	r1, [r7, #8]
 800cc0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc0e:	f000 fa0b 	bl	800d028 <prvCopyDataToQueue>
 800cc12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d010      	beq.n	800cc3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1e:	3324      	adds	r3, #36	; 0x24
 800cc20:	4618      	mov	r0, r3
 800cc22:	f001 f817 	bl	800dc54 <xTaskRemoveFromEventList>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d013      	beq.n	800cc54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc2c:	4b3f      	ldr	r3, [pc, #252]	; (800cd2c <xQueueGenericSend+0x1f8>)
 800cc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	e00a      	b.n	800cc54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d007      	beq.n	800cc54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc44:	4b39      	ldr	r3, [pc, #228]	; (800cd2c <xQueueGenericSend+0x1f8>)
 800cc46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc4a:	601a      	str	r2, [r3, #0]
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc54:	f001 ff4e 	bl	800eaf4 <vPortExitCritical>
				return pdPASS;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	e063      	b.n	800cd24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d103      	bne.n	800cc6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc62:	f001 ff47 	bl	800eaf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc66:	2300      	movs	r3, #0
 800cc68:	e05c      	b.n	800cd24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d106      	bne.n	800cc7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc70:	f107 0314 	add.w	r3, r7, #20
 800cc74:	4618      	mov	r0, r3
 800cc76:	f001 f851 	bl	800dd1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc7e:	f001 ff39 	bl	800eaf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc82:	f000 fda1 	bl	800d7c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc86:	f001 ff05 	bl	800ea94 <vPortEnterCritical>
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc90:	b25b      	sxtb	r3, r3
 800cc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc96:	d103      	bne.n	800cca0 <xQueueGenericSend+0x16c>
 800cc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cca6:	b25b      	sxtb	r3, r3
 800cca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccac:	d103      	bne.n	800ccb6 <xQueueGenericSend+0x182>
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccb6:	f001 ff1d 	bl	800eaf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccba:	1d3a      	adds	r2, r7, #4
 800ccbc:	f107 0314 	add.w	r3, r7, #20
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f001 f840 	bl	800dd48 <xTaskCheckForTimeOut>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d124      	bne.n	800cd18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccd0:	f000 faa2 	bl	800d218 <prvIsQueueFull>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d018      	beq.n	800cd0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccdc:	3310      	adds	r3, #16
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	4611      	mov	r1, r2
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 ff66 	bl	800dbb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccea:	f000 fa2d 	bl	800d148 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ccee:	f000 fd79 	bl	800d7e4 <xTaskResumeAll>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f47f af7c 	bne.w	800cbf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ccfa:	4b0c      	ldr	r3, [pc, #48]	; (800cd2c <xQueueGenericSend+0x1f8>)
 800ccfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd00:	601a      	str	r2, [r3, #0]
 800cd02:	f3bf 8f4f 	dsb	sy
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	e772      	b.n	800cbf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd0e:	f000 fa1b 	bl	800d148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd12:	f000 fd67 	bl	800d7e4 <xTaskResumeAll>
 800cd16:	e76c      	b.n	800cbf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd1a:	f000 fa15 	bl	800d148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd1e:	f000 fd61 	bl	800d7e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3738      	adds	r7, #56	; 0x38
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	e000ed04 	.word	0xe000ed04

0800cd30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b090      	sub	sp, #64	; 0x40
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]
 800cd3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10a      	bne.n	800cd5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4c:	f383 8811 	msr	BASEPRI, r3
 800cd50:	f3bf 8f6f 	isb	sy
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd5a:	bf00      	nop
 800cd5c:	e7fe      	b.n	800cd5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d103      	bne.n	800cd6c <xQueueGenericSendFromISR+0x3c>
 800cd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d101      	bne.n	800cd70 <xQueueGenericSendFromISR+0x40>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e000      	b.n	800cd72 <xQueueGenericSendFromISR+0x42>
 800cd70:	2300      	movs	r3, #0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d10a      	bne.n	800cd8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd88:	bf00      	nop
 800cd8a:	e7fe      	b.n	800cd8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d103      	bne.n	800cd9a <xQueueGenericSendFromISR+0x6a>
 800cd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d101      	bne.n	800cd9e <xQueueGenericSendFromISR+0x6e>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e000      	b.n	800cda0 <xQueueGenericSendFromISR+0x70>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10a      	bne.n	800cdba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	623b      	str	r3, [r7, #32]
}
 800cdb6:	bf00      	nop
 800cdb8:	e7fe      	b.n	800cdb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdba:	f001 ff4d 	bl	800ec58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cdbe:	f3ef 8211 	mrs	r2, BASEPRI
 800cdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc6:	f383 8811 	msr	BASEPRI, r3
 800cdca:	f3bf 8f6f 	isb	sy
 800cdce:	f3bf 8f4f 	dsb	sy
 800cdd2:	61fa      	str	r2, [r7, #28]
 800cdd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cdd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d302      	bcc.n	800cdec <xQueueGenericSendFromISR+0xbc>
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d12f      	bne.n	800ce4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdfa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdfc:	683a      	ldr	r2, [r7, #0]
 800cdfe:	68b9      	ldr	r1, [r7, #8]
 800ce00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce02:	f000 f911 	bl	800d028 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ce0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce0e:	d112      	bne.n	800ce36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d016      	beq.n	800ce46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1a:	3324      	adds	r3, #36	; 0x24
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f000 ff19 	bl	800dc54 <xTaskRemoveFromEventList>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00e      	beq.n	800ce46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00b      	beq.n	800ce46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	e007      	b.n	800ce46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	b25a      	sxtb	r2, r3
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce46:	2301      	movs	r3, #1
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ce4a:	e001      	b.n	800ce50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3740      	adds	r7, #64	; 0x40
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
	...

0800ce68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b08c      	sub	sp, #48	; 0x30
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce74:	2300      	movs	r3, #0
 800ce76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10a      	bne.n	800ce98 <xQueueReceive+0x30>
	__asm volatile
 800ce82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	623b      	str	r3, [r7, #32]
}
 800ce94:	bf00      	nop
 800ce96:	e7fe      	b.n	800ce96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d103      	bne.n	800cea6 <xQueueReceive+0x3e>
 800ce9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d101      	bne.n	800ceaa <xQueueReceive+0x42>
 800cea6:	2301      	movs	r3, #1
 800cea8:	e000      	b.n	800ceac <xQueueReceive+0x44>
 800ceaa:	2300      	movs	r3, #0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10a      	bne.n	800cec6 <xQueueReceive+0x5e>
	__asm volatile
 800ceb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb4:	f383 8811 	msr	BASEPRI, r3
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	f3bf 8f4f 	dsb	sy
 800cec0:	61fb      	str	r3, [r7, #28]
}
 800cec2:	bf00      	nop
 800cec4:	e7fe      	b.n	800cec4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cec6:	f001 f889 	bl	800dfdc <xTaskGetSchedulerState>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d102      	bne.n	800ced6 <xQueueReceive+0x6e>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d101      	bne.n	800ceda <xQueueReceive+0x72>
 800ced6:	2301      	movs	r3, #1
 800ced8:	e000      	b.n	800cedc <xQueueReceive+0x74>
 800ceda:	2300      	movs	r3, #0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d10a      	bne.n	800cef6 <xQueueReceive+0x8e>
	__asm volatile
 800cee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	61bb      	str	r3, [r7, #24]
}
 800cef2:	bf00      	nop
 800cef4:	e7fe      	b.n	800cef4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cef6:	f001 fdcd 	bl	800ea94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d01f      	beq.n	800cf46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf06:	68b9      	ldr	r1, [r7, #8]
 800cf08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf0a:	f000 f8f7 	bl	800d0fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf10:	1e5a      	subs	r2, r3, #1
 800cf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf18:	691b      	ldr	r3, [r3, #16]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00f      	beq.n	800cf3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf20:	3310      	adds	r3, #16
 800cf22:	4618      	mov	r0, r3
 800cf24:	f000 fe96 	bl	800dc54 <xTaskRemoveFromEventList>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d007      	beq.n	800cf3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf2e:	4b3d      	ldr	r3, [pc, #244]	; (800d024 <xQueueReceive+0x1bc>)
 800cf30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf34:	601a      	str	r2, [r3, #0]
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf3e:	f001 fdd9 	bl	800eaf4 <vPortExitCritical>
				return pdPASS;
 800cf42:	2301      	movs	r3, #1
 800cf44:	e069      	b.n	800d01a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d103      	bne.n	800cf54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf4c:	f001 fdd2 	bl	800eaf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf50:	2300      	movs	r3, #0
 800cf52:	e062      	b.n	800d01a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d106      	bne.n	800cf68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf5a:	f107 0310 	add.w	r3, r7, #16
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 fedc 	bl	800dd1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf64:	2301      	movs	r3, #1
 800cf66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf68:	f001 fdc4 	bl	800eaf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf6c:	f000 fc2c 	bl	800d7c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf70:	f001 fd90 	bl	800ea94 <vPortEnterCritical>
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf7a:	b25b      	sxtb	r3, r3
 800cf7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf80:	d103      	bne.n	800cf8a <xQueueReceive+0x122>
 800cf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf84:	2200      	movs	r2, #0
 800cf86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf90:	b25b      	sxtb	r3, r3
 800cf92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf96:	d103      	bne.n	800cfa0 <xQueueReceive+0x138>
 800cf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfa0:	f001 fda8 	bl	800eaf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfa4:	1d3a      	adds	r2, r7, #4
 800cfa6:	f107 0310 	add.w	r3, r7, #16
 800cfaa:	4611      	mov	r1, r2
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 fecb 	bl	800dd48 <xTaskCheckForTimeOut>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d123      	bne.n	800d000 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfba:	f000 f917 	bl	800d1ec <prvIsQueueEmpty>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d017      	beq.n	800cff4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc6:	3324      	adds	r3, #36	; 0x24
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	4611      	mov	r1, r2
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 fdf1 	bl	800dbb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfd4:	f000 f8b8 	bl	800d148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfd8:	f000 fc04 	bl	800d7e4 <xTaskResumeAll>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d189      	bne.n	800cef6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cfe2:	4b10      	ldr	r3, [pc, #64]	; (800d024 <xQueueReceive+0x1bc>)
 800cfe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfe8:	601a      	str	r2, [r3, #0]
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	f3bf 8f6f 	isb	sy
 800cff2:	e780      	b.n	800cef6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cff6:	f000 f8a7 	bl	800d148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cffa:	f000 fbf3 	bl	800d7e4 <xTaskResumeAll>
 800cffe:	e77a      	b.n	800cef6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d002:	f000 f8a1 	bl	800d148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d006:	f000 fbed 	bl	800d7e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d00a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d00c:	f000 f8ee 	bl	800d1ec <prvIsQueueEmpty>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	f43f af6f 	beq.w	800cef6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3730      	adds	r7, #48	; 0x30
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	e000ed04 	.word	0xe000ed04

0800d028 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d034:	2300      	movs	r3, #0
 800d036:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10d      	bne.n	800d062 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d14d      	bne.n	800d0ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	4618      	mov	r0, r3
 800d054:	f000 ffe0 	bl	800e018 <xTaskPriorityDisinherit>
 800d058:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2200      	movs	r2, #0
 800d05e:	609a      	str	r2, [r3, #8]
 800d060:	e043      	b.n	800d0ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d119      	bne.n	800d09c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6858      	ldr	r0, [r3, #4]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d070:	461a      	mov	r2, r3
 800d072:	68b9      	ldr	r1, [r7, #8]
 800d074:	f002 fd40 	bl	800faf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	685a      	ldr	r2, [r3, #4]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d080:	441a      	add	r2, r3
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	685a      	ldr	r2, [r3, #4]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d32b      	bcc.n	800d0ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	605a      	str	r2, [r3, #4]
 800d09a:	e026      	b.n	800d0ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	68d8      	ldr	r0, [r3, #12]
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	68b9      	ldr	r1, [r7, #8]
 800d0a8:	f002 fd26 	bl	800faf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	68da      	ldr	r2, [r3, #12]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b4:	425b      	negs	r3, r3
 800d0b6:	441a      	add	r2, r3
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	68da      	ldr	r2, [r3, #12]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d207      	bcs.n	800d0d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	689a      	ldr	r2, [r3, #8]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d0:	425b      	negs	r3, r3
 800d0d2:	441a      	add	r2, r3
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d105      	bne.n	800d0ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d002      	beq.n	800d0ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	1c5a      	adds	r2, r3, #1
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d0f2:	697b      	ldr	r3, [r7, #20]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3718      	adds	r7, #24
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d018      	beq.n	800d140 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	68da      	ldr	r2, [r3, #12]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d116:	441a      	add	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	68da      	ldr	r2, [r3, #12]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	429a      	cmp	r2, r3
 800d126:	d303      	bcc.n	800d130 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	68d9      	ldr	r1, [r3, #12]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d138:	461a      	mov	r2, r3
 800d13a:	6838      	ldr	r0, [r7, #0]
 800d13c:	f002 fcdc 	bl	800faf8 <memcpy>
	}
}
 800d140:	bf00      	nop
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d150:	f001 fca0 	bl	800ea94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d15a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d15c:	e011      	b.n	800d182 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d162:	2b00      	cmp	r3, #0
 800d164:	d012      	beq.n	800d18c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	3324      	adds	r3, #36	; 0x24
 800d16a:	4618      	mov	r0, r3
 800d16c:	f000 fd72 	bl	800dc54 <xTaskRemoveFromEventList>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d176:	f000 fe49 	bl	800de0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d17a:	7bfb      	ldrb	r3, [r7, #15]
 800d17c:	3b01      	subs	r3, #1
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d186:	2b00      	cmp	r3, #0
 800d188:	dce9      	bgt.n	800d15e <prvUnlockQueue+0x16>
 800d18a:	e000      	b.n	800d18e <prvUnlockQueue+0x46>
					break;
 800d18c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	22ff      	movs	r2, #255	; 0xff
 800d192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d196:	f001 fcad 	bl	800eaf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d19a:	f001 fc7b 	bl	800ea94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1a6:	e011      	b.n	800d1cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d012      	beq.n	800d1d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	3310      	adds	r3, #16
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f000 fd4d 	bl	800dc54 <xTaskRemoveFromEventList>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d1c0:	f000 fe24 	bl	800de0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	dce9      	bgt.n	800d1a8 <prvUnlockQueue+0x60>
 800d1d4:	e000      	b.n	800d1d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d1d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	22ff      	movs	r2, #255	; 0xff
 800d1dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d1e0:	f001 fc88 	bl	800eaf4 <vPortExitCritical>
}
 800d1e4:	bf00      	nop
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d1f4:	f001 fc4e 	bl	800ea94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d102      	bne.n	800d206 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d200:	2301      	movs	r3, #1
 800d202:	60fb      	str	r3, [r7, #12]
 800d204:	e001      	b.n	800d20a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d206:	2300      	movs	r3, #0
 800d208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d20a:	f001 fc73 	bl	800eaf4 <vPortExitCritical>

	return xReturn;
 800d20e:	68fb      	ldr	r3, [r7, #12]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3710      	adds	r7, #16
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d220:	f001 fc38 	bl	800ea94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d102      	bne.n	800d236 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d230:	2301      	movs	r3, #1
 800d232:	60fb      	str	r3, [r7, #12]
 800d234:	e001      	b.n	800d23a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d236:	2300      	movs	r3, #0
 800d238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d23a:	f001 fc5b 	bl	800eaf4 <vPortExitCritical>

	return xReturn;
 800d23e:	68fb      	ldr	r3, [r7, #12]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d252:	2300      	movs	r3, #0
 800d254:	60fb      	str	r3, [r7, #12]
 800d256:	e014      	b.n	800d282 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d258:	4a0f      	ldr	r2, [pc, #60]	; (800d298 <vQueueAddToRegistry+0x50>)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d10b      	bne.n	800d27c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d264:	490c      	ldr	r1, [pc, #48]	; (800d298 <vQueueAddToRegistry+0x50>)
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	683a      	ldr	r2, [r7, #0]
 800d26a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d26e:	4a0a      	ldr	r2, [pc, #40]	; (800d298 <vQueueAddToRegistry+0x50>)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	00db      	lsls	r3, r3, #3
 800d274:	4413      	add	r3, r2
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d27a:	e006      	b.n	800d28a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	3301      	adds	r3, #1
 800d280:	60fb      	str	r3, [r7, #12]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b07      	cmp	r3, #7
 800d286:	d9e7      	bls.n	800d258 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d288:	bf00      	nop
 800d28a:	bf00      	nop
 800d28c:	3714      	adds	r7, #20
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
 800d296:	bf00      	nop
 800d298:	20000be8 	.word	0x20000be8

0800d29c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b086      	sub	sp, #24
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d2ac:	f001 fbf2 	bl	800ea94 <vPortEnterCritical>
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2b6:	b25b      	sxtb	r3, r3
 800d2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2bc:	d103      	bne.n	800d2c6 <vQueueWaitForMessageRestricted+0x2a>
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2cc:	b25b      	sxtb	r3, r3
 800d2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d2:	d103      	bne.n	800d2dc <vQueueWaitForMessageRestricted+0x40>
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2dc:	f001 fc0a 	bl	800eaf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d106      	bne.n	800d2f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	3324      	adds	r3, #36	; 0x24
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	68b9      	ldr	r1, [r7, #8]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f000 fc83 	bl	800dbfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d2f6:	6978      	ldr	r0, [r7, #20]
 800d2f8:	f7ff ff26 	bl	800d148 <prvUnlockQueue>
	}
 800d2fc:	bf00      	nop
 800d2fe:	3718      	adds	r7, #24
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d304:	b580      	push	{r7, lr}
 800d306:	b08e      	sub	sp, #56	; 0x38
 800d308:	af04      	add	r7, sp, #16
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10a      	bne.n	800d32e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	623b      	str	r3, [r7, #32]
}
 800d32a:	bf00      	nop
 800d32c:	e7fe      	b.n	800d32c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d330:	2b00      	cmp	r3, #0
 800d332:	d10a      	bne.n	800d34a <xTaskCreateStatic+0x46>
	__asm volatile
 800d334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d338:	f383 8811 	msr	BASEPRI, r3
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	f3bf 8f4f 	dsb	sy
 800d344:	61fb      	str	r3, [r7, #28]
}
 800d346:	bf00      	nop
 800d348:	e7fe      	b.n	800d348 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d34a:	23c0      	movs	r3, #192	; 0xc0
 800d34c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	2bc0      	cmp	r3, #192	; 0xc0
 800d352:	d00a      	beq.n	800d36a <xTaskCreateStatic+0x66>
	__asm volatile
 800d354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d358:	f383 8811 	msr	BASEPRI, r3
 800d35c:	f3bf 8f6f 	isb	sy
 800d360:	f3bf 8f4f 	dsb	sy
 800d364:	61bb      	str	r3, [r7, #24]
}
 800d366:	bf00      	nop
 800d368:	e7fe      	b.n	800d368 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d36a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d01e      	beq.n	800d3b0 <xTaskCreateStatic+0xac>
 800d372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d374:	2b00      	cmp	r3, #0
 800d376:	d01b      	beq.n	800d3b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d380:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d384:	2202      	movs	r2, #2
 800d386:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d38a:	2300      	movs	r3, #0
 800d38c:	9303      	str	r3, [sp, #12]
 800d38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d390:	9302      	str	r3, [sp, #8]
 800d392:	f107 0314 	add.w	r3, r7, #20
 800d396:	9301      	str	r3, [sp, #4]
 800d398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39a:	9300      	str	r3, [sp, #0]
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	68b9      	ldr	r1, [r7, #8]
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f000 f850 	bl	800d448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3aa:	f000 f8f7 	bl	800d59c <prvAddNewTaskToReadyList>
 800d3ae:	e001      	b.n	800d3b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d3b4:	697b      	ldr	r3, [r7, #20]
	}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3728      	adds	r7, #40	; 0x28
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}

0800d3be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d3be:	b580      	push	{r7, lr}
 800d3c0:	b08c      	sub	sp, #48	; 0x30
 800d3c2:	af04      	add	r7, sp, #16
 800d3c4:	60f8      	str	r0, [r7, #12]
 800d3c6:	60b9      	str	r1, [r7, #8]
 800d3c8:	603b      	str	r3, [r7, #0]
 800d3ca:	4613      	mov	r3, r2
 800d3cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d3ce:	88fb      	ldrh	r3, [r7, #6]
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f001 fc80 	bl	800ecd8 <pvPortMalloc>
 800d3d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00e      	beq.n	800d3fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d3e0:	20c0      	movs	r0, #192	; 0xc0
 800d3e2:	f001 fc79 	bl	800ecd8 <pvPortMalloc>
 800d3e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d003      	beq.n	800d3f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	697a      	ldr	r2, [r7, #20]
 800d3f2:	631a      	str	r2, [r3, #48]	; 0x30
 800d3f4:	e005      	b.n	800d402 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d3f6:	6978      	ldr	r0, [r7, #20]
 800d3f8:	f001 fd3a 	bl	800ee70 <vPortFree>
 800d3fc:	e001      	b.n	800d402 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d3fe:	2300      	movs	r3, #0
 800d400:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d017      	beq.n	800d438 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d410:	88fa      	ldrh	r2, [r7, #6]
 800d412:	2300      	movs	r3, #0
 800d414:	9303      	str	r3, [sp, #12]
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	9302      	str	r3, [sp, #8]
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	68b9      	ldr	r1, [r7, #8]
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f000 f80e 	bl	800d448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d42c:	69f8      	ldr	r0, [r7, #28]
 800d42e:	f000 f8b5 	bl	800d59c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d432:	2301      	movs	r3, #1
 800d434:	61bb      	str	r3, [r7, #24]
 800d436:	e002      	b.n	800d43e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d438:	f04f 33ff 	mov.w	r3, #4294967295
 800d43c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d43e:	69bb      	ldr	r3, [r7, #24]
	}
 800d440:	4618      	mov	r0, r3
 800d442:	3720      	adds	r7, #32
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
 800d454:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d458:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	461a      	mov	r2, r3
 800d460:	21a5      	movs	r1, #165	; 0xa5
 800d462:	f002 fb57 	bl	800fb14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d470:	3b01      	subs	r3, #1
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4413      	add	r3, r2
 800d476:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	f023 0307 	bic.w	r3, r3, #7
 800d47e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	f003 0307 	and.w	r3, r3, #7
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00a      	beq.n	800d4a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48e:	f383 8811 	msr	BASEPRI, r3
 800d492:	f3bf 8f6f 	isb	sy
 800d496:	f3bf 8f4f 	dsb	sy
 800d49a:	617b      	str	r3, [r7, #20]
}
 800d49c:	bf00      	nop
 800d49e:	e7fe      	b.n	800d49e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d01f      	beq.n	800d4e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	61fb      	str	r3, [r7, #28]
 800d4aa:	e012      	b.n	800d4d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d4ac:	68ba      	ldr	r2, [r7, #8]
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	7819      	ldrb	r1, [r3, #0]
 800d4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	3334      	adds	r3, #52	; 0x34
 800d4bc:	460a      	mov	r2, r1
 800d4be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d4c0:	68ba      	ldr	r2, [r7, #8]
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d006      	beq.n	800d4da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	61fb      	str	r3, [r7, #28]
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	2b0f      	cmp	r3, #15
 800d4d6:	d9e9      	bls.n	800d4ac <prvInitialiseNewTask+0x64>
 800d4d8:	e000      	b.n	800d4dc <prvInitialiseNewTask+0x94>
			{
				break;
 800d4da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d4e4:	e003      	b.n	800d4ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f0:	2b37      	cmp	r3, #55	; 0x37
 800d4f2:	d901      	bls.n	800d4f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d4f4:	2337      	movs	r3, #55	; 0x37
 800d4f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d502:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d506:	2200      	movs	r2, #0
 800d508:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50c:	3304      	adds	r3, #4
 800d50e:	4618      	mov	r0, r3
 800d510:	f7ff f978 	bl	800c804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d516:	3318      	adds	r3, #24
 800d518:	4618      	mov	r0, r3
 800d51a:	f7ff f973 	bl	800c804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d522:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d526:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d532:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d536:	2200      	movs	r2, #0
 800d538:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	2200      	movs	r2, #0
 800d53e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d544:	2200      	movs	r2, #0
 800d546:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54c:	3358      	adds	r3, #88	; 0x58
 800d54e:	2260      	movs	r2, #96	; 0x60
 800d550:	2100      	movs	r1, #0
 800d552:	4618      	mov	r0, r3
 800d554:	f002 fade 	bl	800fb14 <memset>
 800d558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55a:	4a0d      	ldr	r2, [pc, #52]	; (800d590 <prvInitialiseNewTask+0x148>)
 800d55c:	65da      	str	r2, [r3, #92]	; 0x5c
 800d55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d560:	4a0c      	ldr	r2, [pc, #48]	; (800d594 <prvInitialiseNewTask+0x14c>)
 800d562:	661a      	str	r2, [r3, #96]	; 0x60
 800d564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d566:	4a0c      	ldr	r2, [pc, #48]	; (800d598 <prvInitialiseNewTask+0x150>)
 800d568:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d56a:	683a      	ldr	r2, [r7, #0]
 800d56c:	68f9      	ldr	r1, [r7, #12]
 800d56e:	69b8      	ldr	r0, [r7, #24]
 800d570:	f001 f962 	bl	800e838 <pxPortInitialiseStack>
 800d574:	4602      	mov	r2, r0
 800d576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d578:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d586:	bf00      	nop
 800d588:	3720      	adds	r7, #32
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	0801313c 	.word	0x0801313c
 800d594:	0801315c 	.word	0x0801315c
 800d598:	0801311c 	.word	0x0801311c

0800d59c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d5a4:	f001 fa76 	bl	800ea94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d5a8:	4b2d      	ldr	r3, [pc, #180]	; (800d660 <prvAddNewTaskToReadyList+0xc4>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	4a2c      	ldr	r2, [pc, #176]	; (800d660 <prvAddNewTaskToReadyList+0xc4>)
 800d5b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d5b2:	4b2c      	ldr	r3, [pc, #176]	; (800d664 <prvAddNewTaskToReadyList+0xc8>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d109      	bne.n	800d5ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d5ba:	4a2a      	ldr	r2, [pc, #168]	; (800d664 <prvAddNewTaskToReadyList+0xc8>)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d5c0:	4b27      	ldr	r3, [pc, #156]	; (800d660 <prvAddNewTaskToReadyList+0xc4>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d110      	bne.n	800d5ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d5c8:	f000 fc46 	bl	800de58 <prvInitialiseTaskLists>
 800d5cc:	e00d      	b.n	800d5ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d5ce:	4b26      	ldr	r3, [pc, #152]	; (800d668 <prvAddNewTaskToReadyList+0xcc>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d109      	bne.n	800d5ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d5d6:	4b23      	ldr	r3, [pc, #140]	; (800d664 <prvAddNewTaskToReadyList+0xc8>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d802      	bhi.n	800d5ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d5e4:	4a1f      	ldr	r2, [pc, #124]	; (800d664 <prvAddNewTaskToReadyList+0xc8>)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d5ea:	4b20      	ldr	r3, [pc, #128]	; (800d66c <prvAddNewTaskToReadyList+0xd0>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	4a1e      	ldr	r2, [pc, #120]	; (800d66c <prvAddNewTaskToReadyList+0xd0>)
 800d5f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d5f4:	4b1d      	ldr	r3, [pc, #116]	; (800d66c <prvAddNewTaskToReadyList+0xd0>)
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d600:	4b1b      	ldr	r3, [pc, #108]	; (800d670 <prvAddNewTaskToReadyList+0xd4>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	429a      	cmp	r2, r3
 800d606:	d903      	bls.n	800d610 <prvAddNewTaskToReadyList+0x74>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60c:	4a18      	ldr	r2, [pc, #96]	; (800d670 <prvAddNewTaskToReadyList+0xd4>)
 800d60e:	6013      	str	r3, [r2, #0]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d614:	4613      	mov	r3, r2
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	4413      	add	r3, r2
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	4a15      	ldr	r2, [pc, #84]	; (800d674 <prvAddNewTaskToReadyList+0xd8>)
 800d61e:	441a      	add	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	3304      	adds	r3, #4
 800d624:	4619      	mov	r1, r3
 800d626:	4610      	mov	r0, r2
 800d628:	f7ff f8f9 	bl	800c81e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d62c:	f001 fa62 	bl	800eaf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d630:	4b0d      	ldr	r3, [pc, #52]	; (800d668 <prvAddNewTaskToReadyList+0xcc>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00e      	beq.n	800d656 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d638:	4b0a      	ldr	r3, [pc, #40]	; (800d664 <prvAddNewTaskToReadyList+0xc8>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d642:	429a      	cmp	r2, r3
 800d644:	d207      	bcs.n	800d656 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d646:	4b0c      	ldr	r3, [pc, #48]	; (800d678 <prvAddNewTaskToReadyList+0xdc>)
 800d648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d64c:	601a      	str	r2, [r3, #0]
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d656:	bf00      	nop
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	200010fc 	.word	0x200010fc
 800d664:	20000c28 	.word	0x20000c28
 800d668:	20001108 	.word	0x20001108
 800d66c:	20001118 	.word	0x20001118
 800d670:	20001104 	.word	0x20001104
 800d674:	20000c2c 	.word	0x20000c2c
 800d678:	e000ed04 	.word	0xe000ed04

0800d67c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d684:	2300      	movs	r3, #0
 800d686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d017      	beq.n	800d6be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d68e:	4b13      	ldr	r3, [pc, #76]	; (800d6dc <vTaskDelay+0x60>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00a      	beq.n	800d6ac <vTaskDelay+0x30>
	__asm volatile
 800d696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69a:	f383 8811 	msr	BASEPRI, r3
 800d69e:	f3bf 8f6f 	isb	sy
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	60bb      	str	r3, [r7, #8]
}
 800d6a8:	bf00      	nop
 800d6aa:	e7fe      	b.n	800d6aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d6ac:	f000 f88c 	bl	800d7c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d6b0:	2100      	movs	r1, #0
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 fd1e 	bl	800e0f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d6b8:	f000 f894 	bl	800d7e4 <xTaskResumeAll>
 800d6bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d107      	bne.n	800d6d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d6c4:	4b06      	ldr	r3, [pc, #24]	; (800d6e0 <vTaskDelay+0x64>)
 800d6c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ca:	601a      	str	r2, [r3, #0]
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6d4:	bf00      	nop
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	20001124 	.word	0x20001124
 800d6e0:	e000ed04 	.word	0xe000ed04

0800d6e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b08a      	sub	sp, #40	; 0x28
 800d6e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d6f2:	463a      	mov	r2, r7
 800d6f4:	1d39      	adds	r1, r7, #4
 800d6f6:	f107 0308 	add.w	r3, r7, #8
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7ff f82e 	bl	800c75c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d700:	6839      	ldr	r1, [r7, #0]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	9202      	str	r2, [sp, #8]
 800d708:	9301      	str	r3, [sp, #4]
 800d70a:	2300      	movs	r3, #0
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	2300      	movs	r3, #0
 800d710:	460a      	mov	r2, r1
 800d712:	4925      	ldr	r1, [pc, #148]	; (800d7a8 <vTaskStartScheduler+0xc4>)
 800d714:	4825      	ldr	r0, [pc, #148]	; (800d7ac <vTaskStartScheduler+0xc8>)
 800d716:	f7ff fdf5 	bl	800d304 <xTaskCreateStatic>
 800d71a:	4603      	mov	r3, r0
 800d71c:	4a24      	ldr	r2, [pc, #144]	; (800d7b0 <vTaskStartScheduler+0xcc>)
 800d71e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d720:	4b23      	ldr	r3, [pc, #140]	; (800d7b0 <vTaskStartScheduler+0xcc>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d002      	beq.n	800d72e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d728:	2301      	movs	r3, #1
 800d72a:	617b      	str	r3, [r7, #20]
 800d72c:	e001      	b.n	800d732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d72e:	2300      	movs	r3, #0
 800d730:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d102      	bne.n	800d73e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d738:	f000 fd30 	bl	800e19c <xTimerCreateTimerTask>
 800d73c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	2b01      	cmp	r3, #1
 800d742:	d11d      	bne.n	800d780 <vTaskStartScheduler+0x9c>
	__asm volatile
 800d744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d748:	f383 8811 	msr	BASEPRI, r3
 800d74c:	f3bf 8f6f 	isb	sy
 800d750:	f3bf 8f4f 	dsb	sy
 800d754:	613b      	str	r3, [r7, #16]
}
 800d756:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d758:	4b16      	ldr	r3, [pc, #88]	; (800d7b4 <vTaskStartScheduler+0xd0>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3358      	adds	r3, #88	; 0x58
 800d75e:	4a16      	ldr	r2, [pc, #88]	; (800d7b8 <vTaskStartScheduler+0xd4>)
 800d760:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d762:	4b16      	ldr	r3, [pc, #88]	; (800d7bc <vTaskStartScheduler+0xd8>)
 800d764:	f04f 32ff 	mov.w	r2, #4294967295
 800d768:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d76a:	4b15      	ldr	r3, [pc, #84]	; (800d7c0 <vTaskStartScheduler+0xdc>)
 800d76c:	2201      	movs	r2, #1
 800d76e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d770:	4b14      	ldr	r3, [pc, #80]	; (800d7c4 <vTaskStartScheduler+0xe0>)
 800d772:	2200      	movs	r2, #0
 800d774:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d776:	f7f3 f850 	bl	800081a <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d77a:	f001 f8e9 	bl	800e950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d77e:	e00e      	b.n	800d79e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d786:	d10a      	bne.n	800d79e <vTaskStartScheduler+0xba>
	__asm volatile
 800d788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78c:	f383 8811 	msr	BASEPRI, r3
 800d790:	f3bf 8f6f 	isb	sy
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	60fb      	str	r3, [r7, #12]
}
 800d79a:	bf00      	nop
 800d79c:	e7fe      	b.n	800d79c <vTaskStartScheduler+0xb8>
}
 800d79e:	bf00      	nop
 800d7a0:	3718      	adds	r7, #24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	080107a8 	.word	0x080107a8
 800d7ac:	0800de25 	.word	0x0800de25
 800d7b0:	20001120 	.word	0x20001120
 800d7b4:	20000c28 	.word	0x20000c28
 800d7b8:	2000016c 	.word	0x2000016c
 800d7bc:	2000111c 	.word	0x2000111c
 800d7c0:	20001108 	.word	0x20001108
 800d7c4:	20001100 	.word	0x20001100

0800d7c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d7cc:	4b04      	ldr	r3, [pc, #16]	; (800d7e0 <vTaskSuspendAll+0x18>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	4a03      	ldr	r2, [pc, #12]	; (800d7e0 <vTaskSuspendAll+0x18>)
 800d7d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d7d6:	bf00      	nop
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr
 800d7e0:	20001124 	.word	0x20001124

0800d7e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d7f2:	4b42      	ldr	r3, [pc, #264]	; (800d8fc <xTaskResumeAll+0x118>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d10a      	bne.n	800d810 <xTaskResumeAll+0x2c>
	__asm volatile
 800d7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	603b      	str	r3, [r7, #0]
}
 800d80c:	bf00      	nop
 800d80e:	e7fe      	b.n	800d80e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d810:	f001 f940 	bl	800ea94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d814:	4b39      	ldr	r3, [pc, #228]	; (800d8fc <xTaskResumeAll+0x118>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	3b01      	subs	r3, #1
 800d81a:	4a38      	ldr	r2, [pc, #224]	; (800d8fc <xTaskResumeAll+0x118>)
 800d81c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d81e:	4b37      	ldr	r3, [pc, #220]	; (800d8fc <xTaskResumeAll+0x118>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d162      	bne.n	800d8ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d826:	4b36      	ldr	r3, [pc, #216]	; (800d900 <xTaskResumeAll+0x11c>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d05e      	beq.n	800d8ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d82e:	e02f      	b.n	800d890 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d830:	4b34      	ldr	r3, [pc, #208]	; (800d904 <xTaskResumeAll+0x120>)
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	3318      	adds	r3, #24
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7ff f84b 	bl	800c8d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	3304      	adds	r3, #4
 800d846:	4618      	mov	r0, r3
 800d848:	f7ff f846 	bl	800c8d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d850:	4b2d      	ldr	r3, [pc, #180]	; (800d908 <xTaskResumeAll+0x124>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	429a      	cmp	r2, r3
 800d856:	d903      	bls.n	800d860 <xTaskResumeAll+0x7c>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85c:	4a2a      	ldr	r2, [pc, #168]	; (800d908 <xTaskResumeAll+0x124>)
 800d85e:	6013      	str	r3, [r2, #0]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d864:	4613      	mov	r3, r2
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	4413      	add	r3, r2
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	4a27      	ldr	r2, [pc, #156]	; (800d90c <xTaskResumeAll+0x128>)
 800d86e:	441a      	add	r2, r3
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	3304      	adds	r3, #4
 800d874:	4619      	mov	r1, r3
 800d876:	4610      	mov	r0, r2
 800d878:	f7fe ffd1 	bl	800c81e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d880:	4b23      	ldr	r3, [pc, #140]	; (800d910 <xTaskResumeAll+0x12c>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d886:	429a      	cmp	r2, r3
 800d888:	d302      	bcc.n	800d890 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d88a:	4b22      	ldr	r3, [pc, #136]	; (800d914 <xTaskResumeAll+0x130>)
 800d88c:	2201      	movs	r2, #1
 800d88e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d890:	4b1c      	ldr	r3, [pc, #112]	; (800d904 <xTaskResumeAll+0x120>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d1cb      	bne.n	800d830 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d001      	beq.n	800d8a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d89e:	f000 fb7d 	bl	800df9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d8a2:	4b1d      	ldr	r3, [pc, #116]	; (800d918 <xTaskResumeAll+0x134>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d010      	beq.n	800d8d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d8ae:	f000 f847 	bl	800d940 <xTaskIncrementTick>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d8b8:	4b16      	ldr	r3, [pc, #88]	; (800d914 <xTaskResumeAll+0x130>)
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1f1      	bne.n	800d8ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d8ca:	4b13      	ldr	r3, [pc, #76]	; (800d918 <xTaskResumeAll+0x134>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d8d0:	4b10      	ldr	r3, [pc, #64]	; (800d914 <xTaskResumeAll+0x130>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d009      	beq.n	800d8ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d8dc:	4b0f      	ldr	r3, [pc, #60]	; (800d91c <xTaskResumeAll+0x138>)
 800d8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8ec:	f001 f902 	bl	800eaf4 <vPortExitCritical>

	return xAlreadyYielded;
 800d8f0:	68bb      	ldr	r3, [r7, #8]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	20001124 	.word	0x20001124
 800d900:	200010fc 	.word	0x200010fc
 800d904:	200010bc 	.word	0x200010bc
 800d908:	20001104 	.word	0x20001104
 800d90c:	20000c2c 	.word	0x20000c2c
 800d910:	20000c28 	.word	0x20000c28
 800d914:	20001110 	.word	0x20001110
 800d918:	2000110c 	.word	0x2000110c
 800d91c:	e000ed04 	.word	0xe000ed04

0800d920 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d926:	4b05      	ldr	r3, [pc, #20]	; (800d93c <xTaskGetTickCount+0x1c>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d92c:	687b      	ldr	r3, [r7, #4]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	20001100 	.word	0x20001100

0800d940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d946:	2300      	movs	r3, #0
 800d948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d94a:	4b4f      	ldr	r3, [pc, #316]	; (800da88 <xTaskIncrementTick+0x148>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	f040 808f 	bne.w	800da72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d954:	4b4d      	ldr	r3, [pc, #308]	; (800da8c <xTaskIncrementTick+0x14c>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	3301      	adds	r3, #1
 800d95a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d95c:	4a4b      	ldr	r2, [pc, #300]	; (800da8c <xTaskIncrementTick+0x14c>)
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d120      	bne.n	800d9aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d968:	4b49      	ldr	r3, [pc, #292]	; (800da90 <xTaskIncrementTick+0x150>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00a      	beq.n	800d988 <xTaskIncrementTick+0x48>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	603b      	str	r3, [r7, #0]
}
 800d984:	bf00      	nop
 800d986:	e7fe      	b.n	800d986 <xTaskIncrementTick+0x46>
 800d988:	4b41      	ldr	r3, [pc, #260]	; (800da90 <xTaskIncrementTick+0x150>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	60fb      	str	r3, [r7, #12]
 800d98e:	4b41      	ldr	r3, [pc, #260]	; (800da94 <xTaskIncrementTick+0x154>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4a3f      	ldr	r2, [pc, #252]	; (800da90 <xTaskIncrementTick+0x150>)
 800d994:	6013      	str	r3, [r2, #0]
 800d996:	4a3f      	ldr	r2, [pc, #252]	; (800da94 <xTaskIncrementTick+0x154>)
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	6013      	str	r3, [r2, #0]
 800d99c:	4b3e      	ldr	r3, [pc, #248]	; (800da98 <xTaskIncrementTick+0x158>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	4a3d      	ldr	r2, [pc, #244]	; (800da98 <xTaskIncrementTick+0x158>)
 800d9a4:	6013      	str	r3, [r2, #0]
 800d9a6:	f000 faf9 	bl	800df9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d9aa:	4b3c      	ldr	r3, [pc, #240]	; (800da9c <xTaskIncrementTick+0x15c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	693a      	ldr	r2, [r7, #16]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d349      	bcc.n	800da48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9b4:	4b36      	ldr	r3, [pc, #216]	; (800da90 <xTaskIncrementTick+0x150>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d104      	bne.n	800d9c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9be:	4b37      	ldr	r3, [pc, #220]	; (800da9c <xTaskIncrementTick+0x15c>)
 800d9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c4:	601a      	str	r2, [r3, #0]
					break;
 800d9c6:	e03f      	b.n	800da48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9c8:	4b31      	ldr	r3, [pc, #196]	; (800da90 <xTaskIncrementTick+0x150>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d203      	bcs.n	800d9e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d9e0:	4a2e      	ldr	r2, [pc, #184]	; (800da9c <xTaskIncrementTick+0x15c>)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d9e6:	e02f      	b.n	800da48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	3304      	adds	r3, #4
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fe ff73 	bl	800c8d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d004      	beq.n	800da04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	3318      	adds	r3, #24
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fe ff6a 	bl	800c8d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da08:	4b25      	ldr	r3, [pc, #148]	; (800daa0 <xTaskIncrementTick+0x160>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d903      	bls.n	800da18 <xTaskIncrementTick+0xd8>
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da14:	4a22      	ldr	r2, [pc, #136]	; (800daa0 <xTaskIncrementTick+0x160>)
 800da16:	6013      	str	r3, [r2, #0]
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da1c:	4613      	mov	r3, r2
 800da1e:	009b      	lsls	r3, r3, #2
 800da20:	4413      	add	r3, r2
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	4a1f      	ldr	r2, [pc, #124]	; (800daa4 <xTaskIncrementTick+0x164>)
 800da26:	441a      	add	r2, r3
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	3304      	adds	r3, #4
 800da2c:	4619      	mov	r1, r3
 800da2e:	4610      	mov	r0, r2
 800da30:	f7fe fef5 	bl	800c81e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da38:	4b1b      	ldr	r3, [pc, #108]	; (800daa8 <xTaskIncrementTick+0x168>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3e:	429a      	cmp	r2, r3
 800da40:	d3b8      	bcc.n	800d9b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800da42:	2301      	movs	r3, #1
 800da44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da46:	e7b5      	b.n	800d9b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da48:	4b17      	ldr	r3, [pc, #92]	; (800daa8 <xTaskIncrementTick+0x168>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da4e:	4915      	ldr	r1, [pc, #84]	; (800daa4 <xTaskIncrementTick+0x164>)
 800da50:	4613      	mov	r3, r2
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	4413      	add	r3, r2
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	440b      	add	r3, r1
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	d901      	bls.n	800da64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800da60:	2301      	movs	r3, #1
 800da62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800da64:	4b11      	ldr	r3, [pc, #68]	; (800daac <xTaskIncrementTick+0x16c>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d007      	beq.n	800da7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800da6c:	2301      	movs	r3, #1
 800da6e:	617b      	str	r3, [r7, #20]
 800da70:	e004      	b.n	800da7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800da72:	4b0f      	ldr	r3, [pc, #60]	; (800dab0 <xTaskIncrementTick+0x170>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	3301      	adds	r3, #1
 800da78:	4a0d      	ldr	r2, [pc, #52]	; (800dab0 <xTaskIncrementTick+0x170>)
 800da7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800da7c:	697b      	ldr	r3, [r7, #20]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3718      	adds	r7, #24
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	20001124 	.word	0x20001124
 800da8c:	20001100 	.word	0x20001100
 800da90:	200010b4 	.word	0x200010b4
 800da94:	200010b8 	.word	0x200010b8
 800da98:	20001114 	.word	0x20001114
 800da9c:	2000111c 	.word	0x2000111c
 800daa0:	20001104 	.word	0x20001104
 800daa4:	20000c2c 	.word	0x20000c2c
 800daa8:	20000c28 	.word	0x20000c28
 800daac:	20001110 	.word	0x20001110
 800dab0:	2000110c 	.word	0x2000110c

0800dab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800daba:	4b36      	ldr	r3, [pc, #216]	; (800db94 <vTaskSwitchContext+0xe0>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dac2:	4b35      	ldr	r3, [pc, #212]	; (800db98 <vTaskSwitchContext+0xe4>)
 800dac4:	2201      	movs	r2, #1
 800dac6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dac8:	e05f      	b.n	800db8a <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800daca:	4b33      	ldr	r3, [pc, #204]	; (800db98 <vTaskSwitchContext+0xe4>)
 800dacc:	2200      	movs	r2, #0
 800dace:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800dad0:	f7f2 feaa 	bl	8000828 <getRunTimeCounterValue>
 800dad4:	4603      	mov	r3, r0
 800dad6:	4a31      	ldr	r2, [pc, #196]	; (800db9c <vTaskSwitchContext+0xe8>)
 800dad8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800dada:	4b30      	ldr	r3, [pc, #192]	; (800db9c <vTaskSwitchContext+0xe8>)
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	4b30      	ldr	r3, [pc, #192]	; (800dba0 <vTaskSwitchContext+0xec>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d909      	bls.n	800dafa <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800dae6:	4b2f      	ldr	r3, [pc, #188]	; (800dba4 <vTaskSwitchContext+0xf0>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800daec:	4a2b      	ldr	r2, [pc, #172]	; (800db9c <vTaskSwitchContext+0xe8>)
 800daee:	6810      	ldr	r0, [r2, #0]
 800daf0:	4a2b      	ldr	r2, [pc, #172]	; (800dba0 <vTaskSwitchContext+0xec>)
 800daf2:	6812      	ldr	r2, [r2, #0]
 800daf4:	1a82      	subs	r2, r0, r2
 800daf6:	440a      	add	r2, r1
 800daf8:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800dafa:	4b28      	ldr	r3, [pc, #160]	; (800db9c <vTaskSwitchContext+0xe8>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4a28      	ldr	r2, [pc, #160]	; (800dba0 <vTaskSwitchContext+0xec>)
 800db00:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db02:	4b29      	ldr	r3, [pc, #164]	; (800dba8 <vTaskSwitchContext+0xf4>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	60fb      	str	r3, [r7, #12]
 800db08:	e010      	b.n	800db2c <vTaskSwitchContext+0x78>
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10a      	bne.n	800db26 <vTaskSwitchContext+0x72>
	__asm volatile
 800db10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	607b      	str	r3, [r7, #4]
}
 800db22:	bf00      	nop
 800db24:	e7fe      	b.n	800db24 <vTaskSwitchContext+0x70>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	3b01      	subs	r3, #1
 800db2a:	60fb      	str	r3, [r7, #12]
 800db2c:	491f      	ldr	r1, [pc, #124]	; (800dbac <vTaskSwitchContext+0xf8>)
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	4613      	mov	r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	4413      	add	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	440b      	add	r3, r1
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d0e4      	beq.n	800db0a <vTaskSwitchContext+0x56>
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	4613      	mov	r3, r2
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	4413      	add	r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	4a18      	ldr	r2, [pc, #96]	; (800dbac <vTaskSwitchContext+0xf8>)
 800db4c:	4413      	add	r3, r2
 800db4e:	60bb      	str	r3, [r7, #8]
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	685a      	ldr	r2, [r3, #4]
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	605a      	str	r2, [r3, #4]
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	685a      	ldr	r2, [r3, #4]
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	3308      	adds	r3, #8
 800db62:	429a      	cmp	r2, r3
 800db64:	d104      	bne.n	800db70 <vTaskSwitchContext+0xbc>
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	685a      	ldr	r2, [r3, #4]
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	605a      	str	r2, [r3, #4]
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	4a0b      	ldr	r2, [pc, #44]	; (800dba4 <vTaskSwitchContext+0xf0>)
 800db78:	6013      	str	r3, [r2, #0]
 800db7a:	4a0b      	ldr	r2, [pc, #44]	; (800dba8 <vTaskSwitchContext+0xf4>)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db80:	4b08      	ldr	r3, [pc, #32]	; (800dba4 <vTaskSwitchContext+0xf0>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	3358      	adds	r3, #88	; 0x58
 800db86:	4a0a      	ldr	r2, [pc, #40]	; (800dbb0 <vTaskSwitchContext+0xfc>)
 800db88:	6013      	str	r3, [r2, #0]
}
 800db8a:	bf00      	nop
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	20001124 	.word	0x20001124
 800db98:	20001110 	.word	0x20001110
 800db9c:	2000112c 	.word	0x2000112c
 800dba0:	20001128 	.word	0x20001128
 800dba4:	20000c28 	.word	0x20000c28
 800dba8:	20001104 	.word	0x20001104
 800dbac:	20000c2c 	.word	0x20000c2c
 800dbb0:	2000016c 	.word	0x2000016c

0800dbb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d10a      	bne.n	800dbda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc8:	f383 8811 	msr	BASEPRI, r3
 800dbcc:	f3bf 8f6f 	isb	sy
 800dbd0:	f3bf 8f4f 	dsb	sy
 800dbd4:	60fb      	str	r3, [r7, #12]
}
 800dbd6:	bf00      	nop
 800dbd8:	e7fe      	b.n	800dbd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbda:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <vTaskPlaceOnEventList+0x44>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	3318      	adds	r3, #24
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7fe fe3f 	bl	800c866 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dbe8:	2101      	movs	r1, #1
 800dbea:	6838      	ldr	r0, [r7, #0]
 800dbec:	f000 fa82 	bl	800e0f4 <prvAddCurrentTaskToDelayedList>
}
 800dbf0:	bf00      	nop
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	20000c28 	.word	0x20000c28

0800dbfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d10a      	bne.n	800dc24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	617b      	str	r3, [r7, #20]
}
 800dc20:	bf00      	nop
 800dc22:	e7fe      	b.n	800dc22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc24:	4b0a      	ldr	r3, [pc, #40]	; (800dc50 <vTaskPlaceOnEventListRestricted+0x54>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	3318      	adds	r3, #24
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f7fe fdf6 	bl	800c81e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d002      	beq.n	800dc3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dc38:	f04f 33ff 	mov.w	r3, #4294967295
 800dc3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	68b8      	ldr	r0, [r7, #8]
 800dc42:	f000 fa57 	bl	800e0f4 <prvAddCurrentTaskToDelayedList>
	}
 800dc46:	bf00      	nop
 800dc48:	3718      	adds	r7, #24
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	20000c28 	.word	0x20000c28

0800dc54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d10a      	bne.n	800dc80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6e:	f383 8811 	msr	BASEPRI, r3
 800dc72:	f3bf 8f6f 	isb	sy
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	60fb      	str	r3, [r7, #12]
}
 800dc7c:	bf00      	nop
 800dc7e:	e7fe      	b.n	800dc7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	3318      	adds	r3, #24
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fe fe27 	bl	800c8d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc8a:	4b1e      	ldr	r3, [pc, #120]	; (800dd04 <xTaskRemoveFromEventList+0xb0>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d11d      	bne.n	800dcce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	3304      	adds	r3, #4
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fe fe1e 	bl	800c8d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca0:	4b19      	ldr	r3, [pc, #100]	; (800dd08 <xTaskRemoveFromEventList+0xb4>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d903      	bls.n	800dcb0 <xTaskRemoveFromEventList+0x5c>
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcac:	4a16      	ldr	r2, [pc, #88]	; (800dd08 <xTaskRemoveFromEventList+0xb4>)
 800dcae:	6013      	str	r3, [r2, #0]
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb4:	4613      	mov	r3, r2
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	4413      	add	r3, r2
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	4a13      	ldr	r2, [pc, #76]	; (800dd0c <xTaskRemoveFromEventList+0xb8>)
 800dcbe:	441a      	add	r2, r3
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	f7fe fda9 	bl	800c81e <vListInsertEnd>
 800dccc:	e005      	b.n	800dcda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	3318      	adds	r3, #24
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	480e      	ldr	r0, [pc, #56]	; (800dd10 <xTaskRemoveFromEventList+0xbc>)
 800dcd6:	f7fe fda2 	bl	800c81e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcde:	4b0d      	ldr	r3, [pc, #52]	; (800dd14 <xTaskRemoveFromEventList+0xc0>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d905      	bls.n	800dcf4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dce8:	2301      	movs	r3, #1
 800dcea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dcec:	4b0a      	ldr	r3, [pc, #40]	; (800dd18 <xTaskRemoveFromEventList+0xc4>)
 800dcee:	2201      	movs	r2, #1
 800dcf0:	601a      	str	r2, [r3, #0]
 800dcf2:	e001      	b.n	800dcf8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dcf8:	697b      	ldr	r3, [r7, #20]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3718      	adds	r7, #24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	20001124 	.word	0x20001124
 800dd08:	20001104 	.word	0x20001104
 800dd0c:	20000c2c 	.word	0x20000c2c
 800dd10:	200010bc 	.word	0x200010bc
 800dd14:	20000c28 	.word	0x20000c28
 800dd18:	20001110 	.word	0x20001110

0800dd1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd24:	4b06      	ldr	r3, [pc, #24]	; (800dd40 <vTaskInternalSetTimeOutState+0x24>)
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd2c:	4b05      	ldr	r3, [pc, #20]	; (800dd44 <vTaskInternalSetTimeOutState+0x28>)
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	605a      	str	r2, [r3, #4]
}
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	20001114 	.word	0x20001114
 800dd44:	20001100 	.word	0x20001100

0800dd48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b088      	sub	sp, #32
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10a      	bne.n	800dd6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5c:	f383 8811 	msr	BASEPRI, r3
 800dd60:	f3bf 8f6f 	isb	sy
 800dd64:	f3bf 8f4f 	dsb	sy
 800dd68:	613b      	str	r3, [r7, #16]
}
 800dd6a:	bf00      	nop
 800dd6c:	e7fe      	b.n	800dd6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d10a      	bne.n	800dd8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd78:	f383 8811 	msr	BASEPRI, r3
 800dd7c:	f3bf 8f6f 	isb	sy
 800dd80:	f3bf 8f4f 	dsb	sy
 800dd84:	60fb      	str	r3, [r7, #12]
}
 800dd86:	bf00      	nop
 800dd88:	e7fe      	b.n	800dd88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dd8a:	f000 fe83 	bl	800ea94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dd8e:	4b1d      	ldr	r3, [pc, #116]	; (800de04 <xTaskCheckForTimeOut+0xbc>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	69ba      	ldr	r2, [r7, #24]
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda6:	d102      	bne.n	800ddae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	61fb      	str	r3, [r7, #28]
 800ddac:	e023      	b.n	800ddf6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	4b15      	ldr	r3, [pc, #84]	; (800de08 <xTaskCheckForTimeOut+0xc0>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d007      	beq.n	800ddca <xTaskCheckForTimeOut+0x82>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	69ba      	ldr	r2, [r7, #24]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d302      	bcc.n	800ddca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	61fb      	str	r3, [r7, #28]
 800ddc8:	e015      	b.n	800ddf6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	697a      	ldr	r2, [r7, #20]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d20b      	bcs.n	800ddec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	1ad2      	subs	r2, r2, r3
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7ff ff9b 	bl	800dd1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dde6:	2300      	movs	r3, #0
 800dde8:	61fb      	str	r3, [r7, #28]
 800ddea:	e004      	b.n	800ddf6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ddf6:	f000 fe7d 	bl	800eaf4 <vPortExitCritical>

	return xReturn;
 800ddfa:	69fb      	ldr	r3, [r7, #28]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3720      	adds	r7, #32
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	20001100 	.word	0x20001100
 800de08:	20001114 	.word	0x20001114

0800de0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de0c:	b480      	push	{r7}
 800de0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800de10:	4b03      	ldr	r3, [pc, #12]	; (800de20 <vTaskMissedYield+0x14>)
 800de12:	2201      	movs	r2, #1
 800de14:	601a      	str	r2, [r3, #0]
}
 800de16:	bf00      	nop
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr
 800de20:	20001110 	.word	0x20001110

0800de24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de2c:	f000 f854 	bl	800ded8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de30:	4b07      	ldr	r3, [pc, #28]	; (800de50 <prvIdleTask+0x2c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d907      	bls.n	800de48 <prvIdleTask+0x24>
			{
				taskYIELD();
 800de38:	4b06      	ldr	r3, [pc, #24]	; (800de54 <prvIdleTask+0x30>)
 800de3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de3e:	601a      	str	r2, [r3, #0]
 800de40:	f3bf 8f4f 	dsb	sy
 800de44:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800de48:	f7f2 fcfa 	bl	8000840 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800de4c:	e7ee      	b.n	800de2c <prvIdleTask+0x8>
 800de4e:	bf00      	nop
 800de50:	20000c2c 	.word	0x20000c2c
 800de54:	e000ed04 	.word	0xe000ed04

0800de58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de5e:	2300      	movs	r3, #0
 800de60:	607b      	str	r3, [r7, #4]
 800de62:	e00c      	b.n	800de7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de64:	687a      	ldr	r2, [r7, #4]
 800de66:	4613      	mov	r3, r2
 800de68:	009b      	lsls	r3, r3, #2
 800de6a:	4413      	add	r3, r2
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	4a12      	ldr	r2, [pc, #72]	; (800deb8 <prvInitialiseTaskLists+0x60>)
 800de70:	4413      	add	r3, r2
 800de72:	4618      	mov	r0, r3
 800de74:	f7fe fca6 	bl	800c7c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	3301      	adds	r3, #1
 800de7c:	607b      	str	r3, [r7, #4]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2b37      	cmp	r3, #55	; 0x37
 800de82:	d9ef      	bls.n	800de64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de84:	480d      	ldr	r0, [pc, #52]	; (800debc <prvInitialiseTaskLists+0x64>)
 800de86:	f7fe fc9d 	bl	800c7c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800de8a:	480d      	ldr	r0, [pc, #52]	; (800dec0 <prvInitialiseTaskLists+0x68>)
 800de8c:	f7fe fc9a 	bl	800c7c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800de90:	480c      	ldr	r0, [pc, #48]	; (800dec4 <prvInitialiseTaskLists+0x6c>)
 800de92:	f7fe fc97 	bl	800c7c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800de96:	480c      	ldr	r0, [pc, #48]	; (800dec8 <prvInitialiseTaskLists+0x70>)
 800de98:	f7fe fc94 	bl	800c7c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de9c:	480b      	ldr	r0, [pc, #44]	; (800decc <prvInitialiseTaskLists+0x74>)
 800de9e:	f7fe fc91 	bl	800c7c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dea2:	4b0b      	ldr	r3, [pc, #44]	; (800ded0 <prvInitialiseTaskLists+0x78>)
 800dea4:	4a05      	ldr	r2, [pc, #20]	; (800debc <prvInitialiseTaskLists+0x64>)
 800dea6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dea8:	4b0a      	ldr	r3, [pc, #40]	; (800ded4 <prvInitialiseTaskLists+0x7c>)
 800deaa:	4a05      	ldr	r2, [pc, #20]	; (800dec0 <prvInitialiseTaskLists+0x68>)
 800deac:	601a      	str	r2, [r3, #0]
}
 800deae:	bf00      	nop
 800deb0:	3708      	adds	r7, #8
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	20000c2c 	.word	0x20000c2c
 800debc:	2000108c 	.word	0x2000108c
 800dec0:	200010a0 	.word	0x200010a0
 800dec4:	200010bc 	.word	0x200010bc
 800dec8:	200010d0 	.word	0x200010d0
 800decc:	200010e8 	.word	0x200010e8
 800ded0:	200010b4 	.word	0x200010b4
 800ded4:	200010b8 	.word	0x200010b8

0800ded8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dede:	e019      	b.n	800df14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dee0:	f000 fdd8 	bl	800ea94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dee4:	4b10      	ldr	r3, [pc, #64]	; (800df28 <prvCheckTasksWaitingTermination+0x50>)
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	3304      	adds	r3, #4
 800def0:	4618      	mov	r0, r3
 800def2:	f7fe fcf1 	bl	800c8d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800def6:	4b0d      	ldr	r3, [pc, #52]	; (800df2c <prvCheckTasksWaitingTermination+0x54>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	3b01      	subs	r3, #1
 800defc:	4a0b      	ldr	r2, [pc, #44]	; (800df2c <prvCheckTasksWaitingTermination+0x54>)
 800defe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df00:	4b0b      	ldr	r3, [pc, #44]	; (800df30 <prvCheckTasksWaitingTermination+0x58>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3b01      	subs	r3, #1
 800df06:	4a0a      	ldr	r2, [pc, #40]	; (800df30 <prvCheckTasksWaitingTermination+0x58>)
 800df08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df0a:	f000 fdf3 	bl	800eaf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f000 f810 	bl	800df34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df14:	4b06      	ldr	r3, [pc, #24]	; (800df30 <prvCheckTasksWaitingTermination+0x58>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d1e1      	bne.n	800dee0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df1c:	bf00      	nop
 800df1e:	bf00      	nop
 800df20:	3708      	adds	r7, #8
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	200010d0 	.word	0x200010d0
 800df2c:	200010fc 	.word	0x200010fc
 800df30:	200010e4 	.word	0x200010e4

0800df34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3358      	adds	r3, #88	; 0x58
 800df40:	4618      	mov	r0, r3
 800df42:	f001 fedd 	bl	800fd00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d108      	bne.n	800df62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df54:	4618      	mov	r0, r3
 800df56:	f000 ff8b 	bl	800ee70 <vPortFree>
				vPortFree( pxTCB );
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f000 ff88 	bl	800ee70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df60:	e018      	b.n	800df94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d103      	bne.n	800df74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 ff7f 	bl	800ee70 <vPortFree>
	}
 800df72:	e00f      	b.n	800df94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800df7a:	2b02      	cmp	r3, #2
 800df7c:	d00a      	beq.n	800df94 <prvDeleteTCB+0x60>
	__asm volatile
 800df7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df82:	f383 8811 	msr	BASEPRI, r3
 800df86:	f3bf 8f6f 	isb	sy
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	60fb      	str	r3, [r7, #12]
}
 800df90:	bf00      	nop
 800df92:	e7fe      	b.n	800df92 <prvDeleteTCB+0x5e>
	}
 800df94:	bf00      	nop
 800df96:	3710      	adds	r7, #16
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfa2:	4b0c      	ldr	r3, [pc, #48]	; (800dfd4 <prvResetNextTaskUnblockTime+0x38>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d104      	bne.n	800dfb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dfac:	4b0a      	ldr	r3, [pc, #40]	; (800dfd8 <prvResetNextTaskUnblockTime+0x3c>)
 800dfae:	f04f 32ff 	mov.w	r2, #4294967295
 800dfb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dfb4:	e008      	b.n	800dfc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfb6:	4b07      	ldr	r3, [pc, #28]	; (800dfd4 <prvResetNextTaskUnblockTime+0x38>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	4a04      	ldr	r2, [pc, #16]	; (800dfd8 <prvResetNextTaskUnblockTime+0x3c>)
 800dfc6:	6013      	str	r3, [r2, #0]
}
 800dfc8:	bf00      	nop
 800dfca:	370c      	adds	r7, #12
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr
 800dfd4:	200010b4 	.word	0x200010b4
 800dfd8:	2000111c 	.word	0x2000111c

0800dfdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dfe2:	4b0b      	ldr	r3, [pc, #44]	; (800e010 <xTaskGetSchedulerState+0x34>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d102      	bne.n	800dff0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dfea:	2301      	movs	r3, #1
 800dfec:	607b      	str	r3, [r7, #4]
 800dfee:	e008      	b.n	800e002 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dff0:	4b08      	ldr	r3, [pc, #32]	; (800e014 <xTaskGetSchedulerState+0x38>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d102      	bne.n	800dffe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dff8:	2302      	movs	r3, #2
 800dffa:	607b      	str	r3, [r7, #4]
 800dffc:	e001      	b.n	800e002 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dffe:	2300      	movs	r3, #0
 800e000:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e002:	687b      	ldr	r3, [r7, #4]
	}
 800e004:	4618      	mov	r0, r3
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr
 800e010:	20001108 	.word	0x20001108
 800e014:	20001124 	.word	0x20001124

0800e018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b086      	sub	sp, #24
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e024:	2300      	movs	r3, #0
 800e026:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d056      	beq.n	800e0dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e02e:	4b2e      	ldr	r3, [pc, #184]	; (800e0e8 <xTaskPriorityDisinherit+0xd0>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	693a      	ldr	r2, [r7, #16]
 800e034:	429a      	cmp	r2, r3
 800e036:	d00a      	beq.n	800e04e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03c:	f383 8811 	msr	BASEPRI, r3
 800e040:	f3bf 8f6f 	isb	sy
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	60fb      	str	r3, [r7, #12]
}
 800e04a:	bf00      	nop
 800e04c:	e7fe      	b.n	800e04c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e052:	2b00      	cmp	r3, #0
 800e054:	d10a      	bne.n	800e06c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05a:	f383 8811 	msr	BASEPRI, r3
 800e05e:	f3bf 8f6f 	isb	sy
 800e062:	f3bf 8f4f 	dsb	sy
 800e066:	60bb      	str	r3, [r7, #8]
}
 800e068:	bf00      	nop
 800e06a:	e7fe      	b.n	800e06a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e070:	1e5a      	subs	r2, r3, #1
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e07e:	429a      	cmp	r2, r3
 800e080:	d02c      	beq.n	800e0dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e086:	2b00      	cmp	r3, #0
 800e088:	d128      	bne.n	800e0dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	3304      	adds	r3, #4
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fe fc22 	bl	800c8d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ac:	4b0f      	ldr	r3, [pc, #60]	; (800e0ec <xTaskPriorityDisinherit+0xd4>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d903      	bls.n	800e0bc <xTaskPriorityDisinherit+0xa4>
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b8:	4a0c      	ldr	r2, [pc, #48]	; (800e0ec <xTaskPriorityDisinherit+0xd4>)
 800e0ba:	6013      	str	r3, [r2, #0]
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	009b      	lsls	r3, r3, #2
 800e0c8:	4a09      	ldr	r2, [pc, #36]	; (800e0f0 <xTaskPriorityDisinherit+0xd8>)
 800e0ca:	441a      	add	r2, r3
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	3304      	adds	r3, #4
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	4610      	mov	r0, r2
 800e0d4:	f7fe fba3 	bl	800c81e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e0dc:	697b      	ldr	r3, [r7, #20]
	}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3718      	adds	r7, #24
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	20000c28 	.word	0x20000c28
 800e0ec:	20001104 	.word	0x20001104
 800e0f0:	20000c2c 	.word	0x20000c2c

0800e0f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e0fe:	4b21      	ldr	r3, [pc, #132]	; (800e184 <prvAddCurrentTaskToDelayedList+0x90>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e104:	4b20      	ldr	r3, [pc, #128]	; (800e188 <prvAddCurrentTaskToDelayedList+0x94>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	3304      	adds	r3, #4
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe fbe4 	bl	800c8d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e116:	d10a      	bne.n	800e12e <prvAddCurrentTaskToDelayedList+0x3a>
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d007      	beq.n	800e12e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e11e:	4b1a      	ldr	r3, [pc, #104]	; (800e188 <prvAddCurrentTaskToDelayedList+0x94>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	3304      	adds	r3, #4
 800e124:	4619      	mov	r1, r3
 800e126:	4819      	ldr	r0, [pc, #100]	; (800e18c <prvAddCurrentTaskToDelayedList+0x98>)
 800e128:	f7fe fb79 	bl	800c81e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e12c:	e026      	b.n	800e17c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e12e:	68fa      	ldr	r2, [r7, #12]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	4413      	add	r3, r2
 800e134:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e136:	4b14      	ldr	r3, [pc, #80]	; (800e188 <prvAddCurrentTaskToDelayedList+0x94>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68ba      	ldr	r2, [r7, #8]
 800e13c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e13e:	68ba      	ldr	r2, [r7, #8]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	429a      	cmp	r2, r3
 800e144:	d209      	bcs.n	800e15a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e146:	4b12      	ldr	r3, [pc, #72]	; (800e190 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e148:	681a      	ldr	r2, [r3, #0]
 800e14a:	4b0f      	ldr	r3, [pc, #60]	; (800e188 <prvAddCurrentTaskToDelayedList+0x94>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	3304      	adds	r3, #4
 800e150:	4619      	mov	r1, r3
 800e152:	4610      	mov	r0, r2
 800e154:	f7fe fb87 	bl	800c866 <vListInsert>
}
 800e158:	e010      	b.n	800e17c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e15a:	4b0e      	ldr	r3, [pc, #56]	; (800e194 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	4b0a      	ldr	r3, [pc, #40]	; (800e188 <prvAddCurrentTaskToDelayedList+0x94>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	3304      	adds	r3, #4
 800e164:	4619      	mov	r1, r3
 800e166:	4610      	mov	r0, r2
 800e168:	f7fe fb7d 	bl	800c866 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e16c:	4b0a      	ldr	r3, [pc, #40]	; (800e198 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	68ba      	ldr	r2, [r7, #8]
 800e172:	429a      	cmp	r2, r3
 800e174:	d202      	bcs.n	800e17c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e176:	4a08      	ldr	r2, [pc, #32]	; (800e198 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	6013      	str	r3, [r2, #0]
}
 800e17c:	bf00      	nop
 800e17e:	3710      	adds	r7, #16
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	20001100 	.word	0x20001100
 800e188:	20000c28 	.word	0x20000c28
 800e18c:	200010e8 	.word	0x200010e8
 800e190:	200010b8 	.word	0x200010b8
 800e194:	200010b4 	.word	0x200010b4
 800e198:	2000111c 	.word	0x2000111c

0800e19c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b08a      	sub	sp, #40	; 0x28
 800e1a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e1a6:	f000 fb07 	bl	800e7b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e1aa:	4b1c      	ldr	r3, [pc, #112]	; (800e21c <xTimerCreateTimerTask+0x80>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d021      	beq.n	800e1f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e1ba:	1d3a      	adds	r2, r7, #4
 800e1bc:	f107 0108 	add.w	r1, r7, #8
 800e1c0:	f107 030c 	add.w	r3, r7, #12
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fe fae3 	bl	800c790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e1ca:	6879      	ldr	r1, [r7, #4]
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	9202      	str	r2, [sp, #8]
 800e1d2:	9301      	str	r3, [sp, #4]
 800e1d4:	2302      	movs	r3, #2
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	2300      	movs	r3, #0
 800e1da:	460a      	mov	r2, r1
 800e1dc:	4910      	ldr	r1, [pc, #64]	; (800e220 <xTimerCreateTimerTask+0x84>)
 800e1de:	4811      	ldr	r0, [pc, #68]	; (800e224 <xTimerCreateTimerTask+0x88>)
 800e1e0:	f7ff f890 	bl	800d304 <xTaskCreateStatic>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	4a10      	ldr	r2, [pc, #64]	; (800e228 <xTimerCreateTimerTask+0x8c>)
 800e1e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e1ea:	4b0f      	ldr	r3, [pc, #60]	; (800e228 <xTimerCreateTimerTask+0x8c>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d001      	beq.n	800e1f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d10a      	bne.n	800e212 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e200:	f383 8811 	msr	BASEPRI, r3
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	613b      	str	r3, [r7, #16]
}
 800e20e:	bf00      	nop
 800e210:	e7fe      	b.n	800e210 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e212:	697b      	ldr	r3, [r7, #20]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3718      	adds	r7, #24
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	20001160 	.word	0x20001160
 800e220:	080107d8 	.word	0x080107d8
 800e224:	0800e361 	.word	0x0800e361
 800e228:	20001164 	.word	0x20001164

0800e22c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08a      	sub	sp, #40	; 0x28
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	607a      	str	r2, [r7, #4]
 800e238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e23a:	2300      	movs	r3, #0
 800e23c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d10a      	bne.n	800e25a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e248:	f383 8811 	msr	BASEPRI, r3
 800e24c:	f3bf 8f6f 	isb	sy
 800e250:	f3bf 8f4f 	dsb	sy
 800e254:	623b      	str	r3, [r7, #32]
}
 800e256:	bf00      	nop
 800e258:	e7fe      	b.n	800e258 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e25a:	4b1a      	ldr	r3, [pc, #104]	; (800e2c4 <xTimerGenericCommand+0x98>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d02a      	beq.n	800e2b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	2b05      	cmp	r3, #5
 800e272:	dc18      	bgt.n	800e2a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e274:	f7ff feb2 	bl	800dfdc <xTaskGetSchedulerState>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d109      	bne.n	800e292 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e27e:	4b11      	ldr	r3, [pc, #68]	; (800e2c4 <xTimerGenericCommand+0x98>)
 800e280:	6818      	ldr	r0, [r3, #0]
 800e282:	f107 0110 	add.w	r1, r7, #16
 800e286:	2300      	movs	r3, #0
 800e288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e28a:	f7fe fc53 	bl	800cb34 <xQueueGenericSend>
 800e28e:	6278      	str	r0, [r7, #36]	; 0x24
 800e290:	e012      	b.n	800e2b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e292:	4b0c      	ldr	r3, [pc, #48]	; (800e2c4 <xTimerGenericCommand+0x98>)
 800e294:	6818      	ldr	r0, [r3, #0]
 800e296:	f107 0110 	add.w	r1, r7, #16
 800e29a:	2300      	movs	r3, #0
 800e29c:	2200      	movs	r2, #0
 800e29e:	f7fe fc49 	bl	800cb34 <xQueueGenericSend>
 800e2a2:	6278      	str	r0, [r7, #36]	; 0x24
 800e2a4:	e008      	b.n	800e2b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e2a6:	4b07      	ldr	r3, [pc, #28]	; (800e2c4 <xTimerGenericCommand+0x98>)
 800e2a8:	6818      	ldr	r0, [r3, #0]
 800e2aa:	f107 0110 	add.w	r1, r7, #16
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	683a      	ldr	r2, [r7, #0]
 800e2b2:	f7fe fd3d 	bl	800cd30 <xQueueGenericSendFromISR>
 800e2b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3728      	adds	r7, #40	; 0x28
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	20001160 	.word	0x20001160

0800e2c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b088      	sub	sp, #32
 800e2cc:	af02      	add	r7, sp, #8
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2d2:	4b22      	ldr	r3, [pc, #136]	; (800e35c <prvProcessExpiredTimer+0x94>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	68db      	ldr	r3, [r3, #12]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	3304      	adds	r3, #4
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fe faf9 	bl	800c8d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2ec:	f003 0304 	and.w	r3, r3, #4
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d022      	beq.n	800e33a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	699a      	ldr	r2, [r3, #24]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	18d1      	adds	r1, r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	683a      	ldr	r2, [r7, #0]
 800e300:	6978      	ldr	r0, [r7, #20]
 800e302:	f000 f8d1 	bl	800e4a8 <prvInsertTimerInActiveList>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d01f      	beq.n	800e34c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e30c:	2300      	movs	r3, #0
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	2300      	movs	r3, #0
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	2100      	movs	r1, #0
 800e316:	6978      	ldr	r0, [r7, #20]
 800e318:	f7ff ff88 	bl	800e22c <xTimerGenericCommand>
 800e31c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d113      	bne.n	800e34c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e328:	f383 8811 	msr	BASEPRI, r3
 800e32c:	f3bf 8f6f 	isb	sy
 800e330:	f3bf 8f4f 	dsb	sy
 800e334:	60fb      	str	r3, [r7, #12]
}
 800e336:	bf00      	nop
 800e338:	e7fe      	b.n	800e338 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e340:	f023 0301 	bic.w	r3, r3, #1
 800e344:	b2da      	uxtb	r2, r3
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	6a1b      	ldr	r3, [r3, #32]
 800e350:	6978      	ldr	r0, [r7, #20]
 800e352:	4798      	blx	r3
}
 800e354:	bf00      	nop
 800e356:	3718      	adds	r7, #24
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20001158 	.word	0x20001158

0800e360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e368:	f107 0308 	add.w	r3, r7, #8
 800e36c:	4618      	mov	r0, r3
 800e36e:	f000 f857 	bl	800e420 <prvGetNextExpireTime>
 800e372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	4619      	mov	r1, r3
 800e378:	68f8      	ldr	r0, [r7, #12]
 800e37a:	f000 f803 	bl	800e384 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e37e:	f000 f8d5 	bl	800e52c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e382:	e7f1      	b.n	800e368 <prvTimerTask+0x8>

0800e384 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e38e:	f7ff fa1b 	bl	800d7c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e392:	f107 0308 	add.w	r3, r7, #8
 800e396:	4618      	mov	r0, r3
 800e398:	f000 f866 	bl	800e468 <prvSampleTimeNow>
 800e39c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d130      	bne.n	800e406 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d10a      	bne.n	800e3c0 <prvProcessTimerOrBlockTask+0x3c>
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d806      	bhi.n	800e3c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e3b2:	f7ff fa17 	bl	800d7e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e3b6:	68f9      	ldr	r1, [r7, #12]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7ff ff85 	bl	800e2c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e3be:	e024      	b.n	800e40a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d008      	beq.n	800e3d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e3c6:	4b13      	ldr	r3, [pc, #76]	; (800e414 <prvProcessTimerOrBlockTask+0x90>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d101      	bne.n	800e3d4 <prvProcessTimerOrBlockTask+0x50>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	e000      	b.n	800e3d6 <prvProcessTimerOrBlockTask+0x52>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e3d8:	4b0f      	ldr	r3, [pc, #60]	; (800e418 <prvProcessTimerOrBlockTask+0x94>)
 800e3da:	6818      	ldr	r0, [r3, #0]
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	1ad3      	subs	r3, r2, r3
 800e3e2:	683a      	ldr	r2, [r7, #0]
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	f7fe ff59 	bl	800d29c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e3ea:	f7ff f9fb 	bl	800d7e4 <xTaskResumeAll>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d10a      	bne.n	800e40a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e3f4:	4b09      	ldr	r3, [pc, #36]	; (800e41c <prvProcessTimerOrBlockTask+0x98>)
 800e3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3fa:	601a      	str	r2, [r3, #0]
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	f3bf 8f6f 	isb	sy
}
 800e404:	e001      	b.n	800e40a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e406:	f7ff f9ed 	bl	800d7e4 <xTaskResumeAll>
}
 800e40a:	bf00      	nop
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	2000115c 	.word	0x2000115c
 800e418:	20001160 	.word	0x20001160
 800e41c:	e000ed04 	.word	0xe000ed04

0800e420 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e420:	b480      	push	{r7}
 800e422:	b085      	sub	sp, #20
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e428:	4b0e      	ldr	r3, [pc, #56]	; (800e464 <prvGetNextExpireTime+0x44>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d101      	bne.n	800e436 <prvGetNextExpireTime+0x16>
 800e432:	2201      	movs	r2, #1
 800e434:	e000      	b.n	800e438 <prvGetNextExpireTime+0x18>
 800e436:	2200      	movs	r2, #0
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d105      	bne.n	800e450 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e444:	4b07      	ldr	r3, [pc, #28]	; (800e464 <prvGetNextExpireTime+0x44>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	60fb      	str	r3, [r7, #12]
 800e44e:	e001      	b.n	800e454 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e450:	2300      	movs	r3, #0
 800e452:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e454:	68fb      	ldr	r3, [r7, #12]
}
 800e456:	4618      	mov	r0, r3
 800e458:	3714      	adds	r7, #20
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	20001158 	.word	0x20001158

0800e468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e470:	f7ff fa56 	bl	800d920 <xTaskGetTickCount>
 800e474:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e476:	4b0b      	ldr	r3, [pc, #44]	; (800e4a4 <prvSampleTimeNow+0x3c>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d205      	bcs.n	800e48c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e480:	f000 f936 	bl	800e6f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2201      	movs	r2, #1
 800e488:	601a      	str	r2, [r3, #0]
 800e48a:	e002      	b.n	800e492 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e492:	4a04      	ldr	r2, [pc, #16]	; (800e4a4 <prvSampleTimeNow+0x3c>)
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e498:	68fb      	ldr	r3, [r7, #12]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	20001168 	.word	0x20001168

0800e4a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b086      	sub	sp, #24
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	607a      	str	r2, [r7, #4]
 800e4b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	68ba      	ldr	r2, [r7, #8]
 800e4be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e4c6:	68ba      	ldr	r2, [r7, #8]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d812      	bhi.n	800e4f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	1ad2      	subs	r2, r2, r3
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	699b      	ldr	r3, [r3, #24]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d302      	bcc.n	800e4e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	617b      	str	r3, [r7, #20]
 800e4e0:	e01b      	b.n	800e51a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e4e2:	4b10      	ldr	r3, [pc, #64]	; (800e524 <prvInsertTimerInActiveList+0x7c>)
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	f7fe f9ba 	bl	800c866 <vListInsert>
 800e4f2:	e012      	b.n	800e51a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d206      	bcs.n	800e50a <prvInsertTimerInActiveList+0x62>
 800e4fc:	68ba      	ldr	r2, [r7, #8]
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	429a      	cmp	r2, r3
 800e502:	d302      	bcc.n	800e50a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e504:	2301      	movs	r3, #1
 800e506:	617b      	str	r3, [r7, #20]
 800e508:	e007      	b.n	800e51a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e50a:	4b07      	ldr	r3, [pc, #28]	; (800e528 <prvInsertTimerInActiveList+0x80>)
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3304      	adds	r3, #4
 800e512:	4619      	mov	r1, r3
 800e514:	4610      	mov	r0, r2
 800e516:	f7fe f9a6 	bl	800c866 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e51a:	697b      	ldr	r3, [r7, #20]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3718      	adds	r7, #24
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	2000115c 	.word	0x2000115c
 800e528:	20001158 	.word	0x20001158

0800e52c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b08e      	sub	sp, #56	; 0x38
 800e530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e532:	e0ca      	b.n	800e6ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	da18      	bge.n	800e56c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e53a:	1d3b      	adds	r3, r7, #4
 800e53c:	3304      	adds	r3, #4
 800e53e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e542:	2b00      	cmp	r3, #0
 800e544:	d10a      	bne.n	800e55c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54a:	f383 8811 	msr	BASEPRI, r3
 800e54e:	f3bf 8f6f 	isb	sy
 800e552:	f3bf 8f4f 	dsb	sy
 800e556:	61fb      	str	r3, [r7, #28]
}
 800e558:	bf00      	nop
 800e55a:	e7fe      	b.n	800e55a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e562:	6850      	ldr	r0, [r2, #4]
 800e564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e566:	6892      	ldr	r2, [r2, #8]
 800e568:	4611      	mov	r1, r2
 800e56a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f2c0 80aa 	blt.w	800e6c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57a:	695b      	ldr	r3, [r3, #20]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d004      	beq.n	800e58a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e582:	3304      	adds	r3, #4
 800e584:	4618      	mov	r0, r3
 800e586:	f7fe f9a7 	bl	800c8d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e58a:	463b      	mov	r3, r7
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7ff ff6b 	bl	800e468 <prvSampleTimeNow>
 800e592:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2b09      	cmp	r3, #9
 800e598:	f200 8097 	bhi.w	800e6ca <prvProcessReceivedCommands+0x19e>
 800e59c:	a201      	add	r2, pc, #4	; (adr r2, 800e5a4 <prvProcessReceivedCommands+0x78>)
 800e59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a2:	bf00      	nop
 800e5a4:	0800e5cd 	.word	0x0800e5cd
 800e5a8:	0800e5cd 	.word	0x0800e5cd
 800e5ac:	0800e5cd 	.word	0x0800e5cd
 800e5b0:	0800e641 	.word	0x0800e641
 800e5b4:	0800e655 	.word	0x0800e655
 800e5b8:	0800e69f 	.word	0x0800e69f
 800e5bc:	0800e5cd 	.word	0x0800e5cd
 800e5c0:	0800e5cd 	.word	0x0800e5cd
 800e5c4:	0800e641 	.word	0x0800e641
 800e5c8:	0800e655 	.word	0x0800e655
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5d2:	f043 0301 	orr.w	r3, r3, #1
 800e5d6:	b2da      	uxtb	r2, r3
 800e5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e5de:	68ba      	ldr	r2, [r7, #8]
 800e5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e2:	699b      	ldr	r3, [r3, #24]
 800e5e4:	18d1      	adds	r1, r2, r3
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5ec:	f7ff ff5c 	bl	800e4a8 <prvInsertTimerInActiveList>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d069      	beq.n	800e6ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f8:	6a1b      	ldr	r3, [r3, #32]
 800e5fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e604:	f003 0304 	and.w	r3, r3, #4
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d05e      	beq.n	800e6ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e60c:	68ba      	ldr	r2, [r7, #8]
 800e60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e610:	699b      	ldr	r3, [r3, #24]
 800e612:	441a      	add	r2, r3
 800e614:	2300      	movs	r3, #0
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	2300      	movs	r3, #0
 800e61a:	2100      	movs	r1, #0
 800e61c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e61e:	f7ff fe05 	bl	800e22c <xTimerGenericCommand>
 800e622:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e624:	6a3b      	ldr	r3, [r7, #32]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d14f      	bne.n	800e6ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62e:	f383 8811 	msr	BASEPRI, r3
 800e632:	f3bf 8f6f 	isb	sy
 800e636:	f3bf 8f4f 	dsb	sy
 800e63a:	61bb      	str	r3, [r7, #24]
}
 800e63c:	bf00      	nop
 800e63e:	e7fe      	b.n	800e63e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e646:	f023 0301 	bic.w	r3, r3, #1
 800e64a:	b2da      	uxtb	r2, r3
 800e64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e652:	e03a      	b.n	800e6ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e65a:	f043 0301 	orr.w	r3, r3, #1
 800e65e:	b2da      	uxtb	r2, r3
 800e660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e666:	68ba      	ldr	r2, [r7, #8]
 800e668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	699b      	ldr	r3, [r3, #24]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d10a      	bne.n	800e68a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e678:	f383 8811 	msr	BASEPRI, r3
 800e67c:	f3bf 8f6f 	isb	sy
 800e680:	f3bf 8f4f 	dsb	sy
 800e684:	617b      	str	r3, [r7, #20]
}
 800e686:	bf00      	nop
 800e688:	e7fe      	b.n	800e688 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68c:	699a      	ldr	r2, [r3, #24]
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	18d1      	adds	r1, r2, r3
 800e692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e698:	f7ff ff06 	bl	800e4a8 <prvInsertTimerInActiveList>
					break;
 800e69c:	e015      	b.n	800e6ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6a4:	f003 0302 	and.w	r3, r3, #2
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d103      	bne.n	800e6b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6ae:	f000 fbdf 	bl	800ee70 <vPortFree>
 800e6b2:	e00a      	b.n	800e6ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6ba:	f023 0301 	bic.w	r3, r3, #1
 800e6be:	b2da      	uxtb	r2, r3
 800e6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e6c6:	e000      	b.n	800e6ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e6c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6ca:	4b08      	ldr	r3, [pc, #32]	; (800e6ec <prvProcessReceivedCommands+0x1c0>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	1d39      	adds	r1, r7, #4
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fe fbc8 	bl	800ce68 <xQueueReceive>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f47f af2a 	bne.w	800e534 <prvProcessReceivedCommands+0x8>
	}
}
 800e6e0:	bf00      	nop
 800e6e2:	bf00      	nop
 800e6e4:	3730      	adds	r7, #48	; 0x30
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	20001160 	.word	0x20001160

0800e6f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b088      	sub	sp, #32
 800e6f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e6f6:	e048      	b.n	800e78a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e6f8:	4b2d      	ldr	r3, [pc, #180]	; (800e7b0 <prvSwitchTimerLists+0xc0>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e702:	4b2b      	ldr	r3, [pc, #172]	; (800e7b0 <prvSwitchTimerLists+0xc0>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	3304      	adds	r3, #4
 800e710:	4618      	mov	r0, r3
 800e712:	f7fe f8e1 	bl	800c8d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6a1b      	ldr	r3, [r3, #32]
 800e71a:	68f8      	ldr	r0, [r7, #12]
 800e71c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e724:	f003 0304 	and.w	r3, r3, #4
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d02e      	beq.n	800e78a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	699b      	ldr	r3, [r3, #24]
 800e730:	693a      	ldr	r2, [r7, #16]
 800e732:	4413      	add	r3, r2
 800e734:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e736:	68ba      	ldr	r2, [r7, #8]
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d90e      	bls.n	800e75c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	68ba      	ldr	r2, [r7, #8]
 800e742:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e74a:	4b19      	ldr	r3, [pc, #100]	; (800e7b0 <prvSwitchTimerLists+0xc0>)
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	3304      	adds	r3, #4
 800e752:	4619      	mov	r1, r3
 800e754:	4610      	mov	r0, r2
 800e756:	f7fe f886 	bl	800c866 <vListInsert>
 800e75a:	e016      	b.n	800e78a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e75c:	2300      	movs	r3, #0
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	2300      	movs	r3, #0
 800e762:	693a      	ldr	r2, [r7, #16]
 800e764:	2100      	movs	r1, #0
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f7ff fd60 	bl	800e22c <xTimerGenericCommand>
 800e76c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d10a      	bne.n	800e78a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e778:	f383 8811 	msr	BASEPRI, r3
 800e77c:	f3bf 8f6f 	isb	sy
 800e780:	f3bf 8f4f 	dsb	sy
 800e784:	603b      	str	r3, [r7, #0]
}
 800e786:	bf00      	nop
 800e788:	e7fe      	b.n	800e788 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e78a:	4b09      	ldr	r3, [pc, #36]	; (800e7b0 <prvSwitchTimerLists+0xc0>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d1b1      	bne.n	800e6f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e794:	4b06      	ldr	r3, [pc, #24]	; (800e7b0 <prvSwitchTimerLists+0xc0>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e79a:	4b06      	ldr	r3, [pc, #24]	; (800e7b4 <prvSwitchTimerLists+0xc4>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4a04      	ldr	r2, [pc, #16]	; (800e7b0 <prvSwitchTimerLists+0xc0>)
 800e7a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e7a2:	4a04      	ldr	r2, [pc, #16]	; (800e7b4 <prvSwitchTimerLists+0xc4>)
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	6013      	str	r3, [r2, #0]
}
 800e7a8:	bf00      	nop
 800e7aa:	3718      	adds	r7, #24
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	20001158 	.word	0x20001158
 800e7b4:	2000115c 	.word	0x2000115c

0800e7b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e7be:	f000 f969 	bl	800ea94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e7c2:	4b15      	ldr	r3, [pc, #84]	; (800e818 <prvCheckForValidListAndQueue+0x60>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d120      	bne.n	800e80c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e7ca:	4814      	ldr	r0, [pc, #80]	; (800e81c <prvCheckForValidListAndQueue+0x64>)
 800e7cc:	f7fd fffa 	bl	800c7c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e7d0:	4813      	ldr	r0, [pc, #76]	; (800e820 <prvCheckForValidListAndQueue+0x68>)
 800e7d2:	f7fd fff7 	bl	800c7c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e7d6:	4b13      	ldr	r3, [pc, #76]	; (800e824 <prvCheckForValidListAndQueue+0x6c>)
 800e7d8:	4a10      	ldr	r2, [pc, #64]	; (800e81c <prvCheckForValidListAndQueue+0x64>)
 800e7da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e7dc:	4b12      	ldr	r3, [pc, #72]	; (800e828 <prvCheckForValidListAndQueue+0x70>)
 800e7de:	4a10      	ldr	r2, [pc, #64]	; (800e820 <prvCheckForValidListAndQueue+0x68>)
 800e7e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	4b11      	ldr	r3, [pc, #68]	; (800e82c <prvCheckForValidListAndQueue+0x74>)
 800e7e8:	4a11      	ldr	r2, [pc, #68]	; (800e830 <prvCheckForValidListAndQueue+0x78>)
 800e7ea:	2110      	movs	r1, #16
 800e7ec:	200a      	movs	r0, #10
 800e7ee:	f7fe f905 	bl	800c9fc <xQueueGenericCreateStatic>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	4a08      	ldr	r2, [pc, #32]	; (800e818 <prvCheckForValidListAndQueue+0x60>)
 800e7f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e7f8:	4b07      	ldr	r3, [pc, #28]	; (800e818 <prvCheckForValidListAndQueue+0x60>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d005      	beq.n	800e80c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e800:	4b05      	ldr	r3, [pc, #20]	; (800e818 <prvCheckForValidListAndQueue+0x60>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	490b      	ldr	r1, [pc, #44]	; (800e834 <prvCheckForValidListAndQueue+0x7c>)
 800e806:	4618      	mov	r0, r3
 800e808:	f7fe fd1e 	bl	800d248 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e80c:	f000 f972 	bl	800eaf4 <vPortExitCritical>
}
 800e810:	bf00      	nop
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	20001160 	.word	0x20001160
 800e81c:	20001130 	.word	0x20001130
 800e820:	20001144 	.word	0x20001144
 800e824:	20001158 	.word	0x20001158
 800e828:	2000115c 	.word	0x2000115c
 800e82c:	2000120c 	.word	0x2000120c
 800e830:	2000116c 	.word	0x2000116c
 800e834:	080107e0 	.word	0x080107e0

0800e838 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e838:	b480      	push	{r7}
 800e83a:	b085      	sub	sp, #20
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	3b04      	subs	r3, #4
 800e848:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	3b04      	subs	r3, #4
 800e856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	f023 0201 	bic.w	r2, r3, #1
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	3b04      	subs	r3, #4
 800e866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e868:	4a0c      	ldr	r2, [pc, #48]	; (800e89c <pxPortInitialiseStack+0x64>)
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	3b14      	subs	r3, #20
 800e872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	3b04      	subs	r3, #4
 800e87e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f06f 0202 	mvn.w	r2, #2
 800e886:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	3b20      	subs	r3, #32
 800e88c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e88e:	68fb      	ldr	r3, [r7, #12]
}
 800e890:	4618      	mov	r0, r3
 800e892:	3714      	adds	r7, #20
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr
 800e89c:	0800e8a1 	.word	0x0800e8a1

0800e8a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e8aa:	4b12      	ldr	r3, [pc, #72]	; (800e8f4 <prvTaskExitError+0x54>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8b2:	d00a      	beq.n	800e8ca <prvTaskExitError+0x2a>
	__asm volatile
 800e8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	60fb      	str	r3, [r7, #12]
}
 800e8c6:	bf00      	nop
 800e8c8:	e7fe      	b.n	800e8c8 <prvTaskExitError+0x28>
	__asm volatile
 800e8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ce:	f383 8811 	msr	BASEPRI, r3
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	60bb      	str	r3, [r7, #8]
}
 800e8dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e8de:	bf00      	nop
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d0fc      	beq.n	800e8e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e8e6:	bf00      	nop
 800e8e8:	bf00      	nop
 800e8ea:	3714      	adds	r7, #20
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr
 800e8f4:	20000104 	.word	0x20000104
	...

0800e900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e900:	4b07      	ldr	r3, [pc, #28]	; (800e920 <pxCurrentTCBConst2>)
 800e902:	6819      	ldr	r1, [r3, #0]
 800e904:	6808      	ldr	r0, [r1, #0]
 800e906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e90a:	f380 8809 	msr	PSP, r0
 800e90e:	f3bf 8f6f 	isb	sy
 800e912:	f04f 0000 	mov.w	r0, #0
 800e916:	f380 8811 	msr	BASEPRI, r0
 800e91a:	4770      	bx	lr
 800e91c:	f3af 8000 	nop.w

0800e920 <pxCurrentTCBConst2>:
 800e920:	20000c28 	.word	0x20000c28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e924:	bf00      	nop
 800e926:	bf00      	nop

0800e928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e928:	4808      	ldr	r0, [pc, #32]	; (800e94c <prvPortStartFirstTask+0x24>)
 800e92a:	6800      	ldr	r0, [r0, #0]
 800e92c:	6800      	ldr	r0, [r0, #0]
 800e92e:	f380 8808 	msr	MSP, r0
 800e932:	f04f 0000 	mov.w	r0, #0
 800e936:	f380 8814 	msr	CONTROL, r0
 800e93a:	b662      	cpsie	i
 800e93c:	b661      	cpsie	f
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	f3bf 8f6f 	isb	sy
 800e946:	df00      	svc	0
 800e948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e94a:	bf00      	nop
 800e94c:	e000ed08 	.word	0xe000ed08

0800e950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b086      	sub	sp, #24
 800e954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e956:	4b46      	ldr	r3, [pc, #280]	; (800ea70 <xPortStartScheduler+0x120>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a46      	ldr	r2, [pc, #280]	; (800ea74 <xPortStartScheduler+0x124>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d10a      	bne.n	800e976 <xPortStartScheduler+0x26>
	__asm volatile
 800e960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e964:	f383 8811 	msr	BASEPRI, r3
 800e968:	f3bf 8f6f 	isb	sy
 800e96c:	f3bf 8f4f 	dsb	sy
 800e970:	613b      	str	r3, [r7, #16]
}
 800e972:	bf00      	nop
 800e974:	e7fe      	b.n	800e974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e976:	4b3e      	ldr	r3, [pc, #248]	; (800ea70 <xPortStartScheduler+0x120>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4a3f      	ldr	r2, [pc, #252]	; (800ea78 <xPortStartScheduler+0x128>)
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d10a      	bne.n	800e996 <xPortStartScheduler+0x46>
	__asm volatile
 800e980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e984:	f383 8811 	msr	BASEPRI, r3
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	60fb      	str	r3, [r7, #12]
}
 800e992:	bf00      	nop
 800e994:	e7fe      	b.n	800e994 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e996:	4b39      	ldr	r3, [pc, #228]	; (800ea7c <xPortStartScheduler+0x12c>)
 800e998:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	22ff      	movs	r2, #255	; 0xff
 800e9a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	b2db      	uxtb	r3, r3
 800e9ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e9b0:	78fb      	ldrb	r3, [r7, #3]
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	4b31      	ldr	r3, [pc, #196]	; (800ea80 <xPortStartScheduler+0x130>)
 800e9bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e9be:	4b31      	ldr	r3, [pc, #196]	; (800ea84 <xPortStartScheduler+0x134>)
 800e9c0:	2207      	movs	r2, #7
 800e9c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9c4:	e009      	b.n	800e9da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e9c6:	4b2f      	ldr	r3, [pc, #188]	; (800ea84 <xPortStartScheduler+0x134>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	3b01      	subs	r3, #1
 800e9cc:	4a2d      	ldr	r2, [pc, #180]	; (800ea84 <xPortStartScheduler+0x134>)
 800e9ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e9d0:	78fb      	ldrb	r3, [r7, #3]
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	005b      	lsls	r3, r3, #1
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9da:	78fb      	ldrb	r3, [r7, #3]
 800e9dc:	b2db      	uxtb	r3, r3
 800e9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9e2:	2b80      	cmp	r3, #128	; 0x80
 800e9e4:	d0ef      	beq.n	800e9c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e9e6:	4b27      	ldr	r3, [pc, #156]	; (800ea84 <xPortStartScheduler+0x134>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f1c3 0307 	rsb	r3, r3, #7
 800e9ee:	2b04      	cmp	r3, #4
 800e9f0:	d00a      	beq.n	800ea08 <xPortStartScheduler+0xb8>
	__asm volatile
 800e9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f6:	f383 8811 	msr	BASEPRI, r3
 800e9fa:	f3bf 8f6f 	isb	sy
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	60bb      	str	r3, [r7, #8]
}
 800ea04:	bf00      	nop
 800ea06:	e7fe      	b.n	800ea06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ea08:	4b1e      	ldr	r3, [pc, #120]	; (800ea84 <xPortStartScheduler+0x134>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	021b      	lsls	r3, r3, #8
 800ea0e:	4a1d      	ldr	r2, [pc, #116]	; (800ea84 <xPortStartScheduler+0x134>)
 800ea10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ea12:	4b1c      	ldr	r3, [pc, #112]	; (800ea84 <xPortStartScheduler+0x134>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ea1a:	4a1a      	ldr	r2, [pc, #104]	; (800ea84 <xPortStartScheduler+0x134>)
 800ea1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	b2da      	uxtb	r2, r3
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ea26:	4b18      	ldr	r3, [pc, #96]	; (800ea88 <xPortStartScheduler+0x138>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4a17      	ldr	r2, [pc, #92]	; (800ea88 <xPortStartScheduler+0x138>)
 800ea2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ea30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ea32:	4b15      	ldr	r3, [pc, #84]	; (800ea88 <xPortStartScheduler+0x138>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4a14      	ldr	r2, [pc, #80]	; (800ea88 <xPortStartScheduler+0x138>)
 800ea38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ea3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ea3e:	f000 f8dd 	bl	800ebfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ea42:	4b12      	ldr	r3, [pc, #72]	; (800ea8c <xPortStartScheduler+0x13c>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ea48:	f000 f8fc 	bl	800ec44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ea4c:	4b10      	ldr	r3, [pc, #64]	; (800ea90 <xPortStartScheduler+0x140>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a0f      	ldr	r2, [pc, #60]	; (800ea90 <xPortStartScheduler+0x140>)
 800ea52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ea56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ea58:	f7ff ff66 	bl	800e928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ea5c:	f7ff f82a 	bl	800dab4 <vTaskSwitchContext>
	prvTaskExitError();
 800ea60:	f7ff ff1e 	bl	800e8a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ea64:	2300      	movs	r3, #0
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3718      	adds	r7, #24
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	e000ed00 	.word	0xe000ed00
 800ea74:	410fc271 	.word	0x410fc271
 800ea78:	410fc270 	.word	0x410fc270
 800ea7c:	e000e400 	.word	0xe000e400
 800ea80:	2000125c 	.word	0x2000125c
 800ea84:	20001260 	.word	0x20001260
 800ea88:	e000ed20 	.word	0xe000ed20
 800ea8c:	20000104 	.word	0x20000104
 800ea90:	e000ef34 	.word	0xe000ef34

0800ea94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
	__asm volatile
 800ea9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9e:	f383 8811 	msr	BASEPRI, r3
 800eaa2:	f3bf 8f6f 	isb	sy
 800eaa6:	f3bf 8f4f 	dsb	sy
 800eaaa:	607b      	str	r3, [r7, #4]
}
 800eaac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eaae:	4b0f      	ldr	r3, [pc, #60]	; (800eaec <vPortEnterCritical+0x58>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	3301      	adds	r3, #1
 800eab4:	4a0d      	ldr	r2, [pc, #52]	; (800eaec <vPortEnterCritical+0x58>)
 800eab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eab8:	4b0c      	ldr	r3, [pc, #48]	; (800eaec <vPortEnterCritical+0x58>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d10f      	bne.n	800eae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eac0:	4b0b      	ldr	r3, [pc, #44]	; (800eaf0 <vPortEnterCritical+0x5c>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d00a      	beq.n	800eae0 <vPortEnterCritical+0x4c>
	__asm volatile
 800eaca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eace:	f383 8811 	msr	BASEPRI, r3
 800ead2:	f3bf 8f6f 	isb	sy
 800ead6:	f3bf 8f4f 	dsb	sy
 800eada:	603b      	str	r3, [r7, #0]
}
 800eadc:	bf00      	nop
 800eade:	e7fe      	b.n	800eade <vPortEnterCritical+0x4a>
	}
}
 800eae0:	bf00      	nop
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr
 800eaec:	20000104 	.word	0x20000104
 800eaf0:	e000ed04 	.word	0xe000ed04

0800eaf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eafa:	4b12      	ldr	r3, [pc, #72]	; (800eb44 <vPortExitCritical+0x50>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10a      	bne.n	800eb18 <vPortExitCritical+0x24>
	__asm volatile
 800eb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb06:	f383 8811 	msr	BASEPRI, r3
 800eb0a:	f3bf 8f6f 	isb	sy
 800eb0e:	f3bf 8f4f 	dsb	sy
 800eb12:	607b      	str	r3, [r7, #4]
}
 800eb14:	bf00      	nop
 800eb16:	e7fe      	b.n	800eb16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eb18:	4b0a      	ldr	r3, [pc, #40]	; (800eb44 <vPortExitCritical+0x50>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	4a09      	ldr	r2, [pc, #36]	; (800eb44 <vPortExitCritical+0x50>)
 800eb20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eb22:	4b08      	ldr	r3, [pc, #32]	; (800eb44 <vPortExitCritical+0x50>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d105      	bne.n	800eb36 <vPortExitCritical+0x42>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	f383 8811 	msr	BASEPRI, r3
}
 800eb34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eb36:	bf00      	nop
 800eb38:	370c      	adds	r7, #12
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr
 800eb42:	bf00      	nop
 800eb44:	20000104 	.word	0x20000104
	...

0800eb50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eb50:	f3ef 8009 	mrs	r0, PSP
 800eb54:	f3bf 8f6f 	isb	sy
 800eb58:	4b15      	ldr	r3, [pc, #84]	; (800ebb0 <pxCurrentTCBConst>)
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	f01e 0f10 	tst.w	lr, #16
 800eb60:	bf08      	it	eq
 800eb62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eb66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb6a:	6010      	str	r0, [r2, #0]
 800eb6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eb70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eb74:	f380 8811 	msr	BASEPRI, r0
 800eb78:	f3bf 8f4f 	dsb	sy
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f7fe ff98 	bl	800dab4 <vTaskSwitchContext>
 800eb84:	f04f 0000 	mov.w	r0, #0
 800eb88:	f380 8811 	msr	BASEPRI, r0
 800eb8c:	bc09      	pop	{r0, r3}
 800eb8e:	6819      	ldr	r1, [r3, #0]
 800eb90:	6808      	ldr	r0, [r1, #0]
 800eb92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb96:	f01e 0f10 	tst.w	lr, #16
 800eb9a:	bf08      	it	eq
 800eb9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eba0:	f380 8809 	msr	PSP, r0
 800eba4:	f3bf 8f6f 	isb	sy
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	f3af 8000 	nop.w

0800ebb0 <pxCurrentTCBConst>:
 800ebb0:	20000c28 	.word	0x20000c28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ebb4:	bf00      	nop
 800ebb6:	bf00      	nop

0800ebb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
	__asm volatile
 800ebbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc2:	f383 8811 	msr	BASEPRI, r3
 800ebc6:	f3bf 8f6f 	isb	sy
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	607b      	str	r3, [r7, #4]
}
 800ebd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ebd2:	f7fe feb5 	bl	800d940 <xTaskIncrementTick>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d003      	beq.n	800ebe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ebdc:	4b06      	ldr	r3, [pc, #24]	; (800ebf8 <xPortSysTickHandler+0x40>)
 800ebde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebe2:	601a      	str	r2, [r3, #0]
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	f383 8811 	msr	BASEPRI, r3
}
 800ebee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ebf0:	bf00      	nop
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	e000ed04 	.word	0xe000ed04

0800ebfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ec00:	4b0b      	ldr	r3, [pc, #44]	; (800ec30 <vPortSetupTimerInterrupt+0x34>)
 800ec02:	2200      	movs	r2, #0
 800ec04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ec06:	4b0b      	ldr	r3, [pc, #44]	; (800ec34 <vPortSetupTimerInterrupt+0x38>)
 800ec08:	2200      	movs	r2, #0
 800ec0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ec0c:	4b0a      	ldr	r3, [pc, #40]	; (800ec38 <vPortSetupTimerInterrupt+0x3c>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4a0a      	ldr	r2, [pc, #40]	; (800ec3c <vPortSetupTimerInterrupt+0x40>)
 800ec12:	fba2 2303 	umull	r2, r3, r2, r3
 800ec16:	099b      	lsrs	r3, r3, #6
 800ec18:	4a09      	ldr	r2, [pc, #36]	; (800ec40 <vPortSetupTimerInterrupt+0x44>)
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ec1e:	4b04      	ldr	r3, [pc, #16]	; (800ec30 <vPortSetupTimerInterrupt+0x34>)
 800ec20:	2207      	movs	r2, #7
 800ec22:	601a      	str	r2, [r3, #0]
}
 800ec24:	bf00      	nop
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	e000e010 	.word	0xe000e010
 800ec34:	e000e018 	.word	0xe000e018
 800ec38:	2000006c 	.word	0x2000006c
 800ec3c:	10624dd3 	.word	0x10624dd3
 800ec40:	e000e014 	.word	0xe000e014

0800ec44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ec44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ec54 <vPortEnableVFP+0x10>
 800ec48:	6801      	ldr	r1, [r0, #0]
 800ec4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ec4e:	6001      	str	r1, [r0, #0]
 800ec50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ec52:	bf00      	nop
 800ec54:	e000ed88 	.word	0xe000ed88

0800ec58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ec58:	b480      	push	{r7}
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ec5e:	f3ef 8305 	mrs	r3, IPSR
 800ec62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b0f      	cmp	r3, #15
 800ec68:	d914      	bls.n	800ec94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec6a:	4a17      	ldr	r2, [pc, #92]	; (800ecc8 <vPortValidateInterruptPriority+0x70>)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	4413      	add	r3, r2
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec74:	4b15      	ldr	r3, [pc, #84]	; (800eccc <vPortValidateInterruptPriority+0x74>)
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	7afa      	ldrb	r2, [r7, #11]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d20a      	bcs.n	800ec94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ec7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec82:	f383 8811 	msr	BASEPRI, r3
 800ec86:	f3bf 8f6f 	isb	sy
 800ec8a:	f3bf 8f4f 	dsb	sy
 800ec8e:	607b      	str	r3, [r7, #4]
}
 800ec90:	bf00      	nop
 800ec92:	e7fe      	b.n	800ec92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec94:	4b0e      	ldr	r3, [pc, #56]	; (800ecd0 <vPortValidateInterruptPriority+0x78>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ec9c:	4b0d      	ldr	r3, [pc, #52]	; (800ecd4 <vPortValidateInterruptPriority+0x7c>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d90a      	bls.n	800ecba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca8:	f383 8811 	msr	BASEPRI, r3
 800ecac:	f3bf 8f6f 	isb	sy
 800ecb0:	f3bf 8f4f 	dsb	sy
 800ecb4:	603b      	str	r3, [r7, #0]
}
 800ecb6:	bf00      	nop
 800ecb8:	e7fe      	b.n	800ecb8 <vPortValidateInterruptPriority+0x60>
	}
 800ecba:	bf00      	nop
 800ecbc:	3714      	adds	r7, #20
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop
 800ecc8:	e000e3f0 	.word	0xe000e3f0
 800eccc:	2000125c 	.word	0x2000125c
 800ecd0:	e000ed0c 	.word	0xe000ed0c
 800ecd4:	20001260 	.word	0x20001260

0800ecd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b08a      	sub	sp, #40	; 0x28
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ece0:	2300      	movs	r3, #0
 800ece2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ece4:	f7fe fd70 	bl	800d7c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ece8:	4b5b      	ldr	r3, [pc, #364]	; (800ee58 <pvPortMalloc+0x180>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d101      	bne.n	800ecf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ecf0:	f000 f920 	bl	800ef34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ecf4:	4b59      	ldr	r3, [pc, #356]	; (800ee5c <pvPortMalloc+0x184>)
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	4013      	ands	r3, r2
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f040 8093 	bne.w	800ee28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d01d      	beq.n	800ed44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ed08:	2208      	movs	r2, #8
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f003 0307 	and.w	r3, r3, #7
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d014      	beq.n	800ed44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f023 0307 	bic.w	r3, r3, #7
 800ed20:	3308      	adds	r3, #8
 800ed22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f003 0307 	and.w	r3, r3, #7
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00a      	beq.n	800ed44 <pvPortMalloc+0x6c>
	__asm volatile
 800ed2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed32:	f383 8811 	msr	BASEPRI, r3
 800ed36:	f3bf 8f6f 	isb	sy
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	617b      	str	r3, [r7, #20]
}
 800ed40:	bf00      	nop
 800ed42:	e7fe      	b.n	800ed42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d06e      	beq.n	800ee28 <pvPortMalloc+0x150>
 800ed4a:	4b45      	ldr	r3, [pc, #276]	; (800ee60 <pvPortMalloc+0x188>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d869      	bhi.n	800ee28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ed54:	4b43      	ldr	r3, [pc, #268]	; (800ee64 <pvPortMalloc+0x18c>)
 800ed56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ed58:	4b42      	ldr	r3, [pc, #264]	; (800ee64 <pvPortMalloc+0x18c>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed5e:	e004      	b.n	800ed6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ed60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d903      	bls.n	800ed7c <pvPortMalloc+0xa4>
 800ed74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d1f1      	bne.n	800ed60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed7c:	4b36      	ldr	r3, [pc, #216]	; (800ee58 <pvPortMalloc+0x180>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d050      	beq.n	800ee28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed86:	6a3b      	ldr	r3, [r7, #32]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2208      	movs	r2, #8
 800ed8c:	4413      	add	r3, r2
 800ed8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	6a3b      	ldr	r3, [r7, #32]
 800ed96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9a:	685a      	ldr	r2, [r3, #4]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	1ad2      	subs	r2, r2, r3
 800eda0:	2308      	movs	r3, #8
 800eda2:	005b      	lsls	r3, r3, #1
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d91f      	bls.n	800ede8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eda8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4413      	add	r3, r2
 800edae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	f003 0307 	and.w	r3, r3, #7
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d00a      	beq.n	800edd0 <pvPortMalloc+0xf8>
	__asm volatile
 800edba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edbe:	f383 8811 	msr	BASEPRI, r3
 800edc2:	f3bf 8f6f 	isb	sy
 800edc6:	f3bf 8f4f 	dsb	sy
 800edca:	613b      	str	r3, [r7, #16]
}
 800edcc:	bf00      	nop
 800edce:	e7fe      	b.n	800edce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd2:	685a      	ldr	r2, [r3, #4]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	1ad2      	subs	r2, r2, r3
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edde:	687a      	ldr	r2, [r7, #4]
 800ede0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ede2:	69b8      	ldr	r0, [r7, #24]
 800ede4:	f000 f908 	bl	800eff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ede8:	4b1d      	ldr	r3, [pc, #116]	; (800ee60 <pvPortMalloc+0x188>)
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	1ad3      	subs	r3, r2, r3
 800edf2:	4a1b      	ldr	r2, [pc, #108]	; (800ee60 <pvPortMalloc+0x188>)
 800edf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800edf6:	4b1a      	ldr	r3, [pc, #104]	; (800ee60 <pvPortMalloc+0x188>)
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	4b1b      	ldr	r3, [pc, #108]	; (800ee68 <pvPortMalloc+0x190>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d203      	bcs.n	800ee0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ee02:	4b17      	ldr	r3, [pc, #92]	; (800ee60 <pvPortMalloc+0x188>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4a18      	ldr	r2, [pc, #96]	; (800ee68 <pvPortMalloc+0x190>)
 800ee08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ee0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0c:	685a      	ldr	r2, [r3, #4]
 800ee0e:	4b13      	ldr	r3, [pc, #76]	; (800ee5c <pvPortMalloc+0x184>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	431a      	orrs	r2, r3
 800ee14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ee18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ee1e:	4b13      	ldr	r3, [pc, #76]	; (800ee6c <pvPortMalloc+0x194>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	3301      	adds	r3, #1
 800ee24:	4a11      	ldr	r2, [pc, #68]	; (800ee6c <pvPortMalloc+0x194>)
 800ee26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ee28:	f7fe fcdc 	bl	800d7e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	f003 0307 	and.w	r3, r3, #7
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d00a      	beq.n	800ee4c <pvPortMalloc+0x174>
	__asm volatile
 800ee36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3a:	f383 8811 	msr	BASEPRI, r3
 800ee3e:	f3bf 8f6f 	isb	sy
 800ee42:	f3bf 8f4f 	dsb	sy
 800ee46:	60fb      	str	r3, [r7, #12]
}
 800ee48:	bf00      	nop
 800ee4a:	e7fe      	b.n	800ee4a <pvPortMalloc+0x172>
	return pvReturn;
 800ee4c:	69fb      	ldr	r3, [r7, #28]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3728      	adds	r7, #40	; 0x28
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	2001a26c 	.word	0x2001a26c
 800ee5c:	2001a280 	.word	0x2001a280
 800ee60:	2001a270 	.word	0x2001a270
 800ee64:	2001a264 	.word	0x2001a264
 800ee68:	2001a274 	.word	0x2001a274
 800ee6c:	2001a278 	.word	0x2001a278

0800ee70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b086      	sub	sp, #24
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d04d      	beq.n	800ef1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee82:	2308      	movs	r3, #8
 800ee84:	425b      	negs	r3, r3
 800ee86:	697a      	ldr	r2, [r7, #20]
 800ee88:	4413      	add	r3, r2
 800ee8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	685a      	ldr	r2, [r3, #4]
 800ee94:	4b24      	ldr	r3, [pc, #144]	; (800ef28 <vPortFree+0xb8>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4013      	ands	r3, r2
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d10a      	bne.n	800eeb4 <vPortFree+0x44>
	__asm volatile
 800ee9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea2:	f383 8811 	msr	BASEPRI, r3
 800eea6:	f3bf 8f6f 	isb	sy
 800eeaa:	f3bf 8f4f 	dsb	sy
 800eeae:	60fb      	str	r3, [r7, #12]
}
 800eeb0:	bf00      	nop
 800eeb2:	e7fe      	b.n	800eeb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00a      	beq.n	800eed2 <vPortFree+0x62>
	__asm volatile
 800eebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec0:	f383 8811 	msr	BASEPRI, r3
 800eec4:	f3bf 8f6f 	isb	sy
 800eec8:	f3bf 8f4f 	dsb	sy
 800eecc:	60bb      	str	r3, [r7, #8]
}
 800eece:	bf00      	nop
 800eed0:	e7fe      	b.n	800eed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	685a      	ldr	r2, [r3, #4]
 800eed6:	4b14      	ldr	r3, [pc, #80]	; (800ef28 <vPortFree+0xb8>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4013      	ands	r3, r2
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d01e      	beq.n	800ef1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d11a      	bne.n	800ef1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	685a      	ldr	r2, [r3, #4]
 800eeec:	4b0e      	ldr	r3, [pc, #56]	; (800ef28 <vPortFree+0xb8>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	43db      	mvns	r3, r3
 800eef2:	401a      	ands	r2, r3
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eef8:	f7fe fc66 	bl	800d7c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	685a      	ldr	r2, [r3, #4]
 800ef00:	4b0a      	ldr	r3, [pc, #40]	; (800ef2c <vPortFree+0xbc>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4413      	add	r3, r2
 800ef06:	4a09      	ldr	r2, [pc, #36]	; (800ef2c <vPortFree+0xbc>)
 800ef08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ef0a:	6938      	ldr	r0, [r7, #16]
 800ef0c:	f000 f874 	bl	800eff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ef10:	4b07      	ldr	r3, [pc, #28]	; (800ef30 <vPortFree+0xc0>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	3301      	adds	r3, #1
 800ef16:	4a06      	ldr	r2, [pc, #24]	; (800ef30 <vPortFree+0xc0>)
 800ef18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ef1a:	f7fe fc63 	bl	800d7e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ef1e:	bf00      	nop
 800ef20:	3718      	adds	r7, #24
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	2001a280 	.word	0x2001a280
 800ef2c:	2001a270 	.word	0x2001a270
 800ef30:	2001a27c 	.word	0x2001a27c

0800ef34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ef34:	b480      	push	{r7}
 800ef36:	b085      	sub	sp, #20
 800ef38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ef3a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800ef3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ef40:	4b27      	ldr	r3, [pc, #156]	; (800efe0 <prvHeapInit+0xac>)
 800ef42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f003 0307 	and.w	r3, r3, #7
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d00c      	beq.n	800ef68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	3307      	adds	r3, #7
 800ef52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f023 0307 	bic.w	r3, r3, #7
 800ef5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef5c:	68ba      	ldr	r2, [r7, #8]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	4a1f      	ldr	r2, [pc, #124]	; (800efe0 <prvHeapInit+0xac>)
 800ef64:	4413      	add	r3, r2
 800ef66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef6c:	4a1d      	ldr	r2, [pc, #116]	; (800efe4 <prvHeapInit+0xb0>)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef72:	4b1c      	ldr	r3, [pc, #112]	; (800efe4 <prvHeapInit+0xb0>)
 800ef74:	2200      	movs	r2, #0
 800ef76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	68ba      	ldr	r2, [r7, #8]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef80:	2208      	movs	r2, #8
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	1a9b      	subs	r3, r3, r2
 800ef86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f023 0307 	bic.w	r3, r3, #7
 800ef8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	4a15      	ldr	r2, [pc, #84]	; (800efe8 <prvHeapInit+0xb4>)
 800ef94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef96:	4b14      	ldr	r3, [pc, #80]	; (800efe8 <prvHeapInit+0xb4>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef9e:	4b12      	ldr	r3, [pc, #72]	; (800efe8 <prvHeapInit+0xb4>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	2200      	movs	r2, #0
 800efa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	1ad2      	subs	r2, r2, r3
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800efb4:	4b0c      	ldr	r3, [pc, #48]	; (800efe8 <prvHeapInit+0xb4>)
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	4a0a      	ldr	r2, [pc, #40]	; (800efec <prvHeapInit+0xb8>)
 800efc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	4a09      	ldr	r2, [pc, #36]	; (800eff0 <prvHeapInit+0xbc>)
 800efca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800efcc:	4b09      	ldr	r3, [pc, #36]	; (800eff4 <prvHeapInit+0xc0>)
 800efce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800efd2:	601a      	str	r2, [r3, #0]
}
 800efd4:	bf00      	nop
 800efd6:	3714      	adds	r7, #20
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	20001264 	.word	0x20001264
 800efe4:	2001a264 	.word	0x2001a264
 800efe8:	2001a26c 	.word	0x2001a26c
 800efec:	2001a274 	.word	0x2001a274
 800eff0:	2001a270 	.word	0x2001a270
 800eff4:	2001a280 	.word	0x2001a280

0800eff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eff8:	b480      	push	{r7}
 800effa:	b085      	sub	sp, #20
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f000:	4b28      	ldr	r3, [pc, #160]	; (800f0a4 <prvInsertBlockIntoFreeList+0xac>)
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	e002      	b.n	800f00c <prvInsertBlockIntoFreeList+0x14>
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	60fb      	str	r3, [r7, #12]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	429a      	cmp	r2, r3
 800f014:	d8f7      	bhi.n	800f006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	68ba      	ldr	r2, [r7, #8]
 800f020:	4413      	add	r3, r2
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	429a      	cmp	r2, r3
 800f026:	d108      	bne.n	800f03a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	685a      	ldr	r2, [r3, #4]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	441a      	add	r2, r3
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	68ba      	ldr	r2, [r7, #8]
 800f044:	441a      	add	r2, r3
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d118      	bne.n	800f080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681a      	ldr	r2, [r3, #0]
 800f052:	4b15      	ldr	r3, [pc, #84]	; (800f0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	429a      	cmp	r2, r3
 800f058:	d00d      	beq.n	800f076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	685a      	ldr	r2, [r3, #4]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	441a      	add	r2, r3
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	601a      	str	r2, [r3, #0]
 800f074:	e008      	b.n	800f088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f076:	4b0c      	ldr	r3, [pc, #48]	; (800f0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	601a      	str	r2, [r3, #0]
 800f07e:	e003      	b.n	800f088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f088:	68fa      	ldr	r2, [r7, #12]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d002      	beq.n	800f096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f096:	bf00      	nop
 800f098:	3714      	adds	r7, #20
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop
 800f0a4:	2001a264 	.word	0x2001a264
 800f0a8:	2001a26c 	.word	0x2001a26c

0800f0ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	4912      	ldr	r1, [pc, #72]	; (800f0fc <MX_USB_DEVICE_Init+0x50>)
 800f0b4:	4812      	ldr	r0, [pc, #72]	; (800f100 <MX_USB_DEVICE_Init+0x54>)
 800f0b6:	f7fb ff23 	bl	800af00 <USBD_Init>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d001      	beq.n	800f0c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f0c0:	f7f1 fef6 	bl	8000eb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f0c4:	490f      	ldr	r1, [pc, #60]	; (800f104 <MX_USB_DEVICE_Init+0x58>)
 800f0c6:	480e      	ldr	r0, [pc, #56]	; (800f100 <MX_USB_DEVICE_Init+0x54>)
 800f0c8:	f7fb ff4a 	bl	800af60 <USBD_RegisterClass>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f0d2:	f7f1 feed 	bl	8000eb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f0d6:	490c      	ldr	r1, [pc, #48]	; (800f108 <MX_USB_DEVICE_Init+0x5c>)
 800f0d8:	4809      	ldr	r0, [pc, #36]	; (800f100 <MX_USB_DEVICE_Init+0x54>)
 800f0da:	f7fb fe81 	bl	800ade0 <USBD_CDC_RegisterInterface>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d001      	beq.n	800f0e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f0e4:	f7f1 fee4 	bl	8000eb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f0e8:	4805      	ldr	r0, [pc, #20]	; (800f100 <MX_USB_DEVICE_Init+0x54>)
 800f0ea:	f7fb ff6f 	bl	800afcc <USBD_Start>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d001      	beq.n	800f0f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f0f4:	f7f1 fedc 	bl	8000eb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f0f8:	bf00      	nop
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	2000011c 	.word	0x2000011c
 800f100:	2001a284 	.word	0x2001a284
 800f104:	20000084 	.word	0x20000084
 800f108:	20000108 	.word	0x20000108

0800f10c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f110:	2200      	movs	r2, #0
 800f112:	4905      	ldr	r1, [pc, #20]	; (800f128 <CDC_Init_FS+0x1c>)
 800f114:	4805      	ldr	r0, [pc, #20]	; (800f12c <CDC_Init_FS+0x20>)
 800f116:	f7fb fe7d 	bl	800ae14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f11a:	4905      	ldr	r1, [pc, #20]	; (800f130 <CDC_Init_FS+0x24>)
 800f11c:	4803      	ldr	r0, [pc, #12]	; (800f12c <CDC_Init_FS+0x20>)
 800f11e:	f7fb fe9b 	bl	800ae58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f122:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f124:	4618      	mov	r0, r3
 800f126:	bd80      	pop	{r7, pc}
 800f128:	2001ad60 	.word	0x2001ad60
 800f12c:	2001a284 	.word	0x2001a284
 800f130:	2001a560 	.word	0x2001a560

0800f134 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f134:	b480      	push	{r7}
 800f136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f138:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	4603      	mov	r3, r0
 800f14c:	6039      	str	r1, [r7, #0]
 800f14e:	71fb      	strb	r3, [r7, #7]
 800f150:	4613      	mov	r3, r2
 800f152:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f154:	79fb      	ldrb	r3, [r7, #7]
 800f156:	2b23      	cmp	r3, #35	; 0x23
 800f158:	d84a      	bhi.n	800f1f0 <CDC_Control_FS+0xac>
 800f15a:	a201      	add	r2, pc, #4	; (adr r2, 800f160 <CDC_Control_FS+0x1c>)
 800f15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f160:	0800f1f1 	.word	0x0800f1f1
 800f164:	0800f1f1 	.word	0x0800f1f1
 800f168:	0800f1f1 	.word	0x0800f1f1
 800f16c:	0800f1f1 	.word	0x0800f1f1
 800f170:	0800f1f1 	.word	0x0800f1f1
 800f174:	0800f1f1 	.word	0x0800f1f1
 800f178:	0800f1f1 	.word	0x0800f1f1
 800f17c:	0800f1f1 	.word	0x0800f1f1
 800f180:	0800f1f1 	.word	0x0800f1f1
 800f184:	0800f1f1 	.word	0x0800f1f1
 800f188:	0800f1f1 	.word	0x0800f1f1
 800f18c:	0800f1f1 	.word	0x0800f1f1
 800f190:	0800f1f1 	.word	0x0800f1f1
 800f194:	0800f1f1 	.word	0x0800f1f1
 800f198:	0800f1f1 	.word	0x0800f1f1
 800f19c:	0800f1f1 	.word	0x0800f1f1
 800f1a0:	0800f1f1 	.word	0x0800f1f1
 800f1a4:	0800f1f1 	.word	0x0800f1f1
 800f1a8:	0800f1f1 	.word	0x0800f1f1
 800f1ac:	0800f1f1 	.word	0x0800f1f1
 800f1b0:	0800f1f1 	.word	0x0800f1f1
 800f1b4:	0800f1f1 	.word	0x0800f1f1
 800f1b8:	0800f1f1 	.word	0x0800f1f1
 800f1bc:	0800f1f1 	.word	0x0800f1f1
 800f1c0:	0800f1f1 	.word	0x0800f1f1
 800f1c4:	0800f1f1 	.word	0x0800f1f1
 800f1c8:	0800f1f1 	.word	0x0800f1f1
 800f1cc:	0800f1f1 	.word	0x0800f1f1
 800f1d0:	0800f1f1 	.word	0x0800f1f1
 800f1d4:	0800f1f1 	.word	0x0800f1f1
 800f1d8:	0800f1f1 	.word	0x0800f1f1
 800f1dc:	0800f1f1 	.word	0x0800f1f1
 800f1e0:	0800f1f1 	.word	0x0800f1f1
 800f1e4:	0800f1f1 	.word	0x0800f1f1
 800f1e8:	0800f1f1 	.word	0x0800f1f1
 800f1ec:	0800f1f1 	.word	0x0800f1f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f1f0:	bf00      	nop
  }

  return (USBD_OK);
 800f1f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	370c      	adds	r7, #12
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b082      	sub	sp, #8
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f20a:	6879      	ldr	r1, [r7, #4]
 800f20c:	4805      	ldr	r0, [pc, #20]	; (800f224 <CDC_Receive_FS+0x24>)
 800f20e:	f7fb fe23 	bl	800ae58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f212:	4804      	ldr	r0, [pc, #16]	; (800f224 <CDC_Receive_FS+0x24>)
 800f214:	f7fb fe3e 	bl	800ae94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f218:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	2001a284 	.word	0x2001a284

0800f228 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f228:	b480      	push	{r7}
 800f22a:	b087      	sub	sp, #28
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	4613      	mov	r3, r2
 800f234:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f236:	2300      	movs	r3, #0
 800f238:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f23a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f23e:	4618      	mov	r0, r3
 800f240:	371c      	adds	r7, #28
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr
	...

0800f24c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b083      	sub	sp, #12
 800f250:	af00      	add	r7, sp, #0
 800f252:	4603      	mov	r3, r0
 800f254:	6039      	str	r1, [r7, #0]
 800f256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	2212      	movs	r2, #18
 800f25c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f25e:	4b03      	ldr	r3, [pc, #12]	; (800f26c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f260:	4618      	mov	r0, r3
 800f262:	370c      	adds	r7, #12
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr
 800f26c:	20000138 	.word	0x20000138

0800f270 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
 800f276:	4603      	mov	r3, r0
 800f278:	6039      	str	r1, [r7, #0]
 800f27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	2204      	movs	r2, #4
 800f280:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f282:	4b03      	ldr	r3, [pc, #12]	; (800f290 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f284:	4618      	mov	r0, r3
 800f286:	370c      	adds	r7, #12
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr
 800f290:	2000014c 	.word	0x2000014c

0800f294 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	4603      	mov	r3, r0
 800f29c:	6039      	str	r1, [r7, #0]
 800f29e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f2a0:	79fb      	ldrb	r3, [r7, #7]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d105      	bne.n	800f2b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2a6:	683a      	ldr	r2, [r7, #0]
 800f2a8:	4907      	ldr	r1, [pc, #28]	; (800f2c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f2aa:	4808      	ldr	r0, [pc, #32]	; (800f2cc <USBD_FS_ProductStrDescriptor+0x38>)
 800f2ac:	f7fd f83a 	bl	800c324 <USBD_GetString>
 800f2b0:	e004      	b.n	800f2bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2b2:	683a      	ldr	r2, [r7, #0]
 800f2b4:	4904      	ldr	r1, [pc, #16]	; (800f2c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f2b6:	4805      	ldr	r0, [pc, #20]	; (800f2cc <USBD_FS_ProductStrDescriptor+0x38>)
 800f2b8:	f7fd f834 	bl	800c324 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f2bc:	4b02      	ldr	r3, [pc, #8]	; (800f2c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3708      	adds	r7, #8
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	2001b560 	.word	0x2001b560
 800f2cc:	080107e8 	.word	0x080107e8

0800f2d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	6039      	str	r1, [r7, #0]
 800f2da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f2dc:	683a      	ldr	r2, [r7, #0]
 800f2de:	4904      	ldr	r1, [pc, #16]	; (800f2f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f2e0:	4804      	ldr	r0, [pc, #16]	; (800f2f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f2e2:	f7fd f81f 	bl	800c324 <USBD_GetString>
  return USBD_StrDesc;
 800f2e6:	4b02      	ldr	r3, [pc, #8]	; (800f2f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3708      	adds	r7, #8
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	2001b560 	.word	0x2001b560
 800f2f4:	08010800 	.word	0x08010800

0800f2f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	4603      	mov	r3, r0
 800f300:	6039      	str	r1, [r7, #0]
 800f302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	221a      	movs	r2, #26
 800f308:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f30a:	f000 f843 	bl	800f394 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f30e:	4b02      	ldr	r3, [pc, #8]	; (800f318 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f310:	4618      	mov	r0, r3
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	20000150 	.word	0x20000150

0800f31c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	4603      	mov	r3, r0
 800f324:	6039      	str	r1, [r7, #0]
 800f326:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f328:	79fb      	ldrb	r3, [r7, #7]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d105      	bne.n	800f33a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f32e:	683a      	ldr	r2, [r7, #0]
 800f330:	4907      	ldr	r1, [pc, #28]	; (800f350 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f332:	4808      	ldr	r0, [pc, #32]	; (800f354 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f334:	f7fc fff6 	bl	800c324 <USBD_GetString>
 800f338:	e004      	b.n	800f344 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f33a:	683a      	ldr	r2, [r7, #0]
 800f33c:	4904      	ldr	r1, [pc, #16]	; (800f350 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f33e:	4805      	ldr	r0, [pc, #20]	; (800f354 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f340:	f7fc fff0 	bl	800c324 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f344:	4b02      	ldr	r3, [pc, #8]	; (800f350 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f346:	4618      	mov	r0, r3
 800f348:	3708      	adds	r7, #8
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	2001b560 	.word	0x2001b560
 800f354:	08010814 	.word	0x08010814

0800f358 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	4603      	mov	r3, r0
 800f360:	6039      	str	r1, [r7, #0]
 800f362:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f364:	79fb      	ldrb	r3, [r7, #7]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d105      	bne.n	800f376 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f36a:	683a      	ldr	r2, [r7, #0]
 800f36c:	4907      	ldr	r1, [pc, #28]	; (800f38c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f36e:	4808      	ldr	r0, [pc, #32]	; (800f390 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f370:	f7fc ffd8 	bl	800c324 <USBD_GetString>
 800f374:	e004      	b.n	800f380 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f376:	683a      	ldr	r2, [r7, #0]
 800f378:	4904      	ldr	r1, [pc, #16]	; (800f38c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f37a:	4805      	ldr	r0, [pc, #20]	; (800f390 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f37c:	f7fc ffd2 	bl	800c324 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f380:	4b02      	ldr	r3, [pc, #8]	; (800f38c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f382:	4618      	mov	r0, r3
 800f384:	3708      	adds	r7, #8
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	2001b560 	.word	0x2001b560
 800f390:	08010820 	.word	0x08010820

0800f394 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f39a:	4b0f      	ldr	r3, [pc, #60]	; (800f3d8 <Get_SerialNum+0x44>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f3a0:	4b0e      	ldr	r3, [pc, #56]	; (800f3dc <Get_SerialNum+0x48>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f3a6:	4b0e      	ldr	r3, [pc, #56]	; (800f3e0 <Get_SerialNum+0x4c>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f3ac:	68fa      	ldr	r2, [r7, #12]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4413      	add	r3, r2
 800f3b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d009      	beq.n	800f3ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f3ba:	2208      	movs	r2, #8
 800f3bc:	4909      	ldr	r1, [pc, #36]	; (800f3e4 <Get_SerialNum+0x50>)
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f000 f814 	bl	800f3ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f3c4:	2204      	movs	r2, #4
 800f3c6:	4908      	ldr	r1, [pc, #32]	; (800f3e8 <Get_SerialNum+0x54>)
 800f3c8:	68b8      	ldr	r0, [r7, #8]
 800f3ca:	f000 f80f 	bl	800f3ec <IntToUnicode>
  }
}
 800f3ce:	bf00      	nop
 800f3d0:	3710      	adds	r7, #16
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	1fff7a10 	.word	0x1fff7a10
 800f3dc:	1fff7a14 	.word	0x1fff7a14
 800f3e0:	1fff7a18 	.word	0x1fff7a18
 800f3e4:	20000152 	.word	0x20000152
 800f3e8:	20000162 	.word	0x20000162

0800f3ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b087      	sub	sp, #28
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	60b9      	str	r1, [r7, #8]
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f3fe:	2300      	movs	r3, #0
 800f400:	75fb      	strb	r3, [r7, #23]
 800f402:	e027      	b.n	800f454 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	0f1b      	lsrs	r3, r3, #28
 800f408:	2b09      	cmp	r3, #9
 800f40a:	d80b      	bhi.n	800f424 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	0f1b      	lsrs	r3, r3, #28
 800f410:	b2da      	uxtb	r2, r3
 800f412:	7dfb      	ldrb	r3, [r7, #23]
 800f414:	005b      	lsls	r3, r3, #1
 800f416:	4619      	mov	r1, r3
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	440b      	add	r3, r1
 800f41c:	3230      	adds	r2, #48	; 0x30
 800f41e:	b2d2      	uxtb	r2, r2
 800f420:	701a      	strb	r2, [r3, #0]
 800f422:	e00a      	b.n	800f43a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	0f1b      	lsrs	r3, r3, #28
 800f428:	b2da      	uxtb	r2, r3
 800f42a:	7dfb      	ldrb	r3, [r7, #23]
 800f42c:	005b      	lsls	r3, r3, #1
 800f42e:	4619      	mov	r1, r3
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	440b      	add	r3, r1
 800f434:	3237      	adds	r2, #55	; 0x37
 800f436:	b2d2      	uxtb	r2, r2
 800f438:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	011b      	lsls	r3, r3, #4
 800f43e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f440:	7dfb      	ldrb	r3, [r7, #23]
 800f442:	005b      	lsls	r3, r3, #1
 800f444:	3301      	adds	r3, #1
 800f446:	68ba      	ldr	r2, [r7, #8]
 800f448:	4413      	add	r3, r2
 800f44a:	2200      	movs	r2, #0
 800f44c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f44e:	7dfb      	ldrb	r3, [r7, #23]
 800f450:	3301      	adds	r3, #1
 800f452:	75fb      	strb	r3, [r7, #23]
 800f454:	7dfa      	ldrb	r2, [r7, #23]
 800f456:	79fb      	ldrb	r3, [r7, #7]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d3d3      	bcc.n	800f404 <IntToUnicode+0x18>
  }
}
 800f45c:	bf00      	nop
 800f45e:	bf00      	nop
 800f460:	371c      	adds	r7, #28
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
	...

0800f46c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b08a      	sub	sp, #40	; 0x28
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f474:	f107 0314 	add.w	r3, r7, #20
 800f478:	2200      	movs	r2, #0
 800f47a:	601a      	str	r2, [r3, #0]
 800f47c:	605a      	str	r2, [r3, #4]
 800f47e:	609a      	str	r2, [r3, #8]
 800f480:	60da      	str	r2, [r3, #12]
 800f482:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f48c:	d13a      	bne.n	800f504 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f48e:	2300      	movs	r3, #0
 800f490:	613b      	str	r3, [r7, #16]
 800f492:	4b1e      	ldr	r3, [pc, #120]	; (800f50c <HAL_PCD_MspInit+0xa0>)
 800f494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f496:	4a1d      	ldr	r2, [pc, #116]	; (800f50c <HAL_PCD_MspInit+0xa0>)
 800f498:	f043 0301 	orr.w	r3, r3, #1
 800f49c:	6313      	str	r3, [r2, #48]	; 0x30
 800f49e:	4b1b      	ldr	r3, [pc, #108]	; (800f50c <HAL_PCD_MspInit+0xa0>)
 800f4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4a2:	f003 0301 	and.w	r3, r3, #1
 800f4a6:	613b      	str	r3, [r7, #16]
 800f4a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f4aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f4ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4b0:	2302      	movs	r3, #2
 800f4b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4b8:	2303      	movs	r3, #3
 800f4ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f4bc:	230a      	movs	r3, #10
 800f4be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4c0:	f107 0314 	add.w	r3, r7, #20
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	4812      	ldr	r0, [pc, #72]	; (800f510 <HAL_PCD_MspInit+0xa4>)
 800f4c8:	f7f2 fe68 	bl	800219c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f4cc:	4b0f      	ldr	r3, [pc, #60]	; (800f50c <HAL_PCD_MspInit+0xa0>)
 800f4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4d0:	4a0e      	ldr	r2, [pc, #56]	; (800f50c <HAL_PCD_MspInit+0xa0>)
 800f4d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4d6:	6353      	str	r3, [r2, #52]	; 0x34
 800f4d8:	2300      	movs	r3, #0
 800f4da:	60fb      	str	r3, [r7, #12]
 800f4dc:	4b0b      	ldr	r3, [pc, #44]	; (800f50c <HAL_PCD_MspInit+0xa0>)
 800f4de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4e0:	4a0a      	ldr	r2, [pc, #40]	; (800f50c <HAL_PCD_MspInit+0xa0>)
 800f4e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f4e6:	6453      	str	r3, [r2, #68]	; 0x44
 800f4e8:	4b08      	ldr	r3, [pc, #32]	; (800f50c <HAL_PCD_MspInit+0xa0>)
 800f4ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f4f0:	60fb      	str	r3, [r7, #12]
 800f4f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	2105      	movs	r1, #5
 800f4f8:	2043      	movs	r0, #67	; 0x43
 800f4fa:	f7f2 fe0b 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f4fe:	2043      	movs	r0, #67	; 0x43
 800f500:	f7f2 fe34 	bl	800216c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f504:	bf00      	nop
 800f506:	3728      	adds	r7, #40	; 0x28
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	40023800 	.word	0x40023800
 800f510:	40020000 	.word	0x40020000

0800f514 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f528:	4619      	mov	r1, r3
 800f52a:	4610      	mov	r0, r2
 800f52c:	f7fb fd9b 	bl	800b066 <USBD_LL_SetupStage>
}
 800f530:	bf00      	nop
 800f532:	3708      	adds	r7, #8
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	460b      	mov	r3, r1
 800f542:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f54a:	78fa      	ldrb	r2, [r7, #3]
 800f54c:	6879      	ldr	r1, [r7, #4]
 800f54e:	4613      	mov	r3, r2
 800f550:	00db      	lsls	r3, r3, #3
 800f552:	4413      	add	r3, r2
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	440b      	add	r3, r1
 800f558:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	78fb      	ldrb	r3, [r7, #3]
 800f560:	4619      	mov	r1, r3
 800f562:	f7fb fdd5 	bl	800b110 <USBD_LL_DataOutStage>
}
 800f566:	bf00      	nop
 800f568:	3708      	adds	r7, #8
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}

0800f56e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f56e:	b580      	push	{r7, lr}
 800f570:	b082      	sub	sp, #8
 800f572:	af00      	add	r7, sp, #0
 800f574:	6078      	str	r0, [r7, #4]
 800f576:	460b      	mov	r3, r1
 800f578:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f580:	78fa      	ldrb	r2, [r7, #3]
 800f582:	6879      	ldr	r1, [r7, #4]
 800f584:	4613      	mov	r3, r2
 800f586:	00db      	lsls	r3, r3, #3
 800f588:	4413      	add	r3, r2
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	440b      	add	r3, r1
 800f58e:	334c      	adds	r3, #76	; 0x4c
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	78fb      	ldrb	r3, [r7, #3]
 800f594:	4619      	mov	r1, r3
 800f596:	f7fb fe6e 	bl	800b276 <USBD_LL_DataInStage>
}
 800f59a:	bf00      	nop
 800f59c:	3708      	adds	r7, #8
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b082      	sub	sp, #8
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7fb ffa2 	bl	800b4fa <USBD_LL_SOF>
}
 800f5b6:	bf00      	nop
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b084      	sub	sp, #16
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	2b02      	cmp	r3, #2
 800f5d0:	d001      	beq.n	800f5d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f5d2:	f7f1 fc6d 	bl	8000eb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5dc:	7bfa      	ldrb	r2, [r7, #15]
 800f5de:	4611      	mov	r1, r2
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7fb ff4c 	bl	800b47e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7fb fef4 	bl	800b3da <USBD_LL_Reset>
}
 800f5f2:	bf00      	nop
 800f5f4:	3710      	adds	r7, #16
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
	...

0800f5fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fb ff47 	bl	800b49e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	6812      	ldr	r2, [r2, #0]
 800f61e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f622:	f043 0301 	orr.w	r3, r3, #1
 800f626:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6a1b      	ldr	r3, [r3, #32]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d005      	beq.n	800f63c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f630:	4b04      	ldr	r3, [pc, #16]	; (800f644 <HAL_PCD_SuspendCallback+0x48>)
 800f632:	691b      	ldr	r3, [r3, #16]
 800f634:	4a03      	ldr	r2, [pc, #12]	; (800f644 <HAL_PCD_SuspendCallback+0x48>)
 800f636:	f043 0306 	orr.w	r3, r3, #6
 800f63a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f63c:	bf00      	nop
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	e000ed00 	.word	0xe000ed00

0800f648 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f656:	4618      	mov	r0, r3
 800f658:	f7fb ff37 	bl	800b4ca <USBD_LL_Resume>
}
 800f65c:	bf00      	nop
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	460b      	mov	r3, r1
 800f66e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f676:	78fa      	ldrb	r2, [r7, #3]
 800f678:	4611      	mov	r1, r2
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fb ff8f 	bl	800b59e <USBD_LL_IsoOUTIncomplete>
}
 800f680:	bf00      	nop
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	460b      	mov	r3, r1
 800f692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f69a:	78fa      	ldrb	r2, [r7, #3]
 800f69c:	4611      	mov	r1, r2
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fb ff4b 	bl	800b53a <USBD_LL_IsoINIncomplete>
}
 800f6a4:	bf00      	nop
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fb ffa1 	bl	800b602 <USBD_LL_DevConnected>
}
 800f6c0:	bf00      	nop
 800f6c2:	3708      	adds	r7, #8
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fb ff9e 	bl	800b618 <USBD_LL_DevDisconnected>
}
 800f6dc:	bf00      	nop
 800f6de:	3708      	adds	r7, #8
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d13c      	bne.n	800f76e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f6f4:	4a20      	ldr	r2, [pc, #128]	; (800f778 <USBD_LL_Init+0x94>)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a1e      	ldr	r2, [pc, #120]	; (800f778 <USBD_LL_Init+0x94>)
 800f700:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f704:	4b1c      	ldr	r3, [pc, #112]	; (800f778 <USBD_LL_Init+0x94>)
 800f706:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f70a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f70c:	4b1a      	ldr	r3, [pc, #104]	; (800f778 <USBD_LL_Init+0x94>)
 800f70e:	2204      	movs	r2, #4
 800f710:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f712:	4b19      	ldr	r3, [pc, #100]	; (800f778 <USBD_LL_Init+0x94>)
 800f714:	2202      	movs	r2, #2
 800f716:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f718:	4b17      	ldr	r3, [pc, #92]	; (800f778 <USBD_LL_Init+0x94>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f71e:	4b16      	ldr	r3, [pc, #88]	; (800f778 <USBD_LL_Init+0x94>)
 800f720:	2202      	movs	r2, #2
 800f722:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f724:	4b14      	ldr	r3, [pc, #80]	; (800f778 <USBD_LL_Init+0x94>)
 800f726:	2200      	movs	r2, #0
 800f728:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f72a:	4b13      	ldr	r3, [pc, #76]	; (800f778 <USBD_LL_Init+0x94>)
 800f72c:	2200      	movs	r2, #0
 800f72e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f730:	4b11      	ldr	r3, [pc, #68]	; (800f778 <USBD_LL_Init+0x94>)
 800f732:	2200      	movs	r2, #0
 800f734:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f736:	4b10      	ldr	r3, [pc, #64]	; (800f778 <USBD_LL_Init+0x94>)
 800f738:	2200      	movs	r2, #0
 800f73a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f73c:	4b0e      	ldr	r3, [pc, #56]	; (800f778 <USBD_LL_Init+0x94>)
 800f73e:	2200      	movs	r2, #0
 800f740:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f742:	480d      	ldr	r0, [pc, #52]	; (800f778 <USBD_LL_Init+0x94>)
 800f744:	f7f3 fe2c 	bl	80033a0 <HAL_PCD_Init>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d001      	beq.n	800f752 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f74e:	f7f1 fbaf 	bl	8000eb0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f752:	2180      	movs	r1, #128	; 0x80
 800f754:	4808      	ldr	r0, [pc, #32]	; (800f778 <USBD_LL_Init+0x94>)
 800f756:	f7f5 f88e 	bl	8004876 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f75a:	2240      	movs	r2, #64	; 0x40
 800f75c:	2100      	movs	r1, #0
 800f75e:	4806      	ldr	r0, [pc, #24]	; (800f778 <USBD_LL_Init+0x94>)
 800f760:	f7f5 f842 	bl	80047e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f764:	2280      	movs	r2, #128	; 0x80
 800f766:	2101      	movs	r1, #1
 800f768:	4803      	ldr	r0, [pc, #12]	; (800f778 <USBD_LL_Init+0x94>)
 800f76a:	f7f5 f83d 	bl	80047e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	2001b760 	.word	0x2001b760

0800f77c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f784:	2300      	movs	r3, #0
 800f786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f788:	2300      	movs	r3, #0
 800f78a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f792:	4618      	mov	r0, r3
 800f794:	f7f3 ff2c 	bl	80035f0 <HAL_PCD_Start>
 800f798:	4603      	mov	r3, r0
 800f79a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f79c:	7bfb      	ldrb	r3, [r7, #15]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f000 f942 	bl	800fa28 <USBD_Get_USB_Status>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f7b2:	b580      	push	{r7, lr}
 800f7b4:	b084      	sub	sp, #16
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
 800f7ba:	4608      	mov	r0, r1
 800f7bc:	4611      	mov	r1, r2
 800f7be:	461a      	mov	r2, r3
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	70fb      	strb	r3, [r7, #3]
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	70bb      	strb	r3, [r7, #2]
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f7da:	78bb      	ldrb	r3, [r7, #2]
 800f7dc:	883a      	ldrh	r2, [r7, #0]
 800f7de:	78f9      	ldrb	r1, [r7, #3]
 800f7e0:	f7f4 fbfd 	bl	8003fde <HAL_PCD_EP_Open>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7e8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f000 f91c 	bl	800fa28 <USBD_Get_USB_Status>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b084      	sub	sp, #16
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
 800f806:	460b      	mov	r3, r1
 800f808:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f80a:	2300      	movs	r3, #0
 800f80c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f80e:	2300      	movs	r3, #0
 800f810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f818:	78fa      	ldrb	r2, [r7, #3]
 800f81a:	4611      	mov	r1, r2
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7f4 fc46 	bl	80040ae <HAL_PCD_EP_Close>
 800f822:	4603      	mov	r3, r0
 800f824:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f826:	7bfb      	ldrb	r3, [r7, #15]
 800f828:	4618      	mov	r0, r3
 800f82a:	f000 f8fd 	bl	800fa28 <USBD_Get_USB_Status>
 800f82e:	4603      	mov	r3, r0
 800f830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f832:	7bbb      	ldrb	r3, [r7, #14]
}
 800f834:	4618      	mov	r0, r3
 800f836:	3710      	adds	r7, #16
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b084      	sub	sp, #16
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	460b      	mov	r3, r1
 800f846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f848:	2300      	movs	r3, #0
 800f84a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f84c:	2300      	movs	r3, #0
 800f84e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f856:	78fa      	ldrb	r2, [r7, #3]
 800f858:	4611      	mov	r1, r2
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7f4 fd1e 	bl	800429c <HAL_PCD_EP_SetStall>
 800f860:	4603      	mov	r3, r0
 800f862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f864:	7bfb      	ldrb	r3, [r7, #15]
 800f866:	4618      	mov	r0, r3
 800f868:	f000 f8de 	bl	800fa28 <USBD_Get_USB_Status>
 800f86c:	4603      	mov	r3, r0
 800f86e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f870:	7bbb      	ldrb	r3, [r7, #14]
}
 800f872:	4618      	mov	r0, r3
 800f874:	3710      	adds	r7, #16
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}

0800f87a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f87a:	b580      	push	{r7, lr}
 800f87c:	b084      	sub	sp, #16
 800f87e:	af00      	add	r7, sp, #0
 800f880:	6078      	str	r0, [r7, #4]
 800f882:	460b      	mov	r3, r1
 800f884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f886:	2300      	movs	r3, #0
 800f888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f88a:	2300      	movs	r3, #0
 800f88c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f894:	78fa      	ldrb	r2, [r7, #3]
 800f896:	4611      	mov	r1, r2
 800f898:	4618      	mov	r0, r3
 800f89a:	f7f4 fd63 	bl	8004364 <HAL_PCD_EP_ClrStall>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8a2:	7bfb      	ldrb	r3, [r7, #15]
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f000 f8bf 	bl	800fa28 <USBD_Get_USB_Status>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3710      	adds	r7, #16
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b085      	sub	sp, #20
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f8ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f8cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	da0b      	bge.n	800f8ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f8d4:	78fb      	ldrb	r3, [r7, #3]
 800f8d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8da:	68f9      	ldr	r1, [r7, #12]
 800f8dc:	4613      	mov	r3, r2
 800f8de:	00db      	lsls	r3, r3, #3
 800f8e0:	4413      	add	r3, r2
 800f8e2:	009b      	lsls	r3, r3, #2
 800f8e4:	440b      	add	r3, r1
 800f8e6:	333e      	adds	r3, #62	; 0x3e
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	e00b      	b.n	800f904 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f8ec:	78fb      	ldrb	r3, [r7, #3]
 800f8ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8f2:	68f9      	ldr	r1, [r7, #12]
 800f8f4:	4613      	mov	r3, r2
 800f8f6:	00db      	lsls	r3, r3, #3
 800f8f8:	4413      	add	r3, r2
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	440b      	add	r3, r1
 800f8fe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f902:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f904:	4618      	mov	r0, r3
 800f906:	3714      	adds	r7, #20
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	460b      	mov	r3, r1
 800f91a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f91c:	2300      	movs	r3, #0
 800f91e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f920:	2300      	movs	r3, #0
 800f922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f92a:	78fa      	ldrb	r2, [r7, #3]
 800f92c:	4611      	mov	r1, r2
 800f92e:	4618      	mov	r0, r3
 800f930:	f7f4 fb30 	bl	8003f94 <HAL_PCD_SetAddress>
 800f934:	4603      	mov	r3, r0
 800f936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f938:	7bfb      	ldrb	r3, [r7, #15]
 800f93a:	4618      	mov	r0, r3
 800f93c:	f000 f874 	bl	800fa28 <USBD_Get_USB_Status>
 800f940:	4603      	mov	r3, r0
 800f942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f944:	7bbb      	ldrb	r3, [r7, #14]
}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b086      	sub	sp, #24
 800f952:	af00      	add	r7, sp, #0
 800f954:	60f8      	str	r0, [r7, #12]
 800f956:	607a      	str	r2, [r7, #4]
 800f958:	603b      	str	r3, [r7, #0]
 800f95a:	460b      	mov	r3, r1
 800f95c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f95e:	2300      	movs	r3, #0
 800f960:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f962:	2300      	movs	r3, #0
 800f964:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f96c:	7af9      	ldrb	r1, [r7, #11]
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	f7f4 fc49 	bl	8004208 <HAL_PCD_EP_Transmit>
 800f976:	4603      	mov	r3, r0
 800f978:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f97a:	7dfb      	ldrb	r3, [r7, #23]
 800f97c:	4618      	mov	r0, r3
 800f97e:	f000 f853 	bl	800fa28 <USBD_Get_USB_Status>
 800f982:	4603      	mov	r3, r0
 800f984:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f986:	7dbb      	ldrb	r3, [r7, #22]
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3718      	adds	r7, #24
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b086      	sub	sp, #24
 800f994:	af00      	add	r7, sp, #0
 800f996:	60f8      	str	r0, [r7, #12]
 800f998:	607a      	str	r2, [r7, #4]
 800f99a:	603b      	str	r3, [r7, #0]
 800f99c:	460b      	mov	r3, r1
 800f99e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f9ae:	7af9      	ldrb	r1, [r7, #11]
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	f7f4 fbc5 	bl	8004142 <HAL_PCD_EP_Receive>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9bc:	7dfb      	ldrb	r3, [r7, #23]
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f000 f832 	bl	800fa28 <USBD_Get_USB_Status>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f9c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3718      	adds	r7, #24
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b082      	sub	sp, #8
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	460b      	mov	r3, r1
 800f9dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9e4:	78fa      	ldrb	r2, [r7, #3]
 800f9e6:	4611      	mov	r1, r2
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7f4 fbf5 	bl	80041d8 <HAL_PCD_EP_GetRxCount>
 800f9ee:	4603      	mov	r3, r0
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3708      	adds	r7, #8
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fa00:	4b03      	ldr	r3, [pc, #12]	; (800fa10 <USBD_static_malloc+0x18>)
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	370c      	adds	r7, #12
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr
 800fa0e:	bf00      	nop
 800fa10:	2001bc6c 	.word	0x2001bc6c

0800fa14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]

}
 800fa1c:	bf00      	nop
 800fa1e:	370c      	adds	r7, #12
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b085      	sub	sp, #20
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	4603      	mov	r3, r0
 800fa30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa32:	2300      	movs	r3, #0
 800fa34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fa36:	79fb      	ldrb	r3, [r7, #7]
 800fa38:	2b03      	cmp	r3, #3
 800fa3a:	d817      	bhi.n	800fa6c <USBD_Get_USB_Status+0x44>
 800fa3c:	a201      	add	r2, pc, #4	; (adr r2, 800fa44 <USBD_Get_USB_Status+0x1c>)
 800fa3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa42:	bf00      	nop
 800fa44:	0800fa55 	.word	0x0800fa55
 800fa48:	0800fa5b 	.word	0x0800fa5b
 800fa4c:	0800fa61 	.word	0x0800fa61
 800fa50:	0800fa67 	.word	0x0800fa67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fa54:	2300      	movs	r3, #0
 800fa56:	73fb      	strb	r3, [r7, #15]
    break;
 800fa58:	e00b      	b.n	800fa72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa5a:	2303      	movs	r3, #3
 800fa5c:	73fb      	strb	r3, [r7, #15]
    break;
 800fa5e:	e008      	b.n	800fa72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa60:	2301      	movs	r3, #1
 800fa62:	73fb      	strb	r3, [r7, #15]
    break;
 800fa64:	e005      	b.n	800fa72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa66:	2303      	movs	r3, #3
 800fa68:	73fb      	strb	r3, [r7, #15]
    break;
 800fa6a:	e002      	b.n	800fa72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fa6c:	2303      	movs	r3, #3
 800fa6e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa70:	bf00      	nop
  }
  return usb_status;
 800fa72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3714      	adds	r7, #20
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <__errno>:
 800fa80:	4b01      	ldr	r3, [pc, #4]	; (800fa88 <__errno+0x8>)
 800fa82:	6818      	ldr	r0, [r3, #0]
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop
 800fa88:	2000016c 	.word	0x2000016c

0800fa8c <__libc_init_array>:
 800fa8c:	b570      	push	{r4, r5, r6, lr}
 800fa8e:	4d0d      	ldr	r5, [pc, #52]	; (800fac4 <__libc_init_array+0x38>)
 800fa90:	4c0d      	ldr	r4, [pc, #52]	; (800fac8 <__libc_init_array+0x3c>)
 800fa92:	1b64      	subs	r4, r4, r5
 800fa94:	10a4      	asrs	r4, r4, #2
 800fa96:	2600      	movs	r6, #0
 800fa98:	42a6      	cmp	r6, r4
 800fa9a:	d109      	bne.n	800fab0 <__libc_init_array+0x24>
 800fa9c:	4d0b      	ldr	r5, [pc, #44]	; (800facc <__libc_init_array+0x40>)
 800fa9e:	4c0c      	ldr	r4, [pc, #48]	; (800fad0 <__libc_init_array+0x44>)
 800faa0:	f000 fd08 	bl	80104b4 <_init>
 800faa4:	1b64      	subs	r4, r4, r5
 800faa6:	10a4      	asrs	r4, r4, #2
 800faa8:	2600      	movs	r6, #0
 800faaa:	42a6      	cmp	r6, r4
 800faac:	d105      	bne.n	800faba <__libc_init_array+0x2e>
 800faae:	bd70      	pop	{r4, r5, r6, pc}
 800fab0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fab4:	4798      	blx	r3
 800fab6:	3601      	adds	r6, #1
 800fab8:	e7ee      	b.n	800fa98 <__libc_init_array+0xc>
 800faba:	f855 3b04 	ldr.w	r3, [r5], #4
 800fabe:	4798      	blx	r3
 800fac0:	3601      	adds	r6, #1
 800fac2:	e7f2      	b.n	800faaa <__libc_init_array+0x1e>
 800fac4:	080131b8 	.word	0x080131b8
 800fac8:	080131b8 	.word	0x080131b8
 800facc:	080131b8 	.word	0x080131b8
 800fad0:	080131bc 	.word	0x080131bc

0800fad4 <__retarget_lock_acquire_recursive>:
 800fad4:	4770      	bx	lr

0800fad6 <__retarget_lock_release_recursive>:
 800fad6:	4770      	bx	lr

0800fad8 <malloc>:
 800fad8:	4b02      	ldr	r3, [pc, #8]	; (800fae4 <malloc+0xc>)
 800fada:	4601      	mov	r1, r0
 800fadc:	6818      	ldr	r0, [r3, #0]
 800fade:	f000 b88d 	b.w	800fbfc <_malloc_r>
 800fae2:	bf00      	nop
 800fae4:	2000016c 	.word	0x2000016c

0800fae8 <free>:
 800fae8:	4b02      	ldr	r3, [pc, #8]	; (800faf4 <free+0xc>)
 800faea:	4601      	mov	r1, r0
 800faec:	6818      	ldr	r0, [r3, #0]
 800faee:	f000 b819 	b.w	800fb24 <_free_r>
 800faf2:	bf00      	nop
 800faf4:	2000016c 	.word	0x2000016c

0800faf8 <memcpy>:
 800faf8:	440a      	add	r2, r1
 800fafa:	4291      	cmp	r1, r2
 800fafc:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb00:	d100      	bne.n	800fb04 <memcpy+0xc>
 800fb02:	4770      	bx	lr
 800fb04:	b510      	push	{r4, lr}
 800fb06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb0e:	4291      	cmp	r1, r2
 800fb10:	d1f9      	bne.n	800fb06 <memcpy+0xe>
 800fb12:	bd10      	pop	{r4, pc}

0800fb14 <memset>:
 800fb14:	4402      	add	r2, r0
 800fb16:	4603      	mov	r3, r0
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d100      	bne.n	800fb1e <memset+0xa>
 800fb1c:	4770      	bx	lr
 800fb1e:	f803 1b01 	strb.w	r1, [r3], #1
 800fb22:	e7f9      	b.n	800fb18 <memset+0x4>

0800fb24 <_free_r>:
 800fb24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb26:	2900      	cmp	r1, #0
 800fb28:	d044      	beq.n	800fbb4 <_free_r+0x90>
 800fb2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb2e:	9001      	str	r0, [sp, #4]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	f1a1 0404 	sub.w	r4, r1, #4
 800fb36:	bfb8      	it	lt
 800fb38:	18e4      	addlt	r4, r4, r3
 800fb3a:	f000 f96d 	bl	800fe18 <__malloc_lock>
 800fb3e:	4a1e      	ldr	r2, [pc, #120]	; (800fbb8 <_free_r+0x94>)
 800fb40:	9801      	ldr	r0, [sp, #4]
 800fb42:	6813      	ldr	r3, [r2, #0]
 800fb44:	b933      	cbnz	r3, 800fb54 <_free_r+0x30>
 800fb46:	6063      	str	r3, [r4, #4]
 800fb48:	6014      	str	r4, [r2, #0]
 800fb4a:	b003      	add	sp, #12
 800fb4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb50:	f000 b968 	b.w	800fe24 <__malloc_unlock>
 800fb54:	42a3      	cmp	r3, r4
 800fb56:	d908      	bls.n	800fb6a <_free_r+0x46>
 800fb58:	6825      	ldr	r5, [r4, #0]
 800fb5a:	1961      	adds	r1, r4, r5
 800fb5c:	428b      	cmp	r3, r1
 800fb5e:	bf01      	itttt	eq
 800fb60:	6819      	ldreq	r1, [r3, #0]
 800fb62:	685b      	ldreq	r3, [r3, #4]
 800fb64:	1949      	addeq	r1, r1, r5
 800fb66:	6021      	streq	r1, [r4, #0]
 800fb68:	e7ed      	b.n	800fb46 <_free_r+0x22>
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	b10b      	cbz	r3, 800fb74 <_free_r+0x50>
 800fb70:	42a3      	cmp	r3, r4
 800fb72:	d9fa      	bls.n	800fb6a <_free_r+0x46>
 800fb74:	6811      	ldr	r1, [r2, #0]
 800fb76:	1855      	adds	r5, r2, r1
 800fb78:	42a5      	cmp	r5, r4
 800fb7a:	d10b      	bne.n	800fb94 <_free_r+0x70>
 800fb7c:	6824      	ldr	r4, [r4, #0]
 800fb7e:	4421      	add	r1, r4
 800fb80:	1854      	adds	r4, r2, r1
 800fb82:	42a3      	cmp	r3, r4
 800fb84:	6011      	str	r1, [r2, #0]
 800fb86:	d1e0      	bne.n	800fb4a <_free_r+0x26>
 800fb88:	681c      	ldr	r4, [r3, #0]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	6053      	str	r3, [r2, #4]
 800fb8e:	4421      	add	r1, r4
 800fb90:	6011      	str	r1, [r2, #0]
 800fb92:	e7da      	b.n	800fb4a <_free_r+0x26>
 800fb94:	d902      	bls.n	800fb9c <_free_r+0x78>
 800fb96:	230c      	movs	r3, #12
 800fb98:	6003      	str	r3, [r0, #0]
 800fb9a:	e7d6      	b.n	800fb4a <_free_r+0x26>
 800fb9c:	6825      	ldr	r5, [r4, #0]
 800fb9e:	1961      	adds	r1, r4, r5
 800fba0:	428b      	cmp	r3, r1
 800fba2:	bf04      	itt	eq
 800fba4:	6819      	ldreq	r1, [r3, #0]
 800fba6:	685b      	ldreq	r3, [r3, #4]
 800fba8:	6063      	str	r3, [r4, #4]
 800fbaa:	bf04      	itt	eq
 800fbac:	1949      	addeq	r1, r1, r5
 800fbae:	6021      	streq	r1, [r4, #0]
 800fbb0:	6054      	str	r4, [r2, #4]
 800fbb2:	e7ca      	b.n	800fb4a <_free_r+0x26>
 800fbb4:	b003      	add	sp, #12
 800fbb6:	bd30      	pop	{r4, r5, pc}
 800fbb8:	2001be90 	.word	0x2001be90

0800fbbc <sbrk_aligned>:
 800fbbc:	b570      	push	{r4, r5, r6, lr}
 800fbbe:	4e0e      	ldr	r6, [pc, #56]	; (800fbf8 <sbrk_aligned+0x3c>)
 800fbc0:	460c      	mov	r4, r1
 800fbc2:	6831      	ldr	r1, [r6, #0]
 800fbc4:	4605      	mov	r5, r0
 800fbc6:	b911      	cbnz	r1, 800fbce <sbrk_aligned+0x12>
 800fbc8:	f000 f8f6 	bl	800fdb8 <_sbrk_r>
 800fbcc:	6030      	str	r0, [r6, #0]
 800fbce:	4621      	mov	r1, r4
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	f000 f8f1 	bl	800fdb8 <_sbrk_r>
 800fbd6:	1c43      	adds	r3, r0, #1
 800fbd8:	d00a      	beq.n	800fbf0 <sbrk_aligned+0x34>
 800fbda:	1cc4      	adds	r4, r0, #3
 800fbdc:	f024 0403 	bic.w	r4, r4, #3
 800fbe0:	42a0      	cmp	r0, r4
 800fbe2:	d007      	beq.n	800fbf4 <sbrk_aligned+0x38>
 800fbe4:	1a21      	subs	r1, r4, r0
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f000 f8e6 	bl	800fdb8 <_sbrk_r>
 800fbec:	3001      	adds	r0, #1
 800fbee:	d101      	bne.n	800fbf4 <sbrk_aligned+0x38>
 800fbf0:	f04f 34ff 	mov.w	r4, #4294967295
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	bd70      	pop	{r4, r5, r6, pc}
 800fbf8:	2001be94 	.word	0x2001be94

0800fbfc <_malloc_r>:
 800fbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc00:	1ccd      	adds	r5, r1, #3
 800fc02:	f025 0503 	bic.w	r5, r5, #3
 800fc06:	3508      	adds	r5, #8
 800fc08:	2d0c      	cmp	r5, #12
 800fc0a:	bf38      	it	cc
 800fc0c:	250c      	movcc	r5, #12
 800fc0e:	2d00      	cmp	r5, #0
 800fc10:	4607      	mov	r7, r0
 800fc12:	db01      	blt.n	800fc18 <_malloc_r+0x1c>
 800fc14:	42a9      	cmp	r1, r5
 800fc16:	d905      	bls.n	800fc24 <_malloc_r+0x28>
 800fc18:	230c      	movs	r3, #12
 800fc1a:	603b      	str	r3, [r7, #0]
 800fc1c:	2600      	movs	r6, #0
 800fc1e:	4630      	mov	r0, r6
 800fc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc24:	4e2e      	ldr	r6, [pc, #184]	; (800fce0 <_malloc_r+0xe4>)
 800fc26:	f000 f8f7 	bl	800fe18 <__malloc_lock>
 800fc2a:	6833      	ldr	r3, [r6, #0]
 800fc2c:	461c      	mov	r4, r3
 800fc2e:	bb34      	cbnz	r4, 800fc7e <_malloc_r+0x82>
 800fc30:	4629      	mov	r1, r5
 800fc32:	4638      	mov	r0, r7
 800fc34:	f7ff ffc2 	bl	800fbbc <sbrk_aligned>
 800fc38:	1c43      	adds	r3, r0, #1
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	d14d      	bne.n	800fcda <_malloc_r+0xde>
 800fc3e:	6834      	ldr	r4, [r6, #0]
 800fc40:	4626      	mov	r6, r4
 800fc42:	2e00      	cmp	r6, #0
 800fc44:	d140      	bne.n	800fcc8 <_malloc_r+0xcc>
 800fc46:	6823      	ldr	r3, [r4, #0]
 800fc48:	4631      	mov	r1, r6
 800fc4a:	4638      	mov	r0, r7
 800fc4c:	eb04 0803 	add.w	r8, r4, r3
 800fc50:	f000 f8b2 	bl	800fdb8 <_sbrk_r>
 800fc54:	4580      	cmp	r8, r0
 800fc56:	d13a      	bne.n	800fcce <_malloc_r+0xd2>
 800fc58:	6821      	ldr	r1, [r4, #0]
 800fc5a:	3503      	adds	r5, #3
 800fc5c:	1a6d      	subs	r5, r5, r1
 800fc5e:	f025 0503 	bic.w	r5, r5, #3
 800fc62:	3508      	adds	r5, #8
 800fc64:	2d0c      	cmp	r5, #12
 800fc66:	bf38      	it	cc
 800fc68:	250c      	movcc	r5, #12
 800fc6a:	4629      	mov	r1, r5
 800fc6c:	4638      	mov	r0, r7
 800fc6e:	f7ff ffa5 	bl	800fbbc <sbrk_aligned>
 800fc72:	3001      	adds	r0, #1
 800fc74:	d02b      	beq.n	800fcce <_malloc_r+0xd2>
 800fc76:	6823      	ldr	r3, [r4, #0]
 800fc78:	442b      	add	r3, r5
 800fc7a:	6023      	str	r3, [r4, #0]
 800fc7c:	e00e      	b.n	800fc9c <_malloc_r+0xa0>
 800fc7e:	6822      	ldr	r2, [r4, #0]
 800fc80:	1b52      	subs	r2, r2, r5
 800fc82:	d41e      	bmi.n	800fcc2 <_malloc_r+0xc6>
 800fc84:	2a0b      	cmp	r2, #11
 800fc86:	d916      	bls.n	800fcb6 <_malloc_r+0xba>
 800fc88:	1961      	adds	r1, r4, r5
 800fc8a:	42a3      	cmp	r3, r4
 800fc8c:	6025      	str	r5, [r4, #0]
 800fc8e:	bf18      	it	ne
 800fc90:	6059      	strne	r1, [r3, #4]
 800fc92:	6863      	ldr	r3, [r4, #4]
 800fc94:	bf08      	it	eq
 800fc96:	6031      	streq	r1, [r6, #0]
 800fc98:	5162      	str	r2, [r4, r5]
 800fc9a:	604b      	str	r3, [r1, #4]
 800fc9c:	4638      	mov	r0, r7
 800fc9e:	f104 060b 	add.w	r6, r4, #11
 800fca2:	f000 f8bf 	bl	800fe24 <__malloc_unlock>
 800fca6:	f026 0607 	bic.w	r6, r6, #7
 800fcaa:	1d23      	adds	r3, r4, #4
 800fcac:	1af2      	subs	r2, r6, r3
 800fcae:	d0b6      	beq.n	800fc1e <_malloc_r+0x22>
 800fcb0:	1b9b      	subs	r3, r3, r6
 800fcb2:	50a3      	str	r3, [r4, r2]
 800fcb4:	e7b3      	b.n	800fc1e <_malloc_r+0x22>
 800fcb6:	6862      	ldr	r2, [r4, #4]
 800fcb8:	42a3      	cmp	r3, r4
 800fcba:	bf0c      	ite	eq
 800fcbc:	6032      	streq	r2, [r6, #0]
 800fcbe:	605a      	strne	r2, [r3, #4]
 800fcc0:	e7ec      	b.n	800fc9c <_malloc_r+0xa0>
 800fcc2:	4623      	mov	r3, r4
 800fcc4:	6864      	ldr	r4, [r4, #4]
 800fcc6:	e7b2      	b.n	800fc2e <_malloc_r+0x32>
 800fcc8:	4634      	mov	r4, r6
 800fcca:	6876      	ldr	r6, [r6, #4]
 800fccc:	e7b9      	b.n	800fc42 <_malloc_r+0x46>
 800fcce:	230c      	movs	r3, #12
 800fcd0:	603b      	str	r3, [r7, #0]
 800fcd2:	4638      	mov	r0, r7
 800fcd4:	f000 f8a6 	bl	800fe24 <__malloc_unlock>
 800fcd8:	e7a1      	b.n	800fc1e <_malloc_r+0x22>
 800fcda:	6025      	str	r5, [r4, #0]
 800fcdc:	e7de      	b.n	800fc9c <_malloc_r+0xa0>
 800fcde:	bf00      	nop
 800fce0:	2001be90 	.word	0x2001be90

0800fce4 <cleanup_glue>:
 800fce4:	b538      	push	{r3, r4, r5, lr}
 800fce6:	460c      	mov	r4, r1
 800fce8:	6809      	ldr	r1, [r1, #0]
 800fcea:	4605      	mov	r5, r0
 800fcec:	b109      	cbz	r1, 800fcf2 <cleanup_glue+0xe>
 800fcee:	f7ff fff9 	bl	800fce4 <cleanup_glue>
 800fcf2:	4621      	mov	r1, r4
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcfa:	f7ff bf13 	b.w	800fb24 <_free_r>
	...

0800fd00 <_reclaim_reent>:
 800fd00:	4b2c      	ldr	r3, [pc, #176]	; (800fdb4 <_reclaim_reent+0xb4>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4283      	cmp	r3, r0
 800fd06:	b570      	push	{r4, r5, r6, lr}
 800fd08:	4604      	mov	r4, r0
 800fd0a:	d051      	beq.n	800fdb0 <_reclaim_reent+0xb0>
 800fd0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fd0e:	b143      	cbz	r3, 800fd22 <_reclaim_reent+0x22>
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d14a      	bne.n	800fdac <_reclaim_reent+0xac>
 800fd16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd18:	6819      	ldr	r1, [r3, #0]
 800fd1a:	b111      	cbz	r1, 800fd22 <_reclaim_reent+0x22>
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	f7ff ff01 	bl	800fb24 <_free_r>
 800fd22:	6961      	ldr	r1, [r4, #20]
 800fd24:	b111      	cbz	r1, 800fd2c <_reclaim_reent+0x2c>
 800fd26:	4620      	mov	r0, r4
 800fd28:	f7ff fefc 	bl	800fb24 <_free_r>
 800fd2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fd2e:	b111      	cbz	r1, 800fd36 <_reclaim_reent+0x36>
 800fd30:	4620      	mov	r0, r4
 800fd32:	f7ff fef7 	bl	800fb24 <_free_r>
 800fd36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd38:	b111      	cbz	r1, 800fd40 <_reclaim_reent+0x40>
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f7ff fef2 	bl	800fb24 <_free_r>
 800fd40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fd42:	b111      	cbz	r1, 800fd4a <_reclaim_reent+0x4a>
 800fd44:	4620      	mov	r0, r4
 800fd46:	f7ff feed 	bl	800fb24 <_free_r>
 800fd4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fd4c:	b111      	cbz	r1, 800fd54 <_reclaim_reent+0x54>
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f7ff fee8 	bl	800fb24 <_free_r>
 800fd54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fd56:	b111      	cbz	r1, 800fd5e <_reclaim_reent+0x5e>
 800fd58:	4620      	mov	r0, r4
 800fd5a:	f7ff fee3 	bl	800fb24 <_free_r>
 800fd5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fd60:	b111      	cbz	r1, 800fd68 <_reclaim_reent+0x68>
 800fd62:	4620      	mov	r0, r4
 800fd64:	f7ff fede 	bl	800fb24 <_free_r>
 800fd68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd6a:	b111      	cbz	r1, 800fd72 <_reclaim_reent+0x72>
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	f7ff fed9 	bl	800fb24 <_free_r>
 800fd72:	69a3      	ldr	r3, [r4, #24]
 800fd74:	b1e3      	cbz	r3, 800fdb0 <_reclaim_reent+0xb0>
 800fd76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fd78:	4620      	mov	r0, r4
 800fd7a:	4798      	blx	r3
 800fd7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fd7e:	b1b9      	cbz	r1, 800fdb0 <_reclaim_reent+0xb0>
 800fd80:	4620      	mov	r0, r4
 800fd82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd86:	f7ff bfad 	b.w	800fce4 <cleanup_glue>
 800fd8a:	5949      	ldr	r1, [r1, r5]
 800fd8c:	b941      	cbnz	r1, 800fda0 <_reclaim_reent+0xa0>
 800fd8e:	3504      	adds	r5, #4
 800fd90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd92:	2d80      	cmp	r5, #128	; 0x80
 800fd94:	68d9      	ldr	r1, [r3, #12]
 800fd96:	d1f8      	bne.n	800fd8a <_reclaim_reent+0x8a>
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f7ff fec3 	bl	800fb24 <_free_r>
 800fd9e:	e7ba      	b.n	800fd16 <_reclaim_reent+0x16>
 800fda0:	680e      	ldr	r6, [r1, #0]
 800fda2:	4620      	mov	r0, r4
 800fda4:	f7ff febe 	bl	800fb24 <_free_r>
 800fda8:	4631      	mov	r1, r6
 800fdaa:	e7ef      	b.n	800fd8c <_reclaim_reent+0x8c>
 800fdac:	2500      	movs	r5, #0
 800fdae:	e7ef      	b.n	800fd90 <_reclaim_reent+0x90>
 800fdb0:	bd70      	pop	{r4, r5, r6, pc}
 800fdb2:	bf00      	nop
 800fdb4:	2000016c 	.word	0x2000016c

0800fdb8 <_sbrk_r>:
 800fdb8:	b538      	push	{r3, r4, r5, lr}
 800fdba:	4d06      	ldr	r5, [pc, #24]	; (800fdd4 <_sbrk_r+0x1c>)
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	4608      	mov	r0, r1
 800fdc2:	602b      	str	r3, [r5, #0]
 800fdc4:	f7f1 fd6a 	bl	800189c <_sbrk>
 800fdc8:	1c43      	adds	r3, r0, #1
 800fdca:	d102      	bne.n	800fdd2 <_sbrk_r+0x1a>
 800fdcc:	682b      	ldr	r3, [r5, #0]
 800fdce:	b103      	cbz	r3, 800fdd2 <_sbrk_r+0x1a>
 800fdd0:	6023      	str	r3, [r4, #0]
 800fdd2:	bd38      	pop	{r3, r4, r5, pc}
 800fdd4:	2001be98 	.word	0x2001be98

0800fdd8 <siprintf>:
 800fdd8:	b40e      	push	{r1, r2, r3}
 800fdda:	b500      	push	{lr}
 800fddc:	b09c      	sub	sp, #112	; 0x70
 800fdde:	ab1d      	add	r3, sp, #116	; 0x74
 800fde0:	9002      	str	r0, [sp, #8]
 800fde2:	9006      	str	r0, [sp, #24]
 800fde4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fde8:	4809      	ldr	r0, [pc, #36]	; (800fe10 <siprintf+0x38>)
 800fdea:	9107      	str	r1, [sp, #28]
 800fdec:	9104      	str	r1, [sp, #16]
 800fdee:	4909      	ldr	r1, [pc, #36]	; (800fe14 <siprintf+0x3c>)
 800fdf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdf4:	9105      	str	r1, [sp, #20]
 800fdf6:	6800      	ldr	r0, [r0, #0]
 800fdf8:	9301      	str	r3, [sp, #4]
 800fdfa:	a902      	add	r1, sp, #8
 800fdfc:	f000 f874 	bl	800fee8 <_svfiprintf_r>
 800fe00:	9b02      	ldr	r3, [sp, #8]
 800fe02:	2200      	movs	r2, #0
 800fe04:	701a      	strb	r2, [r3, #0]
 800fe06:	b01c      	add	sp, #112	; 0x70
 800fe08:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe0c:	b003      	add	sp, #12
 800fe0e:	4770      	bx	lr
 800fe10:	2000016c 	.word	0x2000016c
 800fe14:	ffff0208 	.word	0xffff0208

0800fe18 <__malloc_lock>:
 800fe18:	4801      	ldr	r0, [pc, #4]	; (800fe20 <__malloc_lock+0x8>)
 800fe1a:	f7ff be5b 	b.w	800fad4 <__retarget_lock_acquire_recursive>
 800fe1e:	bf00      	nop
 800fe20:	2001be8c 	.word	0x2001be8c

0800fe24 <__malloc_unlock>:
 800fe24:	4801      	ldr	r0, [pc, #4]	; (800fe2c <__malloc_unlock+0x8>)
 800fe26:	f7ff be56 	b.w	800fad6 <__retarget_lock_release_recursive>
 800fe2a:	bf00      	nop
 800fe2c:	2001be8c 	.word	0x2001be8c

0800fe30 <__ssputs_r>:
 800fe30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe34:	688e      	ldr	r6, [r1, #8]
 800fe36:	429e      	cmp	r6, r3
 800fe38:	4682      	mov	sl, r0
 800fe3a:	460c      	mov	r4, r1
 800fe3c:	4690      	mov	r8, r2
 800fe3e:	461f      	mov	r7, r3
 800fe40:	d838      	bhi.n	800feb4 <__ssputs_r+0x84>
 800fe42:	898a      	ldrh	r2, [r1, #12]
 800fe44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe48:	d032      	beq.n	800feb0 <__ssputs_r+0x80>
 800fe4a:	6825      	ldr	r5, [r4, #0]
 800fe4c:	6909      	ldr	r1, [r1, #16]
 800fe4e:	eba5 0901 	sub.w	r9, r5, r1
 800fe52:	6965      	ldr	r5, [r4, #20]
 800fe54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	444b      	add	r3, r9
 800fe60:	106d      	asrs	r5, r5, #1
 800fe62:	429d      	cmp	r5, r3
 800fe64:	bf38      	it	cc
 800fe66:	461d      	movcc	r5, r3
 800fe68:	0553      	lsls	r3, r2, #21
 800fe6a:	d531      	bpl.n	800fed0 <__ssputs_r+0xa0>
 800fe6c:	4629      	mov	r1, r5
 800fe6e:	f7ff fec5 	bl	800fbfc <_malloc_r>
 800fe72:	4606      	mov	r6, r0
 800fe74:	b950      	cbnz	r0, 800fe8c <__ssputs_r+0x5c>
 800fe76:	230c      	movs	r3, #12
 800fe78:	f8ca 3000 	str.w	r3, [sl]
 800fe7c:	89a3      	ldrh	r3, [r4, #12]
 800fe7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe82:	81a3      	strh	r3, [r4, #12]
 800fe84:	f04f 30ff 	mov.w	r0, #4294967295
 800fe88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe8c:	6921      	ldr	r1, [r4, #16]
 800fe8e:	464a      	mov	r2, r9
 800fe90:	f7ff fe32 	bl	800faf8 <memcpy>
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe9e:	81a3      	strh	r3, [r4, #12]
 800fea0:	6126      	str	r6, [r4, #16]
 800fea2:	6165      	str	r5, [r4, #20]
 800fea4:	444e      	add	r6, r9
 800fea6:	eba5 0509 	sub.w	r5, r5, r9
 800feaa:	6026      	str	r6, [r4, #0]
 800feac:	60a5      	str	r5, [r4, #8]
 800feae:	463e      	mov	r6, r7
 800feb0:	42be      	cmp	r6, r7
 800feb2:	d900      	bls.n	800feb6 <__ssputs_r+0x86>
 800feb4:	463e      	mov	r6, r7
 800feb6:	6820      	ldr	r0, [r4, #0]
 800feb8:	4632      	mov	r2, r6
 800feba:	4641      	mov	r1, r8
 800febc:	f000 faa8 	bl	8010410 <memmove>
 800fec0:	68a3      	ldr	r3, [r4, #8]
 800fec2:	1b9b      	subs	r3, r3, r6
 800fec4:	60a3      	str	r3, [r4, #8]
 800fec6:	6823      	ldr	r3, [r4, #0]
 800fec8:	4433      	add	r3, r6
 800feca:	6023      	str	r3, [r4, #0]
 800fecc:	2000      	movs	r0, #0
 800fece:	e7db      	b.n	800fe88 <__ssputs_r+0x58>
 800fed0:	462a      	mov	r2, r5
 800fed2:	f000 fab7 	bl	8010444 <_realloc_r>
 800fed6:	4606      	mov	r6, r0
 800fed8:	2800      	cmp	r0, #0
 800feda:	d1e1      	bne.n	800fea0 <__ssputs_r+0x70>
 800fedc:	6921      	ldr	r1, [r4, #16]
 800fede:	4650      	mov	r0, sl
 800fee0:	f7ff fe20 	bl	800fb24 <_free_r>
 800fee4:	e7c7      	b.n	800fe76 <__ssputs_r+0x46>
	...

0800fee8 <_svfiprintf_r>:
 800fee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feec:	4698      	mov	r8, r3
 800feee:	898b      	ldrh	r3, [r1, #12]
 800fef0:	061b      	lsls	r3, r3, #24
 800fef2:	b09d      	sub	sp, #116	; 0x74
 800fef4:	4607      	mov	r7, r0
 800fef6:	460d      	mov	r5, r1
 800fef8:	4614      	mov	r4, r2
 800fefa:	d50e      	bpl.n	800ff1a <_svfiprintf_r+0x32>
 800fefc:	690b      	ldr	r3, [r1, #16]
 800fefe:	b963      	cbnz	r3, 800ff1a <_svfiprintf_r+0x32>
 800ff00:	2140      	movs	r1, #64	; 0x40
 800ff02:	f7ff fe7b 	bl	800fbfc <_malloc_r>
 800ff06:	6028      	str	r0, [r5, #0]
 800ff08:	6128      	str	r0, [r5, #16]
 800ff0a:	b920      	cbnz	r0, 800ff16 <_svfiprintf_r+0x2e>
 800ff0c:	230c      	movs	r3, #12
 800ff0e:	603b      	str	r3, [r7, #0]
 800ff10:	f04f 30ff 	mov.w	r0, #4294967295
 800ff14:	e0d1      	b.n	80100ba <_svfiprintf_r+0x1d2>
 800ff16:	2340      	movs	r3, #64	; 0x40
 800ff18:	616b      	str	r3, [r5, #20]
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff1e:	2320      	movs	r3, #32
 800ff20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff28:	2330      	movs	r3, #48	; 0x30
 800ff2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80100d4 <_svfiprintf_r+0x1ec>
 800ff2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff32:	f04f 0901 	mov.w	r9, #1
 800ff36:	4623      	mov	r3, r4
 800ff38:	469a      	mov	sl, r3
 800ff3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff3e:	b10a      	cbz	r2, 800ff44 <_svfiprintf_r+0x5c>
 800ff40:	2a25      	cmp	r2, #37	; 0x25
 800ff42:	d1f9      	bne.n	800ff38 <_svfiprintf_r+0x50>
 800ff44:	ebba 0b04 	subs.w	fp, sl, r4
 800ff48:	d00b      	beq.n	800ff62 <_svfiprintf_r+0x7a>
 800ff4a:	465b      	mov	r3, fp
 800ff4c:	4622      	mov	r2, r4
 800ff4e:	4629      	mov	r1, r5
 800ff50:	4638      	mov	r0, r7
 800ff52:	f7ff ff6d 	bl	800fe30 <__ssputs_r>
 800ff56:	3001      	adds	r0, #1
 800ff58:	f000 80aa 	beq.w	80100b0 <_svfiprintf_r+0x1c8>
 800ff5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff5e:	445a      	add	r2, fp
 800ff60:	9209      	str	r2, [sp, #36]	; 0x24
 800ff62:	f89a 3000 	ldrb.w	r3, [sl]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	f000 80a2 	beq.w	80100b0 <_svfiprintf_r+0x1c8>
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff76:	f10a 0a01 	add.w	sl, sl, #1
 800ff7a:	9304      	str	r3, [sp, #16]
 800ff7c:	9307      	str	r3, [sp, #28]
 800ff7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff82:	931a      	str	r3, [sp, #104]	; 0x68
 800ff84:	4654      	mov	r4, sl
 800ff86:	2205      	movs	r2, #5
 800ff88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff8c:	4851      	ldr	r0, [pc, #324]	; (80100d4 <_svfiprintf_r+0x1ec>)
 800ff8e:	f7f0 f927 	bl	80001e0 <memchr>
 800ff92:	9a04      	ldr	r2, [sp, #16]
 800ff94:	b9d8      	cbnz	r0, 800ffce <_svfiprintf_r+0xe6>
 800ff96:	06d0      	lsls	r0, r2, #27
 800ff98:	bf44      	itt	mi
 800ff9a:	2320      	movmi	r3, #32
 800ff9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffa0:	0711      	lsls	r1, r2, #28
 800ffa2:	bf44      	itt	mi
 800ffa4:	232b      	movmi	r3, #43	; 0x2b
 800ffa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffaa:	f89a 3000 	ldrb.w	r3, [sl]
 800ffae:	2b2a      	cmp	r3, #42	; 0x2a
 800ffb0:	d015      	beq.n	800ffde <_svfiprintf_r+0xf6>
 800ffb2:	9a07      	ldr	r2, [sp, #28]
 800ffb4:	4654      	mov	r4, sl
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	f04f 0c0a 	mov.w	ip, #10
 800ffbc:	4621      	mov	r1, r4
 800ffbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffc2:	3b30      	subs	r3, #48	; 0x30
 800ffc4:	2b09      	cmp	r3, #9
 800ffc6:	d94e      	bls.n	8010066 <_svfiprintf_r+0x17e>
 800ffc8:	b1b0      	cbz	r0, 800fff8 <_svfiprintf_r+0x110>
 800ffca:	9207      	str	r2, [sp, #28]
 800ffcc:	e014      	b.n	800fff8 <_svfiprintf_r+0x110>
 800ffce:	eba0 0308 	sub.w	r3, r0, r8
 800ffd2:	fa09 f303 	lsl.w	r3, r9, r3
 800ffd6:	4313      	orrs	r3, r2
 800ffd8:	9304      	str	r3, [sp, #16]
 800ffda:	46a2      	mov	sl, r4
 800ffdc:	e7d2      	b.n	800ff84 <_svfiprintf_r+0x9c>
 800ffde:	9b03      	ldr	r3, [sp, #12]
 800ffe0:	1d19      	adds	r1, r3, #4
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	9103      	str	r1, [sp, #12]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	bfbb      	ittet	lt
 800ffea:	425b      	neglt	r3, r3
 800ffec:	f042 0202 	orrlt.w	r2, r2, #2
 800fff0:	9307      	strge	r3, [sp, #28]
 800fff2:	9307      	strlt	r3, [sp, #28]
 800fff4:	bfb8      	it	lt
 800fff6:	9204      	strlt	r2, [sp, #16]
 800fff8:	7823      	ldrb	r3, [r4, #0]
 800fffa:	2b2e      	cmp	r3, #46	; 0x2e
 800fffc:	d10c      	bne.n	8010018 <_svfiprintf_r+0x130>
 800fffe:	7863      	ldrb	r3, [r4, #1]
 8010000:	2b2a      	cmp	r3, #42	; 0x2a
 8010002:	d135      	bne.n	8010070 <_svfiprintf_r+0x188>
 8010004:	9b03      	ldr	r3, [sp, #12]
 8010006:	1d1a      	adds	r2, r3, #4
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	9203      	str	r2, [sp, #12]
 801000c:	2b00      	cmp	r3, #0
 801000e:	bfb8      	it	lt
 8010010:	f04f 33ff 	movlt.w	r3, #4294967295
 8010014:	3402      	adds	r4, #2
 8010016:	9305      	str	r3, [sp, #20]
 8010018:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80100e4 <_svfiprintf_r+0x1fc>
 801001c:	7821      	ldrb	r1, [r4, #0]
 801001e:	2203      	movs	r2, #3
 8010020:	4650      	mov	r0, sl
 8010022:	f7f0 f8dd 	bl	80001e0 <memchr>
 8010026:	b140      	cbz	r0, 801003a <_svfiprintf_r+0x152>
 8010028:	2340      	movs	r3, #64	; 0x40
 801002a:	eba0 000a 	sub.w	r0, r0, sl
 801002e:	fa03 f000 	lsl.w	r0, r3, r0
 8010032:	9b04      	ldr	r3, [sp, #16]
 8010034:	4303      	orrs	r3, r0
 8010036:	3401      	adds	r4, #1
 8010038:	9304      	str	r3, [sp, #16]
 801003a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801003e:	4826      	ldr	r0, [pc, #152]	; (80100d8 <_svfiprintf_r+0x1f0>)
 8010040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010044:	2206      	movs	r2, #6
 8010046:	f7f0 f8cb 	bl	80001e0 <memchr>
 801004a:	2800      	cmp	r0, #0
 801004c:	d038      	beq.n	80100c0 <_svfiprintf_r+0x1d8>
 801004e:	4b23      	ldr	r3, [pc, #140]	; (80100dc <_svfiprintf_r+0x1f4>)
 8010050:	bb1b      	cbnz	r3, 801009a <_svfiprintf_r+0x1b2>
 8010052:	9b03      	ldr	r3, [sp, #12]
 8010054:	3307      	adds	r3, #7
 8010056:	f023 0307 	bic.w	r3, r3, #7
 801005a:	3308      	adds	r3, #8
 801005c:	9303      	str	r3, [sp, #12]
 801005e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010060:	4433      	add	r3, r6
 8010062:	9309      	str	r3, [sp, #36]	; 0x24
 8010064:	e767      	b.n	800ff36 <_svfiprintf_r+0x4e>
 8010066:	fb0c 3202 	mla	r2, ip, r2, r3
 801006a:	460c      	mov	r4, r1
 801006c:	2001      	movs	r0, #1
 801006e:	e7a5      	b.n	800ffbc <_svfiprintf_r+0xd4>
 8010070:	2300      	movs	r3, #0
 8010072:	3401      	adds	r4, #1
 8010074:	9305      	str	r3, [sp, #20]
 8010076:	4619      	mov	r1, r3
 8010078:	f04f 0c0a 	mov.w	ip, #10
 801007c:	4620      	mov	r0, r4
 801007e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010082:	3a30      	subs	r2, #48	; 0x30
 8010084:	2a09      	cmp	r2, #9
 8010086:	d903      	bls.n	8010090 <_svfiprintf_r+0x1a8>
 8010088:	2b00      	cmp	r3, #0
 801008a:	d0c5      	beq.n	8010018 <_svfiprintf_r+0x130>
 801008c:	9105      	str	r1, [sp, #20]
 801008e:	e7c3      	b.n	8010018 <_svfiprintf_r+0x130>
 8010090:	fb0c 2101 	mla	r1, ip, r1, r2
 8010094:	4604      	mov	r4, r0
 8010096:	2301      	movs	r3, #1
 8010098:	e7f0      	b.n	801007c <_svfiprintf_r+0x194>
 801009a:	ab03      	add	r3, sp, #12
 801009c:	9300      	str	r3, [sp, #0]
 801009e:	462a      	mov	r2, r5
 80100a0:	4b0f      	ldr	r3, [pc, #60]	; (80100e0 <_svfiprintf_r+0x1f8>)
 80100a2:	a904      	add	r1, sp, #16
 80100a4:	4638      	mov	r0, r7
 80100a6:	f3af 8000 	nop.w
 80100aa:	1c42      	adds	r2, r0, #1
 80100ac:	4606      	mov	r6, r0
 80100ae:	d1d6      	bne.n	801005e <_svfiprintf_r+0x176>
 80100b0:	89ab      	ldrh	r3, [r5, #12]
 80100b2:	065b      	lsls	r3, r3, #25
 80100b4:	f53f af2c 	bmi.w	800ff10 <_svfiprintf_r+0x28>
 80100b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100ba:	b01d      	add	sp, #116	; 0x74
 80100bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c0:	ab03      	add	r3, sp, #12
 80100c2:	9300      	str	r3, [sp, #0]
 80100c4:	462a      	mov	r2, r5
 80100c6:	4b06      	ldr	r3, [pc, #24]	; (80100e0 <_svfiprintf_r+0x1f8>)
 80100c8:	a904      	add	r1, sp, #16
 80100ca:	4638      	mov	r0, r7
 80100cc:	f000 f87a 	bl	80101c4 <_printf_i>
 80100d0:	e7eb      	b.n	80100aa <_svfiprintf_r+0x1c2>
 80100d2:	bf00      	nop
 80100d4:	0801317c 	.word	0x0801317c
 80100d8:	08013186 	.word	0x08013186
 80100dc:	00000000 	.word	0x00000000
 80100e0:	0800fe31 	.word	0x0800fe31
 80100e4:	08013182 	.word	0x08013182

080100e8 <_printf_common>:
 80100e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100ec:	4616      	mov	r6, r2
 80100ee:	4699      	mov	r9, r3
 80100f0:	688a      	ldr	r2, [r1, #8]
 80100f2:	690b      	ldr	r3, [r1, #16]
 80100f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100f8:	4293      	cmp	r3, r2
 80100fa:	bfb8      	it	lt
 80100fc:	4613      	movlt	r3, r2
 80100fe:	6033      	str	r3, [r6, #0]
 8010100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010104:	4607      	mov	r7, r0
 8010106:	460c      	mov	r4, r1
 8010108:	b10a      	cbz	r2, 801010e <_printf_common+0x26>
 801010a:	3301      	adds	r3, #1
 801010c:	6033      	str	r3, [r6, #0]
 801010e:	6823      	ldr	r3, [r4, #0]
 8010110:	0699      	lsls	r1, r3, #26
 8010112:	bf42      	ittt	mi
 8010114:	6833      	ldrmi	r3, [r6, #0]
 8010116:	3302      	addmi	r3, #2
 8010118:	6033      	strmi	r3, [r6, #0]
 801011a:	6825      	ldr	r5, [r4, #0]
 801011c:	f015 0506 	ands.w	r5, r5, #6
 8010120:	d106      	bne.n	8010130 <_printf_common+0x48>
 8010122:	f104 0a19 	add.w	sl, r4, #25
 8010126:	68e3      	ldr	r3, [r4, #12]
 8010128:	6832      	ldr	r2, [r6, #0]
 801012a:	1a9b      	subs	r3, r3, r2
 801012c:	42ab      	cmp	r3, r5
 801012e:	dc26      	bgt.n	801017e <_printf_common+0x96>
 8010130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010134:	1e13      	subs	r3, r2, #0
 8010136:	6822      	ldr	r2, [r4, #0]
 8010138:	bf18      	it	ne
 801013a:	2301      	movne	r3, #1
 801013c:	0692      	lsls	r2, r2, #26
 801013e:	d42b      	bmi.n	8010198 <_printf_common+0xb0>
 8010140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010144:	4649      	mov	r1, r9
 8010146:	4638      	mov	r0, r7
 8010148:	47c0      	blx	r8
 801014a:	3001      	adds	r0, #1
 801014c:	d01e      	beq.n	801018c <_printf_common+0xa4>
 801014e:	6823      	ldr	r3, [r4, #0]
 8010150:	68e5      	ldr	r5, [r4, #12]
 8010152:	6832      	ldr	r2, [r6, #0]
 8010154:	f003 0306 	and.w	r3, r3, #6
 8010158:	2b04      	cmp	r3, #4
 801015a:	bf08      	it	eq
 801015c:	1aad      	subeq	r5, r5, r2
 801015e:	68a3      	ldr	r3, [r4, #8]
 8010160:	6922      	ldr	r2, [r4, #16]
 8010162:	bf0c      	ite	eq
 8010164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010168:	2500      	movne	r5, #0
 801016a:	4293      	cmp	r3, r2
 801016c:	bfc4      	itt	gt
 801016e:	1a9b      	subgt	r3, r3, r2
 8010170:	18ed      	addgt	r5, r5, r3
 8010172:	2600      	movs	r6, #0
 8010174:	341a      	adds	r4, #26
 8010176:	42b5      	cmp	r5, r6
 8010178:	d11a      	bne.n	80101b0 <_printf_common+0xc8>
 801017a:	2000      	movs	r0, #0
 801017c:	e008      	b.n	8010190 <_printf_common+0xa8>
 801017e:	2301      	movs	r3, #1
 8010180:	4652      	mov	r2, sl
 8010182:	4649      	mov	r1, r9
 8010184:	4638      	mov	r0, r7
 8010186:	47c0      	blx	r8
 8010188:	3001      	adds	r0, #1
 801018a:	d103      	bne.n	8010194 <_printf_common+0xac>
 801018c:	f04f 30ff 	mov.w	r0, #4294967295
 8010190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010194:	3501      	adds	r5, #1
 8010196:	e7c6      	b.n	8010126 <_printf_common+0x3e>
 8010198:	18e1      	adds	r1, r4, r3
 801019a:	1c5a      	adds	r2, r3, #1
 801019c:	2030      	movs	r0, #48	; 0x30
 801019e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80101a2:	4422      	add	r2, r4
 80101a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80101a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80101ac:	3302      	adds	r3, #2
 80101ae:	e7c7      	b.n	8010140 <_printf_common+0x58>
 80101b0:	2301      	movs	r3, #1
 80101b2:	4622      	mov	r2, r4
 80101b4:	4649      	mov	r1, r9
 80101b6:	4638      	mov	r0, r7
 80101b8:	47c0      	blx	r8
 80101ba:	3001      	adds	r0, #1
 80101bc:	d0e6      	beq.n	801018c <_printf_common+0xa4>
 80101be:	3601      	adds	r6, #1
 80101c0:	e7d9      	b.n	8010176 <_printf_common+0x8e>
	...

080101c4 <_printf_i>:
 80101c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101c8:	7e0f      	ldrb	r7, [r1, #24]
 80101ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80101cc:	2f78      	cmp	r7, #120	; 0x78
 80101ce:	4691      	mov	r9, r2
 80101d0:	4680      	mov	r8, r0
 80101d2:	460c      	mov	r4, r1
 80101d4:	469a      	mov	sl, r3
 80101d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80101da:	d807      	bhi.n	80101ec <_printf_i+0x28>
 80101dc:	2f62      	cmp	r7, #98	; 0x62
 80101de:	d80a      	bhi.n	80101f6 <_printf_i+0x32>
 80101e0:	2f00      	cmp	r7, #0
 80101e2:	f000 80d8 	beq.w	8010396 <_printf_i+0x1d2>
 80101e6:	2f58      	cmp	r7, #88	; 0x58
 80101e8:	f000 80a3 	beq.w	8010332 <_printf_i+0x16e>
 80101ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80101f4:	e03a      	b.n	801026c <_printf_i+0xa8>
 80101f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80101fa:	2b15      	cmp	r3, #21
 80101fc:	d8f6      	bhi.n	80101ec <_printf_i+0x28>
 80101fe:	a101      	add	r1, pc, #4	; (adr r1, 8010204 <_printf_i+0x40>)
 8010200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010204:	0801025d 	.word	0x0801025d
 8010208:	08010271 	.word	0x08010271
 801020c:	080101ed 	.word	0x080101ed
 8010210:	080101ed 	.word	0x080101ed
 8010214:	080101ed 	.word	0x080101ed
 8010218:	080101ed 	.word	0x080101ed
 801021c:	08010271 	.word	0x08010271
 8010220:	080101ed 	.word	0x080101ed
 8010224:	080101ed 	.word	0x080101ed
 8010228:	080101ed 	.word	0x080101ed
 801022c:	080101ed 	.word	0x080101ed
 8010230:	0801037d 	.word	0x0801037d
 8010234:	080102a1 	.word	0x080102a1
 8010238:	0801035f 	.word	0x0801035f
 801023c:	080101ed 	.word	0x080101ed
 8010240:	080101ed 	.word	0x080101ed
 8010244:	0801039f 	.word	0x0801039f
 8010248:	080101ed 	.word	0x080101ed
 801024c:	080102a1 	.word	0x080102a1
 8010250:	080101ed 	.word	0x080101ed
 8010254:	080101ed 	.word	0x080101ed
 8010258:	08010367 	.word	0x08010367
 801025c:	682b      	ldr	r3, [r5, #0]
 801025e:	1d1a      	adds	r2, r3, #4
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	602a      	str	r2, [r5, #0]
 8010264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801026c:	2301      	movs	r3, #1
 801026e:	e0a3      	b.n	80103b8 <_printf_i+0x1f4>
 8010270:	6820      	ldr	r0, [r4, #0]
 8010272:	6829      	ldr	r1, [r5, #0]
 8010274:	0606      	lsls	r6, r0, #24
 8010276:	f101 0304 	add.w	r3, r1, #4
 801027a:	d50a      	bpl.n	8010292 <_printf_i+0xce>
 801027c:	680e      	ldr	r6, [r1, #0]
 801027e:	602b      	str	r3, [r5, #0]
 8010280:	2e00      	cmp	r6, #0
 8010282:	da03      	bge.n	801028c <_printf_i+0xc8>
 8010284:	232d      	movs	r3, #45	; 0x2d
 8010286:	4276      	negs	r6, r6
 8010288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801028c:	485e      	ldr	r0, [pc, #376]	; (8010408 <_printf_i+0x244>)
 801028e:	230a      	movs	r3, #10
 8010290:	e019      	b.n	80102c6 <_printf_i+0x102>
 8010292:	680e      	ldr	r6, [r1, #0]
 8010294:	602b      	str	r3, [r5, #0]
 8010296:	f010 0f40 	tst.w	r0, #64	; 0x40
 801029a:	bf18      	it	ne
 801029c:	b236      	sxthne	r6, r6
 801029e:	e7ef      	b.n	8010280 <_printf_i+0xbc>
 80102a0:	682b      	ldr	r3, [r5, #0]
 80102a2:	6820      	ldr	r0, [r4, #0]
 80102a4:	1d19      	adds	r1, r3, #4
 80102a6:	6029      	str	r1, [r5, #0]
 80102a8:	0601      	lsls	r1, r0, #24
 80102aa:	d501      	bpl.n	80102b0 <_printf_i+0xec>
 80102ac:	681e      	ldr	r6, [r3, #0]
 80102ae:	e002      	b.n	80102b6 <_printf_i+0xf2>
 80102b0:	0646      	lsls	r6, r0, #25
 80102b2:	d5fb      	bpl.n	80102ac <_printf_i+0xe8>
 80102b4:	881e      	ldrh	r6, [r3, #0]
 80102b6:	4854      	ldr	r0, [pc, #336]	; (8010408 <_printf_i+0x244>)
 80102b8:	2f6f      	cmp	r7, #111	; 0x6f
 80102ba:	bf0c      	ite	eq
 80102bc:	2308      	moveq	r3, #8
 80102be:	230a      	movne	r3, #10
 80102c0:	2100      	movs	r1, #0
 80102c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80102c6:	6865      	ldr	r5, [r4, #4]
 80102c8:	60a5      	str	r5, [r4, #8]
 80102ca:	2d00      	cmp	r5, #0
 80102cc:	bfa2      	ittt	ge
 80102ce:	6821      	ldrge	r1, [r4, #0]
 80102d0:	f021 0104 	bicge.w	r1, r1, #4
 80102d4:	6021      	strge	r1, [r4, #0]
 80102d6:	b90e      	cbnz	r6, 80102dc <_printf_i+0x118>
 80102d8:	2d00      	cmp	r5, #0
 80102da:	d04d      	beq.n	8010378 <_printf_i+0x1b4>
 80102dc:	4615      	mov	r5, r2
 80102de:	fbb6 f1f3 	udiv	r1, r6, r3
 80102e2:	fb03 6711 	mls	r7, r3, r1, r6
 80102e6:	5dc7      	ldrb	r7, [r0, r7]
 80102e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80102ec:	4637      	mov	r7, r6
 80102ee:	42bb      	cmp	r3, r7
 80102f0:	460e      	mov	r6, r1
 80102f2:	d9f4      	bls.n	80102de <_printf_i+0x11a>
 80102f4:	2b08      	cmp	r3, #8
 80102f6:	d10b      	bne.n	8010310 <_printf_i+0x14c>
 80102f8:	6823      	ldr	r3, [r4, #0]
 80102fa:	07de      	lsls	r6, r3, #31
 80102fc:	d508      	bpl.n	8010310 <_printf_i+0x14c>
 80102fe:	6923      	ldr	r3, [r4, #16]
 8010300:	6861      	ldr	r1, [r4, #4]
 8010302:	4299      	cmp	r1, r3
 8010304:	bfde      	ittt	le
 8010306:	2330      	movle	r3, #48	; 0x30
 8010308:	f805 3c01 	strble.w	r3, [r5, #-1]
 801030c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010310:	1b52      	subs	r2, r2, r5
 8010312:	6122      	str	r2, [r4, #16]
 8010314:	f8cd a000 	str.w	sl, [sp]
 8010318:	464b      	mov	r3, r9
 801031a:	aa03      	add	r2, sp, #12
 801031c:	4621      	mov	r1, r4
 801031e:	4640      	mov	r0, r8
 8010320:	f7ff fee2 	bl	80100e8 <_printf_common>
 8010324:	3001      	adds	r0, #1
 8010326:	d14c      	bne.n	80103c2 <_printf_i+0x1fe>
 8010328:	f04f 30ff 	mov.w	r0, #4294967295
 801032c:	b004      	add	sp, #16
 801032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010332:	4835      	ldr	r0, [pc, #212]	; (8010408 <_printf_i+0x244>)
 8010334:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010338:	6829      	ldr	r1, [r5, #0]
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010340:	6029      	str	r1, [r5, #0]
 8010342:	061d      	lsls	r5, r3, #24
 8010344:	d514      	bpl.n	8010370 <_printf_i+0x1ac>
 8010346:	07df      	lsls	r7, r3, #31
 8010348:	bf44      	itt	mi
 801034a:	f043 0320 	orrmi.w	r3, r3, #32
 801034e:	6023      	strmi	r3, [r4, #0]
 8010350:	b91e      	cbnz	r6, 801035a <_printf_i+0x196>
 8010352:	6823      	ldr	r3, [r4, #0]
 8010354:	f023 0320 	bic.w	r3, r3, #32
 8010358:	6023      	str	r3, [r4, #0]
 801035a:	2310      	movs	r3, #16
 801035c:	e7b0      	b.n	80102c0 <_printf_i+0xfc>
 801035e:	6823      	ldr	r3, [r4, #0]
 8010360:	f043 0320 	orr.w	r3, r3, #32
 8010364:	6023      	str	r3, [r4, #0]
 8010366:	2378      	movs	r3, #120	; 0x78
 8010368:	4828      	ldr	r0, [pc, #160]	; (801040c <_printf_i+0x248>)
 801036a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801036e:	e7e3      	b.n	8010338 <_printf_i+0x174>
 8010370:	0659      	lsls	r1, r3, #25
 8010372:	bf48      	it	mi
 8010374:	b2b6      	uxthmi	r6, r6
 8010376:	e7e6      	b.n	8010346 <_printf_i+0x182>
 8010378:	4615      	mov	r5, r2
 801037a:	e7bb      	b.n	80102f4 <_printf_i+0x130>
 801037c:	682b      	ldr	r3, [r5, #0]
 801037e:	6826      	ldr	r6, [r4, #0]
 8010380:	6961      	ldr	r1, [r4, #20]
 8010382:	1d18      	adds	r0, r3, #4
 8010384:	6028      	str	r0, [r5, #0]
 8010386:	0635      	lsls	r5, r6, #24
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	d501      	bpl.n	8010390 <_printf_i+0x1cc>
 801038c:	6019      	str	r1, [r3, #0]
 801038e:	e002      	b.n	8010396 <_printf_i+0x1d2>
 8010390:	0670      	lsls	r0, r6, #25
 8010392:	d5fb      	bpl.n	801038c <_printf_i+0x1c8>
 8010394:	8019      	strh	r1, [r3, #0]
 8010396:	2300      	movs	r3, #0
 8010398:	6123      	str	r3, [r4, #16]
 801039a:	4615      	mov	r5, r2
 801039c:	e7ba      	b.n	8010314 <_printf_i+0x150>
 801039e:	682b      	ldr	r3, [r5, #0]
 80103a0:	1d1a      	adds	r2, r3, #4
 80103a2:	602a      	str	r2, [r5, #0]
 80103a4:	681d      	ldr	r5, [r3, #0]
 80103a6:	6862      	ldr	r2, [r4, #4]
 80103a8:	2100      	movs	r1, #0
 80103aa:	4628      	mov	r0, r5
 80103ac:	f7ef ff18 	bl	80001e0 <memchr>
 80103b0:	b108      	cbz	r0, 80103b6 <_printf_i+0x1f2>
 80103b2:	1b40      	subs	r0, r0, r5
 80103b4:	6060      	str	r0, [r4, #4]
 80103b6:	6863      	ldr	r3, [r4, #4]
 80103b8:	6123      	str	r3, [r4, #16]
 80103ba:	2300      	movs	r3, #0
 80103bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103c0:	e7a8      	b.n	8010314 <_printf_i+0x150>
 80103c2:	6923      	ldr	r3, [r4, #16]
 80103c4:	462a      	mov	r2, r5
 80103c6:	4649      	mov	r1, r9
 80103c8:	4640      	mov	r0, r8
 80103ca:	47d0      	blx	sl
 80103cc:	3001      	adds	r0, #1
 80103ce:	d0ab      	beq.n	8010328 <_printf_i+0x164>
 80103d0:	6823      	ldr	r3, [r4, #0]
 80103d2:	079b      	lsls	r3, r3, #30
 80103d4:	d413      	bmi.n	80103fe <_printf_i+0x23a>
 80103d6:	68e0      	ldr	r0, [r4, #12]
 80103d8:	9b03      	ldr	r3, [sp, #12]
 80103da:	4298      	cmp	r0, r3
 80103dc:	bfb8      	it	lt
 80103de:	4618      	movlt	r0, r3
 80103e0:	e7a4      	b.n	801032c <_printf_i+0x168>
 80103e2:	2301      	movs	r3, #1
 80103e4:	4632      	mov	r2, r6
 80103e6:	4649      	mov	r1, r9
 80103e8:	4640      	mov	r0, r8
 80103ea:	47d0      	blx	sl
 80103ec:	3001      	adds	r0, #1
 80103ee:	d09b      	beq.n	8010328 <_printf_i+0x164>
 80103f0:	3501      	adds	r5, #1
 80103f2:	68e3      	ldr	r3, [r4, #12]
 80103f4:	9903      	ldr	r1, [sp, #12]
 80103f6:	1a5b      	subs	r3, r3, r1
 80103f8:	42ab      	cmp	r3, r5
 80103fa:	dcf2      	bgt.n	80103e2 <_printf_i+0x21e>
 80103fc:	e7eb      	b.n	80103d6 <_printf_i+0x212>
 80103fe:	2500      	movs	r5, #0
 8010400:	f104 0619 	add.w	r6, r4, #25
 8010404:	e7f5      	b.n	80103f2 <_printf_i+0x22e>
 8010406:	bf00      	nop
 8010408:	0801318d 	.word	0x0801318d
 801040c:	0801319e 	.word	0x0801319e

08010410 <memmove>:
 8010410:	4288      	cmp	r0, r1
 8010412:	b510      	push	{r4, lr}
 8010414:	eb01 0402 	add.w	r4, r1, r2
 8010418:	d902      	bls.n	8010420 <memmove+0x10>
 801041a:	4284      	cmp	r4, r0
 801041c:	4623      	mov	r3, r4
 801041e:	d807      	bhi.n	8010430 <memmove+0x20>
 8010420:	1e43      	subs	r3, r0, #1
 8010422:	42a1      	cmp	r1, r4
 8010424:	d008      	beq.n	8010438 <memmove+0x28>
 8010426:	f811 2b01 	ldrb.w	r2, [r1], #1
 801042a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801042e:	e7f8      	b.n	8010422 <memmove+0x12>
 8010430:	4402      	add	r2, r0
 8010432:	4601      	mov	r1, r0
 8010434:	428a      	cmp	r2, r1
 8010436:	d100      	bne.n	801043a <memmove+0x2a>
 8010438:	bd10      	pop	{r4, pc}
 801043a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801043e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010442:	e7f7      	b.n	8010434 <memmove+0x24>

08010444 <_realloc_r>:
 8010444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010448:	4680      	mov	r8, r0
 801044a:	4614      	mov	r4, r2
 801044c:	460e      	mov	r6, r1
 801044e:	b921      	cbnz	r1, 801045a <_realloc_r+0x16>
 8010450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010454:	4611      	mov	r1, r2
 8010456:	f7ff bbd1 	b.w	800fbfc <_malloc_r>
 801045a:	b92a      	cbnz	r2, 8010468 <_realloc_r+0x24>
 801045c:	f7ff fb62 	bl	800fb24 <_free_r>
 8010460:	4625      	mov	r5, r4
 8010462:	4628      	mov	r0, r5
 8010464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010468:	f000 f81b 	bl	80104a2 <_malloc_usable_size_r>
 801046c:	4284      	cmp	r4, r0
 801046e:	4607      	mov	r7, r0
 8010470:	d802      	bhi.n	8010478 <_realloc_r+0x34>
 8010472:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010476:	d812      	bhi.n	801049e <_realloc_r+0x5a>
 8010478:	4621      	mov	r1, r4
 801047a:	4640      	mov	r0, r8
 801047c:	f7ff fbbe 	bl	800fbfc <_malloc_r>
 8010480:	4605      	mov	r5, r0
 8010482:	2800      	cmp	r0, #0
 8010484:	d0ed      	beq.n	8010462 <_realloc_r+0x1e>
 8010486:	42bc      	cmp	r4, r7
 8010488:	4622      	mov	r2, r4
 801048a:	4631      	mov	r1, r6
 801048c:	bf28      	it	cs
 801048e:	463a      	movcs	r2, r7
 8010490:	f7ff fb32 	bl	800faf8 <memcpy>
 8010494:	4631      	mov	r1, r6
 8010496:	4640      	mov	r0, r8
 8010498:	f7ff fb44 	bl	800fb24 <_free_r>
 801049c:	e7e1      	b.n	8010462 <_realloc_r+0x1e>
 801049e:	4635      	mov	r5, r6
 80104a0:	e7df      	b.n	8010462 <_realloc_r+0x1e>

080104a2 <_malloc_usable_size_r>:
 80104a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104a6:	1f18      	subs	r0, r3, #4
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	bfbc      	itt	lt
 80104ac:	580b      	ldrlt	r3, [r1, r0]
 80104ae:	18c0      	addlt	r0, r0, r3
 80104b0:	4770      	bx	lr
	...

080104b4 <_init>:
 80104b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104b6:	bf00      	nop
 80104b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ba:	bc08      	pop	{r3}
 80104bc:	469e      	mov	lr, r3
 80104be:	4770      	bx	lr

080104c0 <_fini>:
 80104c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104c2:	bf00      	nop
 80104c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104c6:	bc08      	pop	{r3}
 80104c8:	469e      	mov	lr, r3
 80104ca:	4770      	bx	lr


rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f57c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ce0  0800f71c  0800f71c  0001f71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123fc  080123fc  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  080123fc  080123fc  000223fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012404  08012404  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012404  08012404  00022404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012408  08012408  00022408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0801240c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001bc84  200001d4  080125e0  000301d4  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  2001be58  080125e0  0003be58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a397  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006363  00000000  00000000  0005a59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002178  00000000  00000000  00060900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ec0  00000000  00000000  00062a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f372  00000000  00000000  00064938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d755  00000000  00000000  00083caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a66e0  00000000  00000000  000b13ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157adf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ff4  00000000  00000000  00157b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f704 	.word	0x0800f704

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800f704 	.word	0x0800f704

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <displayBackgrounds>:
char buff[20];

uint16_t light_color = ST7735_COLOR565(125, 160, 175);
uint16_t dark_color = ST7735_COLOR565(40, 80, 130);

void displayBackgrounds() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af04      	add	r7, sp, #16
	/* backgriund */
	ST7735_FillRectangleFast(0, 0, 160, 80, light_color);
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <displayBackgrounds+0xbc>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2350      	movs	r3, #80	; 0x50
 8000592:	22a0      	movs	r2, #160	; 0xa0
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f000 ff82 	bl	80014a0 <ST7735_FillRectangleFast>
	/* down string */
	ST7735_FillRectangleFast(0, 64, 160, 16, dark_color);
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <displayBackgrounds+0xc0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2310      	movs	r3, #16
 80005a4:	22a0      	movs	r2, #160	; 0xa0
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 ff79 	bl	80014a0 <ST7735_FillRectangleFast>
	/* up string */
	ST7735_FillRectangleFast(0, 0, 160, 20, dark_color);
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <displayBackgrounds+0xc0>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2314      	movs	r3, #20
 80005b6:	22a0      	movs	r2, #160	; 0xa0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 ff70 	bl	80014a0 <ST7735_FillRectangleFast>
	/* labels */
	ST7735_WriteString(1, 6, "BAND",Font_7x10, light_color, dark_color);
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <displayBackgrounds+0xbc>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <displayBackgrounds+0xc0>)
 80005c6:	8819      	ldrh	r1, [r3, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <displayBackgrounds+0xc4>)
 80005ca:	9102      	str	r1, [sp, #8]
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <displayBackgrounds+0xc8>)
 80005d6:	2106      	movs	r1, #6
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 fea4 	bl	8001326 <ST7735_WriteString>
	ST7735_WriteString(72, 6,"STEP",Font_7x10, light_color, dark_color);
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <displayBackgrounds+0xbc>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <displayBackgrounds+0xc0>)
 80005e4:	8819      	ldrh	r1, [r3, #0]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <displayBackgrounds+0xc4>)
 80005e8:	9102      	str	r1, [sp, #8]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <displayBackgrounds+0xcc>)
 80005f4:	2106      	movs	r1, #6
 80005f6:	2048      	movs	r0, #72	; 0x48
 80005f8:	f000 fe95 	bl	8001326 <ST7735_WriteString>
    ST7735_WriteString(2, 35, "VFO", Font_7x10, dark_color, light_color);
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <displayBackgrounds+0xc0>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <displayBackgrounds+0xbc>)
 8000602:	8819      	ldrh	r1, [r3, #0]
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <displayBackgrounds+0xc4>)
 8000606:	9102      	str	r1, [sp, #8]
 8000608:	9201      	str	r2, [sp, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <displayBackgrounds+0xd0>)
 8000612:	2123      	movs	r1, #35	; 0x23
 8000614:	2002      	movs	r0, #2
 8000616:	f000 fe86 	bl	8001326 <ST7735_WriteString>
    ST7735_WriteString(2, 43, " Hz", Font_7x10, dark_color, light_color);
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <displayBackgrounds+0xc0>)
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <displayBackgrounds+0xbc>)
 8000620:	8819      	ldrh	r1, [r3, #0]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <displayBackgrounds+0xc4>)
 8000624:	9102      	str	r1, [sp, #8]
 8000626:	9201      	str	r2, [sp, #4]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <displayBackgrounds+0xd4>)
 8000630:	212b      	movs	r1, #43	; 0x2b
 8000632:	2002      	movs	r0, #2
 8000634:	f000 fe77 	bl	8001326 <ST7735_WriteString>
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000002 	.word	0x20000002
 8000648:	20000004 	.word	0x20000004
 800064c:	0800f71c 	.word	0x0800f71c
 8000650:	0800f724 	.word	0x0800f724
 8000654:	0800f72c 	.word	0x0800f72c
 8000658:	0800f730 	.word	0x0800f730

0800065c <displayBand>:

void displayBand(int band)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]
	ST7735_WriteString(35, 2, band, Font_11x18, light_color, dark_color);
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <displayBand+0x30>)
 8000668:	881a      	ldrh	r2, [r3, #0]
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <displayBand+0x34>)
 800066c:	8819      	ldrh	r1, [r3, #0]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <displayBand+0x38>)
 8000670:	9102      	str	r1, [sp, #8]
 8000672:	9201      	str	r2, [sp, #4]
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	9200      	str	r2, [sp, #0]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4602      	mov	r2, r0
 800067c:	2102      	movs	r1, #2
 800067e:	2023      	movs	r0, #35	; 0x23
 8000680:	f000 fe51 	bl	8001326 <ST7735_WriteString>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000000 	.word	0x20000000
 8000690:	20000002 	.word	0x20000002
 8000694:	2000000c 	.word	0x2000000c

08000698 <displayStep>:

void displayStep(int step)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af04      	add	r7, sp, #16
 800069e:	6078      	str	r0, [r7, #4]
	ST7735_WriteString(104, 2, step, Font_11x18, light_color, dark_color);
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <displayStep+0x30>)
 80006a4:	881a      	ldrh	r2, [r3, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <displayStep+0x34>)
 80006a8:	8819      	ldrh	r1, [r3, #0]
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <displayStep+0x38>)
 80006ac:	9102      	str	r1, [sp, #8]
 80006ae:	9201      	str	r2, [sp, #4]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	9200      	str	r2, [sp, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4602      	mov	r2, r0
 80006b8:	2102      	movs	r1, #2
 80006ba:	2068      	movs	r0, #104	; 0x68
 80006bc:	f000 fe33 	bl	8001326 <ST7735_WriteString>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000002 	.word	0x20000002
 80006d0:	2000000c 	.word	0x2000000c

080006d4 <displayFrequency>:

void displayFrequency(uint32_t freq) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af04      	add	r7, sp, #16
 80006da:	6078      	str	r0, [r7, #4]
	uint16_t th, dig, mi;
	th = freq%1000;
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <displayFrequency+0xa4>)
 80006e0:	fba3 1302 	umull	r1, r3, r3, r2
 80006e4:	099b      	lsrs	r3, r3, #6
 80006e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006ea:	fb01 f303 	mul.w	r3, r1, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	81fb      	strh	r3, [r7, #14]
	dig = (freq / 1000)%1000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a20      	ldr	r2, [pc, #128]	; (8000778 <displayFrequency+0xa4>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	099a      	lsrs	r2, r3, #6
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <displayFrequency+0xa4>)
 80006fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000702:	099b      	lsrs	r3, r3, #6
 8000704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000708:	fb01 f303 	mul.w	r3, r1, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	81bb      	strh	r3, [r7, #12]
	mi = (freq / 1000000);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <displayFrequency+0xa8>)
 8000714:	fba2 2303 	umull	r2, r3, r2, r3
 8000718:	0c9b      	lsrs	r3, r3, #18
 800071a:	817b      	strh	r3, [r7, #10]
	sprintf(buff, "%02d.%03d",mi, dig);
 800071c:	897a      	ldrh	r2, [r7, #10]
 800071e:	89bb      	ldrh	r3, [r7, #12]
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <displayFrequency+0xac>)
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <displayFrequency+0xb0>)
 8000724:	f00e fc80 	bl	800f028 <siprintf>
	ST7735_WriteString(26, 32, buff, Font_16x26, dark_color, light_color);
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <displayFrequency+0xb4>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <displayFrequency+0xb8>)
 800072e:	8819      	ldrh	r1, [r3, #0]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <displayFrequency+0xbc>)
 8000732:	9102      	str	r1, [sp, #8]
 8000734:	9201      	str	r2, [sp, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	9200      	str	r2, [sp, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <displayFrequency+0xb0>)
 800073e:	2120      	movs	r1, #32
 8000740:	201a      	movs	r0, #26
 8000742:	f000 fdf0 	bl	8001326 <ST7735_WriteString>
	sprintf(buff, "%03d",th);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	461a      	mov	r2, r3
 800074a:	4912      	ldr	r1, [pc, #72]	; (8000794 <displayFrequency+0xc0>)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <displayFrequency+0xb0>)
 800074e:	f00e fc6b 	bl	800f028 <siprintf>
	ST7735_WriteString(125, 32, buff, Font_11x18, dark_color, light_color);
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <displayFrequency+0xb4>)
 8000754:	881a      	ldrh	r2, [r3, #0]
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <displayFrequency+0xb8>)
 8000758:	8819      	ldrh	r1, [r3, #0]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <displayFrequency+0xc4>)
 800075c:	9102      	str	r1, [sp, #8]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <displayFrequency+0xb0>)
 8000768:	2120      	movs	r1, #32
 800076a:	207d      	movs	r0, #125	; 0x7d
 800076c:	f000 fddb 	bl	8001326 <ST7735_WriteString>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	10624dd3 	.word	0x10624dd3
 800077c:	431bde83 	.word	0x431bde83
 8000780:	0800f734 	.word	0x0800f734
 8000784:	200001f0 	.word	0x200001f0
 8000788:	20000002 	.word	0x20000002
 800078c:	20000000 	.word	0x20000000
 8000790:	20000014 	.word	0x20000014
 8000794:	0800f740 	.word	0x0800f740
 8000798:	2000000c 	.word	0x2000000c

0800079c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	//ulHighFrequencyTimerTicks = 0UL;
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <getRunTimeCounterValue+0x14>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000260 	.word	0x20000260

080007c4 <vApplicationIdleHook>:
extern uint16_t current_step;
extern int current_band;
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	//vTaskList(taskListStatus);
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007d8:	4a08      	ldr	r2, [pc, #32]	; (80007fc <MX_FREERTOS_Init+0x28>)
 80007da:	2100      	movs	r1, #0
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <MX_FREERTOS_Init+0x2c>)
 80007de:	f00b f835 	bl	800b84c <osThreadNew>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <MX_FREERTOS_Init+0x30>)
 80007e6:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <MX_FREERTOS_Init+0x34>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4807      	ldr	r0, [pc, #28]	; (800080c <MX_FREERTOS_Init+0x38>)
 80007ee:	f00b f82d 	bl	800b84c <osThreadNew>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <MX_FREERTOS_Init+0x3c>)
 80007f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	08012290 	.word	0x08012290
 8000800:	08000815 	.word	0x08000815
 8000804:	20000204 	.word	0x20000204
 8000808:	080122b4 	.word	0x080122b4
 800080c:	08000879 	.word	0x08000879
 8000810:	20000208 	.word	0x20000208

08000814 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800081c:	f00d fd6e 	bl	800e2fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	current_freq = band[current_band].minFreq;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <StartDefaultTask+0x4c>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	490f      	ldr	r1, [pc, #60]	; (8000864 <StartDefaultTask+0x50>)
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	440b      	add	r3, r1
 8000830:	3304      	adds	r3, #4
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <StartDefaultTask+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
	current_step = step[current_step].step;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <StartDefaultTask+0x58>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <StartDefaultTask+0x5c>)
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	4413      	add	r3, r2
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	b29a      	uxth	r2, r3
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <StartDefaultTask+0x58>)
 800084a:	801a      	strh	r2, [r3, #0]
	for (;;) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800084c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <StartDefaultTask+0x60>)
 8000852:	f001 fe25 	bl	80024a0 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085a:	f00b f889 	bl	800b970 <osDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800085e:	e7f5      	b.n	800084c <StartDefaultTask+0x38>
 8000860:	20000268 	.word	0x20000268
 8000864:	20000054 	.word	0x20000054
 8000868:	20000264 	.word	0x20000264
 800086c:	2000006c 	.word	0x2000006c
 8000870:	2000001c 	.word	0x2000001c
 8000874:	40020800 	.word	0x40020800

08000878 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	int32_t prevCounter = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
	uint8_t buttonNumber = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	76fb      	strb	r3, [r7, #27]
	/*  */
	uint32_t max_freq = band[current_band].maxFreq;
 8000888:	4b48      	ldr	r3, [pc, #288]	; (80009ac <StartEncoderTask+0x134>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4948      	ldr	r1, [pc, #288]	; (80009b0 <StartEncoderTask+0x138>)
 800088e:	4613      	mov	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	440b      	add	r3, r1
 8000898:	3308      	adds	r3, #8
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	617b      	str	r3, [r7, #20]
	uint32_t min_freq = band[current_band].minFreq;
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <StartEncoderTask+0x134>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4943      	ldr	r1, [pc, #268]	; (80009b0 <StartEncoderTask+0x138>)
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	440b      	add	r3, r1
 80008ae:	3304      	adds	r3, #4
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	613b      	str	r3, [r7, #16]
	current_freq = min_freq;
 80008b4:	4a3f      	ldr	r2, [pc, #252]	; (80009b4 <StartEncoderTask+0x13c>)
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	6013      	str	r3, [r2, #0]
	/* */
	//ST7735_FillScreenFast(ST7735_BLACK);
	displayBackgrounds();
 80008ba:	f7ff fe63 	bl	8000584 <displayBackgrounds>
	displayBand(band[current_band].name);
 80008be:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <StartEncoderTask+0x134>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	493b      	ldr	r1, [pc, #236]	; (80009b0 <StartEncoderTask+0x138>)
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	440b      	add	r3, r1
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fec3 	bl	800065c <displayBand>
	displayStep(step[current_step].name);
 80008d6:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <StartEncoderTask+0x140>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	4b37      	ldr	r3, [pc, #220]	; (80009bc <StartEncoderTask+0x144>)
 80008de:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fed8 	bl	8000698 <displayStep>
	displayFrequency(current_freq);
 80008e8:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <StartEncoderTask+0x13c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fef1 	bl	80006d4 <displayFrequency>
	/* */
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 80008f2:	4b33      	ldr	r3, [pc, #204]	; (80009c0 <StartEncoderTask+0x148>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f8:	60fb      	str	r3, [r7, #12]
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	b29b      	uxth	r3, r3
 8000900:	0fda      	lsrs	r2, r3, #31
 8000902:	4413      	add	r3, r2
 8000904:	105b      	asrs	r3, r3, #1
 8000906:	425b      	negs	r3, r3
 8000908:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800090c:	337f      	adds	r3, #127	; 0x7f
 800090e:	60fb      	str	r3, [r7, #12]
		if (currCounter != prevCounter) {
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	429a      	cmp	r2, r3
 8000916:	d03b      	beq.n	8000990 <StartEncoderTask+0x118>
			if (currCounter > prevCounter) {
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	429a      	cmp	r2, r3
 800091e:	dd18      	ble.n	8000952 <StartEncoderTask+0xda>
				if (current_freq != min_freq) {
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <StartEncoderTask+0x13c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	429a      	cmp	r2, r3
 8000928:	d007      	beq.n	800093a <StartEncoderTask+0xc2>
					current_freq -= current_step;
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <StartEncoderTask+0x13c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <StartEncoderTask+0x140>)
 8000930:	8812      	ldrh	r2, [r2, #0]
 8000932:	1a9b      	subs	r3, r3, r2
 8000934:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <StartEncoderTask+0x13c>)
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	e002      	b.n	8000940 <StartEncoderTask+0xc8>
				} else {
					current_freq = max_freq;
 800093a:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <StartEncoderTask+0x13c>)
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	6013      	str	r3, [r2, #0]
				}
				displayFrequency(current_freq);
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <StartEncoderTask+0x13c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fec5 	bl	80006d4 <displayFrequency>
				osDelay(5);
 800094a:	2005      	movs	r0, #5
 800094c:	f00b f810 	bl	800b970 <osDelay>
 8000950:	e01c      	b.n	800098c <StartEncoderTask+0x114>
			} else if (currCounter < prevCounter) {
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	429a      	cmp	r2, r3
 8000958:	da18      	bge.n	800098c <StartEncoderTask+0x114>
				if (current_freq != max_freq) {
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <StartEncoderTask+0x13c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	697a      	ldr	r2, [r7, #20]
 8000960:	429a      	cmp	r2, r3
 8000962:	d008      	beq.n	8000976 <StartEncoderTask+0xfe>
					current_freq += current_step;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <StartEncoderTask+0x140>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <StartEncoderTask+0x13c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <StartEncoderTask+0x13c>)
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	e002      	b.n	800097c <StartEncoderTask+0x104>
				} else {
					current_freq = min_freq;
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <StartEncoderTask+0x13c>)
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	6013      	str	r3, [r2, #0]
				}
				displayFrequency(current_freq);
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <StartEncoderTask+0x13c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fea7 	bl	80006d4 <displayFrequency>
				osDelay(5);
 8000986:	2005      	movs	r0, #5
 8000988:	f00a fff2 	bl	800b970 <osDelay>
			} else {

			}
			prevCounter = currCounter;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	61fb      	str	r3, [r7, #28]
		}
		// Button
		if (buttonPressed[buttonNumber]) {
 8000990:	7efb      	ldrb	r3, [r7, #27]
 8000992:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <StartEncoderTask+0x14c>)
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d003      	beq.n	80009a4 <StartEncoderTask+0x12c>
			buttonPressed[buttonNumber] = 0;
 800099c:	7efb      	ldrb	r3, [r7, #27]
 800099e:	4a09      	ldr	r2, [pc, #36]	; (80009c4 <StartEncoderTask+0x14c>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	54d1      	strb	r1, [r2, r3]
			//osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
		}
		osDelay(5);
 80009a4:	2005      	movs	r0, #5
 80009a6:	f00a ffe3 	bl	800b970 <osDelay>
	for (;;) {
 80009aa:	e7a2      	b.n	80008f2 <StartEncoderTask+0x7a>
 80009ac:	20000268 	.word	0x20000268
 80009b0:	20000054 	.word	0x20000054
 80009b4:	20000264 	.word	0x20000264
 80009b8:	2000006c 	.word	0x2000006c
 80009bc:	2000001c 	.word	0x2000001c
 80009c0:	20000384 	.word	0x20000384
 80009c4:	2000032c 	.word	0x2000032c

080009c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b45      	ldr	r3, [pc, #276]	; (8000af8 <MX_GPIO_Init+0x130>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a44      	ldr	r2, [pc, #272]	; (8000af8 <MX_GPIO_Init+0x130>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b42      	ldr	r3, [pc, #264]	; (8000af8 <MX_GPIO_Init+0x130>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b3e      	ldr	r3, [pc, #248]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a3d      	ldr	r2, [pc, #244]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b37      	ldr	r3, [pc, #220]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a36      	ldr	r2, [pc, #216]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b34      	ldr	r3, [pc, #208]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a2f      	ldr	r2, [pc, #188]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a54:	4829      	ldr	r0, [pc, #164]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a56:	f001 fcf1 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLK_GPIO_Port, BLK_Pin, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	4828      	ldr	r0, [pc, #160]	; (8000b00 <MX_GPIO_Init+0x138>)
 8000a60:	f001 fcec 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	211c      	movs	r1, #28
 8000a68:	4825      	ldr	r0, [pc, #148]	; (8000b00 <MX_GPIO_Init+0x138>)
 8000a6a:	f001 fce7 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	481d      	ldr	r0, [pc, #116]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a88:	f001 fa3e 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4817      	ldr	r0, [pc, #92]	; (8000b00 <MX_GPIO_Init+0x138>)
 8000aa2:	f001 fa31 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLK_Pin;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4810      	ldr	r0, [pc, #64]	; (8000b00 <MX_GPIO_Init+0x138>)
 8000abe:	f001 fa23 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000ac2:	231c      	movs	r3, #28
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <MX_GPIO_Init+0x138>)
 8000ada:	f001 fa15 	bl	8001f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2105      	movs	r1, #5
 8000ae2:	2006      	movs	r0, #6
 8000ae4:	f001 f9cc 	bl	8001e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ae8:	2006      	movs	r0, #6
 8000aea:	f001 f9f5 	bl	8001ed8 <HAL_NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	; 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020000 	.word	0x40020000

08000b04 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_I2C3_Init+0x50>)
 8000b0a:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <MX_I2C3_Init+0x54>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_I2C3_Init+0x50>)
 8000b10:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_I2C3_Init+0x58>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_I2C3_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_I2C3_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_I2C3_Init+0x50>)
 8000b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_I2C3_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_I2C3_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_I2C3_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_I2C3_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_I2C3_Init+0x50>)
 8000b42:	f001 fced 	bl	8002520 <HAL_I2C_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b4c:	f000 f960 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000020c 	.word	0x2000020c
 8000b58:	40005c00 	.word	0x40005c00
 8000b5c:	000186a0 	.word	0x000186a0

08000b60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <HAL_I2C_MspInit+0xc0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d14a      	bne.n	8000c18 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc0:	2312      	movs	r3, #18
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4814      	ldr	r0, [pc, #80]	; (8000c28 <HAL_I2C_MspInit+0xc8>)
 8000bd8:	f001 f996 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be0:	2312      	movs	r3, #18
 8000be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000bec:	2309      	movs	r3, #9
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <HAL_I2C_MspInit+0xcc>)
 8000bf8:	f001 f986 	bl	8001f08 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000c06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40005c00 	.word	0x40005c00
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020400 	.word	0x40020400

08000c30 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000c36:	f000 fae5 	bl	8001204 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_COLOR565(40, 80, 130));
 8000c3a:	f642 2090 	movw	r0, #10896	; 0x2a90
 8000c3e:	f000 fcb3 	bl	80015a8 <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(8, 10, "ShortWave", Font_16x26, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <Display_Init+0x5c>)
 8000c44:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000c48:	9202      	str	r2, [sp, #8]
 8000c4a:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000c4e:	9201      	str	r2, [sp, #4]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	9200      	str	r2, [sp, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <Display_Init+0x60>)
 8000c58:	210a      	movs	r1, #10
 8000c5a:	2008      	movs	r0, #8
 8000c5c:	f000 fb63 	bl	8001326 <ST7735_WriteString>
    ST7735_WriteString(34, 35, "receiver", Font_11x18, ST7735_COLOR565(125, 160, 175), ST7735_COLOR565(40, 80, 130));
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <Display_Init+0x64>)
 8000c62:	f642 2290 	movw	r2, #10896	; 0x2a90
 8000c66:	9202      	str	r2, [sp, #8]
 8000c68:	f647 5215 	movw	r2, #32021	; 0x7d15
 8000c6c:	9201      	str	r2, [sp, #4]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	9200      	str	r2, [sp, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <Display_Init+0x68>)
 8000c76:	2123      	movs	r1, #35	; 0x23
 8000c78:	2022      	movs	r0, #34	; 0x22
 8000c7a:	f000 fb54 	bl	8001326 <ST7735_WriteString>
    HAL_Delay(3000);
 8000c7e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c82:	f001 f80b 	bl	8001c9c <HAL_Delay>
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000014 	.word	0x20000014
 8000c90:	0800f79c 	.word	0x0800f79c
 8000c94:	2000000c 	.word	0x2000000c
 8000c98:	0800f7a8 	.word	0x0800f7a8

08000c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca0:	f000 ffba 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca4:	f000 f838 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca8:	f7ff fe8e 	bl	80009c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cac:	f000 f946 	bl	8000f3c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000cb0:	f000 fe32 	bl	8001918 <MX_TIM3_Init>
  MX_RTC_Init();
 8000cb4:	f000 f8bc 	bl	8000e30 <MX_RTC_Init>
  MX_TIM4_Init();
 8000cb8:	f000 fe82 	bl	80019c0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000cbc:	f000 fddc 	bl	8001878 <MX_TIM1_Init>
  MX_I2C3_Init();
 8000cc0:	f7ff ff20 	bl	8000b04 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000cc4:	f00d fb1a 	bl	800e2fc <MX_USB_DEVICE_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000cc8:	213c      	movs	r1, #60	; 0x3c
 8000cca:	480f      	ldr	r0, [pc, #60]	; (8000d08 <main+0x6c>)
 8000ccc:	f005 ff54 	bl	8006b78 <HAL_TIM_Encoder_Start>
  //HAL_TIM_Base_Init(&htim1);
  HAL_TIM_Base_Start_IT(&htim1);
 8000cd0:	480e      	ldr	r0, [pc, #56]	; (8000d0c <main+0x70>)
 8000cd2:	f005 fd25 	bl	8006720 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <main+0x74>)
 8000cdc:	f001 fbe0 	bl	80024a0 <HAL_GPIO_TogglePin>
  //HAL_TIM_Base_Start(&htim11);
  Display_Init();
 8000ce0:	f7ff ffa6 	bl	8000c30 <Display_Init>
  si5351_Init(0);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f008 faeb 	bl	80092c0 <si5351_Init>
  si5351_SetupCLK0(7000000, SI5351_DRIVE_STRENGTH_4MA);
 8000cea:	2101      	movs	r1, #1
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <main+0x78>)
 8000cee:	f008 fccd 	bl	800968c <si5351_SetupCLK0>
  si5351_EnableOutputs(1 << 0);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f008 fceb 	bl	80096ce <si5351_EnableOutputs>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000cf8:	f00a fd5e 	bl	800b7b8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000cfc:	f7ff fd6a 	bl	80007d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d00:	f00a fd7e 	bl	800b800 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <main+0x68>
 8000d06:	bf00      	nop
 8000d08:	20000384 	.word	0x20000384
 8000d0c:	2000033c 	.word	0x2000033c
 8000d10:	40020800 	.word	0x40020800
 8000d14:	006acfc0 	.word	0x006acfc0

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b094      	sub	sp, #80	; 0x50
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	2230      	movs	r2, #48	; 0x30
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f00e f81c 	bl	800ed64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <SystemClock_Config+0xcc>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	4a27      	ldr	r2, [pc, #156]	; (8000de4 <SystemClock_Config+0xcc>)
 8000d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4c:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <SystemClock_Config+0xcc>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <SystemClock_Config+0xd0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a21      	ldr	r2, [pc, #132]	; (8000de8 <SystemClock_Config+0xd0>)
 8000d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <SystemClock_Config+0xd0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000d74:	2305      	movs	r3, #5
 8000d76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d82:	2302      	movs	r3, #2
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d8c:	2319      	movs	r3, #25
 8000d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d90:	23c0      	movs	r3, #192	; 0xc0
 8000d92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 fc63 	bl	800466c <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dac:	f000 f830 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db0:	230f      	movs	r3, #15
 8000db2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db4:	2302      	movs	r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	2103      	movs	r1, #3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 ff75 	bl	8004cbc <HAL_RCC_ClockConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dd8:	f000 f81a 	bl	8000e10 <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3750      	adds	r7, #80	; 0x50
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40007000 	.word	0x40007000

08000dec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1) {

  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d101      	bne.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dfe:	f000 ff2d 	bl	8001c5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40014800 	.word	0x40014800

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>

08000e1a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e44:	2300      	movs	r3, #0
 8000e46:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <MX_RTC_Init+0xac>)
 8000e4a:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <MX_RTC_Init+0xb0>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_RTC_Init+0xac>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <MX_RTC_Init+0xac>)
 8000e56:	227f      	movs	r2, #127	; 0x7f
 8000e58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_RTC_Init+0xac>)
 8000e5c:	22ff      	movs	r2, #255	; 0xff
 8000e5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_RTC_Init+0xac>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_RTC_Init+0xac>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_RTC_Init+0xac>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e72:	481a      	ldr	r0, [pc, #104]	; (8000edc <MX_RTC_Init+0xac>)
 8000e74:	f004 fbf2 	bl	800565c <HAL_RTC_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f7ff ffc7 	bl	8000e10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480f      	ldr	r0, [pc, #60]	; (8000edc <MX_RTC_Init+0xac>)
 8000e9e:	f004 fcb5 	bl	800580c <HAL_RTC_SetTime>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000ea8:	f7ff ffb2 	bl	8000e10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000eac:	2305      	movs	r3, #5
 8000eae:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000eb0:	2305      	movs	r3, #5
 8000eb2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000eb8:	2316      	movs	r3, #22
 8000eba:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_RTC_Init+0xac>)
 8000ec4:	f004 fdea 	bl	8005a9c <HAL_RTC_SetDate>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000ece:	f7ff ff9f 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000026c 	.word	0x2000026c
 8000ee0:	40002800 	.word	0x40002800

08000ee4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <HAL_RTC_MspInit+0x50>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d111      	bne.n	8000f2c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f10:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 f98a 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f22:	f7ff ff75 	bl	8000e10 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HAL_RTC_MspInit+0x54>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40002800 	.word	0x40002800
 8000f38:	42470e3c 	.word	0x42470e3c

08000f3c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f42:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <MX_SPI1_Init+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f88:	220a      	movs	r2, #10
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f8e:	f004 ff4f 	bl	8005e30 <HAL_SPI_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f98:	f7ff ff3a 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000028c 	.word	0x2000028c
 8000fa4:	40013000 	.word	0x40013000

08000fa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a19      	ldr	r2, [pc, #100]	; (800102c <HAL_SPI_MspInit+0x84>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12b      	bne.n	8001022 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001002:	23a0      	movs	r3, #160	; 0xa0
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001012:	2305      	movs	r3, #5
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_SPI_MspInit+0x8c>)
 800101e:	f000 ff73 	bl	8001f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40013000 	.word	0x40013000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	2110      	movs	r1, #16
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <ST7735_Select+0x14>)
 8001042:	f001 f9fb 	bl	800243c <HAL_GPIO_WritePin>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020000 	.word	0x40020000

08001050 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2110      	movs	r1, #16
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <ST7735_Unselect+0x14>)
 800105a:	f001 f9ef 	bl	800243c <HAL_GPIO_WritePin>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020000 	.word	0x40020000

08001068 <ST7735_Reset>:

static void ST7735_Reset() {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2108      	movs	r1, #8
 8001070:	4806      	ldr	r0, [pc, #24]	; (800108c <ST7735_Reset+0x24>)
 8001072:	f001 f9e3 	bl	800243c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001076:	2005      	movs	r0, #5
 8001078:	f000 fe10 	bl	8001c9c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2108      	movs	r1, #8
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <ST7735_Reset+0x24>)
 8001082:	f001 f9db 	bl	800243c <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020000 	.word	0x40020000

08001090 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2104      	movs	r1, #4
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <ST7735_WriteCommand+0x2c>)
 80010a0:	f001 f9cc 	bl	800243c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80010a4:	1df9      	adds	r1, r7, #7
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	2201      	movs	r2, #1
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <ST7735_WriteCommand+0x30>)
 80010ae:	f005 f85b 	bl	8006168 <HAL_SPI_Transmit>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020000 	.word	0x40020000
 80010c0:	2000028c 	.word	0x2000028c

080010c4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2104      	movs	r1, #4
 80010d2:	4807      	ldr	r0, [pc, #28]	; (80010f0 <ST7735_WriteData+0x2c>)
 80010d4:	f001 f9b2 	bl	800243c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4804      	ldr	r0, [pc, #16]	; (80010f4 <ST7735_WriteData+0x30>)
 80010e4:	f005 f840 	bl	8006168 <HAL_SPI_Transmit>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40020000 	.word	0x40020000
 80010f4:	2000028c 	.word	0x2000028c

080010f8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800110a:	e034      	b.n	8001176 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001116:	7afb      	ldrb	r3, [r7, #11]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ffb9 	bl	8001090 <ST7735_WriteCommand>

        numArgs = *addr++;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001128:	7abb      	ldrb	r3, [r7, #10]
 800112a:	b29b      	uxth	r3, r3
 800112c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001130:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001132:	7abb      	ldrb	r3, [r7, #10]
 8001134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001138:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800113a:	7abb      	ldrb	r3, [r7, #10]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d008      	beq.n	8001152 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001140:	7abb      	ldrb	r3, [r7, #10]
 8001142:	4619      	mov	r1, r3
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ffbd 	bl	80010c4 <ST7735_WriteData>
            addr += numArgs;
 800114a:	7abb      	ldrb	r3, [r7, #10]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001152:	89bb      	ldrh	r3, [r7, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00e      	beq.n	8001176 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001162:	89bb      	ldrh	r3, [r7, #12]
 8001164:	2bff      	cmp	r3, #255	; 0xff
 8001166:	d102      	bne.n	800116e <ST7735_ExecuteCommandList+0x76>
 8001168:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800116c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800116e:	89bb      	ldrh	r3, [r7, #12]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fd93 	bl	8001c9c <HAL_Delay>
    while(numCommands--) {
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	73fa      	strb	r2, [r7, #15]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1c5      	bne.n	800110c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800118a:	b590      	push	{r4, r7, lr}
 800118c:	b085      	sub	sp, #20
 800118e:	af00      	add	r7, sp, #0
 8001190:	4604      	mov	r4, r0
 8001192:	4608      	mov	r0, r1
 8001194:	4611      	mov	r1, r2
 8001196:	461a      	mov	r2, r3
 8001198:	4623      	mov	r3, r4
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4603      	mov	r3, r0
 800119e:	71bb      	strb	r3, [r7, #6]
 80011a0:	460b      	mov	r3, r1
 80011a2:	717b      	strb	r3, [r7, #5]
 80011a4:	4613      	mov	r3, r2
 80011a6:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80011a8:	202a      	movs	r0, #42	; 0x2a
 80011aa:	f7ff ff71 	bl	8001090 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80011ae:	2300      	movs	r3, #0
 80011b0:	733b      	strb	r3, [r7, #12]
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	3301      	adds	r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	737b      	strb	r3, [r7, #13]
 80011ba:	2300      	movs	r3, #0
 80011bc:	73bb      	strb	r3, [r7, #14]
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	3301      	adds	r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2104      	movs	r1, #4
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff79 	bl	80010c4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80011d2:	202b      	movs	r0, #43	; 0x2b
 80011d4:	f7ff ff5c 	bl	8001090 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	331a      	adds	r3, #26
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80011e0:	793b      	ldrb	r3, [r7, #4]
 80011e2:	331a      	adds	r3, #26
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2104      	movs	r1, #4
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff68 	bl	80010c4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80011f4:	202c      	movs	r0, #44	; 0x2c
 80011f6:	f7ff ff4b 	bl	8001090 <ST7735_WriteCommand>
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}
	...

08001204 <ST7735_Init>:

void ST7735_Init() {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001208:	f7ff ff16 	bl	8001038 <ST7735_Select>
    ST7735_Reset();
 800120c:	f7ff ff2c 	bl	8001068 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <ST7735_Init+0x28>)
 8001212:	f7ff ff71 	bl	80010f8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <ST7735_Init+0x2c>)
 8001218:	f7ff ff6e 	bl	80010f8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <ST7735_Init+0x30>)
 800121e:	f7ff ff6b 	bl	80010f8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001222:	f7ff ff15 	bl	8001050 <ST7735_Unselect>
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	080122d8 	.word	0x080122d8
 8001230:	08012314 	.word	0x08012314
 8001234:	08012324 	.word	0x08012324

08001238 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001238:	b082      	sub	sp, #8
 800123a:	b590      	push	{r4, r7, lr}
 800123c:	b089      	sub	sp, #36	; 0x24
 800123e:	af00      	add	r7, sp, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
 8001246:	460b      	mov	r3, r1
 8001248:	80bb      	strh	r3, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	b2d8      	uxtb	r0, r3
 8001252:	88bb      	ldrh	r3, [r7, #4]
 8001254:	b2d9      	uxtb	r1, r3
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800125e:	4413      	add	r3, r2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	3b01      	subs	r3, #1
 8001264:	b2dc      	uxtb	r4, r3
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800126e:	4413      	add	r3, r2
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3b01      	subs	r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4622      	mov	r2, r4
 8001278:	f7ff ff87 	bl	800118a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	e043      	b.n	800130a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	3b20      	subs	r3, #32
 8001288:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800128c:	fb01 f303 	mul.w	r3, r1, r3
 8001290:	4619      	mov	r1, r3
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	440b      	add	r3, r1
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	e029      	b.n	80012f8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00e      	beq.n	80012d2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80012b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	743b      	strb	r3, [r7, #16]
 80012be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fefa 	bl	80010c4 <ST7735_WriteData>
 80012d0:	e00f      	b.n	80012f2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80012d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	733b      	strb	r3, [r7, #12]
 80012de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2102      	movs	r1, #2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fee9 	bl	80010c4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012fc:	461a      	mov	r2, r3
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	4293      	cmp	r3, r2
 8001302:	d3cf      	bcc.n	80012a4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	3301      	adds	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800130e:	461a      	mov	r2, r3
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	4293      	cmp	r3, r2
 8001314:	d3b5      	bcc.n	8001282 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	3724      	adds	r7, #36	; 0x24
 800131c:	46bd      	mov	sp, r7
 800131e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001322:	b002      	add	sp, #8
 8001324:	4770      	bx	lr

08001326 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001326:	b082      	sub	sp, #8
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af04      	add	r7, sp, #16
 800132e:	603a      	str	r2, [r7, #0]
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
 8001336:	460b      	mov	r3, r1
 8001338:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800133a:	f7ff fe7d 	bl	8001038 <ST7735_Select>

    while(*str) {
 800133e:	e02d      	b.n	800139c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	7d3a      	ldrb	r2, [r7, #20]
 8001344:	4413      	add	r3, r2
 8001346:	2b9f      	cmp	r3, #159	; 0x9f
 8001348:	dd13      	ble.n	8001372 <ST7735_WriteString+0x4c>
            x = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800134e:	7d7b      	ldrb	r3, [r7, #21]
 8001350:	b29a      	uxth	r2, r3
 8001352:	88bb      	ldrh	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	7d7a      	ldrb	r2, [r7, #21]
 800135c:	4413      	add	r3, r2
 800135e:	2b4f      	cmp	r3, #79	; 0x4f
 8001360:	dc21      	bgt.n	80013a6 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b20      	cmp	r3, #32
 8001368:	d103      	bne.n	8001372 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	603b      	str	r3, [r7, #0]
                continue;
 8001370:	e014      	b.n	800139c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	781a      	ldrb	r2, [r3, #0]
 8001376:	88b9      	ldrh	r1, [r7, #4]
 8001378:	88f8      	ldrh	r0, [r7, #6]
 800137a:	8c3b      	ldrh	r3, [r7, #32]
 800137c:	9302      	str	r3, [sp, #8]
 800137e:	8bbb      	ldrh	r3, [r7, #28]
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f7ff ff56 	bl	8001238 <ST7735_WriteChar>
        x += font.width;
 800138c:	7d3b      	ldrb	r3, [r7, #20]
 800138e:	b29a      	uxth	r2, r3
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	4413      	add	r3, r2
 8001394:	80fb      	strh	r3, [r7, #6]
        str++;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1cd      	bne.n	8001340 <ST7735_WriteString+0x1a>
 80013a4:	e000      	b.n	80013a8 <ST7735_WriteString+0x82>
                break;
 80013a6:	bf00      	nop
    }

    ST7735_Unselect();
 80013a8:	f7ff fe52 	bl	8001050 <ST7735_Unselect>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013b6:	b002      	add	sp, #8
 80013b8:	4770      	bx	lr
	...

080013bc <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4604      	mov	r4, r0
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4623      	mov	r3, r4
 80013cc:	80fb      	strh	r3, [r7, #6]
 80013ce:	4603      	mov	r3, r0
 80013d0:	80bb      	strh	r3, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]
 80013d6:	4613      	mov	r3, r2
 80013d8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	2b9f      	cmp	r3, #159	; 0x9f
 80013de:	d857      	bhi.n	8001490 <ST7735_FillRectangle+0xd4>
 80013e0:	88bb      	ldrh	r3, [r7, #4]
 80013e2:	2b4f      	cmp	r3, #79	; 0x4f
 80013e4:	d854      	bhi.n	8001490 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80013e6:	88fa      	ldrh	r2, [r7, #6]
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	4413      	add	r3, r2
 80013ec:	2ba0      	cmp	r3, #160	; 0xa0
 80013ee:	dd03      	ble.n	80013f8 <ST7735_FillRectangle+0x3c>
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80013f6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80013f8:	88ba      	ldrh	r2, [r7, #4]
 80013fa:	883b      	ldrh	r3, [r7, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	2b50      	cmp	r3, #80	; 0x50
 8001400:	dd03      	ble.n	800140a <ST7735_FillRectangle+0x4e>
 8001402:	88bb      	ldrh	r3, [r7, #4]
 8001404:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001408:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800140a:	f7ff fe15 	bl	8001038 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	b2d8      	uxtb	r0, r3
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	b2d9      	uxtb	r1, r3
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4413      	add	r3, r2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	3b01      	subs	r3, #1
 8001424:	b2dc      	uxtb	r4, r3
 8001426:	88bb      	ldrh	r3, [r7, #4]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	883b      	ldrh	r3, [r7, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	4413      	add	r3, r2
 8001430:	b2db      	uxtb	r3, r3
 8001432:	3b01      	subs	r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4622      	mov	r2, r4
 8001438:	f7ff fea7 	bl	800118a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800143c:	8c3b      	ldrh	r3, [r7, #32]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	b29b      	uxth	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	733b      	strb	r3, [r7, #12]
 8001446:	8c3b      	ldrh	r3, [r7, #32]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2104      	movs	r1, #4
 8001450:	4811      	ldr	r0, [pc, #68]	; (8001498 <ST7735_FillRectangle+0xdc>)
 8001452:	f000 fff3 	bl	800243c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001456:	883b      	ldrh	r3, [r7, #0]
 8001458:	80bb      	strh	r3, [r7, #4]
 800145a:	e013      	b.n	8001484 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	80fb      	strh	r3, [r7, #6]
 8001460:	e00a      	b.n	8001478 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001462:	f107 010c 	add.w	r1, r7, #12
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	2202      	movs	r2, #2
 800146c:	480b      	ldr	r0, [pc, #44]	; (800149c <ST7735_FillRectangle+0xe0>)
 800146e:	f004 fe7b 	bl	8006168 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	3b01      	subs	r3, #1
 8001476:	80fb      	strh	r3, [r7, #6]
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f1      	bne.n	8001462 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	3b01      	subs	r3, #1
 8001482:	80bb      	strh	r3, [r7, #4]
 8001484:	88bb      	ldrh	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1e8      	bne.n	800145c <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800148a:	f7ff fde1 	bl	8001050 <ST7735_Unselect>
 800148e:	e000      	b.n	8001492 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001490:	bf00      	nop
}
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	40020000 	.word	0x40020000
 800149c:	2000028c 	.word	0x2000028c

080014a0 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4604      	mov	r4, r0
 80014a8:	4608      	mov	r0, r1
 80014aa:	4611      	mov	r1, r2
 80014ac:	461a      	mov	r2, r3
 80014ae:	4623      	mov	r3, r4
 80014b0:	80fb      	strh	r3, [r7, #6]
 80014b2:	4603      	mov	r3, r0
 80014b4:	80bb      	strh	r3, [r7, #4]
 80014b6:	460b      	mov	r3, r1
 80014b8:	807b      	strh	r3, [r7, #2]
 80014ba:	4613      	mov	r3, r2
 80014bc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	2b9f      	cmp	r3, #159	; 0x9f
 80014c2:	d869      	bhi.n	8001598 <ST7735_FillRectangleFast+0xf8>
 80014c4:	88bb      	ldrh	r3, [r7, #4]
 80014c6:	2b4f      	cmp	r3, #79	; 0x4f
 80014c8:	d866      	bhi.n	8001598 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80014ca:	88fa      	ldrh	r2, [r7, #6]
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	4413      	add	r3, r2
 80014d0:	2ba0      	cmp	r3, #160	; 0xa0
 80014d2:	dd03      	ble.n	80014dc <ST7735_FillRectangleFast+0x3c>
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80014da:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80014dc:	88ba      	ldrh	r2, [r7, #4]
 80014de:	883b      	ldrh	r3, [r7, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	2b50      	cmp	r3, #80	; 0x50
 80014e4:	dd03      	ble.n	80014ee <ST7735_FillRectangleFast+0x4e>
 80014e6:	88bb      	ldrh	r3, [r7, #4]
 80014e8:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80014ec:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80014ee:	f7ff fda3 	bl	8001038 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	b2d8      	uxtb	r0, r3
 80014f6:	88bb      	ldrh	r3, [r7, #4]
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4413      	add	r3, r2
 8001504:	b2db      	uxtb	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b2dc      	uxtb	r4, r3
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	883b      	ldrh	r3, [r7, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4413      	add	r3, r2
 8001514:	b2db      	uxtb	r3, r3
 8001516:	3b01      	subs	r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4622      	mov	r2, r4
 800151c:	f7ff fe35 	bl	800118a <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8001520:	8c3b      	ldrh	r3, [r7, #32]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	b29b      	uxth	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	723b      	strb	r3, [r7, #8]
 800152a:	8c3b      	ldrh	r3, [r7, #32]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f00d fbf7 	bl	800ed28 <malloc>
 800153a:	4603      	mov	r3, r0
 800153c:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 800153e:	2300      	movs	r3, #0
 8001540:	80fb      	strh	r3, [r7, #6]
 8001542:	e008      	b.n	8001556 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	893a      	ldrh	r2, [r7, #8]
 800154e:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	3301      	adds	r3, #1
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	429a      	cmp	r2, r3
 800155c:	d3f2      	bcc.n	8001544 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	2104      	movs	r1, #4
 8001562:	480f      	ldr	r0, [pc, #60]	; (80015a0 <ST7735_FillRectangleFast+0x100>)
 8001564:	f000 ff6a 	bl	800243c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001568:	883b      	ldrh	r3, [r7, #0]
 800156a:	80bb      	strh	r3, [r7, #4]
 800156c:	e00b      	b.n	8001586 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	68f9      	ldr	r1, [r7, #12]
 800157a:	480a      	ldr	r0, [pc, #40]	; (80015a4 <ST7735_FillRectangleFast+0x104>)
 800157c:	f004 fdf4 	bl	8006168 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8001580:	88bb      	ldrh	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	80bb      	strh	r3, [r7, #4]
 8001586:	88bb      	ldrh	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f0      	bne.n	800156e <ST7735_FillRectangleFast+0xce>

    free(line);
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f00d fbd3 	bl	800ed38 <free>
    ST7735_Unselect();
 8001592:	f7ff fd5d 	bl	8001050 <ST7735_Unselect>
 8001596:	e000      	b.n	800159a <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001598:	bf00      	nop
}
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	40020000 	.word	0x40020000
 80015a4:	2000028c 	.word	0x2000028c

080015a8 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2350      	movs	r3, #80	; 0x50
 80015b8:	22a0      	movs	r2, #160	; 0xa0
 80015ba:	2100      	movs	r1, #0
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff fefd 	bl	80013bc <ST7735_FillRectangle>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_MspInit+0x54>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a11      	ldr	r2, [pc, #68]	; (8001620 <HAL_MspInit+0x54>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_MspInit+0x54>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_MspInit+0x54>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <HAL_MspInit+0x54>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_MspInit+0x54>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	210f      	movs	r1, #15
 800160e:	f06f 0001 	mvn.w	r0, #1
 8001612:	f000 fc35 	bl	8001e80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	201a      	movs	r0, #26
 800163a:	f000 fc21 	bl	8001e80 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800163e:	201a      	movs	r0, #26
 8001640:	f000 fc4a 	bl	8001ed8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_InitTick+0xa0>)
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <HAL_InitTick+0xa0>)
 800164e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001652:	6453      	str	r3, [r2, #68]	; 0x44
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_InitTick+0xa0>)
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001660:	f107 0210 	add.w	r2, r7, #16
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fdae 	bl	80051cc <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001670:	f003 fd98 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 8001674:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001678:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <HAL_InitTick+0xa4>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0c9b      	lsrs	r3, r3, #18
 8001680:	3b01      	subs	r3, #1
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_InitTick+0xa8>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <HAL_InitTick+0xac>)
 8001688:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_InitTick+0xa8>)
 800168c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001690:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_InitTick+0xa8>)
 8001694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001696:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_InitTick+0xa8>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_InitTick+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80016a4:	4809      	ldr	r0, [pc, #36]	; (80016cc <HAL_InitTick+0xa8>)
 80016a6:	f004 ff75 	bl	8006594 <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d104      	bne.n	80016ba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <HAL_InitTick+0xa8>)
 80016b2:	f005 f835 	bl	8006720 <HAL_TIM_Base_Start_IT>
 80016b6:	4603      	mov	r3, r0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3730      	adds	r7, #48	; 0x30
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	431bde83 	.word	0x431bde83
 80016cc:	200002e4 	.word	0x200002e4
 80016d0:	40014800 	.word	0x40014800

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001704:	2001      	movs	r0, #1
 8001706:	f000 fef3 	bl	80024f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001716:	f005 faed 	bl	8006cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	4a02      	ldr	r2, [pc, #8]	; (800172c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001722:	6013      	str	r3, [r2, #0]
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2000033c 	.word	0x2000033c
 800172c:	20000260 	.word	0x20000260

08001730 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001734:	4803      	ldr	r0, [pc, #12]	; (8001744 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001736:	f005 fadd 	bl	8006cf4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800173a:	4803      	ldr	r0, [pc, #12]	; (8001748 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800173c:	f005 fada 	bl	8006cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000033c 	.word	0x2000033c
 8001748:	200002e4 	.word	0x200002e4

0800174c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001750:	4808      	ldr	r0, [pc, #32]	; (8001774 <TIM3_IRQHandler+0x28>)
 8001752:	f005 facf 	bl	8006cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <TIM3_IRQHandler+0x2c>)
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <TIM3_IRQHandler+0x2c>)
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <TIM3_IRQHandler+0x2c>)
 8001768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800176c:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000384 	.word	0x20000384
 8001778:	40000400 	.word	0x40000400

0800177c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <OTG_FS_IRQHandler+0x10>)
 8001782:	f001 fe46 	bl	8003412 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2001b71c 	.word	0x2001b71c

08001790 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 800179a:	23ff      	movs	r3, #255	; 0xff
 800179c:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 80017a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db11      	blt.n	80017d4 <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 80017b0:	f000 fa68 	bl	8001c84 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_GPIO_EXTI_Callback+0x50>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b63      	cmp	r3, #99	; 0x63
 80017c0:	d90a      	bls.n	80017d8 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 80017c2:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_GPIO_EXTI_Callback+0x50>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 80017c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017cc:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <HAL_GPIO_EXTI_Callback+0x54>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	54d1      	strb	r1, [r2, r3]
 80017d2:	e002      	b.n	80017da <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 80017d4:	bf00      	nop
 80017d6:	e000      	b.n	80017da <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 80017d8:	bf00      	nop
}
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000334 	.word	0x20000334
 80017e4:	2000032c 	.word	0x2000032c

080017e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <_sbrk+0x5c>)
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <_sbrk+0x60>)
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <_sbrk+0x64>)
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <_sbrk+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	429a      	cmp	r2, r3
 8001816:	d207      	bcs.n	8001828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001818:	f00d fa5a 	bl	800ecd0 <__errno>
 800181c:	4603      	mov	r3, r0
 800181e:	220c      	movs	r2, #12
 8001820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	e009      	b.n	800183c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <_sbrk+0x64>)
 8001838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20020000 	.word	0x20020000
 8001848:	00001000 	.word	0x00001000
 800184c:	20000338 	.word	0x20000338
 8001850:	2001be58 	.word	0x2001be58

08001854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <SystemInit+0x20>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <SystemInit+0x20>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	463b      	mov	r3, r7
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <MX_TIM1_Init+0x98>)
 8001896:	4a1f      	ldr	r2, [pc, #124]	; (8001914 <MX_TIM1_Init+0x9c>)
 8001898:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <MX_TIM1_Init+0x98>)
 800189c:	222f      	movs	r2, #47	; 0x2f
 800189e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <MX_TIM1_Init+0x98>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_TIM1_Init+0x98>)
 80018a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <MX_TIM1_Init+0x98>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <MX_TIM1_Init+0x98>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_TIM1_Init+0x98>)
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018c0:	4813      	ldr	r0, [pc, #76]	; (8001910 <MX_TIM1_Init+0x98>)
 80018c2:	f004 fe67 	bl	8006594 <HAL_TIM_Base_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018cc:	f7ff faa0 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	4619      	mov	r1, r3
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <MX_TIM1_Init+0x98>)
 80018de:	f005 fb11 	bl	8006f04 <HAL_TIM_ConfigClockSource>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018e8:	f7ff fa92 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018ec:	2320      	movs	r3, #32
 80018ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f4:	463b      	mov	r3, r7
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_TIM1_Init+0x98>)
 80018fa:	f005 ffc1 	bl	8007880 <HAL_TIMEx_MasterConfigSynchronization>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001904:	f7ff fa84 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000033c 	.word	0x2000033c
 8001914:	40010000 	.word	0x40010000

08001918 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	2224      	movs	r2, #36	; 0x24
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f00d fa1c 	bl	800ed64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001934:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <MX_TIM3_Init+0xa0>)
 8001936:	4a21      	ldr	r2, [pc, #132]	; (80019bc <MX_TIM3_Init+0xa4>)
 8001938:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <MX_TIM3_Init+0xa0>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <MX_TIM3_Init+0xa0>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_TIM3_Init+0xa0>)
 8001948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800194c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_TIM3_Init+0xa0>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_TIM3_Init+0xa0>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800195a:	2301      	movs	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001962:	2301      	movs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800196a:	2302      	movs	r3, #2
 800196c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001972:	2301      	movs	r3, #1
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 800197a:	2302      	movs	r3, #2
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	4619      	mov	r1, r3
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <MX_TIM3_Init+0xa0>)
 8001986:	f004 ff5d 	bl	8006844 <HAL_TIM_Encoder_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001990:	f7ff fa3e 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_TIM3_Init+0xa0>)
 80019a2:	f005 ff6d 	bl	8007880 <HAL_TIMEx_MasterConfigSynchronization>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80019ac:	f7ff fa30 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	3730      	adds	r7, #48	; 0x30
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000384 	.word	0x20000384
 80019bc:	40000400 	.word	0x40000400

080019c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019dc:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <MX_TIM4_Init+0x90>)
 80019de:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <MX_TIM4_Init+0x94>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <MX_TIM4_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <MX_TIM4_Init+0x90>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60;
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <MX_TIM4_Init+0x90>)
 80019f0:	223c      	movs	r2, #60	; 0x3c
 80019f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <MX_TIM4_Init+0x90>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <MX_TIM4_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a00:	4813      	ldr	r0, [pc, #76]	; (8001a50 <MX_TIM4_Init+0x90>)
 8001a02:	f004 fdc7 	bl	8006594 <HAL_TIM_Base_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001a0c:	f7ff fa00 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480c      	ldr	r0, [pc, #48]	; (8001a50 <MX_TIM4_Init+0x90>)
 8001a1e:	f005 fa71 	bl	8006f04 <HAL_TIM_ConfigClockSource>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001a28:	f7ff f9f2 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a34:	463b      	mov	r3, r7
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_TIM4_Init+0x90>)
 8001a3a:	f005 ff21 	bl	8007880 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001a44:	f7ff f9e4 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200003cc 	.word	0x200003cc
 8001a54:	40000800 	.word	0x40000800

08001a58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_TIM_Base_MspInit+0x80>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d11e      	bne.n	8001aa8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_TIM_Base_MspInit+0x84>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_TIM_Base_MspInit+0x84>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_TIM_Base_MspInit+0x84>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2105      	movs	r1, #5
 8001a8a:	2019      	movs	r0, #25
 8001a8c:	f000 f9f8 	bl	8001e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a90:	2019      	movs	r0, #25
 8001a92:	f000 fa21 	bl	8001ed8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	210f      	movs	r1, #15
 8001a9a:	201a      	movs	r0, #26
 8001a9c:	f000 f9f0 	bl	8001e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001aa0:	201a      	movs	r0, #26
 8001aa2:	f000 fa19 	bl	8001ed8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001aa6:	e012      	b.n	8001ace <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <HAL_TIM_Base_MspInit+0x88>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d10d      	bne.n	8001ace <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_TIM_Base_MspInit+0x84>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_TIM_Base_MspInit+0x84>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_TIM_Base_MspInit+0x84>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40000800 	.word	0x40000800

08001ae4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2c      	ldr	r2, [pc, #176]	; (8001bb4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d151      	bne.n	8001baa <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a2a      	ldr	r2, [pc, #168]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a23      	ldr	r2, [pc, #140]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001b5a:	2340      	movs	r3, #64	; 0x40
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	4811      	ldr	r0, [pc, #68]	; (8001bbc <HAL_TIM_Encoder_MspInit+0xd8>)
 8001b76:	f000 f9c7 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001b7a:	2320      	movs	r3, #32
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b96:	f000 f9b7 	bl	8001f08 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2105      	movs	r1, #5
 8001b9e:	201d      	movs	r0, #29
 8001ba0:	f000 f96e 	bl	8001e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ba4:	201d      	movs	r0, #29
 8001ba6:	f000 f997 	bl	8001ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	; 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40000400 	.word	0x40000400
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be0:	4c0b      	ldr	r4, [pc, #44]	; (8001c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bee:	f7ff fe31 	bl	8001854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f00d f873 	bl	800ecdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf6:	f7ff f851 	bl	8000c9c <main>
  bx  lr    
 8001bfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c08:	0801240c 	.word	0x0801240c
  ldr r2, =_sbss
 8001c0c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c10:	2001be58 	.word	0x2001be58

08001c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <HAL_Init+0x40>)
 8001c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_Init+0x40>)
 8001c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_Init+0x40>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 f8fd 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	200f      	movs	r0, #15
 8001c48:	f7ff fcec 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4c:	f7ff fcbe 	bl	80015cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000078 	.word	0x20000078
 8001c80:	20000414 	.word	0x20000414

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000414 	.word	0x20000414

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000078 	.word	0x20000078

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	; (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b07      	cmp	r3, #7
 8001e4c:	d00f      	beq.n	8001e6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b06      	cmp	r3, #6
 8001e52:	d00c      	beq.n	8001e6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d009      	beq.n	8001e6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d006      	beq.n	8001e6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d003      	beq.n	8001e6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e66:	2190      	movs	r1, #144	; 0x90
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001e6a:	f7fe ffd6 	bl	8000e1a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ff38 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	0800f7b4 	.word	0x0800f7b4

08001e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b0f      	cmp	r3, #15
 8001e96:	d903      	bls.n	8001ea0 <HAL_NVIC_SetPriority+0x20>
 8001e98:	21a8      	movs	r1, #168	; 0xa8
 8001e9a:	480e      	ldr	r0, [pc, #56]	; (8001ed4 <HAL_NVIC_SetPriority+0x54>)
 8001e9c:	f7fe ffbd 	bl	8000e1a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b0f      	cmp	r3, #15
 8001ea4:	d903      	bls.n	8001eae <HAL_NVIC_SetPriority+0x2e>
 8001ea6:	21a9      	movs	r1, #169	; 0xa9
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <HAL_NVIC_SetPriority+0x54>)
 8001eaa:	f7fe ffb6 	bl	8000e1a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eae:	f7ff ff3d 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001eb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	6978      	ldr	r0, [r7, #20]
 8001eba:	f7ff ff8d 	bl	8001dd8 <NVIC_EncodePriority>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff5c 	bl	8001d84 <__NVIC_SetPriority>
}
 8001ecc:	bf00      	nop
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	0800f7b4 	.word	0x0800f7b4

08001ed8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da03      	bge.n	8001ef2 <HAL_NVIC_EnableIRQ+0x1a>
 8001eea:	21bc      	movs	r1, #188	; 0xbc
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <HAL_NVIC_EnableIRQ+0x2c>)
 8001eee:	f7fe ff94 	bl	8000e1a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff26 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0800f7b4 	.word	0x0800f7b4

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a33      	ldr	r2, [pc, #204]	; (8001ff0 <HAL_GPIO_Init+0xe8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d017      	beq.n	8001f56 <HAL_GPIO_Init+0x4e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a32      	ldr	r2, [pc, #200]	; (8001ff4 <HAL_GPIO_Init+0xec>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <HAL_GPIO_Init+0x4e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a31      	ldr	r2, [pc, #196]	; (8001ff8 <HAL_GPIO_Init+0xf0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00f      	beq.n	8001f56 <HAL_GPIO_Init+0x4e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a30      	ldr	r2, [pc, #192]	; (8001ffc <HAL_GPIO_Init+0xf4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00b      	beq.n	8001f56 <HAL_GPIO_Init+0x4e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a2f      	ldr	r2, [pc, #188]	; (8002000 <HAL_GPIO_Init+0xf8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <HAL_GPIO_Init+0x4e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2e      	ldr	r2, [pc, #184]	; (8002004 <HAL_GPIO_Init+0xfc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x4e>
 8001f4e:	21ac      	movs	r1, #172	; 0xac
 8001f50:	482d      	ldr	r0, [pc, #180]	; (8002008 <HAL_GPIO_Init+0x100>)
 8001f52:	f7fe ff62 	bl	8000e1a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_GPIO_Init+0x64>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	041b      	lsls	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x6c>
 8001f6c:	21ad      	movs	r1, #173	; 0xad
 8001f6e:	4826      	ldr	r0, [pc, #152]	; (8002008 <HAL_GPIO_Init+0x100>)
 8001f70:	f7fe ff53 	bl	8000e1a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d035      	beq.n	8001fe8 <HAL_GPIO_Init+0xe0>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d031      	beq.n	8001fe8 <HAL_GPIO_Init+0xe0>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b11      	cmp	r3, #17
 8001f8a:	d02d      	beq.n	8001fe8 <HAL_GPIO_Init+0xe0>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d029      	beq.n	8001fe8 <HAL_GPIO_Init+0xe0>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b12      	cmp	r3, #18
 8001f9a:	d025      	beq.n	8001fe8 <HAL_GPIO_Init+0xe0>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001fa4:	d020      	beq.n	8001fe8 <HAL_GPIO_Init+0xe0>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001fae:	d01b      	beq.n	8001fe8 <HAL_GPIO_Init+0xe0>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001fb8:	d016      	beq.n	8001fe8 <HAL_GPIO_Init+0xe0>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001fc2:	d011      	beq.n	8001fe8 <HAL_GPIO_Init+0xe0>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_GPIO_Init+0xe0>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001fd6:	d007      	beq.n	8001fe8 <HAL_GPIO_Init+0xe0>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0xe0>
 8001fe0:	21ae      	movs	r1, #174	; 0xae
 8001fe2:	4809      	ldr	r0, [pc, #36]	; (8002008 <HAL_GPIO_Init+0x100>)
 8001fe4:	f7fe ff19 	bl	8000e1a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	e20c      	b.n	8002408 <HAL_GPIO_Init+0x500>
 8001fee:	bf00      	nop
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	40020c00 	.word	0x40020c00
 8002000:	40021000 	.word	0x40021000
 8002004:	40021c00 	.word	0x40021c00
 8002008:	0800f7f0 	.word	0x0800f7f0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800200c:	2201      	movs	r2, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	429a      	cmp	r2, r3
 8002026:	f040 81ec 	bne.w	8002402 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d005      	beq.n	8002042 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203e:	2b02      	cmp	r3, #2
 8002040:	d144      	bne.n	80020cc <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00f      	beq.n	800206a <HAL_GPIO_Init+0x162>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d00b      	beq.n	800206a <HAL_GPIO_Init+0x162>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x162>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x162>
 8002062:	21c0      	movs	r1, #192	; 0xc0
 8002064:	4884      	ldr	r0, [pc, #528]	; (8002278 <HAL_GPIO_Init+0x370>)
 8002066:	f7fe fed8 	bl	8000e1a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 0201 	and.w	r2, r3, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d027      	beq.n	8002128 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00b      	beq.n	80020f8 <HAL_GPIO_Init+0x1f0>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d007      	beq.n	80020f8 <HAL_GPIO_Init+0x1f0>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x1f0>
 80020f0:	21d1      	movs	r1, #209	; 0xd1
 80020f2:	4861      	ldr	r0, [pc, #388]	; (8002278 <HAL_GPIO_Init+0x370>)
 80020f4:	f7fe fe91 	bl	8000e1a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	f040 80a3 	bne.w	800227c <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d077      	beq.n	800222e <HAL_GPIO_Init+0x326>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b09      	cmp	r3, #9
 8002144:	d073      	beq.n	800222e <HAL_GPIO_Init+0x326>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d06f      	beq.n	800222e <HAL_GPIO_Init+0x326>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d06b      	beq.n	800222e <HAL_GPIO_Init+0x326>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d067      	beq.n	800222e <HAL_GPIO_Init+0x326>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d063      	beq.n	800222e <HAL_GPIO_Init+0x326>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d05f      	beq.n	800222e <HAL_GPIO_Init+0x326>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d05b      	beq.n	800222e <HAL_GPIO_Init+0x326>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d057      	beq.n	800222e <HAL_GPIO_Init+0x326>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d053      	beq.n	800222e <HAL_GPIO_Init+0x326>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d04f      	beq.n	800222e <HAL_GPIO_Init+0x326>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d04b      	beq.n	800222e <HAL_GPIO_Init+0x326>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d047      	beq.n	800222e <HAL_GPIO_Init+0x326>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d043      	beq.n	800222e <HAL_GPIO_Init+0x326>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d03f      	beq.n	800222e <HAL_GPIO_Init+0x326>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b05      	cmp	r3, #5
 80021b4:	d03b      	beq.n	800222e <HAL_GPIO_Init+0x326>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d037      	beq.n	800222e <HAL_GPIO_Init+0x326>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d033      	beq.n	800222e <HAL_GPIO_Init+0x326>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d02f      	beq.n	800222e <HAL_GPIO_Init+0x326>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d02b      	beq.n	800222e <HAL_GPIO_Init+0x326>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d027      	beq.n	800222e <HAL_GPIO_Init+0x326>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b07      	cmp	r3, #7
 80021e4:	d023      	beq.n	800222e <HAL_GPIO_Init+0x326>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b07      	cmp	r3, #7
 80021ec:	d01f      	beq.n	800222e <HAL_GPIO_Init+0x326>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b07      	cmp	r3, #7
 80021f4:	d01b      	beq.n	800222e <HAL_GPIO_Init+0x326>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d017      	beq.n	800222e <HAL_GPIO_Init+0x326>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b0a      	cmp	r3, #10
 8002204:	d013      	beq.n	800222e <HAL_GPIO_Init+0x326>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b09      	cmp	r3, #9
 800220c:	d00f      	beq.n	800222e <HAL_GPIO_Init+0x326>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b09      	cmp	r3, #9
 8002214:	d00b      	beq.n	800222e <HAL_GPIO_Init+0x326>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d007      	beq.n	800222e <HAL_GPIO_Init+0x326>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b0f      	cmp	r3, #15
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x326>
 8002226:	21de      	movs	r1, #222	; 0xde
 8002228:	4813      	ldr	r0, [pc, #76]	; (8002278 <HAL_GPIO_Init+0x370>)
 800222a:	f7fe fdf6 	bl	8000e1a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	08da      	lsrs	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3208      	adds	r2, #8
 8002236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	69b9      	ldr	r1, [r7, #24]
 8002272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002276:	e001      	b.n	800227c <HAL_GPIO_Init+0x374>
 8002278:	0800f7f0 	.word	0x0800f7f0
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a2 	beq.w	8002402 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b56      	ldr	r3, [pc, #344]	; (800241c <HAL_GPIO_Init+0x514>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	4a55      	ldr	r2, [pc, #340]	; (800241c <HAL_GPIO_Init+0x514>)
 80022c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022cc:	6453      	str	r3, [r2, #68]	; 0x44
 80022ce:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_GPIO_Init+0x514>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022da:	4a51      	ldr	r2, [pc, #324]	; (8002420 <HAL_GPIO_Init+0x518>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	220f      	movs	r2, #15
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a48      	ldr	r2, [pc, #288]	; (8002424 <HAL_GPIO_Init+0x51c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d019      	beq.n	800233a <HAL_GPIO_Init+0x432>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a47      	ldr	r2, [pc, #284]	; (8002428 <HAL_GPIO_Init+0x520>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0x42e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a46      	ldr	r2, [pc, #280]	; (800242c <HAL_GPIO_Init+0x524>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00d      	beq.n	8002332 <HAL_GPIO_Init+0x42a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a45      	ldr	r2, [pc, #276]	; (8002430 <HAL_GPIO_Init+0x528>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <HAL_GPIO_Init+0x426>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a44      	ldr	r2, [pc, #272]	; (8002434 <HAL_GPIO_Init+0x52c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_GPIO_Init+0x422>
 8002326:	2304      	movs	r3, #4
 8002328:	e008      	b.n	800233c <HAL_GPIO_Init+0x434>
 800232a:	2307      	movs	r3, #7
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x434>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x434>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x434>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x434>
 800233a:	2300      	movs	r3, #0
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	f002 0203 	and.w	r2, r2, #3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234c:	4934      	ldr	r1, [pc, #208]	; (8002420 <HAL_GPIO_Init+0x518>)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_GPIO_Init+0x530>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237e:	4a2e      	ldr	r2, [pc, #184]	; (8002438 <HAL_GPIO_Init+0x530>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002384:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_GPIO_Init+0x530>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a8:	4a23      	ldr	r2, [pc, #140]	; (8002438 <HAL_GPIO_Init+0x530>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_GPIO_Init+0x530>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d2:	4a19      	ldr	r2, [pc, #100]	; (8002438 <HAL_GPIO_Init+0x530>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_GPIO_Init+0x530>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <HAL_GPIO_Init+0x530>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	f67f adfe 	bls.w	800200c <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40013800 	.word	0x40013800
 8002424:	40020000 	.word	0x40020000
 8002428:	40020400 	.word	0x40020400
 800242c:	40020800 	.word	0x40020800
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40021000 	.word	0x40021000
 8002438:	40013c00 	.word	0x40013c00

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800244c:	887b      	ldrh	r3, [r7, #2]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <HAL_GPIO_WritePin+0x20>
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <HAL_GPIO_WritePin+0x2a>
 800245c:	f240 119d 	movw	r1, #413	; 0x19d
 8002460:	480e      	ldr	r0, [pc, #56]	; (800249c <HAL_GPIO_WritePin+0x60>)
 8002462:	f7fe fcda 	bl	8000e1a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002466:	787b      	ldrb	r3, [r7, #1]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_GPIO_WritePin+0x40>
 800246c:	787b      	ldrb	r3, [r7, #1]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d004      	beq.n	800247c <HAL_GPIO_WritePin+0x40>
 8002472:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002476:	4809      	ldr	r0, [pc, #36]	; (800249c <HAL_GPIO_WritePin+0x60>)
 8002478:	f7fe fccf 	bl	8000e1a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002488:	e003      	b.n	8002492 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	041a      	lsls	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	619a      	str	r2, [r3, #24]
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	0800f7f0 	.word	0x0800f7f0

080024a0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d004      	beq.n	80024bc <HAL_GPIO_TogglePin+0x1c>
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	041b      	lsls	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d004      	beq.n	80024c6 <HAL_GPIO_TogglePin+0x26>
 80024bc:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80024c0:	480a      	ldr	r0, [pc, #40]	; (80024ec <HAL_GPIO_TogglePin+0x4c>)
 80024c2:	f7fe fcaa 	bl	8000e1a <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024cc:	887a      	ldrh	r2, [r7, #2]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	041a      	lsls	r2, r3, #16
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	400b      	ands	r3, r1
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	0800f7f0 	.word	0x0800f7f0

080024f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f93e 	bl	8001790 <HAL_GPIO_EXTI_Callback>
  }
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40013c00 	.word	0x40013c00

08002520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1bd      	b.n	80028ae <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a93      	ldr	r2, [pc, #588]	; (8002784 <HAL_I2C_Init+0x264>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00e      	beq.n	800255a <HAL_I2C_Init+0x3a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a91      	ldr	r2, [pc, #580]	; (8002788 <HAL_I2C_Init+0x268>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d009      	beq.n	800255a <HAL_I2C_Init+0x3a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a90      	ldr	r2, [pc, #576]	; (800278c <HAL_I2C_Init+0x26c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d004      	beq.n	800255a <HAL_I2C_Init+0x3a>
 8002550:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002554:	488e      	ldr	r0, [pc, #568]	; (8002790 <HAL_I2C_Init+0x270>)
 8002556:	f7fe fc60 	bl	8000e1a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <HAL_I2C_Init+0x4c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a8b      	ldr	r2, [pc, #556]	; (8002794 <HAL_I2C_Init+0x274>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d904      	bls.n	8002576 <HAL_I2C_Init+0x56>
 800256c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002570:	4887      	ldr	r0, [pc, #540]	; (8002790 <HAL_I2C_Init+0x270>)
 8002572:	f7fe fc52 	bl	8000e1a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_I2C_Init+0x72>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002586:	d004      	beq.n	8002592 <HAL_I2C_Init+0x72>
 8002588:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800258c:	4880      	ldr	r0, [pc, #512]	; (8002790 <HAL_I2C_Init+0x270>)
 800258e:	f7fe fc44 	bl	8000e1a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <HAL_I2C_Init+0x8c>
 80025a2:	f240 11c1 	movw	r1, #449	; 0x1c1
 80025a6:	487a      	ldr	r0, [pc, #488]	; (8002790 <HAL_I2C_Init+0x270>)
 80025a8:	f7fe fc37 	bl	8000e1a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025b4:	d009      	beq.n	80025ca <HAL_I2C_Init+0xaa>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80025be:	d004      	beq.n	80025ca <HAL_I2C_Init+0xaa>
 80025c0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80025c4:	4872      	ldr	r0, [pc, #456]	; (8002790 <HAL_I2C_Init+0x270>)
 80025c6:	f7fe fc28 	bl	8000e1a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <HAL_I2C_Init+0xc4>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d004      	beq.n	80025e4 <HAL_I2C_Init+0xc4>
 80025da:	f240 11c3 	movw	r1, #451	; 0x1c3
 80025de:	486c      	ldr	r0, [pc, #432]	; (8002790 <HAL_I2C_Init+0x270>)
 80025e0:	f7fe fc1b 	bl	8000e1a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <HAL_I2C_Init+0xda>
 80025f0:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80025f4:	4866      	ldr	r0, [pc, #408]	; (8002790 <HAL_I2C_Init+0x270>)
 80025f6:	f7fe fc10 	bl	8000e1a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_I2C_Init+0xf4>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	d004      	beq.n	8002614 <HAL_I2C_Init+0xf4>
 800260a:	f240 11c5 	movw	r1, #453	; 0x1c5
 800260e:	4860      	ldr	r0, [pc, #384]	; (8002790 <HAL_I2C_Init+0x270>)
 8002610:	f7fe fc03 	bl	8000e1a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_I2C_Init+0x10e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	2b80      	cmp	r3, #128	; 0x80
 8002622:	d004      	beq.n	800262e <HAL_I2C_Init+0x10e>
 8002624:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002628:	4859      	ldr	r0, [pc, #356]	; (8002790 <HAL_I2C_Init+0x270>)
 800262a:	f7fe fbf6 	bl	8000e1a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe fa8c 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800266e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800267e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002680:	f002 fd7c 	bl	800517c <HAL_RCC_GetPCLK1Freq>
 8002684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a43      	ldr	r2, [pc, #268]	; (8002798 <HAL_I2C_Init+0x278>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d807      	bhi.n	80026a0 <HAL_I2C_Init+0x180>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a42      	ldr	r2, [pc, #264]	; (800279c <HAL_I2C_Init+0x27c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	bf94      	ite	ls
 8002698:	2301      	movls	r3, #1
 800269a:	2300      	movhi	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e006      	b.n	80026ae <HAL_I2C_Init+0x18e>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a3f      	ldr	r2, [pc, #252]	; (80027a0 <HAL_I2C_Init+0x280>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bf94      	ite	ls
 80026a8:	2301      	movls	r3, #1
 80026aa:	2300      	movhi	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0fb      	b.n	80028ae <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4a3a      	ldr	r2, [pc, #232]	; (80027a4 <HAL_I2C_Init+0x284>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0c9b      	lsrs	r3, r3, #18
 80026c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a2c      	ldr	r2, [pc, #176]	; (8002798 <HAL_I2C_Init+0x278>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d802      	bhi.n	80026f0 <HAL_I2C_Init+0x1d0>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3301      	adds	r3, #1
 80026ee:	e009      	b.n	8002704 <HAL_I2C_Init+0x1e4>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4a2b      	ldr	r2, [pc, #172]	; (80027a8 <HAL_I2C_Init+0x288>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	099b      	lsrs	r3, r3, #6
 8002702:	3301      	adds	r3, #1
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	430b      	orrs	r3, r1
 800270a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002716:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	491e      	ldr	r1, [pc, #120]	; (8002798 <HAL_I2C_Init+0x278>)
 8002720:	428b      	cmp	r3, r1
 8002722:	d819      	bhi.n	8002758 <HAL_I2C_Init+0x238>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e59      	subs	r1, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002732:	1c59      	adds	r1, r3, #1
 8002734:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002738:	400b      	ands	r3, r1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_I2C_Init+0x234>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1e59      	subs	r1, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fbb1 f3f3 	udiv	r3, r1, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002752:	e065      	b.n	8002820 <HAL_I2C_Init+0x300>
 8002754:	2304      	movs	r3, #4
 8002756:	e063      	b.n	8002820 <HAL_I2C_Init+0x300>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d125      	bne.n	80027ac <HAL_I2C_Init+0x28c>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	440b      	add	r3, r1
 800276e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002772:	3301      	adds	r3, #1
 8002774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e026      	b.n	80027d2 <HAL_I2C_Init+0x2b2>
 8002784:	40005400 	.word	0x40005400
 8002788:	40005800 	.word	0x40005800
 800278c:	40005c00 	.word	0x40005c00
 8002790:	0800f82c 	.word	0x0800f82c
 8002794:	00061a80 	.word	0x00061a80
 8002798:	000186a0 	.word	0x000186a0
 800279c:	001e847f 	.word	0x001e847f
 80027a0:	003d08ff 	.word	0x003d08ff
 80027a4:	431bde83 	.word	0x431bde83
 80027a8:	10624dd3 	.word	0x10624dd3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1e58      	subs	r0, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	0099      	lsls	r1, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Init+0x2ba>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e022      	b.n	8002820 <HAL_I2C_Init+0x300>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10e      	bne.n	8002800 <HAL_I2C_Init+0x2e0>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1e58      	subs	r0, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	440b      	add	r3, r1
 80027f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f4:	3301      	adds	r3, #1
 80027f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fe:	e00f      	b.n	8002820 <HAL_I2C_Init+0x300>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1e58      	subs	r0, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	0099      	lsls	r1, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	fbb0 f3f3 	udiv	r3, r0, r3
 8002816:	3301      	adds	r3, #1
 8002818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800281c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	6809      	ldr	r1, [r1, #0]
 8002824:	4313      	orrs	r3, r2
 8002826:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800284e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6911      	ldr	r1, [r2, #16]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68d2      	ldr	r2, [r2, #12]
 800285a:	4311      	orrs	r1, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	430b      	orrs	r3, r1
 8002862:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop

080028b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	4608      	mov	r0, r1
 80028c2:	4611      	mov	r1, r2
 80028c4:	461a      	mov	r2, r3
 80028c6:	4603      	mov	r3, r0
 80028c8:	817b      	strh	r3, [r7, #10]
 80028ca:	460b      	mov	r3, r1
 80028cc:	813b      	strh	r3, [r7, #8]
 80028ce:	4613      	mov	r3, r2
 80028d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d2:	f7ff f9d7 	bl	8001c84 <HAL_GetTick>
 80028d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d007      	beq.n	80028ee <HAL_I2C_Mem_Write+0x36>
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d004      	beq.n	80028ee <HAL_I2C_Mem_Write+0x36>
 80028e4:	f640 11b9 	movw	r1, #2489	; 0x9b9
 80028e8:	4873      	ldr	r0, [pc, #460]	; (8002ab8 <HAL_I2C_Mem_Write+0x200>)
 80028ea:	f7fe fa96 	bl	8000e1a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	f040 80d9 	bne.w	8002aae <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2319      	movs	r3, #25
 8002902:	2201      	movs	r2, #1
 8002904:	496d      	ldr	r1, [pc, #436]	; (8002abc <HAL_I2C_Mem_Write+0x204>)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 faa0 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
 8002914:	e0cc      	b.n	8002ab0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_I2C_Mem_Write+0x6c>
 8002920:	2302      	movs	r3, #2
 8002922:	e0c5      	b.n	8002ab0 <HAL_I2C_Mem_Write+0x1f8>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d007      	beq.n	800294a <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002958:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2221      	movs	r2, #33	; 0x21
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2240      	movs	r2, #64	; 0x40
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a3a      	ldr	r2, [r7, #32]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a4d      	ldr	r2, [pc, #308]	; (8002ac0 <HAL_I2C_Mem_Write+0x208>)
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800298c:	88f8      	ldrh	r0, [r7, #6]
 800298e:	893a      	ldrh	r2, [r7, #8]
 8002990:	8979      	ldrh	r1, [r7, #10]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	4603      	mov	r3, r0
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f9bf 	bl	8002d20 <I2C_RequestMemoryWrite>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d052      	beq.n	8002a4e <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e081      	b.n	8002ab0 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fb21 	bl	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d107      	bne.n	80029d4 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e06b      	b.n	8002ab0 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d11b      	bne.n	8002a4e <HAL_I2C_Mem_Write+0x196>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d017      	beq.n	8002a4e <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	781a      	ldrb	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1aa      	bne.n	80029ac <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fb0d 	bl	800307a <I2C_WaitOnBTFFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00d      	beq.n	8002a82 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d107      	bne.n	8002a7e <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e016      	b.n	8002ab0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
  }
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	0800f82c 	.word	0x0800f82c
 8002abc:	00100002 	.word	0x00100002
 8002ac0:	ffff0000 	.word	0xffff0000

08002ac4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff f8d6 	bl	8001c84 <HAL_GetTick>
 8002ad8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	f040 8111 	bne.w	8002d0e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2319      	movs	r3, #25
 8002af2:	2201      	movs	r2, #1
 8002af4:	4988      	ldr	r1, [pc, #544]	; (8002d18 <HAL_I2C_IsDeviceReady+0x254>)
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f9a8 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
 8002b04:	e104      	b.n	8002d10 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_I2C_IsDeviceReady+0x50>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e0fd      	b.n	8002d10 <HAL_I2C_IsDeviceReady+0x24c>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d007      	beq.n	8002b3a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2224      	movs	r2, #36	; 0x24
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a70      	ldr	r2, [pc, #448]	; (8002d1c <HAL_I2C_IsDeviceReady+0x258>)
 8002b5c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f966 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b94:	d103      	bne.n	8002b9e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e0b6      	b.n	8002d10 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ba2:	897b      	ldrh	r3, [r7, #10]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bb0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7ff f867 	bl	8001c84 <HAL_GetTick>
 8002bb6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bdc:	bf0c      	ite	eq
 8002bde:	2301      	moveq	r3, #1
 8002be0:	2300      	movne	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002be6:	e025      	b.n	8002c34 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002be8:	f7ff f84c 	bl	8001c84 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d302      	bcc.n	8002bfe <HAL_I2C_IsDeviceReady+0x13a>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	22a0      	movs	r2, #160	; 0xa0
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2ba0      	cmp	r3, #160	; 0xa0
 8002c3e:	d005      	beq.n	8002c4c <HAL_I2C_IsDeviceReady+0x188>
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <HAL_I2C_IsDeviceReady+0x188>
 8002c46:	7dbb      	ldrb	r3, [r7, #22]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0cd      	beq.n	8002be8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d129      	bne.n	8002cb6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c70:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2319      	movs	r3, #25
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4921      	ldr	r1, [pc, #132]	; (8002d18 <HAL_I2C_IsDeviceReady+0x254>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f8da 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e036      	b.n	8002d10 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e02c      	b.n	8002d10 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2319      	movs	r3, #25
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	490f      	ldr	r1, [pc, #60]	; (8002d18 <HAL_I2C_IsDeviceReady+0x254>)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f8b6 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e012      	b.n	8002d10 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	3301      	adds	r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	f4ff af32 	bcc.w	8002b5e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3720      	adds	r7, #32
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	00100002 	.word	0x00100002
 8002d1c:	ffff0000 	.word	0xffff0000

08002d20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	817b      	strh	r3, [r7, #10]
 8002d32:	460b      	mov	r3, r1
 8002d34:	813b      	strh	r3, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f878 	bl	8002e4c <I2C_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00d      	beq.n	8002d7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d70:	d103      	bne.n	8002d7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e05f      	b.n	8002e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d7e:	897b      	ldrh	r3, [r7, #10]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	492d      	ldr	r1, [pc, #180]	; (8002e48 <I2C_RequestMemoryWrite+0x128>)
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f8b0 	bl	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e04c      	b.n	8002e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f91a 	bl	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d107      	bne.n	8002de2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e02b      	b.n	8002e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d105      	bne.n	8002df8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dec:	893b      	ldrh	r3, [r7, #8]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	611a      	str	r2, [r3, #16]
 8002df6:	e021      	b.n	8002e3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002df8:	893b      	ldrh	r3, [r7, #8]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f8f4 	bl	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d107      	bne.n	8002e2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e005      	b.n	8002e3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e32:	893b      	ldrh	r3, [r7, #8]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	00010002 	.word	0x00010002

08002e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e5c:	e025      	b.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d021      	beq.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe ff0d 	bl	8001c84 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d116      	bne.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e023      	b.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10d      	bne.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	e00c      	b.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4013      	ands	r3, r2
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d0b6      	beq.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f08:	e051      	b.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f18:	d123      	bne.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f043 0204 	orr.w	r2, r3, #4
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e046      	b.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d021      	beq.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6a:	f7fe fe8b 	bl	8001c84 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d116      	bne.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e020      	b.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10c      	bne.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf14      	ite	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	2300      	moveq	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	e00b      	b.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	43da      	mvns	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d18d      	bne.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003004:	e02d      	b.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f878 	bl	80030fc <I2C_IsAcknowledgeFailed>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e02d      	b.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d021      	beq.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301e:	f7fe fe31 	bl	8001c84 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	d302      	bcc.n	8003034 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d116      	bne.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f043 0220 	orr.w	r2, r3, #32
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e007      	b.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306c:	2b80      	cmp	r3, #128	; 0x80
 800306e:	d1ca      	bne.n	8003006 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003086:	e02d      	b.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f837 	bl	80030fc <I2C_IsAcknowledgeFailed>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e02d      	b.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d021      	beq.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a0:	f7fe fdf0 	bl	8001c84 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d302      	bcc.n	80030b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e007      	b.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d1ca      	bne.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003112:	d11b      	bne.n	800314c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800311c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f043 0204 	orr.w	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800315c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800315e:	b08f      	sub	sp, #60	; 0x3c
 8003160:	af0a      	add	r7, sp, #40	; 0x28
 8003162:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e118      	b.n	80033a0 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003176:	d003      	beq.n	8003180 <HAL_PCD_Init+0x24>
 8003178:	2187      	movs	r1, #135	; 0x87
 800317a:	488b      	ldr	r0, [pc, #556]	; (80033a8 <HAL_PCD_Init+0x24c>)
 800317c:	f7fd fe4d 	bl	8000e1a <assert_failed>

  USBx = hpcd->Instance;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f00b fa8e 	bl	800e6bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2203      	movs	r2, #3
 80031a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f004 fd45 	bl	8007c4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	687e      	ldr	r6, [r7, #4]
 80031cc:	466d      	mov	r5, sp
 80031ce:	f106 0410 	add.w	r4, r6, #16
 80031d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031de:	e885 0003 	stmia.w	r5, {r0, r1}
 80031e2:	1d33      	adds	r3, r6, #4
 80031e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031e6:	6838      	ldr	r0, [r7, #0]
 80031e8:	f004 fc1c 	bl	8007a24 <USB_CoreInit>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0d0      	b.n	80033a0 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f004 fd33 	bl	8007c70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	e04a      	b.n	80032a6 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	333d      	adds	r3, #61	; 0x3d
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	333c      	adds	r3, #60	; 0x3c
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	b298      	uxth	r0, r3
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3344      	adds	r3, #68	; 0x44
 800324c:	4602      	mov	r2, r0
 800324e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3340      	adds	r3, #64	; 0x40
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3348      	adds	r3, #72	; 0x48
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	334c      	adds	r3, #76	; 0x4c
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3354      	adds	r3, #84	; 0x54
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	3301      	adds	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d3af      	bcc.n	8003210 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	73fb      	strb	r3, [r7, #15]
 80032b4:	e044      	b.n	8003340 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	3301      	adds	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d3b5      	bcc.n	80032b6 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	687e      	ldr	r6, [r7, #4]
 8003352:	466d      	mov	r5, sp
 8003354:	f106 0410 	add.w	r4, r6, #16
 8003358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800335c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003360:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003364:	e885 0003 	stmia.w	r5, {r0, r1}
 8003368:	1d33      	adds	r3, r6, #4
 800336a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800336c:	6838      	ldr	r0, [r7, #0]
 800336e:	f004 fccb 	bl	8007d08 <USB_DevInit>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e00d      	b.n	80033a0 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f005 fe1a 	bl	8008fd2 <USB_DevDisconnect>

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a8:	0800f864 	.word	0x0800f864

080033ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_PCD_Start+0x1c>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e020      	b.n	800340a <HAL_PCD_Start+0x5e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d109      	bne.n	80033ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d005      	beq.n	80033ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 fc1b 	bl	8007c2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f005 fdc8 	bl	8008f90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003412:	b590      	push	{r4, r7, lr}
 8003414:	b08d      	sub	sp, #52	; 0x34
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f005 fe86 	bl	800913a <USB_GetMode>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 848a 	bne.w	8003d4a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f005 fdea 	bl	8009014 <USB_ReadInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8480 	beq.w	8003d48 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	0a1b      	lsrs	r3, r3, #8
 8003452:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f005 fdd7 	bl	8009014 <USB_ReadInterrupts>
 8003466:	4603      	mov	r3, r0
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b02      	cmp	r3, #2
 800346e:	d107      	bne.n	8003480 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f002 0202 	and.w	r2, r2, #2
 800347e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f005 fdc5 	bl	8009014 <USB_ReadInterrupts>
 800348a:	4603      	mov	r3, r0
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b10      	cmp	r3, #16
 8003492:	d161      	bne.n	8003558 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0210 	bic.w	r2, r2, #16
 80034a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f003 020f 	and.w	r2, r3, #15
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	3304      	adds	r3, #4
 80034c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	0c5b      	lsrs	r3, r3, #17
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d124      	bne.n	800351a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d035      	beq.n	8003548 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	6a38      	ldr	r0, [r7, #32]
 80034f0:	f005 fbfc 	bl	8008cec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003500:	441a      	add	r2, r3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	6a1a      	ldr	r2, [r3, #32]
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003512:	441a      	add	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	621a      	str	r2, [r3, #32]
 8003518:	e016      	b.n	8003548 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	0c5b      	lsrs	r3, r3, #17
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	2b06      	cmp	r3, #6
 8003524:	d110      	bne.n	8003548 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800352c:	2208      	movs	r2, #8
 800352e:	4619      	mov	r1, r3
 8003530:	6a38      	ldr	r0, [r7, #32]
 8003532:	f005 fbdb 	bl	8008cec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003542:	441a      	add	r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0210 	orr.w	r2, r2, #16
 8003556:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f005 fd59 	bl	8009014 <USB_ReadInterrupts>
 8003562:	4603      	mov	r3, r0
 8003564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003568:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800356c:	f040 80a7 	bne.w	80036be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f005 fd5e 	bl	800903a <USB_ReadDevAllOutEpInterrupt>
 800357e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003580:	e099      	b.n	80036b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 808e 	beq.w	80036aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	4611      	mov	r1, r2
 8003598:	4618      	mov	r0, r3
 800359a:	f005 fd82 	bl	80090a2 <USB_ReadDevOutEPInterrupt>
 800359e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00c      	beq.n	80035c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b6:	461a      	mov	r2, r3
 80035b8:	2301      	movs	r3, #1
 80035ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fec2 	bl	8004348 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035da:	461a      	mov	r2, r3
 80035dc:	2308      	movs	r3, #8
 80035de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 ff98 	bl	8004518 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fe:	461a      	mov	r2, r3
 8003600:	2310      	movs	r3, #16
 8003602:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d030      	beq.n	8003670 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d109      	bne.n	800362e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800362c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	3304      	adds	r3, #4
 8003642:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	78db      	ldrb	r3, [r3, #3]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d108      	bne.n	800365e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2200      	movs	r2, #0
 8003650:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	b2db      	uxtb	r3, r3
 8003656:	4619      	mov	r1, r3
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f00b f92b 	bl	800e8b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366a:	461a      	mov	r2, r3
 800366c:	2302      	movs	r3, #2
 800366e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003686:	461a      	mov	r2, r3
 8003688:	2320      	movs	r3, #32
 800368a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a2:	461a      	mov	r2, r3
 80036a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	3301      	adds	r3, #1
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f47f af62 	bne.w	8003582 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f005 fca6 	bl	8009014 <USB_ReadInterrupts>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036d2:	f040 80db 	bne.w	800388c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 fcc7 	bl	800906e <USB_ReadDevAllInEpInterrupt>
 80036e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036e6:	e0cd      	b.n	8003884 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80c2 	beq.w	8003878 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f005 fced 	bl	80090de <USB_ReadDevInEPInterrupt>
 8003704:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d057      	beq.n	80037c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	2201      	movs	r2, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	43db      	mvns	r3, r3
 800372a:	69f9      	ldr	r1, [r7, #28]
 800372c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003730:	4013      	ands	r3, r2
 8003732:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003740:	461a      	mov	r2, r3
 8003742:	2301      	movs	r3, #1
 8003744:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d132      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	334c      	adds	r3, #76	; 0x4c
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4403      	add	r3, r0
 800376e:	3348      	adds	r3, #72	; 0x48
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4419      	add	r1, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4403      	add	r3, r0
 8003782:	334c      	adds	r3, #76	; 0x4c
 8003784:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	d113      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x3a2>
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3354      	adds	r3, #84	; 0x54
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d108      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037ac:	461a      	mov	r2, r3
 80037ae:	2101      	movs	r1, #1
 80037b0:	f005 fcf4 	bl	800919c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4619      	mov	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f00a ffff 	bl	800e7be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d6:	461a      	mov	r2, r3
 80037d8:	2308      	movs	r3, #8
 80037da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f2:	461a      	mov	r2, r3
 80037f4:	2310      	movs	r3, #16
 80037f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380e:	461a      	mov	r2, r3
 8003810:	2340      	movs	r3, #64	; 0x40
 8003812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d023      	beq.n	8003866 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800381e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003820:	6a38      	ldr	r0, [r7, #32]
 8003822:	f004 fbd5 	bl	8007fd0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	3338      	adds	r3, #56	; 0x38
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	3304      	adds	r3, #4
 8003838:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	78db      	ldrb	r3, [r3, #3]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d108      	bne.n	8003854 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	b2db      	uxtb	r3, r3
 800384c:	4619      	mov	r1, r3
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f00b f842 	bl	800e8d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003860:	461a      	mov	r2, r3
 8003862:	2302      	movs	r3, #2
 8003864:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fcdb 	bl	800422e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	3301      	adds	r3, #1
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	2b00      	cmp	r3, #0
 8003888:	f47f af2e 	bne.w	80036e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f005 fbbf 	bl	8009014 <USB_ReadInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800389c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038a0:	d122      	bne.n	80038e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d108      	bne.n	80038d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038c8:	2100      	movs	r1, #0
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fec2 	bl	8004654 <HAL_PCDEx_LPM_Callback>
 80038d0:	e002      	b.n	80038d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f00a ffe0 	bl	800e898 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80038e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f005 fb91 	bl	8009014 <USB_ReadInterrupts>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fc:	d112      	bne.n	8003924 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b01      	cmp	r3, #1
 800390c:	d102      	bne.n	8003914 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f00a ff9c 	bl	800e84c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003922:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f005 fb73 	bl	8009014 <USB_ReadInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003938:	f040 80b7 	bne.w	8003aaa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2110      	movs	r1, #16
 8003956:	4618      	mov	r0, r3
 8003958:	f004 fb3a 	bl	8007fd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395c:	2300      	movs	r3, #0
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003960:	e046      	b.n	80039f0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396e:	461a      	mov	r2, r3
 8003970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003974:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003986:	0151      	lsls	r1, r2, #5
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	440a      	add	r2, r1
 800398c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003990:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003994:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a2:	461a      	mov	r2, r3
 80039a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ba:	0151      	lsls	r1, r2, #5
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	440a      	add	r2, r1
 80039c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039da:	0151      	lsls	r1, r2, #5
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	440a      	add	r2, r1
 80039e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	3301      	adds	r3, #1
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d3b3      	bcc.n	8003962 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a08:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d016      	beq.n	8003a44 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a26:	f043 030b 	orr.w	r3, r3, #11
 8003a2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3c:	f043 030b 	orr.w	r3, r3, #11
 8003a40:	6453      	str	r3, [r2, #68]	; 0x44
 8003a42:	e015      	b.n	8003a70 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a56:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a6a:	f043 030b 	orr.w	r3, r3, #11
 8003a6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a94:	461a      	mov	r2, r3
 8003a96:	f005 fb81 	bl	800919c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f005 fab0 	bl	8009014 <USB_ReadInterrupts>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abe:	d124      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f005 fb46 	bl	8009156 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f004 fafb 	bl	80080ca <USB_GetDevSpeed>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681c      	ldr	r4, [r3, #0]
 8003ae0:	f001 fb40 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 8003ae4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	4620      	mov	r0, r4
 8003af0:	f003 fffa 	bl	8007ae8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f00a fe8a 	bl	800e80e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f005 fa80 	bl	8009014 <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d10a      	bne.n	8003b34 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f00a fe67 	bl	800e7f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f002 0208 	and.w	r2, r2, #8
 8003b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f005 fa6b 	bl	8009014 <USB_ReadInterrupts>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b44:	2b80      	cmp	r3, #128	; 0x80
 8003b46:	d122      	bne.n	8003b8e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b54:	2301      	movs	r3, #1
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	e014      	b.n	8003b84 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d105      	bne.n	8003b7e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	4619      	mov	r1, r3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fb27 	bl	80041cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	3301      	adds	r3, #1
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d3e5      	bcc.n	8003b5a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f005 fa3e 	bl	8009014 <USB_ReadInterrupts>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba2:	d13b      	bne.n	8003c1c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba8:	e02b      	b.n	8003c02 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3340      	adds	r3, #64	; 0x40
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d115      	bne.n	8003bfc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bd0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	da12      	bge.n	8003bfc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bda:	4613      	mov	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	333f      	adds	r3, #63	; 0x3f
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fae8 	bl	80041cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	3301      	adds	r3, #1
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d3ce      	bcc.n	8003baa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f005 f9f7 	bl	8009014 <USB_ReadInterrupts>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c30:	d155      	bne.n	8003cde <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c32:	2301      	movs	r3, #1
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
 8003c36:	e045      	b.n	8003cc4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d12e      	bne.n	8003cbe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	da2b      	bge.n	8003cbe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d121      	bne.n	8003cbe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cba:	6053      	str	r3, [r2, #4]
            break;
 8003cbc:	e007      	b.n	8003cce <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d3b4      	bcc.n	8003c38 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f005 f996 	bl	8009014 <USB_ReadInterrupts>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf2:	d10a      	bne.n	8003d0a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f00a fe01 	bl	800e8fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f005 f980 	bl	8009014 <USB_ReadInterrupts>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d115      	bne.n	8003d4a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f00a fdf1 	bl	800e918 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	e000      	b.n	8003d4a <HAL_PCD_IRQHandler+0x938>
      return;
 8003d48:	bf00      	nop
    }
  }
}
 8003d4a:	3734      	adds	r7, #52	; 0x34
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd90      	pop	{r4, r7, pc}

08003d50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_PCD_SetAddress+0x1a>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e013      	b.n	8003d92 <HAL_PCD_SetAddress+0x42>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	78fa      	ldrb	r2, [r7, #3]
 8003d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f005 f8de 	bl	8008f44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	4608      	mov	r0, r1
 8003da4:	4611      	mov	r1, r2
 8003da6:	461a      	mov	r2, r3
 8003da8:	4603      	mov	r3, r0
 8003daa:	70fb      	strb	r3, [r7, #3]
 8003dac:	460b      	mov	r3, r1
 8003dae:	803b      	strh	r3, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	da0f      	bge.n	8003de0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	f003 020f 	and.w	r2, r3, #15
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	3338      	adds	r3, #56	; 0x38
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	705a      	strb	r2, [r3, #1]
 8003dde:	e00f      	b.n	8003e00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	f003 020f 	and.w	r2, r3, #15
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4413      	add	r3, r2
 8003df6:	3304      	adds	r3, #4
 8003df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e0c:	883a      	ldrh	r2, [r7, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	78ba      	ldrb	r2, [r7, #2]
 8003e16:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	785b      	ldrb	r3, [r3, #1]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d004      	beq.n	8003e2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e2a:	78bb      	ldrb	r3, [r7, #2]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d102      	bne.n	8003e36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_PCD_EP_Open+0xaa>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e00e      	b.n	8003e62 <HAL_PCD_EP_Open+0xc8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68f9      	ldr	r1, [r7, #12]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f004 f95e 	bl	8008114 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e60:	7afb      	ldrb	r3, [r7, #11]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	460b      	mov	r3, r1
 8003e74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	da0f      	bge.n	8003e9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	f003 020f 	and.w	r2, r3, #15
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	3338      	adds	r3, #56	; 0x38
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	3304      	adds	r3, #4
 8003e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	705a      	strb	r2, [r3, #1]
 8003e9c:	e00f      	b.n	8003ebe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	f003 020f 	and.w	r2, r3, #15
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_PCD_EP_Close+0x6e>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e00e      	b.n	8003ef6 <HAL_PCD_EP_Close+0x8c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68f9      	ldr	r1, [r7, #12]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f004 f99c 	bl	8008224 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f0e:	7afb      	ldrb	r3, [r7, #11]
 8003f10:	f003 020f 	and.w	r2, r3, #15
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	3304      	adds	r3, #4
 8003f26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2200      	movs	r2, #0
 8003f38:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f40:	7afb      	ldrb	r3, [r7, #11]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d102      	bne.n	8003f5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6979      	ldr	r1, [r7, #20]
 8003f72:	f004 fc7b 	bl	800886c <USB_EP0StartXfer>
 8003f76:	e008      	b.n	8003f8a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	6979      	ldr	r1, [r7, #20]
 8003f86:	f004 fa29 	bl	80083dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd4:	7afb      	ldrb	r3, [r7, #11]
 8003fd6:	f003 020f 	and.w	r2, r3, #15
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	3338      	adds	r3, #56	; 0x38
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3304      	adds	r3, #4
 8003fea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2201      	movs	r2, #1
 8004002:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004004:	7afb      	ldrb	r3, [r7, #11]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	b2da      	uxtb	r2, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d102      	bne.n	800401e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800401e:	7afb      	ldrb	r3, [r7, #11]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	6979      	ldr	r1, [r7, #20]
 8004036:	f004 fc19 	bl	800886c <USB_EP0StartXfer>
 800403a:	e008      	b.n	800404e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	6979      	ldr	r1, [r7, #20]
 800404a:	f004 f9c7 	bl	80083dc <USB_EPStartXfer>
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	f003 020f 	and.w	r2, r3, #15
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	d901      	bls.n	8004076 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e050      	b.n	8004118 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800407a:	2b00      	cmp	r3, #0
 800407c:	da0f      	bge.n	800409e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	f003 020f 	and.w	r2, r3, #15
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	3338      	adds	r3, #56	; 0x38
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	3304      	adds	r3, #4
 8004094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	705a      	strb	r2, [r3, #1]
 800409c:	e00d      	b.n	80040ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	3304      	adds	r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_PCD_EP_SetStall+0x82>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e01e      	b.n	8004118 <HAL_PCD_EP_SetStall+0xc0>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f004 fe57 	bl	8008d9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	b2d9      	uxtb	r1, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004108:	461a      	mov	r2, r3
 800410a:	f005 f847 	bl	800919c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	f003 020f 	and.w	r2, r3, #15
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	429a      	cmp	r2, r3
 8004138:	d901      	bls.n	800413e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e042      	b.n	80041c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800413e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004142:	2b00      	cmp	r3, #0
 8004144:	da0f      	bge.n	8004166 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	f003 020f 	and.w	r2, r3, #15
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	3338      	adds	r3, #56	; 0x38
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	3304      	adds	r3, #4
 800415c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	705a      	strb	r2, [r3, #1]
 8004164:	e00f      	b.n	8004186 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	f003 020f 	and.w	r2, r3, #15
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	4413      	add	r3, r2
 800417c:	3304      	adds	r3, #4
 800417e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_PCD_EP_ClrStall+0x86>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e00e      	b.n	80041c4 <HAL_PCD_EP_ClrStall+0xa4>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f004 fe5f 	bl	8008e78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80041d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	da0c      	bge.n	80041fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	f003 020f 	and.w	r2, r3, #15
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	3338      	adds	r3, #56	; 0x38
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	3304      	adds	r3, #4
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e00c      	b.n	8004214 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 020f 	and.w	r2, r3, #15
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4413      	add	r3, r2
 8004210:	3304      	adds	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68f9      	ldr	r1, [r7, #12]
 800421a:	4618      	mov	r0, r3
 800421c:	f004 fc7e 	bl	8008b1c <USB_EPStopXfer>
 8004220:	4603      	mov	r3, r0
 8004222:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004224:	7afb      	ldrb	r3, [r7, #11]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b08a      	sub	sp, #40	; 0x28
 8004232:	af02      	add	r7, sp, #8
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	3338      	adds	r3, #56	; 0x38
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	4413      	add	r3, r2
 8004252:	3304      	adds	r3, #4
 8004254:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1a      	ldr	r2, [r3, #32]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	429a      	cmp	r2, r3
 8004260:	d901      	bls.n	8004266 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e06c      	b.n	8004340 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	429a      	cmp	r2, r3
 800427a:	d902      	bls.n	8004282 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3303      	adds	r3, #3
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800428a:	e02b      	b.n	80042e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d902      	bls.n	80042a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	3303      	adds	r3, #3
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6919      	ldr	r1, [r3, #16]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	4603      	mov	r3, r0
 80042c6:	6978      	ldr	r0, [r7, #20]
 80042c8:	f004 fcd2 	bl	8008c70 <USB_WritePacket>

    ep->xfer_buff  += len;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	441a      	add	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	441a      	add	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d809      	bhi.n	800430e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1a      	ldr	r2, [r3, #32]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004302:	429a      	cmp	r2, r3
 8004304:	d203      	bcs.n	800430e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1be      	bne.n	800428c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	429a      	cmp	r2, r3
 8004318:	d811      	bhi.n	800433e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	2201      	movs	r2, #1
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	43db      	mvns	r3, r3
 8004334:	6939      	ldr	r1, [r7, #16]
 8004336:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800433a:	4013      	ands	r3, r2
 800433c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	333c      	adds	r3, #60	; 0x3c
 8004360:	3304      	adds	r3, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d17b      	bne.n	8004476 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d015      	beq.n	80043b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4a61      	ldr	r2, [pc, #388]	; (8004510 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	f240 80b9 	bls.w	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80b3 	beq.w	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043aa:	461a      	mov	r2, r3
 80043ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b0:	6093      	str	r3, [r2, #8]
 80043b2:	e0a7      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	2320      	movs	r3, #32
 80043ce:	6093      	str	r3, [r2, #8]
 80043d0:	e098      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f040 8093 	bne.w	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4a4b      	ldr	r2, [pc, #300]	; (8004510 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d90f      	bls.n	8004406 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004402:	6093      	str	r3, [r2, #8]
 8004404:	e07e      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4413      	add	r3, r2
 8004418:	3304      	adds	r3, #4
 800441a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	0159      	lsls	r1, r3, #5
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	440b      	add	r3, r1
 8004428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004432:	1ad2      	subs	r2, r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d114      	bne.n	8004468 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004450:	461a      	mov	r2, r3
 8004452:	2101      	movs	r1, #1
 8004454:	f004 fea2 	bl	800919c <USB_EP0_OutStart>
 8004458:	e006      	b.n	8004468 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	441a      	add	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f00a f98a 	bl	800e788 <HAL_PCD_DataOutStageCallback>
 8004474:	e046      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4a26      	ldr	r2, [pc, #152]	; (8004514 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d124      	bne.n	80044c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	461a      	mov	r2, r3
 8004496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449a:	6093      	str	r3, [r2, #8]
 800449c:	e032      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b4:	461a      	mov	r2, r3
 80044b6:	2320      	movs	r3, #32
 80044b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f00a f961 	bl	800e788 <HAL_PCD_DataOutStageCallback>
 80044c6:	e01d      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d114      	bne.n	80044f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	4613      	mov	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d108      	bne.n	80044f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044f0:	461a      	mov	r2, r3
 80044f2:	2100      	movs	r1, #0
 80044f4:	f004 fe52 	bl	800919c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f00a f942 	bl	800e788 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	4f54300a 	.word	0x4f54300a
 8004514:	4f54310a 	.word	0x4f54310a

08004518 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	333c      	adds	r3, #60	; 0x3c
 8004530:	3304      	adds	r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d90e      	bls.n	800456c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	461a      	mov	r2, r3
 8004566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f00a f8f9 	bl	800e764 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a0a      	ldr	r2, [pc, #40]	; (80045a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d90c      	bls.n	8004594 <PCD_EP_OutSetupPacket_int+0x7c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d108      	bne.n	8004594 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800458c:	461a      	mov	r2, r3
 800458e:	2101      	movs	r1, #1
 8004590:	f004 fe04 	bl	800919c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	4f54300a 	.word	0x4f54300a

080045a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	70fb      	strb	r3, [r7, #3]
 80045b0:	4613      	mov	r3, r2
 80045b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d107      	bne.n	80045d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045c2:	883b      	ldrh	r3, [r7, #0]
 80045c4:	0419      	lsls	r1, r3, #16
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28
 80045d0:	e028      	b.n	8004624 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4413      	add	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]
 80045e4:	e00d      	b.n	8004602 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	3340      	adds	r3, #64	; 0x40
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	4413      	add	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	3301      	adds	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	3b01      	subs	r3, #1
 8004608:	429a      	cmp	r2, r3
 800460a:	d3ec      	bcc.n	80045e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800460c:	883b      	ldrh	r3, [r7, #0]
 800460e:	0418      	lsls	r0, r3, #16
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	3b01      	subs	r3, #1
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	4302      	orrs	r2, r0
 800461c:	3340      	adds	r3, #64	; 0x40
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	460b      	mov	r3, r1
 800463c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	887a      	ldrh	r2, [r7, #2]
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e314      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b0f      	cmp	r3, #15
 8004684:	d903      	bls.n	800468e <HAL_RCC_OscConfig+0x22>
 8004686:	21e6      	movs	r1, #230	; 0xe6
 8004688:	4897      	ldr	r0, [pc, #604]	; (80048e8 <HAL_RCC_OscConfig+0x27c>)
 800468a:	f7fc fbc6 	bl	8000e1a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8088 	beq.w	80047ac <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00d      	beq.n	80046c0 <HAL_RCC_OscConfig+0x54>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ac:	d008      	beq.n	80046c0 <HAL_RCC_OscConfig+0x54>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b6:	d003      	beq.n	80046c0 <HAL_RCC_OscConfig+0x54>
 80046b8:	21eb      	movs	r1, #235	; 0xeb
 80046ba:	488b      	ldr	r0, [pc, #556]	; (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80046bc:	f7fc fbad 	bl	8000e1a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c0:	4b8a      	ldr	r3, [pc, #552]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d00c      	beq.n	80046e6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046cc:	4b87      	ldr	r3, [pc, #540]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d112      	bne.n	80046fe <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d8:	4b84      	ldr	r3, [pc, #528]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e4:	d10b      	bne.n	80046fe <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e6:	4b81      	ldr	r3, [pc, #516]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d05b      	beq.n	80047aa <HAL_RCC_OscConfig+0x13e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d157      	bne.n	80047aa <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e2d4      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004706:	d106      	bne.n	8004716 <HAL_RCC_OscConfig+0xaa>
 8004708:	4b78      	ldr	r3, [pc, #480]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a77      	ldr	r2, [pc, #476]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800470e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e01d      	b.n	8004752 <HAL_RCC_OscConfig+0xe6>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800471e:	d10c      	bne.n	800473a <HAL_RCC_OscConfig+0xce>
 8004720:	4b72      	ldr	r3, [pc, #456]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a71      	ldr	r2, [pc, #452]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	4b6f      	ldr	r3, [pc, #444]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a6e      	ldr	r2, [pc, #440]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e00b      	b.n	8004752 <HAL_RCC_OscConfig+0xe6>
 800473a:	4b6c      	ldr	r3, [pc, #432]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a6b      	ldr	r2, [pc, #428]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	4b69      	ldr	r3, [pc, #420]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a68      	ldr	r2, [pc, #416]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800474c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004750:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d013      	beq.n	8004782 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475a:	f7fd fa93 	bl	8001c84 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004762:	f7fd fa8f 	bl	8001c84 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b64      	cmp	r3, #100	; 0x64
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e299      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004774:	4b5d      	ldr	r3, [pc, #372]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0xf6>
 8004780:	e014      	b.n	80047ac <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004782:	f7fd fa7f 	bl	8001c84 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800478a:	f7fd fa7b 	bl	8001c84 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b64      	cmp	r3, #100	; 0x64
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e285      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479c:	4b53      	ldr	r3, [pc, #332]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x11e>
 80047a8:	e000      	b.n	80047ac <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d079      	beq.n	80048ac <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_RCC_OscConfig+0x166>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d004      	beq.n	80047d2 <HAL_RCC_OscConfig+0x166>
 80047c8:	f240 111d 	movw	r1, #285	; 0x11d
 80047cc:	4846      	ldr	r0, [pc, #280]	; (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80047ce:	f7fc fb24 	bl	8000e1a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b1f      	cmp	r3, #31
 80047d8:	d904      	bls.n	80047e4 <HAL_RCC_OscConfig+0x178>
 80047da:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80047de:	4842      	ldr	r0, [pc, #264]	; (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80047e0:	f7fc fb1b 	bl	8000e1a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047e4:	4b41      	ldr	r3, [pc, #260]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f0:	4b3e      	ldr	r3, [pc, #248]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d11c      	bne.n	8004836 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fc:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d116      	bne.n	8004836 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004808:	4b38      	ldr	r3, [pc, #224]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_OscConfig+0x1b4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d001      	beq.n	8004820 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e243      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004820:	4b32      	ldr	r3, [pc, #200]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	492f      	ldr	r1, [pc, #188]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004830:	4313      	orrs	r3, r2
 8004832:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004834:	e03a      	b.n	80048ac <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d020      	beq.n	8004880 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483e:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <HAL_RCC_OscConfig+0x284>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fd fa1e 	bl	8001c84 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800484c:	f7fd fa1a 	bl	8001c84 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e224      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485e:	4b23      	ldr	r3, [pc, #140]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486a:	4b20      	ldr	r3, [pc, #128]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	491c      	ldr	r1, [pc, #112]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 800487a:	4313      	orrs	r3, r2
 800487c:	600b      	str	r3, [r1, #0]
 800487e:	e015      	b.n	80048ac <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004880:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <HAL_RCC_OscConfig+0x284>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004886:	f7fd f9fd 	bl	8001c84 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800488e:	f7fd f9f9 	bl	8001c84 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e203      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a0:	4b12      	ldr	r3, [pc, #72]	; (80048ec <HAL_RCC_OscConfig+0x280>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f0      	bne.n	800488e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d045      	beq.n	8004944 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCC_OscConfig+0x266>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d004      	beq.n	80048d2 <HAL_RCC_OscConfig+0x266>
 80048c8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80048cc:	4806      	ldr	r0, [pc, #24]	; (80048e8 <HAL_RCC_OscConfig+0x27c>)
 80048ce:	f7fc faa4 	bl	8000e1a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01e      	beq.n	8004918 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_RCC_OscConfig+0x288>)
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fd f9d0 	bl	8001c84 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e6:	e010      	b.n	800490a <HAL_RCC_OscConfig+0x29e>
 80048e8:	0800f89c 	.word	0x0800f89c
 80048ec:	40023800 	.word	0x40023800
 80048f0:	42470000 	.word	0x42470000
 80048f4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f8:	f7fd f9c4 	bl	8001c84 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e1ce      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800490a:	4b5e      	ldr	r3, [pc, #376]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 800490c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0x28c>
 8004916:	e015      	b.n	8004944 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004918:	4b5b      	ldr	r3, [pc, #364]	; (8004a88 <HAL_RCC_OscConfig+0x41c>)
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491e:	f7fd f9b1 	bl	8001c84 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004926:	f7fd f9ad 	bl	8001c84 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e1b7      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004938:	4b52      	ldr	r3, [pc, #328]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 800493a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1f0      	bne.n	8004926 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80b0 	beq.w	8004ab2 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004952:	2300      	movs	r3, #0
 8004954:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <HAL_RCC_OscConfig+0x30c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d008      	beq.n	8004978 <HAL_RCC_OscConfig+0x30c>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b05      	cmp	r3, #5
 800496c:	d004      	beq.n	8004978 <HAL_RCC_OscConfig+0x30c>
 800496e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004972:	4846      	ldr	r0, [pc, #280]	; (8004a8c <HAL_RCC_OscConfig+0x420>)
 8004974:	f7fc fa51 	bl	8000e1a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004978:	4b42      	ldr	r3, [pc, #264]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10f      	bne.n	80049a4 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004984:	2300      	movs	r3, #0
 8004986:	60bb      	str	r3, [r7, #8]
 8004988:	4b3e      	ldr	r3, [pc, #248]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	4a3d      	ldr	r2, [pc, #244]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 800498e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004992:	6413      	str	r3, [r2, #64]	; 0x40
 8004994:	4b3b      	ldr	r3, [pc, #236]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a0:	2301      	movs	r3, #1
 80049a2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a4:	4b3a      	ldr	r3, [pc, #232]	; (8004a90 <HAL_RCC_OscConfig+0x424>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d118      	bne.n	80049e2 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b0:	4b37      	ldr	r3, [pc, #220]	; (8004a90 <HAL_RCC_OscConfig+0x424>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a36      	ldr	r2, [pc, #216]	; (8004a90 <HAL_RCC_OscConfig+0x424>)
 80049b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049bc:	f7fd f962 	bl	8001c84 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c4:	f7fd f95e 	bl	8001c84 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e168      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d6:	4b2e      	ldr	r3, [pc, #184]	; (8004a90 <HAL_RCC_OscConfig+0x424>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f0      	beq.n	80049c4 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d106      	bne.n	80049f8 <HAL_RCC_OscConfig+0x38c>
 80049ea:	4b26      	ldr	r3, [pc, #152]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	4a25      	ldr	r2, [pc, #148]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6713      	str	r3, [r2, #112]	; 0x70
 80049f6:	e01c      	b.n	8004a32 <HAL_RCC_OscConfig+0x3c6>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b05      	cmp	r3, #5
 80049fe:	d10c      	bne.n	8004a1a <HAL_RCC_OscConfig+0x3ae>
 8004a00:	4b20      	ldr	r3, [pc, #128]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 8004a06:	f043 0304 	orr.w	r3, r3, #4
 8004a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0c:	4b1d      	ldr	r3, [pc, #116]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	6713      	str	r3, [r2, #112]	; 0x70
 8004a18:	e00b      	b.n	8004a32 <HAL_RCC_OscConfig+0x3c6>
 8004a1a:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	6713      	str	r3, [r2, #112]	; 0x70
 8004a26:	4b17      	ldr	r3, [pc, #92]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2a:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 8004a2c:	f023 0304 	bic.w	r3, r3, #4
 8004a30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d015      	beq.n	8004a66 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3a:	f7fd f923 	bl	8001c84 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fd f91f 	bl	8001c84 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e127      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <HAL_RCC_OscConfig+0x418>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0ee      	beq.n	8004a42 <HAL_RCC_OscConfig+0x3d6>
 8004a64:	e01c      	b.n	8004aa0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a66:	f7fd f90d 	bl	8001c84 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6c:	e012      	b.n	8004a94 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a6e:	f7fd f909 	bl	8001c84 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d909      	bls.n	8004a94 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e111      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
 8004a84:	40023800 	.word	0x40023800
 8004a88:	42470e80 	.word	0x42470e80
 8004a8c:	0800f89c 	.word	0x0800f89c
 8004a90:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a94:	4b86      	ldr	r3, [pc, #536]	; (8004cb0 <HAL_RCC_OscConfig+0x644>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e6      	bne.n	8004a6e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d105      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa6:	4b82      	ldr	r3, [pc, #520]	; (8004cb0 <HAL_RCC_OscConfig+0x644>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	4a81      	ldr	r2, [pc, #516]	; (8004cb0 <HAL_RCC_OscConfig+0x644>)
 8004aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00c      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x468>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d008      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x468>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x468>
 8004aca:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004ace:	4879      	ldr	r0, [pc, #484]	; (8004cb4 <HAL_RCC_OscConfig+0x648>)
 8004ad0:	f7fc f9a3 	bl	8000e1a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80e4 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ade:	4b74      	ldr	r3, [pc, #464]	; (8004cb0 <HAL_RCC_OscConfig+0x644>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	f000 80a5 	beq.w	8004c36 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	f040 8089 	bne.w	8004c08 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <HAL_RCC_OscConfig+0x4a6>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b06:	d004      	beq.n	8004b12 <HAL_RCC_OscConfig+0x4a6>
 8004b08:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8004b0c:	4869      	ldr	r0, [pc, #420]	; (8004cb4 <HAL_RCC_OscConfig+0x648>)
 8004b0e:	f7fc f984 	bl	8000e1a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	2b3f      	cmp	r3, #63	; 0x3f
 8004b18:	d904      	bls.n	8004b24 <HAL_RCC_OscConfig+0x4b8>
 8004b1a:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004b1e:	4865      	ldr	r0, [pc, #404]	; (8004cb4 <HAL_RCC_OscConfig+0x648>)
 8004b20:	f7fc f97b 	bl	8000e1a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	2b31      	cmp	r3, #49	; 0x31
 8004b2a:	d904      	bls.n	8004b36 <HAL_RCC_OscConfig+0x4ca>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004b34:	d904      	bls.n	8004b40 <HAL_RCC_OscConfig+0x4d4>
 8004b36:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004b3a:	485e      	ldr	r0, [pc, #376]	; (8004cb4 <HAL_RCC_OscConfig+0x648>)
 8004b3c:	f7fc f96d 	bl	8000e1a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d010      	beq.n	8004b6a <HAL_RCC_OscConfig+0x4fe>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d00c      	beq.n	8004b6a <HAL_RCC_OscConfig+0x4fe>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	2b06      	cmp	r3, #6
 8004b56:	d008      	beq.n	8004b6a <HAL_RCC_OscConfig+0x4fe>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d004      	beq.n	8004b6a <HAL_RCC_OscConfig+0x4fe>
 8004b60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004b64:	4853      	ldr	r0, [pc, #332]	; (8004cb4 <HAL_RCC_OscConfig+0x648>)
 8004b66:	f7fc f958 	bl	8000e1a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d903      	bls.n	8004b7a <HAL_RCC_OscConfig+0x50e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	2b0f      	cmp	r3, #15
 8004b78:	d904      	bls.n	8004b84 <HAL_RCC_OscConfig+0x518>
 8004b7a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004b7e:	484d      	ldr	r0, [pc, #308]	; (8004cb4 <HAL_RCC_OscConfig+0x648>)
 8004b80:	f7fc f94b 	bl	8000e1a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b84:	4b4c      	ldr	r3, [pc, #304]	; (8004cb8 <HAL_RCC_OscConfig+0x64c>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8a:	f7fd f87b 	bl	8001c84 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b92:	f7fd f877 	bl	8001c84 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e081      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba4:	4b42      	ldr	r3, [pc, #264]	; (8004cb0 <HAL_RCC_OscConfig+0x644>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f0      	bne.n	8004b92 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	019b      	lsls	r3, r3, #6
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	041b      	lsls	r3, r3, #16
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	061b      	lsls	r3, r3, #24
 8004bd4:	4936      	ldr	r1, [pc, #216]	; (8004cb0 <HAL_RCC_OscConfig+0x644>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bda:	4b37      	ldr	r3, [pc, #220]	; (8004cb8 <HAL_RCC_OscConfig+0x64c>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be0:	f7fd f850 	bl	8001c84 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be8:	f7fd f84c 	bl	8001c84 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e056      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfa:	4b2d      	ldr	r3, [pc, #180]	; (8004cb0 <HAL_RCC_OscConfig+0x644>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x57c>
 8004c06:	e04e      	b.n	8004ca6 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c08:	4b2b      	ldr	r3, [pc, #172]	; (8004cb8 <HAL_RCC_OscConfig+0x64c>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fd f839 	bl	8001c84 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c16:	f7fd f835 	bl	8001c84 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e03f      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c28:	4b21      	ldr	r3, [pc, #132]	; (8004cb0 <HAL_RCC_OscConfig+0x644>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f0      	bne.n	8004c16 <HAL_RCC_OscConfig+0x5aa>
 8004c34:	e037      	b.n	8004ca6 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e032      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c42:	4b1b      	ldr	r3, [pc, #108]	; (8004cb0 <HAL_RCC_OscConfig+0x644>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d028      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d121      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d11a      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c72:	4013      	ands	r3, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d111      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	085b      	lsrs	r3, r3, #1
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d001      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	0800f89c 	.word	0x0800f89c
 8004cb8:	42470060 	.word	0x42470060

08004cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e174      	b.n	8004fba <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x24>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b0f      	cmp	r3, #15
 8004cde:	d904      	bls.n	8004cea <HAL_RCC_ClockConfig+0x2e>
 8004ce0:	f240 215a 	movw	r1, #602	; 0x25a
 8004ce4:	487b      	ldr	r0, [pc, #492]	; (8004ed4 <HAL_RCC_ClockConfig+0x218>)
 8004ce6:	f7fc f898 	bl	8000e1a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d019      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x68>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d016      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x68>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d013      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x68>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d010      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x68>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d00d      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x68>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b05      	cmp	r3, #5
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x68>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b06      	cmp	r3, #6
 8004d12:	d007      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x68>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b07      	cmp	r3, #7
 8004d18:	d004      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x68>
 8004d1a:	f240 215b 	movw	r1, #603	; 0x25b
 8004d1e:	486d      	ldr	r0, [pc, #436]	; (8004ed4 <HAL_RCC_ClockConfig+0x218>)
 8004d20:	f7fc f87b 	bl	8000e1a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d24:	4b6c      	ldr	r3, [pc, #432]	; (8004ed8 <HAL_RCC_ClockConfig+0x21c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d90c      	bls.n	8004d4c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b69      	ldr	r3, [pc, #420]	; (8004ed8 <HAL_RCC_ClockConfig+0x21c>)
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3a:	4b67      	ldr	r3, [pc, #412]	; (8004ed8 <HAL_RCC_ClockConfig+0x21c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e136      	b.n	8004fba <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d049      	beq.n	8004dec <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d64:	4b5d      	ldr	r3, [pc, #372]	; (8004edc <HAL_RCC_ClockConfig+0x220>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4a5c      	ldr	r2, [pc, #368]	; (8004edc <HAL_RCC_ClockConfig+0x220>)
 8004d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d7c:	4b57      	ldr	r3, [pc, #348]	; (8004edc <HAL_RCC_ClockConfig+0x220>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a56      	ldr	r2, [pc, #344]	; (8004edc <HAL_RCC_ClockConfig+0x220>)
 8004d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d024      	beq.n	8004dda <HAL_RCC_ClockConfig+0x11e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b80      	cmp	r3, #128	; 0x80
 8004d96:	d020      	beq.n	8004dda <HAL_RCC_ClockConfig+0x11e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b90      	cmp	r3, #144	; 0x90
 8004d9e:	d01c      	beq.n	8004dda <HAL_RCC_ClockConfig+0x11e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2ba0      	cmp	r3, #160	; 0xa0
 8004da6:	d018      	beq.n	8004dda <HAL_RCC_ClockConfig+0x11e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2bb0      	cmp	r3, #176	; 0xb0
 8004dae:	d014      	beq.n	8004dda <HAL_RCC_ClockConfig+0x11e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2bc0      	cmp	r3, #192	; 0xc0
 8004db6:	d010      	beq.n	8004dda <HAL_RCC_ClockConfig+0x11e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2bd0      	cmp	r3, #208	; 0xd0
 8004dbe:	d00c      	beq.n	8004dda <HAL_RCC_ClockConfig+0x11e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2be0      	cmp	r3, #224	; 0xe0
 8004dc6:	d008      	beq.n	8004dda <HAL_RCC_ClockConfig+0x11e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2bf0      	cmp	r3, #240	; 0xf0
 8004dce:	d004      	beq.n	8004dda <HAL_RCC_ClockConfig+0x11e>
 8004dd0:	f240 217e 	movw	r1, #638	; 0x27e
 8004dd4:	483f      	ldr	r0, [pc, #252]	; (8004ed4 <HAL_RCC_ClockConfig+0x218>)
 8004dd6:	f7fc f820 	bl	8000e1a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dda:	4b40      	ldr	r3, [pc, #256]	; (8004edc <HAL_RCC_ClockConfig+0x220>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	493d      	ldr	r1, [pc, #244]	; (8004edc <HAL_RCC_ClockConfig+0x220>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d059      	beq.n	8004eac <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d010      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x166>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d00c      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x166>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d008      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x166>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d004      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x166>
 8004e18:	f240 2185 	movw	r1, #645	; 0x285
 8004e1c:	482d      	ldr	r0, [pc, #180]	; (8004ed4 <HAL_RCC_ClockConfig+0x218>)
 8004e1e:	f7fb fffc 	bl	8000e1a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2a:	4b2c      	ldr	r3, [pc, #176]	; (8004edc <HAL_RCC_ClockConfig+0x220>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d119      	bne.n	8004e6a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e0bf      	b.n	8004fba <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d003      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4a:	4b24      	ldr	r3, [pc, #144]	; (8004edc <HAL_RCC_ClockConfig+0x220>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0af      	b.n	8004fba <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5a:	4b20      	ldr	r3, [pc, #128]	; (8004edc <HAL_RCC_ClockConfig+0x220>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e0a7      	b.n	8004fba <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <HAL_RCC_ClockConfig+0x220>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4919      	ldr	r1, [pc, #100]	; (8004edc <HAL_RCC_ClockConfig+0x220>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e7c:	f7fc ff02 	bl	8001c84 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fc fefe 	bl	8001c84 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e08f      	b.n	8004fba <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <HAL_RCC_ClockConfig+0x220>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 020c 	and.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1eb      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <HAL_RCC_ClockConfig+0x21c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d212      	bcs.n	8004ee0 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <HAL_RCC_ClockConfig+0x21c>)
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_RCC_ClockConfig+0x21c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d007      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e072      	b.n	8004fba <HAL_RCC_ClockConfig+0x2fe>
 8004ed4:	0800f89c 	.word	0x0800f89c
 8004ed8:	40023c00 	.word	0x40023c00
 8004edc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d025      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d018      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x26a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efc:	d013      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x26a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f06:	d00e      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x26a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004f10:	d009      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x26a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004f1a:	d004      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x26a>
 8004f1c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8004f20:	4828      	ldr	r0, [pc, #160]	; (8004fc4 <HAL_RCC_ClockConfig+0x308>)
 8004f22:	f7fb ff7a 	bl	8000e1a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f26:	4b28      	ldr	r3, [pc, #160]	; (8004fc8 <HAL_RCC_ClockConfig+0x30c>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	4925      	ldr	r1, [pc, #148]	; (8004fc8 <HAL_RCC_ClockConfig+0x30c>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d026      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d018      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x2c2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f54:	d013      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x2c2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f5e:	d00e      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x2c2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004f68:	d009      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x2c2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004f72:	d004      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x2c2>
 8004f74:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004f78:	4812      	ldr	r0, [pc, #72]	; (8004fc4 <HAL_RCC_ClockConfig+0x308>)
 8004f7a:	f7fb ff4e 	bl	8000e1a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <HAL_RCC_ClockConfig+0x30c>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	490e      	ldr	r1, [pc, #56]	; (8004fc8 <HAL_RCC_ClockConfig+0x30c>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f92:	f000 f821 	bl	8004fd8 <HAL_RCC_GetSysClockFreq>
 8004f96:	4602      	mov	r2, r0
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <HAL_RCC_ClockConfig+0x30c>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	490a      	ldr	r1, [pc, #40]	; (8004fcc <HAL_RCC_ClockConfig+0x310>)
 8004fa4:	5ccb      	ldrb	r3, [r1, r3]
 8004fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004faa:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <HAL_RCC_ClockConfig+0x314>)
 8004fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fae:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <HAL_RCC_ClockConfig+0x318>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fc fb36 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	0800f89c 	.word	0x0800f89c
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	08012350 	.word	0x08012350
 8004fd0:	20000070 	.word	0x20000070
 8004fd4:	20000074 	.word	0x20000074

08004fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fdc:	b090      	sub	sp, #64	; 0x40
 8004fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe8:	2300      	movs	r3, #0
 8004fea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ff0:	4b59      	ldr	r3, [pc, #356]	; (8005158 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 030c 	and.w	r3, r3, #12
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d00d      	beq.n	8005018 <HAL_RCC_GetSysClockFreq+0x40>
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	f200 80a1 	bhi.w	8005144 <HAL_RCC_GetSysClockFreq+0x16c>
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <HAL_RCC_GetSysClockFreq+0x34>
 8005006:	2b04      	cmp	r3, #4
 8005008:	d003      	beq.n	8005012 <HAL_RCC_GetSysClockFreq+0x3a>
 800500a:	e09b      	b.n	8005144 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800500c:	4b53      	ldr	r3, [pc, #332]	; (800515c <HAL_RCC_GetSysClockFreq+0x184>)
 800500e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005010:	e09b      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005012:	4b53      	ldr	r3, [pc, #332]	; (8005160 <HAL_RCC_GetSysClockFreq+0x188>)
 8005014:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005016:	e098      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005018:	4b4f      	ldr	r3, [pc, #316]	; (8005158 <HAL_RCC_GetSysClockFreq+0x180>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005020:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005022:	4b4d      	ldr	r3, [pc, #308]	; (8005158 <HAL_RCC_GetSysClockFreq+0x180>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d028      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502e:	4b4a      	ldr	r3, [pc, #296]	; (8005158 <HAL_RCC_GetSysClockFreq+0x180>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	099b      	lsrs	r3, r3, #6
 8005034:	2200      	movs	r2, #0
 8005036:	623b      	str	r3, [r7, #32]
 8005038:	627a      	str	r2, [r7, #36]	; 0x24
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005040:	2100      	movs	r1, #0
 8005042:	4b47      	ldr	r3, [pc, #284]	; (8005160 <HAL_RCC_GetSysClockFreq+0x188>)
 8005044:	fb03 f201 	mul.w	r2, r3, r1
 8005048:	2300      	movs	r3, #0
 800504a:	fb00 f303 	mul.w	r3, r0, r3
 800504e:	4413      	add	r3, r2
 8005050:	4a43      	ldr	r2, [pc, #268]	; (8005160 <HAL_RCC_GetSysClockFreq+0x188>)
 8005052:	fba0 1202 	umull	r1, r2, r0, r2
 8005056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005058:	460a      	mov	r2, r1
 800505a:	62ba      	str	r2, [r7, #40]	; 0x28
 800505c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800505e:	4413      	add	r3, r2
 8005060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005064:	2200      	movs	r2, #0
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	61fa      	str	r2, [r7, #28]
 800506a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800506e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005072:	f7fb f905 	bl	8000280 <__aeabi_uldivmod>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4613      	mov	r3, r2
 800507c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507e:	e053      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005080:	4b35      	ldr	r3, [pc, #212]	; (8005158 <HAL_RCC_GetSysClockFreq+0x180>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	099b      	lsrs	r3, r3, #6
 8005086:	2200      	movs	r2, #0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	617a      	str	r2, [r7, #20]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005092:	f04f 0b00 	mov.w	fp, #0
 8005096:	4652      	mov	r2, sl
 8005098:	465b      	mov	r3, fp
 800509a:	f04f 0000 	mov.w	r0, #0
 800509e:	f04f 0100 	mov.w	r1, #0
 80050a2:	0159      	lsls	r1, r3, #5
 80050a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050a8:	0150      	lsls	r0, r2, #5
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	ebb2 080a 	subs.w	r8, r2, sl
 80050b2:	eb63 090b 	sbc.w	r9, r3, fp
 80050b6:	f04f 0200 	mov.w	r2, #0
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80050c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050ca:	ebb2 0408 	subs.w	r4, r2, r8
 80050ce:	eb63 0509 	sbc.w	r5, r3, r9
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	00eb      	lsls	r3, r5, #3
 80050dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050e0:	00e2      	lsls	r2, r4, #3
 80050e2:	4614      	mov	r4, r2
 80050e4:	461d      	mov	r5, r3
 80050e6:	eb14 030a 	adds.w	r3, r4, sl
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	eb45 030b 	adc.w	r3, r5, fp
 80050f0:	607b      	str	r3, [r7, #4]
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050fe:	4629      	mov	r1, r5
 8005100:	028b      	lsls	r3, r1, #10
 8005102:	4621      	mov	r1, r4
 8005104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005108:	4621      	mov	r1, r4
 800510a:	028a      	lsls	r2, r1, #10
 800510c:	4610      	mov	r0, r2
 800510e:	4619      	mov	r1, r3
 8005110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005112:	2200      	movs	r2, #0
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	60fa      	str	r2, [r7, #12]
 8005118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800511c:	f7fb f8b0 	bl	8000280 <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4613      	mov	r3, r2
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <HAL_RCC_GetSysClockFreq+0x180>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	0c1b      	lsrs	r3, r3, #16
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	3301      	adds	r3, #1
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005142:	e002      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <HAL_RCC_GetSysClockFreq+0x184>)
 8005146:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800514c:	4618      	mov	r0, r3
 800514e:	3740      	adds	r7, #64	; 0x40
 8005150:	46bd      	mov	sp, r7
 8005152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005156:	bf00      	nop
 8005158:	40023800 	.word	0x40023800
 800515c:	00f42400 	.word	0x00f42400
 8005160:	017d7840 	.word	0x017d7840

08005164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <HAL_RCC_GetHCLKFreq+0x14>)
 800516a:	681b      	ldr	r3, [r3, #0]
}
 800516c:	4618      	mov	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000070 	.word	0x20000070

0800517c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005180:	f7ff fff0 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 8005184:	4602      	mov	r2, r0
 8005186:	4b05      	ldr	r3, [pc, #20]	; (800519c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	0a9b      	lsrs	r3, r3, #10
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	4903      	ldr	r1, [pc, #12]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005192:	5ccb      	ldrb	r3, [r1, r3]
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005198:	4618      	mov	r0, r3
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40023800 	.word	0x40023800
 80051a0:	08012360 	.word	0x08012360

080051a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051a8:	f7ff ffdc 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	0b5b      	lsrs	r3, r3, #13
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4903      	ldr	r1, [pc, #12]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40023800 	.word	0x40023800
 80051c8:	08012360 	.word	0x08012360

080051cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	220f      	movs	r2, #15
 80051da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051dc:	4b12      	ldr	r3, [pc, #72]	; (8005228 <HAL_RCC_GetClockConfig+0x5c>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0203 	and.w	r2, r3, #3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051e8:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <HAL_RCC_GetClockConfig+0x5c>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051f4:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <HAL_RCC_GetClockConfig+0x5c>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <HAL_RCC_GetClockConfig+0x5c>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	08db      	lsrs	r3, r3, #3
 8005206:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <HAL_RCC_GetClockConfig+0x60>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0207 	and.w	r2, r3, #7
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	601a      	str	r2, [r3, #0]
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800
 800522c:	40023c00 	.word	0x40023c00

08005230 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b0f      	cmp	r3, #15
 800524e:	d904      	bls.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8005250:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8005254:	4834      	ldr	r0, [pc, #208]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005256:	f7fb fde0 	bl	8000e1a <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d105      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800526e:	2b00      	cmp	r3, #0
 8005270:	d066      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d903      	bls.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2b07      	cmp	r3, #7
 8005280:	d904      	bls.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005282:	f640 11de 	movw	r1, #2526	; 0x9de
 8005286:	4828      	ldr	r0, [pc, #160]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8005288:	f7fb fdc7 	bl	8000e1a <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b31      	cmp	r3, #49	; 0x31
 8005292:	d904      	bls.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800529c:	d904      	bls.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800529e:	f640 11df 	movw	r1, #2527	; 0x9df
 80052a2:	4821      	ldr	r0, [pc, #132]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80052a4:	f7fb fdb9 	bl	8000e1a <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d903      	bls.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b3f      	cmp	r3, #63	; 0x3f
 80052b6:	d904      	bls.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x92>
 80052b8:	f640 11e1 	movw	r1, #2529	; 0x9e1
 80052bc:	481a      	ldr	r0, [pc, #104]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80052be:	f7fb fdac 	bl	8000e1a <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052c2:	4b1a      	ldr	r3, [pc, #104]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052c8:	f7fc fcdc 	bl	8001c84 <HAL_GetTick>
 80052cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052d0:	f7fc fcd8 	bl	8001c84 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e1b3      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052e2:	4b13      	ldr	r3, [pc, #76]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	019b      	lsls	r3, r3, #6
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	071b      	lsls	r3, r3, #28
 8005300:	490b      	ldr	r1, [pc, #44]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005308:	4b08      	ldr	r3, [pc, #32]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800530a:	2201      	movs	r2, #1
 800530c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800530e:	f7fc fcb9 	bl	8001c84 <HAL_GetTick>
 8005312:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005314:	e00e      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005316:	f7fc fcb5 	bl	8001c84 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d907      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e190      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005328:	0800f8d4 	.word	0x0800f8d4
 800532c:	42470068 	.word	0x42470068
 8005330:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005334:	4b88      	ldr	r3, [pc, #544]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0ea      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8173 	beq.w	8005634 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005356:	f000 80a6 	beq.w	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005362:	f000 80a0 	beq.w	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	4a7c      	ldr	r2, [pc, #496]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	f000 809a 	beq.w	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	4a7a      	ldr	r2, [pc, #488]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005378:	4293      	cmp	r3, r2
 800537a:	f000 8094 	beq.w	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	4a78      	ldr	r2, [pc, #480]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005384:	4293      	cmp	r3, r2
 8005386:	f000 808e 	beq.w	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	4a76      	ldr	r2, [pc, #472]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005390:	4293      	cmp	r3, r2
 8005392:	f000 8088 	beq.w	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	4a74      	ldr	r2, [pc, #464]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	f000 8082 	beq.w	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	4a72      	ldr	r2, [pc, #456]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d07c      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	4a70      	ldr	r2, [pc, #448]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d077      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	4a6f      	ldr	r2, [pc, #444]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d072      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	4a6d      	ldr	r2, [pc, #436]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d06d      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	4a6c      	ldr	r2, [pc, #432]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d068      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	4a6a      	ldr	r2, [pc, #424]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d063      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	4a69      	ldr	r2, [pc, #420]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d05e      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	4a67      	ldr	r2, [pc, #412]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d059      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	4a66      	ldr	r2, [pc, #408]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d054      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	4a64      	ldr	r2, [pc, #400]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d04f      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	4a63      	ldr	r2, [pc, #396]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d04a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	4a61      	ldr	r2, [pc, #388]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d045      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	4a60      	ldr	r2, [pc, #384]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d040      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	4a5e      	ldr	r2, [pc, #376]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d03b      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	4a5d      	ldr	r2, [pc, #372]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d036      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	4a5b      	ldr	r2, [pc, #364]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d031      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	4a5a      	ldr	r2, [pc, #360]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d02c      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	4a58      	ldr	r2, [pc, #352]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d027      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	4a57      	ldr	r2, [pc, #348]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d022      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	4a55      	ldr	r2, [pc, #340]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01d      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	4a54      	ldr	r2, [pc, #336]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d018      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	4a52      	ldr	r2, [pc, #328]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	4a51      	ldr	r2, [pc, #324]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	4a4f      	ldr	r2, [pc, #316]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	4a4e      	ldr	r2, [pc, #312]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800549c:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 80054a0:	484c      	ldr	r0, [pc, #304]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80054a2:	f7fb fcba 	bl	8000e1a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	4b2b      	ldr	r3, [pc, #172]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80054b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b4:	6413      	str	r3, [r2, #64]	; 0x40
 80054b6:	4b28      	ldr	r3, [pc, #160]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054c2:	4b45      	ldr	r3, [pc, #276]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a44      	ldr	r2, [pc, #272]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80054c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054ce:	f7fc fbd9 	bl	8001c84 <HAL_GetTick>
 80054d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054d4:	e008      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054d6:	f7fc fbd5 	bl	8001c84 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e0b0      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054e8:	4b3b      	ldr	r3, [pc, #236]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0f0      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054f4:	4b18      	ldr	r3, [pc, #96]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d073      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	429a      	cmp	r2, r3
 8005510:	d06c      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005512:	4b11      	ldr	r3, [pc, #68]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800551c:	4b2f      	ldr	r3, [pc, #188]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800551e:	2201      	movs	r2, #1
 8005520:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005522:	4b2e      	ldr	r3, [pc, #184]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005528:	4a0b      	ldr	r2, [pc, #44]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800552e:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b01      	cmp	r3, #1
 8005538:	d158      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800553a:	f7fc fba3 	bl	8001c84 <HAL_GetTick>
 800553e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005540:	e04e      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005542:	f7fc fb9f 	bl	8001c84 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005550:	4293      	cmp	r3, r2
 8005552:	d945      	bls.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e078      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005558:	40023800 	.word	0x40023800
 800555c:	00020300 	.word	0x00020300
 8005560:	00030300 	.word	0x00030300
 8005564:	00040300 	.word	0x00040300
 8005568:	00050300 	.word	0x00050300
 800556c:	00060300 	.word	0x00060300
 8005570:	00070300 	.word	0x00070300
 8005574:	00080300 	.word	0x00080300
 8005578:	00090300 	.word	0x00090300
 800557c:	000a0300 	.word	0x000a0300
 8005580:	000b0300 	.word	0x000b0300
 8005584:	000c0300 	.word	0x000c0300
 8005588:	000d0300 	.word	0x000d0300
 800558c:	000e0300 	.word	0x000e0300
 8005590:	000f0300 	.word	0x000f0300
 8005594:	00100300 	.word	0x00100300
 8005598:	00110300 	.word	0x00110300
 800559c:	00120300 	.word	0x00120300
 80055a0:	00130300 	.word	0x00130300
 80055a4:	00140300 	.word	0x00140300
 80055a8:	00150300 	.word	0x00150300
 80055ac:	00160300 	.word	0x00160300
 80055b0:	00170300 	.word	0x00170300
 80055b4:	00180300 	.word	0x00180300
 80055b8:	00190300 	.word	0x00190300
 80055bc:	001a0300 	.word	0x001a0300
 80055c0:	001b0300 	.word	0x001b0300
 80055c4:	001c0300 	.word	0x001c0300
 80055c8:	001d0300 	.word	0x001d0300
 80055cc:	001e0300 	.word	0x001e0300
 80055d0:	001f0300 	.word	0x001f0300
 80055d4:	0800f8d4 	.word	0x0800f8d4
 80055d8:	40007000 	.word	0x40007000
 80055dc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e0:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80055e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0aa      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f8:	d10d      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80055fa:	4b16      	ldr	r3, [pc, #88]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800560a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560e:	4911      	ldr	r1, [pc, #68]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005610:	4313      	orrs	r3, r2
 8005612:	608b      	str	r3, [r1, #8]
 8005614:	e005      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005616:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	4a0e      	ldr	r2, [pc, #56]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800561c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005620:	6093      	str	r3, [r2, #8]
 8005622:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562e:	4909      	ldr	r1, [pc, #36]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005630:	4313      	orrs	r3, r2
 8005632:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	7d1a      	ldrb	r2, [r3, #20]
 8005644:	4b04      	ldr	r3, [pc, #16]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005646:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40023800 	.word	0x40023800
 8005658:	424711e0 	.word	0x424711e0

0800565c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0c4      	b.n	80057fc <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a63      	ldr	r2, [pc, #396]	; (8005804 <HAL_RTC_Init+0x1a8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_RTC_Init+0x2a>
 800567c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005680:	4861      	ldr	r0, [pc, #388]	; (8005808 <HAL_RTC_Init+0x1ac>)
 8005682:	f7fb fbca 	bl	8000e1a <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	d008      	beq.n	80056a0 <HAL_RTC_Init+0x44>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <HAL_RTC_Init+0x44>
 8005696:	f240 1105 	movw	r1, #261	; 0x105
 800569a:	485b      	ldr	r0, [pc, #364]	; (8005808 <HAL_RTC_Init+0x1ac>)
 800569c:	f7fb fbbd 	bl	8000e1a <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b7f      	cmp	r3, #127	; 0x7f
 80056a6:	d904      	bls.n	80056b2 <HAL_RTC_Init+0x56>
 80056a8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80056ac:	4856      	ldr	r0, [pc, #344]	; (8005808 <HAL_RTC_Init+0x1ac>)
 80056ae:	f7fb fbb4 	bl	8000e1a <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ba:	d304      	bcc.n	80056c6 <HAL_RTC_Init+0x6a>
 80056bc:	f240 1107 	movw	r1, #263	; 0x107
 80056c0:	4851      	ldr	r0, [pc, #324]	; (8005808 <HAL_RTC_Init+0x1ac>)
 80056c2:	f7fb fbaa 	bl	8000e1a <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d013      	beq.n	80056f6 <HAL_RTC_Init+0x9a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056d6:	d00e      	beq.n	80056f6 <HAL_RTC_Init+0x9a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e0:	d009      	beq.n	80056f6 <HAL_RTC_Init+0x9a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056ea:	d004      	beq.n	80056f6 <HAL_RTC_Init+0x9a>
 80056ec:	f44f 7184 	mov.w	r1, #264	; 0x108
 80056f0:	4845      	ldr	r0, [pc, #276]	; (8005808 <HAL_RTC_Init+0x1ac>)
 80056f2:	f7fb fb92 	bl	8000e1a <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <HAL_RTC_Init+0xb6>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005706:	d004      	beq.n	8005712 <HAL_RTC_Init+0xb6>
 8005708:	f240 1109 	movw	r1, #265	; 0x109
 800570c:	483e      	ldr	r0, [pc, #248]	; (8005808 <HAL_RTC_Init+0x1ac>)
 800570e:	f7fb fb84 	bl	8000e1a <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HAL_RTC_Init+0xd2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005722:	d004      	beq.n	800572e <HAL_RTC_Init+0xd2>
 8005724:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005728:	4837      	ldr	r0, [pc, #220]	; (8005808 <HAL_RTC_Init+0x1ac>)
 800572a:	f7fb fb76 	bl	8000e1a <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	7f5b      	ldrb	r3, [r3, #29]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fb fbd0 	bl	8000ee4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	22ca      	movs	r2, #202	; 0xca
 8005750:	625a      	str	r2, [r3, #36]	; 0x24
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2253      	movs	r2, #83	; 0x53
 8005758:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fad2 	bl	8005d04 <RTC_EnterInitMode>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d12c      	bne.n	80057c4 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800577c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6899      	ldr	r1, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	68d2      	ldr	r2, [r2, #12]
 80057a4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6919      	ldr	r1, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	041a      	lsls	r2, r3, #16
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fad9 	bl	8005d72 <RTC_ExitInitMode>
 80057c0:	4603      	mov	r3, r0
 80057c2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d113      	bne.n	80057f2 <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	22ff      	movs	r2, #255	; 0xff
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40002800 	.word	0x40002800
 8005808:	0800f910 	.word	0x0800f910

0800580c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <HAL_RTC_SetTime+0x26>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d004      	beq.n	8005832 <HAL_RTC_SetTime+0x26>
 8005828:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 800582c:	489a      	ldr	r0, [pc, #616]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 800582e:	f7fb faf4 	bl	8000e1a <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800583a:	d00d      	beq.n	8005858 <HAL_RTC_SetTime+0x4c>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005844:	d008      	beq.n	8005858 <HAL_RTC_SetTime+0x4c>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d004      	beq.n	8005858 <HAL_RTC_SetTime+0x4c>
 800584e:	f240 21b5 	movw	r1, #693	; 0x2b5
 8005852:	4891      	ldr	r0, [pc, #580]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 8005854:	f7fb fae1 	bl	8000e1a <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d009      	beq.n	8005874 <HAL_RTC_SetTime+0x68>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005868:	d004      	beq.n	8005874 <HAL_RTC_SetTime+0x68>
 800586a:	f240 21b6 	movw	r1, #694	; 0x2b6
 800586e:	488a      	ldr	r0, [pc, #552]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 8005870:	f7fb fad3 	bl	8000e1a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	7f1b      	ldrb	r3, [r3, #28]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_RTC_SetTime+0x74>
 800587c:	2302      	movs	r3, #2
 800587e:	e107      	b.n	8005a90 <HAL_RTC_SetTime+0x284>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2202      	movs	r2, #2
 800588a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d15c      	bne.n	800594c <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01a      	beq.n	80058d6 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_RTC_SetTime+0xa4>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b0c      	cmp	r3, #12
 80058ae:	d904      	bls.n	80058ba <HAL_RTC_SetTime+0xae>
 80058b0:	f240 21c1 	movw	r1, #705	; 0x2c1
 80058b4:	4878      	ldr	r0, [pc, #480]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 80058b6:	f7fb fab0 	bl	8000e1a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	78db      	ldrb	r3, [r3, #3]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d015      	beq.n	80058ee <HAL_RTC_SetTime+0xe2>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	78db      	ldrb	r3, [r3, #3]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d011      	beq.n	80058ee <HAL_RTC_SetTime+0xe2>
 80058ca:	f240 21c2 	movw	r1, #706	; 0x2c2
 80058ce:	4872      	ldr	r0, [pc, #456]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 80058d0:	f7fb faa3 	bl	8000e1a <assert_failed>
 80058d4:	e00b      	b.n	80058ee <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2200      	movs	r2, #0
 80058da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b17      	cmp	r3, #23
 80058e2:	d904      	bls.n	80058ee <HAL_RTC_SetTime+0xe2>
 80058e4:	f240 21c7 	movw	r1, #711	; 0x2c7
 80058e8:	486b      	ldr	r0, [pc, #428]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 80058ea:	f7fb fa96 	bl	8000e1a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b3b      	cmp	r3, #59	; 0x3b
 80058f4:	d904      	bls.n	8005900 <HAL_RTC_SetTime+0xf4>
 80058f6:	f240 21c9 	movw	r1, #713	; 0x2c9
 80058fa:	4867      	ldr	r0, [pc, #412]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 80058fc:	f7fb fa8d 	bl	8000e1a <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	789b      	ldrb	r3, [r3, #2]
 8005904:	2b3b      	cmp	r3, #59	; 0x3b
 8005906:	d904      	bls.n	8005912 <HAL_RTC_SetTime+0x106>
 8005908:	f240 21ca 	movw	r1, #714	; 0x2ca
 800590c:	4862      	ldr	r0, [pc, #392]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 800590e:	f7fb fa84 	bl	8000e1a <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fa50 	bl	8005dbc <RTC_ByteToBcd2>
 800591c:	4603      	mov	r3, r0
 800591e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fa49 	bl	8005dbc <RTC_ByteToBcd2>
 800592a:	4603      	mov	r3, r0
 800592c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800592e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	789b      	ldrb	r3, [r3, #2]
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fa41 	bl	8005dbc <RTC_ByteToBcd2>
 800593a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800593c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	78db      	ldrb	r3, [r3, #3]
 8005944:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	e062      	b.n	8005a12 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d022      	beq.n	80059a0 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fa49 	bl	8005df6 <RTC_Bcd2ToByte>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_RTC_SetTime+0x16e>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fa41 	bl	8005df6 <RTC_Bcd2ToByte>
 8005974:	4603      	mov	r3, r0
 8005976:	2b0c      	cmp	r3, #12
 8005978:	d904      	bls.n	8005984 <HAL_RTC_SetTime+0x178>
 800597a:	f240 21d5 	movw	r1, #725	; 0x2d5
 800597e:	4846      	ldr	r0, [pc, #280]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 8005980:	f7fb fa4b 	bl	8000e1a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	78db      	ldrb	r3, [r3, #3]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d019      	beq.n	80059c0 <HAL_RTC_SetTime+0x1b4>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	78db      	ldrb	r3, [r3, #3]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d015      	beq.n	80059c0 <HAL_RTC_SetTime+0x1b4>
 8005994:	f240 21d6 	movw	r1, #726	; 0x2d6
 8005998:	483f      	ldr	r0, [pc, #252]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 800599a:	f7fb fa3e 	bl	8000e1a <assert_failed>
 800599e:	e00f      	b.n	80059c0 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2200      	movs	r2, #0
 80059a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fa23 	bl	8005df6 <RTC_Bcd2ToByte>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b17      	cmp	r3, #23
 80059b4:	d904      	bls.n	80059c0 <HAL_RTC_SetTime+0x1b4>
 80059b6:	f240 21db 	movw	r1, #731	; 0x2db
 80059ba:	4837      	ldr	r0, [pc, #220]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 80059bc:	f7fb fa2d 	bl	8000e1a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 fa16 	bl	8005df6 <RTC_Bcd2ToByte>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b3b      	cmp	r3, #59	; 0x3b
 80059ce:	d904      	bls.n	80059da <HAL_RTC_SetTime+0x1ce>
 80059d0:	f240 21dd 	movw	r1, #733	; 0x2dd
 80059d4:	4830      	ldr	r0, [pc, #192]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 80059d6:	f7fb fa20 	bl	8000e1a <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	789b      	ldrb	r3, [r3, #2]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fa09 	bl	8005df6 <RTC_Bcd2ToByte>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b3b      	cmp	r3, #59	; 0x3b
 80059e8:	d904      	bls.n	80059f4 <HAL_RTC_SetTime+0x1e8>
 80059ea:	f240 21de 	movw	r1, #734	; 0x2de
 80059ee:	482a      	ldr	r0, [pc, #168]	; (8005a98 <HAL_RTC_SetTime+0x28c>)
 80059f0:	f7fb fa13 	bl	8000e1a <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a00:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a06:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	78db      	ldrb	r3, [r3, #3]
 8005a0c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	22ca      	movs	r2, #202	; 0xca
 8005a18:	625a      	str	r2, [r3, #36]	; 0x24
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2253      	movs	r2, #83	; 0x53
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 f96e 	bl	8005d04 <RTC_EnterInitMode>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a2c:	7cfb      	ldrb	r3, [r7, #19]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d120      	bne.n	8005a74 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a3c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a40:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a50:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6899      	ldr	r1, [r3, #8]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 f981 	bl	8005d72 <RTC_ExitInitMode>
 8005a70:	4603      	mov	r3, r0
 8005a72:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	771a      	strb	r2, [r3, #28]

  return status;
 8005a8e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd90      	pop	{r4, r7, pc}
 8005a98:	0800f910 	.word	0x0800f910

08005a9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a9c:	b590      	push	{r4, r7, lr}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <HAL_RTC_SetDate+0x26>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d004      	beq.n	8005ac2 <HAL_RTC_SetDate+0x26>
 8005ab8:	f240 3153 	movw	r1, #851	; 0x353
 8005abc:	487c      	ldr	r0, [pc, #496]	; (8005cb0 <HAL_RTC_SetDate+0x214>)
 8005abe:	f7fb f9ac 	bl	8000e1a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	7f1b      	ldrb	r3, [r3, #28]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_RTC_SetDate+0x32>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e0ec      	b.n	8005ca8 <HAL_RTC_SetDate+0x20c>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10e      	bne.n	8005afe <HAL_RTC_SetDate+0x62>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d008      	beq.n	8005afe <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	f023 0310 	bic.w	r3, r3, #16
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	330a      	adds	r3, #10
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d01c      	beq.n	8005b40 <HAL_RTC_SetDate+0xa4>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d018      	beq.n	8005b40 <HAL_RTC_SetDate+0xa4>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d014      	beq.n	8005b40 <HAL_RTC_SetDate+0xa4>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d010      	beq.n	8005b40 <HAL_RTC_SetDate+0xa4>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b05      	cmp	r3, #5
 8005b24:	d00c      	beq.n	8005b40 <HAL_RTC_SetDate+0xa4>
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d008      	beq.n	8005b40 <HAL_RTC_SetDate+0xa4>
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b07      	cmp	r3, #7
 8005b34:	d004      	beq.n	8005b40 <HAL_RTC_SetDate+0xa4>
 8005b36:	f240 315f 	movw	r1, #863	; 0x35f
 8005b3a:	485d      	ldr	r0, [pc, #372]	; (8005cb0 <HAL_RTC_SetDate+0x214>)
 8005b3c:	f7fb f96d 	bl	8000e1a <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d13f      	bne.n	8005bc6 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	78db      	ldrb	r3, [r3, #3]
 8005b4a:	2b63      	cmp	r3, #99	; 0x63
 8005b4c:	d904      	bls.n	8005b58 <HAL_RTC_SetDate+0xbc>
 8005b4e:	f240 3163 	movw	r1, #867	; 0x363
 8005b52:	4857      	ldr	r0, [pc, #348]	; (8005cb0 <HAL_RTC_SetDate+0x214>)
 8005b54:	f7fb f961 	bl	8000e1a <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_RTC_SetDate+0xcc>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b0c      	cmp	r3, #12
 8005b66:	d904      	bls.n	8005b72 <HAL_RTC_SetDate+0xd6>
 8005b68:	f44f 7159 	mov.w	r1, #868	; 0x364
 8005b6c:	4850      	ldr	r0, [pc, #320]	; (8005cb0 <HAL_RTC_SetDate+0x214>)
 8005b6e:	f7fb f954 	bl	8000e1a <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	789b      	ldrb	r3, [r3, #2]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_RTC_SetDate+0xe6>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	789b      	ldrb	r3, [r3, #2]
 8005b7e:	2b1f      	cmp	r3, #31
 8005b80:	d904      	bls.n	8005b8c <HAL_RTC_SetDate+0xf0>
 8005b82:	f240 3165 	movw	r1, #869	; 0x365
 8005b86:	484a      	ldr	r0, [pc, #296]	; (8005cb0 <HAL_RTC_SetDate+0x214>)
 8005b88:	f7fb f947 	bl	8000e1a <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	78db      	ldrb	r3, [r3, #3]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 f913 	bl	8005dbc <RTC_ByteToBcd2>
 8005b96:	4603      	mov	r3, r0
 8005b98:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 f90c 	bl	8005dbc <RTC_ByteToBcd2>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ba8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	789b      	ldrb	r3, [r3, #2]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 f904 	bl	8005dbc <RTC_ByteToBcd2>
 8005bb4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bb6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	e045      	b.n	8005c52 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	78db      	ldrb	r3, [r3, #3]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f913 	bl	8005df6 <RTC_Bcd2ToByte>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b63      	cmp	r3, #99	; 0x63
 8005bd4:	d904      	bls.n	8005be0 <HAL_RTC_SetDate+0x144>
 8005bd6:	f240 316e 	movw	r1, #878	; 0x36e
 8005bda:	4835      	ldr	r0, [pc, #212]	; (8005cb0 <HAL_RTC_SetDate+0x214>)
 8005bdc:	f7fb f91d 	bl	8000e1a <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 f906 	bl	8005df6 <RTC_Bcd2ToByte>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d007      	beq.n	8005c00 <HAL_RTC_SetDate+0x164>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 f8fe 	bl	8005df6 <RTC_Bcd2ToByte>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b0c      	cmp	r3, #12
 8005bfe:	d904      	bls.n	8005c0a <HAL_RTC_SetDate+0x16e>
 8005c00:	f240 316f 	movw	r1, #879	; 0x36f
 8005c04:	482a      	ldr	r0, [pc, #168]	; (8005cb0 <HAL_RTC_SetDate+0x214>)
 8005c06:	f7fb f908 	bl	8000e1a <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	789b      	ldrb	r3, [r3, #2]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f8f1 	bl	8005df6 <RTC_Bcd2ToByte>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d007      	beq.n	8005c2a <HAL_RTC_SetDate+0x18e>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	789b      	ldrb	r3, [r3, #2]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 f8e9 	bl	8005df6 <RTC_Bcd2ToByte>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b1f      	cmp	r3, #31
 8005c28:	d904      	bls.n	8005c34 <HAL_RTC_SetDate+0x198>
 8005c2a:	f44f 715c 	mov.w	r1, #880	; 0x370
 8005c2e:	4820      	ldr	r0, [pc, #128]	; (8005cb0 <HAL_RTC_SetDate+0x214>)
 8005c30:	f7fb f8f3 	bl	8000e1a <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	78db      	ldrb	r3, [r3, #3]
 8005c38:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c40:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c46:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	22ca      	movs	r2, #202	; 0xca
 8005c58:	625a      	str	r2, [r3, #36]	; 0x24
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2253      	movs	r2, #83	; 0x53
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f84e 	bl	8005d04 <RTC_EnterInitMode>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c6c:	7cfb      	ldrb	r3, [r7, #19]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10c      	bne.n	8005c8c <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c80:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f875 	bl	8005d72 <RTC_ExitInitMode>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c8c:	7cfb      	ldrb	r3, [r7, #19]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d102      	bne.n	8005c98 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	22ff      	movs	r2, #255	; 0xff
 8005c9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	771a      	strb	r2, [r3, #28]

  return status;
 8005ca6:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd90      	pop	{r4, r7, pc}
 8005cb0:	0800f910 	.word	0x0800f910

08005cb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cd0:	f7fb ffd8 	bl	8001c84 <HAL_GetTick>
 8005cd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cd6:	e009      	b.n	8005cec <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cd8:	f7fb ffd4 	bl	8001c84 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ce6:	d901      	bls.n	8005cec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e007      	b.n	8005cfc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0ee      	beq.n	8005cd8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d122      	bne.n	8005d68 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d30:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d32:	f7fb ffa7 	bl	8001c84 <HAL_GetTick>
 8005d36:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d38:	e00c      	b.n	8005d54 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d3a:	f7fb ffa3 	bl	8001c84 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d48:	d904      	bls.n	8005d54 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d102      	bne.n	8005d68 <RTC_EnterInitMode+0x64>
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d1e8      	bne.n	8005d3a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d8c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ff89 	bl	8005cb4 <HAL_RTC_WaitForSynchro>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2204      	movs	r2, #4
 8005dac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005dca:	e005      	b.n	8005dd8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	3b0a      	subs	r3, #10
 8005dd6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	d8f6      	bhi.n	8005dcc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	b2db      	uxtb	r3, r3
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	0092      	lsls	r2, r2, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005e14:	79fb      	ldrb	r3, [r7, #7]
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	4413      	add	r3, r2
 8005e20:	b2db      	uxtb	r3, r3
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e18c      	b.n	800615c <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a75      	ldr	r2, [pc, #468]	; (800601c <HAL_SPI_Init+0x1ec>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d018      	beq.n	8005e7e <HAL_SPI_Init+0x4e>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a73      	ldr	r2, [pc, #460]	; (8006020 <HAL_SPI_Init+0x1f0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <HAL_SPI_Init+0x4e>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a72      	ldr	r2, [pc, #456]	; (8006024 <HAL_SPI_Init+0x1f4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00e      	beq.n	8005e7e <HAL_SPI_Init+0x4e>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a70      	ldr	r2, [pc, #448]	; (8006028 <HAL_SPI_Init+0x1f8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d009      	beq.n	8005e7e <HAL_SPI_Init+0x4e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a6f      	ldr	r2, [pc, #444]	; (800602c <HAL_SPI_Init+0x1fc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d004      	beq.n	8005e7e <HAL_SPI_Init+0x4e>
 8005e74:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e78:	486d      	ldr	r0, [pc, #436]	; (8006030 <HAL_SPI_Init+0x200>)
 8005e7a:	f7fa ffce 	bl	8000e1a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <HAL_SPI_Init+0x6a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8e:	d004      	beq.n	8005e9a <HAL_SPI_Init+0x6a>
 8005e90:	f240 1141 	movw	r1, #321	; 0x141
 8005e94:	4866      	ldr	r0, [pc, #408]	; (8006030 <HAL_SPI_Init+0x200>)
 8005e96:	f7fa ffc0 	bl	8000e1a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00e      	beq.n	8005ec0 <HAL_SPI_Init+0x90>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eaa:	d009      	beq.n	8005ec0 <HAL_SPI_Init+0x90>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb4:	d004      	beq.n	8005ec0 <HAL_SPI_Init+0x90>
 8005eb6:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005eba:	485d      	ldr	r0, [pc, #372]	; (8006030 <HAL_SPI_Init+0x200>)
 8005ebc:	f7fa ffad 	bl	8000e1a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec8:	d008      	beq.n	8005edc <HAL_SPI_Init+0xac>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d004      	beq.n	8005edc <HAL_SPI_Init+0xac>
 8005ed2:	f240 1143 	movw	r1, #323	; 0x143
 8005ed6:	4856      	ldr	r0, [pc, #344]	; (8006030 <HAL_SPI_Init+0x200>)
 8005ed8:	f7fa ff9f 	bl	8000e1a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee4:	d00d      	beq.n	8005f02 <HAL_SPI_Init+0xd2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_SPI_Init+0xd2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ef6:	d004      	beq.n	8005f02 <HAL_SPI_Init+0xd2>
 8005ef8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005efc:	484c      	ldr	r0, [pc, #304]	; (8006030 <HAL_SPI_Init+0x200>)
 8005efe:	f7fa ff8c 	bl	8000e1a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d020      	beq.n	8005f4c <HAL_SPI_Init+0x11c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d01c      	beq.n	8005f4c <HAL_SPI_Init+0x11c>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	2b10      	cmp	r3, #16
 8005f18:	d018      	beq.n	8005f4c <HAL_SPI_Init+0x11c>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	2b18      	cmp	r3, #24
 8005f20:	d014      	beq.n	8005f4c <HAL_SPI_Init+0x11c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d010      	beq.n	8005f4c <HAL_SPI_Init+0x11c>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	2b28      	cmp	r3, #40	; 0x28
 8005f30:	d00c      	beq.n	8005f4c <HAL_SPI_Init+0x11c>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	2b30      	cmp	r3, #48	; 0x30
 8005f38:	d008      	beq.n	8005f4c <HAL_SPI_Init+0x11c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	2b38      	cmp	r3, #56	; 0x38
 8005f40:	d004      	beq.n	8005f4c <HAL_SPI_Init+0x11c>
 8005f42:	f240 1145 	movw	r1, #325	; 0x145
 8005f46:	483a      	ldr	r0, [pc, #232]	; (8006030 <HAL_SPI_Init+0x200>)
 8005f48:	f7fa ff67 	bl	8000e1a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <HAL_SPI_Init+0x136>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	2b80      	cmp	r3, #128	; 0x80
 8005f5a:	d004      	beq.n	8005f66 <HAL_SPI_Init+0x136>
 8005f5c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005f60:	4833      	ldr	r0, [pc, #204]	; (8006030 <HAL_SPI_Init+0x200>)
 8005f62:	f7fa ff5a 	bl	8000e1a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d008      	beq.n	8005f80 <HAL_SPI_Init+0x150>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d004      	beq.n	8005f80 <HAL_SPI_Init+0x150>
 8005f76:	f240 1147 	movw	r1, #327	; 0x147
 8005f7a:	482d      	ldr	r0, [pc, #180]	; (8006030 <HAL_SPI_Init+0x200>)
 8005f7c:	f7fa ff4d 	bl	8000e1a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d155      	bne.n	8006034 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d008      	beq.n	8005fa2 <HAL_SPI_Init+0x172>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d004      	beq.n	8005fa2 <HAL_SPI_Init+0x172>
 8005f98:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005f9c:	4824      	ldr	r0, [pc, #144]	; (8006030 <HAL_SPI_Init+0x200>)
 8005f9e:	f7fa ff3c 	bl	8000e1a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <HAL_SPI_Init+0x18c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d004      	beq.n	8005fbc <HAL_SPI_Init+0x18c>
 8005fb2:	f240 114b 	movw	r1, #331	; 0x14b
 8005fb6:	481e      	ldr	r0, [pc, #120]	; (8006030 <HAL_SPI_Init+0x200>)
 8005fb8:	f7fa ff2f 	bl	8000e1a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fc4:	d125      	bne.n	8006012 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d05d      	beq.n	800608a <HAL_SPI_Init+0x25a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	d059      	beq.n	800608a <HAL_SPI_Init+0x25a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	2b10      	cmp	r3, #16
 8005fdc:	d055      	beq.n	800608a <HAL_SPI_Init+0x25a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	2b18      	cmp	r3, #24
 8005fe4:	d051      	beq.n	800608a <HAL_SPI_Init+0x25a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d04d      	beq.n	800608a <HAL_SPI_Init+0x25a>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	2b28      	cmp	r3, #40	; 0x28
 8005ff4:	d049      	beq.n	800608a <HAL_SPI_Init+0x25a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	2b30      	cmp	r3, #48	; 0x30
 8005ffc:	d045      	beq.n	800608a <HAL_SPI_Init+0x25a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	2b38      	cmp	r3, #56	; 0x38
 8006004:	d041      	beq.n	800608a <HAL_SPI_Init+0x25a>
 8006006:	f240 114f 	movw	r1, #335	; 0x14f
 800600a:	4809      	ldr	r0, [pc, #36]	; (8006030 <HAL_SPI_Init+0x200>)
 800600c:	f7fa ff05 	bl	8000e1a <assert_failed>
 8006010:	e03b      	b.n	800608a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	61da      	str	r2, [r3, #28]
 8006018:	e037      	b.n	800608a <HAL_SPI_Init+0x25a>
 800601a:	bf00      	nop
 800601c:	40013000 	.word	0x40013000
 8006020:	40003800 	.word	0x40003800
 8006024:	40003c00 	.word	0x40003c00
 8006028:	40013400 	.word	0x40013400
 800602c:	40015000 	.word	0x40015000
 8006030:	0800f948 	.word	0x0800f948
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d020      	beq.n	800607e <HAL_SPI_Init+0x24e>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	2b08      	cmp	r3, #8
 8006042:	d01c      	beq.n	800607e <HAL_SPI_Init+0x24e>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	2b10      	cmp	r3, #16
 800604a:	d018      	beq.n	800607e <HAL_SPI_Init+0x24e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	2b18      	cmp	r3, #24
 8006052:	d014      	beq.n	800607e <HAL_SPI_Init+0x24e>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	2b20      	cmp	r3, #32
 800605a:	d010      	beq.n	800607e <HAL_SPI_Init+0x24e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	2b28      	cmp	r3, #40	; 0x28
 8006062:	d00c      	beq.n	800607e <HAL_SPI_Init+0x24e>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	2b30      	cmp	r3, #48	; 0x30
 800606a:	d008      	beq.n	800607e <HAL_SPI_Init+0x24e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	2b38      	cmp	r3, #56	; 0x38
 8006072:	d004      	beq.n	800607e <HAL_SPI_Init+0x24e>
 8006074:	f240 1159 	movw	r1, #345	; 0x159
 8006078:	483a      	ldr	r0, [pc, #232]	; (8006164 <HAL_SPI_Init+0x334>)
 800607a:	f7fa fece 	bl	8000e1a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7fa ff7f 	bl	8000fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2202      	movs	r2, #2
 80060ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610e:	ea42 0103 	orr.w	r1, r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006116:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	0c1b      	lsrs	r3, r3, #16
 8006128:	f003 0104 	and.w	r1, r3, #4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	f003 0210 	and.w	r2, r3, #16
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69da      	ldr	r2, [r3, #28]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800614a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	0800f948 	.word	0x0800f948

08006168 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	4613      	mov	r3, r2
 8006176:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d009      	beq.n	8006198 <HAL_SPI_Transmit+0x30>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800618c:	d004      	beq.n	8006198 <HAL_SPI_Transmit+0x30>
 800618e:	f44f 7142 	mov.w	r1, #776	; 0x308
 8006192:	4880      	ldr	r0, [pc, #512]	; (8006394 <HAL_SPI_Transmit+0x22c>)
 8006194:	f7fa fe41 	bl	8000e1a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_SPI_Transmit+0x3e>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e128      	b.n	80063f8 <HAL_SPI_Transmit+0x290>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ae:	f7fb fd69 	bl	8001c84 <HAL_GetTick>
 80061b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80061b4:	88fb      	ldrh	r3, [r7, #6]
 80061b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d002      	beq.n	80061ca <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80061c4:	2302      	movs	r3, #2
 80061c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061c8:	e10d      	b.n	80063e6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <HAL_SPI_Transmit+0x6e>
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061da:	e104      	b.n	80063e6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2203      	movs	r2, #3
 80061e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	88fa      	ldrh	r2, [r7, #6]
 80061f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	88fa      	ldrh	r2, [r7, #6]
 80061fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006222:	d10f      	bne.n	8006244 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006232:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006242:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624e:	2b40      	cmp	r3, #64	; 0x40
 8006250:	d007      	beq.n	8006262 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006260:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800626a:	d14b      	bne.n	8006304 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <HAL_SPI_Transmit+0x112>
 8006274:	8afb      	ldrh	r3, [r7, #22]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d13e      	bne.n	80062f8 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627e:	881a      	ldrh	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	1c9a      	adds	r2, r3, #2
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800629e:	e02b      	b.n	80062f8 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d112      	bne.n	80062d4 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	881a      	ldrh	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	1c9a      	adds	r2, r3, #2
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80062d2:	e011      	b.n	80062f8 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062d4:	f7fb fcd6 	bl	8001c84 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d803      	bhi.n	80062ec <HAL_SPI_Transmit+0x184>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d102      	bne.n	80062f2 <HAL_SPI_Transmit+0x18a>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062f6:	e076      	b.n	80063e6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1ce      	bne.n	80062a0 <HAL_SPI_Transmit+0x138>
 8006302:	e04e      	b.n	80063a2 <HAL_SPI_Transmit+0x23a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_SPI_Transmit+0x1aa>
 800630c:	8afb      	ldrh	r3, [r7, #22]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d142      	bne.n	8006398 <HAL_SPI_Transmit+0x230>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	330c      	adds	r3, #12
 800631c:	7812      	ldrb	r2, [r2, #0]
 800631e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006338:	e02e      	b.n	8006398 <HAL_SPI_Transmit+0x230>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b02      	cmp	r3, #2
 8006346:	d113      	bne.n	8006370 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	330c      	adds	r3, #12
 8006352:	7812      	ldrb	r2, [r2, #0]
 8006354:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b01      	subs	r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	86da      	strh	r2, [r3, #54]	; 0x36
 800636e:	e013      	b.n	8006398 <HAL_SPI_Transmit+0x230>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006370:	f7fb fc88 	bl	8001c84 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d803      	bhi.n	8006388 <HAL_SPI_Transmit+0x220>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006386:	d102      	bne.n	800638e <HAL_SPI_Transmit+0x226>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d104      	bne.n	8006398 <HAL_SPI_Transmit+0x230>
        {
          errorcode = HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006392:	e028      	b.n	80063e6 <HAL_SPI_Transmit+0x27e>
 8006394:	0800f948 	.word	0x0800f948
    while (hspi->TxXferCount > 0U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1cb      	bne.n	800633a <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f8b2 	bl	8006510 <SPI_EndRxTxTransaction>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_SPI_Transmit+0x250>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <HAL_SPI_Transmit+0x26e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063c0:	2300      	movs	r3, #0
 80063c2:	613b      	str	r3, [r7, #16]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	613b      	str	r3, [r7, #16]
 80063d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e000      	b.n	80063e6 <HAL_SPI_Transmit+0x27e>
  }

error:
 80063e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3720      	adds	r7, #32
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	4613      	mov	r3, r2
 800640e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006410:	f7fb fc38 	bl	8001c84 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	4413      	add	r3, r2
 800641e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006420:	f7fb fc30 	bl	8001c84 <HAL_GetTick>
 8006424:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006426:	4b39      	ldr	r3, [pc, #228]	; (800650c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	015b      	lsls	r3, r3, #5
 800642c:	0d1b      	lsrs	r3, r3, #20
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006436:	e054      	b.n	80064e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d050      	beq.n	80064e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006440:	f7fb fc20 	bl	8001c84 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	429a      	cmp	r2, r3
 800644e:	d902      	bls.n	8006456 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d13d      	bne.n	80064d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800646e:	d111      	bne.n	8006494 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006478:	d004      	beq.n	8006484 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006482:	d107      	bne.n	8006494 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006492:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649c:	d10f      	bne.n	80064be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e017      	b.n	8006502 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	3b01      	subs	r3, #1
 80064e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4013      	ands	r3, r2
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	bf0c      	ite	eq
 80064f2:	2301      	moveq	r3, #1
 80064f4:	2300      	movne	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d19b      	bne.n	8006438 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000070 	.word	0x20000070

08006510 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800651c:	4b1b      	ldr	r3, [pc, #108]	; (800658c <SPI_EndRxTxTransaction+0x7c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1b      	ldr	r2, [pc, #108]	; (8006590 <SPI_EndRxTxTransaction+0x80>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	0d5b      	lsrs	r3, r3, #21
 8006528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800652c:	fb02 f303 	mul.w	r3, r2, r3
 8006530:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800653a:	d112      	bne.n	8006562 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2200      	movs	r2, #0
 8006544:	2180      	movs	r1, #128	; 0x80
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f7ff ff5a 	bl	8006400 <SPI_WaitFlagStateUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d016      	beq.n	8006580 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006556:	f043 0220 	orr.w	r2, r3, #32
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e00f      	b.n	8006582 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00a      	beq.n	800657e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	3b01      	subs	r3, #1
 800656c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006578:	2b80      	cmp	r3, #128	; 0x80
 800657a:	d0f2      	beq.n	8006562 <SPI_EndRxTxTransaction+0x52>
 800657c:	e000      	b.n	8006580 <SPI_EndRxTxTransaction+0x70>
        break;
 800657e:	bf00      	nop
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20000070 	.word	0x20000070
 8006590:	165e9f81 	.word	0x165e9f81

08006594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e0a7      	b.n	80066f6 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a55      	ldr	r2, [pc, #340]	; (8006700 <HAL_TIM_Base_Init+0x16c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d027      	beq.n	8006600 <HAL_TIM_Base_Init+0x6c>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b8:	d022      	beq.n	8006600 <HAL_TIM_Base_Init+0x6c>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a51      	ldr	r2, [pc, #324]	; (8006704 <HAL_TIM_Base_Init+0x170>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d01d      	beq.n	8006600 <HAL_TIM_Base_Init+0x6c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a4f      	ldr	r2, [pc, #316]	; (8006708 <HAL_TIM_Base_Init+0x174>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d018      	beq.n	8006600 <HAL_TIM_Base_Init+0x6c>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a4e      	ldr	r2, [pc, #312]	; (800670c <HAL_TIM_Base_Init+0x178>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d013      	beq.n	8006600 <HAL_TIM_Base_Init+0x6c>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a4c      	ldr	r2, [pc, #304]	; (8006710 <HAL_TIM_Base_Init+0x17c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00e      	beq.n	8006600 <HAL_TIM_Base_Init+0x6c>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a4b      	ldr	r2, [pc, #300]	; (8006714 <HAL_TIM_Base_Init+0x180>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d009      	beq.n	8006600 <HAL_TIM_Base_Init+0x6c>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a49      	ldr	r2, [pc, #292]	; (8006718 <HAL_TIM_Base_Init+0x184>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_TIM_Base_Init+0x6c>
 80065f6:	f240 1113 	movw	r1, #275	; 0x113
 80065fa:	4848      	ldr	r0, [pc, #288]	; (800671c <HAL_TIM_Base_Init+0x188>)
 80065fc:	f7fa fc0d 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d014      	beq.n	8006632 <HAL_TIM_Base_Init+0x9e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b10      	cmp	r3, #16
 800660e:	d010      	beq.n	8006632 <HAL_TIM_Base_Init+0x9e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b20      	cmp	r3, #32
 8006616:	d00c      	beq.n	8006632 <HAL_TIM_Base_Init+0x9e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	d008      	beq.n	8006632 <HAL_TIM_Base_Init+0x9e>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	2b60      	cmp	r3, #96	; 0x60
 8006626:	d004      	beq.n	8006632 <HAL_TIM_Base_Init+0x9e>
 8006628:	f44f 718a 	mov.w	r1, #276	; 0x114
 800662c:	483b      	ldr	r0, [pc, #236]	; (800671c <HAL_TIM_Base_Init+0x188>)
 800662e:	f7fa fbf4 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00e      	beq.n	8006658 <HAL_TIM_Base_Init+0xc4>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006642:	d009      	beq.n	8006658 <HAL_TIM_Base_Init+0xc4>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800664c:	d004      	beq.n	8006658 <HAL_TIM_Base_Init+0xc4>
 800664e:	f240 1115 	movw	r1, #277	; 0x115
 8006652:	4832      	ldr	r0, [pc, #200]	; (800671c <HAL_TIM_Base_Init+0x188>)
 8006654:	f7fa fbe1 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d008      	beq.n	8006672 <HAL_TIM_Base_Init+0xde>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d004      	beq.n	8006672 <HAL_TIM_Base_Init+0xde>
 8006668:	f44f 718b 	mov.w	r1, #278	; 0x116
 800666c:	482b      	ldr	r0, [pc, #172]	; (800671c <HAL_TIM_Base_Init+0x188>)
 800666e:	f7fa fbd4 	bl	8000e1a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fb f9e6 	bl	8001a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3304      	adds	r3, #4
 800669c:	4619      	mov	r1, r3
 800669e:	4610      	mov	r0, r2
 80066a0:	f000 ff68 	bl	8007574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40010000 	.word	0x40010000
 8006704:	40000400 	.word	0x40000400
 8006708:	40000800 	.word	0x40000800
 800670c:	40000c00 	.word	0x40000c00
 8006710:	40014000 	.word	0x40014000
 8006714:	40014400 	.word	0x40014400
 8006718:	40014800 	.word	0x40014800
 800671c:	0800f980 	.word	0x0800f980

08006720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a3d      	ldr	r2, [pc, #244]	; (8006824 <HAL_TIM_Base_Start_IT+0x104>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d027      	beq.n	8006782 <HAL_TIM_Base_Start_IT+0x62>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673a:	d022      	beq.n	8006782 <HAL_TIM_Base_Start_IT+0x62>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a39      	ldr	r2, [pc, #228]	; (8006828 <HAL_TIM_Base_Start_IT+0x108>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d01d      	beq.n	8006782 <HAL_TIM_Base_Start_IT+0x62>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a38      	ldr	r2, [pc, #224]	; (800682c <HAL_TIM_Base_Start_IT+0x10c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d018      	beq.n	8006782 <HAL_TIM_Base_Start_IT+0x62>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a36      	ldr	r2, [pc, #216]	; (8006830 <HAL_TIM_Base_Start_IT+0x110>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <HAL_TIM_Base_Start_IT+0x62>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a35      	ldr	r2, [pc, #212]	; (8006834 <HAL_TIM_Base_Start_IT+0x114>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00e      	beq.n	8006782 <HAL_TIM_Base_Start_IT+0x62>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a33      	ldr	r2, [pc, #204]	; (8006838 <HAL_TIM_Base_Start_IT+0x118>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d009      	beq.n	8006782 <HAL_TIM_Base_Start_IT+0x62>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a32      	ldr	r2, [pc, #200]	; (800683c <HAL_TIM_Base_Start_IT+0x11c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d004      	beq.n	8006782 <HAL_TIM_Base_Start_IT+0x62>
 8006778:	f240 11cf 	movw	r1, #463	; 0x1cf
 800677c:	4830      	ldr	r0, [pc, #192]	; (8006840 <HAL_TIM_Base_Start_IT+0x120>)
 800677e:	f7fa fb4c 	bl	8000e1a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b01      	cmp	r3, #1
 800678c:	d001      	beq.n	8006792 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e044      	b.n	800681c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2202      	movs	r2, #2
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0201 	orr.w	r2, r2, #1
 80067a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1d      	ldr	r2, [pc, #116]	; (8006824 <HAL_TIM_Base_Start_IT+0x104>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d018      	beq.n	80067e6 <HAL_TIM_Base_Start_IT+0xc6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067bc:	d013      	beq.n	80067e6 <HAL_TIM_Base_Start_IT+0xc6>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a19      	ldr	r2, [pc, #100]	; (8006828 <HAL_TIM_Base_Start_IT+0x108>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00e      	beq.n	80067e6 <HAL_TIM_Base_Start_IT+0xc6>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a17      	ldr	r2, [pc, #92]	; (800682c <HAL_TIM_Base_Start_IT+0x10c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_TIM_Base_Start_IT+0xc6>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a16      	ldr	r2, [pc, #88]	; (8006830 <HAL_TIM_Base_Start_IT+0x110>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_TIM_Base_Start_IT+0xc6>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a14      	ldr	r2, [pc, #80]	; (8006834 <HAL_TIM_Base_Start_IT+0x114>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d111      	bne.n	800680a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b06      	cmp	r3, #6
 80067f6:	d010      	beq.n	800681a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006808:	e007      	b.n	800681a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0201 	orr.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40010000 	.word	0x40010000
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	40014000 	.word	0x40014000
 8006838:	40014400 	.word	0x40014400
 800683c:	40014800 	.word	0x40014800
 8006840:	0800f980 	.word	0x0800f980

08006844 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e18a      	b.n	8006b6e <HAL_TIM_Encoder_Init+0x32a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a78      	ldr	r2, [pc, #480]	; (8006a40 <HAL_TIM_Encoder_Init+0x1fc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d01d      	beq.n	800689e <HAL_TIM_Encoder_Init+0x5a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686a:	d018      	beq.n	800689e <HAL_TIM_Encoder_Init+0x5a>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a74      	ldr	r2, [pc, #464]	; (8006a44 <HAL_TIM_Encoder_Init+0x200>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <HAL_TIM_Encoder_Init+0x5a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a73      	ldr	r2, [pc, #460]	; (8006a48 <HAL_TIM_Encoder_Init+0x204>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00e      	beq.n	800689e <HAL_TIM_Encoder_Init+0x5a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a71      	ldr	r2, [pc, #452]	; (8006a4c <HAL_TIM_Encoder_Init+0x208>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d009      	beq.n	800689e <HAL_TIM_Encoder_Init+0x5a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a70      	ldr	r2, [pc, #448]	; (8006a50 <HAL_TIM_Encoder_Init+0x20c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d004      	beq.n	800689e <HAL_TIM_Encoder_Init+0x5a>
 8006894:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8006898:	486e      	ldr	r0, [pc, #440]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 800689a:	f7fa fabe 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d014      	beq.n	80068d0 <HAL_TIM_Encoder_Init+0x8c>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b10      	cmp	r3, #16
 80068ac:	d010      	beq.n	80068d0 <HAL_TIM_Encoder_Init+0x8c>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d00c      	beq.n	80068d0 <HAL_TIM_Encoder_Init+0x8c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b40      	cmp	r3, #64	; 0x40
 80068bc:	d008      	beq.n	80068d0 <HAL_TIM_Encoder_Init+0x8c>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b60      	cmp	r3, #96	; 0x60
 80068c4:	d004      	beq.n	80068d0 <HAL_TIM_Encoder_Init+0x8c>
 80068c6:	f640 31d2 	movw	r1, #3026	; 0xbd2
 80068ca:	4862      	ldr	r0, [pc, #392]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 80068cc:	f7fa faa5 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00e      	beq.n	80068f6 <HAL_TIM_Encoder_Init+0xb2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e0:	d009      	beq.n	80068f6 <HAL_TIM_Encoder_Init+0xb2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ea:	d004      	beq.n	80068f6 <HAL_TIM_Encoder_Init+0xb2>
 80068ec:	f640 31d3 	movw	r1, #3027	; 0xbd3
 80068f0:	4858      	ldr	r0, [pc, #352]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 80068f2:	f7fa fa92 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d008      	beq.n	8006910 <HAL_TIM_Encoder_Init+0xcc>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	2b80      	cmp	r3, #128	; 0x80
 8006904:	d004      	beq.n	8006910 <HAL_TIM_Encoder_Init+0xcc>
 8006906:	f640 31d4 	movw	r1, #3028	; 0xbd4
 800690a:	4852      	ldr	r0, [pc, #328]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 800690c:	f7fa fa85 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d00c      	beq.n	8006932 <HAL_TIM_Encoder_Init+0xee>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d008      	beq.n	8006932 <HAL_TIM_Encoder_Init+0xee>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b03      	cmp	r3, #3
 8006926:	d004      	beq.n	8006932 <HAL_TIM_Encoder_Init+0xee>
 8006928:	f640 31d5 	movw	r1, #3029	; 0xbd5
 800692c:	4849      	ldr	r0, [pc, #292]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 800692e:	f7fa fa74 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d00c      	beq.n	8006954 <HAL_TIM_Encoder_Init+0x110>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d008      	beq.n	8006954 <HAL_TIM_Encoder_Init+0x110>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b03      	cmp	r3, #3
 8006948:	d004      	beq.n	8006954 <HAL_TIM_Encoder_Init+0x110>
 800694a:	f640 31d6 	movw	r1, #3030	; 0xbd6
 800694e:	4841      	ldr	r0, [pc, #260]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 8006950:	f7fa fa63 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d00c      	beq.n	8006976 <HAL_TIM_Encoder_Init+0x132>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	2b02      	cmp	r3, #2
 8006962:	d008      	beq.n	8006976 <HAL_TIM_Encoder_Init+0x132>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d004      	beq.n	8006976 <HAL_TIM_Encoder_Init+0x132>
 800696c:	f640 31d7 	movw	r1, #3031	; 0xbd7
 8006970:	4838      	ldr	r0, [pc, #224]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 8006972:	f7fa fa52 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d008      	beq.n	8006990 <HAL_TIM_Encoder_Init+0x14c>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b02      	cmp	r3, #2
 8006984:	d004      	beq.n	8006990 <HAL_TIM_Encoder_Init+0x14c>
 8006986:	f640 31d8 	movw	r1, #3032	; 0xbd8
 800698a:	4832      	ldr	r0, [pc, #200]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 800698c:	f7fa fa45 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_TIM_Encoder_Init+0x166>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d004      	beq.n	80069aa <HAL_TIM_Encoder_Init+0x166>
 80069a0:	f640 31d9 	movw	r1, #3033	; 0xbd9
 80069a4:	482b      	ldr	r0, [pc, #172]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 80069a6:	f7fa fa38 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d010      	beq.n	80069d4 <HAL_TIM_Encoder_Init+0x190>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d00c      	beq.n	80069d4 <HAL_TIM_Encoder_Init+0x190>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d008      	beq.n	80069d4 <HAL_TIM_Encoder_Init+0x190>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	2b0c      	cmp	r3, #12
 80069c8:	d004      	beq.n	80069d4 <HAL_TIM_Encoder_Init+0x190>
 80069ca:	f640 31da 	movw	r1, #3034	; 0xbda
 80069ce:	4821      	ldr	r0, [pc, #132]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 80069d0:	f7fa fa23 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d010      	beq.n	80069fe <HAL_TIM_Encoder_Init+0x1ba>
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d00c      	beq.n	80069fe <HAL_TIM_Encoder_Init+0x1ba>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d008      	beq.n	80069fe <HAL_TIM_Encoder_Init+0x1ba>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	d004      	beq.n	80069fe <HAL_TIM_Encoder_Init+0x1ba>
 80069f4:	f640 31db 	movw	r1, #3035	; 0xbdb
 80069f8:	4816      	ldr	r0, [pc, #88]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 80069fa:	f7fa fa0e 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b0f      	cmp	r3, #15
 8006a04:	d904      	bls.n	8006a10 <HAL_TIM_Encoder_Init+0x1cc>
 8006a06:	f640 31dc 	movw	r1, #3036	; 0xbdc
 8006a0a:	4812      	ldr	r0, [pc, #72]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 8006a0c:	f7fa fa05 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	2b0f      	cmp	r3, #15
 8006a16:	d904      	bls.n	8006a22 <HAL_TIM_Encoder_Init+0x1de>
 8006a18:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8006a1c:	480d      	ldr	r0, [pc, #52]	; (8006a54 <HAL_TIM_Encoder_Init+0x210>)
 8006a1e:	f7fa f9fc 	bl	8000e1a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d114      	bne.n	8006a58 <HAL_TIM_Encoder_Init+0x214>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fb f854 	bl	8001ae4 <HAL_TIM_Encoder_MspInit>
 8006a3c:	e00c      	b.n	8006a58 <HAL_TIM_Encoder_Init+0x214>
 8006a3e:	bf00      	nop
 8006a40:	40010000 	.word	0x40010000
 8006a44:	40000400 	.word	0x40000400
 8006a48:	40000800 	.word	0x40000800
 8006a4c:	40000c00 	.word	0x40000c00
 8006a50:	40014000 	.word	0x40014000
 8006a54:	0800f980 	.word	0x0800f980
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a6e:	f023 0307 	bic.w	r3, r3, #7
 8006a72:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4610      	mov	r0, r2
 8006a80:	f000 fd78 	bl	8007574 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aac:	f023 0303 	bic.w	r3, r3, #3
 8006ab0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	4313      	orrs	r3, r2
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006aca:	f023 030c 	bic.w	r3, r3, #12
 8006ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	011a      	lsls	r2, r3, #4
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	031b      	lsls	r3, r3, #12
 8006afa:	4313      	orrs	r3, r2
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b08:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006b10:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop

08006b78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ba0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a4d      	ldr	r2, [pc, #308]	; (8006cdc <HAL_TIM_Encoder_Start+0x164>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d01d      	beq.n	8006be8 <HAL_TIM_Encoder_Start+0x70>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb4:	d018      	beq.n	8006be8 <HAL_TIM_Encoder_Start+0x70>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a49      	ldr	r2, [pc, #292]	; (8006ce0 <HAL_TIM_Encoder_Start+0x168>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d013      	beq.n	8006be8 <HAL_TIM_Encoder_Start+0x70>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a47      	ldr	r2, [pc, #284]	; (8006ce4 <HAL_TIM_Encoder_Start+0x16c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00e      	beq.n	8006be8 <HAL_TIM_Encoder_Start+0x70>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a46      	ldr	r2, [pc, #280]	; (8006ce8 <HAL_TIM_Encoder_Start+0x170>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d009      	beq.n	8006be8 <HAL_TIM_Encoder_Start+0x70>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a44      	ldr	r2, [pc, #272]	; (8006cec <HAL_TIM_Encoder_Start+0x174>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d004      	beq.n	8006be8 <HAL_TIM_Encoder_Start+0x70>
 8006bde:	f640 418e 	movw	r1, #3214	; 0xc8e
 8006be2:	4843      	ldr	r0, [pc, #268]	; (8006cf0 <HAL_TIM_Encoder_Start+0x178>)
 8006be4:	f7fa f919 	bl	8000e1a <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d110      	bne.n	8006c10 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d102      	bne.n	8006bfa <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bf4:	7b7b      	ldrb	r3, [r7, #13]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d001      	beq.n	8006bfe <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e069      	b.n	8006cd2 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2202      	movs	r2, #2
 8006c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c0e:	e031      	b.n	8006c74 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d110      	bne.n	8006c38 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d102      	bne.n	8006c22 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c1c:	7b3b      	ldrb	r3, [r7, #12]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d001      	beq.n	8006c26 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e055      	b.n	8006cd2 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2202      	movs	r2, #2
 8006c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c36:	e01d      	b.n	8006c74 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d108      	bne.n	8006c50 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d105      	bne.n	8006c50 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c44:	7b7b      	ldrb	r3, [r7, #13]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d102      	bne.n	8006c50 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c4a:	7b3b      	ldrb	r3, [r7, #12]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d001      	beq.n	8006c54 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e03e      	b.n	8006cd2 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_TIM_Encoder_Start+0x10a>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	d008      	beq.n	8006c92 <HAL_TIM_Encoder_Start+0x11a>
 8006c80:	e00f      	b.n	8006ca2 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2201      	movs	r2, #1
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fd8c 	bl	80077a8 <TIM_CCxChannelCmd>
      break;
 8006c90:	e016      	b.n	8006cc0 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2201      	movs	r2, #1
 8006c98:	2104      	movs	r1, #4
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fd84 	bl	80077a8 <TIM_CCxChannelCmd>
      break;
 8006ca0:	e00e      	b.n	8006cc0 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	2100      	movs	r1, #0
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fd7c 	bl	80077a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	2104      	movs	r1, #4
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fd75 	bl	80077a8 <TIM_CCxChannelCmd>
      break;
 8006cbe:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	40010000 	.word	0x40010000
 8006ce0:	40000400 	.word	0x40000400
 8006ce4:	40000800 	.word	0x40000800
 8006ce8:	40000c00 	.word	0x40000c00
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	0800f980 	.word	0x0800f980

08006cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d122      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d11b      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f06f 0202 	mvn.w	r2, #2
 8006d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fbfe 	bl	8007538 <HAL_TIM_IC_CaptureCallback>
 8006d3c:	e005      	b.n	8006d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fbf0 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fc01 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d122      	bne.n	8006da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d11b      	bne.n	8006da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0204 	mvn.w	r2, #4
 8006d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fbd4 	bl	8007538 <HAL_TIM_IC_CaptureCallback>
 8006d90:	e005      	b.n	8006d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fbc6 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fbd7 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b08      	cmp	r3, #8
 8006db0:	d122      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d11b      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0208 	mvn.w	r2, #8
 8006dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2204      	movs	r2, #4
 8006dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fbaa 	bl	8007538 <HAL_TIM_IC_CaptureCallback>
 8006de4:	e005      	b.n	8006df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fb9c 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fbad 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0310 	and.w	r3, r3, #16
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d122      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d11b      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0210 	mvn.w	r2, #16
 8006e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2208      	movs	r2, #8
 8006e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fb80 	bl	8007538 <HAL_TIM_IC_CaptureCallback>
 8006e38:	e005      	b.n	8006e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fb72 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fb83 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d10e      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d107      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0201 	mvn.w	r2, #1
 8006e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7f9 ffba 	bl	8000dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	d10e      	bne.n	8006ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d107      	bne.n	8006ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fdb6 	bl	8007a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eae:	2b40      	cmp	r3, #64	; 0x40
 8006eb0:	d10e      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	d107      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fb48 	bl	8007560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d10e      	bne.n	8006efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d107      	bne.n	8006efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0220 	mvn.w	r2, #32
 8006ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fd80 	bl	80079fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_TIM_ConfigClockSource+0x1c>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e2f0      	b.n	8007502 <HAL_TIM_ConfigClockSource+0x5fe>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f38:	d029      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x8a>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b70      	cmp	r3, #112	; 0x70
 8006f40:	d025      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x8a>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f4a:	d020      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x8a>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b40      	cmp	r3, #64	; 0x40
 8006f52:	d01c      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x8a>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b50      	cmp	r3, #80	; 0x50
 8006f5a:	d018      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x8a>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b60      	cmp	r3, #96	; 0x60
 8006f62:	d014      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x8a>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d010      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x8a>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b10      	cmp	r3, #16
 8006f72:	d00c      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x8a>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d008      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x8a>
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b30      	cmp	r3, #48	; 0x30
 8006f82:	d004      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x8a>
 8006f84:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8006f88:	487c      	ldr	r0, [pc, #496]	; (800717c <HAL_TIM_ConfigClockSource+0x278>)
 8006f8a:	f7f9 ff46 	bl	8000e1a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb6:	f000 80f1 	beq.w	800719c <HAL_TIM_ConfigClockSource+0x298>
 8006fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fbe:	f200 8293 	bhi.w	80074e8 <HAL_TIM_ConfigClockSource+0x5e4>
 8006fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc6:	d02d      	beq.n	8007024 <HAL_TIM_ConfigClockSource+0x120>
 8006fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fcc:	f200 828c 	bhi.w	80074e8 <HAL_TIM_ConfigClockSource+0x5e4>
 8006fd0:	2b70      	cmp	r3, #112	; 0x70
 8006fd2:	d05d      	beq.n	8007090 <HAL_TIM_ConfigClockSource+0x18c>
 8006fd4:	2b70      	cmp	r3, #112	; 0x70
 8006fd6:	f200 8287 	bhi.w	80074e8 <HAL_TIM_ConfigClockSource+0x5e4>
 8006fda:	2b60      	cmp	r3, #96	; 0x60
 8006fdc:	f000 81a0 	beq.w	8007320 <HAL_TIM_ConfigClockSource+0x41c>
 8006fe0:	2b60      	cmp	r3, #96	; 0x60
 8006fe2:	f200 8281 	bhi.w	80074e8 <HAL_TIM_ConfigClockSource+0x5e4>
 8006fe6:	2b50      	cmp	r3, #80	; 0x50
 8006fe8:	f000 8144 	beq.w	8007274 <HAL_TIM_ConfigClockSource+0x370>
 8006fec:	2b50      	cmp	r3, #80	; 0x50
 8006fee:	f200 827b 	bhi.w	80074e8 <HAL_TIM_ConfigClockSource+0x5e4>
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	f000 81f6 	beq.w	80073e4 <HAL_TIM_ConfigClockSource+0x4e0>
 8006ff8:	2b40      	cmp	r3, #64	; 0x40
 8006ffa:	f200 8275 	bhi.w	80074e8 <HAL_TIM_ConfigClockSource+0x5e4>
 8006ffe:	2b30      	cmp	r3, #48	; 0x30
 8007000:	f000 8246 	beq.w	8007490 <HAL_TIM_ConfigClockSource+0x58c>
 8007004:	2b30      	cmp	r3, #48	; 0x30
 8007006:	f200 826f 	bhi.w	80074e8 <HAL_TIM_ConfigClockSource+0x5e4>
 800700a:	2b20      	cmp	r3, #32
 800700c:	f000 8240 	beq.w	8007490 <HAL_TIM_ConfigClockSource+0x58c>
 8007010:	2b20      	cmp	r3, #32
 8007012:	f200 8269 	bhi.w	80074e8 <HAL_TIM_ConfigClockSource+0x5e4>
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 823a 	beq.w	8007490 <HAL_TIM_ConfigClockSource+0x58c>
 800701c:	2b10      	cmp	r3, #16
 800701e:	f000 8237 	beq.w	8007490 <HAL_TIM_ConfigClockSource+0x58c>
 8007022:	e261      	b.n	80074e8 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a55      	ldr	r2, [pc, #340]	; (8007180 <HAL_TIM_ConfigClockSource+0x27c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	f000 825f 	beq.w	80074ee <HAL_TIM_ConfigClockSource+0x5ea>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007038:	f000 8259 	beq.w	80074ee <HAL_TIM_ConfigClockSource+0x5ea>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a50      	ldr	r2, [pc, #320]	; (8007184 <HAL_TIM_ConfigClockSource+0x280>)
 8007042:	4293      	cmp	r3, r2
 8007044:	f000 8253 	beq.w	80074ee <HAL_TIM_ConfigClockSource+0x5ea>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a4e      	ldr	r2, [pc, #312]	; (8007188 <HAL_TIM_ConfigClockSource+0x284>)
 800704e:	4293      	cmp	r3, r2
 8007050:	f000 824d 	beq.w	80074ee <HAL_TIM_ConfigClockSource+0x5ea>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a4c      	ldr	r2, [pc, #304]	; (800718c <HAL_TIM_ConfigClockSource+0x288>)
 800705a:	4293      	cmp	r3, r2
 800705c:	f000 8247 	beq.w	80074ee <HAL_TIM_ConfigClockSource+0x5ea>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a4a      	ldr	r2, [pc, #296]	; (8007190 <HAL_TIM_ConfigClockSource+0x28c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	f000 8241 	beq.w	80074ee <HAL_TIM_ConfigClockSource+0x5ea>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a48      	ldr	r2, [pc, #288]	; (8007194 <HAL_TIM_ConfigClockSource+0x290>)
 8007072:	4293      	cmp	r3, r2
 8007074:	f000 823b 	beq.w	80074ee <HAL_TIM_ConfigClockSource+0x5ea>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a46      	ldr	r2, [pc, #280]	; (8007198 <HAL_TIM_ConfigClockSource+0x294>)
 800707e:	4293      	cmp	r3, r2
 8007080:	f000 8235 	beq.w	80074ee <HAL_TIM_ConfigClockSource+0x5ea>
 8007084:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8007088:	483c      	ldr	r0, [pc, #240]	; (800717c <HAL_TIM_ConfigClockSource+0x278>)
 800708a:	f7f9 fec6 	bl	8000e1a <assert_failed>
      break;
 800708e:	e22e      	b.n	80074ee <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a3a      	ldr	r2, [pc, #232]	; (8007180 <HAL_TIM_ConfigClockSource+0x27c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d01d      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x1d2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a2:	d018      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x1d2>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a36      	ldr	r2, [pc, #216]	; (8007184 <HAL_TIM_ConfigClockSource+0x280>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x1d2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a35      	ldr	r2, [pc, #212]	; (8007188 <HAL_TIM_ConfigClockSource+0x284>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00e      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x1d2>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a33      	ldr	r2, [pc, #204]	; (800718c <HAL_TIM_ConfigClockSource+0x288>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x1d2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a32      	ldr	r2, [pc, #200]	; (8007190 <HAL_TIM_ConfigClockSource+0x28c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d004      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x1d2>
 80070cc:	f241 41ca 	movw	r1, #5322	; 0x14ca
 80070d0:	482a      	ldr	r0, [pc, #168]	; (800717c <HAL_TIM_ConfigClockSource+0x278>)
 80070d2:	f7f9 fea2 	bl	8000e1a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d013      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x202>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e6:	d00e      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x202>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070f0:	d009      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x202>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070fa:	d004      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x202>
 80070fc:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8007100:	481e      	ldr	r0, [pc, #120]	; (800717c <HAL_TIM_ConfigClockSource+0x278>)
 8007102:	f7f9 fe8a 	bl	8000e1a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800710e:	d014      	beq.n	800713a <HAL_TIM_ConfigClockSource+0x236>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d010      	beq.n	800713a <HAL_TIM_ConfigClockSource+0x236>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00c      	beq.n	800713a <HAL_TIM_ConfigClockSource+0x236>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d008      	beq.n	800713a <HAL_TIM_ConfigClockSource+0x236>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b0a      	cmp	r3, #10
 800712e:	d004      	beq.n	800713a <HAL_TIM_ConfigClockSource+0x236>
 8007130:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8007134:	4811      	ldr	r0, [pc, #68]	; (800717c <HAL_TIM_ConfigClockSource+0x278>)
 8007136:	f7f9 fe70 	bl	8000e1a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	2b0f      	cmp	r3, #15
 8007140:	d904      	bls.n	800714c <HAL_TIM_ConfigClockSource+0x248>
 8007142:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8007146:	480d      	ldr	r0, [pc, #52]	; (800717c <HAL_TIM_ConfigClockSource+0x278>)
 8007148:	f7f9 fe67 	bl	8000e1a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	6899      	ldr	r1, [r3, #8]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f000 fb04 	bl	8007768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800716e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	609a      	str	r2, [r3, #8]
      break;
 8007178:	e1ba      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x5ec>
 800717a:	bf00      	nop
 800717c:	0800f980 	.word	0x0800f980
 8007180:	40010000 	.word	0x40010000
 8007184:	40000400 	.word	0x40000400
 8007188:	40000800 	.word	0x40000800
 800718c:	40000c00 	.word	0x40000c00
 8007190:	40014000 	.word	0x40014000
 8007194:	40014400 	.word	0x40014400
 8007198:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a8a      	ldr	r2, [pc, #552]	; (80073cc <HAL_TIM_ConfigClockSource+0x4c8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d018      	beq.n	80071d8 <HAL_TIM_ConfigClockSource+0x2d4>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ae:	d013      	beq.n	80071d8 <HAL_TIM_ConfigClockSource+0x2d4>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a86      	ldr	r2, [pc, #536]	; (80073d0 <HAL_TIM_ConfigClockSource+0x4cc>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d00e      	beq.n	80071d8 <HAL_TIM_ConfigClockSource+0x2d4>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a85      	ldr	r2, [pc, #532]	; (80073d4 <HAL_TIM_ConfigClockSource+0x4d0>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d009      	beq.n	80071d8 <HAL_TIM_ConfigClockSource+0x2d4>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a83      	ldr	r2, [pc, #524]	; (80073d8 <HAL_TIM_ConfigClockSource+0x4d4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d004      	beq.n	80071d8 <HAL_TIM_ConfigClockSource+0x2d4>
 80071ce:	f241 41e2 	movw	r1, #5346	; 0x14e2
 80071d2:	4882      	ldr	r0, [pc, #520]	; (80073dc <HAL_TIM_ConfigClockSource+0x4d8>)
 80071d4:	f7f9 fe21 	bl	8000e1a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d013      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0x304>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e8:	d00e      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0x304>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f2:	d009      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0x304>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071fc:	d004      	beq.n	8007208 <HAL_TIM_ConfigClockSource+0x304>
 80071fe:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8007202:	4876      	ldr	r0, [pc, #472]	; (80073dc <HAL_TIM_ConfigClockSource+0x4d8>)
 8007204:	f7f9 fe09 	bl	8000e1a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007210:	d014      	beq.n	800723c <HAL_TIM_ConfigClockSource+0x338>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d010      	beq.n	800723c <HAL_TIM_ConfigClockSource+0x338>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00c      	beq.n	800723c <HAL_TIM_ConfigClockSource+0x338>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b02      	cmp	r3, #2
 8007228:	d008      	beq.n	800723c <HAL_TIM_ConfigClockSource+0x338>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	2b0a      	cmp	r3, #10
 8007230:	d004      	beq.n	800723c <HAL_TIM_ConfigClockSource+0x338>
 8007232:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8007236:	4869      	ldr	r0, [pc, #420]	; (80073dc <HAL_TIM_ConfigClockSource+0x4d8>)
 8007238:	f7f9 fdef 	bl	8000e1a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	2b0f      	cmp	r3, #15
 8007242:	d904      	bls.n	800724e <HAL_TIM_ConfigClockSource+0x34a>
 8007244:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8007248:	4864      	ldr	r0, [pc, #400]	; (80073dc <HAL_TIM_ConfigClockSource+0x4d8>)
 800724a:	f7f9 fde6 	bl	8000e1a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6818      	ldr	r0, [r3, #0]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	6899      	ldr	r1, [r3, #8]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	f000 fa83 	bl	8007768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007270:	609a      	str	r2, [r3, #8]
      break;
 8007272:	e13d      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a54      	ldr	r2, [pc, #336]	; (80073cc <HAL_TIM_ConfigClockSource+0x4c8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d01d      	beq.n	80072ba <HAL_TIM_ConfigClockSource+0x3b6>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007286:	d018      	beq.n	80072ba <HAL_TIM_ConfigClockSource+0x3b6>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a50      	ldr	r2, [pc, #320]	; (80073d0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <HAL_TIM_ConfigClockSource+0x3b6>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a4f      	ldr	r2, [pc, #316]	; (80073d4 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d00e      	beq.n	80072ba <HAL_TIM_ConfigClockSource+0x3b6>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a4d      	ldr	r2, [pc, #308]	; (80073d8 <HAL_TIM_ConfigClockSource+0x4d4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d009      	beq.n	80072ba <HAL_TIM_ConfigClockSource+0x3b6>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a4d      	ldr	r2, [pc, #308]	; (80073e0 <HAL_TIM_ConfigClockSource+0x4dc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d004      	beq.n	80072ba <HAL_TIM_ConfigClockSource+0x3b6>
 80072b0:	f241 41f6 	movw	r1, #5366	; 0x14f6
 80072b4:	4849      	ldr	r0, [pc, #292]	; (80073dc <HAL_TIM_ConfigClockSource+0x4d8>)
 80072b6:	f7f9 fdb0 	bl	8000e1a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c2:	d014      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x3ea>
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d010      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x3ea>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00c      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x3ea>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d008      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x3ea>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b0a      	cmp	r3, #10
 80072e2:	d004      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x3ea>
 80072e4:	f241 41f9 	movw	r1, #5369	; 0x14f9
 80072e8:	483c      	ldr	r0, [pc, #240]	; (80073dc <HAL_TIM_ConfigClockSource+0x4d8>)
 80072ea:	f7f9 fd96 	bl	8000e1a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	2b0f      	cmp	r3, #15
 80072f4:	d904      	bls.n	8007300 <HAL_TIM_ConfigClockSource+0x3fc>
 80072f6:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80072fa:	4838      	ldr	r0, [pc, #224]	; (80073dc <HAL_TIM_ConfigClockSource+0x4d8>)
 80072fc:	f7f9 fd8d 	bl	8000e1a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	6859      	ldr	r1, [r3, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	461a      	mov	r2, r3
 800730e:	f000 f9b1 	bl	8007674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2150      	movs	r1, #80	; 0x50
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fa0a 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 800731e:	e0e7      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a29      	ldr	r2, [pc, #164]	; (80073cc <HAL_TIM_ConfigClockSource+0x4c8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d01d      	beq.n	8007366 <HAL_TIM_ConfigClockSource+0x462>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007332:	d018      	beq.n	8007366 <HAL_TIM_ConfigClockSource+0x462>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a25      	ldr	r2, [pc, #148]	; (80073d0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d013      	beq.n	8007366 <HAL_TIM_ConfigClockSource+0x462>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a24      	ldr	r2, [pc, #144]	; (80073d4 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d00e      	beq.n	8007366 <HAL_TIM_ConfigClockSource+0x462>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a22      	ldr	r2, [pc, #136]	; (80073d8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d009      	beq.n	8007366 <HAL_TIM_ConfigClockSource+0x462>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a22      	ldr	r2, [pc, #136]	; (80073e0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d004      	beq.n	8007366 <HAL_TIM_ConfigClockSource+0x462>
 800735c:	f241 5106 	movw	r1, #5382	; 0x1506
 8007360:	481e      	ldr	r0, [pc, #120]	; (80073dc <HAL_TIM_ConfigClockSource+0x4d8>)
 8007362:	f7f9 fd5a 	bl	8000e1a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800736e:	d014      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x496>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d010      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x496>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00c      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x496>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	2b02      	cmp	r3, #2
 8007386:	d008      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x496>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b0a      	cmp	r3, #10
 800738e:	d004      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x496>
 8007390:	f241 5109 	movw	r1, #5385	; 0x1509
 8007394:	4811      	ldr	r0, [pc, #68]	; (80073dc <HAL_TIM_ConfigClockSource+0x4d8>)
 8007396:	f7f9 fd40 	bl	8000e1a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	2b0f      	cmp	r3, #15
 80073a0:	d904      	bls.n	80073ac <HAL_TIM_ConfigClockSource+0x4a8>
 80073a2:	f241 510a 	movw	r1, #5386	; 0x150a
 80073a6:	480d      	ldr	r0, [pc, #52]	; (80073dc <HAL_TIM_ConfigClockSource+0x4d8>)
 80073a8:	f7f9 fd37 	bl	8000e1a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	6859      	ldr	r1, [r3, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	461a      	mov	r2, r3
 80073ba:	f000 f98a 	bl	80076d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2160      	movs	r1, #96	; 0x60
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f9b4 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 80073ca:	e091      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x5ec>
 80073cc:	40010000 	.word	0x40010000
 80073d0:	40000400 	.word	0x40000400
 80073d4:	40000800 	.word	0x40000800
 80073d8:	40000c00 	.word	0x40000c00
 80073dc:	0800f980 	.word	0x0800f980
 80073e0:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a48      	ldr	r2, [pc, #288]	; (800750c <HAL_TIM_ConfigClockSource+0x608>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d01d      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x526>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f6:	d018      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x526>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a44      	ldr	r2, [pc, #272]	; (8007510 <HAL_TIM_ConfigClockSource+0x60c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d013      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x526>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a43      	ldr	r2, [pc, #268]	; (8007514 <HAL_TIM_ConfigClockSource+0x610>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d00e      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x526>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a41      	ldr	r2, [pc, #260]	; (8007518 <HAL_TIM_ConfigClockSource+0x614>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d009      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x526>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a40      	ldr	r2, [pc, #256]	; (800751c <HAL_TIM_ConfigClockSource+0x618>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d004      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x526>
 8007420:	f241 5116 	movw	r1, #5398	; 0x1516
 8007424:	483e      	ldr	r0, [pc, #248]	; (8007520 <HAL_TIM_ConfigClockSource+0x61c>)
 8007426:	f7f9 fcf8 	bl	8000e1a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007432:	d014      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x55a>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d010      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x55a>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00c      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x55a>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d008      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x55a>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2b0a      	cmp	r3, #10
 8007452:	d004      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x55a>
 8007454:	f241 5119 	movw	r1, #5401	; 0x1519
 8007458:	4831      	ldr	r0, [pc, #196]	; (8007520 <HAL_TIM_ConfigClockSource+0x61c>)
 800745a:	f7f9 fcde 	bl	8000e1a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	2b0f      	cmp	r3, #15
 8007464:	d904      	bls.n	8007470 <HAL_TIM_ConfigClockSource+0x56c>
 8007466:	f241 511a 	movw	r1, #5402	; 0x151a
 800746a:	482d      	ldr	r0, [pc, #180]	; (8007520 <HAL_TIM_ConfigClockSource+0x61c>)
 800746c:	f7f9 fcd5 	bl	8000e1a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	6859      	ldr	r1, [r3, #4]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	461a      	mov	r2, r3
 800747e:	f000 f8f9 	bl	8007674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2140      	movs	r1, #64	; 0x40
 8007488:	4618      	mov	r0, r3
 800748a:	f000 f952 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 800748e:	e02f      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1d      	ldr	r2, [pc, #116]	; (800750c <HAL_TIM_ConfigClockSource+0x608>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d01d      	beq.n	80074d6 <HAL_TIM_ConfigClockSource+0x5d2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a2:	d018      	beq.n	80074d6 <HAL_TIM_ConfigClockSource+0x5d2>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a19      	ldr	r2, [pc, #100]	; (8007510 <HAL_TIM_ConfigClockSource+0x60c>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d013      	beq.n	80074d6 <HAL_TIM_ConfigClockSource+0x5d2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a18      	ldr	r2, [pc, #96]	; (8007514 <HAL_TIM_ConfigClockSource+0x610>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d00e      	beq.n	80074d6 <HAL_TIM_ConfigClockSource+0x5d2>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a16      	ldr	r2, [pc, #88]	; (8007518 <HAL_TIM_ConfigClockSource+0x614>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d009      	beq.n	80074d6 <HAL_TIM_ConfigClockSource+0x5d2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a15      	ldr	r2, [pc, #84]	; (800751c <HAL_TIM_ConfigClockSource+0x618>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d004      	beq.n	80074d6 <HAL_TIM_ConfigClockSource+0x5d2>
 80074cc:	f241 5129 	movw	r1, #5417	; 0x1529
 80074d0:	4813      	ldr	r0, [pc, #76]	; (8007520 <HAL_TIM_ConfigClockSource+0x61c>)
 80074d2:	f7f9 fca2 	bl	8000e1a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4619      	mov	r1, r3
 80074e0:	4610      	mov	r0, r2
 80074e2:	f000 f926 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 80074e6:	e003      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	73fb      	strb	r3, [r7, #15]
      break;
 80074ec:	e000      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 80074ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	40010000 	.word	0x40010000
 8007510:	40000400 	.word	0x40000400
 8007514:	40000800 	.word	0x40000800
 8007518:	40000c00 	.word	0x40000c00
 800751c:	40014000 	.word	0x40014000
 8007520:	0800f980 	.word	0x0800f980

08007524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a34      	ldr	r2, [pc, #208]	; (8007658 <TIM_Base_SetConfig+0xe4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00f      	beq.n	80075ac <TIM_Base_SetConfig+0x38>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007592:	d00b      	beq.n	80075ac <TIM_Base_SetConfig+0x38>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a31      	ldr	r2, [pc, #196]	; (800765c <TIM_Base_SetConfig+0xe8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d007      	beq.n	80075ac <TIM_Base_SetConfig+0x38>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a30      	ldr	r2, [pc, #192]	; (8007660 <TIM_Base_SetConfig+0xec>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d003      	beq.n	80075ac <TIM_Base_SetConfig+0x38>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a2f      	ldr	r2, [pc, #188]	; (8007664 <TIM_Base_SetConfig+0xf0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d108      	bne.n	80075be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a25      	ldr	r2, [pc, #148]	; (8007658 <TIM_Base_SetConfig+0xe4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d01b      	beq.n	80075fe <TIM_Base_SetConfig+0x8a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075cc:	d017      	beq.n	80075fe <TIM_Base_SetConfig+0x8a>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a22      	ldr	r2, [pc, #136]	; (800765c <TIM_Base_SetConfig+0xe8>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d013      	beq.n	80075fe <TIM_Base_SetConfig+0x8a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a21      	ldr	r2, [pc, #132]	; (8007660 <TIM_Base_SetConfig+0xec>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00f      	beq.n	80075fe <TIM_Base_SetConfig+0x8a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a20      	ldr	r2, [pc, #128]	; (8007664 <TIM_Base_SetConfig+0xf0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00b      	beq.n	80075fe <TIM_Base_SetConfig+0x8a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a1f      	ldr	r2, [pc, #124]	; (8007668 <TIM_Base_SetConfig+0xf4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d007      	beq.n	80075fe <TIM_Base_SetConfig+0x8a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a1e      	ldr	r2, [pc, #120]	; (800766c <TIM_Base_SetConfig+0xf8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d003      	beq.n	80075fe <TIM_Base_SetConfig+0x8a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a1d      	ldr	r2, [pc, #116]	; (8007670 <TIM_Base_SetConfig+0xfc>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d108      	bne.n	8007610 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a08      	ldr	r2, [pc, #32]	; (8007658 <TIM_Base_SetConfig+0xe4>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d103      	bne.n	8007644 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	615a      	str	r2, [r3, #20]
}
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	40010000 	.word	0x40010000
 800765c:	40000400 	.word	0x40000400
 8007660:	40000800 	.word	0x40000800
 8007664:	40000c00 	.word	0x40000c00
 8007668:	40014000 	.word	0x40014000
 800766c:	40014400 	.word	0x40014400
 8007670:	40014800 	.word	0x40014800

08007674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f023 0201 	bic.w	r2, r3, #1
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800769e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f023 030a 	bic.w	r3, r3, #10
 80076b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	621a      	str	r2, [r3, #32]
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b087      	sub	sp, #28
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f023 0210 	bic.w	r2, r3, #16
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	031b      	lsls	r3, r3, #12
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800770e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	621a      	str	r2, [r3, #32]
}
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4313      	orrs	r3, r2
 8007750:	f043 0307 	orr.w	r3, r3, #7
 8007754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	609a      	str	r2, [r3, #8]
}
 800775c:	bf00      	nop
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	021a      	lsls	r2, r3, #8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	431a      	orrs	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4313      	orrs	r3, r2
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	609a      	str	r2, [r3, #8]
}
 800779c:	bf00      	nop
 800779e:	371c      	adds	r7, #28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4a2a      	ldr	r2, [pc, #168]	; (8007860 <TIM_CCxChannelCmd+0xb8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d020      	beq.n	80077fe <TIM_CCxChannelCmd+0x56>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c2:	d01c      	beq.n	80077fe <TIM_CCxChannelCmd+0x56>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4a27      	ldr	r2, [pc, #156]	; (8007864 <TIM_CCxChannelCmd+0xbc>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d018      	beq.n	80077fe <TIM_CCxChannelCmd+0x56>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4a26      	ldr	r2, [pc, #152]	; (8007868 <TIM_CCxChannelCmd+0xc0>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d014      	beq.n	80077fe <TIM_CCxChannelCmd+0x56>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4a25      	ldr	r2, [pc, #148]	; (800786c <TIM_CCxChannelCmd+0xc4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d010      	beq.n	80077fe <TIM_CCxChannelCmd+0x56>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4a24      	ldr	r2, [pc, #144]	; (8007870 <TIM_CCxChannelCmd+0xc8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00c      	beq.n	80077fe <TIM_CCxChannelCmd+0x56>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4a23      	ldr	r2, [pc, #140]	; (8007874 <TIM_CCxChannelCmd+0xcc>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d008      	beq.n	80077fe <TIM_CCxChannelCmd+0x56>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4a22      	ldr	r2, [pc, #136]	; (8007878 <TIM_CCxChannelCmd+0xd0>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d004      	beq.n	80077fe <TIM_CCxChannelCmd+0x56>
 80077f4:	f641 5194 	movw	r1, #7572	; 0x1d94
 80077f8:	4820      	ldr	r0, [pc, #128]	; (800787c <TIM_CCxChannelCmd+0xd4>)
 80077fa:	f7f9 fb0e 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d010      	beq.n	8007826 <TIM_CCxChannelCmd+0x7e>
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b04      	cmp	r3, #4
 8007808:	d00d      	beq.n	8007826 <TIM_CCxChannelCmd+0x7e>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b08      	cmp	r3, #8
 800780e:	d00a      	beq.n	8007826 <TIM_CCxChannelCmd+0x7e>
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b0c      	cmp	r3, #12
 8007814:	d007      	beq.n	8007826 <TIM_CCxChannelCmd+0x7e>
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b3c      	cmp	r3, #60	; 0x3c
 800781a:	d004      	beq.n	8007826 <TIM_CCxChannelCmd+0x7e>
 800781c:	f641 5195 	movw	r1, #7573	; 0x1d95
 8007820:	4816      	ldr	r0, [pc, #88]	; (800787c <TIM_CCxChannelCmd+0xd4>)
 8007822:	f7f9 fafa 	bl	8000e1a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f003 031f 	and.w	r3, r3, #31
 800782c:	2201      	movs	r2, #1
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a1a      	ldr	r2, [r3, #32]
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	43db      	mvns	r3, r3
 800783c:	401a      	ands	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6a1a      	ldr	r2, [r3, #32]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f003 031f 	and.w	r3, r3, #31
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	fa01 f303 	lsl.w	r3, r1, r3
 8007852:	431a      	orrs	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	621a      	str	r2, [r3, #32]
}
 8007858:	bf00      	nop
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40010000 	.word	0x40010000
 8007864:	40000400 	.word	0x40000400
 8007868:	40000800 	.word	0x40000800
 800786c:	40000c00 	.word	0x40000c00
 8007870:	40014000 	.word	0x40014000
 8007874:	40014400 	.word	0x40014400
 8007878:	40014800 	.word	0x40014800
 800787c:	0800f980 	.word	0x0800f980

08007880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a55      	ldr	r2, [pc, #340]	; (80079e4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d018      	beq.n	80078c6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789c:	d013      	beq.n	80078c6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a51      	ldr	r2, [pc, #324]	; (80079e8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00e      	beq.n	80078c6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a4f      	ldr	r2, [pc, #316]	; (80079ec <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d009      	beq.n	80078c6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a4e      	ldr	r2, [pc, #312]	; (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d004      	beq.n	80078c6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80078bc:	f240 71b1 	movw	r1, #1969	; 0x7b1
 80078c0:	484c      	ldr	r0, [pc, #304]	; (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80078c2:	f7f9 faaa 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d020      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b10      	cmp	r3, #16
 80078d4:	d01c      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b20      	cmp	r3, #32
 80078dc:	d018      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b30      	cmp	r3, #48	; 0x30
 80078e4:	d014      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b40      	cmp	r3, #64	; 0x40
 80078ec:	d010      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b50      	cmp	r3, #80	; 0x50
 80078f4:	d00c      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b60      	cmp	r3, #96	; 0x60
 80078fc:	d008      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b70      	cmp	r3, #112	; 0x70
 8007904:	d004      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007906:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800790a:	483a      	ldr	r0, [pc, #232]	; (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800790c:	f7f9 fa85 	bl	8000e1a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2b80      	cmp	r3, #128	; 0x80
 8007916:	d008      	beq.n	800792a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007920:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8007924:	4833      	ldr	r0, [pc, #204]	; (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007926:	f7f9 fa78 	bl	8000e1a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007934:	2302      	movs	r3, #2
 8007936:	e050      	b.n	80079da <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1b      	ldr	r2, [pc, #108]	; (80079e4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d018      	beq.n	80079ae <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007984:	d013      	beq.n	80079ae <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d00e      	beq.n	80079ae <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a15      	ldr	r2, [pc, #84]	; (80079ec <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d009      	beq.n	80079ae <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a14      	ldr	r2, [pc, #80]	; (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d004      	beq.n	80079ae <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a13      	ldr	r2, [pc, #76]	; (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d10c      	bne.n	80079c8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	4313      	orrs	r3, r2
 80079be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	40010000 	.word	0x40010000
 80079e8:	40000400 	.word	0x40000400
 80079ec:	40000800 	.word	0x40000800
 80079f0:	40000c00 	.word	0x40000c00
 80079f4:	0800f9b8 	.word	0x0800f9b8
 80079f8:	40014000 	.word	0x40014000

080079fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a24:	b084      	sub	sp, #16
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	f107 001c 	add.w	r0, r7, #28
 8007a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d122      	bne.n	8007a82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d105      	bne.n	8007a76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fbee 	bl	8009258 <USB_CoreReset>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]
 8007a80:	e01a      	b.n	8007ab8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 fbe2 	bl	8009258 <USB_CoreReset>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d106      	bne.n	8007aac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8007aaa:	e005      	b.n	8007ab8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d10b      	bne.n	8007ad6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f043 0206 	orr.w	r2, r3, #6
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f043 0220 	orr.w	r2, r3, #32
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ae2:	b004      	add	sp, #16
 8007ae4:	4770      	bx	lr
	...

08007ae8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	4613      	mov	r3, r2
 8007af4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d165      	bne.n	8007bc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	4a41      	ldr	r2, [pc, #260]	; (8007c04 <USB_SetTurnaroundTime+0x11c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d906      	bls.n	8007b12 <USB_SetTurnaroundTime+0x2a>
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4a40      	ldr	r2, [pc, #256]	; (8007c08 <USB_SetTurnaroundTime+0x120>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d202      	bcs.n	8007b12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007b0c:	230f      	movs	r3, #15
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	e062      	b.n	8007bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	4a3c      	ldr	r2, [pc, #240]	; (8007c08 <USB_SetTurnaroundTime+0x120>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d306      	bcc.n	8007b28 <USB_SetTurnaroundTime+0x40>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	4a3b      	ldr	r2, [pc, #236]	; (8007c0c <USB_SetTurnaroundTime+0x124>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d202      	bcs.n	8007b28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007b22:	230e      	movs	r3, #14
 8007b24:	617b      	str	r3, [r7, #20]
 8007b26:	e057      	b.n	8007bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4a38      	ldr	r2, [pc, #224]	; (8007c0c <USB_SetTurnaroundTime+0x124>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d306      	bcc.n	8007b3e <USB_SetTurnaroundTime+0x56>
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4a37      	ldr	r2, [pc, #220]	; (8007c10 <USB_SetTurnaroundTime+0x128>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d202      	bcs.n	8007b3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007b38:	230d      	movs	r3, #13
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	e04c      	b.n	8007bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4a33      	ldr	r2, [pc, #204]	; (8007c10 <USB_SetTurnaroundTime+0x128>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d306      	bcc.n	8007b54 <USB_SetTurnaroundTime+0x6c>
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4a32      	ldr	r2, [pc, #200]	; (8007c14 <USB_SetTurnaroundTime+0x12c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d802      	bhi.n	8007b54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007b4e:	230c      	movs	r3, #12
 8007b50:	617b      	str	r3, [r7, #20]
 8007b52:	e041      	b.n	8007bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	4a2f      	ldr	r2, [pc, #188]	; (8007c14 <USB_SetTurnaroundTime+0x12c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d906      	bls.n	8007b6a <USB_SetTurnaroundTime+0x82>
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	4a2e      	ldr	r2, [pc, #184]	; (8007c18 <USB_SetTurnaroundTime+0x130>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d802      	bhi.n	8007b6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007b64:	230b      	movs	r3, #11
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	e036      	b.n	8007bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	4a2a      	ldr	r2, [pc, #168]	; (8007c18 <USB_SetTurnaroundTime+0x130>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d906      	bls.n	8007b80 <USB_SetTurnaroundTime+0x98>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	4a29      	ldr	r2, [pc, #164]	; (8007c1c <USB_SetTurnaroundTime+0x134>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d802      	bhi.n	8007b80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007b7a:	230a      	movs	r3, #10
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	e02b      	b.n	8007bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4a26      	ldr	r2, [pc, #152]	; (8007c1c <USB_SetTurnaroundTime+0x134>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d906      	bls.n	8007b96 <USB_SetTurnaroundTime+0xae>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4a25      	ldr	r2, [pc, #148]	; (8007c20 <USB_SetTurnaroundTime+0x138>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d202      	bcs.n	8007b96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007b90:	2309      	movs	r3, #9
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	e020      	b.n	8007bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	4a21      	ldr	r2, [pc, #132]	; (8007c20 <USB_SetTurnaroundTime+0x138>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d306      	bcc.n	8007bac <USB_SetTurnaroundTime+0xc4>
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	4a20      	ldr	r2, [pc, #128]	; (8007c24 <USB_SetTurnaroundTime+0x13c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d802      	bhi.n	8007bac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ba6:	2308      	movs	r3, #8
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	e015      	b.n	8007bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4a1d      	ldr	r2, [pc, #116]	; (8007c24 <USB_SetTurnaroundTime+0x13c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d906      	bls.n	8007bc2 <USB_SetTurnaroundTime+0xda>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4a1c      	ldr	r2, [pc, #112]	; (8007c28 <USB_SetTurnaroundTime+0x140>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d202      	bcs.n	8007bc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007bbc:	2307      	movs	r3, #7
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	e00a      	b.n	8007bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007bc2:	2306      	movs	r3, #6
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	e007      	b.n	8007bd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d102      	bne.n	8007bd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007bce:	2309      	movs	r3, #9
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	e001      	b.n	8007bd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007bd4:	2309      	movs	r3, #9
 8007bd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	029b      	lsls	r3, r3, #10
 8007bec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	00d8acbf 	.word	0x00d8acbf
 8007c08:	00e4e1c0 	.word	0x00e4e1c0
 8007c0c:	00f42400 	.word	0x00f42400
 8007c10:	01067380 	.word	0x01067380
 8007c14:	011a499f 	.word	0x011a499f
 8007c18:	01312cff 	.word	0x01312cff
 8007c1c:	014ca43f 	.word	0x014ca43f
 8007c20:	016e3600 	.word	0x016e3600
 8007c24:	01a6ab1f 	.word	0x01a6ab1f
 8007c28:	01e84800 	.word	0x01e84800

08007c2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f043 0201 	orr.w	r2, r3, #1
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f023 0201 	bic.w	r2, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c8c:	78fb      	ldrb	r3, [r7, #3]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d115      	bne.n	8007cbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	f7f9 fffc 	bl	8001c9c <HAL_Delay>
      ms++;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 fa45 	bl	800913a <USB_GetMode>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d01e      	beq.n	8007cf4 <USB_SetCurrentMode+0x84>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b31      	cmp	r3, #49	; 0x31
 8007cba:	d9f0      	bls.n	8007c9e <USB_SetCurrentMode+0x2e>
 8007cbc:	e01a      	b.n	8007cf4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d115      	bne.n	8007cf0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	f7f9 ffe3 	bl	8001c9c <HAL_Delay>
      ms++;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 fa2c 	bl	800913a <USB_GetMode>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d005      	beq.n	8007cf4 <USB_SetCurrentMode+0x84>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b31      	cmp	r3, #49	; 0x31
 8007cec:	d9f0      	bls.n	8007cd0 <USB_SetCurrentMode+0x60>
 8007cee:	e001      	b.n	8007cf4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e005      	b.n	8007d00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b32      	cmp	r3, #50	; 0x32
 8007cf8:	d101      	bne.n	8007cfe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e000      	b.n	8007d00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d08:	b084      	sub	sp, #16
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b086      	sub	sp, #24
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d22:	2300      	movs	r3, #0
 8007d24:	613b      	str	r3, [r7, #16]
 8007d26:	e009      	b.n	8007d3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3340      	adds	r3, #64	; 0x40
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	2200      	movs	r2, #0
 8007d34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	613b      	str	r3, [r7, #16]
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b0e      	cmp	r3, #14
 8007d40:	d9f2      	bls.n	8007d28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d11c      	bne.n	8007d82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d56:	f043 0302 	orr.w	r3, r3, #2
 8007d5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8007d80:	e00b      	b.n	8007d9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007da0:	461a      	mov	r2, r3
 8007da2:	2300      	movs	r3, #0
 8007da4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dac:	4619      	mov	r1, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db4:	461a      	mov	r2, r3
 8007db6:	680b      	ldr	r3, [r1, #0]
 8007db8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d10c      	bne.n	8007dda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d104      	bne.n	8007dd0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f965 	bl	8008098 <USB_SetDevSpeed>
 8007dce:	e008      	b.n	8007de2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f960 	bl	8008098 <USB_SetDevSpeed>
 8007dd8:	e003      	b.n	8007de2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007dda:	2103      	movs	r1, #3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f95b 	bl	8008098 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007de2:	2110      	movs	r1, #16
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f8f3 	bl	8007fd0 <USB_FlushTxFifo>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f91f 	bl	8008038 <USB_FlushRxFifo>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e16:	461a      	mov	r2, r3
 8007e18:	2300      	movs	r3, #0
 8007e1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e22:	461a      	mov	r2, r3
 8007e24:	2300      	movs	r3, #0
 8007e26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]
 8007e2c:	e043      	b.n	8007eb6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e44:	d118      	bne.n	8007e78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10a      	bne.n	8007e62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e58:	461a      	mov	r2, r3
 8007e5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	e013      	b.n	8007e8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	e008      	b.n	8007e8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e84:	461a      	mov	r2, r3
 8007e86:	2300      	movs	r3, #0
 8007e88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e96:	461a      	mov	r2, r3
 8007e98:	2300      	movs	r3, #0
 8007e9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007eae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	613b      	str	r3, [r7, #16]
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d3b7      	bcc.n	8007e2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	613b      	str	r3, [r7, #16]
 8007ec2:	e043      	b.n	8007f4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eda:	d118      	bne.n	8007f0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10a      	bne.n	8007ef8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	e013      	b.n	8007f20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f04:	461a      	mov	r2, r3
 8007f06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	e008      	b.n	8007f20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	2300      	movs	r3, #0
 8007f30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	613b      	str	r3, [r7, #16]
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d3b7      	bcc.n	8007ec4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d105      	bne.n	8007f88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	f043 0210 	orr.w	r2, r3, #16
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	699a      	ldr	r2, [r3, #24]
 8007f8c:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <USB_DevInit+0x2c4>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	f043 0208 	orr.w	r2, r3, #8
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d107      	bne.n	8007fbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fb4:	f043 0304 	orr.w	r3, r3, #4
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fc8:	b004      	add	sp, #16
 8007fca:	4770      	bx	lr
 8007fcc:	803c3800 	.word	0x803c3800

08007fd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4a13      	ldr	r2, [pc, #76]	; (8008034 <USB_FlushTxFifo+0x64>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d901      	bls.n	8007ff0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e01b      	b.n	8008028 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	daf2      	bge.n	8007fde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	019b      	lsls	r3, r3, #6
 8008000:	f043 0220 	orr.w	r2, r3, #32
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3301      	adds	r3, #1
 800800c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4a08      	ldr	r2, [pc, #32]	; (8008034 <USB_FlushTxFifo+0x64>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d901      	bls.n	800801a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e006      	b.n	8008028 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	2b20      	cmp	r3, #32
 8008024:	d0f0      	beq.n	8008008 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	00030d40 	.word	0x00030d40

08008038 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3301      	adds	r3, #1
 8008048:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4a11      	ldr	r2, [pc, #68]	; (8008094 <USB_FlushRxFifo+0x5c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d901      	bls.n	8008056 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e018      	b.n	8008088 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	daf2      	bge.n	8008044 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2210      	movs	r2, #16
 8008066:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3301      	adds	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4a08      	ldr	r2, [pc, #32]	; (8008094 <USB_FlushRxFifo+0x5c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d901      	bls.n	800807a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e006      	b.n	8008088 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f003 0310 	and.w	r3, r3, #16
 8008082:	2b10      	cmp	r3, #16
 8008084:	d0f0      	beq.n	8008068 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	00030d40 	.word	0x00030d40

08008098 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080b8:	4313      	orrs	r3, r2
 80080ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b087      	sub	sp, #28
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f003 0306 	and.w	r3, r3, #6
 80080e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80080ea:	2300      	movs	r3, #0
 80080ec:	75fb      	strb	r3, [r7, #23]
 80080ee:	e00a      	b.n	8008106 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d002      	beq.n	80080fc <USB_GetDevSpeed+0x32>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b06      	cmp	r3, #6
 80080fa:	d102      	bne.n	8008102 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80080fc:	2302      	movs	r3, #2
 80080fe:	75fb      	strb	r3, [r7, #23]
 8008100:	e001      	b.n	8008106 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008102:	230f      	movs	r3, #15
 8008104:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008106:	7dfb      	ldrb	r3, [r7, #23]
}
 8008108:	4618      	mov	r0, r3
 800810a:	371c      	adds	r7, #28
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	785b      	ldrb	r3, [r3, #1]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d13a      	bne.n	80081a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008136:	69da      	ldr	r2, [r3, #28]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	f003 030f 	and.w	r3, r3, #15
 8008140:	2101      	movs	r1, #1
 8008142:	fa01 f303 	lsl.w	r3, r1, r3
 8008146:	b29b      	uxth	r3, r3
 8008148:	68f9      	ldr	r1, [r7, #12]
 800814a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800814e:	4313      	orrs	r3, r2
 8008150:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d155      	bne.n	8008214 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	791b      	ldrb	r3, [r3, #4]
 8008182:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008184:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	059b      	lsls	r3, r3, #22
 800818a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800818c:	4313      	orrs	r3, r2
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	440a      	add	r2, r1
 8008196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800819a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800819e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	e036      	b.n	8008214 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ac:	69da      	ldr	r2, [r3, #28]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	2101      	movs	r1, #1
 80081b8:	fa01 f303 	lsl.w	r3, r1, r3
 80081bc:	041b      	lsls	r3, r3, #16
 80081be:	68f9      	ldr	r1, [r7, #12]
 80081c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081c4:	4313      	orrs	r3, r2
 80081c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d11a      	bne.n	8008214 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	791b      	ldrb	r3, [r3, #4]
 80081f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081fa:	430b      	orrs	r3, r1
 80081fc:	4313      	orrs	r3, r2
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	0151      	lsls	r1, r2, #5
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	440a      	add	r2, r1
 8008206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800820a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800820e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008212:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
	...

08008224 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d161      	bne.n	8008304 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008256:	d11f      	bne.n	8008298 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	0151      	lsls	r1, r2, #5
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	440a      	add	r2, r1
 800826e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008272:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008276:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	0151      	lsls	r1, r2, #5
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	440a      	add	r2, r1
 800828e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008292:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008296:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	f003 030f 	and.w	r3, r3, #15
 80082a8:	2101      	movs	r1, #1
 80082aa:	fa01 f303 	lsl.w	r3, r1, r3
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	43db      	mvns	r3, r3
 80082b2:	68f9      	ldr	r1, [r7, #12]
 80082b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082b8:	4013      	ands	r3, r2
 80082ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c2:	69da      	ldr	r2, [r3, #28]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	f003 030f 	and.w	r3, r3, #15
 80082cc:	2101      	movs	r1, #1
 80082ce:	fa01 f303 	lsl.w	r3, r1, r3
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	43db      	mvns	r3, r3
 80082d6:	68f9      	ldr	r1, [r7, #12]
 80082d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082dc:	4013      	ands	r3, r2
 80082de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	0159      	lsls	r1, r3, #5
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	440b      	add	r3, r1
 80082f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082fa:	4619      	mov	r1, r3
 80082fc:	4b35      	ldr	r3, [pc, #212]	; (80083d4 <USB_DeactivateEndpoint+0x1b0>)
 80082fe:	4013      	ands	r3, r2
 8008300:	600b      	str	r3, [r1, #0]
 8008302:	e060      	b.n	80083c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800831a:	d11f      	bne.n	800835c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	0151      	lsls	r1, r2, #5
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	440a      	add	r2, r1
 8008332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008336:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800833a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	440a      	add	r2, r1
 8008352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008356:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800835a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	f003 030f 	and.w	r3, r3, #15
 800836c:	2101      	movs	r1, #1
 800836e:	fa01 f303 	lsl.w	r3, r1, r3
 8008372:	041b      	lsls	r3, r3, #16
 8008374:	43db      	mvns	r3, r3
 8008376:	68f9      	ldr	r1, [r7, #12]
 8008378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800837c:	4013      	ands	r3, r2
 800837e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008386:	69da      	ldr	r2, [r3, #28]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f003 030f 	and.w	r3, r3, #15
 8008390:	2101      	movs	r1, #1
 8008392:	fa01 f303 	lsl.w	r3, r1, r3
 8008396:	041b      	lsls	r3, r3, #16
 8008398:	43db      	mvns	r3, r3
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083a0:	4013      	ands	r3, r2
 80083a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	0159      	lsls	r1, r3, #5
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	440b      	add	r3, r1
 80083ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083be:	4619      	mov	r1, r3
 80083c0:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <USB_DeactivateEndpoint+0x1b4>)
 80083c2:	4013      	ands	r3, r2
 80083c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	ec337800 	.word	0xec337800
 80083d8:	eff37800 	.word	0xeff37800

080083dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08a      	sub	sp, #40	; 0x28
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	4613      	mov	r3, r2
 80083e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	f040 815c 	bne.w	80086b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d132      	bne.n	800846c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	0151      	lsls	r1, r2, #5
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	440a      	add	r2, r1
 800841c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008420:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008424:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	4413      	add	r3, r2
 8008432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	0151      	lsls	r1, r2, #5
 800843c:	69fa      	ldr	r2, [r7, #28]
 800843e:	440a      	add	r2, r1
 8008440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	4413      	add	r3, r2
 8008452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	0151      	lsls	r1, r2, #5
 800845c:	69fa      	ldr	r2, [r7, #28]
 800845e:	440a      	add	r2, r1
 8008460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008464:	0cdb      	lsrs	r3, r3, #19
 8008466:	04db      	lsls	r3, r3, #19
 8008468:	6113      	str	r3, [r2, #16]
 800846a:	e074      	b.n	8008556 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	440a      	add	r2, r1
 8008482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008486:	0cdb      	lsrs	r3, r3, #19
 8008488:	04db      	lsls	r3, r3, #19
 800848a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	69fa      	ldr	r2, [r7, #28]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	6999      	ldr	r1, [r3, #24]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	440b      	add	r3, r1
 80084c8:	1e59      	subs	r1, r3, #1
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80084d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80084d4:	4b9d      	ldr	r3, [pc, #628]	; (800874c <USB_EPStartXfer+0x370>)
 80084d6:	400b      	ands	r3, r1
 80084d8:	69b9      	ldr	r1, [r7, #24]
 80084da:	0148      	lsls	r0, r1, #5
 80084dc:	69f9      	ldr	r1, [r7, #28]
 80084de:	4401      	add	r1, r0
 80084e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80084e4:	4313      	orrs	r3, r2
 80084e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f4:	691a      	ldr	r2, [r3, #16]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084fe:	69b9      	ldr	r1, [r7, #24]
 8008500:	0148      	lsls	r0, r1, #5
 8008502:	69f9      	ldr	r1, [r7, #28]
 8008504:	4401      	add	r1, r0
 8008506:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800850a:	4313      	orrs	r3, r2
 800850c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	791b      	ldrb	r3, [r3, #4]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d11f      	bne.n	8008556 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	0151      	lsls	r1, r2, #5
 8008528:	69fa      	ldr	r2, [r7, #28]
 800852a:	440a      	add	r2, r1
 800852c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008530:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008534:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	0151      	lsls	r1, r2, #5
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	440a      	add	r2, r1
 800854c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008550:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008554:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d14b      	bne.n	80085f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d009      	beq.n	8008578 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008570:	461a      	mov	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	791b      	ldrb	r3, [r3, #4]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d128      	bne.n	80085d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800858c:	2b00      	cmp	r3, #0
 800858e:	d110      	bne.n	80085b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	e00f      	b.n	80085d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	69fa      	ldr	r2, [r7, #28]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	0151      	lsls	r1, r2, #5
 80085e4:	69fa      	ldr	r2, [r7, #28]
 80085e6:	440a      	add	r2, r1
 80085e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085f0:	6013      	str	r3, [r2, #0]
 80085f2:	e133      	b.n	800885c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	440a      	add	r2, r1
 800860a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800860e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008612:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	791b      	ldrb	r3, [r3, #4]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d015      	beq.n	8008648 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 811b 	beq.w	800885c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800862c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	f003 030f 	and.w	r3, r3, #15
 8008636:	2101      	movs	r1, #1
 8008638:	fa01 f303 	lsl.w	r3, r1, r3
 800863c:	69f9      	ldr	r1, [r7, #28]
 800863e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008642:	4313      	orrs	r3, r2
 8008644:	634b      	str	r3, [r1, #52]	; 0x34
 8008646:	e109      	b.n	800885c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008654:	2b00      	cmp	r3, #0
 8008656:	d110      	bne.n	800867a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	4413      	add	r3, r2
 8008660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	0151      	lsls	r1, r2, #5
 800866a:	69fa      	ldr	r2, [r7, #28]
 800866c:	440a      	add	r2, r1
 800866e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008672:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	e00f      	b.n	800869a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	0151      	lsls	r1, r2, #5
 800868c:	69fa      	ldr	r2, [r7, #28]
 800868e:	440a      	add	r2, r1
 8008690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008698:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	6919      	ldr	r1, [r3, #16]
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	781a      	ldrb	r2, [r3, #0]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	b298      	uxth	r0, r3
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	4603      	mov	r3, r0
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 fade 	bl	8008c70 <USB_WritePacket>
 80086b4:	e0d2      	b.n	800885c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	0151      	lsls	r1, r2, #5
 80086c8:	69fa      	ldr	r2, [r7, #28]
 80086ca:	440a      	add	r2, r1
 80086cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086d0:	0cdb      	lsrs	r3, r3, #19
 80086d2:	04db      	lsls	r3, r3, #19
 80086d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	0151      	lsls	r1, r2, #5
 80086e8:	69fa      	ldr	r2, [r7, #28]
 80086ea:	440a      	add	r2, r1
 80086ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d126      	bne.n	8008750 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	4413      	add	r3, r2
 800870a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008718:	69b9      	ldr	r1, [r7, #24]
 800871a:	0148      	lsls	r0, r1, #5
 800871c:	69f9      	ldr	r1, [r7, #28]
 800871e:	4401      	add	r1, r0
 8008720:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008724:	4313      	orrs	r3, r2
 8008726:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	0151      	lsls	r1, r2, #5
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	440a      	add	r2, r1
 800873e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008742:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008746:	6113      	str	r3, [r2, #16]
 8008748:	e03a      	b.n	80087c0 <USB_EPStartXfer+0x3e4>
 800874a:	bf00      	nop
 800874c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	699a      	ldr	r2, [r3, #24]
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	4413      	add	r3, r2
 800875a:	1e5a      	subs	r2, r3, #1
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	fbb2 f3f3 	udiv	r3, r2, r3
 8008764:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	8afa      	ldrh	r2, [r7, #22]
 800876c:	fb03 f202 	mul.w	r2, r3, r2
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	4413      	add	r3, r2
 800877c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008780:	691a      	ldr	r2, [r3, #16]
 8008782:	8afb      	ldrh	r3, [r7, #22]
 8008784:	04d9      	lsls	r1, r3, #19
 8008786:	4b38      	ldr	r3, [pc, #224]	; (8008868 <USB_EPStartXfer+0x48c>)
 8008788:	400b      	ands	r3, r1
 800878a:	69b9      	ldr	r1, [r7, #24]
 800878c:	0148      	lsls	r0, r1, #5
 800878e:	69f9      	ldr	r1, [r7, #28]
 8008790:	4401      	add	r1, r0
 8008792:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008796:	4313      	orrs	r3, r2
 8008798:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a6:	691a      	ldr	r2, [r3, #16]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087b0:	69b9      	ldr	r1, [r7, #24]
 80087b2:	0148      	lsls	r0, r1, #5
 80087b4:	69f9      	ldr	r1, [r7, #28]
 80087b6:	4401      	add	r1, r0
 80087b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087bc:	4313      	orrs	r3, r2
 80087be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d10d      	bne.n	80087e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d009      	beq.n	80087e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6919      	ldr	r1, [r3, #16]
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087de:	460a      	mov	r2, r1
 80087e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	791b      	ldrb	r3, [r3, #4]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d128      	bne.n	800883c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d110      	bne.n	800881c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	440a      	add	r2, r1
 8008810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008814:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	e00f      	b.n	800883c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	4413      	add	r3, r2
 8008824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	69fa      	ldr	r2, [r7, #28]
 8008830:	440a      	add	r2, r1
 8008832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800883a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69ba      	ldr	r2, [r7, #24]
 800884c:	0151      	lsls	r1, r2, #5
 800884e:	69fa      	ldr	r2, [r7, #28]
 8008850:	440a      	add	r2, r1
 8008852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008856:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800885a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3720      	adds	r7, #32
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	1ff80000 	.word	0x1ff80000

0800886c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	4613      	mov	r3, r2
 8008878:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	785b      	ldrb	r3, [r3, #1]
 8008888:	2b01      	cmp	r3, #1
 800888a:	f040 80ce 	bne.w	8008a2a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d132      	bne.n	80088fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	0151      	lsls	r1, r2, #5
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	440a      	add	r2, r1
 80088ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	0151      	lsls	r1, r2, #5
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	440a      	add	r2, r1
 80088d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	0151      	lsls	r1, r2, #5
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	440a      	add	r2, r1
 80088f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f4:	0cdb      	lsrs	r3, r3, #19
 80088f6:	04db      	lsls	r3, r3, #19
 80088f8:	6113      	str	r3, [r2, #16]
 80088fa:	e04e      	b.n	800899a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	0151      	lsls	r1, r2, #5
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	440a      	add	r2, r1
 8008912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008916:	0cdb      	lsrs	r3, r3, #19
 8008918:	04db      	lsls	r3, r3, #19
 800891a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	0151      	lsls	r1, r2, #5
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	440a      	add	r2, r1
 8008932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008936:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800893a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800893e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	699a      	ldr	r2, [r3, #24]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	429a      	cmp	r2, r3
 800894a:	d903      	bls.n	8008954 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	4413      	add	r3, r2
 800895c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	0151      	lsls	r1, r2, #5
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	440a      	add	r2, r1
 800896a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800896e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008980:	691a      	ldr	r2, [r3, #16]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800898a:	6939      	ldr	r1, [r7, #16]
 800898c:	0148      	lsls	r0, r1, #5
 800898e:	6979      	ldr	r1, [r7, #20]
 8008990:	4401      	add	r1, r0
 8008992:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008996:	4313      	orrs	r3, r2
 8008998:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800899a:	79fb      	ldrb	r3, [r7, #7]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d11e      	bne.n	80089de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d009      	beq.n	80089bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b4:	461a      	mov	r2, r3
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	e097      	b.n	8008b0e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	0151      	lsls	r1, r2, #5
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	440a      	add	r2, r1
 80089f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 8083 	beq.w	8008b0e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	f003 030f 	and.w	r3, r3, #15
 8008a18:	2101      	movs	r1, #1
 8008a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a1e:	6979      	ldr	r1, [r7, #20]
 8008a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a24:	4313      	orrs	r3, r2
 8008a26:	634b      	str	r3, [r1, #52]	; 0x34
 8008a28:	e071      	b.n	8008b0e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	0151      	lsls	r1, r2, #5
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	440a      	add	r2, r1
 8008a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a44:	0cdb      	lsrs	r3, r3, #19
 8008a46:	04db      	lsls	r3, r3, #19
 8008a48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	0151      	lsls	r1, r2, #5
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	440a      	add	r2, r1
 8008a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a6c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	68da      	ldr	r2, [r3, #12]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	0151      	lsls	r1, r2, #5
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	440a      	add	r2, r1
 8008a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008aa4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab2:	691a      	ldr	r2, [r3, #16]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008abc:	6939      	ldr	r1, [r7, #16]
 8008abe:	0148      	lsls	r0, r1, #5
 8008ac0:	6979      	ldr	r1, [r7, #20]
 8008ac2:	4401      	add	r1, r0
 8008ac4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008acc:	79fb      	ldrb	r3, [r7, #7]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d10d      	bne.n	8008aee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d009      	beq.n	8008aee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6919      	ldr	r1, [r3, #16]
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aea:	460a      	mov	r2, r1
 8008aec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	0151      	lsls	r1, r2, #5
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	440a      	add	r2, r1
 8008b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	371c      	adds	r7, #28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	785b      	ldrb	r3, [r3, #1]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d14a      	bne.n	8008bd0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b52:	f040 8086 	bne.w	8008c62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	7812      	ldrb	r2, [r2, #0]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	7812      	ldrb	r2, [r2, #0]
 8008b8e:	0151      	lsls	r1, r2, #5
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	440a      	add	r2, r1
 8008b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f242 7210 	movw	r2, #10000	; 0x2710
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d902      	bls.n	8008bb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8008bb2:	e056      	b.n	8008c62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bcc:	d0e7      	beq.n	8008b9e <USB_EPStopXfer+0x82>
 8008bce:	e048      	b.n	8008c62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be8:	d13b      	bne.n	8008c62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	7812      	ldrb	r2, [r2, #0]
 8008bfe:	0151      	lsls	r1, r2, #5
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	440a      	add	r2, r1
 8008c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	7812      	ldrb	r2, [r2, #0]
 8008c22:	0151      	lsls	r1, r2, #5
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	440a      	add	r2, r1
 8008c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3301      	adds	r3, #1
 8008c36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d902      	bls.n	8008c48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	75fb      	strb	r3, [r7, #23]
          break;
 8008c46:	e00c      	b.n	8008c62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c60:	d0e7      	beq.n	8008c32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	371c      	adds	r7, #28
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b089      	sub	sp, #36	; 0x24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	460b      	mov	r3, r1
 8008c80:	71fb      	strb	r3, [r7, #7]
 8008c82:	4613      	mov	r3, r2
 8008c84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d123      	bne.n	8008cde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c96:	88bb      	ldrh	r3, [r7, #4]
 8008c98:	3303      	adds	r3, #3
 8008c9a:	089b      	lsrs	r3, r3, #2
 8008c9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	e018      	b.n	8008cd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	031a      	lsls	r2, r3, #12
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d3e2      	bcc.n	8008ca4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3724      	adds	r7, #36	; 0x24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b08b      	sub	sp, #44	; 0x2c
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d02:	88fb      	ldrh	r3, [r7, #6]
 8008d04:	089b      	lsrs	r3, r3, #2
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d0a:	88fb      	ldrh	r3, [r7, #6]
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d12:	2300      	movs	r3, #0
 8008d14:	623b      	str	r3, [r7, #32]
 8008d16:	e014      	b.n	8008d42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	3301      	adds	r3, #1
 8008d28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	3301      	adds	r3, #1
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	3301      	adds	r3, #1
 8008d3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	623b      	str	r3, [r7, #32]
 8008d42:	6a3a      	ldr	r2, [r7, #32]
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d3e6      	bcc.n	8008d18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d4a:	8bfb      	ldrh	r3, [r7, #30]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01e      	beq.n	8008d8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d50:	2300      	movs	r3, #0
 8008d52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	f107 0310 	add.w	r3, r7, #16
 8008d60:	6812      	ldr	r2, [r2, #0]
 8008d62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	00db      	lsls	r3, r3, #3
 8008d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	701a      	strb	r2, [r3, #0]
      i++;
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	3301      	adds	r3, #1
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008d82:	8bfb      	ldrh	r3, [r7, #30]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d88:	8bfb      	ldrh	r3, [r7, #30]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1ea      	bne.n	8008d64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	372c      	adds	r7, #44	; 0x2c
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	785b      	ldrb	r3, [r3, #1]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d12c      	bne.n	8008e12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	db12      	blt.n	8008df0 <USB_EPSetStall+0x54>
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00f      	beq.n	8008df0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	0151      	lsls	r1, r2, #5
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	440a      	add	r2, r1
 8008de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008dee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	0151      	lsls	r1, r2, #5
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	440a      	add	r2, r1
 8008e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	e02b      	b.n	8008e6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	015a      	lsls	r2, r3, #5
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	4413      	add	r3, r2
 8008e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	db12      	blt.n	8008e4a <USB_EPSetStall+0xae>
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00f      	beq.n	8008e4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	0151      	lsls	r1, r2, #5
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	440a      	add	r2, r1
 8008e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	0151      	lsls	r1, r2, #5
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	440a      	add	r2, r1
 8008e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	785b      	ldrb	r3, [r3, #1]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d128      	bne.n	8008ee6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008eb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	791b      	ldrb	r3, [r3, #4]
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d003      	beq.n	8008ec4 <USB_EPClearStall+0x4c>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	791b      	ldrb	r3, [r3, #4]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d138      	bne.n	8008f36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	0151      	lsls	r1, r2, #5
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	440a      	add	r2, r1
 8008eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ee2:	6013      	str	r3, [r2, #0]
 8008ee4:	e027      	b.n	8008f36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	0151      	lsls	r1, r2, #5
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	440a      	add	r2, r1
 8008efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	791b      	ldrb	r3, [r3, #4]
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d003      	beq.n	8008f16 <USB_EPClearStall+0x9e>
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	791b      	ldrb	r3, [r3, #4]
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d10f      	bne.n	8008f36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	0151      	lsls	r1, r2, #5
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	440a      	add	r2, r1
 8008f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	011b      	lsls	r3, r3, #4
 8008f74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008f78:	68f9      	ldr	r1, [r7, #12]
 8008f7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008faa:	f023 0303 	bic.w	r3, r3, #3
 8008fae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fbe:	f023 0302 	bic.w	r3, r3, #2
 8008fc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b085      	sub	sp, #20
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fec:	f023 0303 	bic.w	r3, r3, #3
 8008ff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009000:	f043 0302 	orr.w	r3, r3, #2
 8009004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	4013      	ands	r3, r2
 800902a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800902c:	68fb      	ldr	r3, [r7, #12]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800903a:	b480      	push	{r7}
 800903c:	b085      	sub	sp, #20
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	4013      	ands	r3, r2
 800905c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	0c1b      	lsrs	r3, r3, #16
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800906e:	b480      	push	{r7}
 8009070:	b085      	sub	sp, #20
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908a:	69db      	ldr	r3, [r3, #28]
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	4013      	ands	r3, r2
 8009090:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	b29b      	uxth	r3, r3
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b085      	sub	sp, #20
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	460b      	mov	r3, r1
 80090ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	015a      	lsls	r2, r3, #5
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	4413      	add	r3, r2
 80090ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4013      	ands	r3, r2
 80090ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090d0:	68bb      	ldr	r3, [r7, #8]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090de:	b480      	push	{r7}
 80090e0:	b087      	sub	sp, #28
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	460b      	mov	r3, r1
 80090e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009100:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	f003 030f 	and.w	r3, r3, #15
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	fa22 f303 	lsr.w	r3, r2, r3
 800910e:	01db      	lsls	r3, r3, #7
 8009110:	b2db      	uxtb	r3, r3
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	4313      	orrs	r3, r2
 8009116:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	4413      	add	r3, r2
 8009120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	4013      	ands	r3, r2
 800912a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800912c:	68bb      	ldr	r3, [r7, #8]
}
 800912e:	4618      	mov	r0, r3
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	f003 0301 	and.w	r3, r3, #1
}
 800914a:	4618      	mov	r0, r3
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009156:	b480      	push	{r7}
 8009158:	b085      	sub	sp, #20
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009170:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009174:	f023 0307 	bic.w	r3, r3, #7
 8009178:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800918c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800919c:	b480      	push	{r7}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	460b      	mov	r3, r1
 80091a6:	607a      	str	r2, [r7, #4]
 80091a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	333c      	adds	r3, #60	; 0x3c
 80091b2:	3304      	adds	r3, #4
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	4a26      	ldr	r2, [pc, #152]	; (8009254 <USB_EP0_OutStart+0xb8>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d90a      	bls.n	80091d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091d0:	d101      	bne.n	80091d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	e037      	b.n	8009246 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091dc:	461a      	mov	r2, r3
 80091de:	2300      	movs	r3, #0
 80091e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009204:	f043 0318 	orr.w	r3, r3, #24
 8009208:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009218:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800921c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800921e:	7afb      	ldrb	r3, [r7, #11]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d10f      	bne.n	8009244 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922a:	461a      	mov	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800923e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009242:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	371c      	adds	r7, #28
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	4f54300a 	.word	0x4f54300a

08009258 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3301      	adds	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4a13      	ldr	r2, [pc, #76]	; (80092bc <USB_CoreReset+0x64>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d901      	bls.n	8009276 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e01b      	b.n	80092ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	daf2      	bge.n	8009264 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	f043 0201 	orr.w	r2, r3, #1
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3301      	adds	r3, #1
 8009292:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4a09      	ldr	r2, [pc, #36]	; (80092bc <USB_CoreReset+0x64>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d901      	bls.n	80092a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e006      	b.n	80092ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d0f0      	beq.n	800928e <USB_CoreReset+0x36>

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	00030d40 	.word	0x00030d40

080092c0 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency an desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 80092c8:	4a18      	ldr	r2, [pc, #96]	; (800932c <si5351_Init+0x6c>)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 80092ce:	21ff      	movs	r1, #255	; 0xff
 80092d0:	2003      	movs	r0, #3
 80092d2:	f000 fa0d 	bl	80096f0 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 80092d6:	2180      	movs	r1, #128	; 0x80
 80092d8:	2010      	movs	r0, #16
 80092da:	f000 fa09 	bl	80096f0 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 80092de:	2180      	movs	r1, #128	; 0x80
 80092e0:	2011      	movs	r0, #17
 80092e2:	f000 fa05 	bl	80096f0 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 80092e6:	2180      	movs	r1, #128	; 0x80
 80092e8:	2012      	movs	r0, #18
 80092ea:	f000 fa01 	bl	80096f0 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 80092ee:	2180      	movs	r1, #128	; 0x80
 80092f0:	2013      	movs	r0, #19
 80092f2:	f000 f9fd 	bl	80096f0 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 80092f6:	2180      	movs	r1, #128	; 0x80
 80092f8:	2014      	movs	r0, #20
 80092fa:	f000 f9f9 	bl	80096f0 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 80092fe:	2180      	movs	r1, #128	; 0x80
 8009300:	2015      	movs	r0, #21
 8009302:	f000 f9f5 	bl	80096f0 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 8009306:	2180      	movs	r1, #128	; 0x80
 8009308:	2016      	movs	r0, #22
 800930a:	f000 f9f1 	bl	80096f0 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 800930e:	2180      	movs	r1, #128	; 0x80
 8009310:	2017      	movs	r0, #23
 8009312:	f000 f9ed 	bl	80096f0 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 8009316:	23c0      	movs	r3, #192	; 0xc0
 8009318:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	4619      	mov	r1, r3
 800931e:	20b7      	movs	r0, #183	; 0xb7
 8009320:	f000 f9e6 	bl	80096f0 <si5351_write>
}
 8009324:	bf00      	nop
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	20000418 	.word	0x20000418

08009330 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 8009330:	b580      	push	{r7, lr}
 8009332:	b08c      	sub	sp, #48	; 0x30
 8009334:	af02      	add	r7, sp, #8
 8009336:	4603      	mov	r3, r0
 8009338:	6039      	str	r1, [r7, #0]
 800933a:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 800934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009350:	01da      	lsls	r2, r3, #7
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	01d9      	lsls	r1, r3, #7
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	fb91 f3f3 	sdiv	r3, r1, r3
 800935c:	4413      	add	r3, r2
 800935e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8009362:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	01db      	lsls	r3, r3, #7
 8009368:	69fa      	ldr	r2, [r7, #28]
 800936a:	fb93 f2f2 	sdiv	r2, r3, r2
 800936e:	69f9      	ldr	r1, [r7, #28]
 8009370:	fb01 f202 	mul.w	r2, r1, r2
 8009374:	1a9b      	subs	r3, r3, r2
 8009376:	617b      	str	r3, [r7, #20]
    P3 = denom;
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <si5351_SetupPLL+0x56>
 8009382:	231a      	movs	r3, #26
 8009384:	e000      	b.n	8009388 <si5351_SetupPLL+0x58>
 8009386:	2322      	movs	r3, #34	; 0x22
 8009388:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 800938a:	7bf8      	ldrb	r0, [r7, #15]
 800938c:	2300      	movs	r3, #0
 800938e:	9301      	str	r3, [sp, #4]
 8009390:	2300      	movs	r3, #0
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	69b9      	ldr	r1, [r7, #24]
 800939a:	f000 f9d1 	bl	8009740 <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 800939e:	21a0      	movs	r1, #160	; 0xa0
 80093a0:	20b1      	movs	r0, #177	; 0xb1
 80093a2:	f000 f9a5 	bl	80096f0 <si5351_write>
}
 80093a6:	bf00      	nop
 80093a8:	3728      	adds	r7, #40	; 0x28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b08c      	sub	sp, #48	; 0x30
 80093b2:	af02      	add	r7, sp, #8
 80093b4:	603b      	str	r3, [r7, #0]
 80093b6:	4603      	mov	r3, r0
 80093b8:	71fb      	strb	r3, [r7, #7]
 80093ba:	460b      	mov	r3, r1
 80093bc:	71bb      	strb	r3, [r7, #6]
 80093be:	4613      	mov	r3, r2
 80093c0:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 80093da:	79fb      	ldrb	r3, [r7, #7]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d901      	bls.n	80093e4 <si5351_SetupOutput+0x36>
        return 1;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e08d      	b.n	8009500 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10a      	bne.n	8009402 <si5351_SetupOutput+0x54>
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	2b07      	cmp	r3, #7
 80093f0:	dd05      	ble.n	80093fe <si5351_SetupOutput+0x50>
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	2b08      	cmp	r3, #8
 80093f6:	d104      	bne.n	8009402 <si5351_SetupOutput+0x54>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 80093fe:	2302      	movs	r3, #2
 8009400:	e07e      	b.n	8009500 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	2b04      	cmp	r3, #4
 8009406:	d109      	bne.n	800941c <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	623b      	str	r3, [r7, #32]
        P2 = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 8009410:	2301      	movs	r3, #1
 8009412:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 8009414:	2303      	movs	r3, #3
 8009416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800941a:	e016      	b.n	800944a <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	01da      	lsls	r2, r3, #7
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	01d9      	lsls	r1, r3, #7
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	fb91 f3f3 	sdiv	r3, r1, r3
 800942a:	4413      	add	r3, r2
 800942c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8009430:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	01db      	lsls	r3, r3, #7
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	fb93 f2f2 	sdiv	r2, r3, r2
 800943c:	68b9      	ldr	r1, [r7, #8]
 800943e:	fb01 f202 	mul.w	r2, r1, r2
 8009442:	1a9b      	subs	r3, r3, r2
 8009444:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	757b      	strb	r3, [r7, #21]
    switch (output) {
 8009456:	79fb      	ldrb	r3, [r7, #7]
 8009458:	2b02      	cmp	r3, #2
 800945a:	d014      	beq.n	8009486 <si5351_SetupOutput+0xd8>
 800945c:	2b02      	cmp	r3, #2
 800945e:	dc19      	bgt.n	8009494 <si5351_SetupOutput+0xe6>
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <si5351_SetupOutput+0xbc>
 8009464:	2b01      	cmp	r3, #1
 8009466:	d007      	beq.n	8009478 <si5351_SetupOutput+0xca>
 8009468:	e014      	b.n	8009494 <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 800946a:	232a      	movs	r3, #42	; 0x2a
 800946c:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 800946e:	23a5      	movs	r3, #165	; 0xa5
 8009470:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 8009472:	2310      	movs	r3, #16
 8009474:	757b      	strb	r3, [r7, #21]
        break;
 8009476:	e00d      	b.n	8009494 <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 8009478:	2332      	movs	r3, #50	; 0x32
 800947a:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 800947c:	23a6      	movs	r3, #166	; 0xa6
 800947e:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 8009480:	2311      	movs	r3, #17
 8009482:	757b      	strb	r3, [r7, #21]
        break;
 8009484:	e006      	b.n	8009494 <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 8009486:	233a      	movs	r3, #58	; 0x3a
 8009488:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 800948a:	23a7      	movs	r3, #167	; 0xa7
 800948c:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 800948e:	2312      	movs	r3, #18
 8009490:	757b      	strb	r3, [r7, #21]
        break;
 8009492:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 8009494:	797b      	ldrb	r3, [r7, #5]
 8009496:	f043 030c 	orr.w	r3, r3, #12
 800949a:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 800949c:	79bb      	ldrb	r3, [r7, #6]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d103      	bne.n	80094aa <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 80094a2:	7d3b      	ldrb	r3, [r7, #20]
 80094a4:	f043 0320 	orr.w	r3, r3, #32
 80094a8:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d009      	beq.n	80094c6 <si5351_SetupOutput+0x118>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <si5351_SetupOutput+0x110>
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	2b04      	cmp	r3, #4
 80094bc:	d103      	bne.n	80094c6 <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 80094be:	7d3b      	ldrb	r3, [r7, #20]
 80094c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c4:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 80094c6:	7d3a      	ldrb	r2, [r7, #20]
 80094c8:	7d7b      	ldrb	r3, [r7, #21]
 80094ca:	4611      	mov	r1, r2
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 f90f 	bl	80096f0 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	7c1b      	ldrb	r3, [r3, #16]
 80094d6:	7df8      	ldrb	r0, [r7, #23]
 80094d8:	9301      	str	r3, [sp, #4]
 80094da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	6a39      	ldr	r1, [r7, #32]
 80094e6:	f000 f92b 	bl	8009740 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 80094ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80094ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	7dbb      	ldrb	r3, [r7, #22]
 80094f6:	4611      	mov	r1, r2
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 f8f9 	bl	80096f0 <si5351_write>

    return 0;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3728      	adds	r7, #40	; 0x28
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 8009508:	b480      	push	{r7}
 800950a:	b08f      	sub	sp, #60	; 0x3c
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800951a:	da03      	bge.n	8009524 <si5351_Calc+0x1c>
 800951c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	e005      	b.n	8009530 <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	4a4f      	ldr	r2, [pc, #316]	; (8009664 <si5351_Calc+0x15c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	dd01      	ble.n	8009530 <si5351_Calc+0x28>
 800952c:	4b4d      	ldr	r3, [pc, #308]	; (8009664 <si5351_Calc+0x15c>)
 800952e:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	4a4b      	ldr	r2, [pc, #300]	; (8009668 <si5351_Calc+0x160>)
 800953a:	4293      	cmp	r3, r2
 800953c:	dc06      	bgt.n	800954c <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	019b      	lsls	r3, r3, #6
 8009542:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2206      	movs	r2, #6
 8009548:	741a      	strb	r2, [r3, #16]
 800954a:	e002      	b.n	8009552 <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - ((Fclk/1000000)*si5351Correction)/100;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	4a45      	ldr	r2, [pc, #276]	; (800966c <si5351_Calc+0x164>)
 8009556:	fb82 1203 	smull	r1, r2, r2, r3
 800955a:	1492      	asrs	r2, r2, #18
 800955c:	17db      	asrs	r3, r3, #31
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	4a43      	ldr	r2, [pc, #268]	; (8009670 <si5351_Calc+0x168>)
 8009562:	6812      	ldr	r2, [r2, #0]
 8009564:	fb02 f303 	mul.w	r3, r2, r3
 8009568:	4a42      	ldr	r2, [pc, #264]	; (8009674 <si5351_Calc+0x16c>)
 800956a:	fb82 1203 	smull	r1, r2, r2, r3
 800956e:	1152      	asrs	r2, r2, #5
 8009570:	17db      	asrs	r3, r3, #31
 8009572:	1a9b      	subs	r3, r3, r2
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	4413      	add	r3, r2
 8009578:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 800957a:	4b3f      	ldr	r3, [pc, #252]	; (8009678 <si5351_Calc+0x170>)
 800957c:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4a3e      	ldr	r2, [pc, #248]	; (800967c <si5351_Calc+0x174>)
 8009582:	4293      	cmp	r3, r2
 8009584:	dc22      	bgt.n	80095cc <si5351_Calc+0xc4>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 8009586:	2324      	movs	r3, #36	; 0x24
 8009588:	637b      	str	r3, [r7, #52]	; 0x34
        b = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	633b      	str	r3, [r7, #48]	; 0x30
        c = 1;
 800958e:	2301      	movs	r3, #1
 8009590:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t Fpll = 900000000;
 8009592:	4b3b      	ldr	r3, [pc, #236]	; (8009680 <si5351_Calc+0x178>)
 8009594:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	fb92 f3f3 	sdiv	r3, r2, r3
 800959e:	62bb      	str	r3, [r7, #40]	; 0x28
        t = (Fclk >> 20) + 1;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	151b      	asrs	r3, r3, #20
 80095a4:	3301      	adds	r3, #1
 80095a6:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	fb93 f2f2 	sdiv	r2, r3, r2
 80095b0:	68f9      	ldr	r1, [r7, #12]
 80095b2:	fb01 f202 	mul.w	r2, r1, r2
 80095b6:	1a9a      	subs	r2, r3, r2
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80095be:	627b      	str	r3, [r7, #36]	; 0x24
        z = Fclk / t;
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80095c8:	623b      	str	r3, [r7, #32]
 80095ca:	e032      	b.n	8009632 <si5351_Calc+0x12a>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4a2d      	ldr	r2, [pc, #180]	; (8009684 <si5351_Calc+0x17c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	dd02      	ble.n	80095da <si5351_Calc+0xd2>
            x = 4;
 80095d4:	2304      	movs	r3, #4
 80095d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80095d8:	e008      	b.n	80095ec <si5351_Calc+0xe4>
        } else if (Fclk >= 100000000) {
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	4a2a      	ldr	r2, [pc, #168]	; (8009688 <si5351_Calc+0x180>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	dd02      	ble.n	80095e8 <si5351_Calc+0xe0>
            x = 6;
 80095e2:	2306      	movs	r3, #6
 80095e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80095e6:	e001      	b.n	80095ec <si5351_Calc+0xe4>
        } else {
            x = 8;
 80095e8:	2308      	movs	r3, #8
 80095ea:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        y = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	627b      	str	r3, [r7, #36]	; 0x24
        z = 1;
 80095f0:	2301      	movs	r3, #1
 80095f2:	623b      	str	r3, [r7, #32]
        
        int32_t numerator = x*Fclk;
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	fb02 f303 	mul.w	r3, r2, r3
 80095fc:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	fb92 f3f3 	sdiv	r3, r2, r3
 8009606:	637b      	str	r3, [r7, #52]	; 0x34
        t = (Fxtal >> 20) + 1;
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	151b      	asrs	r3, r3, #20
 800960c:	3301      	adds	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	69fa      	ldr	r2, [r7, #28]
 8009614:	fb93 f2f2 	sdiv	r2, r3, r2
 8009618:	69f9      	ldr	r1, [r7, #28]
 800961a:	fb01 f202 	mul.w	r2, r1, r2
 800961e:	1a9a      	subs	r2, r3, r2
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	fb92 f3f3 	sdiv	r3, r2, r3
 8009626:	633b      	str	r3, [r7, #48]	; 0x30
        c = Fxtal / t;
 8009628:	69fa      	ldr	r2, [r7, #28]
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	fb92 f3f3 	sdiv	r3, r2, r3
 8009630:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    pll_conf->mult = a;
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009636:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800963c:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009642:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009648:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800964e:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a3a      	ldr	r2, [r7, #32]
 8009654:	60da      	str	r2, [r3, #12]
}
 8009656:	bf00      	nop
 8009658:	373c      	adds	r7, #60	; 0x3c
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	09896800 	.word	0x09896800
 8009668:	000f423f 	.word	0x000f423f
 800966c:	431bde83 	.word	0x431bde83
 8009670:	20000418 	.word	0x20000418
 8009674:	51eb851f 	.word	0x51eb851f
 8009678:	017d7840 	.word	0x017d7840
 800967c:	04d3f63f 	.word	0x04d3f63f
 8009680:	35a4e900 	.word	0x35a4e900
 8009684:	08f0d17f 	.word	0x08f0d17f
 8009688:	05f5e0ff 	.word	0x05f5e0ff

0800968c <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 800968c:	b580      	push	{r7, lr}
 800968e:	b08c      	sub	sp, #48	; 0x30
 8009690:	af02      	add	r7, sp, #8
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 8009698:	f107 0208 	add.w	r2, r7, #8
 800969c:	f107 031c 	add.w	r3, r7, #28
 80096a0:	4619      	mov	r1, r3
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7ff ff30 	bl	8009508 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 80096a8:	f107 031c 	add.w	r3, r7, #28
 80096ac:	4619      	mov	r1, r3
 80096ae:	2000      	movs	r0, #0
 80096b0:	f7ff fe3e 	bl	8009330 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 80096b4:	f107 0308 	add.w	r3, r7, #8
 80096b8:	78fa      	ldrb	r2, [r7, #3]
 80096ba:	2100      	movs	r1, #0
 80096bc:	9100      	str	r1, [sp, #0]
 80096be:	2100      	movs	r1, #0
 80096c0:	2000      	movs	r0, #0
 80096c2:	f7ff fe74 	bl	80093ae <si5351_SetupOutput>
}
 80096c6:	bf00      	nop
 80096c8:	3728      	adds	r7, #40	; 0x28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	4603      	mov	r3, r0
 80096d6:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	43db      	mvns	r3, r3
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	4619      	mov	r1, r3
 80096e0:	2003      	movs	r0, #3
 80096e2:	f000 f805 	bl	80096f0 <si5351_write>
}
 80096e6:	bf00      	nop
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
	...

080096f0 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af04      	add	r7, sp, #16
 80096f6:	4603      	mov	r3, r0
 80096f8:	460a      	mov	r2, r1
 80096fa:	71fb      	strb	r3, [r7, #7]
 80096fc:	4613      	mov	r3, r2
 80096fe:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 8009700:	bf00      	nop
 8009702:	f04f 33ff 	mov.w	r3, #4294967295
 8009706:	2203      	movs	r2, #3
 8009708:	21c0      	movs	r1, #192	; 0xc0
 800970a:	480c      	ldr	r0, [pc, #48]	; (800973c <si5351_write+0x4c>)
 800970c:	f7f9 f9da 	bl	8002ac4 <HAL_I2C_IsDeviceReady>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1f5      	bne.n	8009702 <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 8009716:	79fb      	ldrb	r3, [r7, #7]
 8009718:	b29a      	uxth	r2, r3
 800971a:	f04f 33ff 	mov.w	r3, #4294967295
 800971e:	9302      	str	r3, [sp, #8]
 8009720:	2301      	movs	r3, #1
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	1dbb      	adds	r3, r7, #6
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	2301      	movs	r3, #1
 800972a:	21c0      	movs	r1, #192	; 0xc0
 800972c:	4803      	ldr	r0, [pc, #12]	; (800973c <si5351_write+0x4c>)
 800972e:	f7f9 f8c3 	bl	80028b8 <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 8009732:	bf00      	nop
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	2000020c 	.word	0x2000020c

08009740 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	607a      	str	r2, [r7, #4]
 800974a:	603b      	str	r3, [r7, #0]
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	121b      	asrs	r3, r3, #8
 8009754:	b2da      	uxtb	r2, r3
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	4611      	mov	r1, r2
 800975a:	4618      	mov	r0, r3
 800975c:	f7ff ffc8 	bl	80096f0 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	3301      	adds	r3, #1
 8009764:	b2db      	uxtb	r3, r3
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	b2d2      	uxtb	r2, r2
 800976a:	4611      	mov	r1, r2
 800976c:	4618      	mov	r0, r3
 800976e:	f7ff ffbf 	bl	80096f0 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 8009772:	7bfb      	ldrb	r3, [r7, #15]
 8009774:	3302      	adds	r3, #2
 8009776:	b2d8      	uxtb	r0, r3
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	141b      	asrs	r3, r3, #16
 800977c:	b25b      	sxtb	r3, r3
 800977e:	f003 0303 	and.w	r3, r3, #3
 8009782:	b25a      	sxtb	r2, r3
 8009784:	7e3b      	ldrb	r3, [r7, #24]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	b25b      	sxtb	r3, r3
 800978a:	f003 030c 	and.w	r3, r3, #12
 800978e:	b25b      	sxtb	r3, r3
 8009790:	4313      	orrs	r3, r2
 8009792:	b25a      	sxtb	r2, r3
 8009794:	7f3b      	ldrb	r3, [r7, #28]
 8009796:	011b      	lsls	r3, r3, #4
 8009798:	b25b      	sxtb	r3, r3
 800979a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800979e:	b25b      	sxtb	r3, r3
 80097a0:	4313      	orrs	r3, r2
 80097a2:	b25b      	sxtb	r3, r3
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	4619      	mov	r1, r3
 80097a8:	f7ff ffa2 	bl	80096f0 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
 80097ae:	3303      	adds	r3, #3
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	121b      	asrs	r3, r3, #8
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	4619      	mov	r1, r3
 80097ba:	4610      	mov	r0, r2
 80097bc:	f7ff ff98 	bl	80096f0 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	3304      	adds	r3, #4
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	b2d2      	uxtb	r2, r2
 80097ca:	4611      	mov	r1, r2
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7ff ff8f 	bl	80096f0 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	3305      	adds	r3, #5
 80097d6:	b2d8      	uxtb	r0, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	131b      	asrs	r3, r3, #12
 80097dc:	b25b      	sxtb	r3, r3
 80097de:	f023 030f 	bic.w	r3, r3, #15
 80097e2:	b25a      	sxtb	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	141b      	asrs	r3, r3, #16
 80097e8:	b25b      	sxtb	r3, r3
 80097ea:	f003 030f 	and.w	r3, r3, #15
 80097ee:	b25b      	sxtb	r3, r3
 80097f0:	4313      	orrs	r3, r2
 80097f2:	b25b      	sxtb	r3, r3
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	4619      	mov	r1, r3
 80097f8:	f7ff ff7a 	bl	80096f0 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	3306      	adds	r3, #6
 8009800:	b2da      	uxtb	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	121b      	asrs	r3, r3, #8
 8009806:	b2db      	uxtb	r3, r3
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	f7ff ff70 	bl	80096f0 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	3307      	adds	r3, #7
 8009814:	b2db      	uxtb	r3, r3
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	b2d2      	uxtb	r2, r2
 800981a:	4611      	mov	r1, r2
 800981c:	4618      	mov	r0, r3
 800981e:	f7ff ff67 	bl	80096f0 <si5351_write>
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009838:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800983c:	f005 fa04 	bl	800ec48 <USBD_static_malloc>
 8009840:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d109      	bne.n	800985c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	32b0      	adds	r2, #176	; 0xb0
 8009852:	2100      	movs	r1, #0
 8009854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009858:	2302      	movs	r3, #2
 800985a:	e0d4      	b.n	8009a06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800985c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009860:	2100      	movs	r1, #0
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f005 fa7e 	bl	800ed64 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	32b0      	adds	r2, #176	; 0xb0
 8009872:	68f9      	ldr	r1, [r7, #12]
 8009874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	32b0      	adds	r2, #176	; 0xb0
 8009882:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	7c1b      	ldrb	r3, [r3, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d138      	bne.n	8009906 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009894:	4b5e      	ldr	r3, [pc, #376]	; (8009a10 <USBD_CDC_Init+0x1e4>)
 8009896:	7819      	ldrb	r1, [r3, #0]
 8009898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800989c:	2202      	movs	r2, #2
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f005 f8af 	bl	800ea02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80098a4:	4b5a      	ldr	r3, [pc, #360]	; (8009a10 <USBD_CDC_Init+0x1e4>)
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	f003 020f 	and.w	r2, r3, #15
 80098ac:	6879      	ldr	r1, [r7, #4]
 80098ae:	4613      	mov	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	440b      	add	r3, r1
 80098b8:	3324      	adds	r3, #36	; 0x24
 80098ba:	2201      	movs	r2, #1
 80098bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80098be:	4b55      	ldr	r3, [pc, #340]	; (8009a14 <USBD_CDC_Init+0x1e8>)
 80098c0:	7819      	ldrb	r1, [r3, #0]
 80098c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098c6:	2202      	movs	r2, #2
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f005 f89a 	bl	800ea02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80098ce:	4b51      	ldr	r3, [pc, #324]	; (8009a14 <USBD_CDC_Init+0x1e8>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	f003 020f 	and.w	r2, r3, #15
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	4613      	mov	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	440b      	add	r3, r1
 80098e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098e6:	2201      	movs	r2, #1
 80098e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80098ea:	4b4b      	ldr	r3, [pc, #300]	; (8009a18 <USBD_CDC_Init+0x1ec>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	f003 020f 	and.w	r2, r3, #15
 80098f2:	6879      	ldr	r1, [r7, #4]
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	440b      	add	r3, r1
 80098fe:	3326      	adds	r3, #38	; 0x26
 8009900:	2210      	movs	r2, #16
 8009902:	801a      	strh	r2, [r3, #0]
 8009904:	e035      	b.n	8009972 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009906:	4b42      	ldr	r3, [pc, #264]	; (8009a10 <USBD_CDC_Init+0x1e4>)
 8009908:	7819      	ldrb	r1, [r3, #0]
 800990a:	2340      	movs	r3, #64	; 0x40
 800990c:	2202      	movs	r2, #2
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f005 f877 	bl	800ea02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009914:	4b3e      	ldr	r3, [pc, #248]	; (8009a10 <USBD_CDC_Init+0x1e4>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	f003 020f 	and.w	r2, r3, #15
 800991c:	6879      	ldr	r1, [r7, #4]
 800991e:	4613      	mov	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	440b      	add	r3, r1
 8009928:	3324      	adds	r3, #36	; 0x24
 800992a:	2201      	movs	r2, #1
 800992c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800992e:	4b39      	ldr	r3, [pc, #228]	; (8009a14 <USBD_CDC_Init+0x1e8>)
 8009930:	7819      	ldrb	r1, [r3, #0]
 8009932:	2340      	movs	r3, #64	; 0x40
 8009934:	2202      	movs	r2, #2
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f005 f863 	bl	800ea02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800993c:	4b35      	ldr	r3, [pc, #212]	; (8009a14 <USBD_CDC_Init+0x1e8>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f003 020f 	and.w	r2, r3, #15
 8009944:	6879      	ldr	r1, [r7, #4]
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009954:	2201      	movs	r2, #1
 8009956:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009958:	4b2f      	ldr	r3, [pc, #188]	; (8009a18 <USBD_CDC_Init+0x1ec>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f003 020f 	and.w	r2, r3, #15
 8009960:	6879      	ldr	r1, [r7, #4]
 8009962:	4613      	mov	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	440b      	add	r3, r1
 800996c:	3326      	adds	r3, #38	; 0x26
 800996e:	2210      	movs	r2, #16
 8009970:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009972:	4b29      	ldr	r3, [pc, #164]	; (8009a18 <USBD_CDC_Init+0x1ec>)
 8009974:	7819      	ldrb	r1, [r3, #0]
 8009976:	2308      	movs	r3, #8
 8009978:	2203      	movs	r2, #3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f005 f841 	bl	800ea02 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009980:	4b25      	ldr	r3, [pc, #148]	; (8009a18 <USBD_CDC_Init+0x1ec>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	f003 020f 	and.w	r2, r3, #15
 8009988:	6879      	ldr	r1, [r7, #4]
 800998a:	4613      	mov	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	440b      	add	r3, r1
 8009994:	3324      	adds	r3, #36	; 0x24
 8009996:	2201      	movs	r2, #1
 8009998:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	33b0      	adds	r3, #176	; 0xb0
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80099d0:	2302      	movs	r3, #2
 80099d2:	e018      	b.n	8009a06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	7c1b      	ldrb	r3, [r3, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10a      	bne.n	80099f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099dc:	4b0d      	ldr	r3, [pc, #52]	; (8009a14 <USBD_CDC_Init+0x1e8>)
 80099de:	7819      	ldrb	r1, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f005 f8f8 	bl	800ebe0 <USBD_LL_PrepareReceive>
 80099f0:	e008      	b.n	8009a04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099f2:	4b08      	ldr	r3, [pc, #32]	; (8009a14 <USBD_CDC_Init+0x1e8>)
 80099f4:	7819      	ldrb	r1, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099fc:	2340      	movs	r3, #64	; 0x40
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f005 f8ee 	bl	800ebe0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20000103 	.word	0x20000103
 8009a14:	20000104 	.word	0x20000104
 8009a18:	20000105 	.word	0x20000105

08009a1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009a28:	4b3a      	ldr	r3, [pc, #232]	; (8009b14 <USBD_CDC_DeInit+0xf8>)
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f005 f80d 	bl	800ea4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009a34:	4b37      	ldr	r3, [pc, #220]	; (8009b14 <USBD_CDC_DeInit+0xf8>)
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	f003 020f 	and.w	r2, r3, #15
 8009a3c:	6879      	ldr	r1, [r7, #4]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	440b      	add	r3, r1
 8009a48:	3324      	adds	r3, #36	; 0x24
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009a4e:	4b32      	ldr	r3, [pc, #200]	; (8009b18 <USBD_CDC_DeInit+0xfc>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f004 fffa 	bl	800ea4e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009a5a:	4b2f      	ldr	r3, [pc, #188]	; (8009b18 <USBD_CDC_DeInit+0xfc>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	f003 020f 	and.w	r2, r3, #15
 8009a62:	6879      	ldr	r1, [r7, #4]
 8009a64:	4613      	mov	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	440b      	add	r3, r1
 8009a6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a72:	2200      	movs	r2, #0
 8009a74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009a76:	4b29      	ldr	r3, [pc, #164]	; (8009b1c <USBD_CDC_DeInit+0x100>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f004 ffe6 	bl	800ea4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009a82:	4b26      	ldr	r3, [pc, #152]	; (8009b1c <USBD_CDC_DeInit+0x100>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	f003 020f 	and.w	r2, r3, #15
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	440b      	add	r3, r1
 8009a96:	3324      	adds	r3, #36	; 0x24
 8009a98:	2200      	movs	r2, #0
 8009a9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009a9c:	4b1f      	ldr	r3, [pc, #124]	; (8009b1c <USBD_CDC_DeInit+0x100>)
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	f003 020f 	and.w	r2, r3, #15
 8009aa4:	6879      	ldr	r1, [r7, #4]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	440b      	add	r3, r1
 8009ab0:	3326      	adds	r3, #38	; 0x26
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	32b0      	adds	r2, #176	; 0xb0
 8009ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d01f      	beq.n	8009b08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	33b0      	adds	r3, #176	; 0xb0
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	32b0      	adds	r2, #176	; 0xb0
 8009ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f005 f8ba 	bl	800ec64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	32b0      	adds	r2, #176	; 0xb0
 8009afa:	2100      	movs	r1, #0
 8009afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000103 	.word	0x20000103
 8009b18:	20000104 	.word	0x20000104
 8009b1c:	20000105 	.word	0x20000105

08009b20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	32b0      	adds	r2, #176	; 0xb0
 8009b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e0bf      	b.n	8009cd0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d050      	beq.n	8009bfe <USBD_CDC_Setup+0xde>
 8009b5c:	2b20      	cmp	r3, #32
 8009b5e:	f040 80af 	bne.w	8009cc0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	88db      	ldrh	r3, [r3, #6]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d03a      	beq.n	8009be0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	b25b      	sxtb	r3, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	da1b      	bge.n	8009bac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	33b0      	adds	r3, #176	; 0xb0
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009b8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	88d2      	ldrh	r2, [r2, #6]
 8009b90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	88db      	ldrh	r3, [r3, #6]
 8009b96:	2b07      	cmp	r3, #7
 8009b98:	bf28      	it	cs
 8009b9a:	2307      	movcs	r3, #7
 8009b9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	89fa      	ldrh	r2, [r7, #14]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f001 fd43 	bl	800b630 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009baa:	e090      	b.n	8009cce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	785a      	ldrb	r2, [r3, #1]
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	88db      	ldrh	r3, [r3, #6]
 8009bba:	2b3f      	cmp	r3, #63	; 0x3f
 8009bbc:	d803      	bhi.n	8009bc6 <USBD_CDC_Setup+0xa6>
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	88db      	ldrh	r3, [r3, #6]
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	e000      	b.n	8009bc8 <USBD_CDC_Setup+0xa8>
 8009bc6:	2240      	movs	r2, #64	; 0x40
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009bce:	6939      	ldr	r1, [r7, #16]
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f001 fd55 	bl	800b688 <USBD_CtlPrepareRx>
      break;
 8009bde:	e076      	b.n	8009cce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	33b0      	adds	r3, #176	; 0xb0
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	7850      	ldrb	r0, [r2, #1]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	4798      	blx	r3
      break;
 8009bfc:	e067      	b.n	8009cce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	785b      	ldrb	r3, [r3, #1]
 8009c02:	2b0b      	cmp	r3, #11
 8009c04:	d851      	bhi.n	8009caa <USBD_CDC_Setup+0x18a>
 8009c06:	a201      	add	r2, pc, #4	; (adr r2, 8009c0c <USBD_CDC_Setup+0xec>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009c3d 	.word	0x08009c3d
 8009c10:	08009cb9 	.word	0x08009cb9
 8009c14:	08009cab 	.word	0x08009cab
 8009c18:	08009cab 	.word	0x08009cab
 8009c1c:	08009cab 	.word	0x08009cab
 8009c20:	08009cab 	.word	0x08009cab
 8009c24:	08009cab 	.word	0x08009cab
 8009c28:	08009cab 	.word	0x08009cab
 8009c2c:	08009cab 	.word	0x08009cab
 8009c30:	08009cab 	.word	0x08009cab
 8009c34:	08009c67 	.word	0x08009c67
 8009c38:	08009c91 	.word	0x08009c91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b03      	cmp	r3, #3
 8009c46:	d107      	bne.n	8009c58 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c48:	f107 030a 	add.w	r3, r7, #10
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f001 fced 	bl	800b630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c56:	e032      	b.n	8009cbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f001 fc77 	bl	800b54e <USBD_CtlError>
            ret = USBD_FAIL;
 8009c60:	2303      	movs	r3, #3
 8009c62:	75fb      	strb	r3, [r7, #23]
          break;
 8009c64:	e02b      	b.n	8009cbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d107      	bne.n	8009c82 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c72:	f107 030d 	add.w	r3, r7, #13
 8009c76:	2201      	movs	r2, #1
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f001 fcd8 	bl	800b630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c80:	e01d      	b.n	8009cbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 fc62 	bl	800b54e <USBD_CtlError>
            ret = USBD_FAIL;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	75fb      	strb	r3, [r7, #23]
          break;
 8009c8e:	e016      	b.n	8009cbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d00f      	beq.n	8009cbc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f001 fc55 	bl	800b54e <USBD_CtlError>
            ret = USBD_FAIL;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ca8:	e008      	b.n	8009cbc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f001 fc4e 	bl	800b54e <USBD_CtlError>
          ret = USBD_FAIL;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	75fb      	strb	r3, [r7, #23]
          break;
 8009cb6:	e002      	b.n	8009cbe <USBD_CDC_Setup+0x19e>
          break;
 8009cb8:	bf00      	nop
 8009cba:	e008      	b.n	8009cce <USBD_CDC_Setup+0x1ae>
          break;
 8009cbc:	bf00      	nop
      }
      break;
 8009cbe:	e006      	b.n	8009cce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f001 fc43 	bl	800b54e <USBD_CtlError>
      ret = USBD_FAIL;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	75fb      	strb	r3, [r7, #23]
      break;
 8009ccc:	bf00      	nop
  }

  return (uint8_t)ret;
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3718      	adds	r7, #24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	32b0      	adds	r2, #176	; 0xb0
 8009cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e065      	b.n	8009dce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	32b0      	adds	r2, #176	; 0xb0
 8009d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d12:	78fb      	ldrb	r3, [r7, #3]
 8009d14:	f003 020f 	and.w	r2, r3, #15
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	440b      	add	r3, r1
 8009d24:	3318      	adds	r3, #24
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d02f      	beq.n	8009d8c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009d2c:	78fb      	ldrb	r3, [r7, #3]
 8009d2e:	f003 020f 	and.w	r2, r3, #15
 8009d32:	6879      	ldr	r1, [r7, #4]
 8009d34:	4613      	mov	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	440b      	add	r3, r1
 8009d3e:	3318      	adds	r3, #24
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	78fb      	ldrb	r3, [r7, #3]
 8009d44:	f003 010f 	and.w	r1, r3, #15
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	00db      	lsls	r3, r3, #3
 8009d4e:	440b      	add	r3, r1
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4403      	add	r3, r0
 8009d54:	3348      	adds	r3, #72	; 0x48
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d5c:	fb01 f303 	mul.w	r3, r1, r3
 8009d60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d112      	bne.n	8009d8c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009d66:	78fb      	ldrb	r3, [r7, #3]
 8009d68:	f003 020f 	and.w	r2, r3, #15
 8009d6c:	6879      	ldr	r1, [r7, #4]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4413      	add	r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	440b      	add	r3, r1
 8009d78:	3318      	adds	r3, #24
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d7e:	78f9      	ldrb	r1, [r7, #3]
 8009d80:	2300      	movs	r3, #0
 8009d82:	2200      	movs	r2, #0
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f004 ff0a 	bl	800eb9e <USBD_LL_Transmit>
 8009d8a:	e01f      	b.n	8009dcc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	33b0      	adds	r3, #176	; 0xb0
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d010      	beq.n	8009dcc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	33b0      	adds	r3, #176	; 0xb0
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b084      	sub	sp, #16
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
 8009dde:	460b      	mov	r3, r1
 8009de0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	32b0      	adds	r2, #176	; 0xb0
 8009dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	32b0      	adds	r2, #176	; 0xb0
 8009dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e01a      	b.n	8009e3e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e08:	78fb      	ldrb	r3, [r7, #3]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f004 ff08 	bl	800ec22 <USBD_LL_GetRxDataSize>
 8009e12:	4602      	mov	r2, r0
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	33b0      	adds	r3, #176	; 0xb0
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009e38:	4611      	mov	r1, r2
 8009e3a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b084      	sub	sp, #16
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	32b0      	adds	r2, #176	; 0xb0
 8009e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e025      	b.n	8009eb4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	33b0      	adds	r3, #176	; 0xb0
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d01a      	beq.n	8009eb2 <USBD_CDC_EP0_RxReady+0x6c>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009e82:	2bff      	cmp	r3, #255	; 0xff
 8009e84:	d015      	beq.n	8009eb2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	33b0      	adds	r3, #176	; 0xb0
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009e9e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ea6:	b292      	uxth	r2, r2
 8009ea8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	22ff      	movs	r2, #255	; 0xff
 8009eae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ec4:	2182      	movs	r1, #130	; 0x82
 8009ec6:	4818      	ldr	r0, [pc, #96]	; (8009f28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ec8:	f000 fd09 	bl	800a8de <USBD_GetEpDesc>
 8009ecc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ece:	2101      	movs	r1, #1
 8009ed0:	4815      	ldr	r0, [pc, #84]	; (8009f28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ed2:	f000 fd04 	bl	800a8de <USBD_GetEpDesc>
 8009ed6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ed8:	2181      	movs	r1, #129	; 0x81
 8009eda:	4813      	ldr	r0, [pc, #76]	; (8009f28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009edc:	f000 fcff 	bl	800a8de <USBD_GetEpDesc>
 8009ee0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	2210      	movs	r2, #16
 8009eec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d006      	beq.n	8009f02 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009efc:	711a      	strb	r2, [r3, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d006      	beq.n	8009f16 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f10:	711a      	strb	r2, [r3, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2243      	movs	r2, #67	; 0x43
 8009f1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f1c:	4b02      	ldr	r3, [pc, #8]	; (8009f28 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	200000c0 	.word	0x200000c0

08009f2c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f34:	2182      	movs	r1, #130	; 0x82
 8009f36:	4818      	ldr	r0, [pc, #96]	; (8009f98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f38:	f000 fcd1 	bl	800a8de <USBD_GetEpDesc>
 8009f3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f3e:	2101      	movs	r1, #1
 8009f40:	4815      	ldr	r0, [pc, #84]	; (8009f98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f42:	f000 fccc 	bl	800a8de <USBD_GetEpDesc>
 8009f46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f48:	2181      	movs	r1, #129	; 0x81
 8009f4a:	4813      	ldr	r0, [pc, #76]	; (8009f98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f4c:	f000 fcc7 	bl	800a8de <USBD_GetEpDesc>
 8009f50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2210      	movs	r2, #16
 8009f5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d006      	beq.n	8009f72 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	2200      	movs	r2, #0
 8009f68:	711a      	strb	r2, [r3, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f042 0202 	orr.w	r2, r2, #2
 8009f70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d006      	beq.n	8009f86 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	711a      	strb	r2, [r3, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f042 0202 	orr.w	r2, r2, #2
 8009f84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2243      	movs	r2, #67	; 0x43
 8009f8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f8c:	4b02      	ldr	r3, [pc, #8]	; (8009f98 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3718      	adds	r7, #24
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	200000c0 	.word	0x200000c0

08009f9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009fa4:	2182      	movs	r1, #130	; 0x82
 8009fa6:	4818      	ldr	r0, [pc, #96]	; (800a008 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009fa8:	f000 fc99 	bl	800a8de <USBD_GetEpDesc>
 8009fac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009fae:	2101      	movs	r1, #1
 8009fb0:	4815      	ldr	r0, [pc, #84]	; (800a008 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009fb2:	f000 fc94 	bl	800a8de <USBD_GetEpDesc>
 8009fb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009fb8:	2181      	movs	r1, #129	; 0x81
 8009fba:	4813      	ldr	r0, [pc, #76]	; (800a008 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009fbc:	f000 fc8f 	bl	800a8de <USBD_GetEpDesc>
 8009fc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	2210      	movs	r2, #16
 8009fcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d006      	beq.n	8009fe2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fdc:	711a      	strb	r2, [r3, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d006      	beq.n	8009ff6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ff0:	711a      	strb	r2, [r3, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2243      	movs	r2, #67	; 0x43
 8009ffa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ffc:	4b02      	ldr	r3, [pc, #8]	; (800a008 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3718      	adds	r7, #24
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	200000c0 	.word	0x200000c0

0800a00c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	220a      	movs	r2, #10
 800a018:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a01a:	4b03      	ldr	r3, [pc, #12]	; (800a028 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	2000007c 	.word	0x2000007c

0800a02c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e009      	b.n	800a054 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	33b0      	adds	r3, #176	; 0xb0
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	683a      	ldr	r2, [r7, #0]
 800a050:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	32b0      	adds	r2, #176	; 0xb0
 800a076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a082:	2303      	movs	r3, #3
 800a084:	e008      	b.n	800a098 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	371c      	adds	r7, #28
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	32b0      	adds	r2, #176	; 0xb0
 800a0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e004      	b.n	800a0d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	32b0      	adds	r2, #176	; 0xb0
 800a0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	32b0      	adds	r2, #176	; 0xb0
 800a102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e018      	b.n	800a140 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	7c1b      	ldrb	r3, [r3, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10a      	bne.n	800a12c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a116:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <USBD_CDC_ReceivePacket+0x68>)
 800a118:	7819      	ldrb	r1, [r3, #0]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a120:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f004 fd5b 	bl	800ebe0 <USBD_LL_PrepareReceive>
 800a12a:	e008      	b.n	800a13e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a12c:	4b06      	ldr	r3, [pc, #24]	; (800a148 <USBD_CDC_ReceivePacket+0x68>)
 800a12e:	7819      	ldrb	r1, [r3, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a136:	2340      	movs	r3, #64	; 0x40
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f004 fd51 	bl	800ebe0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	20000104 	.word	0x20000104

0800a14c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	4613      	mov	r3, r2
 800a158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a160:	2303      	movs	r3, #3
 800a162:	e01f      	b.n	800a1a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	79fa      	ldrb	r2, [r7, #7]
 800a196:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f004 fbcb 	bl	800e934 <USBD_LL_Init>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3718      	adds	r7, #24
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a1c0:	2303      	movs	r3, #3
 800a1c2:	e025      	b.n	800a210 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	32ae      	adds	r2, #174	; 0xae
 800a1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00f      	beq.n	800a200 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	32ae      	adds	r2, #174	; 0xae
 800a1ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f0:	f107 020e 	add.w	r2, r7, #14
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	4798      	blx	r3
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f004 fbd3 	bl	800e9cc <USBD_LL_Start>
 800a226:	4603      	mov	r3, r0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a238:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
 800a24e:	460b      	mov	r3, r1
 800a250:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d009      	beq.n	800a274 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	78fa      	ldrb	r2, [r7, #3]
 800a26a:	4611      	mov	r1, r2
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	4798      	blx	r3
 800a270:	4603      	mov	r3, r0
 800a272:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a274:	7bfb      	ldrb	r3, [r7, #15]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	460b      	mov	r3, r1
 800a288:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	78fa      	ldrb	r2, [r7, #3]
 800a298:	4611      	mov	r1, r2
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	4798      	blx	r3
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f001 f908 	bl	800b4da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a2d8:	461a      	mov	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a2e6:	f003 031f 	and.w	r3, r3, #31
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d01a      	beq.n	800a324 <USBD_LL_SetupStage+0x72>
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d822      	bhi.n	800a338 <USBD_LL_SetupStage+0x86>
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d002      	beq.n	800a2fc <USBD_LL_SetupStage+0x4a>
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d00a      	beq.n	800a310 <USBD_LL_SetupStage+0x5e>
 800a2fa:	e01d      	b.n	800a338 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a302:	4619      	mov	r1, r3
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fb5f 	bl	800a9c8 <USBD_StdDevReq>
 800a30a:	4603      	mov	r3, r0
 800a30c:	73fb      	strb	r3, [r7, #15]
      break;
 800a30e:	e020      	b.n	800a352 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a316:	4619      	mov	r1, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fbc7 	bl	800aaac <USBD_StdItfReq>
 800a31e:	4603      	mov	r3, r0
 800a320:	73fb      	strb	r3, [r7, #15]
      break;
 800a322:	e016      	b.n	800a352 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fc29 	bl	800ab84 <USBD_StdEPReq>
 800a332:	4603      	mov	r3, r0
 800a334:	73fb      	strb	r3, [r7, #15]
      break;
 800a336:	e00c      	b.n	800a352 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a33e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a342:	b2db      	uxtb	r3, r3
 800a344:	4619      	mov	r1, r3
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f004 fba0 	bl	800ea8c <USBD_LL_StallEP>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73fb      	strb	r3, [r7, #15]
      break;
 800a350:	bf00      	nop
  }

  return ret;
 800a352:	7bfb      	ldrb	r3, [r7, #15]
}
 800a354:	4618      	mov	r0, r3
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	460b      	mov	r3, r1
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a36e:	7afb      	ldrb	r3, [r7, #11]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d16e      	bne.n	800a452 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a37a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a382:	2b03      	cmp	r3, #3
 800a384:	f040 8098 	bne.w	800a4b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	689a      	ldr	r2, [r3, #8]
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	429a      	cmp	r2, r3
 800a392:	d913      	bls.n	800a3bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	689a      	ldr	r2, [r3, #8]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	1ad2      	subs	r2, r2, r3
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	68da      	ldr	r2, [r3, #12]
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	bf28      	it	cs
 800a3ae:	4613      	movcs	r3, r2
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	6879      	ldr	r1, [r7, #4]
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f001 f984 	bl	800b6c2 <USBD_CtlContinueRx>
 800a3ba:	e07d      	b.n	800a4b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3c2:	f003 031f 	and.w	r3, r3, #31
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d014      	beq.n	800a3f4 <USBD_LL_DataOutStage+0x98>
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d81d      	bhi.n	800a40a <USBD_LL_DataOutStage+0xae>
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <USBD_LL_DataOutStage+0x7c>
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d003      	beq.n	800a3de <USBD_LL_DataOutStage+0x82>
 800a3d6:	e018      	b.n	800a40a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	75bb      	strb	r3, [r7, #22]
            break;
 800a3dc:	e018      	b.n	800a410 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f000 fa5e 	bl	800a8aa <USBD_CoreFindIF>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	75bb      	strb	r3, [r7, #22]
            break;
 800a3f2:	e00d      	b.n	800a410 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f000 fa60 	bl	800a8c4 <USBD_CoreFindEP>
 800a404:	4603      	mov	r3, r0
 800a406:	75bb      	strb	r3, [r7, #22]
            break;
 800a408:	e002      	b.n	800a410 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	75bb      	strb	r3, [r7, #22]
            break;
 800a40e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a410:	7dbb      	ldrb	r3, [r7, #22]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d119      	bne.n	800a44a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d113      	bne.n	800a44a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a422:	7dba      	ldrb	r2, [r7, #22]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	32ae      	adds	r2, #174	; 0xae
 800a428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00b      	beq.n	800a44a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a432:	7dba      	ldrb	r2, [r7, #22]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a43a:	7dba      	ldrb	r2, [r7, #22]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	32ae      	adds	r2, #174	; 0xae
 800a440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f001 f94a 	bl	800b6e4 <USBD_CtlSendStatus>
 800a450:	e032      	b.n	800a4b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a452:	7afb      	ldrb	r3, [r7, #11]
 800a454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	4619      	mov	r1, r3
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 fa31 	bl	800a8c4 <USBD_CoreFindEP>
 800a462:	4603      	mov	r3, r0
 800a464:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a466:	7dbb      	ldrb	r3, [r7, #22]
 800a468:	2bff      	cmp	r3, #255	; 0xff
 800a46a:	d025      	beq.n	800a4b8 <USBD_LL_DataOutStage+0x15c>
 800a46c:	7dbb      	ldrb	r3, [r7, #22]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d122      	bne.n	800a4b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	d117      	bne.n	800a4ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a47e:	7dba      	ldrb	r2, [r7, #22]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	32ae      	adds	r2, #174	; 0xae
 800a484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00f      	beq.n	800a4ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a48e:	7dba      	ldrb	r2, [r7, #22]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a496:	7dba      	ldrb	r2, [r7, #22]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	32ae      	adds	r2, #174	; 0xae
 800a49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	7afa      	ldrb	r2, [r7, #11]
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	4798      	blx	r3
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	e000      	b.n	800a4ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3718      	adds	r7, #24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b086      	sub	sp, #24
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	60f8      	str	r0, [r7, #12]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	607a      	str	r2, [r7, #4]
 800a4ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a4d0:	7afb      	ldrb	r3, [r7, #11]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d16f      	bne.n	800a5b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	3314      	adds	r3, #20
 800a4da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d15a      	bne.n	800a59c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	689a      	ldr	r2, [r3, #8]
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d914      	bls.n	800a51c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	689a      	ldr	r2, [r3, #8]
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	1ad2      	subs	r2, r2, r3
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	461a      	mov	r2, r3
 800a506:	6879      	ldr	r1, [r7, #4]
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f001 f8ac 	bl	800b666 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a50e:	2300      	movs	r3, #0
 800a510:	2200      	movs	r2, #0
 800a512:	2100      	movs	r1, #0
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f004 fb63 	bl	800ebe0 <USBD_LL_PrepareReceive>
 800a51a:	e03f      	b.n	800a59c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	68da      	ldr	r2, [r3, #12]
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	429a      	cmp	r2, r3
 800a526:	d11c      	bne.n	800a562 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a530:	429a      	cmp	r2, r3
 800a532:	d316      	bcc.n	800a562 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a53e:	429a      	cmp	r2, r3
 800a540:	d20f      	bcs.n	800a562 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a542:	2200      	movs	r2, #0
 800a544:	2100      	movs	r1, #0
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f001 f88d 	bl	800b666 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a554:	2300      	movs	r3, #0
 800a556:	2200      	movs	r2, #0
 800a558:	2100      	movs	r1, #0
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f004 fb40 	bl	800ebe0 <USBD_LL_PrepareReceive>
 800a560:	e01c      	b.n	800a59c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d10f      	bne.n	800a58e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d009      	beq.n	800a58e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a58e:	2180      	movs	r1, #128	; 0x80
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f004 fa7b 	bl	800ea8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f001 f8b7 	bl	800b70a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d03a      	beq.n	800a61c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7ff fe42 	bl	800a230 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a5b4:	e032      	b.n	800a61c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a5b6:	7afb      	ldrb	r3, [r7, #11]
 800a5b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	4619      	mov	r1, r3
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f000 f97f 	bl	800a8c4 <USBD_CoreFindEP>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5ca:	7dfb      	ldrb	r3, [r7, #23]
 800a5cc:	2bff      	cmp	r3, #255	; 0xff
 800a5ce:	d025      	beq.n	800a61c <USBD_LL_DataInStage+0x15a>
 800a5d0:	7dfb      	ldrb	r3, [r7, #23]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d122      	bne.n	800a61c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	d11c      	bne.n	800a61c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a5e2:	7dfa      	ldrb	r2, [r7, #23]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	32ae      	adds	r2, #174	; 0xae
 800a5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d014      	beq.n	800a61c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a5f2:	7dfa      	ldrb	r2, [r7, #23]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a5fa:	7dfa      	ldrb	r2, [r7, #23]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	32ae      	adds	r2, #174	; 0xae
 800a600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	7afa      	ldrb	r2, [r7, #11]
 800a608:	4611      	mov	r1, r2
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	4798      	blx	r3
 800a60e:	4603      	mov	r3, r0
 800a610:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a612:	7dbb      	ldrb	r3, [r7, #22]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a618:	7dbb      	ldrb	r3, [r7, #22]
 800a61a:	e000      	b.n	800a61e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a62e:	2300      	movs	r3, #0
 800a630:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d014      	beq.n	800a68c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00e      	beq.n	800a68c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	6852      	ldr	r2, [r2, #4]
 800a67a:	b2d2      	uxtb	r2, r2
 800a67c:	4611      	mov	r1, r2
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	4798      	blx	r3
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a688:	2303      	movs	r3, #3
 800a68a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a68c:	2340      	movs	r3, #64	; 0x40
 800a68e:	2200      	movs	r2, #0
 800a690:	2100      	movs	r1, #0
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f004 f9b5 	bl	800ea02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2240      	movs	r2, #64	; 0x40
 800a6a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6a8:	2340      	movs	r3, #64	; 0x40
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	2180      	movs	r1, #128	; 0x80
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f004 f9a7 	bl	800ea02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2240      	movs	r2, #64	; 0x40
 800a6be:	621a      	str	r2, [r3, #32]

  return ret;
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b083      	sub	sp, #12
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	78fa      	ldrb	r2, [r7, #3]
 800a6da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	370c      	adds	r7, #12
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b083      	sub	sp, #12
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2204      	movs	r2, #4
 800a704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	370c      	adds	r7, #12
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a716:	b480      	push	{r7}
 800a718:	b083      	sub	sp, #12
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b04      	cmp	r3, #4
 800a728:	d106      	bne.n	800a738 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a730:	b2da      	uxtb	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b082      	sub	sp, #8
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b03      	cmp	r3, #3
 800a758:	d110      	bne.n	800a77c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00b      	beq.n	800a77c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d005      	beq.n	800a77c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	460b      	mov	r3, r1
 800a790:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	32ae      	adds	r2, #174	; 0xae
 800a79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d101      	bne.n	800a7a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e01c      	b.n	800a7e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d115      	bne.n	800a7e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	32ae      	adds	r2, #174	; 0xae
 800a7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c2:	6a1b      	ldr	r3, [r3, #32]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00b      	beq.n	800a7e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	32ae      	adds	r2, #174	; 0xae
 800a7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	78fa      	ldrb	r2, [r7, #3]
 800a7da:	4611      	mov	r1, r2
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	32ae      	adds	r2, #174	; 0xae
 800a800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a808:	2303      	movs	r3, #3
 800a80a:	e01c      	b.n	800a846 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b03      	cmp	r3, #3
 800a816:	d115      	bne.n	800a844 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	32ae      	adds	r2, #174	; 0xae
 800a822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00b      	beq.n	800a844 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	32ae      	adds	r2, #174	; 0xae
 800a836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	78fa      	ldrb	r2, [r7, #3]
 800a83e:	4611      	mov	r1, r2
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a84e:	b480      	push	{r7}
 800a850:	b083      	sub	sp, #12
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a86c:	2300      	movs	r3, #0
 800a86e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00e      	beq.n	800a8a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	6852      	ldr	r2, [r2, #4]
 800a88e:	b2d2      	uxtb	r2, r2
 800a890:	4611      	mov	r1, r2
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	4798      	blx	r3
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a89c:	2303      	movs	r3, #3
 800a89e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a8aa:	b480      	push	{r7}
 800a8ac:	b083      	sub	sp, #12
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a8b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a8d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b086      	sub	sp, #24
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	885b      	ldrh	r3, [r3, #2]
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	b29b      	uxth	r3, r3
 800a902:	429a      	cmp	r2, r3
 800a904:	d920      	bls.n	800a948 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a90e:	e013      	b.n	800a938 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a910:	f107 030a 	add.w	r3, r7, #10
 800a914:	4619      	mov	r1, r3
 800a916:	6978      	ldr	r0, [r7, #20]
 800a918:	f000 f81b 	bl	800a952 <USBD_GetNextDesc>
 800a91c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	785b      	ldrb	r3, [r3, #1]
 800a922:	2b05      	cmp	r3, #5
 800a924:	d108      	bne.n	800a938 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	789b      	ldrb	r3, [r3, #2]
 800a92e:	78fa      	ldrb	r2, [r7, #3]
 800a930:	429a      	cmp	r2, r3
 800a932:	d008      	beq.n	800a946 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a934:	2300      	movs	r3, #0
 800a936:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	885b      	ldrh	r3, [r3, #2]
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	897b      	ldrh	r3, [r7, #10]
 800a940:	429a      	cmp	r2, r3
 800a942:	d8e5      	bhi.n	800a910 <USBD_GetEpDesc+0x32>
 800a944:	e000      	b.n	800a948 <USBD_GetEpDesc+0x6a>
          break;
 800a946:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a948:	693b      	ldr	r3, [r7, #16]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3718      	adds	r7, #24
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a952:	b480      	push	{r7}
 800a954:	b085      	sub	sp, #20
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	881a      	ldrh	r2, [r3, #0]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	b29b      	uxth	r3, r3
 800a96a:	4413      	add	r3, r2
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	461a      	mov	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4413      	add	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a97e:	68fb      	ldr	r3, [r7, #12]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3714      	adds	r7, #20
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a9aa:	8a3b      	ldrh	r3, [r7, #16]
 800a9ac:	021b      	lsls	r3, r3, #8
 800a9ae:	b21a      	sxth	r2, r3
 800a9b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	b21b      	sxth	r3, r3
 800a9b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a9ba:	89fb      	ldrh	r3, [r7, #14]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	371c      	adds	r7, #28
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9de:	2b40      	cmp	r3, #64	; 0x40
 800a9e0:	d005      	beq.n	800a9ee <USBD_StdDevReq+0x26>
 800a9e2:	2b40      	cmp	r3, #64	; 0x40
 800a9e4:	d857      	bhi.n	800aa96 <USBD_StdDevReq+0xce>
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00f      	beq.n	800aa0a <USBD_StdDevReq+0x42>
 800a9ea:	2b20      	cmp	r3, #32
 800a9ec:	d153      	bne.n	800aa96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	32ae      	adds	r2, #174	; 0xae
 800a9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	4798      	blx	r3
 800aa04:	4603      	mov	r3, r0
 800aa06:	73fb      	strb	r3, [r7, #15]
      break;
 800aa08:	e04a      	b.n	800aaa0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	785b      	ldrb	r3, [r3, #1]
 800aa0e:	2b09      	cmp	r3, #9
 800aa10:	d83b      	bhi.n	800aa8a <USBD_StdDevReq+0xc2>
 800aa12:	a201      	add	r2, pc, #4	; (adr r2, 800aa18 <USBD_StdDevReq+0x50>)
 800aa14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa18:	0800aa6d 	.word	0x0800aa6d
 800aa1c:	0800aa81 	.word	0x0800aa81
 800aa20:	0800aa8b 	.word	0x0800aa8b
 800aa24:	0800aa77 	.word	0x0800aa77
 800aa28:	0800aa8b 	.word	0x0800aa8b
 800aa2c:	0800aa4b 	.word	0x0800aa4b
 800aa30:	0800aa41 	.word	0x0800aa41
 800aa34:	0800aa8b 	.word	0x0800aa8b
 800aa38:	0800aa63 	.word	0x0800aa63
 800aa3c:	0800aa55 	.word	0x0800aa55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fa3c 	bl	800aec0 <USBD_GetDescriptor>
          break;
 800aa48:	e024      	b.n	800aa94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fba1 	bl	800b194 <USBD_SetAddress>
          break;
 800aa52:	e01f      	b.n	800aa94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fbe0 	bl	800b21c <USBD_SetConfig>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	73fb      	strb	r3, [r7, #15]
          break;
 800aa60:	e018      	b.n	800aa94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aa62:	6839      	ldr	r1, [r7, #0]
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fc83 	bl	800b370 <USBD_GetConfig>
          break;
 800aa6a:	e013      	b.n	800aa94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fcb4 	bl	800b3dc <USBD_GetStatus>
          break;
 800aa74:	e00e      	b.n	800aa94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fce3 	bl	800b444 <USBD_SetFeature>
          break;
 800aa7e:	e009      	b.n	800aa94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fd07 	bl	800b496 <USBD_ClrFeature>
          break;
 800aa88:	e004      	b.n	800aa94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fd5e 	bl	800b54e <USBD_CtlError>
          break;
 800aa92:	bf00      	nop
      }
      break;
 800aa94:	e004      	b.n	800aaa0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fd58 	bl	800b54e <USBD_CtlError>
      break;
 800aa9e:	bf00      	nop
  }

  return ret;
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop

0800aaac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aac2:	2b40      	cmp	r3, #64	; 0x40
 800aac4:	d005      	beq.n	800aad2 <USBD_StdItfReq+0x26>
 800aac6:	2b40      	cmp	r3, #64	; 0x40
 800aac8:	d852      	bhi.n	800ab70 <USBD_StdItfReq+0xc4>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d001      	beq.n	800aad2 <USBD_StdItfReq+0x26>
 800aace:	2b20      	cmp	r3, #32
 800aad0:	d14e      	bne.n	800ab70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	3b01      	subs	r3, #1
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d840      	bhi.n	800ab62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	889b      	ldrh	r3, [r3, #4]
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d836      	bhi.n	800ab58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	889b      	ldrh	r3, [r3, #4]
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7ff fed9 	bl	800a8aa <USBD_CoreFindIF>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aafc:	7bbb      	ldrb	r3, [r7, #14]
 800aafe:	2bff      	cmp	r3, #255	; 0xff
 800ab00:	d01d      	beq.n	800ab3e <USBD_StdItfReq+0x92>
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d11a      	bne.n	800ab3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ab08:	7bba      	ldrb	r2, [r7, #14]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	32ae      	adds	r2, #174	; 0xae
 800ab0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00f      	beq.n	800ab38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ab18:	7bba      	ldrb	r2, [r7, #14]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab20:	7bba      	ldrb	r2, [r7, #14]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	32ae      	adds	r2, #174	; 0xae
 800ab26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	4798      	blx	r3
 800ab32:	4603      	mov	r3, r0
 800ab34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ab36:	e004      	b.n	800ab42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ab3c:	e001      	b.n	800ab42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ab3e:	2303      	movs	r3, #3
 800ab40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	88db      	ldrh	r3, [r3, #6]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d110      	bne.n	800ab6c <USBD_StdItfReq+0xc0>
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10d      	bne.n	800ab6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fdc7 	bl	800b6e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ab56:	e009      	b.n	800ab6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fcf7 	bl	800b54e <USBD_CtlError>
          break;
 800ab60:	e004      	b.n	800ab6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fcf2 	bl	800b54e <USBD_CtlError>
          break;
 800ab6a:	e000      	b.n	800ab6e <USBD_StdItfReq+0xc2>
          break;
 800ab6c:	bf00      	nop
      }
      break;
 800ab6e:	e004      	b.n	800ab7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fceb 	bl	800b54e <USBD_CtlError>
      break;
 800ab78:	bf00      	nop
  }

  return ret;
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	889b      	ldrh	r3, [r3, #4]
 800ab96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aba0:	2b40      	cmp	r3, #64	; 0x40
 800aba2:	d007      	beq.n	800abb4 <USBD_StdEPReq+0x30>
 800aba4:	2b40      	cmp	r3, #64	; 0x40
 800aba6:	f200 817f 	bhi.w	800aea8 <USBD_StdEPReq+0x324>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d02a      	beq.n	800ac04 <USBD_StdEPReq+0x80>
 800abae:	2b20      	cmp	r3, #32
 800abb0:	f040 817a 	bne.w	800aea8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff fe83 	bl	800a8c4 <USBD_CoreFindEP>
 800abbe:	4603      	mov	r3, r0
 800abc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abc2:	7b7b      	ldrb	r3, [r7, #13]
 800abc4:	2bff      	cmp	r3, #255	; 0xff
 800abc6:	f000 8174 	beq.w	800aeb2 <USBD_StdEPReq+0x32e>
 800abca:	7b7b      	ldrb	r3, [r7, #13]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f040 8170 	bne.w	800aeb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800abd2:	7b7a      	ldrb	r2, [r7, #13]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800abda:	7b7a      	ldrb	r2, [r7, #13]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	32ae      	adds	r2, #174	; 0xae
 800abe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f000 8163 	beq.w	800aeb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800abec:	7b7a      	ldrb	r2, [r7, #13]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	32ae      	adds	r2, #174	; 0xae
 800abf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	4798      	blx	r3
 800abfe:	4603      	mov	r3, r0
 800ac00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ac02:	e156      	b.n	800aeb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	785b      	ldrb	r3, [r3, #1]
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d008      	beq.n	800ac1e <USBD_StdEPReq+0x9a>
 800ac0c:	2b03      	cmp	r3, #3
 800ac0e:	f300 8145 	bgt.w	800ae9c <USBD_StdEPReq+0x318>
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 809b 	beq.w	800ad4e <USBD_StdEPReq+0x1ca>
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d03c      	beq.n	800ac96 <USBD_StdEPReq+0x112>
 800ac1c:	e13e      	b.n	800ae9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d002      	beq.n	800ac30 <USBD_StdEPReq+0xac>
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	d016      	beq.n	800ac5c <USBD_StdEPReq+0xd8>
 800ac2e:	e02c      	b.n	800ac8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00d      	beq.n	800ac52 <USBD_StdEPReq+0xce>
 800ac36:	7bbb      	ldrb	r3, [r7, #14]
 800ac38:	2b80      	cmp	r3, #128	; 0x80
 800ac3a:	d00a      	beq.n	800ac52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f003 ff23 	bl	800ea8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac46:	2180      	movs	r1, #128	; 0x80
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f003 ff1f 	bl	800ea8c <USBD_LL_StallEP>
 800ac4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac50:	e020      	b.n	800ac94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fc7a 	bl	800b54e <USBD_CtlError>
              break;
 800ac5a:	e01b      	b.n	800ac94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	885b      	ldrh	r3, [r3, #2]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10e      	bne.n	800ac82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00b      	beq.n	800ac82 <USBD_StdEPReq+0xfe>
 800ac6a:	7bbb      	ldrb	r3, [r7, #14]
 800ac6c:	2b80      	cmp	r3, #128	; 0x80
 800ac6e:	d008      	beq.n	800ac82 <USBD_StdEPReq+0xfe>
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	88db      	ldrh	r3, [r3, #6]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d104      	bne.n	800ac82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac78:	7bbb      	ldrb	r3, [r7, #14]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f003 ff05 	bl	800ea8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fd2e 	bl	800b6e4 <USBD_CtlSendStatus>

              break;
 800ac88:	e004      	b.n	800ac94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fc5e 	bl	800b54e <USBD_CtlError>
              break;
 800ac92:	bf00      	nop
          }
          break;
 800ac94:	e107      	b.n	800aea6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d002      	beq.n	800aca8 <USBD_StdEPReq+0x124>
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d016      	beq.n	800acd4 <USBD_StdEPReq+0x150>
 800aca6:	e04b      	b.n	800ad40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00d      	beq.n	800acca <USBD_StdEPReq+0x146>
 800acae:	7bbb      	ldrb	r3, [r7, #14]
 800acb0:	2b80      	cmp	r3, #128	; 0x80
 800acb2:	d00a      	beq.n	800acca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f003 fee7 	bl	800ea8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800acbe:	2180      	movs	r1, #128	; 0x80
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f003 fee3 	bl	800ea8c <USBD_LL_StallEP>
 800acc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800acc8:	e040      	b.n	800ad4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fc3e 	bl	800b54e <USBD_CtlError>
              break;
 800acd2:	e03b      	b.n	800ad4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	885b      	ldrh	r3, [r3, #2]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d136      	bne.n	800ad4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
 800acde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d004      	beq.n	800acf0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ace6:	7bbb      	ldrb	r3, [r7, #14]
 800ace8:	4619      	mov	r1, r3
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f003 feed 	bl	800eaca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fcf7 	bl	800b6e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800acf6:	7bbb      	ldrb	r3, [r7, #14]
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7ff fde2 	bl	800a8c4 <USBD_CoreFindEP>
 800ad00:	4603      	mov	r3, r0
 800ad02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad04:	7b7b      	ldrb	r3, [r7, #13]
 800ad06:	2bff      	cmp	r3, #255	; 0xff
 800ad08:	d01f      	beq.n	800ad4a <USBD_StdEPReq+0x1c6>
 800ad0a:	7b7b      	ldrb	r3, [r7, #13]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d11c      	bne.n	800ad4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ad10:	7b7a      	ldrb	r2, [r7, #13]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ad18:	7b7a      	ldrb	r2, [r7, #13]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	32ae      	adds	r2, #174	; 0xae
 800ad1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d010      	beq.n	800ad4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ad28:	7b7a      	ldrb	r2, [r7, #13]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	32ae      	adds	r2, #174	; 0xae
 800ad2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	4798      	blx	r3
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ad3e:	e004      	b.n	800ad4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fc03 	bl	800b54e <USBD_CtlError>
              break;
 800ad48:	e000      	b.n	800ad4c <USBD_StdEPReq+0x1c8>
              break;
 800ad4a:	bf00      	nop
          }
          break;
 800ad4c:	e0ab      	b.n	800aea6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d002      	beq.n	800ad60 <USBD_StdEPReq+0x1dc>
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d032      	beq.n	800adc4 <USBD_StdEPReq+0x240>
 800ad5e:	e097      	b.n	800ae90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad60:	7bbb      	ldrb	r3, [r7, #14]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d007      	beq.n	800ad76 <USBD_StdEPReq+0x1f2>
 800ad66:	7bbb      	ldrb	r3, [r7, #14]
 800ad68:	2b80      	cmp	r3, #128	; 0x80
 800ad6a:	d004      	beq.n	800ad76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fbed 	bl	800b54e <USBD_CtlError>
                break;
 800ad74:	e091      	b.n	800ae9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	da0b      	bge.n	800ad96 <USBD_StdEPReq+0x212>
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad84:	4613      	mov	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	3310      	adds	r3, #16
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	4413      	add	r3, r2
 800ad92:	3304      	adds	r3, #4
 800ad94:	e00b      	b.n	800adae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	4413      	add	r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	4413      	add	r3, r2
 800adac:	3304      	adds	r3, #4
 800adae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2202      	movs	r2, #2
 800adba:	4619      	mov	r1, r3
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fc37 	bl	800b630 <USBD_CtlSendData>
              break;
 800adc2:	e06a      	b.n	800ae9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800adc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	da11      	bge.n	800adf0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800adcc:	7bbb      	ldrb	r3, [r7, #14]
 800adce:	f003 020f 	and.w	r2, r3, #15
 800add2:	6879      	ldr	r1, [r7, #4]
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	440b      	add	r3, r1
 800adde:	3324      	adds	r3, #36	; 0x24
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d117      	bne.n	800ae16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fbb0 	bl	800b54e <USBD_CtlError>
                  break;
 800adee:	e054      	b.n	800ae9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800adf0:	7bbb      	ldrb	r3, [r7, #14]
 800adf2:	f003 020f 	and.w	r2, r3, #15
 800adf6:	6879      	ldr	r1, [r7, #4]
 800adf8:	4613      	mov	r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4413      	add	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	440b      	add	r3, r1
 800ae02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae06:	881b      	ldrh	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d104      	bne.n	800ae16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fb9d 	bl	800b54e <USBD_CtlError>
                  break;
 800ae14:	e041      	b.n	800ae9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	da0b      	bge.n	800ae36 <USBD_StdEPReq+0x2b2>
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae24:	4613      	mov	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	4413      	add	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	3310      	adds	r3, #16
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	4413      	add	r3, r2
 800ae32:	3304      	adds	r3, #4
 800ae34:	e00b      	b.n	800ae4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae36:	7bbb      	ldrb	r3, [r7, #14]
 800ae38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	3304      	adds	r3, #4
 800ae4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d002      	beq.n	800ae5c <USBD_StdEPReq+0x2d8>
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	2b80      	cmp	r3, #128	; 0x80
 800ae5a:	d103      	bne.n	800ae64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	601a      	str	r2, [r3, #0]
 800ae62:	e00e      	b.n	800ae82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ae64:	7bbb      	ldrb	r3, [r7, #14]
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f003 fe4d 	bl	800eb08 <USBD_LL_IsStallEP>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	2201      	movs	r2, #1
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	e002      	b.n	800ae82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	2202      	movs	r2, #2
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fbd1 	bl	800b630 <USBD_CtlSendData>
              break;
 800ae8e:	e004      	b.n	800ae9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fb5b 	bl	800b54e <USBD_CtlError>
              break;
 800ae98:	bf00      	nop
          }
          break;
 800ae9a:	e004      	b.n	800aea6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fb55 	bl	800b54e <USBD_CtlError>
          break;
 800aea4:	bf00      	nop
      }
      break;
 800aea6:	e005      	b.n	800aeb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fb4f 	bl	800b54e <USBD_CtlError>
      break;
 800aeb0:	e000      	b.n	800aeb4 <USBD_StdEPReq+0x330>
      break;
 800aeb2:	bf00      	nop
  }

  return ret;
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aeca:	2300      	movs	r3, #0
 800aecc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aece:	2300      	movs	r3, #0
 800aed0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aed2:	2300      	movs	r3, #0
 800aed4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	885b      	ldrh	r3, [r3, #2]
 800aeda:	0a1b      	lsrs	r3, r3, #8
 800aedc:	b29b      	uxth	r3, r3
 800aede:	3b01      	subs	r3, #1
 800aee0:	2b06      	cmp	r3, #6
 800aee2:	f200 8128 	bhi.w	800b136 <USBD_GetDescriptor+0x276>
 800aee6:	a201      	add	r2, pc, #4	; (adr r2, 800aeec <USBD_GetDescriptor+0x2c>)
 800aee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeec:	0800af09 	.word	0x0800af09
 800aef0:	0800af21 	.word	0x0800af21
 800aef4:	0800af61 	.word	0x0800af61
 800aef8:	0800b137 	.word	0x0800b137
 800aefc:	0800b137 	.word	0x0800b137
 800af00:	0800b0d7 	.word	0x0800b0d7
 800af04:	0800b103 	.word	0x0800b103
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	7c12      	ldrb	r2, [r2, #16]
 800af14:	f107 0108 	add.w	r1, r7, #8
 800af18:	4610      	mov	r0, r2
 800af1a:	4798      	blx	r3
 800af1c:	60f8      	str	r0, [r7, #12]
      break;
 800af1e:	e112      	b.n	800b146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	7c1b      	ldrb	r3, [r3, #16]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d10d      	bne.n	800af44 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af30:	f107 0208 	add.w	r2, r7, #8
 800af34:	4610      	mov	r0, r2
 800af36:	4798      	blx	r3
 800af38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	3301      	adds	r3, #1
 800af3e:	2202      	movs	r2, #2
 800af40:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800af42:	e100      	b.n	800b146 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4c:	f107 0208 	add.w	r2, r7, #8
 800af50:	4610      	mov	r0, r2
 800af52:	4798      	blx	r3
 800af54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	3301      	adds	r3, #1
 800af5a:	2202      	movs	r2, #2
 800af5c:	701a      	strb	r2, [r3, #0]
      break;
 800af5e:	e0f2      	b.n	800b146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	885b      	ldrh	r3, [r3, #2]
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b05      	cmp	r3, #5
 800af68:	f200 80ac 	bhi.w	800b0c4 <USBD_GetDescriptor+0x204>
 800af6c:	a201      	add	r2, pc, #4	; (adr r2, 800af74 <USBD_GetDescriptor+0xb4>)
 800af6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af72:	bf00      	nop
 800af74:	0800af8d 	.word	0x0800af8d
 800af78:	0800afc1 	.word	0x0800afc1
 800af7c:	0800aff5 	.word	0x0800aff5
 800af80:	0800b029 	.word	0x0800b029
 800af84:	0800b05d 	.word	0x0800b05d
 800af88:	0800b091 	.word	0x0800b091
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00b      	beq.n	800afb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	7c12      	ldrb	r2, [r2, #16]
 800afa4:	f107 0108 	add.w	r1, r7, #8
 800afa8:	4610      	mov	r0, r2
 800afaa:	4798      	blx	r3
 800afac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afae:	e091      	b.n	800b0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 facb 	bl	800b54e <USBD_CtlError>
            err++;
 800afb8:	7afb      	ldrb	r3, [r7, #11]
 800afba:	3301      	adds	r3, #1
 800afbc:	72fb      	strb	r3, [r7, #11]
          break;
 800afbe:	e089      	b.n	800b0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00b      	beq.n	800afe4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	7c12      	ldrb	r2, [r2, #16]
 800afd8:	f107 0108 	add.w	r1, r7, #8
 800afdc:	4610      	mov	r0, r2
 800afde:	4798      	blx	r3
 800afe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afe2:	e077      	b.n	800b0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fab1 	bl	800b54e <USBD_CtlError>
            err++;
 800afec:	7afb      	ldrb	r3, [r7, #11]
 800afee:	3301      	adds	r3, #1
 800aff0:	72fb      	strb	r3, [r7, #11]
          break;
 800aff2:	e06f      	b.n	800b0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00b      	beq.n	800b018 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	7c12      	ldrb	r2, [r2, #16]
 800b00c:	f107 0108 	add.w	r1, r7, #8
 800b010:	4610      	mov	r0, r2
 800b012:	4798      	blx	r3
 800b014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b016:	e05d      	b.n	800b0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b018:	6839      	ldr	r1, [r7, #0]
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fa97 	bl	800b54e <USBD_CtlError>
            err++;
 800b020:	7afb      	ldrb	r3, [r7, #11]
 800b022:	3301      	adds	r3, #1
 800b024:	72fb      	strb	r3, [r7, #11]
          break;
 800b026:	e055      	b.n	800b0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00b      	beq.n	800b04c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	7c12      	ldrb	r2, [r2, #16]
 800b040:	f107 0108 	add.w	r1, r7, #8
 800b044:	4610      	mov	r0, r2
 800b046:	4798      	blx	r3
 800b048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b04a:	e043      	b.n	800b0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fa7d 	bl	800b54e <USBD_CtlError>
            err++;
 800b054:	7afb      	ldrb	r3, [r7, #11]
 800b056:	3301      	adds	r3, #1
 800b058:	72fb      	strb	r3, [r7, #11]
          break;
 800b05a:	e03b      	b.n	800b0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b062:	695b      	ldr	r3, [r3, #20]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00b      	beq.n	800b080 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b06e:	695b      	ldr	r3, [r3, #20]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	7c12      	ldrb	r2, [r2, #16]
 800b074:	f107 0108 	add.w	r1, r7, #8
 800b078:	4610      	mov	r0, r2
 800b07a:	4798      	blx	r3
 800b07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b07e:	e029      	b.n	800b0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fa63 	bl	800b54e <USBD_CtlError>
            err++;
 800b088:	7afb      	ldrb	r3, [r7, #11]
 800b08a:	3301      	adds	r3, #1
 800b08c:	72fb      	strb	r3, [r7, #11]
          break;
 800b08e:	e021      	b.n	800b0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00b      	beq.n	800b0b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0a2:	699b      	ldr	r3, [r3, #24]
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	7c12      	ldrb	r2, [r2, #16]
 800b0a8:	f107 0108 	add.w	r1, r7, #8
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	4798      	blx	r3
 800b0b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0b2:	e00f      	b.n	800b0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0b4:	6839      	ldr	r1, [r7, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fa49 	bl	800b54e <USBD_CtlError>
            err++;
 800b0bc:	7afb      	ldrb	r3, [r7, #11]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b0c2:	e007      	b.n	800b0d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fa41 	bl	800b54e <USBD_CtlError>
          err++;
 800b0cc:	7afb      	ldrb	r3, [r7, #11]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b0d2:	bf00      	nop
      }
      break;
 800b0d4:	e037      	b.n	800b146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	7c1b      	ldrb	r3, [r3, #16]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d109      	bne.n	800b0f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e6:	f107 0208 	add.w	r2, r7, #8
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	4798      	blx	r3
 800b0ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0f0:	e029      	b.n	800b146 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fa2a 	bl	800b54e <USBD_CtlError>
        err++;
 800b0fa:	7afb      	ldrb	r3, [r7, #11]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	72fb      	strb	r3, [r7, #11]
      break;
 800b100:	e021      	b.n	800b146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	7c1b      	ldrb	r3, [r3, #16]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10d      	bne.n	800b126 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b112:	f107 0208 	add.w	r2, r7, #8
 800b116:	4610      	mov	r0, r2
 800b118:	4798      	blx	r3
 800b11a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3301      	adds	r3, #1
 800b120:	2207      	movs	r2, #7
 800b122:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b124:	e00f      	b.n	800b146 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fa10 	bl	800b54e <USBD_CtlError>
        err++;
 800b12e:	7afb      	ldrb	r3, [r7, #11]
 800b130:	3301      	adds	r3, #1
 800b132:	72fb      	strb	r3, [r7, #11]
      break;
 800b134:	e007      	b.n	800b146 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 fa08 	bl	800b54e <USBD_CtlError>
      err++;
 800b13e:	7afb      	ldrb	r3, [r7, #11]
 800b140:	3301      	adds	r3, #1
 800b142:	72fb      	strb	r3, [r7, #11]
      break;
 800b144:	bf00      	nop
  }

  if (err != 0U)
 800b146:	7afb      	ldrb	r3, [r7, #11]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d11e      	bne.n	800b18a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	88db      	ldrh	r3, [r3, #6]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d016      	beq.n	800b182 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b154:	893b      	ldrh	r3, [r7, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00e      	beq.n	800b178 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	88da      	ldrh	r2, [r3, #6]
 800b15e:	893b      	ldrh	r3, [r7, #8]
 800b160:	4293      	cmp	r3, r2
 800b162:	bf28      	it	cs
 800b164:	4613      	movcs	r3, r2
 800b166:	b29b      	uxth	r3, r3
 800b168:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b16a:	893b      	ldrh	r3, [r7, #8]
 800b16c:	461a      	mov	r2, r3
 800b16e:	68f9      	ldr	r1, [r7, #12]
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fa5d 	bl	800b630 <USBD_CtlSendData>
 800b176:	e009      	b.n	800b18c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b178:	6839      	ldr	r1, [r7, #0]
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f9e7 	bl	800b54e <USBD_CtlError>
 800b180:	e004      	b.n	800b18c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 faae 	bl	800b6e4 <USBD_CtlSendStatus>
 800b188:	e000      	b.n	800b18c <USBD_GetDescriptor+0x2cc>
    return;
 800b18a:	bf00      	nop
  }
}
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop

0800b194 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	889b      	ldrh	r3, [r3, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d131      	bne.n	800b20a <USBD_SetAddress+0x76>
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	88db      	ldrh	r3, [r3, #6]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d12d      	bne.n	800b20a <USBD_SetAddress+0x76>
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	885b      	ldrh	r3, [r3, #2]
 800b1b2:	2b7f      	cmp	r3, #127	; 0x7f
 800b1b4:	d829      	bhi.n	800b20a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	885b      	ldrh	r3, [r3, #2]
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	d104      	bne.n	800b1d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f9bc 	bl	800b54e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1d6:	e01d      	b.n	800b214 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	7bfa      	ldrb	r2, [r7, #15]
 800b1dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f003 fcbb 	bl	800eb60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 fa7a 	bl	800b6e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d004      	beq.n	800b200 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2202      	movs	r2, #2
 800b1fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1fe:	e009      	b.n	800b214 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b208:	e004      	b.n	800b214 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b20a:	6839      	ldr	r1, [r7, #0]
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f99e 	bl	800b54e <USBD_CtlError>
  }
}
 800b212:	bf00      	nop
 800b214:	bf00      	nop
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	885b      	ldrh	r3, [r3, #2]
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	4b4e      	ldr	r3, [pc, #312]	; (800b36c <USBD_SetConfig+0x150>)
 800b232:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b234:	4b4d      	ldr	r3, [pc, #308]	; (800b36c <USBD_SetConfig+0x150>)
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d905      	bls.n	800b248 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f985 	bl	800b54e <USBD_CtlError>
    return USBD_FAIL;
 800b244:	2303      	movs	r3, #3
 800b246:	e08c      	b.n	800b362 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	2b02      	cmp	r3, #2
 800b252:	d002      	beq.n	800b25a <USBD_SetConfig+0x3e>
 800b254:	2b03      	cmp	r3, #3
 800b256:	d029      	beq.n	800b2ac <USBD_SetConfig+0x90>
 800b258:	e075      	b.n	800b346 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b25a:	4b44      	ldr	r3, [pc, #272]	; (800b36c <USBD_SetConfig+0x150>)
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d020      	beq.n	800b2a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b262:	4b42      	ldr	r3, [pc, #264]	; (800b36c <USBD_SetConfig+0x150>)
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b26c:	4b3f      	ldr	r3, [pc, #252]	; (800b36c <USBD_SetConfig+0x150>)
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7fe ffe7 	bl	800a246 <USBD_SetClassConfig>
 800b278:	4603      	mov	r3, r0
 800b27a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b27c:	7bfb      	ldrb	r3, [r7, #15]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d008      	beq.n	800b294 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f962 	bl	800b54e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2202      	movs	r2, #2
 800b28e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b292:	e065      	b.n	800b360 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fa25 	bl	800b6e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2203      	movs	r2, #3
 800b29e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b2a2:	e05d      	b.n	800b360 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 fa1d 	bl	800b6e4 <USBD_CtlSendStatus>
      break;
 800b2aa:	e059      	b.n	800b360 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b2ac:	4b2f      	ldr	r3, [pc, #188]	; (800b36c <USBD_SetConfig+0x150>)
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d112      	bne.n	800b2da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b2bc:	4b2b      	ldr	r3, [pc, #172]	; (800b36c <USBD_SetConfig+0x150>)
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b2c6:	4b29      	ldr	r3, [pc, #164]	; (800b36c <USBD_SetConfig+0x150>)
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7fe ffd6 	bl	800a27e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fa06 	bl	800b6e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b2d8:	e042      	b.n	800b360 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b2da:	4b24      	ldr	r3, [pc, #144]	; (800b36c <USBD_SetConfig+0x150>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d02a      	beq.n	800b33e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7fe ffc4 	bl	800a27e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b2f6:	4b1d      	ldr	r3, [pc, #116]	; (800b36c <USBD_SetConfig+0x150>)
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b300:	4b1a      	ldr	r3, [pc, #104]	; (800b36c <USBD_SetConfig+0x150>)
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	4619      	mov	r1, r3
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7fe ff9d 	bl	800a246 <USBD_SetClassConfig>
 800b30c:	4603      	mov	r3, r0
 800b30e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b310:	7bfb      	ldrb	r3, [r7, #15]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00f      	beq.n	800b336 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f918 	bl	800b54e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	b2db      	uxtb	r3, r3
 800b324:	4619      	mov	r1, r3
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7fe ffa9 	bl	800a27e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2202      	movs	r2, #2
 800b330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b334:	e014      	b.n	800b360 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f9d4 	bl	800b6e4 <USBD_CtlSendStatus>
      break;
 800b33c:	e010      	b.n	800b360 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f9d0 	bl	800b6e4 <USBD_CtlSendStatus>
      break;
 800b344:	e00c      	b.n	800b360 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 f900 	bl	800b54e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b34e:	4b07      	ldr	r3, [pc, #28]	; (800b36c <USBD_SetConfig+0x150>)
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	4619      	mov	r1, r3
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f7fe ff92 	bl	800a27e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b35a:	2303      	movs	r3, #3
 800b35c:	73fb      	strb	r3, [r7, #15]
      break;
 800b35e:	bf00      	nop
  }

  return ret;
 800b360:	7bfb      	ldrb	r3, [r7, #15]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	2000041c 	.word	0x2000041c

0800b370 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	88db      	ldrh	r3, [r3, #6]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d004      	beq.n	800b38c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 f8e2 	bl	800b54e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b38a:	e023      	b.n	800b3d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b02      	cmp	r3, #2
 800b396:	dc02      	bgt.n	800b39e <USBD_GetConfig+0x2e>
 800b398:	2b00      	cmp	r3, #0
 800b39a:	dc03      	bgt.n	800b3a4 <USBD_GetConfig+0x34>
 800b39c:	e015      	b.n	800b3ca <USBD_GetConfig+0x5a>
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d00b      	beq.n	800b3ba <USBD_GetConfig+0x4a>
 800b3a2:	e012      	b.n	800b3ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f93c 	bl	800b630 <USBD_CtlSendData>
        break;
 800b3b8:	e00c      	b.n	800b3d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3304      	adds	r3, #4
 800b3be:	2201      	movs	r2, #1
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f934 	bl	800b630 <USBD_CtlSendData>
        break;
 800b3c8:	e004      	b.n	800b3d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 f8be 	bl	800b54e <USBD_CtlError>
        break;
 800b3d2:	bf00      	nop
}
 800b3d4:	bf00      	nop
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d81e      	bhi.n	800b432 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	88db      	ldrh	r3, [r3, #6]
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d004      	beq.n	800b406 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f8a5 	bl	800b54e <USBD_CtlError>
        break;
 800b404:	e01a      	b.n	800b43c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b412:	2b00      	cmp	r3, #0
 800b414:	d005      	beq.n	800b422 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	f043 0202 	orr.w	r2, r3, #2
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	330c      	adds	r3, #12
 800b426:	2202      	movs	r2, #2
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f900 	bl	800b630 <USBD_CtlSendData>
      break;
 800b430:	e004      	b.n	800b43c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b432:	6839      	ldr	r1, [r7, #0]
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f88a 	bl	800b54e <USBD_CtlError>
      break;
 800b43a:	bf00      	nop
  }
}
 800b43c:	bf00      	nop
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	885b      	ldrh	r3, [r3, #2]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d107      	bne.n	800b466 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f940 	bl	800b6e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b464:	e013      	b.n	800b48e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	885b      	ldrh	r3, [r3, #2]
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d10b      	bne.n	800b486 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	889b      	ldrh	r3, [r3, #4]
 800b472:	0a1b      	lsrs	r3, r3, #8
 800b474:	b29b      	uxth	r3, r3
 800b476:	b2da      	uxtb	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f930 	bl	800b6e4 <USBD_CtlSendStatus>
}
 800b484:	e003      	b.n	800b48e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b486:	6839      	ldr	r1, [r7, #0]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 f860 	bl	800b54e <USBD_CtlError>
}
 800b48e:	bf00      	nop
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b082      	sub	sp, #8
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	2b02      	cmp	r3, #2
 800b4ac:	d80b      	bhi.n	800b4c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	885b      	ldrh	r3, [r3, #2]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d10c      	bne.n	800b4d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f910 	bl	800b6e4 <USBD_CtlSendStatus>
      }
      break;
 800b4c4:	e004      	b.n	800b4d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f840 	bl	800b54e <USBD_CtlError>
      break;
 800b4ce:	e000      	b.n	800b4d2 <USBD_ClrFeature+0x3c>
      break;
 800b4d0:	bf00      	nop
  }
}
 800b4d2:	bf00      	nop
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b084      	sub	sp, #16
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
 800b4e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	781a      	ldrb	r2, [r3, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	781a      	ldrb	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3301      	adds	r3, #1
 800b502:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f7ff fa41 	bl	800a98c <SWAPBYTE>
 800b50a:	4603      	mov	r3, r0
 800b50c:	461a      	mov	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	3301      	adds	r3, #1
 800b516:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	3301      	adds	r3, #1
 800b51c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	f7ff fa34 	bl	800a98c <SWAPBYTE>
 800b524:	4603      	mov	r3, r0
 800b526:	461a      	mov	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	3301      	adds	r3, #1
 800b530:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	3301      	adds	r3, #1
 800b536:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f7ff fa27 	bl	800a98c <SWAPBYTE>
 800b53e:	4603      	mov	r3, r0
 800b540:	461a      	mov	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	80da      	strh	r2, [r3, #6]
}
 800b546:	bf00      	nop
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b082      	sub	sp, #8
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
 800b556:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b558:	2180      	movs	r1, #128	; 0x80
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f003 fa96 	bl	800ea8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b560:	2100      	movs	r1, #0
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f003 fa92 	bl	800ea8c <USBD_LL_StallEP>
}
 800b568:	bf00      	nop
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b57c:	2300      	movs	r3, #0
 800b57e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d036      	beq.n	800b5f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b58a:	6938      	ldr	r0, [r7, #16]
 800b58c:	f000 f836 	bl	800b5fc <USBD_GetLen>
 800b590:	4603      	mov	r3, r0
 800b592:	3301      	adds	r3, #1
 800b594:	b29b      	uxth	r3, r3
 800b596:	005b      	lsls	r3, r3, #1
 800b598:	b29a      	uxth	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b59e:	7dfb      	ldrb	r3, [r7, #23]
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	7812      	ldrb	r2, [r2, #0]
 800b5a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b5b0:	7dfb      	ldrb	r3, [r7, #23]
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	2203      	movs	r2, #3
 800b5b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b5ba:	7dfb      	ldrb	r3, [r7, #23]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b5c0:	e013      	b.n	800b5ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	7812      	ldrb	r2, [r2, #0]
 800b5cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	613b      	str	r3, [r7, #16]
    idx++;
 800b5d4:	7dfb      	ldrb	r3, [r7, #23]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b5da:	7dfb      	ldrb	r3, [r7, #23]
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	4413      	add	r3, r2
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b5e4:	7dfb      	ldrb	r3, [r7, #23]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1e7      	bne.n	800b5c2 <USBD_GetString+0x52>
 800b5f2:	e000      	b.n	800b5f6 <USBD_GetString+0x86>
    return;
 800b5f4:	bf00      	nop
  }
}
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b604:	2300      	movs	r3, #0
 800b606:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b60c:	e005      	b.n	800b61a <USBD_GetLen+0x1e>
  {
    len++;
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	3301      	adds	r3, #1
 800b612:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	3301      	adds	r3, #1
 800b618:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1f5      	bne.n	800b60e <USBD_GetLen+0x12>
  }

  return len;
 800b622:	7bfb      	ldrb	r3, [r7, #15]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3714      	adds	r7, #20
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2202      	movs	r2, #2
 800b640:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	2100      	movs	r1, #0
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f003 faa1 	bl	800eb9e <USBD_LL_Transmit>

  return USBD_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b084      	sub	sp, #16
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	60f8      	str	r0, [r7, #12]
 800b66e:	60b9      	str	r1, [r7, #8]
 800b670:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	2100      	movs	r1, #0
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f003 fa90 	bl	800eb9e <USBD_LL_Transmit>

  return USBD_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2203      	movs	r2, #3
 800b698:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f003 fa94 	bl	800ebe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	60f8      	str	r0, [r7, #12]
 800b6ca:	60b9      	str	r1, [r7, #8]
 800b6cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f003 fa83 	bl	800ebe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2204      	movs	r2, #4
 800b6f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f003 fa4f 	bl	800eb9e <USBD_LL_Transmit>

  return USBD_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b082      	sub	sp, #8
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2205      	movs	r2, #5
 800b716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b71a:	2300      	movs	r3, #0
 800b71c:	2200      	movs	r2, #0
 800b71e:	2100      	movs	r1, #0
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f003 fa5d 	bl	800ebe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3708      	adds	r7, #8
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <__NVIC_SetPriority>:
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	4603      	mov	r3, r0
 800b738:	6039      	str	r1, [r7, #0]
 800b73a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b73c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b740:	2b00      	cmp	r3, #0
 800b742:	db0a      	blt.n	800b75a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	b2da      	uxtb	r2, r3
 800b748:	490c      	ldr	r1, [pc, #48]	; (800b77c <__NVIC_SetPriority+0x4c>)
 800b74a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b74e:	0112      	lsls	r2, r2, #4
 800b750:	b2d2      	uxtb	r2, r2
 800b752:	440b      	add	r3, r1
 800b754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b758:	e00a      	b.n	800b770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	b2da      	uxtb	r2, r3
 800b75e:	4908      	ldr	r1, [pc, #32]	; (800b780 <__NVIC_SetPriority+0x50>)
 800b760:	79fb      	ldrb	r3, [r7, #7]
 800b762:	f003 030f 	and.w	r3, r3, #15
 800b766:	3b04      	subs	r3, #4
 800b768:	0112      	lsls	r2, r2, #4
 800b76a:	b2d2      	uxtb	r2, r2
 800b76c:	440b      	add	r3, r1
 800b76e:	761a      	strb	r2, [r3, #24]
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	e000e100 	.word	0xe000e100
 800b780:	e000ed00 	.word	0xe000ed00

0800b784 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b784:	b580      	push	{r7, lr}
 800b786:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b788:	4b05      	ldr	r3, [pc, #20]	; (800b7a0 <SysTick_Handler+0x1c>)
 800b78a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b78c:	f001 fd4c 	bl	800d228 <xTaskGetSchedulerState>
 800b790:	4603      	mov	r3, r0
 800b792:	2b01      	cmp	r3, #1
 800b794:	d001      	beq.n	800b79a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b796:	f002 fb37 	bl	800de08 <xPortSysTickHandler>
  }
}
 800b79a:	bf00      	nop
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	e000e010 	.word	0xe000e010

0800b7a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	f06f 0004 	mvn.w	r0, #4
 800b7ae:	f7ff ffbf 	bl	800b730 <__NVIC_SetPriority>
#endif
}
 800b7b2:	bf00      	nop
 800b7b4:	bd80      	pop	{r7, pc}
	...

0800b7b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7be:	f3ef 8305 	mrs	r3, IPSR
 800b7c2:	603b      	str	r3, [r7, #0]
  return(result);
 800b7c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d003      	beq.n	800b7d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b7ca:	f06f 0305 	mvn.w	r3, #5
 800b7ce:	607b      	str	r3, [r7, #4]
 800b7d0:	e00c      	b.n	800b7ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b7d2:	4b0a      	ldr	r3, [pc, #40]	; (800b7fc <osKernelInitialize+0x44>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d105      	bne.n	800b7e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b7da:	4b08      	ldr	r3, [pc, #32]	; (800b7fc <osKernelInitialize+0x44>)
 800b7dc:	2201      	movs	r2, #1
 800b7de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	607b      	str	r3, [r7, #4]
 800b7e4:	e002      	b.n	800b7ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b7ec:	687b      	ldr	r3, [r7, #4]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	370c      	adds	r7, #12
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	20000420 	.word	0x20000420

0800b800 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b806:	f3ef 8305 	mrs	r3, IPSR
 800b80a:	603b      	str	r3, [r7, #0]
  return(result);
 800b80c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d003      	beq.n	800b81a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b812:	f06f 0305 	mvn.w	r3, #5
 800b816:	607b      	str	r3, [r7, #4]
 800b818:	e010      	b.n	800b83c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b81a:	4b0b      	ldr	r3, [pc, #44]	; (800b848 <osKernelStart+0x48>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d109      	bne.n	800b836 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b822:	f7ff ffbf 	bl	800b7a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b826:	4b08      	ldr	r3, [pc, #32]	; (800b848 <osKernelStart+0x48>)
 800b828:	2202      	movs	r2, #2
 800b82a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b82c:	f001 f880 	bl	800c930 <vTaskStartScheduler>
      stat = osOK;
 800b830:	2300      	movs	r3, #0
 800b832:	607b      	str	r3, [r7, #4]
 800b834:	e002      	b.n	800b83c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b836:	f04f 33ff 	mov.w	r3, #4294967295
 800b83a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b83c:	687b      	ldr	r3, [r7, #4]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20000420 	.word	0x20000420

0800b84c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b08e      	sub	sp, #56	; 0x38
 800b850:	af04      	add	r7, sp, #16
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b858:	2300      	movs	r3, #0
 800b85a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b85c:	f3ef 8305 	mrs	r3, IPSR
 800b860:	617b      	str	r3, [r7, #20]
  return(result);
 800b862:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b864:	2b00      	cmp	r3, #0
 800b866:	d17e      	bne.n	800b966 <osThreadNew+0x11a>
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d07b      	beq.n	800b966 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b86e:	2380      	movs	r3, #128	; 0x80
 800b870:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b872:	2318      	movs	r3, #24
 800b874:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b876:	2300      	movs	r3, #0
 800b878:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b87a:	f04f 33ff 	mov.w	r3, #4294967295
 800b87e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d045      	beq.n	800b912 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d002      	beq.n	800b894 <osThreadNew+0x48>
        name = attr->name;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d002      	beq.n	800b8a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	699b      	ldr	r3, [r3, #24]
 800b8a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d008      	beq.n	800b8ba <osThreadNew+0x6e>
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	2b38      	cmp	r3, #56	; 0x38
 800b8ac:	d805      	bhi.n	800b8ba <osThreadNew+0x6e>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	f003 0301 	and.w	r3, r3, #1
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <osThreadNew+0x72>
        return (NULL);
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	e054      	b.n	800b968 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	089b      	lsrs	r3, r3, #2
 800b8cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00e      	beq.n	800b8f4 <osThreadNew+0xa8>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	2bbf      	cmp	r3, #191	; 0xbf
 800b8dc:	d90a      	bls.n	800b8f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d006      	beq.n	800b8f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d002      	beq.n	800b8f4 <osThreadNew+0xa8>
        mem = 1;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	61bb      	str	r3, [r7, #24]
 800b8f2:	e010      	b.n	800b916 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d10c      	bne.n	800b916 <osThreadNew+0xca>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d108      	bne.n	800b916 <osThreadNew+0xca>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d104      	bne.n	800b916 <osThreadNew+0xca>
          mem = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	61bb      	str	r3, [r7, #24]
 800b910:	e001      	b.n	800b916 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b912:	2300      	movs	r3, #0
 800b914:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d110      	bne.n	800b93e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b924:	9202      	str	r2, [sp, #8]
 800b926:	9301      	str	r3, [sp, #4]
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	6a3a      	ldr	r2, [r7, #32]
 800b930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f000 fe0c 	bl	800c550 <xTaskCreateStatic>
 800b938:	4603      	mov	r3, r0
 800b93a:	613b      	str	r3, [r7, #16]
 800b93c:	e013      	b.n	800b966 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d110      	bne.n	800b966 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b944:	6a3b      	ldr	r3, [r7, #32]
 800b946:	b29a      	uxth	r2, r3
 800b948:	f107 0310 	add.w	r3, r7, #16
 800b94c:	9301      	str	r3, [sp, #4]
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	9300      	str	r3, [sp, #0]
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f000 fe57 	bl	800c60a <xTaskCreate>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d001      	beq.n	800b966 <osThreadNew+0x11a>
            hTask = NULL;
 800b962:	2300      	movs	r3, #0
 800b964:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b966:	693b      	ldr	r3, [r7, #16]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3728      	adds	r7, #40	; 0x28
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b978:	f3ef 8305 	mrs	r3, IPSR
 800b97c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b97e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b980:	2b00      	cmp	r3, #0
 800b982:	d003      	beq.n	800b98c <osDelay+0x1c>
    stat = osErrorISR;
 800b984:	f06f 0305 	mvn.w	r3, #5
 800b988:	60fb      	str	r3, [r7, #12]
 800b98a:	e007      	b.n	800b99c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 ff96 	bl	800c8c8 <vTaskDelay>
    }
  }

  return (stat);
 800b99c:	68fb      	ldr	r3, [r7, #12]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
	...

0800b9a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	4a07      	ldr	r2, [pc, #28]	; (800b9d4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b9b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	4a06      	ldr	r2, [pc, #24]	; (800b9d8 <vApplicationGetIdleTaskMemory+0x30>)
 800b9be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2280      	movs	r2, #128	; 0x80
 800b9c4:	601a      	str	r2, [r3, #0]
}
 800b9c6:	bf00      	nop
 800b9c8:	3714      	adds	r7, #20
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	20000424 	.word	0x20000424
 800b9d8:	200004e4 	.word	0x200004e4

0800b9dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4a07      	ldr	r2, [pc, #28]	; (800ba08 <vApplicationGetTimerTaskMemory+0x2c>)
 800b9ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	4a06      	ldr	r2, [pc, #24]	; (800ba0c <vApplicationGetTimerTaskMemory+0x30>)
 800b9f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9fa:	601a      	str	r2, [r3, #0]
}
 800b9fc:	bf00      	nop
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	200006e4 	.word	0x200006e4
 800ba0c:	200007a4 	.word	0x200007a4

0800ba10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f103 0208 	add.w	r2, r3, #8
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f04f 32ff 	mov.w	r2, #4294967295
 800ba28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f103 0208 	add.w	r2, r3, #8
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f103 0208 	add.w	r2, r3, #8
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba44:	bf00      	nop
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b085      	sub	sp, #20
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	689a      	ldr	r2, [r3, #8]
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	1c5a      	adds	r2, r3, #1
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	601a      	str	r2, [r3, #0]
}
 800baa6:	bf00      	nop
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bab2:	b480      	push	{r7}
 800bab4:	b085      	sub	sp, #20
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac8:	d103      	bne.n	800bad2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	60fb      	str	r3, [r7, #12]
 800bad0:	e00c      	b.n	800baec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	3308      	adds	r3, #8
 800bad6:	60fb      	str	r3, [r7, #12]
 800bad8:	e002      	b.n	800bae0 <vListInsert+0x2e>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	60fb      	str	r3, [r7, #12]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d2f6      	bcs.n	800bada <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	685a      	ldr	r2, [r3, #4]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	601a      	str	r2, [r3, #0]
}
 800bb18:	bf00      	nop
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	6892      	ldr	r2, [r2, #8]
 800bb3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	6852      	ldr	r2, [r2, #4]
 800bb44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d103      	bne.n	800bb58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	689a      	ldr	r2, [r3, #8]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	1e5a      	subs	r2, r3, #1
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10a      	bne.n	800bba2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bb9e:	bf00      	nop
 800bba0:	e7fe      	b.n	800bba0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bba2:	f002 f89f 	bl	800dce4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbae:	68f9      	ldr	r1, [r7, #12]
 800bbb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bbb2:	fb01 f303 	mul.w	r3, r1, r3
 800bbb6:	441a      	add	r2, r3
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	68f9      	ldr	r1, [r7, #12]
 800bbd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bbd8:	fb01 f303 	mul.w	r3, r1, r3
 800bbdc:	441a      	add	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	22ff      	movs	r2, #255	; 0xff
 800bbe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	22ff      	movs	r2, #255	; 0xff
 800bbee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d114      	bne.n	800bc22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d01a      	beq.n	800bc36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	3310      	adds	r3, #16
 800bc04:	4618      	mov	r0, r3
 800bc06:	f001 f94b 	bl	800cea0 <xTaskRemoveFromEventList>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d012      	beq.n	800bc36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc10:	4b0c      	ldr	r3, [pc, #48]	; (800bc44 <xQueueGenericReset+0xcc>)
 800bc12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc16:	601a      	str	r2, [r3, #0]
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	e009      	b.n	800bc36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	3310      	adds	r3, #16
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff fef2 	bl	800ba10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	3324      	adds	r3, #36	; 0x24
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7ff feed 	bl	800ba10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc36:	f002 f885 	bl	800dd44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc3a:	2301      	movs	r3, #1
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	e000ed04 	.word	0xe000ed04

0800bc48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08e      	sub	sp, #56	; 0x38
 800bc4c:	af02      	add	r7, sp, #8
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
 800bc54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc6e:	bf00      	nop
 800bc70:	e7fe      	b.n	800bc70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10a      	bne.n	800bc8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d002      	beq.n	800bc9a <xQueueGenericCreateStatic+0x52>
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <xQueueGenericCreateStatic+0x56>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e000      	b.n	800bca0 <xQueueGenericCreateStatic+0x58>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10a      	bne.n	800bcba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	623b      	str	r3, [r7, #32]
}
 800bcb6:	bf00      	nop
 800bcb8:	e7fe      	b.n	800bcb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d102      	bne.n	800bcc6 <xQueueGenericCreateStatic+0x7e>
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <xQueueGenericCreateStatic+0x82>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e000      	b.n	800bccc <xQueueGenericCreateStatic+0x84>
 800bcca:	2300      	movs	r3, #0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10a      	bne.n	800bce6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	61fb      	str	r3, [r7, #28]
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bce6:	2350      	movs	r3, #80	; 0x50
 800bce8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b50      	cmp	r3, #80	; 0x50
 800bcee:	d00a      	beq.n	800bd06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	61bb      	str	r3, [r7, #24]
}
 800bd02:	bf00      	nop
 800bd04:	e7fe      	b.n	800bd04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00d      	beq.n	800bd2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd14:	2201      	movs	r2, #1
 800bd16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	4613      	mov	r3, r2
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	68b9      	ldr	r1, [r7, #8]
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f000 f805 	bl	800bd38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3730      	adds	r7, #48	; 0x30
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
 800bd44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d103      	bne.n	800bd54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	601a      	str	r2, [r3, #0]
 800bd52:	e002      	b.n	800bd5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd66:	2101      	movs	r1, #1
 800bd68:	69b8      	ldr	r0, [r7, #24]
 800bd6a:	f7ff ff05 	bl	800bb78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	78fa      	ldrb	r2, [r7, #3]
 800bd72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bd76:	bf00      	nop
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08e      	sub	sp, #56	; 0x38
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
 800bd8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10a      	bne.n	800bdb2 <xQueueGenericSend+0x32>
	__asm volatile
 800bd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bdae:	bf00      	nop
 800bdb0:	e7fe      	b.n	800bdb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d103      	bne.n	800bdc0 <xQueueGenericSend+0x40>
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <xQueueGenericSend+0x44>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e000      	b.n	800bdc6 <xQueueGenericSend+0x46>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10a      	bne.n	800bde0 <xQueueGenericSend+0x60>
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bddc:	bf00      	nop
 800bdde:	e7fe      	b.n	800bdde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d103      	bne.n	800bdee <xQueueGenericSend+0x6e>
 800bde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d101      	bne.n	800bdf2 <xQueueGenericSend+0x72>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e000      	b.n	800bdf4 <xQueueGenericSend+0x74>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10a      	bne.n	800be0e <xQueueGenericSend+0x8e>
	__asm volatile
 800bdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	623b      	str	r3, [r7, #32]
}
 800be0a:	bf00      	nop
 800be0c:	e7fe      	b.n	800be0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be0e:	f001 fa0b 	bl	800d228 <xTaskGetSchedulerState>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d102      	bne.n	800be1e <xQueueGenericSend+0x9e>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <xQueueGenericSend+0xa2>
 800be1e:	2301      	movs	r3, #1
 800be20:	e000      	b.n	800be24 <xQueueGenericSend+0xa4>
 800be22:	2300      	movs	r3, #0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d10a      	bne.n	800be3e <xQueueGenericSend+0xbe>
	__asm volatile
 800be28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	61fb      	str	r3, [r7, #28]
}
 800be3a:	bf00      	nop
 800be3c:	e7fe      	b.n	800be3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be3e:	f001 ff51 	bl	800dce4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d302      	bcc.n	800be54 <xQueueGenericSend+0xd4>
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b02      	cmp	r3, #2
 800be52:	d129      	bne.n	800bea8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be54:	683a      	ldr	r2, [r7, #0]
 800be56:	68b9      	ldr	r1, [r7, #8]
 800be58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be5a:	f000 fa0b 	bl	800c274 <prvCopyDataToQueue>
 800be5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	2b00      	cmp	r3, #0
 800be66:	d010      	beq.n	800be8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	3324      	adds	r3, #36	; 0x24
 800be6c:	4618      	mov	r0, r3
 800be6e:	f001 f817 	bl	800cea0 <xTaskRemoveFromEventList>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d013      	beq.n	800bea0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be78:	4b3f      	ldr	r3, [pc, #252]	; (800bf78 <xQueueGenericSend+0x1f8>)
 800be7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be7e:	601a      	str	r2, [r3, #0]
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	e00a      	b.n	800bea0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d007      	beq.n	800bea0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be90:	4b39      	ldr	r3, [pc, #228]	; (800bf78 <xQueueGenericSend+0x1f8>)
 800be92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be96:	601a      	str	r2, [r3, #0]
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bea0:	f001 ff50 	bl	800dd44 <vPortExitCritical>
				return pdPASS;
 800bea4:	2301      	movs	r3, #1
 800bea6:	e063      	b.n	800bf70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d103      	bne.n	800beb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800beae:	f001 ff49 	bl	800dd44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800beb2:	2300      	movs	r3, #0
 800beb4:	e05c      	b.n	800bf70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800beb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d106      	bne.n	800beca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bebc:	f107 0314 	add.w	r3, r7, #20
 800bec0:	4618      	mov	r0, r3
 800bec2:	f001 f851 	bl	800cf68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bec6:	2301      	movs	r3, #1
 800bec8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800beca:	f001 ff3b 	bl	800dd44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bece:	f000 fda1 	bl	800ca14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bed2:	f001 ff07 	bl	800dce4 <vPortEnterCritical>
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bedc:	b25b      	sxtb	r3, r3
 800bede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee2:	d103      	bne.n	800beec <xQueueGenericSend+0x16c>
 800bee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800beec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bef2:	b25b      	sxtb	r3, r3
 800bef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef8:	d103      	bne.n	800bf02 <xQueueGenericSend+0x182>
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	2200      	movs	r2, #0
 800befe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf02:	f001 ff1f 	bl	800dd44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf06:	1d3a      	adds	r2, r7, #4
 800bf08:	f107 0314 	add.w	r3, r7, #20
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f001 f840 	bl	800cf94 <xTaskCheckForTimeOut>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d124      	bne.n	800bf64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf1c:	f000 faa2 	bl	800c464 <prvIsQueueFull>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d018      	beq.n	800bf58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf28:	3310      	adds	r3, #16
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	4611      	mov	r1, r2
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 ff66 	bl	800ce00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bf34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf36:	f000 fa2d 	bl	800c394 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bf3a:	f000 fd79 	bl	800ca30 <xTaskResumeAll>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f47f af7c 	bne.w	800be3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bf46:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <xQueueGenericSend+0x1f8>)
 800bf48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf4c:	601a      	str	r2, [r3, #0]
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	e772      	b.n	800be3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bf58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf5a:	f000 fa1b 	bl	800c394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf5e:	f000 fd67 	bl	800ca30 <xTaskResumeAll>
 800bf62:	e76c      	b.n	800be3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf66:	f000 fa15 	bl	800c394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf6a:	f000 fd61 	bl	800ca30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3738      	adds	r7, #56	; 0x38
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	e000ed04 	.word	0xe000ed04

0800bf7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b090      	sub	sp, #64	; 0x40
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
 800bf88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10a      	bne.n	800bfaa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bfa6:	bf00      	nop
 800bfa8:	e7fe      	b.n	800bfa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d103      	bne.n	800bfb8 <xQueueGenericSendFromISR+0x3c>
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d101      	bne.n	800bfbc <xQueueGenericSendFromISR+0x40>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e000      	b.n	800bfbe <xQueueGenericSendFromISR+0x42>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10a      	bne.n	800bfd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc6:	f383 8811 	msr	BASEPRI, r3
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bfd4:	bf00      	nop
 800bfd6:	e7fe      	b.n	800bfd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d103      	bne.n	800bfe6 <xQueueGenericSendFromISR+0x6a>
 800bfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d101      	bne.n	800bfea <xQueueGenericSendFromISR+0x6e>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e000      	b.n	800bfec <xQueueGenericSendFromISR+0x70>
 800bfea:	2300      	movs	r3, #0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d10a      	bne.n	800c006 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	623b      	str	r3, [r7, #32]
}
 800c002:	bf00      	nop
 800c004:	e7fe      	b.n	800c004 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c006:	f001 ff4f 	bl	800dea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c00a:	f3ef 8211 	mrs	r2, BASEPRI
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	61fa      	str	r2, [r7, #28]
 800c020:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c022:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c024:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c02e:	429a      	cmp	r2, r3
 800c030:	d302      	bcc.n	800c038 <xQueueGenericSendFromISR+0xbc>
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	2b02      	cmp	r3, #2
 800c036:	d12f      	bne.n	800c098 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c046:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	68b9      	ldr	r1, [r7, #8]
 800c04c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c04e:	f000 f911 	bl	800c274 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c052:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05a:	d112      	bne.n	800c082 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c060:	2b00      	cmp	r3, #0
 800c062:	d016      	beq.n	800c092 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	3324      	adds	r3, #36	; 0x24
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 ff19 	bl	800cea0 <xTaskRemoveFromEventList>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d00e      	beq.n	800c092 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00b      	beq.n	800c092 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2201      	movs	r2, #1
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	e007      	b.n	800c092 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c082:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c086:	3301      	adds	r3, #1
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	b25a      	sxtb	r2, r3
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c092:	2301      	movs	r3, #1
 800c094:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c096:	e001      	b.n	800c09c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c098:	2300      	movs	r3, #0
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c0a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3740      	adds	r7, #64	; 0x40
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
	...

0800c0b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b08c      	sub	sp, #48	; 0x30
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <xQueueReceive+0x30>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	623b      	str	r3, [r7, #32]
}
 800c0e0:	bf00      	nop
 800c0e2:	e7fe      	b.n	800c0e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d103      	bne.n	800c0f2 <xQueueReceive+0x3e>
 800c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d101      	bne.n	800c0f6 <xQueueReceive+0x42>
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e000      	b.n	800c0f8 <xQueueReceive+0x44>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d10a      	bne.n	800c112 <xQueueReceive+0x5e>
	__asm volatile
 800c0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	61fb      	str	r3, [r7, #28]
}
 800c10e:	bf00      	nop
 800c110:	e7fe      	b.n	800c110 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c112:	f001 f889 	bl	800d228 <xTaskGetSchedulerState>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d102      	bne.n	800c122 <xQueueReceive+0x6e>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d101      	bne.n	800c126 <xQueueReceive+0x72>
 800c122:	2301      	movs	r3, #1
 800c124:	e000      	b.n	800c128 <xQueueReceive+0x74>
 800c126:	2300      	movs	r3, #0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10a      	bne.n	800c142 <xQueueReceive+0x8e>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	61bb      	str	r3, [r7, #24]
}
 800c13e:	bf00      	nop
 800c140:	e7fe      	b.n	800c140 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c142:	f001 fdcf 	bl	800dce4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c14a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d01f      	beq.n	800c192 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c152:	68b9      	ldr	r1, [r7, #8]
 800c154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c156:	f000 f8f7 	bl	800c348 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	1e5a      	subs	r2, r3, #1
 800c15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c160:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00f      	beq.n	800c18a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16c:	3310      	adds	r3, #16
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 fe96 	bl	800cea0 <xTaskRemoveFromEventList>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d007      	beq.n	800c18a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c17a:	4b3d      	ldr	r3, [pc, #244]	; (800c270 <xQueueReceive+0x1bc>)
 800c17c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c180:	601a      	str	r2, [r3, #0]
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c18a:	f001 fddb 	bl	800dd44 <vPortExitCritical>
				return pdPASS;
 800c18e:	2301      	movs	r3, #1
 800c190:	e069      	b.n	800c266 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d103      	bne.n	800c1a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c198:	f001 fdd4 	bl	800dd44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c19c:	2300      	movs	r3, #0
 800c19e:	e062      	b.n	800c266 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d106      	bne.n	800c1b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1a6:	f107 0310 	add.w	r3, r7, #16
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f000 fedc 	bl	800cf68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1b4:	f001 fdc6 	bl	800dd44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1b8:	f000 fc2c 	bl	800ca14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1bc:	f001 fd92 	bl	800dce4 <vPortEnterCritical>
 800c1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1c6:	b25b      	sxtb	r3, r3
 800c1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1cc:	d103      	bne.n	800c1d6 <xQueueReceive+0x122>
 800c1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1dc:	b25b      	sxtb	r3, r3
 800c1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e2:	d103      	bne.n	800c1ec <xQueueReceive+0x138>
 800c1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1ec:	f001 fdaa 	bl	800dd44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1f0:	1d3a      	adds	r2, r7, #4
 800c1f2:	f107 0310 	add.w	r3, r7, #16
 800c1f6:	4611      	mov	r1, r2
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f000 fecb 	bl	800cf94 <xTaskCheckForTimeOut>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d123      	bne.n	800c24c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c206:	f000 f917 	bl	800c438 <prvIsQueueEmpty>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d017      	beq.n	800c240 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c212:	3324      	adds	r3, #36	; 0x24
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	4611      	mov	r1, r2
 800c218:	4618      	mov	r0, r3
 800c21a:	f000 fdf1 	bl	800ce00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c21e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c220:	f000 f8b8 	bl	800c394 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c224:	f000 fc04 	bl	800ca30 <xTaskResumeAll>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d189      	bne.n	800c142 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c22e:	4b10      	ldr	r3, [pc, #64]	; (800c270 <xQueueReceive+0x1bc>)
 800c230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	e780      	b.n	800c142 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c242:	f000 f8a7 	bl	800c394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c246:	f000 fbf3 	bl	800ca30 <xTaskResumeAll>
 800c24a:	e77a      	b.n	800c142 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c24c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c24e:	f000 f8a1 	bl	800c394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c252:	f000 fbed 	bl	800ca30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c258:	f000 f8ee 	bl	800c438 <prvIsQueueEmpty>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f43f af6f 	beq.w	800c142 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c264:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c266:	4618      	mov	r0, r3
 800c268:	3730      	adds	r7, #48	; 0x30
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	e000ed04 	.word	0xe000ed04

0800c274 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c280:	2300      	movs	r3, #0
 800c282:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c288:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10d      	bne.n	800c2ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d14d      	bne.n	800c336 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 ffe0 	bl	800d264 <xTaskPriorityDisinherit>
 800c2a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	609a      	str	r2, [r3, #8]
 800c2ac:	e043      	b.n	800c336 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d119      	bne.n	800c2e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6858      	ldr	r0, [r3, #4]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2bc:	461a      	mov	r2, r3
 800c2be:	68b9      	ldr	r1, [r7, #8]
 800c2c0:	f002 fd42 	bl	800ed48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2cc:	441a      	add	r2, r3
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d32b      	bcc.n	800c336 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	605a      	str	r2, [r3, #4]
 800c2e6:	e026      	b.n	800c336 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	68d8      	ldr	r0, [r3, #12]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	68b9      	ldr	r1, [r7, #8]
 800c2f4:	f002 fd28 	bl	800ed48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	68da      	ldr	r2, [r3, #12]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c300:	425b      	negs	r3, r3
 800c302:	441a      	add	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	68da      	ldr	r2, [r3, #12]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	429a      	cmp	r2, r3
 800c312:	d207      	bcs.n	800c324 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	689a      	ldr	r2, [r3, #8]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31c:	425b      	negs	r3, r3
 800c31e:	441a      	add	r2, r3
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b02      	cmp	r3, #2
 800c328:	d105      	bne.n	800c336 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d002      	beq.n	800c336 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	3b01      	subs	r3, #1
 800c334:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	1c5a      	adds	r2, r3, #1
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c33e:	697b      	ldr	r3, [r7, #20]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c356:	2b00      	cmp	r3, #0
 800c358:	d018      	beq.n	800c38c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	68da      	ldr	r2, [r3, #12]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c362:	441a      	add	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	68da      	ldr	r2, [r3, #12]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	429a      	cmp	r2, r3
 800c372:	d303      	bcc.n	800c37c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	68d9      	ldr	r1, [r3, #12]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c384:	461a      	mov	r2, r3
 800c386:	6838      	ldr	r0, [r7, #0]
 800c388:	f002 fcde 	bl	800ed48 <memcpy>
	}
}
 800c38c:	bf00      	nop
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c39c:	f001 fca2 	bl	800dce4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3a8:	e011      	b.n	800c3ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d012      	beq.n	800c3d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	3324      	adds	r3, #36	; 0x24
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f000 fd72 	bl	800cea0 <xTaskRemoveFromEventList>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d001      	beq.n	800c3c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c3c2:	f000 fe49 	bl	800d058 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	dce9      	bgt.n	800c3aa <prvUnlockQueue+0x16>
 800c3d6:	e000      	b.n	800c3da <prvUnlockQueue+0x46>
					break;
 800c3d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	22ff      	movs	r2, #255	; 0xff
 800c3de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c3e2:	f001 fcaf 	bl	800dd44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c3e6:	f001 fc7d 	bl	800dce4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3f2:	e011      	b.n	800c418 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d012      	beq.n	800c422 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3310      	adds	r3, #16
 800c400:	4618      	mov	r0, r3
 800c402:	f000 fd4d 	bl	800cea0 <xTaskRemoveFromEventList>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c40c:	f000 fe24 	bl	800d058 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c410:	7bbb      	ldrb	r3, [r7, #14]
 800c412:	3b01      	subs	r3, #1
 800c414:	b2db      	uxtb	r3, r3
 800c416:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	dce9      	bgt.n	800c3f4 <prvUnlockQueue+0x60>
 800c420:	e000      	b.n	800c424 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c422:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	22ff      	movs	r2, #255	; 0xff
 800c428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c42c:	f001 fc8a 	bl	800dd44 <vPortExitCritical>
}
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c440:	f001 fc50 	bl	800dce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d102      	bne.n	800c452 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c44c:	2301      	movs	r3, #1
 800c44e:	60fb      	str	r3, [r7, #12]
 800c450:	e001      	b.n	800c456 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c452:	2300      	movs	r3, #0
 800c454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c456:	f001 fc75 	bl	800dd44 <vPortExitCritical>

	return xReturn;
 800c45a:	68fb      	ldr	r3, [r7, #12]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c46c:	f001 fc3a 	bl	800dce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c478:	429a      	cmp	r2, r3
 800c47a:	d102      	bne.n	800c482 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c47c:	2301      	movs	r3, #1
 800c47e:	60fb      	str	r3, [r7, #12]
 800c480:	e001      	b.n	800c486 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c482:	2300      	movs	r3, #0
 800c484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c486:	f001 fc5d 	bl	800dd44 <vPortExitCritical>

	return xReturn;
 800c48a:	68fb      	ldr	r3, [r7, #12]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c49e:	2300      	movs	r3, #0
 800c4a0:	60fb      	str	r3, [r7, #12]
 800c4a2:	e014      	b.n	800c4ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c4a4:	4a0f      	ldr	r2, [pc, #60]	; (800c4e4 <vQueueAddToRegistry+0x50>)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10b      	bne.n	800c4c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c4b0:	490c      	ldr	r1, [pc, #48]	; (800c4e4 <vQueueAddToRegistry+0x50>)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c4ba:	4a0a      	ldr	r2, [pc, #40]	; (800c4e4 <vQueueAddToRegistry+0x50>)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	00db      	lsls	r3, r3, #3
 800c4c0:	4413      	add	r3, r2
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c4c6:	e006      	b.n	800c4d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	60fb      	str	r3, [r7, #12]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2b07      	cmp	r3, #7
 800c4d2:	d9e7      	bls.n	800c4a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c4d4:	bf00      	nop
 800c4d6:	bf00      	nop
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	20000ba4 	.word	0x20000ba4

0800c4e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c4f8:	f001 fbf4 	bl	800dce4 <vPortEnterCritical>
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c502:	b25b      	sxtb	r3, r3
 800c504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c508:	d103      	bne.n	800c512 <vQueueWaitForMessageRestricted+0x2a>
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c518:	b25b      	sxtb	r3, r3
 800c51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c51e:	d103      	bne.n	800c528 <vQueueWaitForMessageRestricted+0x40>
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	2200      	movs	r2, #0
 800c524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c528:	f001 fc0c 	bl	800dd44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c530:	2b00      	cmp	r3, #0
 800c532:	d106      	bne.n	800c542 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	3324      	adds	r3, #36	; 0x24
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	68b9      	ldr	r1, [r7, #8]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 fc83 	bl	800ce48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c542:	6978      	ldr	r0, [r7, #20]
 800c544:	f7ff ff26 	bl	800c394 <prvUnlockQueue>
	}
 800c548:	bf00      	nop
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c550:	b580      	push	{r7, lr}
 800c552:	b08e      	sub	sp, #56	; 0x38
 800c554:	af04      	add	r7, sp, #16
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
 800c55c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c560:	2b00      	cmp	r3, #0
 800c562:	d10a      	bne.n	800c57a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c568:	f383 8811 	msr	BASEPRI, r3
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	623b      	str	r3, [r7, #32]
}
 800c576:	bf00      	nop
 800c578:	e7fe      	b.n	800c578 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10a      	bne.n	800c596 <xTaskCreateStatic+0x46>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	61fb      	str	r3, [r7, #28]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c596:	23c0      	movs	r3, #192	; 0xc0
 800c598:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	2bc0      	cmp	r3, #192	; 0xc0
 800c59e:	d00a      	beq.n	800c5b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	61bb      	str	r3, [r7, #24]
}
 800c5b2:	bf00      	nop
 800c5b4:	e7fe      	b.n	800c5b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c5b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d01e      	beq.n	800c5fc <xTaskCreateStatic+0xac>
 800c5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d01b      	beq.n	800c5fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d0:	2202      	movs	r2, #2
 800c5d2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	9303      	str	r3, [sp, #12]
 800c5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5dc:	9302      	str	r3, [sp, #8]
 800c5de:	f107 0314 	add.w	r3, r7, #20
 800c5e2:	9301      	str	r3, [sp, #4]
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	68b9      	ldr	r1, [r7, #8]
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	f000 f850 	bl	800c694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5f6:	f000 f8f7 	bl	800c7e8 <prvAddNewTaskToReadyList>
 800c5fa:	e001      	b.n	800c600 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c600:	697b      	ldr	r3, [r7, #20]
	}
 800c602:	4618      	mov	r0, r3
 800c604:	3728      	adds	r7, #40	; 0x28
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b08c      	sub	sp, #48	; 0x30
 800c60e:	af04      	add	r7, sp, #16
 800c610:	60f8      	str	r0, [r7, #12]
 800c612:	60b9      	str	r1, [r7, #8]
 800c614:	603b      	str	r3, [r7, #0]
 800c616:	4613      	mov	r3, r2
 800c618:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c61a:	88fb      	ldrh	r3, [r7, #6]
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	4618      	mov	r0, r3
 800c620:	f001 fc82 	bl	800df28 <pvPortMalloc>
 800c624:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00e      	beq.n	800c64a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c62c:	20c0      	movs	r0, #192	; 0xc0
 800c62e:	f001 fc7b 	bl	800df28 <pvPortMalloc>
 800c632:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d003      	beq.n	800c642 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	697a      	ldr	r2, [r7, #20]
 800c63e:	631a      	str	r2, [r3, #48]	; 0x30
 800c640:	e005      	b.n	800c64e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c642:	6978      	ldr	r0, [r7, #20]
 800c644:	f001 fd3c 	bl	800e0c0 <vPortFree>
 800c648:	e001      	b.n	800c64e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c64a:	2300      	movs	r3, #0
 800c64c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d017      	beq.n	800c684 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	2200      	movs	r2, #0
 800c658:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c65c:	88fa      	ldrh	r2, [r7, #6]
 800c65e:	2300      	movs	r3, #0
 800c660:	9303      	str	r3, [sp, #12]
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	9302      	str	r3, [sp, #8]
 800c666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c668:	9301      	str	r3, [sp, #4]
 800c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	68b9      	ldr	r1, [r7, #8]
 800c672:	68f8      	ldr	r0, [r7, #12]
 800c674:	f000 f80e 	bl	800c694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c678:	69f8      	ldr	r0, [r7, #28]
 800c67a:	f000 f8b5 	bl	800c7e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c67e:	2301      	movs	r3, #1
 800c680:	61bb      	str	r3, [r7, #24]
 800c682:	e002      	b.n	800c68a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c684:	f04f 33ff 	mov.w	r3, #4294967295
 800c688:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c68a:	69bb      	ldr	r3, [r7, #24]
	}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3720      	adds	r7, #32
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b088      	sub	sp, #32
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	607a      	str	r2, [r7, #4]
 800c6a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	21a5      	movs	r1, #165	; 0xa5
 800c6ae:	f002 fb59 	bl	800ed64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	4413      	add	r3, r2
 800c6c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	f023 0307 	bic.w	r3, r3, #7
 800c6ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	f003 0307 	and.w	r3, r3, #7
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00a      	beq.n	800c6ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800c6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	617b      	str	r3, [r7, #20]
}
 800c6e8:	bf00      	nop
 800c6ea:	e7fe      	b.n	800c6ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d01f      	beq.n	800c732 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	61fb      	str	r3, [r7, #28]
 800c6f6:	e012      	b.n	800c71e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	7819      	ldrb	r1, [r3, #0]
 800c700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	4413      	add	r3, r2
 800c706:	3334      	adds	r3, #52	; 0x34
 800c708:	460a      	mov	r2, r1
 800c70a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	4413      	add	r3, r2
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d006      	beq.n	800c726 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	3301      	adds	r3, #1
 800c71c:	61fb      	str	r3, [r7, #28]
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	2b0f      	cmp	r3, #15
 800c722:	d9e9      	bls.n	800c6f8 <prvInitialiseNewTask+0x64>
 800c724:	e000      	b.n	800c728 <prvInitialiseNewTask+0x94>
			{
				break;
 800c726:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c730:	e003      	b.n	800c73a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	2200      	movs	r2, #0
 800c736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73c:	2b37      	cmp	r3, #55	; 0x37
 800c73e:	d901      	bls.n	800c744 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c740:	2337      	movs	r3, #55	; 0x37
 800c742:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c748:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c74e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c752:	2200      	movs	r2, #0
 800c754:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c758:	3304      	adds	r3, #4
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7ff f978 	bl	800ba50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c762:	3318      	adds	r3, #24
 800c764:	4618      	mov	r0, r3
 800c766:	f7ff f973 	bl	800ba50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c76e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c778:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c77e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	2200      	movs	r2, #0
 800c784:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c788:	2200      	movs	r2, #0
 800c78a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	2200      	movs	r2, #0
 800c792:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	3358      	adds	r3, #88	; 0x58
 800c79a:	2260      	movs	r2, #96	; 0x60
 800c79c:	2100      	movs	r1, #0
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f002 fae0 	bl	800ed64 <memset>
 800c7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a6:	4a0d      	ldr	r2, [pc, #52]	; (800c7dc <prvInitialiseNewTask+0x148>)
 800c7a8:	65da      	str	r2, [r3, #92]	; 0x5c
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	4a0c      	ldr	r2, [pc, #48]	; (800c7e0 <prvInitialiseNewTask+0x14c>)
 800c7ae:	661a      	str	r2, [r3, #96]	; 0x60
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	4a0c      	ldr	r2, [pc, #48]	; (800c7e4 <prvInitialiseNewTask+0x150>)
 800c7b4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	68f9      	ldr	r1, [r7, #12]
 800c7ba:	69b8      	ldr	r0, [r7, #24]
 800c7bc:	f001 f962 	bl	800da84 <pxPortInitialiseStack>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7d2:	bf00      	nop
 800c7d4:	3720      	adds	r7, #32
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	08012388 	.word	0x08012388
 800c7e0:	080123a8 	.word	0x080123a8
 800c7e4:	08012368 	.word	0x08012368

0800c7e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c7f0:	f001 fa78 	bl	800dce4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c7f4:	4b2d      	ldr	r3, [pc, #180]	; (800c8ac <prvAddNewTaskToReadyList+0xc4>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	4a2c      	ldr	r2, [pc, #176]	; (800c8ac <prvAddNewTaskToReadyList+0xc4>)
 800c7fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c7fe:	4b2c      	ldr	r3, [pc, #176]	; (800c8b0 <prvAddNewTaskToReadyList+0xc8>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d109      	bne.n	800c81a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c806:	4a2a      	ldr	r2, [pc, #168]	; (800c8b0 <prvAddNewTaskToReadyList+0xc8>)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c80c:	4b27      	ldr	r3, [pc, #156]	; (800c8ac <prvAddNewTaskToReadyList+0xc4>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d110      	bne.n	800c836 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c814:	f000 fc46 	bl	800d0a4 <prvInitialiseTaskLists>
 800c818:	e00d      	b.n	800c836 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c81a:	4b26      	ldr	r3, [pc, #152]	; (800c8b4 <prvAddNewTaskToReadyList+0xcc>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d109      	bne.n	800c836 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c822:	4b23      	ldr	r3, [pc, #140]	; (800c8b0 <prvAddNewTaskToReadyList+0xc8>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d802      	bhi.n	800c836 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c830:	4a1f      	ldr	r2, [pc, #124]	; (800c8b0 <prvAddNewTaskToReadyList+0xc8>)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c836:	4b20      	ldr	r3, [pc, #128]	; (800c8b8 <prvAddNewTaskToReadyList+0xd0>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	3301      	adds	r3, #1
 800c83c:	4a1e      	ldr	r2, [pc, #120]	; (800c8b8 <prvAddNewTaskToReadyList+0xd0>)
 800c83e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c840:	4b1d      	ldr	r3, [pc, #116]	; (800c8b8 <prvAddNewTaskToReadyList+0xd0>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c84c:	4b1b      	ldr	r3, [pc, #108]	; (800c8bc <prvAddNewTaskToReadyList+0xd4>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	429a      	cmp	r2, r3
 800c852:	d903      	bls.n	800c85c <prvAddNewTaskToReadyList+0x74>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c858:	4a18      	ldr	r2, [pc, #96]	; (800c8bc <prvAddNewTaskToReadyList+0xd4>)
 800c85a:	6013      	str	r3, [r2, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c860:	4613      	mov	r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	4413      	add	r3, r2
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	4a15      	ldr	r2, [pc, #84]	; (800c8c0 <prvAddNewTaskToReadyList+0xd8>)
 800c86a:	441a      	add	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	3304      	adds	r3, #4
 800c870:	4619      	mov	r1, r3
 800c872:	4610      	mov	r0, r2
 800c874:	f7ff f8f9 	bl	800ba6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c878:	f001 fa64 	bl	800dd44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c87c:	4b0d      	ldr	r3, [pc, #52]	; (800c8b4 <prvAddNewTaskToReadyList+0xcc>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00e      	beq.n	800c8a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c884:	4b0a      	ldr	r3, [pc, #40]	; (800c8b0 <prvAddNewTaskToReadyList+0xc8>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88e:	429a      	cmp	r2, r3
 800c890:	d207      	bcs.n	800c8a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c892:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <prvAddNewTaskToReadyList+0xdc>)
 800c894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c898:	601a      	str	r2, [r3, #0]
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8a2:	bf00      	nop
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	200010b8 	.word	0x200010b8
 800c8b0:	20000be4 	.word	0x20000be4
 800c8b4:	200010c4 	.word	0x200010c4
 800c8b8:	200010d4 	.word	0x200010d4
 800c8bc:	200010c0 	.word	0x200010c0
 800c8c0:	20000be8 	.word	0x20000be8
 800c8c4:	e000ed04 	.word	0xe000ed04

0800c8c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d017      	beq.n	800c90a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c8da:	4b13      	ldr	r3, [pc, #76]	; (800c928 <vTaskDelay+0x60>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00a      	beq.n	800c8f8 <vTaskDelay+0x30>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	60bb      	str	r3, [r7, #8]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c8f8:	f000 f88c 	bl	800ca14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fd1e 	bl	800d340 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c904:	f000 f894 	bl	800ca30 <xTaskResumeAll>
 800c908:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d107      	bne.n	800c920 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c910:	4b06      	ldr	r3, [pc, #24]	; (800c92c <vTaskDelay+0x64>)
 800c912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c916:	601a      	str	r2, [r3, #0]
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c920:	bf00      	nop
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	200010e0 	.word	0x200010e0
 800c92c:	e000ed04 	.word	0xe000ed04

0800c930 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b08a      	sub	sp, #40	; 0x28
 800c934:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c936:	2300      	movs	r3, #0
 800c938:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c93a:	2300      	movs	r3, #0
 800c93c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c93e:	463a      	mov	r2, r7
 800c940:	1d39      	adds	r1, r7, #4
 800c942:	f107 0308 	add.w	r3, r7, #8
 800c946:	4618      	mov	r0, r3
 800c948:	f7ff f82e 	bl	800b9a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	68ba      	ldr	r2, [r7, #8]
 800c952:	9202      	str	r2, [sp, #8]
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	2300      	movs	r3, #0
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	2300      	movs	r3, #0
 800c95c:	460a      	mov	r2, r1
 800c95e:	4925      	ldr	r1, [pc, #148]	; (800c9f4 <vTaskStartScheduler+0xc4>)
 800c960:	4825      	ldr	r0, [pc, #148]	; (800c9f8 <vTaskStartScheduler+0xc8>)
 800c962:	f7ff fdf5 	bl	800c550 <xTaskCreateStatic>
 800c966:	4603      	mov	r3, r0
 800c968:	4a24      	ldr	r2, [pc, #144]	; (800c9fc <vTaskStartScheduler+0xcc>)
 800c96a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c96c:	4b23      	ldr	r3, [pc, #140]	; (800c9fc <vTaskStartScheduler+0xcc>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d002      	beq.n	800c97a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c974:	2301      	movs	r3, #1
 800c976:	617b      	str	r3, [r7, #20]
 800c978:	e001      	b.n	800c97e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c97a:	2300      	movs	r3, #0
 800c97c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	2b01      	cmp	r3, #1
 800c982:	d102      	bne.n	800c98a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c984:	f000 fd30 	bl	800d3e8 <xTimerCreateTimerTask>
 800c988:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d11d      	bne.n	800c9cc <vTaskStartScheduler+0x9c>
	__asm volatile
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	613b      	str	r3, [r7, #16]
}
 800c9a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c9a4:	4b16      	ldr	r3, [pc, #88]	; (800ca00 <vTaskStartScheduler+0xd0>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3358      	adds	r3, #88	; 0x58
 800c9aa:	4a16      	ldr	r2, [pc, #88]	; (800ca04 <vTaskStartScheduler+0xd4>)
 800c9ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9ae:	4b16      	ldr	r3, [pc, #88]	; (800ca08 <vTaskStartScheduler+0xd8>)
 800c9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9b6:	4b15      	ldr	r3, [pc, #84]	; (800ca0c <vTaskStartScheduler+0xdc>)
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9bc:	4b14      	ldr	r3, [pc, #80]	; (800ca10 <vTaskStartScheduler+0xe0>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c9c2:	f7f3 feeb 	bl	800079c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9c6:	f001 f8eb 	bl	800dba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9ca:	e00e      	b.n	800c9ea <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d2:	d10a      	bne.n	800c9ea <vTaskStartScheduler+0xba>
	__asm volatile
 800c9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	60fb      	str	r3, [r7, #12]
}
 800c9e6:	bf00      	nop
 800c9e8:	e7fe      	b.n	800c9e8 <vTaskStartScheduler+0xb8>
}
 800c9ea:	bf00      	nop
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	0800f9f4 	.word	0x0800f9f4
 800c9f8:	0800d071 	.word	0x0800d071
 800c9fc:	200010dc 	.word	0x200010dc
 800ca00:	20000be4 	.word	0x20000be4
 800ca04:	20000170 	.word	0x20000170
 800ca08:	200010d8 	.word	0x200010d8
 800ca0c:	200010c4 	.word	0x200010c4
 800ca10:	200010bc 	.word	0x200010bc

0800ca14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca14:	b480      	push	{r7}
 800ca16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca18:	4b04      	ldr	r3, [pc, #16]	; (800ca2c <vTaskSuspendAll+0x18>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	4a03      	ldr	r2, [pc, #12]	; (800ca2c <vTaskSuspendAll+0x18>)
 800ca20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca22:	bf00      	nop
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr
 800ca2c:	200010e0 	.word	0x200010e0

0800ca30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca36:	2300      	movs	r3, #0
 800ca38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca3e:	4b42      	ldr	r3, [pc, #264]	; (800cb48 <xTaskResumeAll+0x118>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10a      	bne.n	800ca5c <xTaskResumeAll+0x2c>
	__asm volatile
 800ca46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4a:	f383 8811 	msr	BASEPRI, r3
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	603b      	str	r3, [r7, #0]
}
 800ca58:	bf00      	nop
 800ca5a:	e7fe      	b.n	800ca5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca5c:	f001 f942 	bl	800dce4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca60:	4b39      	ldr	r3, [pc, #228]	; (800cb48 <xTaskResumeAll+0x118>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	3b01      	subs	r3, #1
 800ca66:	4a38      	ldr	r2, [pc, #224]	; (800cb48 <xTaskResumeAll+0x118>)
 800ca68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca6a:	4b37      	ldr	r3, [pc, #220]	; (800cb48 <xTaskResumeAll+0x118>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d162      	bne.n	800cb38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca72:	4b36      	ldr	r3, [pc, #216]	; (800cb4c <xTaskResumeAll+0x11c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d05e      	beq.n	800cb38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca7a:	e02f      	b.n	800cadc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca7c:	4b34      	ldr	r3, [pc, #208]	; (800cb50 <xTaskResumeAll+0x120>)
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	3318      	adds	r3, #24
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7ff f84b 	bl	800bb24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	3304      	adds	r3, #4
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7ff f846 	bl	800bb24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9c:	4b2d      	ldr	r3, [pc, #180]	; (800cb54 <xTaskResumeAll+0x124>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d903      	bls.n	800caac <xTaskResumeAll+0x7c>
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa8:	4a2a      	ldr	r2, [pc, #168]	; (800cb54 <xTaskResumeAll+0x124>)
 800caaa:	6013      	str	r3, [r2, #0]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab0:	4613      	mov	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	009b      	lsls	r3, r3, #2
 800cab8:	4a27      	ldr	r2, [pc, #156]	; (800cb58 <xTaskResumeAll+0x128>)
 800caba:	441a      	add	r2, r3
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	3304      	adds	r3, #4
 800cac0:	4619      	mov	r1, r3
 800cac2:	4610      	mov	r0, r2
 800cac4:	f7fe ffd1 	bl	800ba6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cacc:	4b23      	ldr	r3, [pc, #140]	; (800cb5c <xTaskResumeAll+0x12c>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d302      	bcc.n	800cadc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cad6:	4b22      	ldr	r3, [pc, #136]	; (800cb60 <xTaskResumeAll+0x130>)
 800cad8:	2201      	movs	r2, #1
 800cada:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cadc:	4b1c      	ldr	r3, [pc, #112]	; (800cb50 <xTaskResumeAll+0x120>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1cb      	bne.n	800ca7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d001      	beq.n	800caee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800caea:	f000 fb7d 	bl	800d1e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800caee:	4b1d      	ldr	r3, [pc, #116]	; (800cb64 <xTaskResumeAll+0x134>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d010      	beq.n	800cb1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cafa:	f000 f847 	bl	800cb8c <xTaskIncrementTick>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d002      	beq.n	800cb0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cb04:	4b16      	ldr	r3, [pc, #88]	; (800cb60 <xTaskResumeAll+0x130>)
 800cb06:	2201      	movs	r2, #1
 800cb08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d1f1      	bne.n	800cafa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cb16:	4b13      	ldr	r3, [pc, #76]	; (800cb64 <xTaskResumeAll+0x134>)
 800cb18:	2200      	movs	r2, #0
 800cb1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb1c:	4b10      	ldr	r3, [pc, #64]	; (800cb60 <xTaskResumeAll+0x130>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d009      	beq.n	800cb38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb24:	2301      	movs	r3, #1
 800cb26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb28:	4b0f      	ldr	r3, [pc, #60]	; (800cb68 <xTaskResumeAll+0x138>)
 800cb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb38:	f001 f904 	bl	800dd44 <vPortExitCritical>

	return xAlreadyYielded;
 800cb3c:	68bb      	ldr	r3, [r7, #8]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	200010e0 	.word	0x200010e0
 800cb4c:	200010b8 	.word	0x200010b8
 800cb50:	20001078 	.word	0x20001078
 800cb54:	200010c0 	.word	0x200010c0
 800cb58:	20000be8 	.word	0x20000be8
 800cb5c:	20000be4 	.word	0x20000be4
 800cb60:	200010cc 	.word	0x200010cc
 800cb64:	200010c8 	.word	0x200010c8
 800cb68:	e000ed04 	.word	0xe000ed04

0800cb6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb72:	4b05      	ldr	r3, [pc, #20]	; (800cb88 <xTaskGetTickCount+0x1c>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb78:	687b      	ldr	r3, [r7, #4]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	370c      	adds	r7, #12
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	200010bc 	.word	0x200010bc

0800cb8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb92:	2300      	movs	r3, #0
 800cb94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb96:	4b4f      	ldr	r3, [pc, #316]	; (800ccd4 <xTaskIncrementTick+0x148>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	f040 808f 	bne.w	800ccbe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cba0:	4b4d      	ldr	r3, [pc, #308]	; (800ccd8 <xTaskIncrementTick+0x14c>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	3301      	adds	r3, #1
 800cba6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cba8:	4a4b      	ldr	r2, [pc, #300]	; (800ccd8 <xTaskIncrementTick+0x14c>)
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d120      	bne.n	800cbf6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cbb4:	4b49      	ldr	r3, [pc, #292]	; (800ccdc <xTaskIncrementTick+0x150>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00a      	beq.n	800cbd4 <xTaskIncrementTick+0x48>
	__asm volatile
 800cbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc2:	f383 8811 	msr	BASEPRI, r3
 800cbc6:	f3bf 8f6f 	isb	sy
 800cbca:	f3bf 8f4f 	dsb	sy
 800cbce:	603b      	str	r3, [r7, #0]
}
 800cbd0:	bf00      	nop
 800cbd2:	e7fe      	b.n	800cbd2 <xTaskIncrementTick+0x46>
 800cbd4:	4b41      	ldr	r3, [pc, #260]	; (800ccdc <xTaskIncrementTick+0x150>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	60fb      	str	r3, [r7, #12]
 800cbda:	4b41      	ldr	r3, [pc, #260]	; (800cce0 <xTaskIncrementTick+0x154>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a3f      	ldr	r2, [pc, #252]	; (800ccdc <xTaskIncrementTick+0x150>)
 800cbe0:	6013      	str	r3, [r2, #0]
 800cbe2:	4a3f      	ldr	r2, [pc, #252]	; (800cce0 <xTaskIncrementTick+0x154>)
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6013      	str	r3, [r2, #0]
 800cbe8:	4b3e      	ldr	r3, [pc, #248]	; (800cce4 <xTaskIncrementTick+0x158>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3301      	adds	r3, #1
 800cbee:	4a3d      	ldr	r2, [pc, #244]	; (800cce4 <xTaskIncrementTick+0x158>)
 800cbf0:	6013      	str	r3, [r2, #0]
 800cbf2:	f000 faf9 	bl	800d1e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbf6:	4b3c      	ldr	r3, [pc, #240]	; (800cce8 <xTaskIncrementTick+0x15c>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	693a      	ldr	r2, [r7, #16]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d349      	bcc.n	800cc94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc00:	4b36      	ldr	r3, [pc, #216]	; (800ccdc <xTaskIncrementTick+0x150>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d104      	bne.n	800cc14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc0a:	4b37      	ldr	r3, [pc, #220]	; (800cce8 <xTaskIncrementTick+0x15c>)
 800cc0c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc10:	601a      	str	r2, [r3, #0]
					break;
 800cc12:	e03f      	b.n	800cc94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc14:	4b31      	ldr	r3, [pc, #196]	; (800ccdc <xTaskIncrementTick+0x150>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc24:	693a      	ldr	r2, [r7, #16]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d203      	bcs.n	800cc34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc2c:	4a2e      	ldr	r2, [pc, #184]	; (800cce8 <xTaskIncrementTick+0x15c>)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc32:	e02f      	b.n	800cc94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	3304      	adds	r3, #4
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fe ff73 	bl	800bb24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d004      	beq.n	800cc50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	3318      	adds	r3, #24
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7fe ff6a 	bl	800bb24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc54:	4b25      	ldr	r3, [pc, #148]	; (800ccec <xTaskIncrementTick+0x160>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d903      	bls.n	800cc64 <xTaskIncrementTick+0xd8>
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc60:	4a22      	ldr	r2, [pc, #136]	; (800ccec <xTaskIncrementTick+0x160>)
 800cc62:	6013      	str	r3, [r2, #0]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc68:	4613      	mov	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	4a1f      	ldr	r2, [pc, #124]	; (800ccf0 <xTaskIncrementTick+0x164>)
 800cc72:	441a      	add	r2, r3
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	3304      	adds	r3, #4
 800cc78:	4619      	mov	r1, r3
 800cc7a:	4610      	mov	r0, r2
 800cc7c:	f7fe fef5 	bl	800ba6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc84:	4b1b      	ldr	r3, [pc, #108]	; (800ccf4 <xTaskIncrementTick+0x168>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d3b8      	bcc.n	800cc00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc92:	e7b5      	b.n	800cc00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc94:	4b17      	ldr	r3, [pc, #92]	; (800ccf4 <xTaskIncrementTick+0x168>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc9a:	4915      	ldr	r1, [pc, #84]	; (800ccf0 <xTaskIncrementTick+0x164>)
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	4413      	add	r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	440b      	add	r3, r1
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d901      	bls.n	800ccb0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ccac:	2301      	movs	r3, #1
 800ccae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ccb0:	4b11      	ldr	r3, [pc, #68]	; (800ccf8 <xTaskIncrementTick+0x16c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d007      	beq.n	800ccc8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	617b      	str	r3, [r7, #20]
 800ccbc:	e004      	b.n	800ccc8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ccbe:	4b0f      	ldr	r3, [pc, #60]	; (800ccfc <xTaskIncrementTick+0x170>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	4a0d      	ldr	r2, [pc, #52]	; (800ccfc <xTaskIncrementTick+0x170>)
 800ccc6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ccc8:	697b      	ldr	r3, [r7, #20]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3718      	adds	r7, #24
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	200010e0 	.word	0x200010e0
 800ccd8:	200010bc 	.word	0x200010bc
 800ccdc:	20001070 	.word	0x20001070
 800cce0:	20001074 	.word	0x20001074
 800cce4:	200010d0 	.word	0x200010d0
 800cce8:	200010d8 	.word	0x200010d8
 800ccec:	200010c0 	.word	0x200010c0
 800ccf0:	20000be8 	.word	0x20000be8
 800ccf4:	20000be4 	.word	0x20000be4
 800ccf8:	200010cc 	.word	0x200010cc
 800ccfc:	200010c8 	.word	0x200010c8

0800cd00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd06:	4b36      	ldr	r3, [pc, #216]	; (800cde0 <vTaskSwitchContext+0xe0>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d003      	beq.n	800cd16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd0e:	4b35      	ldr	r3, [pc, #212]	; (800cde4 <vTaskSwitchContext+0xe4>)
 800cd10:	2201      	movs	r2, #1
 800cd12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd14:	e05f      	b.n	800cdd6 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800cd16:	4b33      	ldr	r3, [pc, #204]	; (800cde4 <vTaskSwitchContext+0xe4>)
 800cd18:	2200      	movs	r2, #0
 800cd1a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800cd1c:	f7f3 fd46 	bl	80007ac <getRunTimeCounterValue>
 800cd20:	4603      	mov	r3, r0
 800cd22:	4a31      	ldr	r2, [pc, #196]	; (800cde8 <vTaskSwitchContext+0xe8>)
 800cd24:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800cd26:	4b30      	ldr	r3, [pc, #192]	; (800cde8 <vTaskSwitchContext+0xe8>)
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	4b30      	ldr	r3, [pc, #192]	; (800cdec <vTaskSwitchContext+0xec>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d909      	bls.n	800cd46 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800cd32:	4b2f      	ldr	r3, [pc, #188]	; (800cdf0 <vTaskSwitchContext+0xf0>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cd38:	4a2b      	ldr	r2, [pc, #172]	; (800cde8 <vTaskSwitchContext+0xe8>)
 800cd3a:	6810      	ldr	r0, [r2, #0]
 800cd3c:	4a2b      	ldr	r2, [pc, #172]	; (800cdec <vTaskSwitchContext+0xec>)
 800cd3e:	6812      	ldr	r2, [r2, #0]
 800cd40:	1a82      	subs	r2, r0, r2
 800cd42:	440a      	add	r2, r1
 800cd44:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800cd46:	4b28      	ldr	r3, [pc, #160]	; (800cde8 <vTaskSwitchContext+0xe8>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a28      	ldr	r2, [pc, #160]	; (800cdec <vTaskSwitchContext+0xec>)
 800cd4c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd4e:	4b29      	ldr	r3, [pc, #164]	; (800cdf4 <vTaskSwitchContext+0xf4>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	60fb      	str	r3, [r7, #12]
 800cd54:	e010      	b.n	800cd78 <vTaskSwitchContext+0x78>
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10a      	bne.n	800cd72 <vTaskSwitchContext+0x72>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	607b      	str	r3, [r7, #4]
}
 800cd6e:	bf00      	nop
 800cd70:	e7fe      	b.n	800cd70 <vTaskSwitchContext+0x70>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	3b01      	subs	r3, #1
 800cd76:	60fb      	str	r3, [r7, #12]
 800cd78:	491f      	ldr	r1, [pc, #124]	; (800cdf8 <vTaskSwitchContext+0xf8>)
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	4613      	mov	r3, r2
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	4413      	add	r3, r2
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	440b      	add	r3, r1
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d0e4      	beq.n	800cd56 <vTaskSwitchContext+0x56>
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4413      	add	r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4a18      	ldr	r2, [pc, #96]	; (800cdf8 <vTaskSwitchContext+0xf8>)
 800cd98:	4413      	add	r3, r2
 800cd9a:	60bb      	str	r3, [r7, #8]
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	685a      	ldr	r2, [r3, #4]
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	605a      	str	r2, [r3, #4]
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	685a      	ldr	r2, [r3, #4]
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	3308      	adds	r3, #8
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d104      	bne.n	800cdbc <vTaskSwitchContext+0xbc>
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	685a      	ldr	r2, [r3, #4]
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	605a      	str	r2, [r3, #4]
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	4a0b      	ldr	r2, [pc, #44]	; (800cdf0 <vTaskSwitchContext+0xf0>)
 800cdc4:	6013      	str	r3, [r2, #0]
 800cdc6:	4a0b      	ldr	r2, [pc, #44]	; (800cdf4 <vTaskSwitchContext+0xf4>)
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cdcc:	4b08      	ldr	r3, [pc, #32]	; (800cdf0 <vTaskSwitchContext+0xf0>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	3358      	adds	r3, #88	; 0x58
 800cdd2:	4a0a      	ldr	r2, [pc, #40]	; (800cdfc <vTaskSwitchContext+0xfc>)
 800cdd4:	6013      	str	r3, [r2, #0]
}
 800cdd6:	bf00      	nop
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	200010e0 	.word	0x200010e0
 800cde4:	200010cc 	.word	0x200010cc
 800cde8:	200010e8 	.word	0x200010e8
 800cdec:	200010e4 	.word	0x200010e4
 800cdf0:	20000be4 	.word	0x20000be4
 800cdf4:	200010c0 	.word	0x200010c0
 800cdf8:	20000be8 	.word	0x20000be8
 800cdfc:	20000170 	.word	0x20000170

0800ce00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d10a      	bne.n	800ce26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ce10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce14:	f383 8811 	msr	BASEPRI, r3
 800ce18:	f3bf 8f6f 	isb	sy
 800ce1c:	f3bf 8f4f 	dsb	sy
 800ce20:	60fb      	str	r3, [r7, #12]
}
 800ce22:	bf00      	nop
 800ce24:	e7fe      	b.n	800ce24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce26:	4b07      	ldr	r3, [pc, #28]	; (800ce44 <vTaskPlaceOnEventList+0x44>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3318      	adds	r3, #24
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f7fe fe3f 	bl	800bab2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce34:	2101      	movs	r1, #1
 800ce36:	6838      	ldr	r0, [r7, #0]
 800ce38:	f000 fa82 	bl	800d340 <prvAddCurrentTaskToDelayedList>
}
 800ce3c:	bf00      	nop
 800ce3e:	3710      	adds	r7, #16
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	20000be4 	.word	0x20000be4

0800ce48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b086      	sub	sp, #24
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d10a      	bne.n	800ce70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ce5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5e:	f383 8811 	msr	BASEPRI, r3
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	617b      	str	r3, [r7, #20]
}
 800ce6c:	bf00      	nop
 800ce6e:	e7fe      	b.n	800ce6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce70:	4b0a      	ldr	r3, [pc, #40]	; (800ce9c <vTaskPlaceOnEventListRestricted+0x54>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	3318      	adds	r3, #24
 800ce76:	4619      	mov	r1, r3
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	f7fe fdf6 	bl	800ba6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d002      	beq.n	800ce8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ce84:	f04f 33ff 	mov.w	r3, #4294967295
 800ce88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce8a:	6879      	ldr	r1, [r7, #4]
 800ce8c:	68b8      	ldr	r0, [r7, #8]
 800ce8e:	f000 fa57 	bl	800d340 <prvAddCurrentTaskToDelayedList>
	}
 800ce92:	bf00      	nop
 800ce94:	3718      	adds	r7, #24
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	20000be4 	.word	0x20000be4

0800cea0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10a      	bne.n	800cecc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ceb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceba:	f383 8811 	msr	BASEPRI, r3
 800cebe:	f3bf 8f6f 	isb	sy
 800cec2:	f3bf 8f4f 	dsb	sy
 800cec6:	60fb      	str	r3, [r7, #12]
}
 800cec8:	bf00      	nop
 800ceca:	e7fe      	b.n	800ceca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	3318      	adds	r3, #24
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fe fe27 	bl	800bb24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ced6:	4b1e      	ldr	r3, [pc, #120]	; (800cf50 <xTaskRemoveFromEventList+0xb0>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d11d      	bne.n	800cf1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	3304      	adds	r3, #4
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fe fe1e 	bl	800bb24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceec:	4b19      	ldr	r3, [pc, #100]	; (800cf54 <xTaskRemoveFromEventList+0xb4>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d903      	bls.n	800cefc <xTaskRemoveFromEventList+0x5c>
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef8:	4a16      	ldr	r2, [pc, #88]	; (800cf54 <xTaskRemoveFromEventList+0xb4>)
 800cefa:	6013      	str	r3, [r2, #0]
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf00:	4613      	mov	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	4413      	add	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4a13      	ldr	r2, [pc, #76]	; (800cf58 <xTaskRemoveFromEventList+0xb8>)
 800cf0a:	441a      	add	r2, r3
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	3304      	adds	r3, #4
 800cf10:	4619      	mov	r1, r3
 800cf12:	4610      	mov	r0, r2
 800cf14:	f7fe fda9 	bl	800ba6a <vListInsertEnd>
 800cf18:	e005      	b.n	800cf26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	3318      	adds	r3, #24
 800cf1e:	4619      	mov	r1, r3
 800cf20:	480e      	ldr	r0, [pc, #56]	; (800cf5c <xTaskRemoveFromEventList+0xbc>)
 800cf22:	f7fe fda2 	bl	800ba6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2a:	4b0d      	ldr	r3, [pc, #52]	; (800cf60 <xTaskRemoveFromEventList+0xc0>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d905      	bls.n	800cf40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf34:	2301      	movs	r3, #1
 800cf36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf38:	4b0a      	ldr	r3, [pc, #40]	; (800cf64 <xTaskRemoveFromEventList+0xc4>)
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	e001      	b.n	800cf44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cf40:	2300      	movs	r3, #0
 800cf42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf44:	697b      	ldr	r3, [r7, #20]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3718      	adds	r7, #24
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	200010e0 	.word	0x200010e0
 800cf54:	200010c0 	.word	0x200010c0
 800cf58:	20000be8 	.word	0x20000be8
 800cf5c:	20001078 	.word	0x20001078
 800cf60:	20000be4 	.word	0x20000be4
 800cf64:	200010cc 	.word	0x200010cc

0800cf68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf70:	4b06      	ldr	r3, [pc, #24]	; (800cf8c <vTaskInternalSetTimeOutState+0x24>)
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf78:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <vTaskInternalSetTimeOutState+0x28>)
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	605a      	str	r2, [r3, #4]
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	200010d0 	.word	0x200010d0
 800cf90:	200010bc 	.word	0x200010bc

0800cf94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b088      	sub	sp, #32
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10a      	bne.n	800cfba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	613b      	str	r3, [r7, #16]
}
 800cfb6:	bf00      	nop
 800cfb8:	e7fe      	b.n	800cfb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10a      	bne.n	800cfd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc4:	f383 8811 	msr	BASEPRI, r3
 800cfc8:	f3bf 8f6f 	isb	sy
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	60fb      	str	r3, [r7, #12]
}
 800cfd2:	bf00      	nop
 800cfd4:	e7fe      	b.n	800cfd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cfd6:	f000 fe85 	bl	800dce4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cfda:	4b1d      	ldr	r3, [pc, #116]	; (800d050 <xTaskCheckForTimeOut+0xbc>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	69ba      	ldr	r2, [r7, #24]
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff2:	d102      	bne.n	800cffa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cff4:	2300      	movs	r3, #0
 800cff6:	61fb      	str	r3, [r7, #28]
 800cff8:	e023      	b.n	800d042 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	4b15      	ldr	r3, [pc, #84]	; (800d054 <xTaskCheckForTimeOut+0xc0>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	429a      	cmp	r2, r3
 800d004:	d007      	beq.n	800d016 <xTaskCheckForTimeOut+0x82>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	69ba      	ldr	r2, [r7, #24]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d302      	bcc.n	800d016 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d010:	2301      	movs	r3, #1
 800d012:	61fb      	str	r3, [r7, #28]
 800d014:	e015      	b.n	800d042 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	697a      	ldr	r2, [r7, #20]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d20b      	bcs.n	800d038 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	1ad2      	subs	r2, r2, r3
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff ff9b 	bl	800cf68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d032:	2300      	movs	r3, #0
 800d034:	61fb      	str	r3, [r7, #28]
 800d036:	e004      	b.n	800d042 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	2200      	movs	r2, #0
 800d03c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d03e:	2301      	movs	r3, #1
 800d040:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d042:	f000 fe7f 	bl	800dd44 <vPortExitCritical>

	return xReturn;
 800d046:	69fb      	ldr	r3, [r7, #28]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3720      	adds	r7, #32
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	200010bc 	.word	0x200010bc
 800d054:	200010d0 	.word	0x200010d0

0800d058 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d058:	b480      	push	{r7}
 800d05a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d05c:	4b03      	ldr	r3, [pc, #12]	; (800d06c <vTaskMissedYield+0x14>)
 800d05e:	2201      	movs	r2, #1
 800d060:	601a      	str	r2, [r3, #0]
}
 800d062:	bf00      	nop
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	200010cc 	.word	0x200010cc

0800d070 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d078:	f000 f854 	bl	800d124 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d07c:	4b07      	ldr	r3, [pc, #28]	; (800d09c <prvIdleTask+0x2c>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	2b01      	cmp	r3, #1
 800d082:	d907      	bls.n	800d094 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d084:	4b06      	ldr	r3, [pc, #24]	; (800d0a0 <prvIdleTask+0x30>)
 800d086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d08a:	601a      	str	r2, [r3, #0]
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d094:	f7f3 fb96 	bl	80007c4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d098:	e7ee      	b.n	800d078 <prvIdleTask+0x8>
 800d09a:	bf00      	nop
 800d09c:	20000be8 	.word	0x20000be8
 800d0a0:	e000ed04 	.word	0xe000ed04

0800d0a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	607b      	str	r3, [r7, #4]
 800d0ae:	e00c      	b.n	800d0ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4a12      	ldr	r2, [pc, #72]	; (800d104 <prvInitialiseTaskLists+0x60>)
 800d0bc:	4413      	add	r3, r2
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7fe fca6 	bl	800ba10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	607b      	str	r3, [r7, #4]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2b37      	cmp	r3, #55	; 0x37
 800d0ce:	d9ef      	bls.n	800d0b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0d0:	480d      	ldr	r0, [pc, #52]	; (800d108 <prvInitialiseTaskLists+0x64>)
 800d0d2:	f7fe fc9d 	bl	800ba10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0d6:	480d      	ldr	r0, [pc, #52]	; (800d10c <prvInitialiseTaskLists+0x68>)
 800d0d8:	f7fe fc9a 	bl	800ba10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0dc:	480c      	ldr	r0, [pc, #48]	; (800d110 <prvInitialiseTaskLists+0x6c>)
 800d0de:	f7fe fc97 	bl	800ba10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0e2:	480c      	ldr	r0, [pc, #48]	; (800d114 <prvInitialiseTaskLists+0x70>)
 800d0e4:	f7fe fc94 	bl	800ba10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0e8:	480b      	ldr	r0, [pc, #44]	; (800d118 <prvInitialiseTaskLists+0x74>)
 800d0ea:	f7fe fc91 	bl	800ba10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0ee:	4b0b      	ldr	r3, [pc, #44]	; (800d11c <prvInitialiseTaskLists+0x78>)
 800d0f0:	4a05      	ldr	r2, [pc, #20]	; (800d108 <prvInitialiseTaskLists+0x64>)
 800d0f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0f4:	4b0a      	ldr	r3, [pc, #40]	; (800d120 <prvInitialiseTaskLists+0x7c>)
 800d0f6:	4a05      	ldr	r2, [pc, #20]	; (800d10c <prvInitialiseTaskLists+0x68>)
 800d0f8:	601a      	str	r2, [r3, #0]
}
 800d0fa:	bf00      	nop
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	20000be8 	.word	0x20000be8
 800d108:	20001048 	.word	0x20001048
 800d10c:	2000105c 	.word	0x2000105c
 800d110:	20001078 	.word	0x20001078
 800d114:	2000108c 	.word	0x2000108c
 800d118:	200010a4 	.word	0x200010a4
 800d11c:	20001070 	.word	0x20001070
 800d120:	20001074 	.word	0x20001074

0800d124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d12a:	e019      	b.n	800d160 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d12c:	f000 fdda 	bl	800dce4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d130:	4b10      	ldr	r3, [pc, #64]	; (800d174 <prvCheckTasksWaitingTermination+0x50>)
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3304      	adds	r3, #4
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fe fcf1 	bl	800bb24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d142:	4b0d      	ldr	r3, [pc, #52]	; (800d178 <prvCheckTasksWaitingTermination+0x54>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	3b01      	subs	r3, #1
 800d148:	4a0b      	ldr	r2, [pc, #44]	; (800d178 <prvCheckTasksWaitingTermination+0x54>)
 800d14a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d14c:	4b0b      	ldr	r3, [pc, #44]	; (800d17c <prvCheckTasksWaitingTermination+0x58>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	3b01      	subs	r3, #1
 800d152:	4a0a      	ldr	r2, [pc, #40]	; (800d17c <prvCheckTasksWaitingTermination+0x58>)
 800d154:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d156:	f000 fdf5 	bl	800dd44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f810 	bl	800d180 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d160:	4b06      	ldr	r3, [pc, #24]	; (800d17c <prvCheckTasksWaitingTermination+0x58>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1e1      	bne.n	800d12c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d168:	bf00      	nop
 800d16a:	bf00      	nop
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	2000108c 	.word	0x2000108c
 800d178:	200010b8 	.word	0x200010b8
 800d17c:	200010a0 	.word	0x200010a0

0800d180 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	3358      	adds	r3, #88	; 0x58
 800d18c:	4618      	mov	r0, r3
 800d18e:	f001 fedf 	bl	800ef50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d108      	bne.n	800d1ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 ff8d 	bl	800e0c0 <vPortFree>
				vPortFree( pxTCB );
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 ff8a 	bl	800e0c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d1ac:	e018      	b.n	800d1e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d103      	bne.n	800d1c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 ff81 	bl	800e0c0 <vPortFree>
	}
 800d1be:	e00f      	b.n	800d1e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	d00a      	beq.n	800d1e0 <prvDeleteTCB+0x60>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	60fb      	str	r3, [r7, #12]
}
 800d1dc:	bf00      	nop
 800d1de:	e7fe      	b.n	800d1de <prvDeleteTCB+0x5e>
	}
 800d1e0:	bf00      	nop
 800d1e2:	3710      	adds	r7, #16
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1ee:	4b0c      	ldr	r3, [pc, #48]	; (800d220 <prvResetNextTaskUnblockTime+0x38>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d104      	bne.n	800d202 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1f8:	4b0a      	ldr	r3, [pc, #40]	; (800d224 <prvResetNextTaskUnblockTime+0x3c>)
 800d1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d1fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d200:	e008      	b.n	800d214 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d202:	4b07      	ldr	r3, [pc, #28]	; (800d220 <prvResetNextTaskUnblockTime+0x38>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	68db      	ldr	r3, [r3, #12]
 800d20a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	4a04      	ldr	r2, [pc, #16]	; (800d224 <prvResetNextTaskUnblockTime+0x3c>)
 800d212:	6013      	str	r3, [r2, #0]
}
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr
 800d220:	20001070 	.word	0x20001070
 800d224:	200010d8 	.word	0x200010d8

0800d228 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d22e:	4b0b      	ldr	r3, [pc, #44]	; (800d25c <xTaskGetSchedulerState+0x34>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d102      	bne.n	800d23c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d236:	2301      	movs	r3, #1
 800d238:	607b      	str	r3, [r7, #4]
 800d23a:	e008      	b.n	800d24e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d23c:	4b08      	ldr	r3, [pc, #32]	; (800d260 <xTaskGetSchedulerState+0x38>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d102      	bne.n	800d24a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d244:	2302      	movs	r3, #2
 800d246:	607b      	str	r3, [r7, #4]
 800d248:	e001      	b.n	800d24e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d24a:	2300      	movs	r3, #0
 800d24c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d24e:	687b      	ldr	r3, [r7, #4]
	}
 800d250:	4618      	mov	r0, r3
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr
 800d25c:	200010c4 	.word	0x200010c4
 800d260:	200010e0 	.word	0x200010e0

0800d264 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d270:	2300      	movs	r3, #0
 800d272:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d056      	beq.n	800d328 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d27a:	4b2e      	ldr	r3, [pc, #184]	; (800d334 <xTaskPriorityDisinherit+0xd0>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	693a      	ldr	r2, [r7, #16]
 800d280:	429a      	cmp	r2, r3
 800d282:	d00a      	beq.n	800d29a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	60fb      	str	r3, [r7, #12]
}
 800d296:	bf00      	nop
 800d298:	e7fe      	b.n	800d298 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10a      	bne.n	800d2b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	60bb      	str	r3, [r7, #8]
}
 800d2b4:	bf00      	nop
 800d2b6:	e7fe      	b.n	800d2b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2bc:	1e5a      	subs	r2, r3, #1
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d02c      	beq.n	800d328 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d128      	bne.n	800d328 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	3304      	adds	r3, #4
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7fe fc22 	bl	800bb24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f8:	4b0f      	ldr	r3, [pc, #60]	; (800d338 <xTaskPriorityDisinherit+0xd4>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d903      	bls.n	800d308 <xTaskPriorityDisinherit+0xa4>
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d304:	4a0c      	ldr	r2, [pc, #48]	; (800d338 <xTaskPriorityDisinherit+0xd4>)
 800d306:	6013      	str	r3, [r2, #0]
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d30c:	4613      	mov	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4413      	add	r3, r2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4a09      	ldr	r2, [pc, #36]	; (800d33c <xTaskPriorityDisinherit+0xd8>)
 800d316:	441a      	add	r2, r3
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	3304      	adds	r3, #4
 800d31c:	4619      	mov	r1, r3
 800d31e:	4610      	mov	r0, r2
 800d320:	f7fe fba3 	bl	800ba6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d324:	2301      	movs	r3, #1
 800d326:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d328:	697b      	ldr	r3, [r7, #20]
	}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3718      	adds	r7, #24
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	20000be4 	.word	0x20000be4
 800d338:	200010c0 	.word	0x200010c0
 800d33c:	20000be8 	.word	0x20000be8

0800d340 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d34a:	4b21      	ldr	r3, [pc, #132]	; (800d3d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d350:	4b20      	ldr	r3, [pc, #128]	; (800d3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	3304      	adds	r3, #4
 800d356:	4618      	mov	r0, r3
 800d358:	f7fe fbe4 	bl	800bb24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d362:	d10a      	bne.n	800d37a <prvAddCurrentTaskToDelayedList+0x3a>
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d007      	beq.n	800d37a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d36a:	4b1a      	ldr	r3, [pc, #104]	; (800d3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	3304      	adds	r3, #4
 800d370:	4619      	mov	r1, r3
 800d372:	4819      	ldr	r0, [pc, #100]	; (800d3d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d374:	f7fe fb79 	bl	800ba6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d378:	e026      	b.n	800d3c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4413      	add	r3, r2
 800d380:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d382:	4b14      	ldr	r3, [pc, #80]	; (800d3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	68ba      	ldr	r2, [r7, #8]
 800d388:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d38a:	68ba      	ldr	r2, [r7, #8]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d209      	bcs.n	800d3a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d392:	4b12      	ldr	r3, [pc, #72]	; (800d3dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	4b0f      	ldr	r3, [pc, #60]	; (800d3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	3304      	adds	r3, #4
 800d39c:	4619      	mov	r1, r3
 800d39e:	4610      	mov	r0, r2
 800d3a0:	f7fe fb87 	bl	800bab2 <vListInsert>
}
 800d3a4:	e010      	b.n	800d3c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3a6:	4b0e      	ldr	r3, [pc, #56]	; (800d3e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	4b0a      	ldr	r3, [pc, #40]	; (800d3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	3304      	adds	r3, #4
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	4610      	mov	r0, r2
 800d3b4:	f7fe fb7d 	bl	800bab2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d3b8:	4b0a      	ldr	r3, [pc, #40]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d202      	bcs.n	800d3c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d3c2:	4a08      	ldr	r2, [pc, #32]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	6013      	str	r3, [r2, #0]
}
 800d3c8:	bf00      	nop
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	200010bc 	.word	0x200010bc
 800d3d4:	20000be4 	.word	0x20000be4
 800d3d8:	200010a4 	.word	0x200010a4
 800d3dc:	20001074 	.word	0x20001074
 800d3e0:	20001070 	.word	0x20001070
 800d3e4:	200010d8 	.word	0x200010d8

0800d3e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b08a      	sub	sp, #40	; 0x28
 800d3ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d3f2:	f000 fb07 	bl	800da04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d3f6:	4b1c      	ldr	r3, [pc, #112]	; (800d468 <xTimerCreateTimerTask+0x80>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d021      	beq.n	800d442 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d3fe:	2300      	movs	r3, #0
 800d400:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d402:	2300      	movs	r3, #0
 800d404:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d406:	1d3a      	adds	r2, r7, #4
 800d408:	f107 0108 	add.w	r1, r7, #8
 800d40c:	f107 030c 	add.w	r3, r7, #12
 800d410:	4618      	mov	r0, r3
 800d412:	f7fe fae3 	bl	800b9dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d416:	6879      	ldr	r1, [r7, #4]
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	9202      	str	r2, [sp, #8]
 800d41e:	9301      	str	r3, [sp, #4]
 800d420:	2302      	movs	r3, #2
 800d422:	9300      	str	r3, [sp, #0]
 800d424:	2300      	movs	r3, #0
 800d426:	460a      	mov	r2, r1
 800d428:	4910      	ldr	r1, [pc, #64]	; (800d46c <xTimerCreateTimerTask+0x84>)
 800d42a:	4811      	ldr	r0, [pc, #68]	; (800d470 <xTimerCreateTimerTask+0x88>)
 800d42c:	f7ff f890 	bl	800c550 <xTaskCreateStatic>
 800d430:	4603      	mov	r3, r0
 800d432:	4a10      	ldr	r2, [pc, #64]	; (800d474 <xTimerCreateTimerTask+0x8c>)
 800d434:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d436:	4b0f      	ldr	r3, [pc, #60]	; (800d474 <xTimerCreateTimerTask+0x8c>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d001      	beq.n	800d442 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d43e:	2301      	movs	r3, #1
 800d440:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d10a      	bne.n	800d45e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44c:	f383 8811 	msr	BASEPRI, r3
 800d450:	f3bf 8f6f 	isb	sy
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	613b      	str	r3, [r7, #16]
}
 800d45a:	bf00      	nop
 800d45c:	e7fe      	b.n	800d45c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d45e:	697b      	ldr	r3, [r7, #20]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	2000111c 	.word	0x2000111c
 800d46c:	0800fa24 	.word	0x0800fa24
 800d470:	0800d5ad 	.word	0x0800d5ad
 800d474:	20001120 	.word	0x20001120

0800d478 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b08a      	sub	sp, #40	; 0x28
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
 800d484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d486:	2300      	movs	r3, #0
 800d488:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d10a      	bne.n	800d4a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d494:	f383 8811 	msr	BASEPRI, r3
 800d498:	f3bf 8f6f 	isb	sy
 800d49c:	f3bf 8f4f 	dsb	sy
 800d4a0:	623b      	str	r3, [r7, #32]
}
 800d4a2:	bf00      	nop
 800d4a4:	e7fe      	b.n	800d4a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d4a6:	4b1a      	ldr	r3, [pc, #104]	; (800d510 <xTimerGenericCommand+0x98>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d02a      	beq.n	800d504 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	2b05      	cmp	r3, #5
 800d4be:	dc18      	bgt.n	800d4f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d4c0:	f7ff feb2 	bl	800d228 <xTaskGetSchedulerState>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	d109      	bne.n	800d4de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d4ca:	4b11      	ldr	r3, [pc, #68]	; (800d510 <xTimerGenericCommand+0x98>)
 800d4cc:	6818      	ldr	r0, [r3, #0]
 800d4ce:	f107 0110 	add.w	r1, r7, #16
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4d6:	f7fe fc53 	bl	800bd80 <xQueueGenericSend>
 800d4da:	6278      	str	r0, [r7, #36]	; 0x24
 800d4dc:	e012      	b.n	800d504 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d4de:	4b0c      	ldr	r3, [pc, #48]	; (800d510 <xTimerGenericCommand+0x98>)
 800d4e0:	6818      	ldr	r0, [r3, #0]
 800d4e2:	f107 0110 	add.w	r1, r7, #16
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f7fe fc49 	bl	800bd80 <xQueueGenericSend>
 800d4ee:	6278      	str	r0, [r7, #36]	; 0x24
 800d4f0:	e008      	b.n	800d504 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d4f2:	4b07      	ldr	r3, [pc, #28]	; (800d510 <xTimerGenericCommand+0x98>)
 800d4f4:	6818      	ldr	r0, [r3, #0]
 800d4f6:	f107 0110 	add.w	r1, r7, #16
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	683a      	ldr	r2, [r7, #0]
 800d4fe:	f7fe fd3d 	bl	800bf7c <xQueueGenericSendFromISR>
 800d502:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d506:	4618      	mov	r0, r3
 800d508:	3728      	adds	r7, #40	; 0x28
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	2000111c 	.word	0x2000111c

0800d514 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b088      	sub	sp, #32
 800d518:	af02      	add	r7, sp, #8
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d51e:	4b22      	ldr	r3, [pc, #136]	; (800d5a8 <prvProcessExpiredTimer+0x94>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	3304      	adds	r3, #4
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7fe faf9 	bl	800bb24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d538:	f003 0304 	and.w	r3, r3, #4
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d022      	beq.n	800d586 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	699a      	ldr	r2, [r3, #24]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	18d1      	adds	r1, r2, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	683a      	ldr	r2, [r7, #0]
 800d54c:	6978      	ldr	r0, [r7, #20]
 800d54e:	f000 f8d1 	bl	800d6f4 <prvInsertTimerInActiveList>
 800d552:	4603      	mov	r3, r0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d01f      	beq.n	800d598 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d558:	2300      	movs	r3, #0
 800d55a:	9300      	str	r3, [sp, #0]
 800d55c:	2300      	movs	r3, #0
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	2100      	movs	r1, #0
 800d562:	6978      	ldr	r0, [r7, #20]
 800d564:	f7ff ff88 	bl	800d478 <xTimerGenericCommand>
 800d568:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d113      	bne.n	800d598 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d574:	f383 8811 	msr	BASEPRI, r3
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	f3bf 8f4f 	dsb	sy
 800d580:	60fb      	str	r3, [r7, #12]
}
 800d582:	bf00      	nop
 800d584:	e7fe      	b.n	800d584 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d58c:	f023 0301 	bic.w	r3, r3, #1
 800d590:	b2da      	uxtb	r2, r3
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	6a1b      	ldr	r3, [r3, #32]
 800d59c:	6978      	ldr	r0, [r7, #20]
 800d59e:	4798      	blx	r3
}
 800d5a0:	bf00      	nop
 800d5a2:	3718      	adds	r7, #24
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	20001114 	.word	0x20001114

0800d5ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d5b4:	f107 0308 	add.w	r3, r7, #8
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f000 f857 	bl	800d66c <prvGetNextExpireTime>
 800d5be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f000 f803 	bl	800d5d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d5ca:	f000 f8d5 	bl	800d778 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d5ce:	e7f1      	b.n	800d5b4 <prvTimerTask+0x8>

0800d5d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d5da:	f7ff fa1b 	bl	800ca14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d5de:	f107 0308 	add.w	r3, r7, #8
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f000 f866 	bl	800d6b4 <prvSampleTimeNow>
 800d5e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d130      	bne.n	800d652 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d10a      	bne.n	800d60c <prvProcessTimerOrBlockTask+0x3c>
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d806      	bhi.n	800d60c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d5fe:	f7ff fa17 	bl	800ca30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d602:	68f9      	ldr	r1, [r7, #12]
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff ff85 	bl	800d514 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d60a:	e024      	b.n	800d656 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d008      	beq.n	800d624 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d612:	4b13      	ldr	r3, [pc, #76]	; (800d660 <prvProcessTimerOrBlockTask+0x90>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d101      	bne.n	800d620 <prvProcessTimerOrBlockTask+0x50>
 800d61c:	2301      	movs	r3, #1
 800d61e:	e000      	b.n	800d622 <prvProcessTimerOrBlockTask+0x52>
 800d620:	2300      	movs	r3, #0
 800d622:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d624:	4b0f      	ldr	r3, [pc, #60]	; (800d664 <prvProcessTimerOrBlockTask+0x94>)
 800d626:	6818      	ldr	r0, [r3, #0]
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	1ad3      	subs	r3, r2, r3
 800d62e:	683a      	ldr	r2, [r7, #0]
 800d630:	4619      	mov	r1, r3
 800d632:	f7fe ff59 	bl	800c4e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d636:	f7ff f9fb 	bl	800ca30 <xTaskResumeAll>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d10a      	bne.n	800d656 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d640:	4b09      	ldr	r3, [pc, #36]	; (800d668 <prvProcessTimerOrBlockTask+0x98>)
 800d642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d646:	601a      	str	r2, [r3, #0]
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	f3bf 8f6f 	isb	sy
}
 800d650:	e001      	b.n	800d656 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d652:	f7ff f9ed 	bl	800ca30 <xTaskResumeAll>
}
 800d656:	bf00      	nop
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	20001118 	.word	0x20001118
 800d664:	2000111c 	.word	0x2000111c
 800d668:	e000ed04 	.word	0xe000ed04

0800d66c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d674:	4b0e      	ldr	r3, [pc, #56]	; (800d6b0 <prvGetNextExpireTime+0x44>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d101      	bne.n	800d682 <prvGetNextExpireTime+0x16>
 800d67e:	2201      	movs	r2, #1
 800d680:	e000      	b.n	800d684 <prvGetNextExpireTime+0x18>
 800d682:	2200      	movs	r2, #0
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d105      	bne.n	800d69c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d690:	4b07      	ldr	r3, [pc, #28]	; (800d6b0 <prvGetNextExpireTime+0x44>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	60fb      	str	r3, [r7, #12]
 800d69a:	e001      	b.n	800d6a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d69c:	2300      	movs	r3, #0
 800d69e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	20001114 	.word	0x20001114

0800d6b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d6bc:	f7ff fa56 	bl	800cb6c <xTaskGetTickCount>
 800d6c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d6c2:	4b0b      	ldr	r3, [pc, #44]	; (800d6f0 <prvSampleTimeNow+0x3c>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	68fa      	ldr	r2, [r7, #12]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d205      	bcs.n	800d6d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d6cc:	f000 f936 	bl	800d93c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	601a      	str	r2, [r3, #0]
 800d6d6:	e002      	b.n	800d6de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d6de:	4a04      	ldr	r2, [pc, #16]	; (800d6f0 <prvSampleTimeNow+0x3c>)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	20001124 	.word	0x20001124

0800d6f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b086      	sub	sp, #24
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
 800d700:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d702:	2300      	movs	r3, #0
 800d704:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	68ba      	ldr	r2, [r7, #8]
 800d70a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d712:	68ba      	ldr	r2, [r7, #8]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	429a      	cmp	r2, r3
 800d718:	d812      	bhi.n	800d740 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	1ad2      	subs	r2, r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	699b      	ldr	r3, [r3, #24]
 800d724:	429a      	cmp	r2, r3
 800d726:	d302      	bcc.n	800d72e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d728:	2301      	movs	r3, #1
 800d72a:	617b      	str	r3, [r7, #20]
 800d72c:	e01b      	b.n	800d766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d72e:	4b10      	ldr	r3, [pc, #64]	; (800d770 <prvInsertTimerInActiveList+0x7c>)
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	3304      	adds	r3, #4
 800d736:	4619      	mov	r1, r3
 800d738:	4610      	mov	r0, r2
 800d73a:	f7fe f9ba 	bl	800bab2 <vListInsert>
 800d73e:	e012      	b.n	800d766 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	429a      	cmp	r2, r3
 800d746:	d206      	bcs.n	800d756 <prvInsertTimerInActiveList+0x62>
 800d748:	68ba      	ldr	r2, [r7, #8]
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d302      	bcc.n	800d756 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d750:	2301      	movs	r3, #1
 800d752:	617b      	str	r3, [r7, #20]
 800d754:	e007      	b.n	800d766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d756:	4b07      	ldr	r3, [pc, #28]	; (800d774 <prvInsertTimerInActiveList+0x80>)
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	3304      	adds	r3, #4
 800d75e:	4619      	mov	r1, r3
 800d760:	4610      	mov	r0, r2
 800d762:	f7fe f9a6 	bl	800bab2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d766:	697b      	ldr	r3, [r7, #20]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3718      	adds	r7, #24
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	20001118 	.word	0x20001118
 800d774:	20001114 	.word	0x20001114

0800d778 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b08e      	sub	sp, #56	; 0x38
 800d77c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d77e:	e0ca      	b.n	800d916 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	da18      	bge.n	800d7b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d786:	1d3b      	adds	r3, r7, #4
 800d788:	3304      	adds	r3, #4
 800d78a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d10a      	bne.n	800d7a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d796:	f383 8811 	msr	BASEPRI, r3
 800d79a:	f3bf 8f6f 	isb	sy
 800d79e:	f3bf 8f4f 	dsb	sy
 800d7a2:	61fb      	str	r3, [r7, #28]
}
 800d7a4:	bf00      	nop
 800d7a6:	e7fe      	b.n	800d7a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7ae:	6850      	ldr	r0, [r2, #4]
 800d7b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7b2:	6892      	ldr	r2, [r2, #8]
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f2c0 80aa 	blt.w	800d914 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	695b      	ldr	r3, [r3, #20]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d004      	beq.n	800d7d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7fe f9a7 	bl	800bb24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7d6:	463b      	mov	r3, r7
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff ff6b 	bl	800d6b4 <prvSampleTimeNow>
 800d7de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2b09      	cmp	r3, #9
 800d7e4:	f200 8097 	bhi.w	800d916 <prvProcessReceivedCommands+0x19e>
 800d7e8:	a201      	add	r2, pc, #4	; (adr r2, 800d7f0 <prvProcessReceivedCommands+0x78>)
 800d7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ee:	bf00      	nop
 800d7f0:	0800d819 	.word	0x0800d819
 800d7f4:	0800d819 	.word	0x0800d819
 800d7f8:	0800d819 	.word	0x0800d819
 800d7fc:	0800d88d 	.word	0x0800d88d
 800d800:	0800d8a1 	.word	0x0800d8a1
 800d804:	0800d8eb 	.word	0x0800d8eb
 800d808:	0800d819 	.word	0x0800d819
 800d80c:	0800d819 	.word	0x0800d819
 800d810:	0800d88d 	.word	0x0800d88d
 800d814:	0800d8a1 	.word	0x0800d8a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d81e:	f043 0301 	orr.w	r3, r3, #1
 800d822:	b2da      	uxtb	r2, r3
 800d824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d82a:	68ba      	ldr	r2, [r7, #8]
 800d82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82e:	699b      	ldr	r3, [r3, #24]
 800d830:	18d1      	adds	r1, r2, r3
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d838:	f7ff ff5c 	bl	800d6f4 <prvInsertTimerInActiveList>
 800d83c:	4603      	mov	r3, r0
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d069      	beq.n	800d916 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d844:	6a1b      	ldr	r3, [r3, #32]
 800d846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d848:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d850:	f003 0304 	and.w	r3, r3, #4
 800d854:	2b00      	cmp	r3, #0
 800d856:	d05e      	beq.n	800d916 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d858:	68ba      	ldr	r2, [r7, #8]
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	699b      	ldr	r3, [r3, #24]
 800d85e:	441a      	add	r2, r3
 800d860:	2300      	movs	r3, #0
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	2300      	movs	r3, #0
 800d866:	2100      	movs	r1, #0
 800d868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d86a:	f7ff fe05 	bl	800d478 <xTimerGenericCommand>
 800d86e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d870:	6a3b      	ldr	r3, [r7, #32]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d14f      	bne.n	800d916 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87a:	f383 8811 	msr	BASEPRI, r3
 800d87e:	f3bf 8f6f 	isb	sy
 800d882:	f3bf 8f4f 	dsb	sy
 800d886:	61bb      	str	r3, [r7, #24]
}
 800d888:	bf00      	nop
 800d88a:	e7fe      	b.n	800d88a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d892:	f023 0301 	bic.w	r3, r3, #1
 800d896:	b2da      	uxtb	r2, r3
 800d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d89e:	e03a      	b.n	800d916 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8a6:	f043 0301 	orr.w	r3, r3, #1
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d8b2:	68ba      	ldr	r2, [r7, #8]
 800d8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ba:	699b      	ldr	r3, [r3, #24]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d10a      	bne.n	800d8d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	617b      	str	r3, [r7, #20]
}
 800d8d2:	bf00      	nop
 800d8d4:	e7fe      	b.n	800d8d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d8:	699a      	ldr	r2, [r3, #24]
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	18d1      	adds	r1, r2, r3
 800d8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8e4:	f7ff ff06 	bl	800d6f4 <prvInsertTimerInActiveList>
					break;
 800d8e8:	e015      	b.n	800d916 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8f0:	f003 0302 	and.w	r3, r3, #2
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d103      	bne.n	800d900 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8fa:	f000 fbe1 	bl	800e0c0 <vPortFree>
 800d8fe:	e00a      	b.n	800d916 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d906:	f023 0301 	bic.w	r3, r3, #1
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d912:	e000      	b.n	800d916 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d914:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d916:	4b08      	ldr	r3, [pc, #32]	; (800d938 <prvProcessReceivedCommands+0x1c0>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	1d39      	adds	r1, r7, #4
 800d91c:	2200      	movs	r2, #0
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fe fbc8 	bl	800c0b4 <xQueueReceive>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	f47f af2a 	bne.w	800d780 <prvProcessReceivedCommands+0x8>
	}
}
 800d92c:	bf00      	nop
 800d92e:	bf00      	nop
 800d930:	3730      	adds	r7, #48	; 0x30
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	2000111c 	.word	0x2000111c

0800d93c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b088      	sub	sp, #32
 800d940:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d942:	e048      	b.n	800d9d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d944:	4b2d      	ldr	r3, [pc, #180]	; (800d9fc <prvSwitchTimerLists+0xc0>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d94e:	4b2b      	ldr	r3, [pc, #172]	; (800d9fc <prvSwitchTimerLists+0xc0>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	3304      	adds	r3, #4
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fe f8e1 	bl	800bb24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	6a1b      	ldr	r3, [r3, #32]
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d970:	f003 0304 	and.w	r3, r3, #4
 800d974:	2b00      	cmp	r3, #0
 800d976:	d02e      	beq.n	800d9d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	699b      	ldr	r3, [r3, #24]
 800d97c:	693a      	ldr	r2, [r7, #16]
 800d97e:	4413      	add	r3, r2
 800d980:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d982:	68ba      	ldr	r2, [r7, #8]
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	429a      	cmp	r2, r3
 800d988:	d90e      	bls.n	800d9a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d996:	4b19      	ldr	r3, [pc, #100]	; (800d9fc <prvSwitchTimerLists+0xc0>)
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	3304      	adds	r3, #4
 800d99e:	4619      	mov	r1, r3
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	f7fe f886 	bl	800bab2 <vListInsert>
 800d9a6:	e016      	b.n	800d9d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	693a      	ldr	r2, [r7, #16]
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f7ff fd60 	bl	800d478 <xTimerGenericCommand>
 800d9b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d10a      	bne.n	800d9d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c4:	f383 8811 	msr	BASEPRI, r3
 800d9c8:	f3bf 8f6f 	isb	sy
 800d9cc:	f3bf 8f4f 	dsb	sy
 800d9d0:	603b      	str	r3, [r7, #0]
}
 800d9d2:	bf00      	nop
 800d9d4:	e7fe      	b.n	800d9d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d9d6:	4b09      	ldr	r3, [pc, #36]	; (800d9fc <prvSwitchTimerLists+0xc0>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1b1      	bne.n	800d944 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d9e0:	4b06      	ldr	r3, [pc, #24]	; (800d9fc <prvSwitchTimerLists+0xc0>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d9e6:	4b06      	ldr	r3, [pc, #24]	; (800da00 <prvSwitchTimerLists+0xc4>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a04      	ldr	r2, [pc, #16]	; (800d9fc <prvSwitchTimerLists+0xc0>)
 800d9ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d9ee:	4a04      	ldr	r2, [pc, #16]	; (800da00 <prvSwitchTimerLists+0xc4>)
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	6013      	str	r3, [r2, #0]
}
 800d9f4:	bf00      	nop
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	20001114 	.word	0x20001114
 800da00:	20001118 	.word	0x20001118

0800da04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800da0a:	f000 f96b 	bl	800dce4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800da0e:	4b15      	ldr	r3, [pc, #84]	; (800da64 <prvCheckForValidListAndQueue+0x60>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d120      	bne.n	800da58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800da16:	4814      	ldr	r0, [pc, #80]	; (800da68 <prvCheckForValidListAndQueue+0x64>)
 800da18:	f7fd fffa 	bl	800ba10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800da1c:	4813      	ldr	r0, [pc, #76]	; (800da6c <prvCheckForValidListAndQueue+0x68>)
 800da1e:	f7fd fff7 	bl	800ba10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da22:	4b13      	ldr	r3, [pc, #76]	; (800da70 <prvCheckForValidListAndQueue+0x6c>)
 800da24:	4a10      	ldr	r2, [pc, #64]	; (800da68 <prvCheckForValidListAndQueue+0x64>)
 800da26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da28:	4b12      	ldr	r3, [pc, #72]	; (800da74 <prvCheckForValidListAndQueue+0x70>)
 800da2a:	4a10      	ldr	r2, [pc, #64]	; (800da6c <prvCheckForValidListAndQueue+0x68>)
 800da2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800da2e:	2300      	movs	r3, #0
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	4b11      	ldr	r3, [pc, #68]	; (800da78 <prvCheckForValidListAndQueue+0x74>)
 800da34:	4a11      	ldr	r2, [pc, #68]	; (800da7c <prvCheckForValidListAndQueue+0x78>)
 800da36:	2110      	movs	r1, #16
 800da38:	200a      	movs	r0, #10
 800da3a:	f7fe f905 	bl	800bc48 <xQueueGenericCreateStatic>
 800da3e:	4603      	mov	r3, r0
 800da40:	4a08      	ldr	r2, [pc, #32]	; (800da64 <prvCheckForValidListAndQueue+0x60>)
 800da42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800da44:	4b07      	ldr	r3, [pc, #28]	; (800da64 <prvCheckForValidListAndQueue+0x60>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d005      	beq.n	800da58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800da4c:	4b05      	ldr	r3, [pc, #20]	; (800da64 <prvCheckForValidListAndQueue+0x60>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	490b      	ldr	r1, [pc, #44]	; (800da80 <prvCheckForValidListAndQueue+0x7c>)
 800da52:	4618      	mov	r0, r3
 800da54:	f7fe fd1e 	bl	800c494 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da58:	f000 f974 	bl	800dd44 <vPortExitCritical>
}
 800da5c:	bf00      	nop
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	2000111c 	.word	0x2000111c
 800da68:	200010ec 	.word	0x200010ec
 800da6c:	20001100 	.word	0x20001100
 800da70:	20001114 	.word	0x20001114
 800da74:	20001118 	.word	0x20001118
 800da78:	200011c8 	.word	0x200011c8
 800da7c:	20001128 	.word	0x20001128
 800da80:	0800fa2c 	.word	0x0800fa2c

0800da84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	3b04      	subs	r3, #4
 800da94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800da9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	3b04      	subs	r3, #4
 800daa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	f023 0201 	bic.w	r2, r3, #1
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	3b04      	subs	r3, #4
 800dab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dab4:	4a0c      	ldr	r2, [pc, #48]	; (800dae8 <pxPortInitialiseStack+0x64>)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	3b14      	subs	r3, #20
 800dabe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	3b04      	subs	r3, #4
 800daca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f06f 0202 	mvn.w	r2, #2
 800dad2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	3b20      	subs	r3, #32
 800dad8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dada:	68fb      	ldr	r3, [r7, #12]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	0800daed 	.word	0x0800daed

0800daec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800daec:	b480      	push	{r7}
 800daee:	b085      	sub	sp, #20
 800daf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800daf2:	2300      	movs	r3, #0
 800daf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800daf6:	4b12      	ldr	r3, [pc, #72]	; (800db40 <prvTaskExitError+0x54>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dafe:	d00a      	beq.n	800db16 <prvTaskExitError+0x2a>
	__asm volatile
 800db00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db04:	f383 8811 	msr	BASEPRI, r3
 800db08:	f3bf 8f6f 	isb	sy
 800db0c:	f3bf 8f4f 	dsb	sy
 800db10:	60fb      	str	r3, [r7, #12]
}
 800db12:	bf00      	nop
 800db14:	e7fe      	b.n	800db14 <prvTaskExitError+0x28>
	__asm volatile
 800db16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1a:	f383 8811 	msr	BASEPRI, r3
 800db1e:	f3bf 8f6f 	isb	sy
 800db22:	f3bf 8f4f 	dsb	sy
 800db26:	60bb      	str	r3, [r7, #8]
}
 800db28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db2a:	bf00      	nop
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d0fc      	beq.n	800db2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db32:	bf00      	nop
 800db34:	bf00      	nop
 800db36:	3714      	adds	r7, #20
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr
 800db40:	20000108 	.word	0x20000108
	...

0800db50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db50:	4b07      	ldr	r3, [pc, #28]	; (800db70 <pxCurrentTCBConst2>)
 800db52:	6819      	ldr	r1, [r3, #0]
 800db54:	6808      	ldr	r0, [r1, #0]
 800db56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5a:	f380 8809 	msr	PSP, r0
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	f04f 0000 	mov.w	r0, #0
 800db66:	f380 8811 	msr	BASEPRI, r0
 800db6a:	4770      	bx	lr
 800db6c:	f3af 8000 	nop.w

0800db70 <pxCurrentTCBConst2>:
 800db70:	20000be4 	.word	0x20000be4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db74:	bf00      	nop
 800db76:	bf00      	nop

0800db78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800db78:	4808      	ldr	r0, [pc, #32]	; (800db9c <prvPortStartFirstTask+0x24>)
 800db7a:	6800      	ldr	r0, [r0, #0]
 800db7c:	6800      	ldr	r0, [r0, #0]
 800db7e:	f380 8808 	msr	MSP, r0
 800db82:	f04f 0000 	mov.w	r0, #0
 800db86:	f380 8814 	msr	CONTROL, r0
 800db8a:	b662      	cpsie	i
 800db8c:	b661      	cpsie	f
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	df00      	svc	0
 800db98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db9a:	bf00      	nop
 800db9c:	e000ed08 	.word	0xe000ed08

0800dba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dba6:	4b46      	ldr	r3, [pc, #280]	; (800dcc0 <xPortStartScheduler+0x120>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a46      	ldr	r2, [pc, #280]	; (800dcc4 <xPortStartScheduler+0x124>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d10a      	bne.n	800dbc6 <xPortStartScheduler+0x26>
	__asm volatile
 800dbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb4:	f383 8811 	msr	BASEPRI, r3
 800dbb8:	f3bf 8f6f 	isb	sy
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	613b      	str	r3, [r7, #16]
}
 800dbc2:	bf00      	nop
 800dbc4:	e7fe      	b.n	800dbc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dbc6:	4b3e      	ldr	r3, [pc, #248]	; (800dcc0 <xPortStartScheduler+0x120>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4a3f      	ldr	r2, [pc, #252]	; (800dcc8 <xPortStartScheduler+0x128>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d10a      	bne.n	800dbe6 <xPortStartScheduler+0x46>
	__asm volatile
 800dbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd4:	f383 8811 	msr	BASEPRI, r3
 800dbd8:	f3bf 8f6f 	isb	sy
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	60fb      	str	r3, [r7, #12]
}
 800dbe2:	bf00      	nop
 800dbe4:	e7fe      	b.n	800dbe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dbe6:	4b39      	ldr	r3, [pc, #228]	; (800dccc <xPortStartScheduler+0x12c>)
 800dbe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	22ff      	movs	r2, #255	; 0xff
 800dbf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dc00:	78fb      	ldrb	r3, [r7, #3]
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dc08:	b2da      	uxtb	r2, r3
 800dc0a:	4b31      	ldr	r3, [pc, #196]	; (800dcd0 <xPortStartScheduler+0x130>)
 800dc0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc0e:	4b31      	ldr	r3, [pc, #196]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc10:	2207      	movs	r2, #7
 800dc12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc14:	e009      	b.n	800dc2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dc16:	4b2f      	ldr	r3, [pc, #188]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	4a2d      	ldr	r2, [pc, #180]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc20:	78fb      	ldrb	r3, [r7, #3]
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	005b      	lsls	r3, r3, #1
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc2a:	78fb      	ldrb	r3, [r7, #3]
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc32:	2b80      	cmp	r3, #128	; 0x80
 800dc34:	d0ef      	beq.n	800dc16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dc36:	4b27      	ldr	r3, [pc, #156]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f1c3 0307 	rsb	r3, r3, #7
 800dc3e:	2b04      	cmp	r3, #4
 800dc40:	d00a      	beq.n	800dc58 <xPortStartScheduler+0xb8>
	__asm volatile
 800dc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc46:	f383 8811 	msr	BASEPRI, r3
 800dc4a:	f3bf 8f6f 	isb	sy
 800dc4e:	f3bf 8f4f 	dsb	sy
 800dc52:	60bb      	str	r3, [r7, #8]
}
 800dc54:	bf00      	nop
 800dc56:	e7fe      	b.n	800dc56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dc58:	4b1e      	ldr	r3, [pc, #120]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	021b      	lsls	r3, r3, #8
 800dc5e:	4a1d      	ldr	r2, [pc, #116]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dc62:	4b1c      	ldr	r3, [pc, #112]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc6a:	4a1a      	ldr	r2, [pc, #104]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	b2da      	uxtb	r2, r3
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dc76:	4b18      	ldr	r3, [pc, #96]	; (800dcd8 <xPortStartScheduler+0x138>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a17      	ldr	r2, [pc, #92]	; (800dcd8 <xPortStartScheduler+0x138>)
 800dc7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dc80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dc82:	4b15      	ldr	r3, [pc, #84]	; (800dcd8 <xPortStartScheduler+0x138>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4a14      	ldr	r2, [pc, #80]	; (800dcd8 <xPortStartScheduler+0x138>)
 800dc88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dc8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dc8e:	f000 f8dd 	bl	800de4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dc92:	4b12      	ldr	r3, [pc, #72]	; (800dcdc <xPortStartScheduler+0x13c>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dc98:	f000 f8fc 	bl	800de94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dc9c:	4b10      	ldr	r3, [pc, #64]	; (800dce0 <xPortStartScheduler+0x140>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a0f      	ldr	r2, [pc, #60]	; (800dce0 <xPortStartScheduler+0x140>)
 800dca2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dca6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dca8:	f7ff ff66 	bl	800db78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dcac:	f7ff f828 	bl	800cd00 <vTaskSwitchContext>
	prvTaskExitError();
 800dcb0:	f7ff ff1c 	bl	800daec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3718      	adds	r7, #24
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	e000ed00 	.word	0xe000ed00
 800dcc4:	410fc271 	.word	0x410fc271
 800dcc8:	410fc270 	.word	0x410fc270
 800dccc:	e000e400 	.word	0xe000e400
 800dcd0:	20001218 	.word	0x20001218
 800dcd4:	2000121c 	.word	0x2000121c
 800dcd8:	e000ed20 	.word	0xe000ed20
 800dcdc:	20000108 	.word	0x20000108
 800dce0:	e000ef34 	.word	0xe000ef34

0800dce4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
	__asm volatile
 800dcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcee:	f383 8811 	msr	BASEPRI, r3
 800dcf2:	f3bf 8f6f 	isb	sy
 800dcf6:	f3bf 8f4f 	dsb	sy
 800dcfa:	607b      	str	r3, [r7, #4]
}
 800dcfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dcfe:	4b0f      	ldr	r3, [pc, #60]	; (800dd3c <vPortEnterCritical+0x58>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	3301      	adds	r3, #1
 800dd04:	4a0d      	ldr	r2, [pc, #52]	; (800dd3c <vPortEnterCritical+0x58>)
 800dd06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd08:	4b0c      	ldr	r3, [pc, #48]	; (800dd3c <vPortEnterCritical+0x58>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d10f      	bne.n	800dd30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd10:	4b0b      	ldr	r3, [pc, #44]	; (800dd40 <vPortEnterCritical+0x5c>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00a      	beq.n	800dd30 <vPortEnterCritical+0x4c>
	__asm volatile
 800dd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1e:	f383 8811 	msr	BASEPRI, r3
 800dd22:	f3bf 8f6f 	isb	sy
 800dd26:	f3bf 8f4f 	dsb	sy
 800dd2a:	603b      	str	r3, [r7, #0]
}
 800dd2c:	bf00      	nop
 800dd2e:	e7fe      	b.n	800dd2e <vPortEnterCritical+0x4a>
	}
}
 800dd30:	bf00      	nop
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr
 800dd3c:	20000108 	.word	0x20000108
 800dd40:	e000ed04 	.word	0xe000ed04

0800dd44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dd4a:	4b12      	ldr	r3, [pc, #72]	; (800dd94 <vPortExitCritical+0x50>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d10a      	bne.n	800dd68 <vPortExitCritical+0x24>
	__asm volatile
 800dd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd56:	f383 8811 	msr	BASEPRI, r3
 800dd5a:	f3bf 8f6f 	isb	sy
 800dd5e:	f3bf 8f4f 	dsb	sy
 800dd62:	607b      	str	r3, [r7, #4]
}
 800dd64:	bf00      	nop
 800dd66:	e7fe      	b.n	800dd66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dd68:	4b0a      	ldr	r3, [pc, #40]	; (800dd94 <vPortExitCritical+0x50>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	4a09      	ldr	r2, [pc, #36]	; (800dd94 <vPortExitCritical+0x50>)
 800dd70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd72:	4b08      	ldr	r3, [pc, #32]	; (800dd94 <vPortExitCritical+0x50>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d105      	bne.n	800dd86 <vPortExitCritical+0x42>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	f383 8811 	msr	BASEPRI, r3
}
 800dd84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dd86:	bf00      	nop
 800dd88:	370c      	adds	r7, #12
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	20000108 	.word	0x20000108
	...

0800dda0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dda0:	f3ef 8009 	mrs	r0, PSP
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	4b15      	ldr	r3, [pc, #84]	; (800de00 <pxCurrentTCBConst>)
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	f01e 0f10 	tst.w	lr, #16
 800ddb0:	bf08      	it	eq
 800ddb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ddb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddba:	6010      	str	r0, [r2, #0]
 800ddbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ddc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ddc4:	f380 8811 	msr	BASEPRI, r0
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	f7fe ff96 	bl	800cd00 <vTaskSwitchContext>
 800ddd4:	f04f 0000 	mov.w	r0, #0
 800ddd8:	f380 8811 	msr	BASEPRI, r0
 800dddc:	bc09      	pop	{r0, r3}
 800ddde:	6819      	ldr	r1, [r3, #0]
 800dde0:	6808      	ldr	r0, [r1, #0]
 800dde2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde6:	f01e 0f10 	tst.w	lr, #16
 800ddea:	bf08      	it	eq
 800ddec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ddf0:	f380 8809 	msr	PSP, r0
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	f3af 8000 	nop.w

0800de00 <pxCurrentTCBConst>:
 800de00:	20000be4 	.word	0x20000be4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de04:	bf00      	nop
 800de06:	bf00      	nop

0800de08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	f3bf 8f4f 	dsb	sy
 800de1e:	607b      	str	r3, [r7, #4]
}
 800de20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de22:	f7fe feb3 	bl	800cb8c <xTaskIncrementTick>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d003      	beq.n	800de34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de2c:	4b06      	ldr	r3, [pc, #24]	; (800de48 <xPortSysTickHandler+0x40>)
 800de2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de32:	601a      	str	r2, [r3, #0]
 800de34:	2300      	movs	r3, #0
 800de36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	f383 8811 	msr	BASEPRI, r3
}
 800de3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800de40:	bf00      	nop
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	e000ed04 	.word	0xe000ed04

0800de4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800de4c:	b480      	push	{r7}
 800de4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de50:	4b0b      	ldr	r3, [pc, #44]	; (800de80 <vPortSetupTimerInterrupt+0x34>)
 800de52:	2200      	movs	r2, #0
 800de54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de56:	4b0b      	ldr	r3, [pc, #44]	; (800de84 <vPortSetupTimerInterrupt+0x38>)
 800de58:	2200      	movs	r2, #0
 800de5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de5c:	4b0a      	ldr	r3, [pc, #40]	; (800de88 <vPortSetupTimerInterrupt+0x3c>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a0a      	ldr	r2, [pc, #40]	; (800de8c <vPortSetupTimerInterrupt+0x40>)
 800de62:	fba2 2303 	umull	r2, r3, r2, r3
 800de66:	099b      	lsrs	r3, r3, #6
 800de68:	4a09      	ldr	r2, [pc, #36]	; (800de90 <vPortSetupTimerInterrupt+0x44>)
 800de6a:	3b01      	subs	r3, #1
 800de6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de6e:	4b04      	ldr	r3, [pc, #16]	; (800de80 <vPortSetupTimerInterrupt+0x34>)
 800de70:	2207      	movs	r2, #7
 800de72:	601a      	str	r2, [r3, #0]
}
 800de74:	bf00      	nop
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	e000e010 	.word	0xe000e010
 800de84:	e000e018 	.word	0xe000e018
 800de88:	20000070 	.word	0x20000070
 800de8c:	10624dd3 	.word	0x10624dd3
 800de90:	e000e014 	.word	0xe000e014

0800de94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800de94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dea4 <vPortEnableVFP+0x10>
 800de98:	6801      	ldr	r1, [r0, #0]
 800de9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800de9e:	6001      	str	r1, [r0, #0]
 800dea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dea2:	bf00      	nop
 800dea4:	e000ed88 	.word	0xe000ed88

0800dea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dea8:	b480      	push	{r7}
 800deaa:	b085      	sub	sp, #20
 800deac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800deae:	f3ef 8305 	mrs	r3, IPSR
 800deb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2b0f      	cmp	r3, #15
 800deb8:	d914      	bls.n	800dee4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800deba:	4a17      	ldr	r2, [pc, #92]	; (800df18 <vPortValidateInterruptPriority+0x70>)
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	4413      	add	r3, r2
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dec4:	4b15      	ldr	r3, [pc, #84]	; (800df1c <vPortValidateInterruptPriority+0x74>)
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	7afa      	ldrb	r2, [r7, #11]
 800deca:	429a      	cmp	r2, r3
 800decc:	d20a      	bcs.n	800dee4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	607b      	str	r3, [r7, #4]
}
 800dee0:	bf00      	nop
 800dee2:	e7fe      	b.n	800dee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dee4:	4b0e      	ldr	r3, [pc, #56]	; (800df20 <vPortValidateInterruptPriority+0x78>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800deec:	4b0d      	ldr	r3, [pc, #52]	; (800df24 <vPortValidateInterruptPriority+0x7c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	429a      	cmp	r2, r3
 800def2:	d90a      	bls.n	800df0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800def4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def8:	f383 8811 	msr	BASEPRI, r3
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	603b      	str	r3, [r7, #0]
}
 800df06:	bf00      	nop
 800df08:	e7fe      	b.n	800df08 <vPortValidateInterruptPriority+0x60>
	}
 800df0a:	bf00      	nop
 800df0c:	3714      	adds	r7, #20
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop
 800df18:	e000e3f0 	.word	0xe000e3f0
 800df1c:	20001218 	.word	0x20001218
 800df20:	e000ed0c 	.word	0xe000ed0c
 800df24:	2000121c 	.word	0x2000121c

0800df28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b08a      	sub	sp, #40	; 0x28
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df30:	2300      	movs	r3, #0
 800df32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df34:	f7fe fd6e 	bl	800ca14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df38:	4b5b      	ldr	r3, [pc, #364]	; (800e0a8 <pvPortMalloc+0x180>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d101      	bne.n	800df44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800df40:	f000 f920 	bl	800e184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df44:	4b59      	ldr	r3, [pc, #356]	; (800e0ac <pvPortMalloc+0x184>)
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	4013      	ands	r3, r2
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f040 8093 	bne.w	800e078 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d01d      	beq.n	800df94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800df58:	2208      	movs	r2, #8
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4413      	add	r3, r2
 800df5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f003 0307 	and.w	r3, r3, #7
 800df66:	2b00      	cmp	r3, #0
 800df68:	d014      	beq.n	800df94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f023 0307 	bic.w	r3, r3, #7
 800df70:	3308      	adds	r3, #8
 800df72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f003 0307 	and.w	r3, r3, #7
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00a      	beq.n	800df94 <pvPortMalloc+0x6c>
	__asm volatile
 800df7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df82:	f383 8811 	msr	BASEPRI, r3
 800df86:	f3bf 8f6f 	isb	sy
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	617b      	str	r3, [r7, #20]
}
 800df90:	bf00      	nop
 800df92:	e7fe      	b.n	800df92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d06e      	beq.n	800e078 <pvPortMalloc+0x150>
 800df9a:	4b45      	ldr	r3, [pc, #276]	; (800e0b0 <pvPortMalloc+0x188>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d869      	bhi.n	800e078 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dfa4:	4b43      	ldr	r3, [pc, #268]	; (800e0b4 <pvPortMalloc+0x18c>)
 800dfa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dfa8:	4b42      	ldr	r3, [pc, #264]	; (800e0b4 <pvPortMalloc+0x18c>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfae:	e004      	b.n	800dfba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d903      	bls.n	800dfcc <pvPortMalloc+0xa4>
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d1f1      	bne.n	800dfb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dfcc:	4b36      	ldr	r3, [pc, #216]	; (800e0a8 <pvPortMalloc+0x180>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d050      	beq.n	800e078 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2208      	movs	r2, #8
 800dfdc:	4413      	add	r3, r2
 800dfde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	6a3b      	ldr	r3, [r7, #32]
 800dfe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfea:	685a      	ldr	r2, [r3, #4]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	1ad2      	subs	r2, r2, r3
 800dff0:	2308      	movs	r3, #8
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d91f      	bls.n	800e038 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4413      	add	r3, r2
 800dffe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	f003 0307 	and.w	r3, r3, #7
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00a      	beq.n	800e020 <pvPortMalloc+0xf8>
	__asm volatile
 800e00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00e:	f383 8811 	msr	BASEPRI, r3
 800e012:	f3bf 8f6f 	isb	sy
 800e016:	f3bf 8f4f 	dsb	sy
 800e01a:	613b      	str	r3, [r7, #16]
}
 800e01c:	bf00      	nop
 800e01e:	e7fe      	b.n	800e01e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e022:	685a      	ldr	r2, [r3, #4]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	1ad2      	subs	r2, r2, r3
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e032:	69b8      	ldr	r0, [r7, #24]
 800e034:	f000 f908 	bl	800e248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e038:	4b1d      	ldr	r3, [pc, #116]	; (800e0b0 <pvPortMalloc+0x188>)
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	4a1b      	ldr	r2, [pc, #108]	; (800e0b0 <pvPortMalloc+0x188>)
 800e044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e046:	4b1a      	ldr	r3, [pc, #104]	; (800e0b0 <pvPortMalloc+0x188>)
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	4b1b      	ldr	r3, [pc, #108]	; (800e0b8 <pvPortMalloc+0x190>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d203      	bcs.n	800e05a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e052:	4b17      	ldr	r3, [pc, #92]	; (800e0b0 <pvPortMalloc+0x188>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a18      	ldr	r2, [pc, #96]	; (800e0b8 <pvPortMalloc+0x190>)
 800e058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05c:	685a      	ldr	r2, [r3, #4]
 800e05e:	4b13      	ldr	r3, [pc, #76]	; (800e0ac <pvPortMalloc+0x184>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	431a      	orrs	r2, r3
 800e064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06a:	2200      	movs	r2, #0
 800e06c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e06e:	4b13      	ldr	r3, [pc, #76]	; (800e0bc <pvPortMalloc+0x194>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	3301      	adds	r3, #1
 800e074:	4a11      	ldr	r2, [pc, #68]	; (800e0bc <pvPortMalloc+0x194>)
 800e076:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e078:	f7fe fcda 	bl	800ca30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	f003 0307 	and.w	r3, r3, #7
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00a      	beq.n	800e09c <pvPortMalloc+0x174>
	__asm volatile
 800e086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08a:	f383 8811 	msr	BASEPRI, r3
 800e08e:	f3bf 8f6f 	isb	sy
 800e092:	f3bf 8f4f 	dsb	sy
 800e096:	60fb      	str	r3, [r7, #12]
}
 800e098:	bf00      	nop
 800e09a:	e7fe      	b.n	800e09a <pvPortMalloc+0x172>
	return pvReturn;
 800e09c:	69fb      	ldr	r3, [r7, #28]
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3728      	adds	r7, #40	; 0x28
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	2001a228 	.word	0x2001a228
 800e0ac:	2001a23c 	.word	0x2001a23c
 800e0b0:	2001a22c 	.word	0x2001a22c
 800e0b4:	2001a220 	.word	0x2001a220
 800e0b8:	2001a230 	.word	0x2001a230
 800e0bc:	2001a234 	.word	0x2001a234

0800e0c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b086      	sub	sp, #24
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d04d      	beq.n	800e16e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e0d2:	2308      	movs	r3, #8
 800e0d4:	425b      	negs	r3, r3
 800e0d6:	697a      	ldr	r2, [r7, #20]
 800e0d8:	4413      	add	r3, r2
 800e0da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	685a      	ldr	r2, [r3, #4]
 800e0e4:	4b24      	ldr	r3, [pc, #144]	; (800e178 <vPortFree+0xb8>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d10a      	bne.n	800e104 <vPortFree+0x44>
	__asm volatile
 800e0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f2:	f383 8811 	msr	BASEPRI, r3
 800e0f6:	f3bf 8f6f 	isb	sy
 800e0fa:	f3bf 8f4f 	dsb	sy
 800e0fe:	60fb      	str	r3, [r7, #12]
}
 800e100:	bf00      	nop
 800e102:	e7fe      	b.n	800e102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00a      	beq.n	800e122 <vPortFree+0x62>
	__asm volatile
 800e10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e110:	f383 8811 	msr	BASEPRI, r3
 800e114:	f3bf 8f6f 	isb	sy
 800e118:	f3bf 8f4f 	dsb	sy
 800e11c:	60bb      	str	r3, [r7, #8]
}
 800e11e:	bf00      	nop
 800e120:	e7fe      	b.n	800e120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	685a      	ldr	r2, [r3, #4]
 800e126:	4b14      	ldr	r3, [pc, #80]	; (800e178 <vPortFree+0xb8>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4013      	ands	r3, r2
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d01e      	beq.n	800e16e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d11a      	bne.n	800e16e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	685a      	ldr	r2, [r3, #4]
 800e13c:	4b0e      	ldr	r3, [pc, #56]	; (800e178 <vPortFree+0xb8>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	43db      	mvns	r3, r3
 800e142:	401a      	ands	r2, r3
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e148:	f7fe fc64 	bl	800ca14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	685a      	ldr	r2, [r3, #4]
 800e150:	4b0a      	ldr	r3, [pc, #40]	; (800e17c <vPortFree+0xbc>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4413      	add	r3, r2
 800e156:	4a09      	ldr	r2, [pc, #36]	; (800e17c <vPortFree+0xbc>)
 800e158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e15a:	6938      	ldr	r0, [r7, #16]
 800e15c:	f000 f874 	bl	800e248 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e160:	4b07      	ldr	r3, [pc, #28]	; (800e180 <vPortFree+0xc0>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	3301      	adds	r3, #1
 800e166:	4a06      	ldr	r2, [pc, #24]	; (800e180 <vPortFree+0xc0>)
 800e168:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e16a:	f7fe fc61 	bl	800ca30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e16e:	bf00      	nop
 800e170:	3718      	adds	r7, #24
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	2001a23c 	.word	0x2001a23c
 800e17c:	2001a22c 	.word	0x2001a22c
 800e180:	2001a238 	.word	0x2001a238

0800e184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e184:	b480      	push	{r7}
 800e186:	b085      	sub	sp, #20
 800e188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e18a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800e18e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e190:	4b27      	ldr	r3, [pc, #156]	; (800e230 <prvHeapInit+0xac>)
 800e192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f003 0307 	and.w	r3, r3, #7
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d00c      	beq.n	800e1b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	3307      	adds	r3, #7
 800e1a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f023 0307 	bic.w	r3, r3, #7
 800e1aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	1ad3      	subs	r3, r2, r3
 800e1b2:	4a1f      	ldr	r2, [pc, #124]	; (800e230 <prvHeapInit+0xac>)
 800e1b4:	4413      	add	r3, r2
 800e1b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e1bc:	4a1d      	ldr	r2, [pc, #116]	; (800e234 <prvHeapInit+0xb0>)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e1c2:	4b1c      	ldr	r3, [pc, #112]	; (800e234 <prvHeapInit+0xb0>)
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	68ba      	ldr	r2, [r7, #8]
 800e1cc:	4413      	add	r3, r2
 800e1ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e1d0:	2208      	movs	r2, #8
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	1a9b      	subs	r3, r3, r2
 800e1d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f023 0307 	bic.w	r3, r3, #7
 800e1de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	4a15      	ldr	r2, [pc, #84]	; (800e238 <prvHeapInit+0xb4>)
 800e1e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e1e6:	4b14      	ldr	r3, [pc, #80]	; (800e238 <prvHeapInit+0xb4>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e1ee:	4b12      	ldr	r3, [pc, #72]	; (800e238 <prvHeapInit+0xb4>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	1ad2      	subs	r2, r2, r3
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e204:	4b0c      	ldr	r3, [pc, #48]	; (800e238 <prvHeapInit+0xb4>)
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	4a0a      	ldr	r2, [pc, #40]	; (800e23c <prvHeapInit+0xb8>)
 800e212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	4a09      	ldr	r2, [pc, #36]	; (800e240 <prvHeapInit+0xbc>)
 800e21a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e21c:	4b09      	ldr	r3, [pc, #36]	; (800e244 <prvHeapInit+0xc0>)
 800e21e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e222:	601a      	str	r2, [r3, #0]
}
 800e224:	bf00      	nop
 800e226:	3714      	adds	r7, #20
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr
 800e230:	20001220 	.word	0x20001220
 800e234:	2001a220 	.word	0x2001a220
 800e238:	2001a228 	.word	0x2001a228
 800e23c:	2001a230 	.word	0x2001a230
 800e240:	2001a22c 	.word	0x2001a22c
 800e244:	2001a23c 	.word	0x2001a23c

0800e248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e248:	b480      	push	{r7}
 800e24a:	b085      	sub	sp, #20
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e250:	4b28      	ldr	r3, [pc, #160]	; (800e2f4 <prvInsertBlockIntoFreeList+0xac>)
 800e252:	60fb      	str	r3, [r7, #12]
 800e254:	e002      	b.n	800e25c <prvInsertBlockIntoFreeList+0x14>
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	60fb      	str	r3, [r7, #12]
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	429a      	cmp	r2, r3
 800e264:	d8f7      	bhi.n	800e256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	4413      	add	r3, r2
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	429a      	cmp	r2, r3
 800e276:	d108      	bne.n	800e28a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	441a      	add	r2, r3
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	68ba      	ldr	r2, [r7, #8]
 800e294:	441a      	add	r2, r3
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d118      	bne.n	800e2d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	4b15      	ldr	r3, [pc, #84]	; (800e2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d00d      	beq.n	800e2c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	685a      	ldr	r2, [r3, #4]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	441a      	add	r2, r3
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	e008      	b.n	800e2d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e2c6:	4b0c      	ldr	r3, [pc, #48]	; (800e2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	601a      	str	r2, [r3, #0]
 800e2ce:	e003      	b.n	800e2d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d002      	beq.n	800e2e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2e6:	bf00      	nop
 800e2e8:	3714      	adds	r7, #20
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr
 800e2f2:	bf00      	nop
 800e2f4:	2001a220 	.word	0x2001a220
 800e2f8:	2001a228 	.word	0x2001a228

0800e2fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e300:	2200      	movs	r2, #0
 800e302:	4912      	ldr	r1, [pc, #72]	; (800e34c <MX_USB_DEVICE_Init+0x50>)
 800e304:	4812      	ldr	r0, [pc, #72]	; (800e350 <MX_USB_DEVICE_Init+0x54>)
 800e306:	f7fb ff21 	bl	800a14c <USBD_Init>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e310:	f7f2 fd7e 	bl	8000e10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e314:	490f      	ldr	r1, [pc, #60]	; (800e354 <MX_USB_DEVICE_Init+0x58>)
 800e316:	480e      	ldr	r0, [pc, #56]	; (800e350 <MX_USB_DEVICE_Init+0x54>)
 800e318:	f7fb ff48 	bl	800a1ac <USBD_RegisterClass>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e322:	f7f2 fd75 	bl	8000e10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e326:	490c      	ldr	r1, [pc, #48]	; (800e358 <MX_USB_DEVICE_Init+0x5c>)
 800e328:	4809      	ldr	r0, [pc, #36]	; (800e350 <MX_USB_DEVICE_Init+0x54>)
 800e32a:	f7fb fe7f 	bl	800a02c <USBD_CDC_RegisterInterface>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d001      	beq.n	800e338 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e334:	f7f2 fd6c 	bl	8000e10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e338:	4805      	ldr	r0, [pc, #20]	; (800e350 <MX_USB_DEVICE_Init+0x54>)
 800e33a:	f7fb ff6d 	bl	800a218 <USBD_Start>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d001      	beq.n	800e348 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e344:	f7f2 fd64 	bl	8000e10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e348:	bf00      	nop
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20000120 	.word	0x20000120
 800e350:	2001a240 	.word	0x2001a240
 800e354:	20000088 	.word	0x20000088
 800e358:	2000010c 	.word	0x2000010c

0800e35c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e360:	2200      	movs	r2, #0
 800e362:	4905      	ldr	r1, [pc, #20]	; (800e378 <CDC_Init_FS+0x1c>)
 800e364:	4805      	ldr	r0, [pc, #20]	; (800e37c <CDC_Init_FS+0x20>)
 800e366:	f7fb fe7b 	bl	800a060 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e36a:	4905      	ldr	r1, [pc, #20]	; (800e380 <CDC_Init_FS+0x24>)
 800e36c:	4803      	ldr	r0, [pc, #12]	; (800e37c <CDC_Init_FS+0x20>)
 800e36e:	f7fb fe99 	bl	800a0a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e372:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e374:	4618      	mov	r0, r3
 800e376:	bd80      	pop	{r7, pc}
 800e378:	2001ad1c 	.word	0x2001ad1c
 800e37c:	2001a240 	.word	0x2001a240
 800e380:	2001a51c 	.word	0x2001a51c

0800e384 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e384:	b480      	push	{r7}
 800e386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	6039      	str	r1, [r7, #0]
 800e39e:	71fb      	strb	r3, [r7, #7]
 800e3a0:	4613      	mov	r3, r2
 800e3a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e3a4:	79fb      	ldrb	r3, [r7, #7]
 800e3a6:	2b23      	cmp	r3, #35	; 0x23
 800e3a8:	d84a      	bhi.n	800e440 <CDC_Control_FS+0xac>
 800e3aa:	a201      	add	r2, pc, #4	; (adr r2, 800e3b0 <CDC_Control_FS+0x1c>)
 800e3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b0:	0800e441 	.word	0x0800e441
 800e3b4:	0800e441 	.word	0x0800e441
 800e3b8:	0800e441 	.word	0x0800e441
 800e3bc:	0800e441 	.word	0x0800e441
 800e3c0:	0800e441 	.word	0x0800e441
 800e3c4:	0800e441 	.word	0x0800e441
 800e3c8:	0800e441 	.word	0x0800e441
 800e3cc:	0800e441 	.word	0x0800e441
 800e3d0:	0800e441 	.word	0x0800e441
 800e3d4:	0800e441 	.word	0x0800e441
 800e3d8:	0800e441 	.word	0x0800e441
 800e3dc:	0800e441 	.word	0x0800e441
 800e3e0:	0800e441 	.word	0x0800e441
 800e3e4:	0800e441 	.word	0x0800e441
 800e3e8:	0800e441 	.word	0x0800e441
 800e3ec:	0800e441 	.word	0x0800e441
 800e3f0:	0800e441 	.word	0x0800e441
 800e3f4:	0800e441 	.word	0x0800e441
 800e3f8:	0800e441 	.word	0x0800e441
 800e3fc:	0800e441 	.word	0x0800e441
 800e400:	0800e441 	.word	0x0800e441
 800e404:	0800e441 	.word	0x0800e441
 800e408:	0800e441 	.word	0x0800e441
 800e40c:	0800e441 	.word	0x0800e441
 800e410:	0800e441 	.word	0x0800e441
 800e414:	0800e441 	.word	0x0800e441
 800e418:	0800e441 	.word	0x0800e441
 800e41c:	0800e441 	.word	0x0800e441
 800e420:	0800e441 	.word	0x0800e441
 800e424:	0800e441 	.word	0x0800e441
 800e428:	0800e441 	.word	0x0800e441
 800e42c:	0800e441 	.word	0x0800e441
 800e430:	0800e441 	.word	0x0800e441
 800e434:	0800e441 	.word	0x0800e441
 800e438:	0800e441 	.word	0x0800e441
 800e43c:	0800e441 	.word	0x0800e441
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e440:	bf00      	nop
  }

  return (USBD_OK);
 800e442:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e444:	4618      	mov	r0, r3
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e45a:	6879      	ldr	r1, [r7, #4]
 800e45c:	4805      	ldr	r0, [pc, #20]	; (800e474 <CDC_Receive_FS+0x24>)
 800e45e:	f7fb fe21 	bl	800a0a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e462:	4804      	ldr	r0, [pc, #16]	; (800e474 <CDC_Receive_FS+0x24>)
 800e464:	f7fb fe3c 	bl	800a0e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e468:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3708      	adds	r7, #8
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	2001a240 	.word	0x2001a240

0800e478 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e478:	b480      	push	{r7}
 800e47a:	b087      	sub	sp, #28
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	4613      	mov	r3, r2
 800e484:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e486:	2300      	movs	r3, #0
 800e488:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e48a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	371c      	adds	r7, #28
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr
	...

0800e49c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	6039      	str	r1, [r7, #0]
 800e4a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2212      	movs	r2, #18
 800e4ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e4ae:	4b03      	ldr	r3, [pc, #12]	; (800e4bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr
 800e4bc:	2000013c 	.word	0x2000013c

0800e4c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b083      	sub	sp, #12
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	6039      	str	r1, [r7, #0]
 800e4ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	2204      	movs	r2, #4
 800e4d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e4d2:	4b03      	ldr	r3, [pc, #12]	; (800e4e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	370c      	adds	r7, #12
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr
 800e4e0:	20000150 	.word	0x20000150

0800e4e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	6039      	str	r1, [r7, #0]
 800e4ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e4f0:	79fb      	ldrb	r3, [r7, #7]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d105      	bne.n	800e502 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	4907      	ldr	r1, [pc, #28]	; (800e518 <USBD_FS_ProductStrDescriptor+0x34>)
 800e4fa:	4808      	ldr	r0, [pc, #32]	; (800e51c <USBD_FS_ProductStrDescriptor+0x38>)
 800e4fc:	f7fd f838 	bl	800b570 <USBD_GetString>
 800e500:	e004      	b.n	800e50c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e502:	683a      	ldr	r2, [r7, #0]
 800e504:	4904      	ldr	r1, [pc, #16]	; (800e518 <USBD_FS_ProductStrDescriptor+0x34>)
 800e506:	4805      	ldr	r0, [pc, #20]	; (800e51c <USBD_FS_ProductStrDescriptor+0x38>)
 800e508:	f7fd f832 	bl	800b570 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e50c:	4b02      	ldr	r3, [pc, #8]	; (800e518 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3708      	adds	r7, #8
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	2001b51c 	.word	0x2001b51c
 800e51c:	0800fa34 	.word	0x0800fa34

0800e520 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	4603      	mov	r3, r0
 800e528:	6039      	str	r1, [r7, #0]
 800e52a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e52c:	683a      	ldr	r2, [r7, #0]
 800e52e:	4904      	ldr	r1, [pc, #16]	; (800e540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e530:	4804      	ldr	r0, [pc, #16]	; (800e544 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e532:	f7fd f81d 	bl	800b570 <USBD_GetString>
  return USBD_StrDesc;
 800e536:	4b02      	ldr	r3, [pc, #8]	; (800e540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3708      	adds	r7, #8
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	2001b51c 	.word	0x2001b51c
 800e544:	0800fa4c 	.word	0x0800fa4c

0800e548 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	4603      	mov	r3, r0
 800e550:	6039      	str	r1, [r7, #0]
 800e552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	221a      	movs	r2, #26
 800e558:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e55a:	f000 f843 	bl	800e5e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e55e:	4b02      	ldr	r3, [pc, #8]	; (800e568 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e560:	4618      	mov	r0, r3
 800e562:	3708      	adds	r7, #8
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	20000154 	.word	0x20000154

0800e56c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	4603      	mov	r3, r0
 800e574:	6039      	str	r1, [r7, #0]
 800e576:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e578:	79fb      	ldrb	r3, [r7, #7]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d105      	bne.n	800e58a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e57e:	683a      	ldr	r2, [r7, #0]
 800e580:	4907      	ldr	r1, [pc, #28]	; (800e5a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e582:	4808      	ldr	r0, [pc, #32]	; (800e5a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e584:	f7fc fff4 	bl	800b570 <USBD_GetString>
 800e588:	e004      	b.n	800e594 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e58a:	683a      	ldr	r2, [r7, #0]
 800e58c:	4904      	ldr	r1, [pc, #16]	; (800e5a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e58e:	4805      	ldr	r0, [pc, #20]	; (800e5a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e590:	f7fc ffee 	bl	800b570 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e594:	4b02      	ldr	r3, [pc, #8]	; (800e5a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e596:	4618      	mov	r0, r3
 800e598:	3708      	adds	r7, #8
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	2001b51c 	.word	0x2001b51c
 800e5a4:	0800fa60 	.word	0x0800fa60

0800e5a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	6039      	str	r1, [r7, #0]
 800e5b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e5b4:	79fb      	ldrb	r3, [r7, #7]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d105      	bne.n	800e5c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e5ba:	683a      	ldr	r2, [r7, #0]
 800e5bc:	4907      	ldr	r1, [pc, #28]	; (800e5dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e5be:	4808      	ldr	r0, [pc, #32]	; (800e5e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e5c0:	f7fc ffd6 	bl	800b570 <USBD_GetString>
 800e5c4:	e004      	b.n	800e5d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e5c6:	683a      	ldr	r2, [r7, #0]
 800e5c8:	4904      	ldr	r1, [pc, #16]	; (800e5dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e5ca:	4805      	ldr	r0, [pc, #20]	; (800e5e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e5cc:	f7fc ffd0 	bl	800b570 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5d0:	4b02      	ldr	r3, [pc, #8]	; (800e5dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3708      	adds	r7, #8
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	2001b51c 	.word	0x2001b51c
 800e5e0:	0800fa6c 	.word	0x0800fa6c

0800e5e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e5ea:	4b0f      	ldr	r3, [pc, #60]	; (800e628 <Get_SerialNum+0x44>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e5f0:	4b0e      	ldr	r3, [pc, #56]	; (800e62c <Get_SerialNum+0x48>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e5f6:	4b0e      	ldr	r3, [pc, #56]	; (800e630 <Get_SerialNum+0x4c>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e5fc:	68fa      	ldr	r2, [r7, #12]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	4413      	add	r3, r2
 800e602:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d009      	beq.n	800e61e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e60a:	2208      	movs	r2, #8
 800e60c:	4909      	ldr	r1, [pc, #36]	; (800e634 <Get_SerialNum+0x50>)
 800e60e:	68f8      	ldr	r0, [r7, #12]
 800e610:	f000 f814 	bl	800e63c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e614:	2204      	movs	r2, #4
 800e616:	4908      	ldr	r1, [pc, #32]	; (800e638 <Get_SerialNum+0x54>)
 800e618:	68b8      	ldr	r0, [r7, #8]
 800e61a:	f000 f80f 	bl	800e63c <IntToUnicode>
  }
}
 800e61e:	bf00      	nop
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	1fff7a10 	.word	0x1fff7a10
 800e62c:	1fff7a14 	.word	0x1fff7a14
 800e630:	1fff7a18 	.word	0x1fff7a18
 800e634:	20000156 	.word	0x20000156
 800e638:	20000166 	.word	0x20000166

0800e63c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b087      	sub	sp, #28
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	4613      	mov	r3, r2
 800e648:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e64a:	2300      	movs	r3, #0
 800e64c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e64e:	2300      	movs	r3, #0
 800e650:	75fb      	strb	r3, [r7, #23]
 800e652:	e027      	b.n	800e6a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	0f1b      	lsrs	r3, r3, #28
 800e658:	2b09      	cmp	r3, #9
 800e65a:	d80b      	bhi.n	800e674 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	0f1b      	lsrs	r3, r3, #28
 800e660:	b2da      	uxtb	r2, r3
 800e662:	7dfb      	ldrb	r3, [r7, #23]
 800e664:	005b      	lsls	r3, r3, #1
 800e666:	4619      	mov	r1, r3
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	440b      	add	r3, r1
 800e66c:	3230      	adds	r2, #48	; 0x30
 800e66e:	b2d2      	uxtb	r2, r2
 800e670:	701a      	strb	r2, [r3, #0]
 800e672:	e00a      	b.n	800e68a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	0f1b      	lsrs	r3, r3, #28
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	7dfb      	ldrb	r3, [r7, #23]
 800e67c:	005b      	lsls	r3, r3, #1
 800e67e:	4619      	mov	r1, r3
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	440b      	add	r3, r1
 800e684:	3237      	adds	r2, #55	; 0x37
 800e686:	b2d2      	uxtb	r2, r2
 800e688:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	011b      	lsls	r3, r3, #4
 800e68e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e690:	7dfb      	ldrb	r3, [r7, #23]
 800e692:	005b      	lsls	r3, r3, #1
 800e694:	3301      	adds	r3, #1
 800e696:	68ba      	ldr	r2, [r7, #8]
 800e698:	4413      	add	r3, r2
 800e69a:	2200      	movs	r2, #0
 800e69c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e69e:	7dfb      	ldrb	r3, [r7, #23]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	75fb      	strb	r3, [r7, #23]
 800e6a4:	7dfa      	ldrb	r2, [r7, #23]
 800e6a6:	79fb      	ldrb	r3, [r7, #7]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d3d3      	bcc.n	800e654 <IntToUnicode+0x18>
  }
}
 800e6ac:	bf00      	nop
 800e6ae:	bf00      	nop
 800e6b0:	371c      	adds	r7, #28
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr
	...

0800e6bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b08a      	sub	sp, #40	; 0x28
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6c4:	f107 0314 	add.w	r3, r7, #20
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	601a      	str	r2, [r3, #0]
 800e6cc:	605a      	str	r2, [r3, #4]
 800e6ce:	609a      	str	r2, [r3, #8]
 800e6d0:	60da      	str	r2, [r3, #12]
 800e6d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e6dc:	d13a      	bne.n	800e754 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6de:	2300      	movs	r3, #0
 800e6e0:	613b      	str	r3, [r7, #16]
 800e6e2:	4b1e      	ldr	r3, [pc, #120]	; (800e75c <HAL_PCD_MspInit+0xa0>)
 800e6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6e6:	4a1d      	ldr	r2, [pc, #116]	; (800e75c <HAL_PCD_MspInit+0xa0>)
 800e6e8:	f043 0301 	orr.w	r3, r3, #1
 800e6ec:	6313      	str	r3, [r2, #48]	; 0x30
 800e6ee:	4b1b      	ldr	r3, [pc, #108]	; (800e75c <HAL_PCD_MspInit+0xa0>)
 800e6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6f2:	f003 0301 	and.w	r3, r3, #1
 800e6f6:	613b      	str	r3, [r7, #16]
 800e6f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e6fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e6fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e700:	2302      	movs	r3, #2
 800e702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e704:	2300      	movs	r3, #0
 800e706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e708:	2303      	movs	r3, #3
 800e70a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e70c:	230a      	movs	r3, #10
 800e70e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e710:	f107 0314 	add.w	r3, r7, #20
 800e714:	4619      	mov	r1, r3
 800e716:	4812      	ldr	r0, [pc, #72]	; (800e760 <HAL_PCD_MspInit+0xa4>)
 800e718:	f7f3 fbf6 	bl	8001f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e71c:	4b0f      	ldr	r3, [pc, #60]	; (800e75c <HAL_PCD_MspInit+0xa0>)
 800e71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e720:	4a0e      	ldr	r2, [pc, #56]	; (800e75c <HAL_PCD_MspInit+0xa0>)
 800e722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e726:	6353      	str	r3, [r2, #52]	; 0x34
 800e728:	2300      	movs	r3, #0
 800e72a:	60fb      	str	r3, [r7, #12]
 800e72c:	4b0b      	ldr	r3, [pc, #44]	; (800e75c <HAL_PCD_MspInit+0xa0>)
 800e72e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e730:	4a0a      	ldr	r2, [pc, #40]	; (800e75c <HAL_PCD_MspInit+0xa0>)
 800e732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e736:	6453      	str	r3, [r2, #68]	; 0x44
 800e738:	4b08      	ldr	r3, [pc, #32]	; (800e75c <HAL_PCD_MspInit+0xa0>)
 800e73a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e73c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e740:	60fb      	str	r3, [r7, #12]
 800e742:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e744:	2200      	movs	r2, #0
 800e746:	2105      	movs	r1, #5
 800e748:	2043      	movs	r0, #67	; 0x43
 800e74a:	f7f3 fb99 	bl	8001e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e74e:	2043      	movs	r0, #67	; 0x43
 800e750:	f7f3 fbc2 	bl	8001ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e754:	bf00      	nop
 800e756:	3728      	adds	r7, #40	; 0x28
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	40023800 	.word	0x40023800
 800e760:	40020000 	.word	0x40020000

0800e764 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e778:	4619      	mov	r1, r3
 800e77a:	4610      	mov	r0, r2
 800e77c:	f7fb fd99 	bl	800a2b2 <USBD_LL_SetupStage>
}
 800e780:	bf00      	nop
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	460b      	mov	r3, r1
 800e792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e79a:	78fa      	ldrb	r2, [r7, #3]
 800e79c:	6879      	ldr	r1, [r7, #4]
 800e79e:	4613      	mov	r3, r2
 800e7a0:	00db      	lsls	r3, r3, #3
 800e7a2:	4413      	add	r3, r2
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	440b      	add	r3, r1
 800e7a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	78fb      	ldrb	r3, [r7, #3]
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	f7fb fdd3 	bl	800a35c <USBD_LL_DataOutStage>
}
 800e7b6:	bf00      	nop
 800e7b8:	3708      	adds	r7, #8
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}

0800e7be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b082      	sub	sp, #8
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e7d0:	78fa      	ldrb	r2, [r7, #3]
 800e7d2:	6879      	ldr	r1, [r7, #4]
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	00db      	lsls	r3, r3, #3
 800e7d8:	4413      	add	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	440b      	add	r3, r1
 800e7de:	334c      	adds	r3, #76	; 0x4c
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	78fb      	ldrb	r3, [r7, #3]
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	f7fb fe6c 	bl	800a4c2 <USBD_LL_DataInStage>
}
 800e7ea:	bf00      	nop
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b082      	sub	sp, #8
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e800:	4618      	mov	r0, r3
 800e802:	f7fb ffa0 	bl	800a746 <USBD_LL_SOF>
}
 800e806:	bf00      	nop
 800e808:	3708      	adds	r7, #8
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b084      	sub	sp, #16
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e816:	2301      	movs	r3, #1
 800e818:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	2b02      	cmp	r3, #2
 800e820:	d001      	beq.n	800e826 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e822:	f7f2 faf5 	bl	8000e10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e82c:	7bfa      	ldrb	r2, [r7, #15]
 800e82e:	4611      	mov	r1, r2
 800e830:	4618      	mov	r0, r3
 800e832:	f7fb ff4a 	bl	800a6ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fb fef2 	bl	800a626 <USBD_LL_Reset>
}
 800e842:	bf00      	nop
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
	...

0800e84c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7fb ff45 	bl	800a6ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	6812      	ldr	r2, [r2, #0]
 800e86e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e872:	f043 0301 	orr.w	r3, r3, #1
 800e876:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6a1b      	ldr	r3, [r3, #32]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d005      	beq.n	800e88c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e880:	4b04      	ldr	r3, [pc, #16]	; (800e894 <HAL_PCD_SuspendCallback+0x48>)
 800e882:	691b      	ldr	r3, [r3, #16]
 800e884:	4a03      	ldr	r2, [pc, #12]	; (800e894 <HAL_PCD_SuspendCallback+0x48>)
 800e886:	f043 0306 	orr.w	r3, r3, #6
 800e88a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e88c:	bf00      	nop
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	e000ed00 	.word	0xe000ed00

0800e898 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fb ff35 	bl	800a716 <USBD_LL_Resume>
}
 800e8ac:	bf00      	nop
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8c6:	78fa      	ldrb	r2, [r7, #3]
 800e8c8:	4611      	mov	r1, r2
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7fb ff8d 	bl	800a7ea <USBD_LL_IsoOUTIncomplete>
}
 800e8d0:	bf00      	nop
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8ea:	78fa      	ldrb	r2, [r7, #3]
 800e8ec:	4611      	mov	r1, r2
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fb ff49 	bl	800a786 <USBD_LL_IsoINIncomplete>
}
 800e8f4:	bf00      	nop
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fb ff9f 	bl	800a84e <USBD_LL_DevConnected>
}
 800e910:	bf00      	nop
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e926:	4618      	mov	r0, r3
 800e928:	f7fb ff9c 	bl	800a864 <USBD_LL_DevDisconnected>
}
 800e92c:	bf00      	nop
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d13c      	bne.n	800e9be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e944:	4a20      	ldr	r2, [pc, #128]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	4a1e      	ldr	r2, [pc, #120]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e950:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e954:	4b1c      	ldr	r3, [pc, #112]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e956:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e95a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e95c:	4b1a      	ldr	r3, [pc, #104]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e95e:	2204      	movs	r2, #4
 800e960:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e962:	4b19      	ldr	r3, [pc, #100]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e964:	2202      	movs	r2, #2
 800e966:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e968:	4b17      	ldr	r3, [pc, #92]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e96e:	4b16      	ldr	r3, [pc, #88]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e970:	2202      	movs	r2, #2
 800e972:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e974:	4b14      	ldr	r3, [pc, #80]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e976:	2200      	movs	r2, #0
 800e978:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e97a:	4b13      	ldr	r3, [pc, #76]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e980:	4b11      	ldr	r3, [pc, #68]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e982:	2200      	movs	r2, #0
 800e984:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e986:	4b10      	ldr	r3, [pc, #64]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e988:	2200      	movs	r2, #0
 800e98a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e98c:	4b0e      	ldr	r3, [pc, #56]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e98e:	2200      	movs	r2, #0
 800e990:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e992:	480d      	ldr	r0, [pc, #52]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e994:	f7f4 fbe2 	bl	800315c <HAL_PCD_Init>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d001      	beq.n	800e9a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e99e:	f7f2 fa37 	bl	8000e10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e9a2:	2180      	movs	r1, #128	; 0x80
 800e9a4:	4808      	ldr	r0, [pc, #32]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e9a6:	f7f5 fe44 	bl	8004632 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e9aa:	2240      	movs	r2, #64	; 0x40
 800e9ac:	2100      	movs	r1, #0
 800e9ae:	4806      	ldr	r0, [pc, #24]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e9b0:	f7f5 fdf8 	bl	80045a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e9b4:	2280      	movs	r2, #128	; 0x80
 800e9b6:	2101      	movs	r1, #1
 800e9b8:	4803      	ldr	r0, [pc, #12]	; (800e9c8 <USBD_LL_Init+0x94>)
 800e9ba:	f7f5 fdf3 	bl	80045a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e9be:	2300      	movs	r3, #0
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	2001b71c 	.word	0x2001b71c

0800e9cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7f4 fce2 	bl	80033ac <HAL_PCD_Start>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9ec:	7bfb      	ldrb	r3, [r7, #15]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f000 f942 	bl	800ec78 <USBD_Get_USB_Status>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3710      	adds	r7, #16
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b084      	sub	sp, #16
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
 800ea0a:	4608      	mov	r0, r1
 800ea0c:	4611      	mov	r1, r2
 800ea0e:	461a      	mov	r2, r3
 800ea10:	4603      	mov	r3, r0
 800ea12:	70fb      	strb	r3, [r7, #3]
 800ea14:	460b      	mov	r3, r1
 800ea16:	70bb      	strb	r3, [r7, #2]
 800ea18:	4613      	mov	r3, r2
 800ea1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ea2a:	78bb      	ldrb	r3, [r7, #2]
 800ea2c:	883a      	ldrh	r2, [r7, #0]
 800ea2e:	78f9      	ldrb	r1, [r7, #3]
 800ea30:	f7f5 f9b3 	bl	8003d9a <HAL_PCD_EP_Open>
 800ea34:	4603      	mov	r3, r0
 800ea36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea38:	7bfb      	ldrb	r3, [r7, #15]
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f000 f91c 	bl	800ec78 <USBD_Get_USB_Status>
 800ea40:	4603      	mov	r3, r0
 800ea42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b084      	sub	sp, #16
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	460b      	mov	r3, r1
 800ea58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea68:	78fa      	ldrb	r2, [r7, #3]
 800ea6a:	4611      	mov	r1, r2
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7f5 f9fc 	bl	8003e6a <HAL_PCD_EP_Close>
 800ea72:	4603      	mov	r3, r0
 800ea74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea76:	7bfb      	ldrb	r3, [r7, #15]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f000 f8fd 	bl	800ec78 <USBD_Get_USB_Status>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3710      	adds	r7, #16
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	460b      	mov	r3, r1
 800ea96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eaa6:	78fa      	ldrb	r2, [r7, #3]
 800eaa8:	4611      	mov	r1, r2
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7f5 fad4 	bl	8004058 <HAL_PCD_EP_SetStall>
 800eab0:	4603      	mov	r3, r0
 800eab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eab4:	7bfb      	ldrb	r3, [r7, #15]
 800eab6:	4618      	mov	r0, r3
 800eab8:	f000 f8de 	bl	800ec78 <USBD_Get_USB_Status>
 800eabc:	4603      	mov	r3, r0
 800eabe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eac0:	7bbb      	ldrb	r3, [r7, #14]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b084      	sub	sp, #16
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	460b      	mov	r3, r1
 800ead4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ead6:	2300      	movs	r3, #0
 800ead8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eada:	2300      	movs	r3, #0
 800eadc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eae4:	78fa      	ldrb	r2, [r7, #3]
 800eae6:	4611      	mov	r1, r2
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7f5 fb19 	bl	8004120 <HAL_PCD_EP_ClrStall>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eaf2:	7bfb      	ldrb	r3, [r7, #15]
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f000 f8bf 	bl	800ec78 <USBD_Get_USB_Status>
 800eafa:	4603      	mov	r3, r0
 800eafc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eafe:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b085      	sub	sp, #20
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	460b      	mov	r3, r1
 800eb12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eb1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	da0b      	bge.n	800eb3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eb24:	78fb      	ldrb	r3, [r7, #3]
 800eb26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb2a:	68f9      	ldr	r1, [r7, #12]
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	00db      	lsls	r3, r3, #3
 800eb30:	4413      	add	r3, r2
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	440b      	add	r3, r1
 800eb36:	333e      	adds	r3, #62	; 0x3e
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	e00b      	b.n	800eb54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eb3c:	78fb      	ldrb	r3, [r7, #3]
 800eb3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb42:	68f9      	ldr	r1, [r7, #12]
 800eb44:	4613      	mov	r3, r2
 800eb46:	00db      	lsls	r3, r3, #3
 800eb48:	4413      	add	r3, r2
 800eb4a:	009b      	lsls	r3, r3, #2
 800eb4c:	440b      	add	r3, r1
 800eb4e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800eb52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3714      	adds	r7, #20
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	460b      	mov	r3, r1
 800eb6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb70:	2300      	movs	r3, #0
 800eb72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb7a:	78fa      	ldrb	r2, [r7, #3]
 800eb7c:	4611      	mov	r1, r2
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7f5 f8e6 	bl	8003d50 <HAL_PCD_SetAddress>
 800eb84:	4603      	mov	r3, r0
 800eb86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb88:	7bfb      	ldrb	r3, [r7, #15]
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f000 f874 	bl	800ec78 <USBD_Get_USB_Status>
 800eb90:	4603      	mov	r3, r0
 800eb92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb94:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3710      	adds	r7, #16
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b086      	sub	sp, #24
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	60f8      	str	r0, [r7, #12]
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	603b      	str	r3, [r7, #0]
 800ebaa:	460b      	mov	r3, r1
 800ebac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ebbc:	7af9      	ldrb	r1, [r7, #11]
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	f7f5 f9ff 	bl	8003fc4 <HAL_PCD_EP_Transmit>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebca:	7dfb      	ldrb	r3, [r7, #23]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f000 f853 	bl	800ec78 <USBD_Get_USB_Status>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ebd6:	7dbb      	ldrb	r3, [r7, #22]
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3718      	adds	r7, #24
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	607a      	str	r2, [r7, #4]
 800ebea:	603b      	str	r3, [r7, #0]
 800ebec:	460b      	mov	r3, r1
 800ebee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ebfe:	7af9      	ldrb	r1, [r7, #11]
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	f7f5 f97b 	bl	8003efe <HAL_PCD_EP_Receive>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec0c:	7dfb      	ldrb	r3, [r7, #23]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f000 f832 	bl	800ec78 <USBD_Get_USB_Status>
 800ec14:	4603      	mov	r3, r0
 800ec16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ec18:	7dbb      	ldrb	r3, [r7, #22]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3718      	adds	r7, #24
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b082      	sub	sp, #8
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec34:	78fa      	ldrb	r2, [r7, #3]
 800ec36:	4611      	mov	r1, r2
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7f5 f9ab 	bl	8003f94 <HAL_PCD_EP_GetRxCount>
 800ec3e:	4603      	mov	r3, r0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3708      	adds	r7, #8
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ec50:	4b03      	ldr	r3, [pc, #12]	; (800ec60 <USBD_static_malloc+0x18>)
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	370c      	adds	r7, #12
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop
 800ec60:	2001bc28 	.word	0x2001bc28

0800ec64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]

}
 800ec6c:	bf00      	nop
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	4603      	mov	r3, r0
 800ec80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec82:	2300      	movs	r3, #0
 800ec84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ec86:	79fb      	ldrb	r3, [r7, #7]
 800ec88:	2b03      	cmp	r3, #3
 800ec8a:	d817      	bhi.n	800ecbc <USBD_Get_USB_Status+0x44>
 800ec8c:	a201      	add	r2, pc, #4	; (adr r2, 800ec94 <USBD_Get_USB_Status+0x1c>)
 800ec8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec92:	bf00      	nop
 800ec94:	0800eca5 	.word	0x0800eca5
 800ec98:	0800ecab 	.word	0x0800ecab
 800ec9c:	0800ecb1 	.word	0x0800ecb1
 800eca0:	0800ecb7 	.word	0x0800ecb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eca4:	2300      	movs	r3, #0
 800eca6:	73fb      	strb	r3, [r7, #15]
    break;
 800eca8:	e00b      	b.n	800ecc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ecaa:	2303      	movs	r3, #3
 800ecac:	73fb      	strb	r3, [r7, #15]
    break;
 800ecae:	e008      	b.n	800ecc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ecb4:	e005      	b.n	800ecc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ecb6:	2303      	movs	r3, #3
 800ecb8:	73fb      	strb	r3, [r7, #15]
    break;
 800ecba:	e002      	b.n	800ecc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	73fb      	strb	r3, [r7, #15]
    break;
 800ecc0:	bf00      	nop
  }
  return usb_status;
 800ecc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3714      	adds	r7, #20
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <__errno>:
 800ecd0:	4b01      	ldr	r3, [pc, #4]	; (800ecd8 <__errno+0x8>)
 800ecd2:	6818      	ldr	r0, [r3, #0]
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop
 800ecd8:	20000170 	.word	0x20000170

0800ecdc <__libc_init_array>:
 800ecdc:	b570      	push	{r4, r5, r6, lr}
 800ecde:	4d0d      	ldr	r5, [pc, #52]	; (800ed14 <__libc_init_array+0x38>)
 800ece0:	4c0d      	ldr	r4, [pc, #52]	; (800ed18 <__libc_init_array+0x3c>)
 800ece2:	1b64      	subs	r4, r4, r5
 800ece4:	10a4      	asrs	r4, r4, #2
 800ece6:	2600      	movs	r6, #0
 800ece8:	42a6      	cmp	r6, r4
 800ecea:	d109      	bne.n	800ed00 <__libc_init_array+0x24>
 800ecec:	4d0b      	ldr	r5, [pc, #44]	; (800ed1c <__libc_init_array+0x40>)
 800ecee:	4c0c      	ldr	r4, [pc, #48]	; (800ed20 <__libc_init_array+0x44>)
 800ecf0:	f000 fd08 	bl	800f704 <_init>
 800ecf4:	1b64      	subs	r4, r4, r5
 800ecf6:	10a4      	asrs	r4, r4, #2
 800ecf8:	2600      	movs	r6, #0
 800ecfa:	42a6      	cmp	r6, r4
 800ecfc:	d105      	bne.n	800ed0a <__libc_init_array+0x2e>
 800ecfe:	bd70      	pop	{r4, r5, r6, pc}
 800ed00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed04:	4798      	blx	r3
 800ed06:	3601      	adds	r6, #1
 800ed08:	e7ee      	b.n	800ece8 <__libc_init_array+0xc>
 800ed0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed0e:	4798      	blx	r3
 800ed10:	3601      	adds	r6, #1
 800ed12:	e7f2      	b.n	800ecfa <__libc_init_array+0x1e>
 800ed14:	08012404 	.word	0x08012404
 800ed18:	08012404 	.word	0x08012404
 800ed1c:	08012404 	.word	0x08012404
 800ed20:	08012408 	.word	0x08012408

0800ed24 <__retarget_lock_acquire_recursive>:
 800ed24:	4770      	bx	lr

0800ed26 <__retarget_lock_release_recursive>:
 800ed26:	4770      	bx	lr

0800ed28 <malloc>:
 800ed28:	4b02      	ldr	r3, [pc, #8]	; (800ed34 <malloc+0xc>)
 800ed2a:	4601      	mov	r1, r0
 800ed2c:	6818      	ldr	r0, [r3, #0]
 800ed2e:	f000 b88d 	b.w	800ee4c <_malloc_r>
 800ed32:	bf00      	nop
 800ed34:	20000170 	.word	0x20000170

0800ed38 <free>:
 800ed38:	4b02      	ldr	r3, [pc, #8]	; (800ed44 <free+0xc>)
 800ed3a:	4601      	mov	r1, r0
 800ed3c:	6818      	ldr	r0, [r3, #0]
 800ed3e:	f000 b819 	b.w	800ed74 <_free_r>
 800ed42:	bf00      	nop
 800ed44:	20000170 	.word	0x20000170

0800ed48 <memcpy>:
 800ed48:	440a      	add	r2, r1
 800ed4a:	4291      	cmp	r1, r2
 800ed4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed50:	d100      	bne.n	800ed54 <memcpy+0xc>
 800ed52:	4770      	bx	lr
 800ed54:	b510      	push	{r4, lr}
 800ed56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed5e:	4291      	cmp	r1, r2
 800ed60:	d1f9      	bne.n	800ed56 <memcpy+0xe>
 800ed62:	bd10      	pop	{r4, pc}

0800ed64 <memset>:
 800ed64:	4402      	add	r2, r0
 800ed66:	4603      	mov	r3, r0
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d100      	bne.n	800ed6e <memset+0xa>
 800ed6c:	4770      	bx	lr
 800ed6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ed72:	e7f9      	b.n	800ed68 <memset+0x4>

0800ed74 <_free_r>:
 800ed74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed76:	2900      	cmp	r1, #0
 800ed78:	d044      	beq.n	800ee04 <_free_r+0x90>
 800ed7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed7e:	9001      	str	r0, [sp, #4]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f1a1 0404 	sub.w	r4, r1, #4
 800ed86:	bfb8      	it	lt
 800ed88:	18e4      	addlt	r4, r4, r3
 800ed8a:	f000 f96d 	bl	800f068 <__malloc_lock>
 800ed8e:	4a1e      	ldr	r2, [pc, #120]	; (800ee08 <_free_r+0x94>)
 800ed90:	9801      	ldr	r0, [sp, #4]
 800ed92:	6813      	ldr	r3, [r2, #0]
 800ed94:	b933      	cbnz	r3, 800eda4 <_free_r+0x30>
 800ed96:	6063      	str	r3, [r4, #4]
 800ed98:	6014      	str	r4, [r2, #0]
 800ed9a:	b003      	add	sp, #12
 800ed9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eda0:	f000 b968 	b.w	800f074 <__malloc_unlock>
 800eda4:	42a3      	cmp	r3, r4
 800eda6:	d908      	bls.n	800edba <_free_r+0x46>
 800eda8:	6825      	ldr	r5, [r4, #0]
 800edaa:	1961      	adds	r1, r4, r5
 800edac:	428b      	cmp	r3, r1
 800edae:	bf01      	itttt	eq
 800edb0:	6819      	ldreq	r1, [r3, #0]
 800edb2:	685b      	ldreq	r3, [r3, #4]
 800edb4:	1949      	addeq	r1, r1, r5
 800edb6:	6021      	streq	r1, [r4, #0]
 800edb8:	e7ed      	b.n	800ed96 <_free_r+0x22>
 800edba:	461a      	mov	r2, r3
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	b10b      	cbz	r3, 800edc4 <_free_r+0x50>
 800edc0:	42a3      	cmp	r3, r4
 800edc2:	d9fa      	bls.n	800edba <_free_r+0x46>
 800edc4:	6811      	ldr	r1, [r2, #0]
 800edc6:	1855      	adds	r5, r2, r1
 800edc8:	42a5      	cmp	r5, r4
 800edca:	d10b      	bne.n	800ede4 <_free_r+0x70>
 800edcc:	6824      	ldr	r4, [r4, #0]
 800edce:	4421      	add	r1, r4
 800edd0:	1854      	adds	r4, r2, r1
 800edd2:	42a3      	cmp	r3, r4
 800edd4:	6011      	str	r1, [r2, #0]
 800edd6:	d1e0      	bne.n	800ed9a <_free_r+0x26>
 800edd8:	681c      	ldr	r4, [r3, #0]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	6053      	str	r3, [r2, #4]
 800edde:	4421      	add	r1, r4
 800ede0:	6011      	str	r1, [r2, #0]
 800ede2:	e7da      	b.n	800ed9a <_free_r+0x26>
 800ede4:	d902      	bls.n	800edec <_free_r+0x78>
 800ede6:	230c      	movs	r3, #12
 800ede8:	6003      	str	r3, [r0, #0]
 800edea:	e7d6      	b.n	800ed9a <_free_r+0x26>
 800edec:	6825      	ldr	r5, [r4, #0]
 800edee:	1961      	adds	r1, r4, r5
 800edf0:	428b      	cmp	r3, r1
 800edf2:	bf04      	itt	eq
 800edf4:	6819      	ldreq	r1, [r3, #0]
 800edf6:	685b      	ldreq	r3, [r3, #4]
 800edf8:	6063      	str	r3, [r4, #4]
 800edfa:	bf04      	itt	eq
 800edfc:	1949      	addeq	r1, r1, r5
 800edfe:	6021      	streq	r1, [r4, #0]
 800ee00:	6054      	str	r4, [r2, #4]
 800ee02:	e7ca      	b.n	800ed9a <_free_r+0x26>
 800ee04:	b003      	add	sp, #12
 800ee06:	bd30      	pop	{r4, r5, pc}
 800ee08:	2001be4c 	.word	0x2001be4c

0800ee0c <sbrk_aligned>:
 800ee0c:	b570      	push	{r4, r5, r6, lr}
 800ee0e:	4e0e      	ldr	r6, [pc, #56]	; (800ee48 <sbrk_aligned+0x3c>)
 800ee10:	460c      	mov	r4, r1
 800ee12:	6831      	ldr	r1, [r6, #0]
 800ee14:	4605      	mov	r5, r0
 800ee16:	b911      	cbnz	r1, 800ee1e <sbrk_aligned+0x12>
 800ee18:	f000 f8f6 	bl	800f008 <_sbrk_r>
 800ee1c:	6030      	str	r0, [r6, #0]
 800ee1e:	4621      	mov	r1, r4
 800ee20:	4628      	mov	r0, r5
 800ee22:	f000 f8f1 	bl	800f008 <_sbrk_r>
 800ee26:	1c43      	adds	r3, r0, #1
 800ee28:	d00a      	beq.n	800ee40 <sbrk_aligned+0x34>
 800ee2a:	1cc4      	adds	r4, r0, #3
 800ee2c:	f024 0403 	bic.w	r4, r4, #3
 800ee30:	42a0      	cmp	r0, r4
 800ee32:	d007      	beq.n	800ee44 <sbrk_aligned+0x38>
 800ee34:	1a21      	subs	r1, r4, r0
 800ee36:	4628      	mov	r0, r5
 800ee38:	f000 f8e6 	bl	800f008 <_sbrk_r>
 800ee3c:	3001      	adds	r0, #1
 800ee3e:	d101      	bne.n	800ee44 <sbrk_aligned+0x38>
 800ee40:	f04f 34ff 	mov.w	r4, #4294967295
 800ee44:	4620      	mov	r0, r4
 800ee46:	bd70      	pop	{r4, r5, r6, pc}
 800ee48:	2001be50 	.word	0x2001be50

0800ee4c <_malloc_r>:
 800ee4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee50:	1ccd      	adds	r5, r1, #3
 800ee52:	f025 0503 	bic.w	r5, r5, #3
 800ee56:	3508      	adds	r5, #8
 800ee58:	2d0c      	cmp	r5, #12
 800ee5a:	bf38      	it	cc
 800ee5c:	250c      	movcc	r5, #12
 800ee5e:	2d00      	cmp	r5, #0
 800ee60:	4607      	mov	r7, r0
 800ee62:	db01      	blt.n	800ee68 <_malloc_r+0x1c>
 800ee64:	42a9      	cmp	r1, r5
 800ee66:	d905      	bls.n	800ee74 <_malloc_r+0x28>
 800ee68:	230c      	movs	r3, #12
 800ee6a:	603b      	str	r3, [r7, #0]
 800ee6c:	2600      	movs	r6, #0
 800ee6e:	4630      	mov	r0, r6
 800ee70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee74:	4e2e      	ldr	r6, [pc, #184]	; (800ef30 <_malloc_r+0xe4>)
 800ee76:	f000 f8f7 	bl	800f068 <__malloc_lock>
 800ee7a:	6833      	ldr	r3, [r6, #0]
 800ee7c:	461c      	mov	r4, r3
 800ee7e:	bb34      	cbnz	r4, 800eece <_malloc_r+0x82>
 800ee80:	4629      	mov	r1, r5
 800ee82:	4638      	mov	r0, r7
 800ee84:	f7ff ffc2 	bl	800ee0c <sbrk_aligned>
 800ee88:	1c43      	adds	r3, r0, #1
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	d14d      	bne.n	800ef2a <_malloc_r+0xde>
 800ee8e:	6834      	ldr	r4, [r6, #0]
 800ee90:	4626      	mov	r6, r4
 800ee92:	2e00      	cmp	r6, #0
 800ee94:	d140      	bne.n	800ef18 <_malloc_r+0xcc>
 800ee96:	6823      	ldr	r3, [r4, #0]
 800ee98:	4631      	mov	r1, r6
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	eb04 0803 	add.w	r8, r4, r3
 800eea0:	f000 f8b2 	bl	800f008 <_sbrk_r>
 800eea4:	4580      	cmp	r8, r0
 800eea6:	d13a      	bne.n	800ef1e <_malloc_r+0xd2>
 800eea8:	6821      	ldr	r1, [r4, #0]
 800eeaa:	3503      	adds	r5, #3
 800eeac:	1a6d      	subs	r5, r5, r1
 800eeae:	f025 0503 	bic.w	r5, r5, #3
 800eeb2:	3508      	adds	r5, #8
 800eeb4:	2d0c      	cmp	r5, #12
 800eeb6:	bf38      	it	cc
 800eeb8:	250c      	movcc	r5, #12
 800eeba:	4629      	mov	r1, r5
 800eebc:	4638      	mov	r0, r7
 800eebe:	f7ff ffa5 	bl	800ee0c <sbrk_aligned>
 800eec2:	3001      	adds	r0, #1
 800eec4:	d02b      	beq.n	800ef1e <_malloc_r+0xd2>
 800eec6:	6823      	ldr	r3, [r4, #0]
 800eec8:	442b      	add	r3, r5
 800eeca:	6023      	str	r3, [r4, #0]
 800eecc:	e00e      	b.n	800eeec <_malloc_r+0xa0>
 800eece:	6822      	ldr	r2, [r4, #0]
 800eed0:	1b52      	subs	r2, r2, r5
 800eed2:	d41e      	bmi.n	800ef12 <_malloc_r+0xc6>
 800eed4:	2a0b      	cmp	r2, #11
 800eed6:	d916      	bls.n	800ef06 <_malloc_r+0xba>
 800eed8:	1961      	adds	r1, r4, r5
 800eeda:	42a3      	cmp	r3, r4
 800eedc:	6025      	str	r5, [r4, #0]
 800eede:	bf18      	it	ne
 800eee0:	6059      	strne	r1, [r3, #4]
 800eee2:	6863      	ldr	r3, [r4, #4]
 800eee4:	bf08      	it	eq
 800eee6:	6031      	streq	r1, [r6, #0]
 800eee8:	5162      	str	r2, [r4, r5]
 800eeea:	604b      	str	r3, [r1, #4]
 800eeec:	4638      	mov	r0, r7
 800eeee:	f104 060b 	add.w	r6, r4, #11
 800eef2:	f000 f8bf 	bl	800f074 <__malloc_unlock>
 800eef6:	f026 0607 	bic.w	r6, r6, #7
 800eefa:	1d23      	adds	r3, r4, #4
 800eefc:	1af2      	subs	r2, r6, r3
 800eefe:	d0b6      	beq.n	800ee6e <_malloc_r+0x22>
 800ef00:	1b9b      	subs	r3, r3, r6
 800ef02:	50a3      	str	r3, [r4, r2]
 800ef04:	e7b3      	b.n	800ee6e <_malloc_r+0x22>
 800ef06:	6862      	ldr	r2, [r4, #4]
 800ef08:	42a3      	cmp	r3, r4
 800ef0a:	bf0c      	ite	eq
 800ef0c:	6032      	streq	r2, [r6, #0]
 800ef0e:	605a      	strne	r2, [r3, #4]
 800ef10:	e7ec      	b.n	800eeec <_malloc_r+0xa0>
 800ef12:	4623      	mov	r3, r4
 800ef14:	6864      	ldr	r4, [r4, #4]
 800ef16:	e7b2      	b.n	800ee7e <_malloc_r+0x32>
 800ef18:	4634      	mov	r4, r6
 800ef1a:	6876      	ldr	r6, [r6, #4]
 800ef1c:	e7b9      	b.n	800ee92 <_malloc_r+0x46>
 800ef1e:	230c      	movs	r3, #12
 800ef20:	603b      	str	r3, [r7, #0]
 800ef22:	4638      	mov	r0, r7
 800ef24:	f000 f8a6 	bl	800f074 <__malloc_unlock>
 800ef28:	e7a1      	b.n	800ee6e <_malloc_r+0x22>
 800ef2a:	6025      	str	r5, [r4, #0]
 800ef2c:	e7de      	b.n	800eeec <_malloc_r+0xa0>
 800ef2e:	bf00      	nop
 800ef30:	2001be4c 	.word	0x2001be4c

0800ef34 <cleanup_glue>:
 800ef34:	b538      	push	{r3, r4, r5, lr}
 800ef36:	460c      	mov	r4, r1
 800ef38:	6809      	ldr	r1, [r1, #0]
 800ef3a:	4605      	mov	r5, r0
 800ef3c:	b109      	cbz	r1, 800ef42 <cleanup_glue+0xe>
 800ef3e:	f7ff fff9 	bl	800ef34 <cleanup_glue>
 800ef42:	4621      	mov	r1, r4
 800ef44:	4628      	mov	r0, r5
 800ef46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef4a:	f7ff bf13 	b.w	800ed74 <_free_r>
	...

0800ef50 <_reclaim_reent>:
 800ef50:	4b2c      	ldr	r3, [pc, #176]	; (800f004 <_reclaim_reent+0xb4>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4283      	cmp	r3, r0
 800ef56:	b570      	push	{r4, r5, r6, lr}
 800ef58:	4604      	mov	r4, r0
 800ef5a:	d051      	beq.n	800f000 <_reclaim_reent+0xb0>
 800ef5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ef5e:	b143      	cbz	r3, 800ef72 <_reclaim_reent+0x22>
 800ef60:	68db      	ldr	r3, [r3, #12]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d14a      	bne.n	800effc <_reclaim_reent+0xac>
 800ef66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef68:	6819      	ldr	r1, [r3, #0]
 800ef6a:	b111      	cbz	r1, 800ef72 <_reclaim_reent+0x22>
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f7ff ff01 	bl	800ed74 <_free_r>
 800ef72:	6961      	ldr	r1, [r4, #20]
 800ef74:	b111      	cbz	r1, 800ef7c <_reclaim_reent+0x2c>
 800ef76:	4620      	mov	r0, r4
 800ef78:	f7ff fefc 	bl	800ed74 <_free_r>
 800ef7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ef7e:	b111      	cbz	r1, 800ef86 <_reclaim_reent+0x36>
 800ef80:	4620      	mov	r0, r4
 800ef82:	f7ff fef7 	bl	800ed74 <_free_r>
 800ef86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ef88:	b111      	cbz	r1, 800ef90 <_reclaim_reent+0x40>
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f7ff fef2 	bl	800ed74 <_free_r>
 800ef90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ef92:	b111      	cbz	r1, 800ef9a <_reclaim_reent+0x4a>
 800ef94:	4620      	mov	r0, r4
 800ef96:	f7ff feed 	bl	800ed74 <_free_r>
 800ef9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ef9c:	b111      	cbz	r1, 800efa4 <_reclaim_reent+0x54>
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f7ff fee8 	bl	800ed74 <_free_r>
 800efa4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800efa6:	b111      	cbz	r1, 800efae <_reclaim_reent+0x5e>
 800efa8:	4620      	mov	r0, r4
 800efaa:	f7ff fee3 	bl	800ed74 <_free_r>
 800efae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800efb0:	b111      	cbz	r1, 800efb8 <_reclaim_reent+0x68>
 800efb2:	4620      	mov	r0, r4
 800efb4:	f7ff fede 	bl	800ed74 <_free_r>
 800efb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efba:	b111      	cbz	r1, 800efc2 <_reclaim_reent+0x72>
 800efbc:	4620      	mov	r0, r4
 800efbe:	f7ff fed9 	bl	800ed74 <_free_r>
 800efc2:	69a3      	ldr	r3, [r4, #24]
 800efc4:	b1e3      	cbz	r3, 800f000 <_reclaim_reent+0xb0>
 800efc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800efc8:	4620      	mov	r0, r4
 800efca:	4798      	blx	r3
 800efcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800efce:	b1b9      	cbz	r1, 800f000 <_reclaim_reent+0xb0>
 800efd0:	4620      	mov	r0, r4
 800efd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efd6:	f7ff bfad 	b.w	800ef34 <cleanup_glue>
 800efda:	5949      	ldr	r1, [r1, r5]
 800efdc:	b941      	cbnz	r1, 800eff0 <_reclaim_reent+0xa0>
 800efde:	3504      	adds	r5, #4
 800efe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efe2:	2d80      	cmp	r5, #128	; 0x80
 800efe4:	68d9      	ldr	r1, [r3, #12]
 800efe6:	d1f8      	bne.n	800efda <_reclaim_reent+0x8a>
 800efe8:	4620      	mov	r0, r4
 800efea:	f7ff fec3 	bl	800ed74 <_free_r>
 800efee:	e7ba      	b.n	800ef66 <_reclaim_reent+0x16>
 800eff0:	680e      	ldr	r6, [r1, #0]
 800eff2:	4620      	mov	r0, r4
 800eff4:	f7ff febe 	bl	800ed74 <_free_r>
 800eff8:	4631      	mov	r1, r6
 800effa:	e7ef      	b.n	800efdc <_reclaim_reent+0x8c>
 800effc:	2500      	movs	r5, #0
 800effe:	e7ef      	b.n	800efe0 <_reclaim_reent+0x90>
 800f000:	bd70      	pop	{r4, r5, r6, pc}
 800f002:	bf00      	nop
 800f004:	20000170 	.word	0x20000170

0800f008 <_sbrk_r>:
 800f008:	b538      	push	{r3, r4, r5, lr}
 800f00a:	4d06      	ldr	r5, [pc, #24]	; (800f024 <_sbrk_r+0x1c>)
 800f00c:	2300      	movs	r3, #0
 800f00e:	4604      	mov	r4, r0
 800f010:	4608      	mov	r0, r1
 800f012:	602b      	str	r3, [r5, #0]
 800f014:	f7f2 fbe8 	bl	80017e8 <_sbrk>
 800f018:	1c43      	adds	r3, r0, #1
 800f01a:	d102      	bne.n	800f022 <_sbrk_r+0x1a>
 800f01c:	682b      	ldr	r3, [r5, #0]
 800f01e:	b103      	cbz	r3, 800f022 <_sbrk_r+0x1a>
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	bd38      	pop	{r3, r4, r5, pc}
 800f024:	2001be54 	.word	0x2001be54

0800f028 <siprintf>:
 800f028:	b40e      	push	{r1, r2, r3}
 800f02a:	b500      	push	{lr}
 800f02c:	b09c      	sub	sp, #112	; 0x70
 800f02e:	ab1d      	add	r3, sp, #116	; 0x74
 800f030:	9002      	str	r0, [sp, #8]
 800f032:	9006      	str	r0, [sp, #24]
 800f034:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f038:	4809      	ldr	r0, [pc, #36]	; (800f060 <siprintf+0x38>)
 800f03a:	9107      	str	r1, [sp, #28]
 800f03c:	9104      	str	r1, [sp, #16]
 800f03e:	4909      	ldr	r1, [pc, #36]	; (800f064 <siprintf+0x3c>)
 800f040:	f853 2b04 	ldr.w	r2, [r3], #4
 800f044:	9105      	str	r1, [sp, #20]
 800f046:	6800      	ldr	r0, [r0, #0]
 800f048:	9301      	str	r3, [sp, #4]
 800f04a:	a902      	add	r1, sp, #8
 800f04c:	f000 f874 	bl	800f138 <_svfiprintf_r>
 800f050:	9b02      	ldr	r3, [sp, #8]
 800f052:	2200      	movs	r2, #0
 800f054:	701a      	strb	r2, [r3, #0]
 800f056:	b01c      	add	sp, #112	; 0x70
 800f058:	f85d eb04 	ldr.w	lr, [sp], #4
 800f05c:	b003      	add	sp, #12
 800f05e:	4770      	bx	lr
 800f060:	20000170 	.word	0x20000170
 800f064:	ffff0208 	.word	0xffff0208

0800f068 <__malloc_lock>:
 800f068:	4801      	ldr	r0, [pc, #4]	; (800f070 <__malloc_lock+0x8>)
 800f06a:	f7ff be5b 	b.w	800ed24 <__retarget_lock_acquire_recursive>
 800f06e:	bf00      	nop
 800f070:	2001be48 	.word	0x2001be48

0800f074 <__malloc_unlock>:
 800f074:	4801      	ldr	r0, [pc, #4]	; (800f07c <__malloc_unlock+0x8>)
 800f076:	f7ff be56 	b.w	800ed26 <__retarget_lock_release_recursive>
 800f07a:	bf00      	nop
 800f07c:	2001be48 	.word	0x2001be48

0800f080 <__ssputs_r>:
 800f080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f084:	688e      	ldr	r6, [r1, #8]
 800f086:	429e      	cmp	r6, r3
 800f088:	4682      	mov	sl, r0
 800f08a:	460c      	mov	r4, r1
 800f08c:	4690      	mov	r8, r2
 800f08e:	461f      	mov	r7, r3
 800f090:	d838      	bhi.n	800f104 <__ssputs_r+0x84>
 800f092:	898a      	ldrh	r2, [r1, #12]
 800f094:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f098:	d032      	beq.n	800f100 <__ssputs_r+0x80>
 800f09a:	6825      	ldr	r5, [r4, #0]
 800f09c:	6909      	ldr	r1, [r1, #16]
 800f09e:	eba5 0901 	sub.w	r9, r5, r1
 800f0a2:	6965      	ldr	r5, [r4, #20]
 800f0a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	444b      	add	r3, r9
 800f0b0:	106d      	asrs	r5, r5, #1
 800f0b2:	429d      	cmp	r5, r3
 800f0b4:	bf38      	it	cc
 800f0b6:	461d      	movcc	r5, r3
 800f0b8:	0553      	lsls	r3, r2, #21
 800f0ba:	d531      	bpl.n	800f120 <__ssputs_r+0xa0>
 800f0bc:	4629      	mov	r1, r5
 800f0be:	f7ff fec5 	bl	800ee4c <_malloc_r>
 800f0c2:	4606      	mov	r6, r0
 800f0c4:	b950      	cbnz	r0, 800f0dc <__ssputs_r+0x5c>
 800f0c6:	230c      	movs	r3, #12
 800f0c8:	f8ca 3000 	str.w	r3, [sl]
 800f0cc:	89a3      	ldrh	r3, [r4, #12]
 800f0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0d2:	81a3      	strh	r3, [r4, #12]
 800f0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0dc:	6921      	ldr	r1, [r4, #16]
 800f0de:	464a      	mov	r2, r9
 800f0e0:	f7ff fe32 	bl	800ed48 <memcpy>
 800f0e4:	89a3      	ldrh	r3, [r4, #12]
 800f0e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f0ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0ee:	81a3      	strh	r3, [r4, #12]
 800f0f0:	6126      	str	r6, [r4, #16]
 800f0f2:	6165      	str	r5, [r4, #20]
 800f0f4:	444e      	add	r6, r9
 800f0f6:	eba5 0509 	sub.w	r5, r5, r9
 800f0fa:	6026      	str	r6, [r4, #0]
 800f0fc:	60a5      	str	r5, [r4, #8]
 800f0fe:	463e      	mov	r6, r7
 800f100:	42be      	cmp	r6, r7
 800f102:	d900      	bls.n	800f106 <__ssputs_r+0x86>
 800f104:	463e      	mov	r6, r7
 800f106:	6820      	ldr	r0, [r4, #0]
 800f108:	4632      	mov	r2, r6
 800f10a:	4641      	mov	r1, r8
 800f10c:	f000 faa8 	bl	800f660 <memmove>
 800f110:	68a3      	ldr	r3, [r4, #8]
 800f112:	1b9b      	subs	r3, r3, r6
 800f114:	60a3      	str	r3, [r4, #8]
 800f116:	6823      	ldr	r3, [r4, #0]
 800f118:	4433      	add	r3, r6
 800f11a:	6023      	str	r3, [r4, #0]
 800f11c:	2000      	movs	r0, #0
 800f11e:	e7db      	b.n	800f0d8 <__ssputs_r+0x58>
 800f120:	462a      	mov	r2, r5
 800f122:	f000 fab7 	bl	800f694 <_realloc_r>
 800f126:	4606      	mov	r6, r0
 800f128:	2800      	cmp	r0, #0
 800f12a:	d1e1      	bne.n	800f0f0 <__ssputs_r+0x70>
 800f12c:	6921      	ldr	r1, [r4, #16]
 800f12e:	4650      	mov	r0, sl
 800f130:	f7ff fe20 	bl	800ed74 <_free_r>
 800f134:	e7c7      	b.n	800f0c6 <__ssputs_r+0x46>
	...

0800f138 <_svfiprintf_r>:
 800f138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f13c:	4698      	mov	r8, r3
 800f13e:	898b      	ldrh	r3, [r1, #12]
 800f140:	061b      	lsls	r3, r3, #24
 800f142:	b09d      	sub	sp, #116	; 0x74
 800f144:	4607      	mov	r7, r0
 800f146:	460d      	mov	r5, r1
 800f148:	4614      	mov	r4, r2
 800f14a:	d50e      	bpl.n	800f16a <_svfiprintf_r+0x32>
 800f14c:	690b      	ldr	r3, [r1, #16]
 800f14e:	b963      	cbnz	r3, 800f16a <_svfiprintf_r+0x32>
 800f150:	2140      	movs	r1, #64	; 0x40
 800f152:	f7ff fe7b 	bl	800ee4c <_malloc_r>
 800f156:	6028      	str	r0, [r5, #0]
 800f158:	6128      	str	r0, [r5, #16]
 800f15a:	b920      	cbnz	r0, 800f166 <_svfiprintf_r+0x2e>
 800f15c:	230c      	movs	r3, #12
 800f15e:	603b      	str	r3, [r7, #0]
 800f160:	f04f 30ff 	mov.w	r0, #4294967295
 800f164:	e0d1      	b.n	800f30a <_svfiprintf_r+0x1d2>
 800f166:	2340      	movs	r3, #64	; 0x40
 800f168:	616b      	str	r3, [r5, #20]
 800f16a:	2300      	movs	r3, #0
 800f16c:	9309      	str	r3, [sp, #36]	; 0x24
 800f16e:	2320      	movs	r3, #32
 800f170:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f174:	f8cd 800c 	str.w	r8, [sp, #12]
 800f178:	2330      	movs	r3, #48	; 0x30
 800f17a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f324 <_svfiprintf_r+0x1ec>
 800f17e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f182:	f04f 0901 	mov.w	r9, #1
 800f186:	4623      	mov	r3, r4
 800f188:	469a      	mov	sl, r3
 800f18a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f18e:	b10a      	cbz	r2, 800f194 <_svfiprintf_r+0x5c>
 800f190:	2a25      	cmp	r2, #37	; 0x25
 800f192:	d1f9      	bne.n	800f188 <_svfiprintf_r+0x50>
 800f194:	ebba 0b04 	subs.w	fp, sl, r4
 800f198:	d00b      	beq.n	800f1b2 <_svfiprintf_r+0x7a>
 800f19a:	465b      	mov	r3, fp
 800f19c:	4622      	mov	r2, r4
 800f19e:	4629      	mov	r1, r5
 800f1a0:	4638      	mov	r0, r7
 800f1a2:	f7ff ff6d 	bl	800f080 <__ssputs_r>
 800f1a6:	3001      	adds	r0, #1
 800f1a8:	f000 80aa 	beq.w	800f300 <_svfiprintf_r+0x1c8>
 800f1ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1ae:	445a      	add	r2, fp
 800f1b0:	9209      	str	r2, [sp, #36]	; 0x24
 800f1b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f000 80a2 	beq.w	800f300 <_svfiprintf_r+0x1c8>
 800f1bc:	2300      	movs	r3, #0
 800f1be:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1c6:	f10a 0a01 	add.w	sl, sl, #1
 800f1ca:	9304      	str	r3, [sp, #16]
 800f1cc:	9307      	str	r3, [sp, #28]
 800f1ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1d2:	931a      	str	r3, [sp, #104]	; 0x68
 800f1d4:	4654      	mov	r4, sl
 800f1d6:	2205      	movs	r2, #5
 800f1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1dc:	4851      	ldr	r0, [pc, #324]	; (800f324 <_svfiprintf_r+0x1ec>)
 800f1de:	f7f0 ffff 	bl	80001e0 <memchr>
 800f1e2:	9a04      	ldr	r2, [sp, #16]
 800f1e4:	b9d8      	cbnz	r0, 800f21e <_svfiprintf_r+0xe6>
 800f1e6:	06d0      	lsls	r0, r2, #27
 800f1e8:	bf44      	itt	mi
 800f1ea:	2320      	movmi	r3, #32
 800f1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1f0:	0711      	lsls	r1, r2, #28
 800f1f2:	bf44      	itt	mi
 800f1f4:	232b      	movmi	r3, #43	; 0x2b
 800f1f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1fa:	f89a 3000 	ldrb.w	r3, [sl]
 800f1fe:	2b2a      	cmp	r3, #42	; 0x2a
 800f200:	d015      	beq.n	800f22e <_svfiprintf_r+0xf6>
 800f202:	9a07      	ldr	r2, [sp, #28]
 800f204:	4654      	mov	r4, sl
 800f206:	2000      	movs	r0, #0
 800f208:	f04f 0c0a 	mov.w	ip, #10
 800f20c:	4621      	mov	r1, r4
 800f20e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f212:	3b30      	subs	r3, #48	; 0x30
 800f214:	2b09      	cmp	r3, #9
 800f216:	d94e      	bls.n	800f2b6 <_svfiprintf_r+0x17e>
 800f218:	b1b0      	cbz	r0, 800f248 <_svfiprintf_r+0x110>
 800f21a:	9207      	str	r2, [sp, #28]
 800f21c:	e014      	b.n	800f248 <_svfiprintf_r+0x110>
 800f21e:	eba0 0308 	sub.w	r3, r0, r8
 800f222:	fa09 f303 	lsl.w	r3, r9, r3
 800f226:	4313      	orrs	r3, r2
 800f228:	9304      	str	r3, [sp, #16]
 800f22a:	46a2      	mov	sl, r4
 800f22c:	e7d2      	b.n	800f1d4 <_svfiprintf_r+0x9c>
 800f22e:	9b03      	ldr	r3, [sp, #12]
 800f230:	1d19      	adds	r1, r3, #4
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	9103      	str	r1, [sp, #12]
 800f236:	2b00      	cmp	r3, #0
 800f238:	bfbb      	ittet	lt
 800f23a:	425b      	neglt	r3, r3
 800f23c:	f042 0202 	orrlt.w	r2, r2, #2
 800f240:	9307      	strge	r3, [sp, #28]
 800f242:	9307      	strlt	r3, [sp, #28]
 800f244:	bfb8      	it	lt
 800f246:	9204      	strlt	r2, [sp, #16]
 800f248:	7823      	ldrb	r3, [r4, #0]
 800f24a:	2b2e      	cmp	r3, #46	; 0x2e
 800f24c:	d10c      	bne.n	800f268 <_svfiprintf_r+0x130>
 800f24e:	7863      	ldrb	r3, [r4, #1]
 800f250:	2b2a      	cmp	r3, #42	; 0x2a
 800f252:	d135      	bne.n	800f2c0 <_svfiprintf_r+0x188>
 800f254:	9b03      	ldr	r3, [sp, #12]
 800f256:	1d1a      	adds	r2, r3, #4
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	9203      	str	r2, [sp, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	bfb8      	it	lt
 800f260:	f04f 33ff 	movlt.w	r3, #4294967295
 800f264:	3402      	adds	r4, #2
 800f266:	9305      	str	r3, [sp, #20]
 800f268:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f334 <_svfiprintf_r+0x1fc>
 800f26c:	7821      	ldrb	r1, [r4, #0]
 800f26e:	2203      	movs	r2, #3
 800f270:	4650      	mov	r0, sl
 800f272:	f7f0 ffb5 	bl	80001e0 <memchr>
 800f276:	b140      	cbz	r0, 800f28a <_svfiprintf_r+0x152>
 800f278:	2340      	movs	r3, #64	; 0x40
 800f27a:	eba0 000a 	sub.w	r0, r0, sl
 800f27e:	fa03 f000 	lsl.w	r0, r3, r0
 800f282:	9b04      	ldr	r3, [sp, #16]
 800f284:	4303      	orrs	r3, r0
 800f286:	3401      	adds	r4, #1
 800f288:	9304      	str	r3, [sp, #16]
 800f28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f28e:	4826      	ldr	r0, [pc, #152]	; (800f328 <_svfiprintf_r+0x1f0>)
 800f290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f294:	2206      	movs	r2, #6
 800f296:	f7f0 ffa3 	bl	80001e0 <memchr>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d038      	beq.n	800f310 <_svfiprintf_r+0x1d8>
 800f29e:	4b23      	ldr	r3, [pc, #140]	; (800f32c <_svfiprintf_r+0x1f4>)
 800f2a0:	bb1b      	cbnz	r3, 800f2ea <_svfiprintf_r+0x1b2>
 800f2a2:	9b03      	ldr	r3, [sp, #12]
 800f2a4:	3307      	adds	r3, #7
 800f2a6:	f023 0307 	bic.w	r3, r3, #7
 800f2aa:	3308      	adds	r3, #8
 800f2ac:	9303      	str	r3, [sp, #12]
 800f2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2b0:	4433      	add	r3, r6
 800f2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800f2b4:	e767      	b.n	800f186 <_svfiprintf_r+0x4e>
 800f2b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2ba:	460c      	mov	r4, r1
 800f2bc:	2001      	movs	r0, #1
 800f2be:	e7a5      	b.n	800f20c <_svfiprintf_r+0xd4>
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	3401      	adds	r4, #1
 800f2c4:	9305      	str	r3, [sp, #20]
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	f04f 0c0a 	mov.w	ip, #10
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2d2:	3a30      	subs	r2, #48	; 0x30
 800f2d4:	2a09      	cmp	r2, #9
 800f2d6:	d903      	bls.n	800f2e0 <_svfiprintf_r+0x1a8>
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d0c5      	beq.n	800f268 <_svfiprintf_r+0x130>
 800f2dc:	9105      	str	r1, [sp, #20]
 800f2de:	e7c3      	b.n	800f268 <_svfiprintf_r+0x130>
 800f2e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e7f0      	b.n	800f2cc <_svfiprintf_r+0x194>
 800f2ea:	ab03      	add	r3, sp, #12
 800f2ec:	9300      	str	r3, [sp, #0]
 800f2ee:	462a      	mov	r2, r5
 800f2f0:	4b0f      	ldr	r3, [pc, #60]	; (800f330 <_svfiprintf_r+0x1f8>)
 800f2f2:	a904      	add	r1, sp, #16
 800f2f4:	4638      	mov	r0, r7
 800f2f6:	f3af 8000 	nop.w
 800f2fa:	1c42      	adds	r2, r0, #1
 800f2fc:	4606      	mov	r6, r0
 800f2fe:	d1d6      	bne.n	800f2ae <_svfiprintf_r+0x176>
 800f300:	89ab      	ldrh	r3, [r5, #12]
 800f302:	065b      	lsls	r3, r3, #25
 800f304:	f53f af2c 	bmi.w	800f160 <_svfiprintf_r+0x28>
 800f308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f30a:	b01d      	add	sp, #116	; 0x74
 800f30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f310:	ab03      	add	r3, sp, #12
 800f312:	9300      	str	r3, [sp, #0]
 800f314:	462a      	mov	r2, r5
 800f316:	4b06      	ldr	r3, [pc, #24]	; (800f330 <_svfiprintf_r+0x1f8>)
 800f318:	a904      	add	r1, sp, #16
 800f31a:	4638      	mov	r0, r7
 800f31c:	f000 f87a 	bl	800f414 <_printf_i>
 800f320:	e7eb      	b.n	800f2fa <_svfiprintf_r+0x1c2>
 800f322:	bf00      	nop
 800f324:	080123c8 	.word	0x080123c8
 800f328:	080123d2 	.word	0x080123d2
 800f32c:	00000000 	.word	0x00000000
 800f330:	0800f081 	.word	0x0800f081
 800f334:	080123ce 	.word	0x080123ce

0800f338 <_printf_common>:
 800f338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f33c:	4616      	mov	r6, r2
 800f33e:	4699      	mov	r9, r3
 800f340:	688a      	ldr	r2, [r1, #8]
 800f342:	690b      	ldr	r3, [r1, #16]
 800f344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f348:	4293      	cmp	r3, r2
 800f34a:	bfb8      	it	lt
 800f34c:	4613      	movlt	r3, r2
 800f34e:	6033      	str	r3, [r6, #0]
 800f350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f354:	4607      	mov	r7, r0
 800f356:	460c      	mov	r4, r1
 800f358:	b10a      	cbz	r2, 800f35e <_printf_common+0x26>
 800f35a:	3301      	adds	r3, #1
 800f35c:	6033      	str	r3, [r6, #0]
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	0699      	lsls	r1, r3, #26
 800f362:	bf42      	ittt	mi
 800f364:	6833      	ldrmi	r3, [r6, #0]
 800f366:	3302      	addmi	r3, #2
 800f368:	6033      	strmi	r3, [r6, #0]
 800f36a:	6825      	ldr	r5, [r4, #0]
 800f36c:	f015 0506 	ands.w	r5, r5, #6
 800f370:	d106      	bne.n	800f380 <_printf_common+0x48>
 800f372:	f104 0a19 	add.w	sl, r4, #25
 800f376:	68e3      	ldr	r3, [r4, #12]
 800f378:	6832      	ldr	r2, [r6, #0]
 800f37a:	1a9b      	subs	r3, r3, r2
 800f37c:	42ab      	cmp	r3, r5
 800f37e:	dc26      	bgt.n	800f3ce <_printf_common+0x96>
 800f380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f384:	1e13      	subs	r3, r2, #0
 800f386:	6822      	ldr	r2, [r4, #0]
 800f388:	bf18      	it	ne
 800f38a:	2301      	movne	r3, #1
 800f38c:	0692      	lsls	r2, r2, #26
 800f38e:	d42b      	bmi.n	800f3e8 <_printf_common+0xb0>
 800f390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f394:	4649      	mov	r1, r9
 800f396:	4638      	mov	r0, r7
 800f398:	47c0      	blx	r8
 800f39a:	3001      	adds	r0, #1
 800f39c:	d01e      	beq.n	800f3dc <_printf_common+0xa4>
 800f39e:	6823      	ldr	r3, [r4, #0]
 800f3a0:	68e5      	ldr	r5, [r4, #12]
 800f3a2:	6832      	ldr	r2, [r6, #0]
 800f3a4:	f003 0306 	and.w	r3, r3, #6
 800f3a8:	2b04      	cmp	r3, #4
 800f3aa:	bf08      	it	eq
 800f3ac:	1aad      	subeq	r5, r5, r2
 800f3ae:	68a3      	ldr	r3, [r4, #8]
 800f3b0:	6922      	ldr	r2, [r4, #16]
 800f3b2:	bf0c      	ite	eq
 800f3b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3b8:	2500      	movne	r5, #0
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	bfc4      	itt	gt
 800f3be:	1a9b      	subgt	r3, r3, r2
 800f3c0:	18ed      	addgt	r5, r5, r3
 800f3c2:	2600      	movs	r6, #0
 800f3c4:	341a      	adds	r4, #26
 800f3c6:	42b5      	cmp	r5, r6
 800f3c8:	d11a      	bne.n	800f400 <_printf_common+0xc8>
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	e008      	b.n	800f3e0 <_printf_common+0xa8>
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	4652      	mov	r2, sl
 800f3d2:	4649      	mov	r1, r9
 800f3d4:	4638      	mov	r0, r7
 800f3d6:	47c0      	blx	r8
 800f3d8:	3001      	adds	r0, #1
 800f3da:	d103      	bne.n	800f3e4 <_printf_common+0xac>
 800f3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3e4:	3501      	adds	r5, #1
 800f3e6:	e7c6      	b.n	800f376 <_printf_common+0x3e>
 800f3e8:	18e1      	adds	r1, r4, r3
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	2030      	movs	r0, #48	; 0x30
 800f3ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f3f2:	4422      	add	r2, r4
 800f3f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f3f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f3fc:	3302      	adds	r3, #2
 800f3fe:	e7c7      	b.n	800f390 <_printf_common+0x58>
 800f400:	2301      	movs	r3, #1
 800f402:	4622      	mov	r2, r4
 800f404:	4649      	mov	r1, r9
 800f406:	4638      	mov	r0, r7
 800f408:	47c0      	blx	r8
 800f40a:	3001      	adds	r0, #1
 800f40c:	d0e6      	beq.n	800f3dc <_printf_common+0xa4>
 800f40e:	3601      	adds	r6, #1
 800f410:	e7d9      	b.n	800f3c6 <_printf_common+0x8e>
	...

0800f414 <_printf_i>:
 800f414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f418:	7e0f      	ldrb	r7, [r1, #24]
 800f41a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f41c:	2f78      	cmp	r7, #120	; 0x78
 800f41e:	4691      	mov	r9, r2
 800f420:	4680      	mov	r8, r0
 800f422:	460c      	mov	r4, r1
 800f424:	469a      	mov	sl, r3
 800f426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f42a:	d807      	bhi.n	800f43c <_printf_i+0x28>
 800f42c:	2f62      	cmp	r7, #98	; 0x62
 800f42e:	d80a      	bhi.n	800f446 <_printf_i+0x32>
 800f430:	2f00      	cmp	r7, #0
 800f432:	f000 80d8 	beq.w	800f5e6 <_printf_i+0x1d2>
 800f436:	2f58      	cmp	r7, #88	; 0x58
 800f438:	f000 80a3 	beq.w	800f582 <_printf_i+0x16e>
 800f43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f444:	e03a      	b.n	800f4bc <_printf_i+0xa8>
 800f446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f44a:	2b15      	cmp	r3, #21
 800f44c:	d8f6      	bhi.n	800f43c <_printf_i+0x28>
 800f44e:	a101      	add	r1, pc, #4	; (adr r1, 800f454 <_printf_i+0x40>)
 800f450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f454:	0800f4ad 	.word	0x0800f4ad
 800f458:	0800f4c1 	.word	0x0800f4c1
 800f45c:	0800f43d 	.word	0x0800f43d
 800f460:	0800f43d 	.word	0x0800f43d
 800f464:	0800f43d 	.word	0x0800f43d
 800f468:	0800f43d 	.word	0x0800f43d
 800f46c:	0800f4c1 	.word	0x0800f4c1
 800f470:	0800f43d 	.word	0x0800f43d
 800f474:	0800f43d 	.word	0x0800f43d
 800f478:	0800f43d 	.word	0x0800f43d
 800f47c:	0800f43d 	.word	0x0800f43d
 800f480:	0800f5cd 	.word	0x0800f5cd
 800f484:	0800f4f1 	.word	0x0800f4f1
 800f488:	0800f5af 	.word	0x0800f5af
 800f48c:	0800f43d 	.word	0x0800f43d
 800f490:	0800f43d 	.word	0x0800f43d
 800f494:	0800f5ef 	.word	0x0800f5ef
 800f498:	0800f43d 	.word	0x0800f43d
 800f49c:	0800f4f1 	.word	0x0800f4f1
 800f4a0:	0800f43d 	.word	0x0800f43d
 800f4a4:	0800f43d 	.word	0x0800f43d
 800f4a8:	0800f5b7 	.word	0x0800f5b7
 800f4ac:	682b      	ldr	r3, [r5, #0]
 800f4ae:	1d1a      	adds	r2, r3, #4
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	602a      	str	r2, [r5, #0]
 800f4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e0a3      	b.n	800f608 <_printf_i+0x1f4>
 800f4c0:	6820      	ldr	r0, [r4, #0]
 800f4c2:	6829      	ldr	r1, [r5, #0]
 800f4c4:	0606      	lsls	r6, r0, #24
 800f4c6:	f101 0304 	add.w	r3, r1, #4
 800f4ca:	d50a      	bpl.n	800f4e2 <_printf_i+0xce>
 800f4cc:	680e      	ldr	r6, [r1, #0]
 800f4ce:	602b      	str	r3, [r5, #0]
 800f4d0:	2e00      	cmp	r6, #0
 800f4d2:	da03      	bge.n	800f4dc <_printf_i+0xc8>
 800f4d4:	232d      	movs	r3, #45	; 0x2d
 800f4d6:	4276      	negs	r6, r6
 800f4d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4dc:	485e      	ldr	r0, [pc, #376]	; (800f658 <_printf_i+0x244>)
 800f4de:	230a      	movs	r3, #10
 800f4e0:	e019      	b.n	800f516 <_printf_i+0x102>
 800f4e2:	680e      	ldr	r6, [r1, #0]
 800f4e4:	602b      	str	r3, [r5, #0]
 800f4e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f4ea:	bf18      	it	ne
 800f4ec:	b236      	sxthne	r6, r6
 800f4ee:	e7ef      	b.n	800f4d0 <_printf_i+0xbc>
 800f4f0:	682b      	ldr	r3, [r5, #0]
 800f4f2:	6820      	ldr	r0, [r4, #0]
 800f4f4:	1d19      	adds	r1, r3, #4
 800f4f6:	6029      	str	r1, [r5, #0]
 800f4f8:	0601      	lsls	r1, r0, #24
 800f4fa:	d501      	bpl.n	800f500 <_printf_i+0xec>
 800f4fc:	681e      	ldr	r6, [r3, #0]
 800f4fe:	e002      	b.n	800f506 <_printf_i+0xf2>
 800f500:	0646      	lsls	r6, r0, #25
 800f502:	d5fb      	bpl.n	800f4fc <_printf_i+0xe8>
 800f504:	881e      	ldrh	r6, [r3, #0]
 800f506:	4854      	ldr	r0, [pc, #336]	; (800f658 <_printf_i+0x244>)
 800f508:	2f6f      	cmp	r7, #111	; 0x6f
 800f50a:	bf0c      	ite	eq
 800f50c:	2308      	moveq	r3, #8
 800f50e:	230a      	movne	r3, #10
 800f510:	2100      	movs	r1, #0
 800f512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f516:	6865      	ldr	r5, [r4, #4]
 800f518:	60a5      	str	r5, [r4, #8]
 800f51a:	2d00      	cmp	r5, #0
 800f51c:	bfa2      	ittt	ge
 800f51e:	6821      	ldrge	r1, [r4, #0]
 800f520:	f021 0104 	bicge.w	r1, r1, #4
 800f524:	6021      	strge	r1, [r4, #0]
 800f526:	b90e      	cbnz	r6, 800f52c <_printf_i+0x118>
 800f528:	2d00      	cmp	r5, #0
 800f52a:	d04d      	beq.n	800f5c8 <_printf_i+0x1b4>
 800f52c:	4615      	mov	r5, r2
 800f52e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f532:	fb03 6711 	mls	r7, r3, r1, r6
 800f536:	5dc7      	ldrb	r7, [r0, r7]
 800f538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f53c:	4637      	mov	r7, r6
 800f53e:	42bb      	cmp	r3, r7
 800f540:	460e      	mov	r6, r1
 800f542:	d9f4      	bls.n	800f52e <_printf_i+0x11a>
 800f544:	2b08      	cmp	r3, #8
 800f546:	d10b      	bne.n	800f560 <_printf_i+0x14c>
 800f548:	6823      	ldr	r3, [r4, #0]
 800f54a:	07de      	lsls	r6, r3, #31
 800f54c:	d508      	bpl.n	800f560 <_printf_i+0x14c>
 800f54e:	6923      	ldr	r3, [r4, #16]
 800f550:	6861      	ldr	r1, [r4, #4]
 800f552:	4299      	cmp	r1, r3
 800f554:	bfde      	ittt	le
 800f556:	2330      	movle	r3, #48	; 0x30
 800f558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f55c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f560:	1b52      	subs	r2, r2, r5
 800f562:	6122      	str	r2, [r4, #16]
 800f564:	f8cd a000 	str.w	sl, [sp]
 800f568:	464b      	mov	r3, r9
 800f56a:	aa03      	add	r2, sp, #12
 800f56c:	4621      	mov	r1, r4
 800f56e:	4640      	mov	r0, r8
 800f570:	f7ff fee2 	bl	800f338 <_printf_common>
 800f574:	3001      	adds	r0, #1
 800f576:	d14c      	bne.n	800f612 <_printf_i+0x1fe>
 800f578:	f04f 30ff 	mov.w	r0, #4294967295
 800f57c:	b004      	add	sp, #16
 800f57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f582:	4835      	ldr	r0, [pc, #212]	; (800f658 <_printf_i+0x244>)
 800f584:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f588:	6829      	ldr	r1, [r5, #0]
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f590:	6029      	str	r1, [r5, #0]
 800f592:	061d      	lsls	r5, r3, #24
 800f594:	d514      	bpl.n	800f5c0 <_printf_i+0x1ac>
 800f596:	07df      	lsls	r7, r3, #31
 800f598:	bf44      	itt	mi
 800f59a:	f043 0320 	orrmi.w	r3, r3, #32
 800f59e:	6023      	strmi	r3, [r4, #0]
 800f5a0:	b91e      	cbnz	r6, 800f5aa <_printf_i+0x196>
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	f023 0320 	bic.w	r3, r3, #32
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	2310      	movs	r3, #16
 800f5ac:	e7b0      	b.n	800f510 <_printf_i+0xfc>
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	f043 0320 	orr.w	r3, r3, #32
 800f5b4:	6023      	str	r3, [r4, #0]
 800f5b6:	2378      	movs	r3, #120	; 0x78
 800f5b8:	4828      	ldr	r0, [pc, #160]	; (800f65c <_printf_i+0x248>)
 800f5ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5be:	e7e3      	b.n	800f588 <_printf_i+0x174>
 800f5c0:	0659      	lsls	r1, r3, #25
 800f5c2:	bf48      	it	mi
 800f5c4:	b2b6      	uxthmi	r6, r6
 800f5c6:	e7e6      	b.n	800f596 <_printf_i+0x182>
 800f5c8:	4615      	mov	r5, r2
 800f5ca:	e7bb      	b.n	800f544 <_printf_i+0x130>
 800f5cc:	682b      	ldr	r3, [r5, #0]
 800f5ce:	6826      	ldr	r6, [r4, #0]
 800f5d0:	6961      	ldr	r1, [r4, #20]
 800f5d2:	1d18      	adds	r0, r3, #4
 800f5d4:	6028      	str	r0, [r5, #0]
 800f5d6:	0635      	lsls	r5, r6, #24
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	d501      	bpl.n	800f5e0 <_printf_i+0x1cc>
 800f5dc:	6019      	str	r1, [r3, #0]
 800f5de:	e002      	b.n	800f5e6 <_printf_i+0x1d2>
 800f5e0:	0670      	lsls	r0, r6, #25
 800f5e2:	d5fb      	bpl.n	800f5dc <_printf_i+0x1c8>
 800f5e4:	8019      	strh	r1, [r3, #0]
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	6123      	str	r3, [r4, #16]
 800f5ea:	4615      	mov	r5, r2
 800f5ec:	e7ba      	b.n	800f564 <_printf_i+0x150>
 800f5ee:	682b      	ldr	r3, [r5, #0]
 800f5f0:	1d1a      	adds	r2, r3, #4
 800f5f2:	602a      	str	r2, [r5, #0]
 800f5f4:	681d      	ldr	r5, [r3, #0]
 800f5f6:	6862      	ldr	r2, [r4, #4]
 800f5f8:	2100      	movs	r1, #0
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	f7f0 fdf0 	bl	80001e0 <memchr>
 800f600:	b108      	cbz	r0, 800f606 <_printf_i+0x1f2>
 800f602:	1b40      	subs	r0, r0, r5
 800f604:	6060      	str	r0, [r4, #4]
 800f606:	6863      	ldr	r3, [r4, #4]
 800f608:	6123      	str	r3, [r4, #16]
 800f60a:	2300      	movs	r3, #0
 800f60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f610:	e7a8      	b.n	800f564 <_printf_i+0x150>
 800f612:	6923      	ldr	r3, [r4, #16]
 800f614:	462a      	mov	r2, r5
 800f616:	4649      	mov	r1, r9
 800f618:	4640      	mov	r0, r8
 800f61a:	47d0      	blx	sl
 800f61c:	3001      	adds	r0, #1
 800f61e:	d0ab      	beq.n	800f578 <_printf_i+0x164>
 800f620:	6823      	ldr	r3, [r4, #0]
 800f622:	079b      	lsls	r3, r3, #30
 800f624:	d413      	bmi.n	800f64e <_printf_i+0x23a>
 800f626:	68e0      	ldr	r0, [r4, #12]
 800f628:	9b03      	ldr	r3, [sp, #12]
 800f62a:	4298      	cmp	r0, r3
 800f62c:	bfb8      	it	lt
 800f62e:	4618      	movlt	r0, r3
 800f630:	e7a4      	b.n	800f57c <_printf_i+0x168>
 800f632:	2301      	movs	r3, #1
 800f634:	4632      	mov	r2, r6
 800f636:	4649      	mov	r1, r9
 800f638:	4640      	mov	r0, r8
 800f63a:	47d0      	blx	sl
 800f63c:	3001      	adds	r0, #1
 800f63e:	d09b      	beq.n	800f578 <_printf_i+0x164>
 800f640:	3501      	adds	r5, #1
 800f642:	68e3      	ldr	r3, [r4, #12]
 800f644:	9903      	ldr	r1, [sp, #12]
 800f646:	1a5b      	subs	r3, r3, r1
 800f648:	42ab      	cmp	r3, r5
 800f64a:	dcf2      	bgt.n	800f632 <_printf_i+0x21e>
 800f64c:	e7eb      	b.n	800f626 <_printf_i+0x212>
 800f64e:	2500      	movs	r5, #0
 800f650:	f104 0619 	add.w	r6, r4, #25
 800f654:	e7f5      	b.n	800f642 <_printf_i+0x22e>
 800f656:	bf00      	nop
 800f658:	080123d9 	.word	0x080123d9
 800f65c:	080123ea 	.word	0x080123ea

0800f660 <memmove>:
 800f660:	4288      	cmp	r0, r1
 800f662:	b510      	push	{r4, lr}
 800f664:	eb01 0402 	add.w	r4, r1, r2
 800f668:	d902      	bls.n	800f670 <memmove+0x10>
 800f66a:	4284      	cmp	r4, r0
 800f66c:	4623      	mov	r3, r4
 800f66e:	d807      	bhi.n	800f680 <memmove+0x20>
 800f670:	1e43      	subs	r3, r0, #1
 800f672:	42a1      	cmp	r1, r4
 800f674:	d008      	beq.n	800f688 <memmove+0x28>
 800f676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f67a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f67e:	e7f8      	b.n	800f672 <memmove+0x12>
 800f680:	4402      	add	r2, r0
 800f682:	4601      	mov	r1, r0
 800f684:	428a      	cmp	r2, r1
 800f686:	d100      	bne.n	800f68a <memmove+0x2a>
 800f688:	bd10      	pop	{r4, pc}
 800f68a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f68e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f692:	e7f7      	b.n	800f684 <memmove+0x24>

0800f694 <_realloc_r>:
 800f694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f698:	4680      	mov	r8, r0
 800f69a:	4614      	mov	r4, r2
 800f69c:	460e      	mov	r6, r1
 800f69e:	b921      	cbnz	r1, 800f6aa <_realloc_r+0x16>
 800f6a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a4:	4611      	mov	r1, r2
 800f6a6:	f7ff bbd1 	b.w	800ee4c <_malloc_r>
 800f6aa:	b92a      	cbnz	r2, 800f6b8 <_realloc_r+0x24>
 800f6ac:	f7ff fb62 	bl	800ed74 <_free_r>
 800f6b0:	4625      	mov	r5, r4
 800f6b2:	4628      	mov	r0, r5
 800f6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b8:	f000 f81b 	bl	800f6f2 <_malloc_usable_size_r>
 800f6bc:	4284      	cmp	r4, r0
 800f6be:	4607      	mov	r7, r0
 800f6c0:	d802      	bhi.n	800f6c8 <_realloc_r+0x34>
 800f6c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f6c6:	d812      	bhi.n	800f6ee <_realloc_r+0x5a>
 800f6c8:	4621      	mov	r1, r4
 800f6ca:	4640      	mov	r0, r8
 800f6cc:	f7ff fbbe 	bl	800ee4c <_malloc_r>
 800f6d0:	4605      	mov	r5, r0
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d0ed      	beq.n	800f6b2 <_realloc_r+0x1e>
 800f6d6:	42bc      	cmp	r4, r7
 800f6d8:	4622      	mov	r2, r4
 800f6da:	4631      	mov	r1, r6
 800f6dc:	bf28      	it	cs
 800f6de:	463a      	movcs	r2, r7
 800f6e0:	f7ff fb32 	bl	800ed48 <memcpy>
 800f6e4:	4631      	mov	r1, r6
 800f6e6:	4640      	mov	r0, r8
 800f6e8:	f7ff fb44 	bl	800ed74 <_free_r>
 800f6ec:	e7e1      	b.n	800f6b2 <_realloc_r+0x1e>
 800f6ee:	4635      	mov	r5, r6
 800f6f0:	e7df      	b.n	800f6b2 <_realloc_r+0x1e>

0800f6f2 <_malloc_usable_size_r>:
 800f6f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6f6:	1f18      	subs	r0, r3, #4
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	bfbc      	itt	lt
 800f6fc:	580b      	ldrlt	r3, [r1, r0]
 800f6fe:	18c0      	addlt	r0, r0, r3
 800f700:	4770      	bx	lr
	...

0800f704 <_init>:
 800f704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f706:	bf00      	nop
 800f708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f70a:	bc08      	pop	{r3}
 800f70c:	469e      	mov	lr, r3
 800f70e:	4770      	bx	lr

0800f710 <_fini>:
 800f710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f712:	bf00      	nop
 800f714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f716:	bc08      	pop	{r3}
 800f718:	469e      	mov	lr, r3
 800f71a:	4770      	bx	lr


rcv_band_sw_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007590  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a80  08007730  08007730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b0  0800a1b0  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1b8  0800a1b8  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b8  0800a1b8  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1bc  0800a1bc  0001a1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800a1c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c0c  20000104  0800a2c4  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d10  0800a2c4  00024d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d972  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043a5  00000000  00000000  0003daa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00041e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  000436e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab95  00000000  00000000  00044d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2b1  00000000  00000000  0005f92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9a6  00000000  00000000  0007cbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006afc  00000000  00000000  001185d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007718 	.word	0x08007718

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	08007718 	.word	0x08007718

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <displayBand>:
		currentBand -=1;
	}
}

void displayBand(int band_index)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af04      	add	r7, sp, #16
 800058a:	6078      	str	r0, [r7, #4]
    if(band_index != lastBand + 1 )
 800058c:	2304      	movs	r3, #4
 800058e:	3301      	adds	r3, #1
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	d05e      	beq.n	8000654 <displayBand+0xd0>
    {
    	// Check border
    	freqMin = band[band_index].minFreq;
 8000596:	4931      	ldr	r1, [pc, #196]	; (800065c <displayBand+0xd8>)
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4613      	mov	r3, r2
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	4413      	add	r3, r2
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	440b      	add	r3, r1
 80005a4:	3308      	adds	r3, #8
 80005a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005aa:	4b2d      	ldr	r3, [pc, #180]	; (8000660 <displayBand+0xdc>)
 80005ac:	601a      	str	r2, [r3, #0]
    	freqMax = band[band_index].maxFreq;
 80005ae:	492b      	ldr	r1, [pc, #172]	; (800065c <displayBand+0xd8>)
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4613      	mov	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	440b      	add	r3, r1
 80005bc:	3310      	adds	r3, #16
 80005be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <displayBand+0xe0>)
 80005c4:	601a      	str	r2, [r3, #0]
    	freqName = band[band_index].name;
 80005c6:	4925      	ldr	r1, [pc, #148]	; (800065c <displayBand+0xd8>)
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4613      	mov	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4413      	add	r3, r2
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	440b      	add	r3, r1
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a24      	ldr	r2, [pc, #144]	; (8000668 <displayBand+0xe4>)
 80005d8:	6013      	str	r3, [r2, #0]
        ST7735_FillScreen(ST7735_BLACK);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 fe66 	bl	80012ac <ST7735_FillScreen>
        //snprintf(buff, sizeof(buff), "%02d", freqName);
        ST7735_WriteString(15, 0, freqName, Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <displayBand+0xe4>)
 80005e2:	6819      	ldr	r1, [r3, #0]
 80005e4:	4b21      	ldr	r3, [pc, #132]	; (800066c <displayBand+0xe8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	9202      	str	r2, [sp, #8]
 80005ea:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	9200      	str	r2, [sp, #0]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	460a      	mov	r2, r1
 80005f8:	2100      	movs	r1, #0
 80005fa:	200f      	movs	r0, #15
 80005fc:	f000 fd99 	bl	8001132 <ST7735_WriteString>
        snprintf(buff, sizeof(buff), "%05d", freqMin);
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <displayBand+0xdc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <displayBand+0xec>)
 8000606:	2110      	movs	r1, #16
 8000608:	481a      	ldr	r0, [pc, #104]	; (8000674 <displayBand+0xf0>)
 800060a:	f006 fd03 	bl	8007014 <sniprintf>
        ST7735_WriteString(20, 60, buff, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <displayBand+0xf4>)
 8000610:	2200      	movs	r2, #0
 8000612:	9202      	str	r2, [sp, #8]
 8000614:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000618:	9201      	str	r2, [sp, #4]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a14      	ldr	r2, [pc, #80]	; (8000674 <displayBand+0xf0>)
 8000622:	213c      	movs	r1, #60	; 0x3c
 8000624:	2014      	movs	r0, #20
 8000626:	f000 fd84 	bl	8001132 <ST7735_WriteString>
        snprintf(buff, sizeof(buff), "%05d", freqMax);
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <displayBand+0xe0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a10      	ldr	r2, [pc, #64]	; (8000670 <displayBand+0xec>)
 8000630:	2110      	movs	r1, #16
 8000632:	4810      	ldr	r0, [pc, #64]	; (8000674 <displayBand+0xf0>)
 8000634:	f006 fcee 	bl	8007014 <sniprintf>
        ST7735_WriteString(85, 60, buff, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <displayBand+0xf4>)
 800063a:	2200      	movs	r2, #0
 800063c:	9202      	str	r2, [sp, #8]
 800063e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <displayBand+0xf0>)
 800064c:	213c      	movs	r1, #60	; 0x3c
 800064e:	2055      	movs	r0, #85	; 0x55
 8000650:	f000 fd6f 	bl	8001132 <ST7735_WriteString>
    }

}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000000 	.word	0x20000000
 8000660:	20000120 	.word	0x20000120
 8000664:	20000124 	.word	0x20000124
 8000668:	20000128 	.word	0x20000128
 800066c:	20000088 	.word	0x20000088
 8000670:	08007744 	.word	0x08007744
 8000674:	2000012c 	.word	0x2000012c
 8000678:	20000078 	.word	0x20000078

0800067c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_CRC_Init+0x20>)
 8000682:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <MX_CRC_Init+0x24>)
 8000684:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_CRC_Init+0x20>)
 8000688:	f001 fa66 	bl	8001b58 <HAL_CRC_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000692:	f000 fb53 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000013c 	.word	0x2000013c
 80006a0:	40023000 	.word	0x40023000

080006a4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <HAL_CRC_MspInit+0x3c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d10d      	bne.n	80006d2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <HAL_CRC_MspInit+0x40>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a09      	ldr	r2, [pc, #36]	; (80006e4 <HAL_CRC_MspInit+0x40>)
 80006c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <HAL_CRC_MspInit+0x40>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023000 	.word	0x40023000
 80006e4:	40023800 	.word	0x40023800

080006e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of EncoderQueue */
  EncoderQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &EncoderQueue_attributes);
 80006ec:	4a14      	ldr	r2, [pc, #80]	; (8000740 <MX_FREERTOS_Init+0x58>)
 80006ee:	2102      	movs	r1, #2
 80006f0:	2010      	movs	r0, #16
 80006f2:	f003 fc82 	bl	8003ffa <osMessageQueueNew>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_FREERTOS_Init+0x5c>)
 80006fa:	6013      	str	r3, [r2, #0]

  /* creation of ButtonQueue */
  ButtonQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ButtonQueue_attributes);
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_FREERTOS_Init+0x60>)
 80006fe:	2102      	movs	r1, #2
 8000700:	2010      	movs	r0, #16
 8000702:	f003 fc7a 	bl	8003ffa <osMessageQueueNew>
 8000706:	4603      	mov	r3, r0
 8000708:	4a10      	ldr	r2, [pc, #64]	; (800074c <MX_FREERTOS_Init+0x64>)
 800070a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800070c:	4a10      	ldr	r2, [pc, #64]	; (8000750 <MX_FREERTOS_Init+0x68>)
 800070e:	2100      	movs	r1, #0
 8000710:	4810      	ldr	r0, [pc, #64]	; (8000754 <MX_FREERTOS_Init+0x6c>)
 8000712:	f003 fbc5 	bl	8003ea0 <osThreadNew>
 8000716:	4603      	mov	r3, r0
 8000718:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <MX_FREERTOS_Init+0x70>)
 800071a:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 800071c:	4a0f      	ldr	r2, [pc, #60]	; (800075c <MX_FREERTOS_Init+0x74>)
 800071e:	2100      	movs	r1, #0
 8000720:	480f      	ldr	r0, [pc, #60]	; (8000760 <MX_FREERTOS_Init+0x78>)
 8000722:	f003 fbbd 	bl	8003ea0 <osThreadNew>
 8000726:	4603      	mov	r3, r0
 8000728:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <MX_FREERTOS_Init+0x7c>)
 800072a:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <MX_FREERTOS_Init+0x80>)
 800072e:	2100      	movs	r1, #0
 8000730:	480e      	ldr	r0, [pc, #56]	; (800076c <MX_FREERTOS_Init+0x84>)
 8000732:	f003 fbb5 	bl	8003ea0 <osThreadNew>
 8000736:	4603      	mov	r3, r0
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <MX_FREERTOS_Init+0x88>)
 800073a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	0800a05c 	.word	0x0800a05c
 8000744:	20000150 	.word	0x20000150
 8000748:	0800a074 	.word	0x0800a074
 800074c:	20000154 	.word	0x20000154
 8000750:	08009ff0 	.word	0x08009ff0
 8000754:	08000775 	.word	0x08000775
 8000758:	20000144 	.word	0x20000144
 800075c:	0800a014 	.word	0x0800a014
 8000760:	08000785 	.word	0x08000785
 8000764:	20000148 	.word	0x20000148
 8000768:	0800a038 	.word	0x0800a038
 800076c:	080008d5 	.word	0x080008d5
 8000770:	2000014c 	.word	0x2000014c

08000774 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800077c:	2001      	movs	r0, #1
 800077e:	f003 fc21 	bl	8003fc4 <osDelay>
 8000782:	e7fb      	b.n	800077c <StartDefaultTask+0x8>

08000784 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b092      	sub	sp, #72	; 0x48
 8000788:	af04      	add	r7, sp, #16
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	/* Infinite loop */
	uint16_t EncoderReceiveResult = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t ButtonReceiveResult = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	863b      	strh	r3, [r7, #48]	; 0x30
	int32_t counter = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t button = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t last_counter = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t max_index = 5;
 80007a0:	2305      	movs	r3, #5
 80007a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	char buff[16];
	char bbuff[8];
	for (;;) {
		//Encoder Rotate
		EncoderReceiveResult = osMessageQueueGet(EncoderQueueHandle, &counter, 0, 0);
 80007a4:	4b45      	ldr	r3, [pc, #276]	; (80008bc <StartDisplayTask+0x138>)
 80007a6:	6818      	ldr	r0, [r3, #0]
 80007a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80007ac:	2300      	movs	r3, #0
 80007ae:	2200      	movs	r2, #0
 80007b0:	f003 fcf6 	bl	80041a0 <osMessageQueueGet>
 80007b4:	4603      	mov	r3, r0
 80007b6:	867b      	strh	r3, [r7, #50]	; 0x32
		snprintf(buff, sizeof(buff), "%02d", counter);
 80007b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ba:	f107 0014 	add.w	r0, r7, #20
 80007be:	4a40      	ldr	r2, [pc, #256]	; (80008c0 <StartDisplayTask+0x13c>)
 80007c0:	2110      	movs	r1, #16
 80007c2:	f006 fc27 	bl	8007014 <sniprintf>
		ST7735_WriteString(0, 60, buff, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80007c6:	4b3f      	ldr	r3, [pc, #252]	; (80008c4 <StartDisplayTask+0x140>)
 80007c8:	f107 0114 	add.w	r1, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	9202      	str	r2, [sp, #8]
 80007d0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80007d4:	9201      	str	r2, [sp, #4]
 80007d6:	685a      	ldr	r2, [r3, #4]
 80007d8:	9200      	str	r2, [sp, #0]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	460a      	mov	r2, r1
 80007de:	213c      	movs	r1, #60	; 0x3c
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fca6 	bl	8001132 <ST7735_WriteString>
		if(counter == 1) {
 80007e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d113      	bne.n	8000814 <StartDisplayTask+0x90>
			if(last_counter != max_index -1)
 80007ec:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80007f0:	3b01      	subs	r3, #1
 80007f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d005      	beq.n	8000804 <StartDisplayTask+0x80>
			{
				last_counter += 1;
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	3301      	adds	r3, #1
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
				counter = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
 8000802:	e003      	b.n	800080c <StartDisplayTask+0x88>
			} else
			{
				last_counter = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
				counter = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			displayBand(last_counter);
 800080c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800080e:	f7ff feb9 	bl	8000584 <displayBand>
 8000812:	e014      	b.n	800083e <StartDisplayTask+0xba>
		}else if (counter == 2){
 8000814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000816:	2b02      	cmp	r3, #2
 8000818:	d111      	bne.n	800083e <StartDisplayTask+0xba>
			if(last_counter != 0)
 800081a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800081c:	2b00      	cmp	r3, #0
 800081e:	d005      	beq.n	800082c <StartDisplayTask+0xa8>
			{
				last_counter -= 1;
 8000820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000822:	3b01      	subs	r3, #1
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
				counter = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
 800082a:	e005      	b.n	8000838 <StartDisplayTask+0xb4>
			} else
			{
				last_counter = max_index -1;
 800082c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000830:	3b01      	subs	r3, #1
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
				counter = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			displayBand(last_counter);
 8000838:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800083a:	f7ff fea3 	bl	8000584 <displayBand>
		{

		}

		//Button click
		ButtonReceiveResult = osMessageQueueGet(ButtonQueueHandle, &button, 0, 0);
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <StartDisplayTask+0x144>)
 8000840:	6818      	ldr	r0, [r3, #0]
 8000842:	f107 0126 	add.w	r1, r7, #38	; 0x26
 8000846:	2300      	movs	r3, #0
 8000848:	2200      	movs	r2, #0
 800084a:	f003 fca9 	bl	80041a0 <osMessageQueueGet>
 800084e:	4603      	mov	r3, r0
 8000850:	863b      	strh	r3, [r7, #48]	; 0x30
		if (button)
 8000852:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000856:	2b00      	cmp	r3, #0
 8000858:	d02b      	beq.n	80008b2 <StartDisplayTask+0x12e>
		{
			snprintf(bbuff, sizeof(bbuff), "%01d", button);
 800085a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800085e:	f107 000c 	add.w	r0, r7, #12
 8000862:	4a1a      	ldr	r2, [pc, #104]	; (80008cc <StartDisplayTask+0x148>)
 8000864:	2108      	movs	r1, #8
 8000866:	f006 fbd5 	bl	8007014 <sniprintf>
			ST7735_WriteString(80, 60, bbuff, Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <StartDisplayTask+0x140>)
 800086c:	f107 010c 	add.w	r1, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	9202      	str	r2, [sp, #8]
 8000874:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000878:	9201      	str	r2, [sp, #4]
 800087a:	685a      	ldr	r2, [r3, #4]
 800087c:	9200      	str	r2, [sp, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	460a      	mov	r2, r1
 8000882:	213c      	movs	r1, #60	; 0x3c
 8000884:	2050      	movs	r0, #80	; 0x50
 8000886:	f000 fc54 	bl	8001132 <ST7735_WriteString>
			button = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	84fb      	strh	r3, [r7, #38]	; 0x26
			osDelay(500);
 800088e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000892:	f003 fb97 	bl	8003fc4 <osDelay>
			ST7735_WriteString(80, 60, "     ", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <StartDisplayTask+0x140>)
 8000898:	2200      	movs	r2, #0
 800089a:	9202      	str	r2, [sp, #8]
 800089c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a0:	9201      	str	r2, [sp, #4]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	9200      	str	r2, [sp, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <StartDisplayTask+0x14c>)
 80008aa:	213c      	movs	r1, #60	; 0x3c
 80008ac:	2050      	movs	r0, #80	; 0x50
 80008ae:	f000 fc40 	bl	8001132 <ST7735_WriteString>
		}

		osDelay(100);
 80008b2:	2064      	movs	r0, #100	; 0x64
 80008b4:	f003 fb86 	bl	8003fc4 <osDelay>
	for (;;) {
 80008b8:	e774      	b.n	80007a4 <StartDisplayTask+0x20>
 80008ba:	bf00      	nop
 80008bc:	20000150 	.word	0x20000150
 80008c0:	0800778c 	.word	0x0800778c
 80008c4:	20000078 	.word	0x20000078
 80008c8:	20000154 	.word	0x20000154
 80008cc:	08007794 	.word	0x08007794
 80008d0:	0800779c 	.word	0x0800779c

080008d4 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b090      	sub	sp, #64	; 0x40
 80008d8:	af04      	add	r7, sp, #16
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	/* Infinite loop */
	char buff[16];
	int32_t prevCounter = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t counter = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
	uint8_t buttonNumber = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t buttonSend = 1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 80008ee:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <StartEncoderTask+0xdc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
		currCounter = 32767 - ((currCounter - 1) & 0xFFFF) / 2;
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	3b01      	subs	r3, #1
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	0fda      	lsrs	r2, r3, #31
 80008fe:	4413      	add	r3, r2
 8000900:	105b      	asrs	r3, r3, #1
 8000902:	425b      	negs	r3, r3
 8000904:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000908:	337f      	adds	r3, #127	; 0x7f
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
		if (currCounter != prevCounter) {
 800090c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000910:	429a      	cmp	r2, r3
 8000912:	d035      	beq.n	8000980 <StartEncoderTask+0xac>
			if (currCounter > prevCounter) {
 8000914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000918:	429a      	cmp	r2, r3
 800091a:	dd0a      	ble.n	8000932 <StartEncoderTask+0x5e>
				counter = 1;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <StartEncoderTask+0xe0>)
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	f107 0110 	add.w	r1, r7, #16
 8000928:	2300      	movs	r3, #0
 800092a:	2200      	movs	r2, #0
 800092c:	f003 fbd8 	bl	80040e0 <osMessageQueuePut>
 8000930:	e00d      	b.n	800094e <StartEncoderTask+0x7a>
			} else if (currCounter < prevCounter){
 8000932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000936:	429a      	cmp	r2, r3
 8000938:	da09      	bge.n	800094e <StartEncoderTask+0x7a>
				counter = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	613b      	str	r3, [r7, #16]
				osMessageQueuePut(EncoderQueueHandle, &counter, 0, 0);
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <StartEncoderTask+0xe0>)
 8000940:	6818      	ldr	r0, [r3, #0]
 8000942:	f107 0110 	add.w	r1, r7, #16
 8000946:	2300      	movs	r3, #0
 8000948:	2200      	movs	r2, #0
 800094a:	f003 fbc9 	bl	80040e0 <osMessageQueuePut>
			}
			else
			{

			}
			snprintf(buff, sizeof(buff), "%06d", currCounter);
 800094e:	f107 0014 	add.w	r0, r7, #20
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <StartEncoderTask+0xe4>)
 8000956:	2110      	movs	r1, #16
 8000958:	f006 fb5c 	bl	8007014 <sniprintf>
			ST7735_WriteString(90, 46, buff, Font_7x10, ST7735_GREEN,
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <StartEncoderTask+0xe8>)
 800095e:	f107 0114 	add.w	r1, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	9202      	str	r2, [sp, #8]
 8000966:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800096a:	9201      	str	r2, [sp, #4]
 800096c:	685a      	ldr	r2, [r3, #4]
 800096e:	9200      	str	r2, [sp, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	460a      	mov	r2, r1
 8000974:	212e      	movs	r1, #46	; 0x2e
 8000976:	205a      	movs	r0, #90	; 0x5a
 8000978:	f000 fbdb 	bl	8001132 <ST7735_WriteString>
					ST7735_BLACK);
			prevCounter = currCounter;
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		// Button
		if(buttonPressed[buttonNumber]) {
 8000980:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <StartEncoderTask+0xec>)
 8000986:	5cd3      	ldrb	r3, [r2, r3]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00c      	beq.n	80009a8 <StartEncoderTask+0xd4>
			buttonPressed[buttonNumber] = 0;
 800098e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <StartEncoderTask+0xec>)
 8000994:	2100      	movs	r1, #0
 8000996:	54d1      	strb	r1, [r2, r3]
			//char buff[16];
			//snprintf(buff, sizeof(buff), "BUTTON %d", buttonNumber);
			//ST7735_WriteString(80, 60, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
			osMessageQueuePut(ButtonQueueHandle, &buttonSend, 0, 0);
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <StartEncoderTask+0xf0>)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	f107 010f 	add.w	r1, r7, #15
 80009a0:	2300      	movs	r3, #0
 80009a2:	2200      	movs	r2, #0
 80009a4:	f003 fb9c 	bl	80040e0 <osMessageQueuePut>
		}
		osDelay(100);
 80009a8:	2064      	movs	r0, #100	; 0x64
 80009aa:	f003 fb0b 	bl	8003fc4 <osDelay>
	for (;;) {
 80009ae:	e79e      	b.n	80008ee <StartEncoderTask+0x1a>
 80009b0:	200002a4 	.word	0x200002a4
 80009b4:	20000150 	.word	0x20000150
 80009b8:	080077a4 	.word	0x080077a4
 80009bc:	20000078 	.word	0x20000078
 80009c0:	2000024c 	.word	0x2000024c
 80009c4:	20000154 	.word	0x20000154

080009c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a30      	ldr	r2, [pc, #192]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a29      	ldr	r2, [pc, #164]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a22      	ldr	r2, [pc, #136]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_GPIO_Init+0xe0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	211c      	movs	r1, #28
 8000a52:	4816      	ldr	r0, [pc, #88]	; (8000aac <MX_GPIO_Init+0xe4>)
 8000a54:	f001 fa20 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480f      	ldr	r0, [pc, #60]	; (8000aac <MX_GPIO_Init+0xe4>)
 8000a6e:	f001 f88f 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8000a72:	231c      	movs	r3, #28
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4808      	ldr	r0, [pc, #32]	; (8000aac <MX_GPIO_Init+0xe4>)
 8000a8a:	f001 f881 	bl	8001b90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2006      	movs	r0, #6
 8000a94:	f001 f836 	bl	8001b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a98:	2006      	movs	r0, #6
 8000a9a:	f001 f84f 	bl	8001b3c <HAL_NVIC_EnableIRQ>

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <MX_I2C1_Init+0x54>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x58>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000aee:	f001 fa05 	bl	8001efc <HAL_I2C_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af8:	f000 f920 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000158 	.word	0x20000158
 8000b04:	40005400 	.word	0x40005400
 8000b08:	000186a0 	.word	0x000186a0

08000b0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_I2C_MspInit+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b4a:	23c0      	movs	r3, #192	; 0xc0
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4e:	2312      	movs	r3, #18
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <HAL_I2C_MspInit+0x8c>)
 8000b66:	f001 f813 	bl	8001b90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_I2C_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40005400 	.word	0x40005400
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020400 	.word	0x40020400

08000b9c <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af04      	add	r7, sp, #16
    ST7735_Init();
 8000ba2:	f000 fa35 	bl	8001010 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 fb80 	bl	80012ac <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <Display_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	9202      	str	r2, [sp, #8]
 8000bb2:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 8000bb6:	9201      	str	r2, [sp, #4]
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	9200      	str	r2, [sp, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <Display_Init+0x5c>)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	200f      	movs	r0, #15
 8000bc4:	f000 fab5 	bl	8001132 <ST7735_WriteString>
    ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <Display_Init+0x60>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	9202      	str	r2, [sp, #8]
 8000bce:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8000bd2:	9201      	str	r2, [sp, #4]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	9200      	str	r2, [sp, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <Display_Init+0x64>)
 8000bdc:	2119      	movs	r1, #25
 8000bde:	2022      	movs	r0, #34	; 0x22
 8000be0:	f000 faa7 	bl	8001132 <ST7735_WriteString>
    HAL_Delay(2000);
 8000be4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000be8:	f000 feb0 	bl	800194c <HAL_Delay>
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000088 	.word	0x20000088
 8000bf8:	080077ac 	.word	0x080077ac
 8000bfc:	20000080 	.word	0x20000080
 8000c00:	080077b8 	.word	0x080077b8

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c08:	f000 fe5e 	bl	80018c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0c:	f000 f81c 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c10:	f7ff feda 	bl	80009c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c14:	f7ff ff4c 	bl	8000ab0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c18:	f000 f896 	bl	8000d48 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000c1c:	f000 fd08 	bl	8001630 <MX_TIM3_Init>
  MX_CRC_Init();
 8000c20:	f7ff fd2c 	bl	800067c <MX_CRC_Init>
  MX_TIM2_Init();
 8000c24:	f000 fcac 	bl	8001580 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000c28:	213c      	movs	r1, #60	; 0x3c
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <main+0x40>)
 8000c2c:	f002 fb75 	bl	800331a <HAL_TIM_Encoder_Start>
  Display_Init();
 8000c30:	f7ff ffb4 	bl	8000b9c <Display_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c34:	f003 f8ea 	bl	8003e0c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c38:	f7ff fd56 	bl	80006e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c3c:	f003 f90a 	bl	8003e54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <main+0x3c>
 8000c42:	bf00      	nop
 8000c44:	200002a4 	.word	0x200002a4

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	; 0x50
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0320 	add.w	r3, r7, #32
 8000c52:	2230      	movs	r2, #48	; 0x30
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f006 f87a 	bl	8006d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <SystemClock_Config+0xc8>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	4a26      	ldr	r2, [pc, #152]	; (8000d10 <SystemClock_Config+0xc8>)
 8000c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <SystemClock_Config+0xc8>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <SystemClock_Config+0xcc>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a20      	ldr	r2, [pc, #128]	; (8000d14 <SystemClock_Config+0xcc>)
 8000c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <SystemClock_Config+0xcc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000cb8:	2319      	movs	r3, #25
 8000cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000cbc:	2390      	movs	r3, #144	; 0x90
 8000cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 fa59 	bl	8002184 <HAL_RCC_OscConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cd8:	f000 f830 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cdc:	230f      	movs	r3, #15
 8000cde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f001 fcbb 	bl	8002674 <HAL_RCC_ClockConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d04:	f000 f81a 	bl	8000d3c <Error_Handler>
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3750      	adds	r7, #80	; 0x50
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2a:	f000 fdef 	bl	800190c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40010000 	.word	0x40010000

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d4e:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <MX_SPI1_Init+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d94:	220a      	movs	r2, #10
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d9a:	f001 fe7d 	bl	8002a98 <HAL_SPI_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000da4:	f7ff ffca 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200001ac 	.word	0x200001ac
 8000db0:	40013000 	.word	0x40013000

08000db4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <HAL_SPI_MspInit+0x84>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d12b      	bne.n	8000e2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000de0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_SPI_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e0e:	23a0      	movs	r3, #160	; 0xa0
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_SPI_MspInit+0x8c>)
 8000e2a:	f000 feb1 	bl	8001b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40013000 	.word	0x40013000
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000

08000e44 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <ST7735_Select+0x14>)
 8000e4e:	f001 f823 	bl	8001e98 <HAL_GPIO_WritePin>
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40020000 	.word	0x40020000

08000e5c <ST7735_Unselect>:

void ST7735_Unselect() {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <ST7735_Unselect+0x14>)
 8000e66:	f001 f817 	bl	8001e98 <HAL_GPIO_WritePin>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40020000 	.word	0x40020000

08000e74 <ST7735_Reset>:

static void ST7735_Reset() {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2108      	movs	r1, #8
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <ST7735_Reset+0x24>)
 8000e7e:	f001 f80b 	bl	8001e98 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000e82:	2005      	movs	r0, #5
 8000e84:	f000 fd62 	bl	800194c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2108      	movs	r1, #8
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <ST7735_Reset+0x24>)
 8000e8e:	f001 f803 	bl	8001e98 <HAL_GPIO_WritePin>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40020000 	.word	0x40020000

08000e9c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <ST7735_WriteCommand+0x2c>)
 8000eac:	f000 fff4 	bl	8001e98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000eb0:	1df9      	adds	r1, r7, #7
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <ST7735_WriteCommand+0x30>)
 8000eba:	f001 fe76 	bl	8002baa <HAL_SPI_Transmit>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	200001ac 	.word	0x200001ac

08000ed0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2104      	movs	r1, #4
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <ST7735_WriteData+0x2c>)
 8000ee0:	f000 ffda 	bl	8001e98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <ST7735_WriteData+0x30>)
 8000ef0:	f001 fe5b 	bl	8002baa <HAL_SPI_Transmit>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40020000 	.word	0x40020000
 8000f00:	200001ac 	.word	0x200001ac

08000f04 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000f16:	e034      	b.n	8000f82 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000f22:	7afb      	ldrb	r3, [r7, #11]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ffb9 	bl	8000e9c <ST7735_WriteCommand>

        numArgs = *addr++;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000f34:	7abb      	ldrb	r3, [r7, #10]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000f3e:	7abb      	ldrb	r3, [r7, #10]
 8000f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f44:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000f46:	7abb      	ldrb	r3, [r7, #10]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d008      	beq.n	8000f5e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000f4c:	7abb      	ldrb	r3, [r7, #10]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ffbd 	bl	8000ed0 <ST7735_WriteData>
            addr += numArgs;
 8000f56:	7abb      	ldrb	r3, [r7, #10]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000f5e:	89bb      	ldrh	r3, [r7, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00e      	beq.n	8000f82 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000f6e:	89bb      	ldrh	r3, [r7, #12]
 8000f70:	2bff      	cmp	r3, #255	; 0xff
 8000f72:	d102      	bne.n	8000f7a <ST7735_ExecuteCommandList+0x76>
 8000f74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f78:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000f7a:	89bb      	ldrh	r3, [r7, #12]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fce5 	bl	800194c <HAL_Delay>
    while(numCommands--) {
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	1e5a      	subs	r2, r3, #1
 8000f86:	73fa      	strb	r2, [r7, #15]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1c5      	bne.n	8000f18 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000f96:	b590      	push	{r4, r7, lr}
 8000f98:	b085      	sub	sp, #20
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4623      	mov	r3, r4
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4603      	mov	r3, r0
 8000faa:	71bb      	strb	r3, [r7, #6]
 8000fac:	460b      	mov	r3, r1
 8000fae:	717b      	strb	r3, [r7, #5]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000fb4:	202a      	movs	r0, #42	; 0x2a
 8000fb6:	f7ff ff71 	bl	8000e9c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000fba:	2300      	movs	r3, #0
 8000fbc:	733b      	strb	r3, [r7, #12]
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	737b      	strb	r3, [r7, #13]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73bb      	strb	r3, [r7, #14]
 8000fca:	797b      	ldrb	r3, [r7, #5]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff79 	bl	8000ed0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000fde:	202b      	movs	r0, #43	; 0x2b
 8000fe0:	f7ff ff5c 	bl	8000e9c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	331a      	adds	r3, #26
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000fec:	793b      	ldrb	r3, [r7, #4]
 8000fee:	331a      	adds	r3, #26
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff68 	bl	8000ed0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001000:	202c      	movs	r0, #44	; 0x2c
 8001002:	f7ff ff4b 	bl	8000e9c <ST7735_WriteCommand>
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	bd90      	pop	{r4, r7, pc}
	...

08001010 <ST7735_Init>:

void ST7735_Init() {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001014:	f7ff ff16 	bl	8000e44 <ST7735_Select>
    ST7735_Reset();
 8001018:	f7ff ff2c 	bl	8000e74 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800101c:	4806      	ldr	r0, [pc, #24]	; (8001038 <ST7735_Init+0x28>)
 800101e:	f7ff ff71 	bl	8000f04 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <ST7735_Init+0x2c>)
 8001024:	f7ff ff6e 	bl	8000f04 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <ST7735_Init+0x30>)
 800102a:	f7ff ff6b 	bl	8000f04 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800102e:	f7ff ff15 	bl	8000e5c <ST7735_Unselect>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	0800a08c 	.word	0x0800a08c
 800103c:	0800a0c8 	.word	0x0800a0c8
 8001040:	0800a0d8 	.word	0x0800a0d8

08001044 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001044:	b082      	sub	sp, #8
 8001046:	b590      	push	{r4, r7, lr}
 8001048:	b089      	sub	sp, #36	; 0x24
 800104a:	af00      	add	r7, sp, #0
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
 8001052:	460b      	mov	r3, r1
 8001054:	80bb      	strh	r3, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	b2d8      	uxtb	r0, r3
 800105e:	88bb      	ldrh	r3, [r7, #4]
 8001060:	b2d9      	uxtb	r1, r3
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800106a:	4413      	add	r3, r2
 800106c:	b2db      	uxtb	r3, r3
 800106e:	3b01      	subs	r3, #1
 8001070:	b2dc      	uxtb	r4, r3
 8001072:	88bb      	ldrh	r3, [r7, #4]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800107a:	4413      	add	r3, r2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	3b01      	subs	r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4622      	mov	r2, r4
 8001084:	f7ff ff87 	bl	8000f96 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	e043      	b.n	8001116 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800108e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	3b20      	subs	r3, #32
 8001094:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001098:	fb01 f303 	mul.w	r3, r1, r3
 800109c:	4619      	mov	r1, r3
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	440b      	add	r3, r1
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	e029      	b.n	8001104 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00e      	beq.n	80010de <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80010c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010c2:	0a1b      	lsrs	r3, r3, #8
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	743b      	strb	r3, [r7, #16]
 80010ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	2102      	movs	r1, #2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fefa 	bl	8000ed0 <ST7735_WriteData>
 80010dc:	e00f      	b.n	80010fe <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80010de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	733b      	strb	r3, [r7, #12]
 80010ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2102      	movs	r1, #2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fee9 	bl	8000ed0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	3301      	adds	r3, #1
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001108:	461a      	mov	r2, r3
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4293      	cmp	r3, r2
 800110e:	d3cf      	bcc.n	80010b0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	3301      	adds	r3, #1
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800111a:	461a      	mov	r2, r3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	4293      	cmp	r3, r2
 8001120:	d3b5      	bcc.n	800108e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	3724      	adds	r7, #36	; 0x24
 8001128:	46bd      	mov	sp, r7
 800112a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800112e:	b002      	add	sp, #8
 8001130:	4770      	bx	lr

08001132 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001132:	b082      	sub	sp, #8
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af04      	add	r7, sp, #16
 800113a:	603a      	str	r2, [r7, #0]
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
 8001142:	460b      	mov	r3, r1
 8001144:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001146:	f7ff fe7d 	bl	8000e44 <ST7735_Select>

    while(*str) {
 800114a:	e02d      	b.n	80011a8 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	7d3a      	ldrb	r2, [r7, #20]
 8001150:	4413      	add	r3, r2
 8001152:	2b9f      	cmp	r3, #159	; 0x9f
 8001154:	dd13      	ble.n	800117e <ST7735_WriteString+0x4c>
            x = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800115a:	7d7b      	ldrb	r3, [r7, #21]
 800115c:	b29a      	uxth	r2, r3
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001164:	88bb      	ldrh	r3, [r7, #4]
 8001166:	7d7a      	ldrb	r2, [r7, #21]
 8001168:	4413      	add	r3, r2
 800116a:	2b4f      	cmp	r3, #79	; 0x4f
 800116c:	dc21      	bgt.n	80011b2 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b20      	cmp	r3, #32
 8001174:	d103      	bne.n	800117e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	603b      	str	r3, [r7, #0]
                continue;
 800117c:	e014      	b.n	80011a8 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	88b9      	ldrh	r1, [r7, #4]
 8001184:	88f8      	ldrh	r0, [r7, #6]
 8001186:	8c3b      	ldrh	r3, [r7, #32]
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	8bbb      	ldrh	r3, [r7, #28]
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f7ff ff56 	bl	8001044 <ST7735_WriteChar>
        x += font.width;
 8001198:	7d3b      	ldrb	r3, [r7, #20]
 800119a:	b29a      	uxth	r2, r3
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4413      	add	r3, r2
 80011a0:	80fb      	strh	r3, [r7, #6]
        str++;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	603b      	str	r3, [r7, #0]
    while(*str) {
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1cd      	bne.n	800114c <ST7735_WriteString+0x1a>
 80011b0:	e000      	b.n	80011b4 <ST7735_WriteString+0x82>
                break;
 80011b2:	bf00      	nop
    }

    ST7735_Unselect();
 80011b4:	f7ff fe52 	bl	8000e5c <ST7735_Unselect>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011c2:	b002      	add	sp, #8
 80011c4:	4770      	bx	lr
	...

080011c8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4604      	mov	r4, r0
 80011d0:	4608      	mov	r0, r1
 80011d2:	4611      	mov	r1, r2
 80011d4:	461a      	mov	r2, r3
 80011d6:	4623      	mov	r3, r4
 80011d8:	80fb      	strh	r3, [r7, #6]
 80011da:	4603      	mov	r3, r0
 80011dc:	80bb      	strh	r3, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	807b      	strh	r3, [r7, #2]
 80011e2:	4613      	mov	r3, r2
 80011e4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	2b9f      	cmp	r3, #159	; 0x9f
 80011ea:	d857      	bhi.n	800129c <ST7735_FillRectangle+0xd4>
 80011ec:	88bb      	ldrh	r3, [r7, #4]
 80011ee:	2b4f      	cmp	r3, #79	; 0x4f
 80011f0:	d854      	bhi.n	800129c <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80011f2:	88fa      	ldrh	r2, [r7, #6]
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	4413      	add	r3, r2
 80011f8:	2ba0      	cmp	r3, #160	; 0xa0
 80011fa:	dd03      	ble.n	8001204 <ST7735_FillRectangle+0x3c>
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001202:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001204:	88ba      	ldrh	r2, [r7, #4]
 8001206:	883b      	ldrh	r3, [r7, #0]
 8001208:	4413      	add	r3, r2
 800120a:	2b50      	cmp	r3, #80	; 0x50
 800120c:	dd03      	ble.n	8001216 <ST7735_FillRectangle+0x4e>
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8001214:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001216:	f7ff fe15 	bl	8000e44 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	b2d8      	uxtb	r0, r3
 800121e:	88bb      	ldrh	r3, [r7, #4]
 8001220:	b2d9      	uxtb	r1, r3
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4413      	add	r3, r2
 800122c:	b2db      	uxtb	r3, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	b2dc      	uxtb	r4, r3
 8001232:	88bb      	ldrh	r3, [r7, #4]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	883b      	ldrh	r3, [r7, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4413      	add	r3, r2
 800123c:	b2db      	uxtb	r3, r3
 800123e:	3b01      	subs	r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4622      	mov	r2, r4
 8001244:	f7ff fea7 	bl	8000f96 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001248:	8c3b      	ldrh	r3, [r7, #32]
 800124a:	0a1b      	lsrs	r3, r3, #8
 800124c:	b29b      	uxth	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	733b      	strb	r3, [r7, #12]
 8001252:	8c3b      	ldrh	r3, [r7, #32]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2104      	movs	r1, #4
 800125c:	4811      	ldr	r0, [pc, #68]	; (80012a4 <ST7735_FillRectangle+0xdc>)
 800125e:	f000 fe1b 	bl	8001e98 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001262:	883b      	ldrh	r3, [r7, #0]
 8001264:	80bb      	strh	r3, [r7, #4]
 8001266:	e013      	b.n	8001290 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	e00a      	b.n	8001284 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800126e:	f107 010c 	add.w	r1, r7, #12
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	2202      	movs	r2, #2
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <ST7735_FillRectangle+0xe0>)
 800127a:	f001 fc96 	bl	8002baa <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	3b01      	subs	r3, #1
 8001282:	80fb      	strh	r3, [r7, #6]
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f1      	bne.n	800126e <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	3b01      	subs	r3, #1
 800128e:	80bb      	strh	r3, [r7, #4]
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1e8      	bne.n	8001268 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001296:	f7ff fde1 	bl	8000e5c <ST7735_Unselect>
 800129a:	e000      	b.n	800129e <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800129c:	bf00      	nop
}
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	40020000 	.word	0x40020000
 80012a8:	200001ac 	.word	0x200001ac

080012ac <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2350      	movs	r3, #80	; 0x50
 80012bc:	22a0      	movs	r2, #160	; 0xa0
 80012be:	2100      	movs	r1, #0
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff ff81 	bl	80011c8 <ST7735_FillRectangle>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_MspInit+0x74>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a19      	ldr	r2, [pc, #100]	; (8001344 <HAL_MspInit+0x74>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_MspInit+0x74>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_MspInit+0x74>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <HAL_MspInit+0x74>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_MspInit+0x74>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	210f      	movs	r1, #15
 8001312:	f06f 0001 	mvn.w	r0, #1
 8001316:	f000 fbf5 	bl	8001b04 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2105      	movs	r1, #5
 800131e:	2005      	movs	r0, #5
 8001320:	f000 fbf0 	bl	8001b04 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001324:	2005      	movs	r0, #5
 8001326:	f000 fc09 	bl	8001b3c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2105      	movs	r1, #5
 800132e:	2005      	movs	r0, #5
 8001330:	f000 fbe8 	bl	8001b04 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001334:	2005      	movs	r0, #5
 8001336:	f000 fc01 	bl	8001b3c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	2019      	movs	r0, #25
 800135e:	f000 fbd1 	bl	8001b04 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001362:	2019      	movs	r0, #25
 8001364:	f000 fbea 	bl	8001b3c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <HAL_InitTick+0xa0>)
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_InitTick+0xa0>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6453      	str	r3, [r2, #68]	; 0x44
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_InitTick+0xa0>)
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001384:	f107 0210 	add.w	r2, r7, #16
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fb50 	bl	8002a34 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001394:	f001 fb3a 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8001398:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139c:	4a13      	ldr	r2, [pc, #76]	; (80013ec <HAL_InitTick+0xa4>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	0c9b      	lsrs	r3, r3, #18
 80013a4:	3b01      	subs	r3, #1
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_InitTick+0xa8>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <HAL_InitTick+0xac>)
 80013ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_InitTick+0xa8>)
 80013b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_InitTick+0xa8>)
 80013b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_InitTick+0xa8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_InitTick+0xa8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <HAL_InitTick+0xa8>)
 80013ca:	f001 fdf5 	bl	8002fb8 <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d104      	bne.n	80013de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <HAL_InitTick+0xa8>)
 80013d6:	f001 fe49 	bl	800306c <HAL_TIM_Base_Start_IT>
 80013da:	4603      	mov	r3, r0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3730      	adds	r7, #48	; 0x30
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	431bde83 	.word	0x431bde83
 80013f0:	20000204 	.word	0x20000204
 80013f4:	40010000 	.word	0x40010000

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001436:	2001      	movs	r0, #1
 8001438:	f000 fd48 	bl	8001ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001446:	f001 fff6 	bl	8003436 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000204 	.word	0x20000204

08001454 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <TIM2_IRQHandler+0x10>)
 800145a:	f001 ffec 	bl	8003436 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000025c 	.word	0x2000025c

08001468 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800146c:	4808      	ldr	r0, [pc, #32]	; (8001490 <TIM3_IRQHandler+0x28>)
 800146e:	f001 ffe2 	bl	8003436 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <TIM3_IRQHandler+0x2c>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <TIM3_IRQHandler+0x2c>)
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <TIM3_IRQHandler+0x2c>)
 8001484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001488:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200002a4 	.word	0x200002a4
 8001494:	40000400 	.word	0x40000400

08001498 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 80014a2:	23ff      	movs	r3, #255	; 0xff
 80014a4:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 80014b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db11      	blt.n	80014dc <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 80014b8:	f000 fa3c 	bl	8001934 <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x50>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b63      	cmp	r3, #99	; 0x63
 80014c8:	d90a      	bls.n	80014e0 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 80014ca:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x50>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 80014d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d4:	4a05      	ldr	r2, [pc, #20]	; (80014ec <HAL_GPIO_EXTI_Callback+0x54>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	54d1      	strb	r1, [r2, r3]
 80014da:	e002      	b.n	80014e2 <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 80014dc:	bf00      	nop
 80014de:	e000      	b.n	80014e2 <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 80014e0:	bf00      	nop
}
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000254 	.word	0x20000254
 80014ec:	2000024c 	.word	0x2000024c

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f005 fbdc 	bl	8006cdc <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20020000 	.word	0x20020000
 8001550:	00000400 	.word	0x00000400
 8001554:	20000258 	.word	0x20000258
 8001558:	20004d10 	.word	0x20004d10

0800155c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001586:	f107 0320 	add.w	r3, r7, #32
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <MX_TIM2_Init+0xac>)
 80015a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <MX_TIM2_Init+0xac>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <MX_TIM2_Init+0xac>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_TIM2_Init+0xac>)
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_TIM2_Init+0xac>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_TIM2_Init+0xac>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ca:	4818      	ldr	r0, [pc, #96]	; (800162c <MX_TIM2_Init+0xac>)
 80015cc:	f001 fdb0 	bl	8003130 <HAL_TIM_PWM_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80015d6:	f7ff fbb1 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	4619      	mov	r1, r3
 80015e8:	4810      	ldr	r0, [pc, #64]	; (800162c <MX_TIM2_Init+0xac>)
 80015ea:	f002 fb49 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015f4:	f7ff fba2 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f8:	2360      	movs	r3, #96	; 0x60
 80015fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2204      	movs	r2, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM2_Init+0xac>)
 8001610:	f002 f81a 	bl	8003648 <HAL_TIM_PWM_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800161a:	f7ff fb8f 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM2_Init+0xac>)
 8001620:	f000 f8f0 	bl	8001804 <HAL_TIM_MspPostInit>

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000025c 	.word	0x2000025c

08001630 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2224      	movs	r2, #36	; 0x24
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f005 fb86 	bl	8006d50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <MX_TIM3_Init+0xa0>)
 800164e:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <MX_TIM3_Init+0xa4>)
 8001650:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <MX_TIM3_Init+0xa0>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <MX_TIM3_Init+0xa0>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <MX_TIM3_Init+0xa0>)
 8001660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001664:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_TIM3_Init+0xa0>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_TIM3_Init+0xa0>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001672:	2301      	movs	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800167a:	2301      	movs	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8001682:	2306      	movs	r3, #6
 8001684:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800168a:	2301      	movs	r3, #1
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8001692:	2306      	movs	r3, #6
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4619      	mov	r1, r3
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <MX_TIM3_Init+0xa0>)
 800169e:	f001 fd96 	bl	80031ce <HAL_TIM_Encoder_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016a8:	f7ff fb48 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_TIM3_Init+0xa0>)
 80016ba:	f002 fae1 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80016c4:	f7ff fb3a 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	3730      	adds	r7, #48	; 0x30
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200002a4 	.word	0x200002a4
 80016d4:	40000400 	.word	0x40000400

080016d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e8:	d115      	bne.n	8001716 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_TIM_PWM_MspInit+0x48>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <HAL_TIM_PWM_MspInit+0x48>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_TIM_PWM_MspInit+0x48>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2105      	movs	r1, #5
 800170a:	201c      	movs	r0, #28
 800170c:	f000 f9fa 	bl	8001b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001710:	201c      	movs	r0, #28
 8001712:	f000 fa13 	bl	8001b3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a2c      	ldr	r2, [pc, #176]	; (80017f4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d151      	bne.n	80017ea <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a2a      	ldr	r2, [pc, #168]	; (80017f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a23      	ldr	r2, [pc, #140]	; (80017f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 800179a:	2340      	movs	r3, #64	; 0x40
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017aa:	2302      	movs	r3, #2
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4811      	ldr	r0, [pc, #68]	; (80017fc <HAL_TIM_Encoder_MspInit+0xd8>)
 80017b6:	f000 f9eb 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 80017ba:	2320      	movs	r3, #32
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ca:	2302      	movs	r3, #2
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	480a      	ldr	r0, [pc, #40]	; (8001800 <HAL_TIM_Encoder_MspInit+0xdc>)
 80017d6:	f000 f9db 	bl	8001b90 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2105      	movs	r1, #5
 80017de:	201d      	movs	r0, #29
 80017e0:	f000 f990 	bl	8001b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017e4:	201d      	movs	r0, #29
 80017e6:	f000 f9a9 	bl	8001b3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40000400 	.word	0x40000400
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400

08001804 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001824:	d11d      	bne.n	8001862 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 8001842:	2302      	movs	r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001852:	2301      	movs	r3, #1
 8001854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 800185e:	f000 f997 	bl	8001b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000

08001874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800187a:	490e      	ldr	r1, [pc, #56]	; (80018b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001890:	4c0b      	ldr	r4, [pc, #44]	; (80018c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800189e:	f7ff fe5d 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f005 fa21 	bl	8006ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a6:	f7ff f9ad 	bl	8000c04 <main>
  bx  lr    
 80018aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80018b8:	0800a1c0 	.word	0x0800a1c0
  ldr r2, =_sbss
 80018bc:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80018c0:	20004d10 	.word	0x20004d10

080018c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_Init+0x40>)
 80018d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <HAL_Init+0x40>)
 80018de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_Init+0x40>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f0:	2003      	movs	r0, #3
 80018f2:	f000 f8fc 	bl	8001aee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f6:	200f      	movs	r0, #15
 80018f8:	f7ff fd26 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018fc:	f7ff fce8 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000098 	.word	0x20000098
 8001930:	200002ec 	.word	0x200002ec

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200002ec 	.word	0x200002ec

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff ffee 	bl	8001934 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffde 	bl	8001934 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000098 	.word	0x20000098

08001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	60d3      	str	r3, [r2, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <__NVIC_GetPriorityGrouping+0x18>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 0307 	and.w	r3, r3, #7
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db0b      	blt.n	8001a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	4907      	ldr	r1, [pc, #28]	; (8001a30 <__NVIC_EnableIRQ+0x38>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db0a      	blt.n	8001a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <__NVIC_SetPriority+0x4c>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a5c:	e00a      	b.n	8001a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4908      	ldr	r1, [pc, #32]	; (8001a84 <__NVIC_SetPriority+0x50>)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	440b      	add	r3, r1
 8001a72:	761a      	strb	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f1c3 0307 	rsb	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	bf28      	it	cs
 8001aa6:	2304      	movcs	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3304      	adds	r3, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d902      	bls.n	8001ab8 <NVIC_EncodePriority+0x30>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3b03      	subs	r3, #3
 8001ab6:	e000      	b.n	8001aba <NVIC_EncodePriority+0x32>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	4313      	orrs	r3, r2
         );
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ff4c 	bl	8001994 <__NVIC_SetPriorityGrouping>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b16:	f7ff ff61 	bl	80019dc <__NVIC_GetPriorityGrouping>
 8001b1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	6978      	ldr	r0, [r7, #20]
 8001b22:	f7ff ffb1 	bl	8001a88 <NVIC_EncodePriority>
 8001b26:	4602      	mov	r2, r0
 8001b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff80 	bl	8001a34 <__NVIC_SetPriority>
}
 8001b34:	bf00      	nop
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff54 	bl	80019f8 <__NVIC_EnableIRQ>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	795b      	ldrb	r3, [r3, #5]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7fe fd92 	bl	80006a4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	e159      	b.n	8001e60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	f040 8148 	bne.w	8001e5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d005      	beq.n	8001be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d130      	bne.n	8001c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c18:	2201      	movs	r2, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 0201 	and.w	r2, r3, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d017      	beq.n	8001c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d123      	bne.n	8001cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	08da      	lsrs	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3208      	adds	r2, #8
 8001c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	220f      	movs	r2, #15
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	08da      	lsrs	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3208      	adds	r2, #8
 8001cce:	69b9      	ldr	r1, [r7, #24]
 8001cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0203 	and.w	r2, r3, #3
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80a2 	beq.w	8001e5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b57      	ldr	r3, [pc, #348]	; (8001e78 <HAL_GPIO_Init+0x2e8>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a56      	ldr	r2, [pc, #344]	; (8001e78 <HAL_GPIO_Init+0x2e8>)
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b54      	ldr	r3, [pc, #336]	; (8001e78 <HAL_GPIO_Init+0x2e8>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d32:	4a52      	ldr	r2, [pc, #328]	; (8001e7c <HAL_GPIO_Init+0x2ec>)
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	220f      	movs	r2, #15
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a49      	ldr	r2, [pc, #292]	; (8001e80 <HAL_GPIO_Init+0x2f0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d019      	beq.n	8001d92 <HAL_GPIO_Init+0x202>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a48      	ldr	r2, [pc, #288]	; (8001e84 <HAL_GPIO_Init+0x2f4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0x1fe>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a47      	ldr	r2, [pc, #284]	; (8001e88 <HAL_GPIO_Init+0x2f8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00d      	beq.n	8001d8a <HAL_GPIO_Init+0x1fa>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a46      	ldr	r2, [pc, #280]	; (8001e8c <HAL_GPIO_Init+0x2fc>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <HAL_GPIO_Init+0x1f6>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a45      	ldr	r2, [pc, #276]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_GPIO_Init+0x1f2>
 8001d7e:	2304      	movs	r3, #4
 8001d80:	e008      	b.n	8001d94 <HAL_GPIO_Init+0x204>
 8001d82:	2307      	movs	r3, #7
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x204>
 8001d86:	2303      	movs	r3, #3
 8001d88:	e004      	b.n	8001d94 <HAL_GPIO_Init+0x204>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e002      	b.n	8001d94 <HAL_GPIO_Init+0x204>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_GPIO_Init+0x204>
 8001d92:	2300      	movs	r3, #0
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	f002 0203 	and.w	r2, r2, #3
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	4093      	lsls	r3, r2
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da4:	4935      	ldr	r1, [pc, #212]	; (8001e7c <HAL_GPIO_Init+0x2ec>)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd6:	4a2f      	ldr	r2, [pc, #188]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e00:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2a:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e30:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e54:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	f67f aea2 	bls.w	8001bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40013800 	.word	0x40013800
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40020400 	.word	0x40020400
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40020c00 	.word	0x40020c00
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40013c00 	.word	0x40013c00

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb4:	e003      	b.n	8001ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	619a      	str	r2, [r3, #24]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fad4 	bl	8001498 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40013c00 	.word	0x40013c00

08001efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e12b      	b.n	8002166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fdf2 	bl	8000b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	; 0x24
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f60:	f000 fd40 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 8001f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a81      	ldr	r2, [pc, #516]	; (8002170 <HAL_I2C_Init+0x274>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d807      	bhi.n	8001f80 <HAL_I2C_Init+0x84>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a80      	ldr	r2, [pc, #512]	; (8002174 <HAL_I2C_Init+0x278>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	bf94      	ite	ls
 8001f78:	2301      	movls	r3, #1
 8001f7a:	2300      	movhi	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e006      	b.n	8001f8e <HAL_I2C_Init+0x92>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a7d      	ldr	r2, [pc, #500]	; (8002178 <HAL_I2C_Init+0x27c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf94      	ite	ls
 8001f88:	2301      	movls	r3, #1
 8001f8a:	2300      	movhi	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0e7      	b.n	8002166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4a78      	ldr	r2, [pc, #480]	; (800217c <HAL_I2C_Init+0x280>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	0c9b      	lsrs	r3, r3, #18
 8001fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a6a      	ldr	r2, [pc, #424]	; (8002170 <HAL_I2C_Init+0x274>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d802      	bhi.n	8001fd0 <HAL_I2C_Init+0xd4>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	e009      	b.n	8001fe4 <HAL_I2C_Init+0xe8>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	4a69      	ldr	r2, [pc, #420]	; (8002180 <HAL_I2C_Init+0x284>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ff6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	495c      	ldr	r1, [pc, #368]	; (8002170 <HAL_I2C_Init+0x274>)
 8002000:	428b      	cmp	r3, r1
 8002002:	d819      	bhi.n	8002038 <HAL_I2C_Init+0x13c>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e59      	subs	r1, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002012:	1c59      	adds	r1, r3, #1
 8002014:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002018:	400b      	ands	r3, r1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_I2C_Init+0x138>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1e59      	subs	r1, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fbb1 f3f3 	udiv	r3, r1, r3
 800202c:	3301      	adds	r3, #1
 800202e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002032:	e051      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 8002034:	2304      	movs	r3, #4
 8002036:	e04f      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d111      	bne.n	8002064 <HAL_I2C_Init+0x168>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1e58      	subs	r0, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	440b      	add	r3, r1
 800204e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002052:	3301      	adds	r3, #1
 8002054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e012      	b.n	800208a <HAL_I2C_Init+0x18e>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e58      	subs	r0, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	0099      	lsls	r1, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	3301      	adds	r3, #1
 800207c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Init+0x196>
 800208e:	2301      	movs	r3, #1
 8002090:	e022      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10e      	bne.n	80020b8 <HAL_I2C_Init+0x1bc>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1e58      	subs	r0, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6859      	ldr	r1, [r3, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	440b      	add	r3, r1
 80020a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ac:	3301      	adds	r3, #1
 80020ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b6:	e00f      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1e58      	subs	r0, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	0099      	lsls	r1, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	6809      	ldr	r1, [r1, #0]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6911      	ldr	r1, [r2, #16]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68d2      	ldr	r2, [r2, #12]
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	430b      	orrs	r3, r1
 800211a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	000186a0 	.word	0x000186a0
 8002174:	001e847f 	.word	0x001e847f
 8002178:	003d08ff 	.word	0x003d08ff
 800217c:	431bde83 	.word	0x431bde83
 8002180:	10624dd3 	.word	0x10624dd3

08002184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e267      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d075      	beq.n	800228e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a2:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d00c      	beq.n	80021c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ae:	4b85      	ldr	r3, [pc, #532]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d112      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ba:	4b82      	ldr	r3, [pc, #520]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021c6:	d10b      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d05b      	beq.n	800228c <HAL_RCC_OscConfig+0x108>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d157      	bne.n	800228c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e242      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d106      	bne.n	80021f8 <HAL_RCC_OscConfig+0x74>
 80021ea:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a75      	ldr	r2, [pc, #468]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b70      	ldr	r3, [pc, #448]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6f      	ldr	r2, [pc, #444]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6c      	ldr	r2, [pc, #432]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 800221c:	4b69      	ldr	r3, [pc, #420]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a68      	ldr	r2, [pc, #416]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a65      	ldr	r2, [pc, #404]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff fb7a 	bl	8001934 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002244:	f7ff fb76 	bl	8001934 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e207      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xc0>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7ff fb66 	bl	8001934 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff fb62 	bl	8001934 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1f3      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0xe8>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d063      	beq.n	8002362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d11c      	bne.n	80022ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b2:	4b44      	ldr	r3, [pc, #272]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x152>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1c7      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4937      	ldr	r1, [pc, #220]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	e03a      	b.n	8002362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f4:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <HAL_RCC_OscConfig+0x244>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7ff fb1b 	bl	8001934 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002302:	f7ff fb17 	bl	8001934 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1a8      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4925      	ldr	r1, [pc, #148]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
 8002334:	e015      	b.n	8002362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_OscConfig+0x244>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7ff fafa 	bl	8001934 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002344:	f7ff faf6 	bl	8001934 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e187      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d036      	beq.n	80023dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_RCC_OscConfig+0x248>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7ff fada 	bl	8001934 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002384:	f7ff fad6 	bl	8001934 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e167      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x200>
 80023a2:	e01b      	b.n	80023dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_OscConfig+0x248>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7ff fac3 	bl	8001934 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	e00e      	b.n	80023d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b2:	f7ff fabf 	bl	8001934 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d907      	bls.n	80023d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e150      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	42470000 	.word	0x42470000
 80023cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d0:	4b88      	ldr	r3, [pc, #544]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ea      	bne.n	80023b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8097 	beq.w	8002518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ee:	4b81      	ldr	r3, [pc, #516]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10f      	bne.n	800241a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a7c      	ldr	r2, [pc, #496]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
 800240a:	4b7a      	ldr	r3, [pc, #488]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b77      	ldr	r3, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b74      	ldr	r3, [pc, #464]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a73      	ldr	r2, [pc, #460]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7ff fa7f 	bl	8001934 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7ff fa7b 	bl	8001934 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e10c      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x2ea>
 8002460:	4b64      	ldr	r3, [pc, #400]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4a63      	ldr	r2, [pc, #396]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6713      	str	r3, [r2, #112]	; 0x70
 800246c:	e01c      	b.n	80024a8 <HAL_RCC_OscConfig+0x324>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b05      	cmp	r3, #5
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x30c>
 8002476:	4b5f      	ldr	r3, [pc, #380]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a5e      	ldr	r2, [pc, #376]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b5c      	ldr	r3, [pc, #368]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a5b      	ldr	r2, [pc, #364]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0x324>
 8002490:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	4a57      	ldr	r2, [pc, #348]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	6713      	str	r3, [r2, #112]	; 0x70
 800249c:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	4a54      	ldr	r2, [pc, #336]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80024a2:	f023 0304 	bic.w	r3, r3, #4
 80024a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d015      	beq.n	80024dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7ff fa40 	bl	8001934 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7ff fa3c 	bl	8001934 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e0cb      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ce:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0ee      	beq.n	80024b8 <HAL_RCC_OscConfig+0x334>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7ff fa2a 	bl	8001934 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7ff fa26 	bl	8001934 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e0b5      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fa:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ee      	bne.n	80024e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	4a38      	ldr	r2, [pc, #224]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a1 	beq.w	8002664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002522:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	d05c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d141      	bne.n	80025ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b31      	ldr	r3, [pc, #196]	; (80025fc <HAL_RCC_OscConfig+0x478>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7ff f9fa 	bl	8001934 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002544:	f7ff f9f6 	bl	8001934 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e087      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	019b      	lsls	r3, r3, #6
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	085b      	lsrs	r3, r3, #1
 800257a:	3b01      	subs	r3, #1
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	491b      	ldr	r1, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x478>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7ff f9cf 	bl	8001934 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7ff f9cb 	bl	8001934 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e05c      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x416>
 80025b8:	e054      	b.n	8002664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCC_OscConfig+0x478>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff f9b8 	bl	8001934 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7ff f9b4 	bl	8001934 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e045      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x444>
 80025e6:	e03d      	b.n	8002664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e038      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x4ec>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d028      	beq.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d121      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d11a      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002638:	4293      	cmp	r3, r2
 800263a:	d111      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	3b01      	subs	r3, #1
 800264a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0cc      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d90c      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b65      	ldr	r3, [pc, #404]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b63      	ldr	r3, [pc, #396]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0b8      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a58      	ldr	r2, [pc, #352]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e0:	4b53      	ldr	r3, [pc, #332]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a52      	ldr	r2, [pc, #328]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b50      	ldr	r3, [pc, #320]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	494d      	ldr	r1, [pc, #308]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d044      	beq.n	8002794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d119      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e07f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d003      	beq.n	8002732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272e:	2b03      	cmp	r3, #3
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e06f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e067      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002752:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f023 0203 	bic.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4934      	ldr	r1, [pc, #208]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002764:	f7ff f8e6 	bl	8001934 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7ff f8e2 	bl	8001934 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e04f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 020c 	and.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d1eb      	bne.n	800276c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d20c      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e032      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4916      	ldr	r1, [pc, #88]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	490e      	ldr	r1, [pc, #56]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027fa:	f000 f821 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	490a      	ldr	r1, [pc, #40]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	5ccb      	ldrb	r3, [r1, r3]
 800280e:	fa22 f303 	lsr.w	r3, r2, r3
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fd94 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023c00 	.word	0x40023c00
 8002830:	40023800 	.word	0x40023800
 8002834:	0800a104 	.word	0x0800a104
 8002838:	20000090 	.word	0x20000090
 800283c:	20000094 	.word	0x20000094

08002840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002844:	b090      	sub	sp, #64	; 0x40
 8002846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
 800284c:	2300      	movs	r3, #0
 800284e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002850:	2300      	movs	r3, #0
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002858:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d00d      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x40>
 8002864:	2b08      	cmp	r3, #8
 8002866:	f200 80a1 	bhi.w	80029ac <HAL_RCC_GetSysClockFreq+0x16c>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x34>
 800286e:	2b04      	cmp	r3, #4
 8002870:	d003      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x3a>
 8002872:	e09b      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b53      	ldr	r3, [pc, #332]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002876:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002878:	e09b      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800287a:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800287c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800287e:	e098      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002880:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800288a:	4b4d      	ldr	r3, [pc, #308]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d028      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002896:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	099b      	lsrs	r3, r3, #6
 800289c:	2200      	movs	r2, #0
 800289e:	623b      	str	r3, [r7, #32]
 80028a0:	627a      	str	r2, [r7, #36]	; 0x24
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028a8:	2100      	movs	r1, #0
 80028aa:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80028ac:	fb03 f201 	mul.w	r2, r3, r1
 80028b0:	2300      	movs	r3, #0
 80028b2:	fb00 f303 	mul.w	r3, r0, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	4a43      	ldr	r2, [pc, #268]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80028ba:	fba0 1202 	umull	r1, r2, r0, r2
 80028be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028c0:	460a      	mov	r2, r1
 80028c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80028c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c6:	4413      	add	r3, r2
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028cc:	2200      	movs	r2, #0
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	61fa      	str	r2, [r7, #28]
 80028d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028da:	f7fd fcd1 	bl	8000280 <__aeabi_uldivmod>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4613      	mov	r3, r2
 80028e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e6:	e053      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e8:	4b35      	ldr	r3, [pc, #212]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	099b      	lsrs	r3, r3, #6
 80028ee:	2200      	movs	r2, #0
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	617a      	str	r2, [r7, #20]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028fa:	f04f 0b00 	mov.w	fp, #0
 80028fe:	4652      	mov	r2, sl
 8002900:	465b      	mov	r3, fp
 8002902:	f04f 0000 	mov.w	r0, #0
 8002906:	f04f 0100 	mov.w	r1, #0
 800290a:	0159      	lsls	r1, r3, #5
 800290c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002910:	0150      	lsls	r0, r2, #5
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	ebb2 080a 	subs.w	r8, r2, sl
 800291a:	eb63 090b 	sbc.w	r9, r3, fp
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800292a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800292e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002932:	ebb2 0408 	subs.w	r4, r2, r8
 8002936:	eb63 0509 	sbc.w	r5, r3, r9
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	00eb      	lsls	r3, r5, #3
 8002944:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002948:	00e2      	lsls	r2, r4, #3
 800294a:	4614      	mov	r4, r2
 800294c:	461d      	mov	r5, r3
 800294e:	eb14 030a 	adds.w	r3, r4, sl
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	eb45 030b 	adc.w	r3, r5, fp
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002966:	4629      	mov	r1, r5
 8002968:	028b      	lsls	r3, r1, #10
 800296a:	4621      	mov	r1, r4
 800296c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002970:	4621      	mov	r1, r4
 8002972:	028a      	lsls	r2, r1, #10
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297a:	2200      	movs	r2, #0
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	60fa      	str	r2, [r7, #12]
 8002980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002984:	f7fd fc7c 	bl	8000280 <__aeabi_uldivmod>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4613      	mov	r3, r2
 800298e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	3301      	adds	r3, #1
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80029a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029aa:	e002      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80029ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3740      	adds	r7, #64	; 0x40
 80029b8:	46bd      	mov	sp, r7
 80029ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	017d7840 	.word	0x017d7840

080029cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000090 	.word	0x20000090

080029e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029e8:	f7ff fff0 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	0a9b      	lsrs	r3, r3, #10
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4903      	ldr	r1, [pc, #12]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	0800a114 	.word	0x0800a114

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a10:	f7ff ffdc 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0b5b      	lsrs	r3, r3, #13
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4903      	ldr	r1, [pc, #12]	; (8002a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	0800a114 	.word	0x0800a114

08002a34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	220f      	movs	r2, #15
 8002a42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_RCC_GetClockConfig+0x5c>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0203 	and.w	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_RCC_GetClockConfig+0x5c>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <HAL_RCC_GetClockConfig+0x5c>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_GetClockConfig+0x5c>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	08db      	lsrs	r3, r3, #3
 8002a6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_RCC_GetClockConfig+0x60>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0207 	and.w	r2, r3, #7
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	601a      	str	r2, [r3, #0]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40023c00 	.word	0x40023c00

08002a98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e07b      	b.n	8002ba2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d108      	bne.n	8002ac4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aba:	d009      	beq.n	8002ad0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61da      	str	r2, [r3, #28]
 8002ac2:	e005      	b.n	8002ad0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe f962 	bl	8000db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b54:	ea42 0103 	orr.w	r1, r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	f003 0104 	and.w	r1, r3, #4
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	f003 0210 	and.w	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69da      	ldr	r2, [r3, #28]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b088      	sub	sp, #32
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_SPI_Transmit+0x22>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e126      	b.n	8002e1a <HAL_SPI_Transmit+0x270>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bd4:	f7fe feae 	bl	8001934 <HAL_GetTick>
 8002bd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d002      	beq.n	8002bf0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bea:	2302      	movs	r3, #2
 8002bec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bee:	e10b      	b.n	8002e08 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_SPI_Transmit+0x52>
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c00:	e102      	b.n	8002e08 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2203      	movs	r2, #3
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	88fa      	ldrh	r2, [r7, #6]
 8002c1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	88fa      	ldrh	r2, [r7, #6]
 8002c20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c48:	d10f      	bne.n	8002c6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c74:	2b40      	cmp	r3, #64	; 0x40
 8002c76:	d007      	beq.n	8002c88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c90:	d14b      	bne.n	8002d2a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_SPI_Transmit+0xf6>
 8002c9a:	8afb      	ldrh	r3, [r7, #22]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d13e      	bne.n	8002d1e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	881a      	ldrh	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	1c9a      	adds	r2, r3, #2
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cc4:	e02b      	b.n	8002d1e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d112      	bne.n	8002cfa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	881a      	ldrh	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	1c9a      	adds	r2, r3, #2
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cf8:	e011      	b.n	8002d1e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cfa:	f7fe fe1b 	bl	8001934 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d803      	bhi.n	8002d12 <HAL_SPI_Transmit+0x168>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d102      	bne.n	8002d18 <HAL_SPI_Transmit+0x16e>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d1c:	e074      	b.n	8002e08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ce      	bne.n	8002cc6 <HAL_SPI_Transmit+0x11c>
 8002d28:	e04c      	b.n	8002dc4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_SPI_Transmit+0x18e>
 8002d32:	8afb      	ldrh	r3, [r7, #22]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d140      	bne.n	8002dba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	7812      	ldrb	r2, [r2, #0]
 8002d44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d5e:	e02c      	b.n	8002dba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d113      	bne.n	8002d96 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	7812      	ldrb	r2, [r2, #0]
 8002d7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d94:	e011      	b.n	8002dba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d96:	f7fe fdcd 	bl	8001934 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d803      	bhi.n	8002dae <HAL_SPI_Transmit+0x204>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d102      	bne.n	8002db4 <HAL_SPI_Transmit+0x20a>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002db8:	e026      	b.n	8002e08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1cd      	bne.n	8002d60 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	6839      	ldr	r1, [r7, #0]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f8b3 	bl	8002f34 <SPI_EndRxTxTransaction>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	77fb      	strb	r3, [r7, #31]
 8002e04:	e000      	b.n	8002e08 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002e06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e18:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e34:	f7fe fd7e 	bl	8001934 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	4413      	add	r3, r2
 8002e42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e44:	f7fe fd76 	bl	8001934 <HAL_GetTick>
 8002e48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	015b      	lsls	r3, r3, #5
 8002e50:	0d1b      	lsrs	r3, r3, #20
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e5a:	e054      	b.n	8002f06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e62:	d050      	beq.n	8002f06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e64:	f7fe fd66 	bl	8001934 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d902      	bls.n	8002e7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d13d      	bne.n	8002ef6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e92:	d111      	bne.n	8002eb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9c:	d004      	beq.n	8002ea8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea6:	d107      	bne.n	8002eb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec0:	d10f      	bne.n	8002ee2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e017      	b.n	8002f26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d19b      	bne.n	8002e5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000090 	.word	0x20000090

08002f34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <SPI_EndRxTxTransaction+0x7c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <SPI_EndRxTxTransaction+0x80>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	0d5b      	lsrs	r3, r3, #21
 8002f4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f50:	fb02 f303 	mul.w	r3, r2, r3
 8002f54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f5e:	d112      	bne.n	8002f86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f7ff ff5a 	bl	8002e24 <SPI_WaitFlagStateUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d016      	beq.n	8002fa4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f043 0220 	orr.w	r2, r3, #32
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e00f      	b.n	8002fa6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9c:	2b80      	cmp	r3, #128	; 0x80
 8002f9e:	d0f2      	beq.n	8002f86 <SPI_EndRxTxTransaction+0x52>
 8002fa0:	e000      	b.n	8002fa4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002fa2:	bf00      	nop
  }

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000090 	.word	0x20000090
 8002fb4:	165e9f81 	.word	0x165e9f81

08002fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e041      	b.n	800304e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f839 	bl	8003056 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	f000 fc10 	bl	800381c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b01      	cmp	r3, #1
 800307e:	d001      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e044      	b.n	800310e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1e      	ldr	r2, [pc, #120]	; (800311c <HAL_TIM_Base_Start_IT+0xb0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d018      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x6c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ae:	d013      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x6c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <HAL_TIM_Base_Start_IT+0xb4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00e      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x6c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a19      	ldr	r2, [pc, #100]	; (8003124 <HAL_TIM_Base_Start_IT+0xb8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d009      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x6c>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a17      	ldr	r2, [pc, #92]	; (8003128 <HAL_TIM_Base_Start_IT+0xbc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x6c>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a16      	ldr	r2, [pc, #88]	; (800312c <HAL_TIM_Base_Start_IT+0xc0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d111      	bne.n	80030fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d010      	beq.n	800310c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fa:	e007      	b.n	800310c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40010000 	.word	0x40010000
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800
 8003128:	40000c00 	.word	0x40000c00
 800312c:	40014000 	.word	0x40014000

08003130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e041      	b.n	80031c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fabe 	bl	80016d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3304      	adds	r3, #4
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f000 fb54 	bl	800381c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b086      	sub	sp, #24
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e097      	b.n	8003312 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fe fa94 	bl	8001724 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003212:	f023 0307 	bic.w	r3, r3, #7
 8003216:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f000 fafa 	bl	800381c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003250:	f023 0303 	bic.w	r3, r3, #3
 8003254:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	4313      	orrs	r3, r2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800326e:	f023 030c 	bic.w	r3, r3, #12
 8003272:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800327a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800327e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	4313      	orrs	r3, r2
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	011a      	lsls	r2, r3, #4
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	031b      	lsls	r3, r3, #12
 800329e:	4313      	orrs	r3, r2
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80032ac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80032b4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	4313      	orrs	r3, r2
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003332:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800333a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003342:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d110      	bne.n	800336c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d102      	bne.n	8003356 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003350:	7b7b      	ldrb	r3, [r7, #13]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d001      	beq.n	800335a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e069      	b.n	800342e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800336a:	e031      	b.n	80033d0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b04      	cmp	r3, #4
 8003370:	d110      	bne.n	8003394 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003372:	7bbb      	ldrb	r3, [r7, #14]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d102      	bne.n	800337e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003378:	7b3b      	ldrb	r3, [r7, #12]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d001      	beq.n	8003382 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e055      	b.n	800342e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003392:	e01d      	b.n	80033d0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d108      	bne.n	80033ac <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800339a:	7bbb      	ldrb	r3, [r7, #14]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033a0:	7b7b      	ldrb	r3, [r7, #13]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80033a6:	7b3b      	ldrb	r3, [r7, #12]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d001      	beq.n	80033b0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e03e      	b.n	800342e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_Encoder_Start+0xc4>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d008      	beq.n	80033ee <HAL_TIM_Encoder_Start+0xd4>
 80033dc:	e00f      	b.n	80033fe <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2201      	movs	r2, #1
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fc24 	bl	8003c34 <TIM_CCxChannelCmd>
      break;
 80033ec:	e016      	b.n	800341c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	2104      	movs	r1, #4
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fc1c 	bl	8003c34 <TIM_CCxChannelCmd>
      break;
 80033fc:	e00e      	b.n	800341c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2201      	movs	r2, #1
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fc14 	bl	8003c34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2201      	movs	r2, #1
 8003412:	2104      	movs	r1, #4
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fc0d 	bl	8003c34 <TIM_CCxChannelCmd>
      break;
 800341a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b02      	cmp	r3, #2
 800344a:	d122      	bne.n	8003492 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b02      	cmp	r3, #2
 8003458:	d11b      	bne.n	8003492 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f06f 0202 	mvn.w	r2, #2
 8003462:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f9b1 	bl	80037e0 <HAL_TIM_IC_CaptureCallback>
 800347e:	e005      	b.n	800348c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f9a3 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f9b4 	bl	80037f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b04      	cmp	r3, #4
 800349e:	d122      	bne.n	80034e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d11b      	bne.n	80034e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f06f 0204 	mvn.w	r2, #4
 80034b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f987 	bl	80037e0 <HAL_TIM_IC_CaptureCallback>
 80034d2:	e005      	b.n	80034e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f979 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f98a 	bl	80037f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d122      	bne.n	800353a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d11b      	bne.n	800353a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f06f 0208 	mvn.w	r2, #8
 800350a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2204      	movs	r2, #4
 8003510:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f95d 	bl	80037e0 <HAL_TIM_IC_CaptureCallback>
 8003526:	e005      	b.n	8003534 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f94f 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f960 	bl	80037f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b10      	cmp	r3, #16
 8003546:	d122      	bne.n	800358e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b10      	cmp	r3, #16
 8003554:	d11b      	bne.n	800358e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0210 	mvn.w	r2, #16
 800355e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2208      	movs	r2, #8
 8003564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f933 	bl	80037e0 <HAL_TIM_IC_CaptureCallback>
 800357a:	e005      	b.n	8003588 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f925 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f936 	bl	80037f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d10e      	bne.n	80035ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d107      	bne.n	80035ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f06f 0201 	mvn.w	r2, #1
 80035b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7fd fbaf 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b80      	cmp	r3, #128	; 0x80
 80035c6:	d10e      	bne.n	80035e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b80      	cmp	r3, #128	; 0x80
 80035d4:	d107      	bne.n	80035e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fbc5 	bl	8003d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d10e      	bne.n	8003612 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d107      	bne.n	8003612 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800360a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f8fb 	bl	8003808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b20      	cmp	r3, #32
 800361e:	d10e      	bne.n	800363e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b20      	cmp	r3, #32
 800362c:	d107      	bne.n	800363e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f06f 0220 	mvn.w	r2, #32
 8003636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fb8f 	bl	8003d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003662:	2302      	movs	r3, #2
 8003664:	e0ae      	b.n	80037c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b0c      	cmp	r3, #12
 8003672:	f200 809f 	bhi.w	80037b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	080036b1 	.word	0x080036b1
 8003680:	080037b5 	.word	0x080037b5
 8003684:	080037b5 	.word	0x080037b5
 8003688:	080037b5 	.word	0x080037b5
 800368c:	080036f1 	.word	0x080036f1
 8003690:	080037b5 	.word	0x080037b5
 8003694:	080037b5 	.word	0x080037b5
 8003698:	080037b5 	.word	0x080037b5
 800369c:	08003733 	.word	0x08003733
 80036a0:	080037b5 	.word	0x080037b5
 80036a4:	080037b5 	.word	0x080037b5
 80036a8:	080037b5 	.word	0x080037b5
 80036ac:	08003773 	.word	0x08003773
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f930 	bl	800391c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0208 	orr.w	r2, r2, #8
 80036ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0204 	bic.w	r2, r2, #4
 80036da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6999      	ldr	r1, [r3, #24]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	619a      	str	r2, [r3, #24]
      break;
 80036ee:	e064      	b.n	80037ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f976 	bl	80039e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6999      	ldr	r1, [r3, #24]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	021a      	lsls	r2, r3, #8
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	619a      	str	r2, [r3, #24]
      break;
 8003730:	e043      	b.n	80037ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f9c1 	bl	8003ac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0208 	orr.w	r2, r2, #8
 800374c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0204 	bic.w	r2, r2, #4
 800375c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69d9      	ldr	r1, [r3, #28]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	61da      	str	r2, [r3, #28]
      break;
 8003770:	e023      	b.n	80037ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fa0b 	bl	8003b94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800378c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69d9      	ldr	r1, [r3, #28]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	021a      	lsls	r2, r3, #8
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	61da      	str	r2, [r3, #28]
      break;
 80037b2:	e002      	b.n	80037ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	75fb      	strb	r3, [r7, #23]
      break;
 80037b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a34      	ldr	r2, [pc, #208]	; (8003900 <TIM_Base_SetConfig+0xe4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00f      	beq.n	8003854 <TIM_Base_SetConfig+0x38>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d00b      	beq.n	8003854 <TIM_Base_SetConfig+0x38>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a31      	ldr	r2, [pc, #196]	; (8003904 <TIM_Base_SetConfig+0xe8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d007      	beq.n	8003854 <TIM_Base_SetConfig+0x38>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a30      	ldr	r2, [pc, #192]	; (8003908 <TIM_Base_SetConfig+0xec>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d003      	beq.n	8003854 <TIM_Base_SetConfig+0x38>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a2f      	ldr	r2, [pc, #188]	; (800390c <TIM_Base_SetConfig+0xf0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d108      	bne.n	8003866 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a25      	ldr	r2, [pc, #148]	; (8003900 <TIM_Base_SetConfig+0xe4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01b      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003874:	d017      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <TIM_Base_SetConfig+0xe8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a21      	ldr	r2, [pc, #132]	; (8003908 <TIM_Base_SetConfig+0xec>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00f      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a20      	ldr	r2, [pc, #128]	; (800390c <TIM_Base_SetConfig+0xf0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00b      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a1f      	ldr	r2, [pc, #124]	; (8003910 <TIM_Base_SetConfig+0xf4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d007      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a1e      	ldr	r2, [pc, #120]	; (8003914 <TIM_Base_SetConfig+0xf8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <TIM_Base_SetConfig+0x8a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a1d      	ldr	r2, [pc, #116]	; (8003918 <TIM_Base_SetConfig+0xfc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d108      	bne.n	80038b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <TIM_Base_SetConfig+0xe4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d103      	bne.n	80038ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	615a      	str	r2, [r3, #20]
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40010000 	.word	0x40010000
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40000c00 	.word	0x40000c00
 8003910:	40014000 	.word	0x40014000
 8003914:	40014400 	.word	0x40014400
 8003918:	40014800 	.word	0x40014800

0800391c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f023 0201 	bic.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f023 0302 	bic.w	r3, r3, #2
 8003964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <TIM_OC1_SetConfig+0xc8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d10c      	bne.n	8003992 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f023 0308 	bic.w	r3, r3, #8
 800397e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f023 0304 	bic.w	r3, r3, #4
 8003990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <TIM_OC1_SetConfig+0xc8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d111      	bne.n	80039be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	621a      	str	r2, [r3, #32]
}
 80039d8:	bf00      	nop
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40010000 	.word	0x40010000

080039e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f023 0210 	bic.w	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 0320 	bic.w	r3, r3, #32
 8003a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <TIM_OC2_SetConfig+0xd4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d10d      	bne.n	8003a64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a15      	ldr	r2, [pc, #84]	; (8003abc <TIM_OC2_SetConfig+0xd4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d113      	bne.n	8003a94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40010000 	.word	0x40010000

08003ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <TIM_OC3_SetConfig+0xd0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10d      	bne.n	8003b3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <TIM_OC3_SetConfig+0xd0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d113      	bne.n	8003b6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40010000 	.word	0x40010000

08003b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	031b      	lsls	r3, r3, #12
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a10      	ldr	r2, [pc, #64]	; (8003c30 <TIM_OC4_SetConfig+0x9c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d109      	bne.n	8003c08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	019b      	lsls	r3, r3, #6
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40010000 	.word	0x40010000

08003c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2201      	movs	r2, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1a      	ldr	r2, [r3, #32]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	401a      	ands	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e050      	b.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d018      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce4:	d013      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a18      	ldr	r2, [pc, #96]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a16      	ldr	r2, [pc, #88]	; (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d009      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a13      	ldr	r2, [pc, #76]	; (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d10c      	bne.n	8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40014000 	.word	0x40014000

08003d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <__NVIC_SetPriority>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	6039      	str	r1, [r7, #0]
 8003d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	db0a      	blt.n	8003dae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	490c      	ldr	r1, [pc, #48]	; (8003dd0 <__NVIC_SetPriority+0x4c>)
 8003d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da2:	0112      	lsls	r2, r2, #4
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	440b      	add	r3, r1
 8003da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003dac:	e00a      	b.n	8003dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4908      	ldr	r1, [pc, #32]	; (8003dd4 <__NVIC_SetPriority+0x50>)
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	3b04      	subs	r3, #4
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	761a      	strb	r2, [r3, #24]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000e100 	.word	0xe000e100
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <SysTick_Handler+0x1c>)
 8003dde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003de0:	f001 ff12 	bl	8005c08 <xTaskGetSchedulerState>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d001      	beq.n	8003dee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003dea:	f002 fcfd 	bl	80067e8 <xPortSysTickHandler>
  }
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	e000e010 	.word	0xe000e010

08003df8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	f06f 0004 	mvn.w	r0, #4
 8003e02:	f7ff ffbf 	bl	8003d84 <__NVIC_SetPriority>
#endif
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e12:	f3ef 8305 	mrs	r3, IPSR
 8003e16:	603b      	str	r3, [r7, #0]
  return(result);
 8003e18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e1e:	f06f 0305 	mvn.w	r3, #5
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	e00c      	b.n	8003e40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <osKernelInitialize+0x44>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d105      	bne.n	8003e3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <osKernelInitialize+0x44>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	607b      	str	r3, [r7, #4]
 8003e38:	e002      	b.n	8003e40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e40:	687b      	ldr	r3, [r7, #4]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	200002f0 	.word	0x200002f0

08003e54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e5a:	f3ef 8305 	mrs	r3, IPSR
 8003e5e:	603b      	str	r3, [r7, #0]
  return(result);
 8003e60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003e66:	f06f 0305 	mvn.w	r3, #5
 8003e6a:	607b      	str	r3, [r7, #4]
 8003e6c:	e010      	b.n	8003e90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <osKernelStart+0x48>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d109      	bne.n	8003e8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e76:	f7ff ffbf 	bl	8003df8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e7a:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <osKernelStart+0x48>)
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e80:	f001 fa66 	bl	8005350 <vTaskStartScheduler>
      stat = osOK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	607b      	str	r3, [r7, #4]
 8003e88:	e002      	b.n	8003e90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e90:	687b      	ldr	r3, [r7, #4]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200002f0 	.word	0x200002f0

08003ea0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08e      	sub	sp, #56	; 0x38
 8003ea4:	af04      	add	r7, sp, #16
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eb0:	f3ef 8305 	mrs	r3, IPSR
 8003eb4:	617b      	str	r3, [r7, #20]
  return(result);
 8003eb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d17e      	bne.n	8003fba <osThreadNew+0x11a>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d07b      	beq.n	8003fba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ec6:	2318      	movs	r3, #24
 8003ec8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d045      	beq.n	8003f66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <osThreadNew+0x48>
        name = attr->name;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <osThreadNew+0x6e>
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b38      	cmp	r3, #56	; 0x38
 8003f00:	d805      	bhi.n	8003f0e <osThreadNew+0x6e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <osThreadNew+0x72>
        return (NULL);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e054      	b.n	8003fbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	089b      	lsrs	r3, r3, #2
 8003f20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00e      	beq.n	8003f48 <osThreadNew+0xa8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2bbb      	cmp	r3, #187	; 0xbb
 8003f30:	d90a      	bls.n	8003f48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d006      	beq.n	8003f48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <osThreadNew+0xa8>
        mem = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e010      	b.n	8003f6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10c      	bne.n	8003f6a <osThreadNew+0xca>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d108      	bne.n	8003f6a <osThreadNew+0xca>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d104      	bne.n	8003f6a <osThreadNew+0xca>
          mem = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	e001      	b.n	8003f6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d110      	bne.n	8003f92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f78:	9202      	str	r2, [sp, #8]
 8003f7a:	9301      	str	r3, [sp, #4]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	6a3a      	ldr	r2, [r7, #32]
 8003f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fff6 	bl	8004f78 <xTaskCreateStatic>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	e013      	b.n	8003fba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d110      	bne.n	8003fba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	f107 0310 	add.w	r3, r7, #16
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f001 f841 	bl	8005032 <xTaskCreate>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d001      	beq.n	8003fba <osThreadNew+0x11a>
            hTask = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fba:	693b      	ldr	r3, [r7, #16]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3728      	adds	r7, #40	; 0x28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fcc:	f3ef 8305 	mrs	r3, IPSR
 8003fd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <osDelay+0x1c>
    stat = osErrorISR;
 8003fd8:	f06f 0305 	mvn.w	r3, #5
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	e007      	b.n	8003ff0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f001 f97c 	bl	80052e8 <vTaskDelay>
    }
  }

  return (stat);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b08a      	sub	sp, #40	; 0x28
 8003ffe:	af02      	add	r7, sp, #8
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800400a:	f3ef 8305 	mrs	r3, IPSR
 800400e:	613b      	str	r3, [r7, #16]
  return(result);
 8004010:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004012:	2b00      	cmp	r3, #0
 8004014:	d15f      	bne.n	80040d6 <osMessageQueueNew+0xdc>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d05c      	beq.n	80040d6 <osMessageQueueNew+0xdc>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d059      	beq.n	80040d6 <osMessageQueueNew+0xdc>
    mem = -1;
 8004022:	f04f 33ff 	mov.w	r3, #4294967295
 8004026:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d029      	beq.n	8004082 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d012      	beq.n	800405c <osMessageQueueNew+0x62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b4f      	cmp	r3, #79	; 0x4f
 800403c:	d90e      	bls.n	800405c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	429a      	cmp	r2, r3
 8004054:	d302      	bcc.n	800405c <osMessageQueueNew+0x62>
        mem = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	e014      	b.n	8004086 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d110      	bne.n	8004086 <osMessageQueueNew+0x8c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10c      	bne.n	8004086 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004070:	2b00      	cmp	r3, #0
 8004072:	d108      	bne.n	8004086 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d104      	bne.n	8004086 <osMessageQueueNew+0x8c>
          mem = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	61bb      	str	r3, [r7, #24]
 8004080:	e001      	b.n	8004086 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d10b      	bne.n	80040a4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2100      	movs	r1, #0
 8004096:	9100      	str	r1, [sp, #0]
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fa2e 	bl	80044fc <xQueueGenericCreateStatic>
 80040a0:	61f8      	str	r0, [r7, #28]
 80040a2:	e008      	b.n	80040b6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80040aa:	2200      	movs	r2, #0
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fa9c 	bl	80045ec <xQueueGenericCreate>
 80040b4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00c      	beq.n	80040d6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <osMessageQueueNew+0xd0>
        name = attr->name;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e001      	b.n	80040ce <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	69f8      	ldr	r0, [r7, #28]
 80040d2:	f000 fef3 	bl	8004ebc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80040d6:	69fb      	ldr	r3, [r7, #28]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	4613      	mov	r3, r2
 80040ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040f8:	f3ef 8305 	mrs	r3, IPSR
 80040fc:	617b      	str	r3, [r7, #20]
  return(result);
 80040fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004100:	2b00      	cmp	r3, #0
 8004102:	d028      	beq.n	8004156 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <osMessageQueuePut+0x36>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <osMessageQueuePut+0x36>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004116:	f06f 0303 	mvn.w	r3, #3
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	e038      	b.n	8004190 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004122:	f107 0210 	add.w	r2, r7, #16
 8004126:	2300      	movs	r3, #0
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	69b8      	ldr	r0, [r7, #24]
 800412c:	f000 fbba 	bl	80048a4 <xQueueGenericSendFromISR>
 8004130:	4603      	mov	r3, r0
 8004132:	2b01      	cmp	r3, #1
 8004134:	d003      	beq.n	800413e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004136:	f06f 0302 	mvn.w	r3, #2
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	e028      	b.n	8004190 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d025      	beq.n	8004190 <osMessageQueuePut+0xb0>
 8004144:	4b15      	ldr	r3, [pc, #84]	; (800419c <osMessageQueuePut+0xbc>)
 8004146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	e01c      	b.n	8004190 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <osMessageQueuePut+0x82>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d103      	bne.n	800416a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004162:	f06f 0303 	mvn.w	r3, #3
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e012      	b.n	8004190 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800416a:	2300      	movs	r3, #0
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	69b8      	ldr	r0, [r7, #24]
 8004172:	f000 fa99 	bl	80046a8 <xQueueGenericSend>
 8004176:	4603      	mov	r3, r0
 8004178:	2b01      	cmp	r3, #1
 800417a:	d009      	beq.n	8004190 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004182:	f06f 0301 	mvn.w	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	e002      	b.n	8004190 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800418a:	f06f 0302 	mvn.w	r3, #2
 800418e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004190:	69fb      	ldr	r3, [r7, #28]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041b6:	f3ef 8305 	mrs	r3, IPSR
 80041ba:	617b      	str	r3, [r7, #20]
  return(result);
 80041bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d028      	beq.n	8004214 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <osMessageQueueGet+0x34>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <osMessageQueueGet+0x34>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80041d4:	f06f 0303 	mvn.w	r3, #3
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e037      	b.n	800424c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80041e0:	f107 0310 	add.w	r3, r7, #16
 80041e4:	461a      	mov	r2, r3
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	69b8      	ldr	r0, [r7, #24]
 80041ea:	f000 fcd7 	bl	8004b9c <xQueueReceiveFromISR>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d003      	beq.n	80041fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80041f4:	f06f 0302 	mvn.w	r3, #2
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	e027      	b.n	800424c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d024      	beq.n	800424c <osMessageQueueGet+0xac>
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <osMessageQueueGet+0xb8>)
 8004204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	e01b      	b.n	800424c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <osMessageQueueGet+0x80>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d103      	bne.n	8004228 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004220:	f06f 0303 	mvn.w	r3, #3
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	e011      	b.n	800424c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	69b8      	ldr	r0, [r7, #24]
 800422e:	f000 fbd5 	bl	80049dc <xQueueReceive>
 8004232:	4603      	mov	r3, r0
 8004234:	2b01      	cmp	r3, #1
 8004236:	d009      	beq.n	800424c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800423e:	f06f 0301 	mvn.w	r3, #1
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	e002      	b.n	800424c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004246:	f06f 0302 	mvn.w	r3, #2
 800424a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800424c:	69fb      	ldr	r3, [r7, #28]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3720      	adds	r7, #32
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	e000ed04 	.word	0xe000ed04

0800425c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a07      	ldr	r2, [pc, #28]	; (8004288 <vApplicationGetIdleTaskMemory+0x2c>)
 800426c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4a06      	ldr	r2, [pc, #24]	; (800428c <vApplicationGetIdleTaskMemory+0x30>)
 8004272:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2280      	movs	r2, #128	; 0x80
 8004278:	601a      	str	r2, [r3, #0]
}
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	200002f4 	.word	0x200002f4
 800428c:	200003b0 	.word	0x200003b0

08004290 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a07      	ldr	r2, [pc, #28]	; (80042bc <vApplicationGetTimerTaskMemory+0x2c>)
 80042a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4a06      	ldr	r2, [pc, #24]	; (80042c0 <vApplicationGetTimerTaskMemory+0x30>)
 80042a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042ae:	601a      	str	r2, [r3, #0]
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	200005b0 	.word	0x200005b0
 80042c0:	2000066c 	.word	0x2000066c

080042c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f103 0208 	add.w	r2, r3, #8
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f04f 32ff 	mov.w	r2, #4294967295
 80042dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f103 0208 	add.w	r2, r3, #8
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f103 0208 	add.w	r2, r3, #8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	601a      	str	r2, [r3, #0]
}
 800435a:	bf00      	nop
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d103      	bne.n	8004386 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e00c      	b.n	80043a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3308      	adds	r3, #8
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	e002      	b.n	8004394 <vListInsert+0x2e>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	429a      	cmp	r2, r3
 800439e:	d2f6      	bcs.n	800438e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	601a      	str	r2, [r3, #0]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6892      	ldr	r2, [r2, #8]
 80043ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6852      	ldr	r2, [r2, #4]
 80043f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d103      	bne.n	800440c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	1e5a      	subs	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004456:	f002 f935 	bl	80066c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	68f9      	ldr	r1, [r7, #12]
 8004464:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004466:	fb01 f303 	mul.w	r3, r1, r3
 800446a:	441a      	add	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	3b01      	subs	r3, #1
 8004488:	68f9      	ldr	r1, [r7, #12]
 800448a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	441a      	add	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	22ff      	movs	r2, #255	; 0xff
 800449a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	22ff      	movs	r2, #255	; 0xff
 80044a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d114      	bne.n	80044d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01a      	beq.n	80044ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3310      	adds	r3, #16
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 f9e3 	bl	8005884 <xTaskRemoveFromEventList>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d012      	beq.n	80044ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <xQueueGenericReset+0xcc>)
 80044c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	e009      	b.n	80044ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3310      	adds	r3, #16
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fef2 	bl	80042c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3324      	adds	r3, #36	; 0x24
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff feed 	bl	80042c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044ea:	f002 f91b 	bl	8006724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044ee:	2301      	movs	r3, #1
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08e      	sub	sp, #56	; 0x38
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800453e:	bf00      	nop
 8004540:	e7fe      	b.n	8004540 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <xQueueGenericCreateStatic+0x52>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <xQueueGenericCreateStatic+0x56>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <xQueueGenericCreateStatic+0x58>
 8004552:	2300      	movs	r3, #0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	623b      	str	r3, [r7, #32]
}
 800456a:	bf00      	nop
 800456c:	e7fe      	b.n	800456c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <xQueueGenericCreateStatic+0x7e>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <xQueueGenericCreateStatic+0x82>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <xQueueGenericCreateStatic+0x84>
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	61fb      	str	r3, [r7, #28]
}
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800459a:	2350      	movs	r3, #80	; 0x50
 800459c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b50      	cmp	r3, #80	; 0x50
 80045a2:	d00a      	beq.n	80045ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	61bb      	str	r3, [r7, #24]
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	4613      	mov	r3, r2
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f83f 	bl	8004660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3730      	adds	r7, #48	; 0x30
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	; 0x28
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	4613      	mov	r3, r2
 80045f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	613b      	str	r3, [r7, #16]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	3350      	adds	r3, #80	; 0x50
 8004624:	4618      	mov	r0, r3
 8004626:	f002 f96f 	bl	8006908 <pvPortMalloc>
 800462a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d011      	beq.n	8004656 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	3350      	adds	r3, #80	; 0x50
 800463a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004644:	79fa      	ldrb	r2, [r7, #7]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f805 	bl	8004660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004656:	69bb      	ldr	r3, [r7, #24]
	}
 8004658:	4618      	mov	r0, r3
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d103      	bne.n	800467c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e002      	b.n	8004682 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800468e:	2101      	movs	r1, #1
 8004690:	69b8      	ldr	r0, [r7, #24]
 8004692:	f7ff fecb 	bl	800442c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	; 0x38
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046b6:	2300      	movs	r3, #0
 80046b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <xQueueGenericSend+0x32>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d103      	bne.n	80046e8 <xQueueGenericSend+0x40>
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <xQueueGenericSend+0x44>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <xQueueGenericSend+0x46>
 80046ec:	2300      	movs	r3, #0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <xQueueGenericSend+0x60>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004704:	bf00      	nop
 8004706:	e7fe      	b.n	8004706 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d103      	bne.n	8004716 <xQueueGenericSend+0x6e>
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <xQueueGenericSend+0x72>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <xQueueGenericSend+0x74>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <xQueueGenericSend+0x8e>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	623b      	str	r3, [r7, #32]
}
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004736:	f001 fa67 	bl	8005c08 <xTaskGetSchedulerState>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <xQueueGenericSend+0x9e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <xQueueGenericSend+0xa2>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <xQueueGenericSend+0xa4>
 800474a:	2300      	movs	r3, #0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <xQueueGenericSend+0xbe>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	61fb      	str	r3, [r7, #28]
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004766:	f001 ffad 	bl	80066c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	429a      	cmp	r2, r3
 8004774:	d302      	bcc.n	800477c <xQueueGenericSend+0xd4>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d129      	bne.n	80047d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004782:	f000 fa8b 	bl	8004c9c <prvCopyDataToQueue>
 8004786:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	2b00      	cmp	r3, #0
 800478e:	d010      	beq.n	80047b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	3324      	adds	r3, #36	; 0x24
 8004794:	4618      	mov	r0, r3
 8004796:	f001 f875 	bl	8005884 <xTaskRemoveFromEventList>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d013      	beq.n	80047c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047a0:	4b3f      	ldr	r3, [pc, #252]	; (80048a0 <xQueueGenericSend+0x1f8>)
 80047a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	e00a      	b.n	80047c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047b8:	4b39      	ldr	r3, [pc, #228]	; (80048a0 <xQueueGenericSend+0x1f8>)
 80047ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047c8:	f001 ffac 	bl	8006724 <vPortExitCritical>
				return pdPASS;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e063      	b.n	8004898 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d103      	bne.n	80047de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047d6:	f001 ffa5 	bl	8006724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	e05c      	b.n	8004898 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047e4:	f107 0314 	add.w	r3, r7, #20
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 f8af 	bl	800594c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047ee:	2301      	movs	r3, #1
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047f2:	f001 ff97 	bl	8006724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047f6:	f000 fe1b 	bl	8005430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047fa:	f001 ff63 	bl	80066c4 <vPortEnterCritical>
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004804:	b25b      	sxtb	r3, r3
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d103      	bne.n	8004814 <xQueueGenericSend+0x16c>
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800481a:	b25b      	sxtb	r3, r3
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004820:	d103      	bne.n	800482a <xQueueGenericSend+0x182>
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800482a:	f001 ff7b 	bl	8006724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800482e:	1d3a      	adds	r2, r7, #4
 8004830:	f107 0314 	add.w	r3, r7, #20
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f001 f89e 	bl	8005978 <xTaskCheckForTimeOut>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d124      	bne.n	800488c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004844:	f000 fb22 	bl	8004e8c <prvIsQueueFull>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d018      	beq.n	8004880 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	3310      	adds	r3, #16
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4611      	mov	r1, r2
 8004856:	4618      	mov	r0, r3
 8004858:	f000 ffc4 	bl	80057e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800485c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800485e:	f000 faad 	bl	8004dbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004862:	f000 fdf3 	bl	800544c <xTaskResumeAll>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	f47f af7c 	bne.w	8004766 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <xQueueGenericSend+0x1f8>)
 8004870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	e772      	b.n	8004766 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004882:	f000 fa9b 	bl	8004dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004886:	f000 fde1 	bl	800544c <xTaskResumeAll>
 800488a:	e76c      	b.n	8004766 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800488c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800488e:	f000 fa95 	bl	8004dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004892:	f000 fddb 	bl	800544c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004896:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004898:	4618      	mov	r0, r3
 800489a:	3738      	adds	r7, #56	; 0x38
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	e000ed04 	.word	0xe000ed04

080048a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b090      	sub	sp, #64	; 0x40
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d103      	bne.n	80048e0 <xQueueGenericSendFromISR+0x3c>
 80048d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <xQueueGenericSendFromISR+0x40>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <xQueueGenericSendFromISR+0x42>
 80048e4:	2300      	movs	r3, #0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d103      	bne.n	800490e <xQueueGenericSendFromISR+0x6a>
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <xQueueGenericSendFromISR+0x6e>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <xQueueGenericSendFromISR+0x70>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	623b      	str	r3, [r7, #32]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800492e:	f001 ffab 	bl	8006888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004932:	f3ef 8211 	mrs	r2, BASEPRI
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	61fa      	str	r2, [r7, #28]
 8004948:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800494a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	429a      	cmp	r2, r3
 8004958:	d302      	bcc.n	8004960 <xQueueGenericSendFromISR+0xbc>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d12f      	bne.n	80049c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004976:	f000 f991 	bl	8004c9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800497a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d112      	bne.n	80049aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	d016      	beq.n	80049ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	3324      	adds	r3, #36	; 0x24
 8004990:	4618      	mov	r0, r3
 8004992:	f000 ff77 	bl	8005884 <xTaskRemoveFromEventList>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00e      	beq.n	80049ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e007      	b.n	80049ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049ae:	3301      	adds	r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	b25a      	sxtb	r2, r3
 80049b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049ba:	2301      	movs	r3, #1
 80049bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80049be:	e001      	b.n	80049c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3740      	adds	r7, #64	; 0x40
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08c      	sub	sp, #48	; 0x30
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <xQueueReceive+0x30>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	623b      	str	r3, [r7, #32]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d103      	bne.n	8004a1a <xQueueReceive+0x3e>
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <xQueueReceive+0x42>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <xQueueReceive+0x44>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <xQueueReceive+0x5e>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	61fb      	str	r3, [r7, #28]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a3a:	f001 f8e5 	bl	8005c08 <xTaskGetSchedulerState>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <xQueueReceive+0x6e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <xQueueReceive+0x72>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <xQueueReceive+0x74>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <xQueueReceive+0x8e>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	61bb      	str	r3, [r7, #24]
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a6a:	f001 fe2b 	bl	80066c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d01f      	beq.n	8004aba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a7e:	f000 f977 	bl	8004d70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	1e5a      	subs	r2, r3, #1
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00f      	beq.n	8004ab2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	3310      	adds	r3, #16
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fef4 	bl	8005884 <xTaskRemoveFromEventList>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004aa2:	4b3d      	ldr	r3, [pc, #244]	; (8004b98 <xQueueReceive+0x1bc>)
 8004aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ab2:	f001 fe37 	bl	8006724 <vPortExitCritical>
				return pdPASS;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e069      	b.n	8004b8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d103      	bne.n	8004ac8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ac0:	f001 fe30 	bl	8006724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e062      	b.n	8004b8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ace:	f107 0310 	add.w	r3, r7, #16
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 ff3a 	bl	800594c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004adc:	f001 fe22 	bl	8006724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ae0:	f000 fca6 	bl	8005430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ae4:	f001 fdee 	bl	80066c4 <vPortEnterCritical>
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aee:	b25b      	sxtb	r3, r3
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d103      	bne.n	8004afe <xQueueReceive+0x122>
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b04:	b25b      	sxtb	r3, r3
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d103      	bne.n	8004b14 <xQueueReceive+0x138>
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b14:	f001 fe06 	bl	8006724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b18:	1d3a      	adds	r2, r7, #4
 8004b1a:	f107 0310 	add.w	r3, r7, #16
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 ff29 	bl	8005978 <xTaskCheckForTimeOut>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d123      	bne.n	8004b74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b2e:	f000 f997 	bl	8004e60 <prvIsQueueEmpty>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d017      	beq.n	8004b68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	3324      	adds	r3, #36	; 0x24
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	4611      	mov	r1, r2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fe4f 	bl	80057e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b48:	f000 f938 	bl	8004dbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b4c:	f000 fc7e 	bl	800544c <xTaskResumeAll>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d189      	bne.n	8004a6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <xQueueReceive+0x1bc>)
 8004b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	e780      	b.n	8004a6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b6a:	f000 f927 	bl	8004dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b6e:	f000 fc6d 	bl	800544c <xTaskResumeAll>
 8004b72:	e77a      	b.n	8004a6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b76:	f000 f921 	bl	8004dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b7a:	f000 fc67 	bl	800544c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b80:	f000 f96e 	bl	8004e60 <prvIsQueueEmpty>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f43f af6f 	beq.w	8004a6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3730      	adds	r7, #48	; 0x30
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08e      	sub	sp, #56	; 0x38
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	623b      	str	r3, [r7, #32]
}
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <xQueueReceiveFromISR+0x3a>
 8004bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <xQueueReceiveFromISR+0x3e>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <xQueueReceiveFromISR+0x40>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	61fb      	str	r3, [r7, #28]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bf6:	f001 fe47 	bl	8006888 <vPortValidateInterruptPriority>
	__asm volatile
 8004bfa:	f3ef 8211 	mrs	r2, BASEPRI
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	61ba      	str	r2, [r7, #24]
 8004c10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d02f      	beq.n	8004c82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c30:	f000 f89e 	bl	8004d70 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	1e5a      	subs	r2, r3, #1
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d112      	bne.n	8004c6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d016      	beq.n	8004c7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	3310      	adds	r3, #16
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fe16 	bl	8005884 <xTaskRemoveFromEventList>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00e      	beq.n	8004c7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00b      	beq.n	8004c7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	e007      	b.n	8004c7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c70:	3301      	adds	r3, #1
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	b25a      	sxtb	r2, r3
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c80:	e001      	b.n	8004c86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	637b      	str	r3, [r7, #52]	; 0x34
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f383 8811 	msr	BASEPRI, r3
}
 8004c90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3738      	adds	r7, #56	; 0x38
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10d      	bne.n	8004cd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d14d      	bne.n	8004d5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 ffbc 	bl	8005c44 <xTaskPriorityDisinherit>
 8004ccc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	e043      	b.n	8004d5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d119      	bne.n	8004d10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6858      	ldr	r0, [r3, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	f002 f824 	bl	8006d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	441a      	add	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d32b      	bcc.n	8004d5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	605a      	str	r2, [r3, #4]
 8004d0e:	e026      	b.n	8004d5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	68d8      	ldr	r0, [r3, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	f002 f80a 	bl	8006d34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	425b      	negs	r3, r3
 8004d2a:	441a      	add	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d207      	bcs.n	8004d4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	425b      	negs	r3, r3
 8004d46:	441a      	add	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d105      	bne.n	8004d5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d66:	697b      	ldr	r3, [r7, #20]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d018      	beq.n	8004db4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	441a      	add	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d303      	bcc.n	8004da4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68d9      	ldr	r1, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	461a      	mov	r2, r3
 8004dae:	6838      	ldr	r0, [r7, #0]
 8004db0:	f001 ffc0 	bl	8006d34 <memcpy>
	}
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004dc4:	f001 fc7e 	bl	80066c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dd0:	e011      	b.n	8004df6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d012      	beq.n	8004e00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3324      	adds	r3, #36	; 0x24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fd50 	bl	8005884 <xTaskRemoveFromEventList>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dea:	f000 fe27 	bl	8005a3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	dce9      	bgt.n	8004dd2 <prvUnlockQueue+0x16>
 8004dfe:	e000      	b.n	8004e02 <prvUnlockQueue+0x46>
					break;
 8004e00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	22ff      	movs	r2, #255	; 0xff
 8004e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e0a:	f001 fc8b 	bl	8006724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e0e:	f001 fc59 	bl	80066c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e1a:	e011      	b.n	8004e40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d012      	beq.n	8004e4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3310      	adds	r3, #16
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fd2b 	bl	8005884 <xTaskRemoveFromEventList>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e34:	f000 fe02 	bl	8005a3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e38:	7bbb      	ldrb	r3, [r7, #14]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	dce9      	bgt.n	8004e1c <prvUnlockQueue+0x60>
 8004e48:	e000      	b.n	8004e4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	22ff      	movs	r2, #255	; 0xff
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e54:	f001 fc66 	bl	8006724 <vPortExitCritical>
}
 8004e58:	bf00      	nop
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e68:	f001 fc2c 	bl	80066c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e74:	2301      	movs	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e001      	b.n	8004e7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e7e:	f001 fc51 	bl	8006724 <vPortExitCritical>

	return xReturn;
 8004e82:	68fb      	ldr	r3, [r7, #12]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e94:	f001 fc16 	bl	80066c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d102      	bne.n	8004eaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	e001      	b.n	8004eae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eae:	f001 fc39 	bl	8006724 <vPortExitCritical>

	return xReturn;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	e014      	b.n	8004ef6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ecc:	4a0f      	ldr	r2, [pc, #60]	; (8004f0c <vQueueAddToRegistry+0x50>)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10b      	bne.n	8004ef0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ed8:	490c      	ldr	r1, [pc, #48]	; (8004f0c <vQueueAddToRegistry+0x50>)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <vQueueAddToRegistry+0x50>)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4413      	add	r3, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004eee:	e006      	b.n	8004efe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b07      	cmp	r3, #7
 8004efa:	d9e7      	bls.n	8004ecc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20000a6c 	.word	0x20000a6c

08004f10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f20:	f001 fbd0 	bl	80066c4 <vPortEnterCritical>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f2a:	b25b      	sxtb	r3, r3
 8004f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f30:	d103      	bne.n	8004f3a <vQueueWaitForMessageRestricted+0x2a>
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f40:	b25b      	sxtb	r3, r3
 8004f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f46:	d103      	bne.n	8004f50 <vQueueWaitForMessageRestricted+0x40>
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f50:	f001 fbe8 	bl	8006724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d106      	bne.n	8004f6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	3324      	adds	r3, #36	; 0x24
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fc61 	bl	800582c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f6a:	6978      	ldr	r0, [r7, #20]
 8004f6c:	f7ff ff26 	bl	8004dbc <prvUnlockQueue>
	}
 8004f70:	bf00      	nop
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08e      	sub	sp, #56	; 0x38
 8004f7c:	af04      	add	r7, sp, #16
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	623b      	str	r3, [r7, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <xTaskCreateStatic+0x46>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	61fb      	str	r3, [r7, #28]
}
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fbe:	23bc      	movs	r3, #188	; 0xbc
 8004fc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2bbc      	cmp	r3, #188	; 0xbc
 8004fc6:	d00a      	beq.n	8004fde <xTaskCreateStatic+0x66>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	61bb      	str	r3, [r7, #24]
}
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004fde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01e      	beq.n	8005024 <xTaskCreateStatic+0xac>
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01b      	beq.n	8005024 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ffe:	2300      	movs	r3, #0
 8005000:	9303      	str	r3, [sp, #12]
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	9302      	str	r3, [sp, #8]
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f850 	bl	80050bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800501c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800501e:	f000 f8f3 	bl	8005208 <prvAddNewTaskToReadyList>
 8005022:	e001      	b.n	8005028 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005028:	697b      	ldr	r3, [r7, #20]
	}
 800502a:	4618      	mov	r0, r3
 800502c:	3728      	adds	r7, #40	; 0x28
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005032:	b580      	push	{r7, lr}
 8005034:	b08c      	sub	sp, #48	; 0x30
 8005036:	af04      	add	r7, sp, #16
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	4613      	mov	r3, r2
 8005040:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4618      	mov	r0, r3
 8005048:	f001 fc5e 	bl	8006908 <pvPortMalloc>
 800504c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00e      	beq.n	8005072 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005054:	20bc      	movs	r0, #188	; 0xbc
 8005056:	f001 fc57 	bl	8006908 <pvPortMalloc>
 800505a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
 8005068:	e005      	b.n	8005076 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f001 fd18 	bl	8006aa0 <vPortFree>
 8005070:	e001      	b.n	8005076 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d017      	beq.n	80050ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	2300      	movs	r3, #0
 8005088:	9303      	str	r3, [sp, #12]
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	9302      	str	r3, [sp, #8]
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f80e 	bl	80050bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050a0:	69f8      	ldr	r0, [r7, #28]
 80050a2:	f000 f8b1 	bl	8005208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050a6:	2301      	movs	r3, #1
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	e002      	b.n	80050b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050ac:	f04f 33ff 	mov.w	r3, #4294967295
 80050b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050b2:	69bb      	ldr	r3, [r7, #24]
	}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3720      	adds	r7, #32
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	461a      	mov	r2, r3
 80050d4:	21a5      	movs	r1, #165	; 0xa5
 80050d6:	f001 fe3b 	bl	8006d50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050e4:	3b01      	subs	r3, #1
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f023 0307 	bic.w	r3, r3, #7
 80050f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <prvInitialiseNewTask+0x58>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	617b      	str	r3, [r7, #20]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01f      	beq.n	800515a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	e012      	b.n	8005146 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	7819      	ldrb	r1, [r3, #0]
 8005128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	3334      	adds	r3, #52	; 0x34
 8005130:	460a      	mov	r2, r1
 8005132:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d006      	beq.n	800514e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	3301      	adds	r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2b0f      	cmp	r3, #15
 800514a:	d9e9      	bls.n	8005120 <prvInitialiseNewTask+0x64>
 800514c:	e000      	b.n	8005150 <prvInitialiseNewTask+0x94>
			{
				break;
 800514e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005158:	e003      	b.n	8005162 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	2b37      	cmp	r3, #55	; 0x37
 8005166:	d901      	bls.n	800516c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005168:	2337      	movs	r3, #55	; 0x37
 800516a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005170:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005176:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	2200      	movs	r2, #0
 800517c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	3304      	adds	r3, #4
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff f8be 	bl	8004304 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	3318      	adds	r3, #24
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff f8b9 	bl	8004304 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005196:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	3354      	adds	r3, #84	; 0x54
 80051bc:	2260      	movs	r2, #96	; 0x60
 80051be:	2100      	movs	r1, #0
 80051c0:	4618      	mov	r0, r3
 80051c2:	f001 fdc5 	bl	8006d50 <memset>
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <prvInitialiseNewTask+0x140>)
 80051ca:	659a      	str	r2, [r3, #88]	; 0x58
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	4a0c      	ldr	r2, [pc, #48]	; (8005200 <prvInitialiseNewTask+0x144>)
 80051d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	4a0b      	ldr	r2, [pc, #44]	; (8005204 <prvInitialiseNewTask+0x148>)
 80051d6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	69b8      	ldr	r0, [r7, #24]
 80051de:	f001 f941 	bl	8006464 <pxPortInitialiseStack>
 80051e2:	4602      	mov	r2, r0
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051f4:	bf00      	nop
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	0800a13c 	.word	0x0800a13c
 8005200:	0800a15c 	.word	0x0800a15c
 8005204:	0800a11c 	.word	0x0800a11c

08005208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005210:	f001 fa58 	bl	80066c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005214:	4b2d      	ldr	r3, [pc, #180]	; (80052cc <prvAddNewTaskToReadyList+0xc4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3301      	adds	r3, #1
 800521a:	4a2c      	ldr	r2, [pc, #176]	; (80052cc <prvAddNewTaskToReadyList+0xc4>)
 800521c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800521e:	4b2c      	ldr	r3, [pc, #176]	; (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005226:	4a2a      	ldr	r2, [pc, #168]	; (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800522c:	4b27      	ldr	r3, [pc, #156]	; (80052cc <prvAddNewTaskToReadyList+0xc4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d110      	bne.n	8005256 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005234:	f000 fc26 	bl	8005a84 <prvInitialiseTaskLists>
 8005238:	e00d      	b.n	8005256 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800523a:	4b26      	ldr	r3, [pc, #152]	; (80052d4 <prvAddNewTaskToReadyList+0xcc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005242:	4b23      	ldr	r3, [pc, #140]	; (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	429a      	cmp	r2, r3
 800524e:	d802      	bhi.n	8005256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005250:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005256:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <prvAddNewTaskToReadyList+0xd0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	4a1e      	ldr	r2, [pc, #120]	; (80052d8 <prvAddNewTaskToReadyList+0xd0>)
 800525e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <prvAddNewTaskToReadyList+0xd0>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <prvAddNewTaskToReadyList+0xd4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d903      	bls.n	800527c <prvAddNewTaskToReadyList+0x74>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	4a18      	ldr	r2, [pc, #96]	; (80052dc <prvAddNewTaskToReadyList+0xd4>)
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <prvAddNewTaskToReadyList+0xd8>)
 800528a:	441a      	add	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3304      	adds	r3, #4
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f7ff f843 	bl	800431e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005298:	f001 fa44 	bl	8006724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800529c:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <prvAddNewTaskToReadyList+0xcc>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00e      	beq.n	80052c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052a4:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d207      	bcs.n	80052c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052b2:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <prvAddNewTaskToReadyList+0xdc>)
 80052b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000f80 	.word	0x20000f80
 80052d0:	20000aac 	.word	0x20000aac
 80052d4:	20000f8c 	.word	0x20000f8c
 80052d8:	20000f9c 	.word	0x20000f9c
 80052dc:	20000f88 	.word	0x20000f88
 80052e0:	20000ab0 	.word	0x20000ab0
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d017      	beq.n	800532a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052fa:	4b13      	ldr	r3, [pc, #76]	; (8005348 <vTaskDelay+0x60>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <vTaskDelay+0x30>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	60bb      	str	r3, [r7, #8]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005318:	f000 f88a 	bl	8005430 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800531c:	2100      	movs	r1, #0
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fcfe 	bl	8005d20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005324:	f000 f892 	bl	800544c <xTaskResumeAll>
 8005328:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d107      	bne.n	8005340 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <vTaskDelay+0x64>)
 8005332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000fa8 	.word	0x20000fa8
 800534c:	e000ed04 	.word	0xe000ed04

08005350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800535e:	463a      	mov	r2, r7
 8005360:	1d39      	adds	r1, r7, #4
 8005362:	f107 0308 	add.w	r3, r7, #8
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe ff78 	bl	800425c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800536c:	6839      	ldr	r1, [r7, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	9202      	str	r2, [sp, #8]
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	2300      	movs	r3, #0
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	2300      	movs	r3, #0
 800537c:	460a      	mov	r2, r1
 800537e:	4924      	ldr	r1, [pc, #144]	; (8005410 <vTaskStartScheduler+0xc0>)
 8005380:	4824      	ldr	r0, [pc, #144]	; (8005414 <vTaskStartScheduler+0xc4>)
 8005382:	f7ff fdf9 	bl	8004f78 <xTaskCreateStatic>
 8005386:	4603      	mov	r3, r0
 8005388:	4a23      	ldr	r2, [pc, #140]	; (8005418 <vTaskStartScheduler+0xc8>)
 800538a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800538c:	4b22      	ldr	r3, [pc, #136]	; (8005418 <vTaskStartScheduler+0xc8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005394:	2301      	movs	r3, #1
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e001      	b.n	800539e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d102      	bne.n	80053aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053a4:	f000 fd10 	bl	8005dc8 <xTimerCreateTimerTask>
 80053a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d11b      	bne.n	80053e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	613b      	str	r3, [r7, #16]
}
 80053c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053c4:	4b15      	ldr	r3, [pc, #84]	; (800541c <vTaskStartScheduler+0xcc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3354      	adds	r3, #84	; 0x54
 80053ca:	4a15      	ldr	r2, [pc, #84]	; (8005420 <vTaskStartScheduler+0xd0>)
 80053cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053ce:	4b15      	ldr	r3, [pc, #84]	; (8005424 <vTaskStartScheduler+0xd4>)
 80053d0:	f04f 32ff 	mov.w	r2, #4294967295
 80053d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <vTaskStartScheduler+0xd8>)
 80053d8:	2201      	movs	r2, #1
 80053da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053dc:	4b13      	ldr	r3, [pc, #76]	; (800542c <vTaskStartScheduler+0xdc>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053e2:	f001 f8cd 	bl	8006580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053e6:	e00e      	b.n	8005406 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ee:	d10a      	bne.n	8005406 <vTaskStartScheduler+0xb6>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	60fb      	str	r3, [r7, #12]
}
 8005402:	bf00      	nop
 8005404:	e7fe      	b.n	8005404 <vTaskStartScheduler+0xb4>
}
 8005406:	bf00      	nop
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	080077c4 	.word	0x080077c4
 8005414:	08005a55 	.word	0x08005a55
 8005418:	20000fa4 	.word	0x20000fa4
 800541c:	20000aac 	.word	0x20000aac
 8005420:	200000a0 	.word	0x200000a0
 8005424:	20000fa0 	.word	0x20000fa0
 8005428:	20000f8c 	.word	0x20000f8c
 800542c:	20000f84 	.word	0x20000f84

08005430 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005434:	4b04      	ldr	r3, [pc, #16]	; (8005448 <vTaskSuspendAll+0x18>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	4a03      	ldr	r2, [pc, #12]	; (8005448 <vTaskSuspendAll+0x18>)
 800543c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800543e:	bf00      	nop
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	20000fa8 	.word	0x20000fa8

0800544c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005456:	2300      	movs	r3, #0
 8005458:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800545a:	4b42      	ldr	r3, [pc, #264]	; (8005564 <xTaskResumeAll+0x118>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <xTaskResumeAll+0x2c>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	603b      	str	r3, [r7, #0]
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005478:	f001 f924 	bl	80066c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800547c:	4b39      	ldr	r3, [pc, #228]	; (8005564 <xTaskResumeAll+0x118>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	4a38      	ldr	r2, [pc, #224]	; (8005564 <xTaskResumeAll+0x118>)
 8005484:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005486:	4b37      	ldr	r3, [pc, #220]	; (8005564 <xTaskResumeAll+0x118>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d162      	bne.n	8005554 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800548e:	4b36      	ldr	r3, [pc, #216]	; (8005568 <xTaskResumeAll+0x11c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d05e      	beq.n	8005554 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005496:	e02f      	b.n	80054f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005498:	4b34      	ldr	r3, [pc, #208]	; (800556c <xTaskResumeAll+0x120>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3318      	adds	r3, #24
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fe ff97 	bl	80043d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe ff92 	bl	80043d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b8:	4b2d      	ldr	r3, [pc, #180]	; (8005570 <xTaskResumeAll+0x124>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d903      	bls.n	80054c8 <xTaskResumeAll+0x7c>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	4a2a      	ldr	r2, [pc, #168]	; (8005570 <xTaskResumeAll+0x124>)
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4a27      	ldr	r2, [pc, #156]	; (8005574 <xTaskResumeAll+0x128>)
 80054d6:	441a      	add	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3304      	adds	r3, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f7fe ff1d 	bl	800431e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e8:	4b23      	ldr	r3, [pc, #140]	; (8005578 <xTaskResumeAll+0x12c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d302      	bcc.n	80054f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80054f2:	4b22      	ldr	r3, [pc, #136]	; (800557c <xTaskResumeAll+0x130>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054f8:	4b1c      	ldr	r3, [pc, #112]	; (800556c <xTaskResumeAll+0x120>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1cb      	bne.n	8005498 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005506:	f000 fb5f 	bl	8005bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800550a:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <xTaskResumeAll+0x134>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d010      	beq.n	8005538 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005516:	f000 f847 	bl	80055a8 <xTaskIncrementTick>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005520:	4b16      	ldr	r3, [pc, #88]	; (800557c <xTaskResumeAll+0x130>)
 8005522:	2201      	movs	r2, #1
 8005524:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3b01      	subs	r3, #1
 800552a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f1      	bne.n	8005516 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005532:	4b13      	ldr	r3, [pc, #76]	; (8005580 <xTaskResumeAll+0x134>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005538:	4b10      	ldr	r3, [pc, #64]	; (800557c <xTaskResumeAll+0x130>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d009      	beq.n	8005554 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005540:	2301      	movs	r3, #1
 8005542:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005544:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <xTaskResumeAll+0x138>)
 8005546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005554:	f001 f8e6 	bl	8006724 <vPortExitCritical>

	return xAlreadyYielded;
 8005558:	68bb      	ldr	r3, [r7, #8]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000fa8 	.word	0x20000fa8
 8005568:	20000f80 	.word	0x20000f80
 800556c:	20000f40 	.word	0x20000f40
 8005570:	20000f88 	.word	0x20000f88
 8005574:	20000ab0 	.word	0x20000ab0
 8005578:	20000aac 	.word	0x20000aac
 800557c:	20000f94 	.word	0x20000f94
 8005580:	20000f90 	.word	0x20000f90
 8005584:	e000ed04 	.word	0xe000ed04

08005588 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800558e:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <xTaskGetTickCount+0x1c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005594:	687b      	ldr	r3, [r7, #4]
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000f84 	.word	0x20000f84

080055a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b2:	4b4f      	ldr	r3, [pc, #316]	; (80056f0 <xTaskIncrementTick+0x148>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f040 808f 	bne.w	80056da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055bc:	4b4d      	ldr	r3, [pc, #308]	; (80056f4 <xTaskIncrementTick+0x14c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3301      	adds	r3, #1
 80055c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055c4:	4a4b      	ldr	r2, [pc, #300]	; (80056f4 <xTaskIncrementTick+0x14c>)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d120      	bne.n	8005612 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055d0:	4b49      	ldr	r3, [pc, #292]	; (80056f8 <xTaskIncrementTick+0x150>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	603b      	str	r3, [r7, #0]
}
 80055ec:	bf00      	nop
 80055ee:	e7fe      	b.n	80055ee <xTaskIncrementTick+0x46>
 80055f0:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <xTaskIncrementTick+0x150>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	4b41      	ldr	r3, [pc, #260]	; (80056fc <xTaskIncrementTick+0x154>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a3f      	ldr	r2, [pc, #252]	; (80056f8 <xTaskIncrementTick+0x150>)
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	4a3f      	ldr	r2, [pc, #252]	; (80056fc <xTaskIncrementTick+0x154>)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	4b3e      	ldr	r3, [pc, #248]	; (8005700 <xTaskIncrementTick+0x158>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3301      	adds	r3, #1
 800560a:	4a3d      	ldr	r2, [pc, #244]	; (8005700 <xTaskIncrementTick+0x158>)
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	f000 fadb 	bl	8005bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005612:	4b3c      	ldr	r3, [pc, #240]	; (8005704 <xTaskIncrementTick+0x15c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	429a      	cmp	r2, r3
 800561a:	d349      	bcc.n	80056b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800561c:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <xTaskIncrementTick+0x150>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005626:	4b37      	ldr	r3, [pc, #220]	; (8005704 <xTaskIncrementTick+0x15c>)
 8005628:	f04f 32ff 	mov.w	r2, #4294967295
 800562c:	601a      	str	r2, [r3, #0]
					break;
 800562e:	e03f      	b.n	80056b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005630:	4b31      	ldr	r3, [pc, #196]	; (80056f8 <xTaskIncrementTick+0x150>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	429a      	cmp	r2, r3
 8005646:	d203      	bcs.n	8005650 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005648:	4a2e      	ldr	r2, [pc, #184]	; (8005704 <xTaskIncrementTick+0x15c>)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800564e:	e02f      	b.n	80056b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	3304      	adds	r3, #4
 8005654:	4618      	mov	r0, r3
 8005656:	f7fe febf 	bl	80043d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	3318      	adds	r3, #24
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe feb6 	bl	80043d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	4b25      	ldr	r3, [pc, #148]	; (8005708 <xTaskIncrementTick+0x160>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d903      	bls.n	8005680 <xTaskIncrementTick+0xd8>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	4a22      	ldr	r2, [pc, #136]	; (8005708 <xTaskIncrementTick+0x160>)
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4a1f      	ldr	r2, [pc, #124]	; (800570c <xTaskIncrementTick+0x164>)
 800568e:	441a      	add	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	3304      	adds	r3, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f7fe fe41 	bl	800431e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <xTaskIncrementTick+0x168>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d3b8      	bcc.n	800561c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80056aa:	2301      	movs	r3, #1
 80056ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ae:	e7b5      	b.n	800561c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056b0:	4b17      	ldr	r3, [pc, #92]	; (8005710 <xTaskIncrementTick+0x168>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b6:	4915      	ldr	r1, [pc, #84]	; (800570c <xTaskIncrementTick+0x164>)
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d901      	bls.n	80056cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80056c8:	2301      	movs	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80056cc:	4b11      	ldr	r3, [pc, #68]	; (8005714 <xTaskIncrementTick+0x16c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e004      	b.n	80056e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056da:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <xTaskIncrementTick+0x170>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3301      	adds	r3, #1
 80056e0:	4a0d      	ldr	r2, [pc, #52]	; (8005718 <xTaskIncrementTick+0x170>)
 80056e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056e4:	697b      	ldr	r3, [r7, #20]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000fa8 	.word	0x20000fa8
 80056f4:	20000f84 	.word	0x20000f84
 80056f8:	20000f38 	.word	0x20000f38
 80056fc:	20000f3c 	.word	0x20000f3c
 8005700:	20000f98 	.word	0x20000f98
 8005704:	20000fa0 	.word	0x20000fa0
 8005708:	20000f88 	.word	0x20000f88
 800570c:	20000ab0 	.word	0x20000ab0
 8005710:	20000aac 	.word	0x20000aac
 8005714:	20000f94 	.word	0x20000f94
 8005718:	20000f90 	.word	0x20000f90

0800571c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005722:	4b2a      	ldr	r3, [pc, #168]	; (80057cc <vTaskSwitchContext+0xb0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800572a:	4b29      	ldr	r3, [pc, #164]	; (80057d0 <vTaskSwitchContext+0xb4>)
 800572c:	2201      	movs	r2, #1
 800572e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005730:	e046      	b.n	80057c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005732:	4b27      	ldr	r3, [pc, #156]	; (80057d0 <vTaskSwitchContext+0xb4>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005738:	4b26      	ldr	r3, [pc, #152]	; (80057d4 <vTaskSwitchContext+0xb8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	e010      	b.n	8005762 <vTaskSwitchContext+0x46>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <vTaskSwitchContext+0x40>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	607b      	str	r3, [r7, #4]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <vTaskSwitchContext+0x3e>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3b01      	subs	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	491d      	ldr	r1, [pc, #116]	; (80057d8 <vTaskSwitchContext+0xbc>)
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0e4      	beq.n	8005740 <vTaskSwitchContext+0x24>
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <vTaskSwitchContext+0xbc>)
 8005782:	4413      	add	r3, r2
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	605a      	str	r2, [r3, #4]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3308      	adds	r3, #8
 8005798:	429a      	cmp	r2, r3
 800579a:	d104      	bne.n	80057a6 <vTaskSwitchContext+0x8a>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	4a0b      	ldr	r2, [pc, #44]	; (80057dc <vTaskSwitchContext+0xc0>)
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <vTaskSwitchContext+0xb8>)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <vTaskSwitchContext+0xc0>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3354      	adds	r3, #84	; 0x54
 80057bc:	4a08      	ldr	r2, [pc, #32]	; (80057e0 <vTaskSwitchContext+0xc4>)
 80057be:	6013      	str	r3, [r2, #0]
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000fa8 	.word	0x20000fa8
 80057d0:	20000f94 	.word	0x20000f94
 80057d4:	20000f88 	.word	0x20000f88
 80057d8:	20000ab0 	.word	0x20000ab0
 80057dc:	20000aac 	.word	0x20000aac
 80057e0:	200000a0 	.word	0x200000a0

080057e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	60fb      	str	r3, [r7, #12]
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800580a:	4b07      	ldr	r3, [pc, #28]	; (8005828 <vTaskPlaceOnEventList+0x44>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3318      	adds	r3, #24
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fe fda7 	bl	8004366 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005818:	2101      	movs	r1, #1
 800581a:	6838      	ldr	r0, [r7, #0]
 800581c:	f000 fa80 	bl	8005d20 <prvAddCurrentTaskToDelayedList>
}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000aac 	.word	0x20000aac

0800582c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	617b      	str	r3, [r7, #20]
}
 8005850:	bf00      	nop
 8005852:	e7fe      	b.n	8005852 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <vTaskPlaceOnEventListRestricted+0x54>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3318      	adds	r3, #24
 800585a:	4619      	mov	r1, r3
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7fe fd5e 	bl	800431e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005868:	f04f 33ff 	mov.w	r3, #4294967295
 800586c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	68b8      	ldr	r0, [r7, #8]
 8005872:	f000 fa55 	bl	8005d20 <prvAddCurrentTaskToDelayedList>
	}
 8005876:	bf00      	nop
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000aac 	.word	0x20000aac

08005884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	60fb      	str	r3, [r7, #12]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	3318      	adds	r3, #24
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe fd8f 	bl	80043d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ba:	4b1e      	ldr	r3, [pc, #120]	; (8005934 <xTaskRemoveFromEventList+0xb0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d11d      	bne.n	80058fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	3304      	adds	r3, #4
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe fd86 	bl	80043d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d0:	4b19      	ldr	r3, [pc, #100]	; (8005938 <xTaskRemoveFromEventList+0xb4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d903      	bls.n	80058e0 <xTaskRemoveFromEventList+0x5c>
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	4a16      	ldr	r2, [pc, #88]	; (8005938 <xTaskRemoveFromEventList+0xb4>)
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4a13      	ldr	r2, [pc, #76]	; (800593c <xTaskRemoveFromEventList+0xb8>)
 80058ee:	441a      	add	r2, r3
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4619      	mov	r1, r3
 80058f6:	4610      	mov	r0, r2
 80058f8:	f7fe fd11 	bl	800431e <vListInsertEnd>
 80058fc:	e005      	b.n	800590a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	3318      	adds	r3, #24
 8005902:	4619      	mov	r1, r3
 8005904:	480e      	ldr	r0, [pc, #56]	; (8005940 <xTaskRemoveFromEventList+0xbc>)
 8005906:	f7fe fd0a 	bl	800431e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590e:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <xTaskRemoveFromEventList+0xc0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	429a      	cmp	r2, r3
 8005916:	d905      	bls.n	8005924 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005918:	2301      	movs	r3, #1
 800591a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <xTaskRemoveFromEventList+0xc4>)
 800591e:	2201      	movs	r2, #1
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e001      	b.n	8005928 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005928:	697b      	ldr	r3, [r7, #20]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000fa8 	.word	0x20000fa8
 8005938:	20000f88 	.word	0x20000f88
 800593c:	20000ab0 	.word	0x20000ab0
 8005940:	20000f40 	.word	0x20000f40
 8005944:	20000aac 	.word	0x20000aac
 8005948:	20000f94 	.word	0x20000f94

0800594c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <vTaskInternalSetTimeOutState+0x24>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <vTaskInternalSetTimeOutState+0x28>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	605a      	str	r2, [r3, #4]
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20000f98 	.word	0x20000f98
 8005974:	20000f84 	.word	0x20000f84

08005978 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	613b      	str	r3, [r7, #16]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	60fb      	str	r3, [r7, #12]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80059ba:	f000 fe83 	bl	80066c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059be:	4b1d      	ldr	r3, [pc, #116]	; (8005a34 <xTaskCheckForTimeOut+0xbc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d102      	bne.n	80059de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059d8:	2300      	movs	r3, #0
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	e023      	b.n	8005a26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <xTaskCheckForTimeOut+0xc0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d007      	beq.n	80059fa <xTaskCheckForTimeOut+0x82>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d302      	bcc.n	80059fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	61fb      	str	r3, [r7, #28]
 80059f8:	e015      	b.n	8005a26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d20b      	bcs.n	8005a1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad2      	subs	r2, r2, r3
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ff9b 	bl	800594c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
 8005a1a:	e004      	b.n	8005a26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a22:	2301      	movs	r3, #1
 8005a24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a26:	f000 fe7d 	bl	8006724 <vPortExitCritical>

	return xReturn;
 8005a2a:	69fb      	ldr	r3, [r7, #28]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3720      	adds	r7, #32
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20000f84 	.word	0x20000f84
 8005a38:	20000f98 	.word	0x20000f98

08005a3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a40:	4b03      	ldr	r3, [pc, #12]	; (8005a50 <vTaskMissedYield+0x14>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	601a      	str	r2, [r3, #0]
}
 8005a46:	bf00      	nop
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	20000f94 	.word	0x20000f94

08005a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a5c:	f000 f852 	bl	8005b04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a60:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <prvIdleTask+0x28>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d9f9      	bls.n	8005a5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <prvIdleTask+0x2c>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a78:	e7f0      	b.n	8005a5c <prvIdleTask+0x8>
 8005a7a:	bf00      	nop
 8005a7c:	20000ab0 	.word	0x20000ab0
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	e00c      	b.n	8005aaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4a12      	ldr	r2, [pc, #72]	; (8005ae4 <prvInitialiseTaskLists+0x60>)
 8005a9c:	4413      	add	r3, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fc10 	bl	80042c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b37      	cmp	r3, #55	; 0x37
 8005aae:	d9ef      	bls.n	8005a90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ab0:	480d      	ldr	r0, [pc, #52]	; (8005ae8 <prvInitialiseTaskLists+0x64>)
 8005ab2:	f7fe fc07 	bl	80042c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ab6:	480d      	ldr	r0, [pc, #52]	; (8005aec <prvInitialiseTaskLists+0x68>)
 8005ab8:	f7fe fc04 	bl	80042c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005abc:	480c      	ldr	r0, [pc, #48]	; (8005af0 <prvInitialiseTaskLists+0x6c>)
 8005abe:	f7fe fc01 	bl	80042c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ac2:	480c      	ldr	r0, [pc, #48]	; (8005af4 <prvInitialiseTaskLists+0x70>)
 8005ac4:	f7fe fbfe 	bl	80042c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ac8:	480b      	ldr	r0, [pc, #44]	; (8005af8 <prvInitialiseTaskLists+0x74>)
 8005aca:	f7fe fbfb 	bl	80042c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ace:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <prvInitialiseTaskLists+0x78>)
 8005ad0:	4a05      	ldr	r2, [pc, #20]	; (8005ae8 <prvInitialiseTaskLists+0x64>)
 8005ad2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <prvInitialiseTaskLists+0x7c>)
 8005ad6:	4a05      	ldr	r2, [pc, #20]	; (8005aec <prvInitialiseTaskLists+0x68>)
 8005ad8:	601a      	str	r2, [r3, #0]
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000ab0 	.word	0x20000ab0
 8005ae8:	20000f10 	.word	0x20000f10
 8005aec:	20000f24 	.word	0x20000f24
 8005af0:	20000f40 	.word	0x20000f40
 8005af4:	20000f54 	.word	0x20000f54
 8005af8:	20000f6c 	.word	0x20000f6c
 8005afc:	20000f38 	.word	0x20000f38
 8005b00:	20000f3c 	.word	0x20000f3c

08005b04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b0a:	e019      	b.n	8005b40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b0c:	f000 fdda 	bl	80066c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b10:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <prvCheckTasksWaitingTermination+0x50>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe fc5b 	bl	80043d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b22:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <prvCheckTasksWaitingTermination+0x54>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	4a0b      	ldr	r2, [pc, #44]	; (8005b58 <prvCheckTasksWaitingTermination+0x54>)
 8005b2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <prvCheckTasksWaitingTermination+0x58>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <prvCheckTasksWaitingTermination+0x58>)
 8005b34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b36:	f000 fdf5 	bl	8006724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f810 	bl	8005b60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b40:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <prvCheckTasksWaitingTermination+0x58>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e1      	bne.n	8005b0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000f54 	.word	0x20000f54
 8005b58:	20000f80 	.word	0x20000f80
 8005b5c:	20000f68 	.word	0x20000f68

08005b60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3354      	adds	r3, #84	; 0x54
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 f9e5 	bl	8006f3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d108      	bne.n	8005b8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 ff8d 	bl	8006aa0 <vPortFree>
				vPortFree( pxTCB );
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 ff8a 	bl	8006aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b8c:	e018      	b.n	8005bc0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d103      	bne.n	8005ba0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 ff81 	bl	8006aa0 <vPortFree>
	}
 8005b9e:	e00f      	b.n	8005bc0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d00a      	beq.n	8005bc0 <prvDeleteTCB+0x60>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	60fb      	str	r3, [r7, #12]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <prvDeleteTCB+0x5e>
	}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bce:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <prvResetNextTaskUnblockTime+0x38>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d104      	bne.n	8005be2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <prvResetNextTaskUnblockTime+0x3c>)
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295
 8005bde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005be0:	e008      	b.n	8005bf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be2:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <prvResetNextTaskUnblockTime+0x38>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4a04      	ldr	r2, [pc, #16]	; (8005c04 <prvResetNextTaskUnblockTime+0x3c>)
 8005bf2:	6013      	str	r3, [r2, #0]
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	20000f38 	.word	0x20000f38
 8005c04:	20000fa0 	.word	0x20000fa0

08005c08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <xTaskGetSchedulerState+0x34>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d102      	bne.n	8005c1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c16:	2301      	movs	r3, #1
 8005c18:	607b      	str	r3, [r7, #4]
 8005c1a:	e008      	b.n	8005c2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c1c:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <xTaskGetSchedulerState+0x38>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c24:	2302      	movs	r3, #2
 8005c26:	607b      	str	r3, [r7, #4]
 8005c28:	e001      	b.n	8005c2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c2e:	687b      	ldr	r3, [r7, #4]
	}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	20000f8c 	.word	0x20000f8c
 8005c40:	20000fa8 	.word	0x20000fa8

08005c44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d056      	beq.n	8005d08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c5a:	4b2e      	ldr	r3, [pc, #184]	; (8005d14 <xTaskPriorityDisinherit+0xd0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d00a      	beq.n	8005c7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	60fb      	str	r3, [r7, #12]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	60bb      	str	r3, [r7, #8]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9c:	1e5a      	subs	r2, r3, #1
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d02c      	beq.n	8005d08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d128      	bne.n	8005d08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe fb8c 	bl	80043d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <xTaskPriorityDisinherit+0xd4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d903      	bls.n	8005ce8 <xTaskPriorityDisinherit+0xa4>
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	4a0c      	ldr	r2, [pc, #48]	; (8005d18 <xTaskPriorityDisinherit+0xd4>)
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <xTaskPriorityDisinherit+0xd8>)
 8005cf6:	441a      	add	r2, r3
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	f7fe fb0d 	bl	800431e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d04:	2301      	movs	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d08:	697b      	ldr	r3, [r7, #20]
	}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000aac 	.word	0x20000aac
 8005d18:	20000f88 	.word	0x20000f88
 8005d1c:	20000ab0 	.word	0x20000ab0

08005d20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d2a:	4b21      	ldr	r3, [pc, #132]	; (8005db0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d30:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fb4e 	bl	80043d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d42:	d10a      	bne.n	8005d5a <prvAddCurrentTaskToDelayedList+0x3a>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d4a:	4b1a      	ldr	r3, [pc, #104]	; (8005db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4819      	ldr	r0, [pc, #100]	; (8005db8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d54:	f7fe fae3 	bl	800431e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d58:	e026      	b.n	8005da8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4413      	add	r3, r2
 8005d60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d62:	4b14      	ldr	r3, [pc, #80]	; (8005db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d209      	bcs.n	8005d86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d72:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f7fe faf1 	bl	8004366 <vListInsert>
}
 8005d84:	e010      	b.n	8005da8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d86:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f7fe fae7 	bl	8004366 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d202      	bcs.n	8005da8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005da2:	4a08      	ldr	r2, [pc, #32]	; (8005dc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	6013      	str	r3, [r2, #0]
}
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000f84 	.word	0x20000f84
 8005db4:	20000aac 	.word	0x20000aac
 8005db8:	20000f6c 	.word	0x20000f6c
 8005dbc:	20000f3c 	.word	0x20000f3c
 8005dc0:	20000f38 	.word	0x20000f38
 8005dc4:	20000fa0 	.word	0x20000fa0

08005dc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	; 0x28
 8005dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005dd2:	f000 fb07 	bl	80063e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005dd6:	4b1c      	ldr	r3, [pc, #112]	; (8005e48 <xTimerCreateTimerTask+0x80>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d021      	beq.n	8005e22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005de6:	1d3a      	adds	r2, r7, #4
 8005de8:	f107 0108 	add.w	r1, r7, #8
 8005dec:	f107 030c 	add.w	r3, r7, #12
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fe fa4d 	bl	8004290 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	9202      	str	r2, [sp, #8]
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	2302      	movs	r3, #2
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2300      	movs	r3, #0
 8005e06:	460a      	mov	r2, r1
 8005e08:	4910      	ldr	r1, [pc, #64]	; (8005e4c <xTimerCreateTimerTask+0x84>)
 8005e0a:	4811      	ldr	r0, [pc, #68]	; (8005e50 <xTimerCreateTimerTask+0x88>)
 8005e0c:	f7ff f8b4 	bl	8004f78 <xTaskCreateStatic>
 8005e10:	4603      	mov	r3, r0
 8005e12:	4a10      	ldr	r2, [pc, #64]	; (8005e54 <xTimerCreateTimerTask+0x8c>)
 8005e14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e16:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <xTimerCreateTimerTask+0x8c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	613b      	str	r3, [r7, #16]
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e3e:	697b      	ldr	r3, [r7, #20]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000fdc 	.word	0x20000fdc
 8005e4c:	080077cc 	.word	0x080077cc
 8005e50:	08005f8d 	.word	0x08005f8d
 8005e54:	20000fe0 	.word	0x20000fe0

08005e58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	623b      	str	r3, [r7, #32]
}
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e86:	4b1a      	ldr	r3, [pc, #104]	; (8005ef0 <xTimerGenericCommand+0x98>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d02a      	beq.n	8005ee4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b05      	cmp	r3, #5
 8005e9e:	dc18      	bgt.n	8005ed2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ea0:	f7ff feb2 	bl	8005c08 <xTaskGetSchedulerState>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d109      	bne.n	8005ebe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005eaa:	4b11      	ldr	r3, [pc, #68]	; (8005ef0 <xTimerGenericCommand+0x98>)
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	f107 0110 	add.w	r1, r7, #16
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb6:	f7fe fbf7 	bl	80046a8 <xQueueGenericSend>
 8005eba:	6278      	str	r0, [r7, #36]	; 0x24
 8005ebc:	e012      	b.n	8005ee4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <xTimerGenericCommand+0x98>)
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	f107 0110 	add.w	r1, r7, #16
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f7fe fbed 	bl	80046a8 <xQueueGenericSend>
 8005ece:	6278      	str	r0, [r7, #36]	; 0x24
 8005ed0:	e008      	b.n	8005ee4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ed2:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <xTimerGenericCommand+0x98>)
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	f107 0110 	add.w	r1, r7, #16
 8005eda:	2300      	movs	r3, #0
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	f7fe fce1 	bl	80048a4 <xQueueGenericSendFromISR>
 8005ee2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3728      	adds	r7, #40	; 0x28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000fdc 	.word	0x20000fdc

08005ef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efe:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <prvProcessExpiredTimer+0x94>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe fa63 	bl	80043d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d022      	beq.n	8005f66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	699a      	ldr	r2, [r3, #24]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	18d1      	adds	r1, r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	6978      	ldr	r0, [r7, #20]
 8005f2e:	f000 f8d1 	bl	80060d4 <prvInsertTimerInActiveList>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01f      	beq.n	8005f78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f38:	2300      	movs	r3, #0
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	2100      	movs	r1, #0
 8005f42:	6978      	ldr	r0, [r7, #20]
 8005f44:	f7ff ff88 	bl	8005e58 <xTimerGenericCommand>
 8005f48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d113      	bne.n	8005f78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	60fb      	str	r3, [r7, #12]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	6978      	ldr	r0, [r7, #20]
 8005f7e:	4798      	blx	r3
}
 8005f80:	bf00      	nop
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20000fd4 	.word	0x20000fd4

08005f8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 f857 	bl	800604c <prvGetNextExpireTime>
 8005f9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f803 	bl	8005fb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005faa:	f000 f8d5 	bl	8006158 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fae:	e7f1      	b.n	8005f94 <prvTimerTask+0x8>

08005fb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fba:	f7ff fa39 	bl	8005430 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fbe:	f107 0308 	add.w	r3, r7, #8
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f866 	bl	8006094 <prvSampleTimeNow>
 8005fc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d130      	bne.n	8006032 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <prvProcessTimerOrBlockTask+0x3c>
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d806      	bhi.n	8005fec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fde:	f7ff fa35 	bl	800544c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fe2:	68f9      	ldr	r1, [r7, #12]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff ff85 	bl	8005ef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fea:	e024      	b.n	8006036 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ff2:	4b13      	ldr	r3, [pc, #76]	; (8006040 <prvProcessTimerOrBlockTask+0x90>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <prvProcessTimerOrBlockTask+0x50>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <prvProcessTimerOrBlockTask+0x52>
 8006000:	2300      	movs	r3, #0
 8006002:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006004:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <prvProcessTimerOrBlockTask+0x94>)
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	4619      	mov	r1, r3
 8006012:	f7fe ff7d 	bl	8004f10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006016:	f7ff fa19 	bl	800544c <xTaskResumeAll>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006020:	4b09      	ldr	r3, [pc, #36]	; (8006048 <prvProcessTimerOrBlockTask+0x98>)
 8006022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
}
 8006030:	e001      	b.n	8006036 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006032:	f7ff fa0b 	bl	800544c <xTaskResumeAll>
}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000fd8 	.word	0x20000fd8
 8006044:	20000fdc 	.word	0x20000fdc
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006054:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <prvGetNextExpireTime+0x44>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <prvGetNextExpireTime+0x16>
 800605e:	2201      	movs	r2, #1
 8006060:	e000      	b.n	8006064 <prvGetNextExpireTime+0x18>
 8006062:	2200      	movs	r2, #0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d105      	bne.n	800607c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <prvGetNextExpireTime+0x44>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	e001      	b.n	8006080 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006080:	68fb      	ldr	r3, [r7, #12]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20000fd4 	.word	0x20000fd4

08006094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800609c:	f7ff fa74 	bl	8005588 <xTaskGetTickCount>
 80060a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <prvSampleTimeNow+0x3c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d205      	bcs.n	80060b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060ac:	f000 f936 	bl	800631c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e002      	b.n	80060be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060be:	4a04      	ldr	r2, [pc, #16]	; (80060d0 <prvSampleTimeNow+0x3c>)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060c4:	68fb      	ldr	r3, [r7, #12]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000fe4 	.word	0x20000fe4

080060d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d812      	bhi.n	8006120 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	1ad2      	subs	r2, r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	429a      	cmp	r2, r3
 8006106:	d302      	bcc.n	800610e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006108:	2301      	movs	r3, #1
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	e01b      	b.n	8006146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800610e:	4b10      	ldr	r3, [pc, #64]	; (8006150 <prvInsertTimerInActiveList+0x7c>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f7fe f924 	bl	8004366 <vListInsert>
 800611e:	e012      	b.n	8006146 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d206      	bcs.n	8006136 <prvInsertTimerInActiveList+0x62>
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	429a      	cmp	r2, r3
 800612e:	d302      	bcc.n	8006136 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006130:	2301      	movs	r3, #1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	e007      	b.n	8006146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006136:	4b07      	ldr	r3, [pc, #28]	; (8006154 <prvInsertTimerInActiveList+0x80>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f7fe f910 	bl	8004366 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006146:	697b      	ldr	r3, [r7, #20]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000fd8 	.word	0x20000fd8
 8006154:	20000fd4 	.word	0x20000fd4

08006158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08e      	sub	sp, #56	; 0x38
 800615c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800615e:	e0ca      	b.n	80062f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	da18      	bge.n	8006198 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006166:	1d3b      	adds	r3, r7, #4
 8006168:	3304      	adds	r3, #4
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	61fb      	str	r3, [r7, #28]
}
 8006184:	bf00      	nop
 8006186:	e7fe      	b.n	8006186 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800618e:	6850      	ldr	r0, [r2, #4]
 8006190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006192:	6892      	ldr	r2, [r2, #8]
 8006194:	4611      	mov	r1, r2
 8006196:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f2c0 80aa 	blt.w	80062f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d004      	beq.n	80061b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	3304      	adds	r3, #4
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe f911 	bl	80043d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061b6:	463b      	mov	r3, r7
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff ff6b 	bl	8006094 <prvSampleTimeNow>
 80061be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b09      	cmp	r3, #9
 80061c4:	f200 8097 	bhi.w	80062f6 <prvProcessReceivedCommands+0x19e>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <prvProcessReceivedCommands+0x78>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	080061f9 	.word	0x080061f9
 80061d4:	080061f9 	.word	0x080061f9
 80061d8:	080061f9 	.word	0x080061f9
 80061dc:	0800626d 	.word	0x0800626d
 80061e0:	08006281 	.word	0x08006281
 80061e4:	080062cb 	.word	0x080062cb
 80061e8:	080061f9 	.word	0x080061f9
 80061ec:	080061f9 	.word	0x080061f9
 80061f0:	0800626d 	.word	0x0800626d
 80061f4:	08006281 	.word	0x08006281
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061fe:	f043 0301 	orr.w	r3, r3, #1
 8006202:	b2da      	uxtb	r2, r3
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	18d1      	adds	r1, r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006218:	f7ff ff5c 	bl	80060d4 <prvInsertTimerInActiveList>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d069      	beq.n	80062f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006228:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d05e      	beq.n	80062f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	441a      	add	r2, r3
 8006240:	2300      	movs	r3, #0
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	2300      	movs	r3, #0
 8006246:	2100      	movs	r1, #0
 8006248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800624a:	f7ff fe05 	bl	8005e58 <xTimerGenericCommand>
 800624e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d14f      	bne.n	80062f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	61bb      	str	r3, [r7, #24]
}
 8006268:	bf00      	nop
 800626a:	e7fe      	b.n	800626a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	b2da      	uxtb	r2, r3
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800627e:	e03a      	b.n	80062f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006286:	f043 0301 	orr.w	r3, r3, #1
 800628a:	b2da      	uxtb	r2, r3
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	617b      	str	r3, [r7, #20]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	18d1      	adds	r1, r2, r3
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c4:	f7ff ff06 	bl	80060d4 <prvInsertTimerInActiveList>
					break;
 80062c8:	e015      	b.n	80062f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80062d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062da:	f000 fbe1 	bl	8006aa0 <vPortFree>
 80062de:	e00a      	b.n	80062f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062f2:	e000      	b.n	80062f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80062f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062f6:	4b08      	ldr	r3, [pc, #32]	; (8006318 <prvProcessReceivedCommands+0x1c0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	1d39      	adds	r1, r7, #4
 80062fc:	2200      	movs	r2, #0
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe fb6c 	bl	80049dc <xQueueReceive>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	f47f af2a 	bne.w	8006160 <prvProcessReceivedCommands+0x8>
	}
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	3730      	adds	r7, #48	; 0x30
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20000fdc 	.word	0x20000fdc

0800631c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006322:	e048      	b.n	80063b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006324:	4b2d      	ldr	r3, [pc, #180]	; (80063dc <prvSwitchTimerLists+0xc0>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632e:	4b2b      	ldr	r3, [pc, #172]	; (80063dc <prvSwitchTimerLists+0xc0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3304      	adds	r3, #4
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe f84b 	bl	80043d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d02e      	beq.n	80063b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	429a      	cmp	r2, r3
 8006368:	d90e      	bls.n	8006388 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006376:	4b19      	ldr	r3, [pc, #100]	; (80063dc <prvSwitchTimerLists+0xc0>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3304      	adds	r3, #4
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	f7fd fff0 	bl	8004366 <vListInsert>
 8006386:	e016      	b.n	80063b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006388:	2300      	movs	r3, #0
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	2300      	movs	r3, #0
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	2100      	movs	r1, #0
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff fd60 	bl	8005e58 <xTimerGenericCommand>
 8006398:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	603b      	str	r3, [r7, #0]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <prvSwitchTimerLists+0xc0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1b1      	bne.n	8006324 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063c0:	4b06      	ldr	r3, [pc, #24]	; (80063dc <prvSwitchTimerLists+0xc0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <prvSwitchTimerLists+0xc4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a04      	ldr	r2, [pc, #16]	; (80063dc <prvSwitchTimerLists+0xc0>)
 80063cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063ce:	4a04      	ldr	r2, [pc, #16]	; (80063e0 <prvSwitchTimerLists+0xc4>)
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	6013      	str	r3, [r2, #0]
}
 80063d4:	bf00      	nop
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	20000fd4 	.word	0x20000fd4
 80063e0:	20000fd8 	.word	0x20000fd8

080063e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063ea:	f000 f96b 	bl	80066c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063ee:	4b15      	ldr	r3, [pc, #84]	; (8006444 <prvCheckForValidListAndQueue+0x60>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d120      	bne.n	8006438 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063f6:	4814      	ldr	r0, [pc, #80]	; (8006448 <prvCheckForValidListAndQueue+0x64>)
 80063f8:	f7fd ff64 	bl	80042c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063fc:	4813      	ldr	r0, [pc, #76]	; (800644c <prvCheckForValidListAndQueue+0x68>)
 80063fe:	f7fd ff61 	bl	80042c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006402:	4b13      	ldr	r3, [pc, #76]	; (8006450 <prvCheckForValidListAndQueue+0x6c>)
 8006404:	4a10      	ldr	r2, [pc, #64]	; (8006448 <prvCheckForValidListAndQueue+0x64>)
 8006406:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006408:	4b12      	ldr	r3, [pc, #72]	; (8006454 <prvCheckForValidListAndQueue+0x70>)
 800640a:	4a10      	ldr	r2, [pc, #64]	; (800644c <prvCheckForValidListAndQueue+0x68>)
 800640c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800640e:	2300      	movs	r3, #0
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	4b11      	ldr	r3, [pc, #68]	; (8006458 <prvCheckForValidListAndQueue+0x74>)
 8006414:	4a11      	ldr	r2, [pc, #68]	; (800645c <prvCheckForValidListAndQueue+0x78>)
 8006416:	2110      	movs	r1, #16
 8006418:	200a      	movs	r0, #10
 800641a:	f7fe f86f 	bl	80044fc <xQueueGenericCreateStatic>
 800641e:	4603      	mov	r3, r0
 8006420:	4a08      	ldr	r2, [pc, #32]	; (8006444 <prvCheckForValidListAndQueue+0x60>)
 8006422:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006424:	4b07      	ldr	r3, [pc, #28]	; (8006444 <prvCheckForValidListAndQueue+0x60>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d005      	beq.n	8006438 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <prvCheckForValidListAndQueue+0x60>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	490b      	ldr	r1, [pc, #44]	; (8006460 <prvCheckForValidListAndQueue+0x7c>)
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fd42 	bl	8004ebc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006438:	f000 f974 	bl	8006724 <vPortExitCritical>
}
 800643c:	bf00      	nop
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000fdc 	.word	0x20000fdc
 8006448:	20000fac 	.word	0x20000fac
 800644c:	20000fc0 	.word	0x20000fc0
 8006450:	20000fd4 	.word	0x20000fd4
 8006454:	20000fd8 	.word	0x20000fd8
 8006458:	20001088 	.word	0x20001088
 800645c:	20000fe8 	.word	0x20000fe8
 8006460:	080077d4 	.word	0x080077d4

08006464 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3b04      	subs	r3, #4
 8006474:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800647c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3b04      	subs	r3, #4
 8006482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f023 0201 	bic.w	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3b04      	subs	r3, #4
 8006492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006494:	4a0c      	ldr	r2, [pc, #48]	; (80064c8 <pxPortInitialiseStack+0x64>)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3b14      	subs	r3, #20
 800649e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3b04      	subs	r3, #4
 80064aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f06f 0202 	mvn.w	r2, #2
 80064b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3b20      	subs	r3, #32
 80064b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064ba:	68fb      	ldr	r3, [r7, #12]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	080064cd 	.word	0x080064cd

080064cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064d6:	4b12      	ldr	r3, [pc, #72]	; (8006520 <prvTaskExitError+0x54>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064de:	d00a      	beq.n	80064f6 <prvTaskExitError+0x2a>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60fb      	str	r3, [r7, #12]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <prvTaskExitError+0x28>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	60bb      	str	r3, [r7, #8]
}
 8006508:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800650a:	bf00      	nop
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0fc      	beq.n	800650c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006512:	bf00      	nop
 8006514:	bf00      	nop
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	2000009c 	.word	0x2000009c
	...

08006530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <pxCurrentTCBConst2>)
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	f380 8809 	msr	PSP, r0
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f380 8811 	msr	BASEPRI, r0
 800654a:	4770      	bx	lr
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst2>:
 8006550:	20000aac 	.word	0x20000aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop

08006558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006558:	4808      	ldr	r0, [pc, #32]	; (800657c <prvPortStartFirstTask+0x24>)
 800655a:	6800      	ldr	r0, [r0, #0]
 800655c:	6800      	ldr	r0, [r0, #0]
 800655e:	f380 8808 	msr	MSP, r0
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f380 8814 	msr	CONTROL, r0
 800656a:	b662      	cpsie	i
 800656c:	b661      	cpsie	f
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	df00      	svc	0
 8006578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800657a:	bf00      	nop
 800657c:	e000ed08 	.word	0xe000ed08

08006580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006586:	4b46      	ldr	r3, [pc, #280]	; (80066a0 <xPortStartScheduler+0x120>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a46      	ldr	r2, [pc, #280]	; (80066a4 <xPortStartScheduler+0x124>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10a      	bne.n	80065a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	613b      	str	r3, [r7, #16]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065a6:	4b3e      	ldr	r3, [pc, #248]	; (80066a0 <xPortStartScheduler+0x120>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a3f      	ldr	r2, [pc, #252]	; (80066a8 <xPortStartScheduler+0x128>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d10a      	bne.n	80065c6 <xPortStartScheduler+0x46>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	60fb      	str	r3, [r7, #12]
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065c6:	4b39      	ldr	r3, [pc, #228]	; (80066ac <xPortStartScheduler+0x12c>)
 80065c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	22ff      	movs	r2, #255	; 0xff
 80065d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	4b31      	ldr	r3, [pc, #196]	; (80066b0 <xPortStartScheduler+0x130>)
 80065ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065ee:	4b31      	ldr	r3, [pc, #196]	; (80066b4 <xPortStartScheduler+0x134>)
 80065f0:	2207      	movs	r2, #7
 80065f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065f4:	e009      	b.n	800660a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065f6:	4b2f      	ldr	r3, [pc, #188]	; (80066b4 <xPortStartScheduler+0x134>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	4a2d      	ldr	r2, [pc, #180]	; (80066b4 <xPortStartScheduler+0x134>)
 80065fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	b2db      	uxtb	r3, r3
 8006608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006612:	2b80      	cmp	r3, #128	; 0x80
 8006614:	d0ef      	beq.n	80065f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006616:	4b27      	ldr	r3, [pc, #156]	; (80066b4 <xPortStartScheduler+0x134>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1c3 0307 	rsb	r3, r3, #7
 800661e:	2b04      	cmp	r3, #4
 8006620:	d00a      	beq.n	8006638 <xPortStartScheduler+0xb8>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	60bb      	str	r3, [r7, #8]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006638:	4b1e      	ldr	r3, [pc, #120]	; (80066b4 <xPortStartScheduler+0x134>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	4a1d      	ldr	r2, [pc, #116]	; (80066b4 <xPortStartScheduler+0x134>)
 8006640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006642:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <xPortStartScheduler+0x134>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800664a:	4a1a      	ldr	r2, [pc, #104]	; (80066b4 <xPortStartScheduler+0x134>)
 800664c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	b2da      	uxtb	r2, r3
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006656:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <xPortStartScheduler+0x138>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a17      	ldr	r2, [pc, #92]	; (80066b8 <xPortStartScheduler+0x138>)
 800665c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006662:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <xPortStartScheduler+0x138>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <xPortStartScheduler+0x138>)
 8006668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800666c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800666e:	f000 f8dd 	bl	800682c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006672:	4b12      	ldr	r3, [pc, #72]	; (80066bc <xPortStartScheduler+0x13c>)
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006678:	f000 f8fc 	bl	8006874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800667c:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <xPortStartScheduler+0x140>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a0f      	ldr	r2, [pc, #60]	; (80066c0 <xPortStartScheduler+0x140>)
 8006682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006688:	f7ff ff66 	bl	8006558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800668c:	f7ff f846 	bl	800571c <vTaskSwitchContext>
	prvTaskExitError();
 8006690:	f7ff ff1c 	bl	80064cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	e000ed00 	.word	0xe000ed00
 80066a4:	410fc271 	.word	0x410fc271
 80066a8:	410fc270 	.word	0x410fc270
 80066ac:	e000e400 	.word	0xe000e400
 80066b0:	200010d8 	.word	0x200010d8
 80066b4:	200010dc 	.word	0x200010dc
 80066b8:	e000ed20 	.word	0xe000ed20
 80066bc:	2000009c 	.word	0x2000009c
 80066c0:	e000ef34 	.word	0xe000ef34

080066c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	607b      	str	r3, [r7, #4]
}
 80066dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066de:	4b0f      	ldr	r3, [pc, #60]	; (800671c <vPortEnterCritical+0x58>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	4a0d      	ldr	r2, [pc, #52]	; (800671c <vPortEnterCritical+0x58>)
 80066e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <vPortEnterCritical+0x58>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d10f      	bne.n	8006710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <vPortEnterCritical+0x5c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <vPortEnterCritical+0x4c>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	603b      	str	r3, [r7, #0]
}
 800670c:	bf00      	nop
 800670e:	e7fe      	b.n	800670e <vPortEnterCritical+0x4a>
	}
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	2000009c 	.word	0x2000009c
 8006720:	e000ed04 	.word	0xe000ed04

08006724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800672a:	4b12      	ldr	r3, [pc, #72]	; (8006774 <vPortExitCritical+0x50>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10a      	bne.n	8006748 <vPortExitCritical+0x24>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	607b      	str	r3, [r7, #4]
}
 8006744:	bf00      	nop
 8006746:	e7fe      	b.n	8006746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <vPortExitCritical+0x50>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3b01      	subs	r3, #1
 800674e:	4a09      	ldr	r2, [pc, #36]	; (8006774 <vPortExitCritical+0x50>)
 8006750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006752:	4b08      	ldr	r3, [pc, #32]	; (8006774 <vPortExitCritical+0x50>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d105      	bne.n	8006766 <vPortExitCritical+0x42>
 800675a:	2300      	movs	r3, #0
 800675c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	f383 8811 	msr	BASEPRI, r3
}
 8006764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	2000009c 	.word	0x2000009c
	...

08006780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006780:	f3ef 8009 	mrs	r0, PSP
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <pxCurrentTCBConst>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	f01e 0f10 	tst.w	lr, #16
 8006790:	bf08      	it	eq
 8006792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679a:	6010      	str	r0, [r2, #0]
 800679c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067a4:	f380 8811 	msr	BASEPRI, r0
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f7fe ffb4 	bl	800571c <vTaskSwitchContext>
 80067b4:	f04f 0000 	mov.w	r0, #0
 80067b8:	f380 8811 	msr	BASEPRI, r0
 80067bc:	bc09      	pop	{r0, r3}
 80067be:	6819      	ldr	r1, [r3, #0]
 80067c0:	6808      	ldr	r0, [r1, #0]
 80067c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c6:	f01e 0f10 	tst.w	lr, #16
 80067ca:	bf08      	it	eq
 80067cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067d0:	f380 8809 	msr	PSP, r0
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	f3af 8000 	nop.w

080067e0 <pxCurrentTCBConst>:
 80067e0:	20000aac 	.word	0x20000aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop

080067e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	607b      	str	r3, [r7, #4]
}
 8006800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006802:	f7fe fed1 	bl	80055a8 <xTaskIncrementTick>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800680c:	4b06      	ldr	r3, [pc, #24]	; (8006828 <xPortSysTickHandler+0x40>)
 800680e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	2300      	movs	r3, #0
 8006816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f383 8811 	msr	BASEPRI, r3
}
 800681e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006820:	bf00      	nop
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006830:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <vPortSetupTimerInterrupt+0x34>)
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006836:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <vPortSetupTimerInterrupt+0x38>)
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800683c:	4b0a      	ldr	r3, [pc, #40]	; (8006868 <vPortSetupTimerInterrupt+0x3c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <vPortSetupTimerInterrupt+0x40>)
 8006842:	fba2 2303 	umull	r2, r3, r2, r3
 8006846:	099b      	lsrs	r3, r3, #6
 8006848:	4a09      	ldr	r2, [pc, #36]	; (8006870 <vPortSetupTimerInterrupt+0x44>)
 800684a:	3b01      	subs	r3, #1
 800684c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800684e:	4b04      	ldr	r3, [pc, #16]	; (8006860 <vPortSetupTimerInterrupt+0x34>)
 8006850:	2207      	movs	r2, #7
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	e000e010 	.word	0xe000e010
 8006864:	e000e018 	.word	0xe000e018
 8006868:	20000090 	.word	0x20000090
 800686c:	10624dd3 	.word	0x10624dd3
 8006870:	e000e014 	.word	0xe000e014

08006874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006884 <vPortEnableVFP+0x10>
 8006878:	6801      	ldr	r1, [r0, #0]
 800687a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800687e:	6001      	str	r1, [r0, #0]
 8006880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006882:	bf00      	nop
 8006884:	e000ed88 	.word	0xe000ed88

08006888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800688e:	f3ef 8305 	mrs	r3, IPSR
 8006892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b0f      	cmp	r3, #15
 8006898:	d914      	bls.n	80068c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800689a:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <vPortValidateInterruptPriority+0x70>)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068a4:	4b15      	ldr	r3, [pc, #84]	; (80068fc <vPortValidateInterruptPriority+0x74>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	7afa      	ldrb	r2, [r7, #11]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d20a      	bcs.n	80068c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	607b      	str	r3, [r7, #4]
}
 80068c0:	bf00      	nop
 80068c2:	e7fe      	b.n	80068c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068c4:	4b0e      	ldr	r3, [pc, #56]	; (8006900 <vPortValidateInterruptPriority+0x78>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068cc:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <vPortValidateInterruptPriority+0x7c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d90a      	bls.n	80068ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	603b      	str	r3, [r7, #0]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <vPortValidateInterruptPriority+0x60>
	}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	e000e3f0 	.word	0xe000e3f0
 80068fc:	200010d8 	.word	0x200010d8
 8006900:	e000ed0c 	.word	0xe000ed0c
 8006904:	200010dc 	.word	0x200010dc

08006908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006914:	f7fe fd8c 	bl	8005430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006918:	4b5b      	ldr	r3, [pc, #364]	; (8006a88 <pvPortMalloc+0x180>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006920:	f000 f920 	bl	8006b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006924:	4b59      	ldr	r3, [pc, #356]	; (8006a8c <pvPortMalloc+0x184>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4013      	ands	r3, r2
 800692c:	2b00      	cmp	r3, #0
 800692e:	f040 8093 	bne.w	8006a58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01d      	beq.n	8006974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006938:	2208      	movs	r2, #8
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4413      	add	r3, r2
 800693e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	2b00      	cmp	r3, #0
 8006948:	d014      	beq.n	8006974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f023 0307 	bic.w	r3, r3, #7
 8006950:	3308      	adds	r3, #8
 8006952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <pvPortMalloc+0x6c>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	617b      	str	r3, [r7, #20]
}
 8006970:	bf00      	nop
 8006972:	e7fe      	b.n	8006972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d06e      	beq.n	8006a58 <pvPortMalloc+0x150>
 800697a:	4b45      	ldr	r3, [pc, #276]	; (8006a90 <pvPortMalloc+0x188>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	429a      	cmp	r2, r3
 8006982:	d869      	bhi.n	8006a58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006984:	4b43      	ldr	r3, [pc, #268]	; (8006a94 <pvPortMalloc+0x18c>)
 8006986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006988:	4b42      	ldr	r3, [pc, #264]	; (8006a94 <pvPortMalloc+0x18c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800698e:	e004      	b.n	800699a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d903      	bls.n	80069ac <pvPortMalloc+0xa4>
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f1      	bne.n	8006990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069ac:	4b36      	ldr	r3, [pc, #216]	; (8006a88 <pvPortMalloc+0x180>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d050      	beq.n	8006a58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2208      	movs	r2, #8
 80069bc:	4413      	add	r3, r2
 80069be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	1ad2      	subs	r2, r2, r3
 80069d0:	2308      	movs	r3, #8
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d91f      	bls.n	8006a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4413      	add	r3, r2
 80069de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <pvPortMalloc+0xf8>
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	613b      	str	r3, [r7, #16]
}
 80069fc:	bf00      	nop
 80069fe:	e7fe      	b.n	80069fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	1ad2      	subs	r2, r2, r3
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a12:	69b8      	ldr	r0, [r7, #24]
 8006a14:	f000 f908 	bl	8006c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a18:	4b1d      	ldr	r3, [pc, #116]	; (8006a90 <pvPortMalloc+0x188>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	4a1b      	ldr	r2, [pc, #108]	; (8006a90 <pvPortMalloc+0x188>)
 8006a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a26:	4b1a      	ldr	r3, [pc, #104]	; (8006a90 <pvPortMalloc+0x188>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b1b      	ldr	r3, [pc, #108]	; (8006a98 <pvPortMalloc+0x190>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d203      	bcs.n	8006a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a32:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <pvPortMalloc+0x188>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a18      	ldr	r2, [pc, #96]	; (8006a98 <pvPortMalloc+0x190>)
 8006a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <pvPortMalloc+0x184>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <pvPortMalloc+0x194>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3301      	adds	r3, #1
 8006a54:	4a11      	ldr	r2, [pc, #68]	; (8006a9c <pvPortMalloc+0x194>)
 8006a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a58:	f7fe fcf8 	bl	800544c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <pvPortMalloc+0x174>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	60fb      	str	r3, [r7, #12]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <pvPortMalloc+0x172>
	return pvReturn;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3728      	adds	r7, #40	; 0x28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20004ce8 	.word	0x20004ce8
 8006a8c:	20004cfc 	.word	0x20004cfc
 8006a90:	20004cec 	.word	0x20004cec
 8006a94:	20004ce0 	.word	0x20004ce0
 8006a98:	20004cf0 	.word	0x20004cf0
 8006a9c:	20004cf4 	.word	0x20004cf4

08006aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d04d      	beq.n	8006b4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	425b      	negs	r3, r3
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	4b24      	ldr	r3, [pc, #144]	; (8006b58 <vPortFree+0xb8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <vPortFree+0x44>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	60fb      	str	r3, [r7, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <vPortFree+0x62>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	60bb      	str	r3, [r7, #8]
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	4b14      	ldr	r3, [pc, #80]	; (8006b58 <vPortFree+0xb8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01e      	beq.n	8006b4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11a      	bne.n	8006b4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <vPortFree+0xb8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	43db      	mvns	r3, r3
 8006b22:	401a      	ands	r2, r3
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b28:	f7fe fc82 	bl	8005430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <vPortFree+0xbc>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4413      	add	r3, r2
 8006b36:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <vPortFree+0xbc>)
 8006b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b3a:	6938      	ldr	r0, [r7, #16]
 8006b3c:	f000 f874 	bl	8006c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <vPortFree+0xc0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3301      	adds	r3, #1
 8006b46:	4a06      	ldr	r2, [pc, #24]	; (8006b60 <vPortFree+0xc0>)
 8006b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b4a:	f7fe fc7f 	bl	800544c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b4e:	bf00      	nop
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20004cfc 	.word	0x20004cfc
 8006b5c:	20004cec 	.word	0x20004cec
 8006b60:	20004cf8 	.word	0x20004cf8

08006b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b70:	4b27      	ldr	r3, [pc, #156]	; (8006c10 <prvHeapInit+0xac>)
 8006b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00c      	beq.n	8006b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3307      	adds	r3, #7
 8006b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0307 	bic.w	r3, r3, #7
 8006b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	4a1f      	ldr	r2, [pc, #124]	; (8006c10 <prvHeapInit+0xac>)
 8006b94:	4413      	add	r3, r2
 8006b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b9c:	4a1d      	ldr	r2, [pc, #116]	; (8006c14 <prvHeapInit+0xb0>)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ba2:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <prvHeapInit+0xb0>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	4413      	add	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0307 	bic.w	r3, r3, #7
 8006bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <prvHeapInit+0xb4>)
 8006bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bc6:	4b14      	ldr	r3, [pc, #80]	; (8006c18 <prvHeapInit+0xb4>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bce:	4b12      	ldr	r3, [pc, #72]	; (8006c18 <prvHeapInit+0xb4>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006be4:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <prvHeapInit+0xb4>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	4a0a      	ldr	r2, [pc, #40]	; (8006c1c <prvHeapInit+0xb8>)
 8006bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	4a09      	ldr	r2, [pc, #36]	; (8006c20 <prvHeapInit+0xbc>)
 8006bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bfc:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <prvHeapInit+0xc0>)
 8006bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c02:	601a      	str	r2, [r3, #0]
}
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	200010e0 	.word	0x200010e0
 8006c14:	20004ce0 	.word	0x20004ce0
 8006c18:	20004ce8 	.word	0x20004ce8
 8006c1c:	20004cf0 	.word	0x20004cf0
 8006c20:	20004cec 	.word	0x20004cec
 8006c24:	20004cfc 	.word	0x20004cfc

08006c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c30:	4b28      	ldr	r3, [pc, #160]	; (8006cd4 <prvInsertBlockIntoFreeList+0xac>)
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e002      	b.n	8006c3c <prvInsertBlockIntoFreeList+0x14>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d8f7      	bhi.n	8006c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	4413      	add	r3, r2
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d108      	bne.n	8006c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	441a      	add	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	441a      	add	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d118      	bne.n	8006cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4b15      	ldr	r3, [pc, #84]	; (8006cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d00d      	beq.n	8006ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	441a      	add	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e008      	b.n	8006cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e003      	b.n	8006cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d002      	beq.n	8006cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20004ce0 	.word	0x20004ce0
 8006cd8:	20004ce8 	.word	0x20004ce8

08006cdc <__errno>:
 8006cdc:	4b01      	ldr	r3, [pc, #4]	; (8006ce4 <__errno+0x8>)
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	200000a0 	.word	0x200000a0

08006ce8 <__libc_init_array>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	4d0d      	ldr	r5, [pc, #52]	; (8006d20 <__libc_init_array+0x38>)
 8006cec:	4c0d      	ldr	r4, [pc, #52]	; (8006d24 <__libc_init_array+0x3c>)
 8006cee:	1b64      	subs	r4, r4, r5
 8006cf0:	10a4      	asrs	r4, r4, #2
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	42a6      	cmp	r6, r4
 8006cf6:	d109      	bne.n	8006d0c <__libc_init_array+0x24>
 8006cf8:	4d0b      	ldr	r5, [pc, #44]	; (8006d28 <__libc_init_array+0x40>)
 8006cfa:	4c0c      	ldr	r4, [pc, #48]	; (8006d2c <__libc_init_array+0x44>)
 8006cfc:	f000 fd0c 	bl	8007718 <_init>
 8006d00:	1b64      	subs	r4, r4, r5
 8006d02:	10a4      	asrs	r4, r4, #2
 8006d04:	2600      	movs	r6, #0
 8006d06:	42a6      	cmp	r6, r4
 8006d08:	d105      	bne.n	8006d16 <__libc_init_array+0x2e>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d10:	4798      	blx	r3
 8006d12:	3601      	adds	r6, #1
 8006d14:	e7ee      	b.n	8006cf4 <__libc_init_array+0xc>
 8006d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1a:	4798      	blx	r3
 8006d1c:	3601      	adds	r6, #1
 8006d1e:	e7f2      	b.n	8006d06 <__libc_init_array+0x1e>
 8006d20:	0800a1b8 	.word	0x0800a1b8
 8006d24:	0800a1b8 	.word	0x0800a1b8
 8006d28:	0800a1b8 	.word	0x0800a1b8
 8006d2c:	0800a1bc 	.word	0x0800a1bc

08006d30 <__retarget_lock_acquire_recursive>:
 8006d30:	4770      	bx	lr

08006d32 <__retarget_lock_release_recursive>:
 8006d32:	4770      	bx	lr

08006d34 <memcpy>:
 8006d34:	440a      	add	r2, r1
 8006d36:	4291      	cmp	r1, r2
 8006d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d3c:	d100      	bne.n	8006d40 <memcpy+0xc>
 8006d3e:	4770      	bx	lr
 8006d40:	b510      	push	{r4, lr}
 8006d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d4a:	4291      	cmp	r1, r2
 8006d4c:	d1f9      	bne.n	8006d42 <memcpy+0xe>
 8006d4e:	bd10      	pop	{r4, pc}

08006d50 <memset>:
 8006d50:	4402      	add	r2, r0
 8006d52:	4603      	mov	r3, r0
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d100      	bne.n	8006d5a <memset+0xa>
 8006d58:	4770      	bx	lr
 8006d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5e:	e7f9      	b.n	8006d54 <memset+0x4>

08006d60 <_free_r>:
 8006d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d62:	2900      	cmp	r1, #0
 8006d64:	d044      	beq.n	8006df0 <_free_r+0x90>
 8006d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d6a:	9001      	str	r0, [sp, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d72:	bfb8      	it	lt
 8006d74:	18e4      	addlt	r4, r4, r3
 8006d76:	f000 f981 	bl	800707c <__malloc_lock>
 8006d7a:	4a1e      	ldr	r2, [pc, #120]	; (8006df4 <_free_r+0x94>)
 8006d7c:	9801      	ldr	r0, [sp, #4]
 8006d7e:	6813      	ldr	r3, [r2, #0]
 8006d80:	b933      	cbnz	r3, 8006d90 <_free_r+0x30>
 8006d82:	6063      	str	r3, [r4, #4]
 8006d84:	6014      	str	r4, [r2, #0]
 8006d86:	b003      	add	sp, #12
 8006d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d8c:	f000 b97c 	b.w	8007088 <__malloc_unlock>
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	d908      	bls.n	8006da6 <_free_r+0x46>
 8006d94:	6825      	ldr	r5, [r4, #0]
 8006d96:	1961      	adds	r1, r4, r5
 8006d98:	428b      	cmp	r3, r1
 8006d9a:	bf01      	itttt	eq
 8006d9c:	6819      	ldreq	r1, [r3, #0]
 8006d9e:	685b      	ldreq	r3, [r3, #4]
 8006da0:	1949      	addeq	r1, r1, r5
 8006da2:	6021      	streq	r1, [r4, #0]
 8006da4:	e7ed      	b.n	8006d82 <_free_r+0x22>
 8006da6:	461a      	mov	r2, r3
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	b10b      	cbz	r3, 8006db0 <_free_r+0x50>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d9fa      	bls.n	8006da6 <_free_r+0x46>
 8006db0:	6811      	ldr	r1, [r2, #0]
 8006db2:	1855      	adds	r5, r2, r1
 8006db4:	42a5      	cmp	r5, r4
 8006db6:	d10b      	bne.n	8006dd0 <_free_r+0x70>
 8006db8:	6824      	ldr	r4, [r4, #0]
 8006dba:	4421      	add	r1, r4
 8006dbc:	1854      	adds	r4, r2, r1
 8006dbe:	42a3      	cmp	r3, r4
 8006dc0:	6011      	str	r1, [r2, #0]
 8006dc2:	d1e0      	bne.n	8006d86 <_free_r+0x26>
 8006dc4:	681c      	ldr	r4, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	6053      	str	r3, [r2, #4]
 8006dca:	4421      	add	r1, r4
 8006dcc:	6011      	str	r1, [r2, #0]
 8006dce:	e7da      	b.n	8006d86 <_free_r+0x26>
 8006dd0:	d902      	bls.n	8006dd8 <_free_r+0x78>
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	6003      	str	r3, [r0, #0]
 8006dd6:	e7d6      	b.n	8006d86 <_free_r+0x26>
 8006dd8:	6825      	ldr	r5, [r4, #0]
 8006dda:	1961      	adds	r1, r4, r5
 8006ddc:	428b      	cmp	r3, r1
 8006dde:	bf04      	itt	eq
 8006de0:	6819      	ldreq	r1, [r3, #0]
 8006de2:	685b      	ldreq	r3, [r3, #4]
 8006de4:	6063      	str	r3, [r4, #4]
 8006de6:	bf04      	itt	eq
 8006de8:	1949      	addeq	r1, r1, r5
 8006dea:	6021      	streq	r1, [r4, #0]
 8006dec:	6054      	str	r4, [r2, #4]
 8006dee:	e7ca      	b.n	8006d86 <_free_r+0x26>
 8006df0:	b003      	add	sp, #12
 8006df2:	bd30      	pop	{r4, r5, pc}
 8006df4:	20004d04 	.word	0x20004d04

08006df8 <sbrk_aligned>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	4e0e      	ldr	r6, [pc, #56]	; (8006e34 <sbrk_aligned+0x3c>)
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	6831      	ldr	r1, [r6, #0]
 8006e00:	4605      	mov	r5, r0
 8006e02:	b911      	cbnz	r1, 8006e0a <sbrk_aligned+0x12>
 8006e04:	f000 f8f6 	bl	8006ff4 <_sbrk_r>
 8006e08:	6030      	str	r0, [r6, #0]
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f000 f8f1 	bl	8006ff4 <_sbrk_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	d00a      	beq.n	8006e2c <sbrk_aligned+0x34>
 8006e16:	1cc4      	adds	r4, r0, #3
 8006e18:	f024 0403 	bic.w	r4, r4, #3
 8006e1c:	42a0      	cmp	r0, r4
 8006e1e:	d007      	beq.n	8006e30 <sbrk_aligned+0x38>
 8006e20:	1a21      	subs	r1, r4, r0
 8006e22:	4628      	mov	r0, r5
 8006e24:	f000 f8e6 	bl	8006ff4 <_sbrk_r>
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d101      	bne.n	8006e30 <sbrk_aligned+0x38>
 8006e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e30:	4620      	mov	r0, r4
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	20004d08 	.word	0x20004d08

08006e38 <_malloc_r>:
 8006e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3c:	1ccd      	adds	r5, r1, #3
 8006e3e:	f025 0503 	bic.w	r5, r5, #3
 8006e42:	3508      	adds	r5, #8
 8006e44:	2d0c      	cmp	r5, #12
 8006e46:	bf38      	it	cc
 8006e48:	250c      	movcc	r5, #12
 8006e4a:	2d00      	cmp	r5, #0
 8006e4c:	4607      	mov	r7, r0
 8006e4e:	db01      	blt.n	8006e54 <_malloc_r+0x1c>
 8006e50:	42a9      	cmp	r1, r5
 8006e52:	d905      	bls.n	8006e60 <_malloc_r+0x28>
 8006e54:	230c      	movs	r3, #12
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	2600      	movs	r6, #0
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e60:	4e2e      	ldr	r6, [pc, #184]	; (8006f1c <_malloc_r+0xe4>)
 8006e62:	f000 f90b 	bl	800707c <__malloc_lock>
 8006e66:	6833      	ldr	r3, [r6, #0]
 8006e68:	461c      	mov	r4, r3
 8006e6a:	bb34      	cbnz	r4, 8006eba <_malloc_r+0x82>
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	4638      	mov	r0, r7
 8006e70:	f7ff ffc2 	bl	8006df8 <sbrk_aligned>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	4604      	mov	r4, r0
 8006e78:	d14d      	bne.n	8006f16 <_malloc_r+0xde>
 8006e7a:	6834      	ldr	r4, [r6, #0]
 8006e7c:	4626      	mov	r6, r4
 8006e7e:	2e00      	cmp	r6, #0
 8006e80:	d140      	bne.n	8006f04 <_malloc_r+0xcc>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	4631      	mov	r1, r6
 8006e86:	4638      	mov	r0, r7
 8006e88:	eb04 0803 	add.w	r8, r4, r3
 8006e8c:	f000 f8b2 	bl	8006ff4 <_sbrk_r>
 8006e90:	4580      	cmp	r8, r0
 8006e92:	d13a      	bne.n	8006f0a <_malloc_r+0xd2>
 8006e94:	6821      	ldr	r1, [r4, #0]
 8006e96:	3503      	adds	r5, #3
 8006e98:	1a6d      	subs	r5, r5, r1
 8006e9a:	f025 0503 	bic.w	r5, r5, #3
 8006e9e:	3508      	adds	r5, #8
 8006ea0:	2d0c      	cmp	r5, #12
 8006ea2:	bf38      	it	cc
 8006ea4:	250c      	movcc	r5, #12
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	f7ff ffa5 	bl	8006df8 <sbrk_aligned>
 8006eae:	3001      	adds	r0, #1
 8006eb0:	d02b      	beq.n	8006f0a <_malloc_r+0xd2>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	442b      	add	r3, r5
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	e00e      	b.n	8006ed8 <_malloc_r+0xa0>
 8006eba:	6822      	ldr	r2, [r4, #0]
 8006ebc:	1b52      	subs	r2, r2, r5
 8006ebe:	d41e      	bmi.n	8006efe <_malloc_r+0xc6>
 8006ec0:	2a0b      	cmp	r2, #11
 8006ec2:	d916      	bls.n	8006ef2 <_malloc_r+0xba>
 8006ec4:	1961      	adds	r1, r4, r5
 8006ec6:	42a3      	cmp	r3, r4
 8006ec8:	6025      	str	r5, [r4, #0]
 8006eca:	bf18      	it	ne
 8006ecc:	6059      	strne	r1, [r3, #4]
 8006ece:	6863      	ldr	r3, [r4, #4]
 8006ed0:	bf08      	it	eq
 8006ed2:	6031      	streq	r1, [r6, #0]
 8006ed4:	5162      	str	r2, [r4, r5]
 8006ed6:	604b      	str	r3, [r1, #4]
 8006ed8:	4638      	mov	r0, r7
 8006eda:	f104 060b 	add.w	r6, r4, #11
 8006ede:	f000 f8d3 	bl	8007088 <__malloc_unlock>
 8006ee2:	f026 0607 	bic.w	r6, r6, #7
 8006ee6:	1d23      	adds	r3, r4, #4
 8006ee8:	1af2      	subs	r2, r6, r3
 8006eea:	d0b6      	beq.n	8006e5a <_malloc_r+0x22>
 8006eec:	1b9b      	subs	r3, r3, r6
 8006eee:	50a3      	str	r3, [r4, r2]
 8006ef0:	e7b3      	b.n	8006e5a <_malloc_r+0x22>
 8006ef2:	6862      	ldr	r2, [r4, #4]
 8006ef4:	42a3      	cmp	r3, r4
 8006ef6:	bf0c      	ite	eq
 8006ef8:	6032      	streq	r2, [r6, #0]
 8006efa:	605a      	strne	r2, [r3, #4]
 8006efc:	e7ec      	b.n	8006ed8 <_malloc_r+0xa0>
 8006efe:	4623      	mov	r3, r4
 8006f00:	6864      	ldr	r4, [r4, #4]
 8006f02:	e7b2      	b.n	8006e6a <_malloc_r+0x32>
 8006f04:	4634      	mov	r4, r6
 8006f06:	6876      	ldr	r6, [r6, #4]
 8006f08:	e7b9      	b.n	8006e7e <_malloc_r+0x46>
 8006f0a:	230c      	movs	r3, #12
 8006f0c:	603b      	str	r3, [r7, #0]
 8006f0e:	4638      	mov	r0, r7
 8006f10:	f000 f8ba 	bl	8007088 <__malloc_unlock>
 8006f14:	e7a1      	b.n	8006e5a <_malloc_r+0x22>
 8006f16:	6025      	str	r5, [r4, #0]
 8006f18:	e7de      	b.n	8006ed8 <_malloc_r+0xa0>
 8006f1a:	bf00      	nop
 8006f1c:	20004d04 	.word	0x20004d04

08006f20 <cleanup_glue>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	460c      	mov	r4, r1
 8006f24:	6809      	ldr	r1, [r1, #0]
 8006f26:	4605      	mov	r5, r0
 8006f28:	b109      	cbz	r1, 8006f2e <cleanup_glue+0xe>
 8006f2a:	f7ff fff9 	bl	8006f20 <cleanup_glue>
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4628      	mov	r0, r5
 8006f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f36:	f7ff bf13 	b.w	8006d60 <_free_r>
	...

08006f3c <_reclaim_reent>:
 8006f3c:	4b2c      	ldr	r3, [pc, #176]	; (8006ff0 <_reclaim_reent+0xb4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4283      	cmp	r3, r0
 8006f42:	b570      	push	{r4, r5, r6, lr}
 8006f44:	4604      	mov	r4, r0
 8006f46:	d051      	beq.n	8006fec <_reclaim_reent+0xb0>
 8006f48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f4a:	b143      	cbz	r3, 8006f5e <_reclaim_reent+0x22>
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d14a      	bne.n	8006fe8 <_reclaim_reent+0xac>
 8006f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f54:	6819      	ldr	r1, [r3, #0]
 8006f56:	b111      	cbz	r1, 8006f5e <_reclaim_reent+0x22>
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f7ff ff01 	bl	8006d60 <_free_r>
 8006f5e:	6961      	ldr	r1, [r4, #20]
 8006f60:	b111      	cbz	r1, 8006f68 <_reclaim_reent+0x2c>
 8006f62:	4620      	mov	r0, r4
 8006f64:	f7ff fefc 	bl	8006d60 <_free_r>
 8006f68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f6a:	b111      	cbz	r1, 8006f72 <_reclaim_reent+0x36>
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f7ff fef7 	bl	8006d60 <_free_r>
 8006f72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f74:	b111      	cbz	r1, 8006f7c <_reclaim_reent+0x40>
 8006f76:	4620      	mov	r0, r4
 8006f78:	f7ff fef2 	bl	8006d60 <_free_r>
 8006f7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f7e:	b111      	cbz	r1, 8006f86 <_reclaim_reent+0x4a>
 8006f80:	4620      	mov	r0, r4
 8006f82:	f7ff feed 	bl	8006d60 <_free_r>
 8006f86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f88:	b111      	cbz	r1, 8006f90 <_reclaim_reent+0x54>
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f7ff fee8 	bl	8006d60 <_free_r>
 8006f90:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006f92:	b111      	cbz	r1, 8006f9a <_reclaim_reent+0x5e>
 8006f94:	4620      	mov	r0, r4
 8006f96:	f7ff fee3 	bl	8006d60 <_free_r>
 8006f9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006f9c:	b111      	cbz	r1, 8006fa4 <_reclaim_reent+0x68>
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f7ff fede 	bl	8006d60 <_free_r>
 8006fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fa6:	b111      	cbz	r1, 8006fae <_reclaim_reent+0x72>
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f7ff fed9 	bl	8006d60 <_free_r>
 8006fae:	69a3      	ldr	r3, [r4, #24]
 8006fb0:	b1e3      	cbz	r3, 8006fec <_reclaim_reent+0xb0>
 8006fb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4798      	blx	r3
 8006fb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006fba:	b1b9      	cbz	r1, 8006fec <_reclaim_reent+0xb0>
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fc2:	f7ff bfad 	b.w	8006f20 <cleanup_glue>
 8006fc6:	5949      	ldr	r1, [r1, r5]
 8006fc8:	b941      	cbnz	r1, 8006fdc <_reclaim_reent+0xa0>
 8006fca:	3504      	adds	r5, #4
 8006fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fce:	2d80      	cmp	r5, #128	; 0x80
 8006fd0:	68d9      	ldr	r1, [r3, #12]
 8006fd2:	d1f8      	bne.n	8006fc6 <_reclaim_reent+0x8a>
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f7ff fec3 	bl	8006d60 <_free_r>
 8006fda:	e7ba      	b.n	8006f52 <_reclaim_reent+0x16>
 8006fdc:	680e      	ldr	r6, [r1, #0]
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f7ff febe 	bl	8006d60 <_free_r>
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	e7ef      	b.n	8006fc8 <_reclaim_reent+0x8c>
 8006fe8:	2500      	movs	r5, #0
 8006fea:	e7ef      	b.n	8006fcc <_reclaim_reent+0x90>
 8006fec:	bd70      	pop	{r4, r5, r6, pc}
 8006fee:	bf00      	nop
 8006ff0:	200000a0 	.word	0x200000a0

08006ff4 <_sbrk_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d06      	ldr	r5, [pc, #24]	; (8007010 <_sbrk_r+0x1c>)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	f7fa fa76 	bl	80014f0 <_sbrk>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_sbrk_r+0x1a>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_sbrk_r+0x1a>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	20004d0c 	.word	0x20004d0c

08007014 <sniprintf>:
 8007014:	b40c      	push	{r2, r3}
 8007016:	b530      	push	{r4, r5, lr}
 8007018:	4b17      	ldr	r3, [pc, #92]	; (8007078 <sniprintf+0x64>)
 800701a:	1e0c      	subs	r4, r1, #0
 800701c:	681d      	ldr	r5, [r3, #0]
 800701e:	b09d      	sub	sp, #116	; 0x74
 8007020:	da08      	bge.n	8007034 <sniprintf+0x20>
 8007022:	238b      	movs	r3, #139	; 0x8b
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	f04f 30ff 	mov.w	r0, #4294967295
 800702a:	b01d      	add	sp, #116	; 0x74
 800702c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007030:	b002      	add	sp, #8
 8007032:	4770      	bx	lr
 8007034:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007038:	f8ad 3014 	strh.w	r3, [sp, #20]
 800703c:	bf14      	ite	ne
 800703e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007042:	4623      	moveq	r3, r4
 8007044:	9304      	str	r3, [sp, #16]
 8007046:	9307      	str	r3, [sp, #28]
 8007048:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800704c:	9002      	str	r0, [sp, #8]
 800704e:	9006      	str	r0, [sp, #24]
 8007050:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007054:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007056:	ab21      	add	r3, sp, #132	; 0x84
 8007058:	a902      	add	r1, sp, #8
 800705a:	4628      	mov	r0, r5
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	f000 f875 	bl	800714c <_svfiprintf_r>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	bfbc      	itt	lt
 8007066:	238b      	movlt	r3, #139	; 0x8b
 8007068:	602b      	strlt	r3, [r5, #0]
 800706a:	2c00      	cmp	r4, #0
 800706c:	d0dd      	beq.n	800702a <sniprintf+0x16>
 800706e:	9b02      	ldr	r3, [sp, #8]
 8007070:	2200      	movs	r2, #0
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	e7d9      	b.n	800702a <sniprintf+0x16>
 8007076:	bf00      	nop
 8007078:	200000a0 	.word	0x200000a0

0800707c <__malloc_lock>:
 800707c:	4801      	ldr	r0, [pc, #4]	; (8007084 <__malloc_lock+0x8>)
 800707e:	f7ff be57 	b.w	8006d30 <__retarget_lock_acquire_recursive>
 8007082:	bf00      	nop
 8007084:	20004d00 	.word	0x20004d00

08007088 <__malloc_unlock>:
 8007088:	4801      	ldr	r0, [pc, #4]	; (8007090 <__malloc_unlock+0x8>)
 800708a:	f7ff be52 	b.w	8006d32 <__retarget_lock_release_recursive>
 800708e:	bf00      	nop
 8007090:	20004d00 	.word	0x20004d00

08007094 <__ssputs_r>:
 8007094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	688e      	ldr	r6, [r1, #8]
 800709a:	429e      	cmp	r6, r3
 800709c:	4682      	mov	sl, r0
 800709e:	460c      	mov	r4, r1
 80070a0:	4690      	mov	r8, r2
 80070a2:	461f      	mov	r7, r3
 80070a4:	d838      	bhi.n	8007118 <__ssputs_r+0x84>
 80070a6:	898a      	ldrh	r2, [r1, #12]
 80070a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070ac:	d032      	beq.n	8007114 <__ssputs_r+0x80>
 80070ae:	6825      	ldr	r5, [r4, #0]
 80070b0:	6909      	ldr	r1, [r1, #16]
 80070b2:	eba5 0901 	sub.w	r9, r5, r1
 80070b6:	6965      	ldr	r5, [r4, #20]
 80070b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070c0:	3301      	adds	r3, #1
 80070c2:	444b      	add	r3, r9
 80070c4:	106d      	asrs	r5, r5, #1
 80070c6:	429d      	cmp	r5, r3
 80070c8:	bf38      	it	cc
 80070ca:	461d      	movcc	r5, r3
 80070cc:	0553      	lsls	r3, r2, #21
 80070ce:	d531      	bpl.n	8007134 <__ssputs_r+0xa0>
 80070d0:	4629      	mov	r1, r5
 80070d2:	f7ff feb1 	bl	8006e38 <_malloc_r>
 80070d6:	4606      	mov	r6, r0
 80070d8:	b950      	cbnz	r0, 80070f0 <__ssputs_r+0x5c>
 80070da:	230c      	movs	r3, #12
 80070dc:	f8ca 3000 	str.w	r3, [sl]
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e6:	81a3      	strh	r3, [r4, #12]
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f0:	6921      	ldr	r1, [r4, #16]
 80070f2:	464a      	mov	r2, r9
 80070f4:	f7ff fe1e 	bl	8006d34 <memcpy>
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007102:	81a3      	strh	r3, [r4, #12]
 8007104:	6126      	str	r6, [r4, #16]
 8007106:	6165      	str	r5, [r4, #20]
 8007108:	444e      	add	r6, r9
 800710a:	eba5 0509 	sub.w	r5, r5, r9
 800710e:	6026      	str	r6, [r4, #0]
 8007110:	60a5      	str	r5, [r4, #8]
 8007112:	463e      	mov	r6, r7
 8007114:	42be      	cmp	r6, r7
 8007116:	d900      	bls.n	800711a <__ssputs_r+0x86>
 8007118:	463e      	mov	r6, r7
 800711a:	6820      	ldr	r0, [r4, #0]
 800711c:	4632      	mov	r2, r6
 800711e:	4641      	mov	r1, r8
 8007120:	f000 faa8 	bl	8007674 <memmove>
 8007124:	68a3      	ldr	r3, [r4, #8]
 8007126:	1b9b      	subs	r3, r3, r6
 8007128:	60a3      	str	r3, [r4, #8]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	4433      	add	r3, r6
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	2000      	movs	r0, #0
 8007132:	e7db      	b.n	80070ec <__ssputs_r+0x58>
 8007134:	462a      	mov	r2, r5
 8007136:	f000 fab7 	bl	80076a8 <_realloc_r>
 800713a:	4606      	mov	r6, r0
 800713c:	2800      	cmp	r0, #0
 800713e:	d1e1      	bne.n	8007104 <__ssputs_r+0x70>
 8007140:	6921      	ldr	r1, [r4, #16]
 8007142:	4650      	mov	r0, sl
 8007144:	f7ff fe0c 	bl	8006d60 <_free_r>
 8007148:	e7c7      	b.n	80070da <__ssputs_r+0x46>
	...

0800714c <_svfiprintf_r>:
 800714c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007150:	4698      	mov	r8, r3
 8007152:	898b      	ldrh	r3, [r1, #12]
 8007154:	061b      	lsls	r3, r3, #24
 8007156:	b09d      	sub	sp, #116	; 0x74
 8007158:	4607      	mov	r7, r0
 800715a:	460d      	mov	r5, r1
 800715c:	4614      	mov	r4, r2
 800715e:	d50e      	bpl.n	800717e <_svfiprintf_r+0x32>
 8007160:	690b      	ldr	r3, [r1, #16]
 8007162:	b963      	cbnz	r3, 800717e <_svfiprintf_r+0x32>
 8007164:	2140      	movs	r1, #64	; 0x40
 8007166:	f7ff fe67 	bl	8006e38 <_malloc_r>
 800716a:	6028      	str	r0, [r5, #0]
 800716c:	6128      	str	r0, [r5, #16]
 800716e:	b920      	cbnz	r0, 800717a <_svfiprintf_r+0x2e>
 8007170:	230c      	movs	r3, #12
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	e0d1      	b.n	800731e <_svfiprintf_r+0x1d2>
 800717a:	2340      	movs	r3, #64	; 0x40
 800717c:	616b      	str	r3, [r5, #20]
 800717e:	2300      	movs	r3, #0
 8007180:	9309      	str	r3, [sp, #36]	; 0x24
 8007182:	2320      	movs	r3, #32
 8007184:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007188:	f8cd 800c 	str.w	r8, [sp, #12]
 800718c:	2330      	movs	r3, #48	; 0x30
 800718e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007338 <_svfiprintf_r+0x1ec>
 8007192:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007196:	f04f 0901 	mov.w	r9, #1
 800719a:	4623      	mov	r3, r4
 800719c:	469a      	mov	sl, r3
 800719e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a2:	b10a      	cbz	r2, 80071a8 <_svfiprintf_r+0x5c>
 80071a4:	2a25      	cmp	r2, #37	; 0x25
 80071a6:	d1f9      	bne.n	800719c <_svfiprintf_r+0x50>
 80071a8:	ebba 0b04 	subs.w	fp, sl, r4
 80071ac:	d00b      	beq.n	80071c6 <_svfiprintf_r+0x7a>
 80071ae:	465b      	mov	r3, fp
 80071b0:	4622      	mov	r2, r4
 80071b2:	4629      	mov	r1, r5
 80071b4:	4638      	mov	r0, r7
 80071b6:	f7ff ff6d 	bl	8007094 <__ssputs_r>
 80071ba:	3001      	adds	r0, #1
 80071bc:	f000 80aa 	beq.w	8007314 <_svfiprintf_r+0x1c8>
 80071c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c2:	445a      	add	r2, fp
 80071c4:	9209      	str	r2, [sp, #36]	; 0x24
 80071c6:	f89a 3000 	ldrb.w	r3, [sl]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 80a2 	beq.w	8007314 <_svfiprintf_r+0x1c8>
 80071d0:	2300      	movs	r3, #0
 80071d2:	f04f 32ff 	mov.w	r2, #4294967295
 80071d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071da:	f10a 0a01 	add.w	sl, sl, #1
 80071de:	9304      	str	r3, [sp, #16]
 80071e0:	9307      	str	r3, [sp, #28]
 80071e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071e6:	931a      	str	r3, [sp, #104]	; 0x68
 80071e8:	4654      	mov	r4, sl
 80071ea:	2205      	movs	r2, #5
 80071ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f0:	4851      	ldr	r0, [pc, #324]	; (8007338 <_svfiprintf_r+0x1ec>)
 80071f2:	f7f8 fff5 	bl	80001e0 <memchr>
 80071f6:	9a04      	ldr	r2, [sp, #16]
 80071f8:	b9d8      	cbnz	r0, 8007232 <_svfiprintf_r+0xe6>
 80071fa:	06d0      	lsls	r0, r2, #27
 80071fc:	bf44      	itt	mi
 80071fe:	2320      	movmi	r3, #32
 8007200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007204:	0711      	lsls	r1, r2, #28
 8007206:	bf44      	itt	mi
 8007208:	232b      	movmi	r3, #43	; 0x2b
 800720a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800720e:	f89a 3000 	ldrb.w	r3, [sl]
 8007212:	2b2a      	cmp	r3, #42	; 0x2a
 8007214:	d015      	beq.n	8007242 <_svfiprintf_r+0xf6>
 8007216:	9a07      	ldr	r2, [sp, #28]
 8007218:	4654      	mov	r4, sl
 800721a:	2000      	movs	r0, #0
 800721c:	f04f 0c0a 	mov.w	ip, #10
 8007220:	4621      	mov	r1, r4
 8007222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007226:	3b30      	subs	r3, #48	; 0x30
 8007228:	2b09      	cmp	r3, #9
 800722a:	d94e      	bls.n	80072ca <_svfiprintf_r+0x17e>
 800722c:	b1b0      	cbz	r0, 800725c <_svfiprintf_r+0x110>
 800722e:	9207      	str	r2, [sp, #28]
 8007230:	e014      	b.n	800725c <_svfiprintf_r+0x110>
 8007232:	eba0 0308 	sub.w	r3, r0, r8
 8007236:	fa09 f303 	lsl.w	r3, r9, r3
 800723a:	4313      	orrs	r3, r2
 800723c:	9304      	str	r3, [sp, #16]
 800723e:	46a2      	mov	sl, r4
 8007240:	e7d2      	b.n	80071e8 <_svfiprintf_r+0x9c>
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	1d19      	adds	r1, r3, #4
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	9103      	str	r1, [sp, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	bfbb      	ittet	lt
 800724e:	425b      	neglt	r3, r3
 8007250:	f042 0202 	orrlt.w	r2, r2, #2
 8007254:	9307      	strge	r3, [sp, #28]
 8007256:	9307      	strlt	r3, [sp, #28]
 8007258:	bfb8      	it	lt
 800725a:	9204      	strlt	r2, [sp, #16]
 800725c:	7823      	ldrb	r3, [r4, #0]
 800725e:	2b2e      	cmp	r3, #46	; 0x2e
 8007260:	d10c      	bne.n	800727c <_svfiprintf_r+0x130>
 8007262:	7863      	ldrb	r3, [r4, #1]
 8007264:	2b2a      	cmp	r3, #42	; 0x2a
 8007266:	d135      	bne.n	80072d4 <_svfiprintf_r+0x188>
 8007268:	9b03      	ldr	r3, [sp, #12]
 800726a:	1d1a      	adds	r2, r3, #4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	9203      	str	r2, [sp, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	bfb8      	it	lt
 8007274:	f04f 33ff 	movlt.w	r3, #4294967295
 8007278:	3402      	adds	r4, #2
 800727a:	9305      	str	r3, [sp, #20]
 800727c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007348 <_svfiprintf_r+0x1fc>
 8007280:	7821      	ldrb	r1, [r4, #0]
 8007282:	2203      	movs	r2, #3
 8007284:	4650      	mov	r0, sl
 8007286:	f7f8 ffab 	bl	80001e0 <memchr>
 800728a:	b140      	cbz	r0, 800729e <_svfiprintf_r+0x152>
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	eba0 000a 	sub.w	r0, r0, sl
 8007292:	fa03 f000 	lsl.w	r0, r3, r0
 8007296:	9b04      	ldr	r3, [sp, #16]
 8007298:	4303      	orrs	r3, r0
 800729a:	3401      	adds	r4, #1
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a2:	4826      	ldr	r0, [pc, #152]	; (800733c <_svfiprintf_r+0x1f0>)
 80072a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072a8:	2206      	movs	r2, #6
 80072aa:	f7f8 ff99 	bl	80001e0 <memchr>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d038      	beq.n	8007324 <_svfiprintf_r+0x1d8>
 80072b2:	4b23      	ldr	r3, [pc, #140]	; (8007340 <_svfiprintf_r+0x1f4>)
 80072b4:	bb1b      	cbnz	r3, 80072fe <_svfiprintf_r+0x1b2>
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	3307      	adds	r3, #7
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	3308      	adds	r3, #8
 80072c0:	9303      	str	r3, [sp, #12]
 80072c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c4:	4433      	add	r3, r6
 80072c6:	9309      	str	r3, [sp, #36]	; 0x24
 80072c8:	e767      	b.n	800719a <_svfiprintf_r+0x4e>
 80072ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ce:	460c      	mov	r4, r1
 80072d0:	2001      	movs	r0, #1
 80072d2:	e7a5      	b.n	8007220 <_svfiprintf_r+0xd4>
 80072d4:	2300      	movs	r3, #0
 80072d6:	3401      	adds	r4, #1
 80072d8:	9305      	str	r3, [sp, #20]
 80072da:	4619      	mov	r1, r3
 80072dc:	f04f 0c0a 	mov.w	ip, #10
 80072e0:	4620      	mov	r0, r4
 80072e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e6:	3a30      	subs	r2, #48	; 0x30
 80072e8:	2a09      	cmp	r2, #9
 80072ea:	d903      	bls.n	80072f4 <_svfiprintf_r+0x1a8>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0c5      	beq.n	800727c <_svfiprintf_r+0x130>
 80072f0:	9105      	str	r1, [sp, #20]
 80072f2:	e7c3      	b.n	800727c <_svfiprintf_r+0x130>
 80072f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80072f8:	4604      	mov	r4, r0
 80072fa:	2301      	movs	r3, #1
 80072fc:	e7f0      	b.n	80072e0 <_svfiprintf_r+0x194>
 80072fe:	ab03      	add	r3, sp, #12
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	462a      	mov	r2, r5
 8007304:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <_svfiprintf_r+0x1f8>)
 8007306:	a904      	add	r1, sp, #16
 8007308:	4638      	mov	r0, r7
 800730a:	f3af 8000 	nop.w
 800730e:	1c42      	adds	r2, r0, #1
 8007310:	4606      	mov	r6, r0
 8007312:	d1d6      	bne.n	80072c2 <_svfiprintf_r+0x176>
 8007314:	89ab      	ldrh	r3, [r5, #12]
 8007316:	065b      	lsls	r3, r3, #25
 8007318:	f53f af2c 	bmi.w	8007174 <_svfiprintf_r+0x28>
 800731c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800731e:	b01d      	add	sp, #116	; 0x74
 8007320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007324:	ab03      	add	r3, sp, #12
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	462a      	mov	r2, r5
 800732a:	4b06      	ldr	r3, [pc, #24]	; (8007344 <_svfiprintf_r+0x1f8>)
 800732c:	a904      	add	r1, sp, #16
 800732e:	4638      	mov	r0, r7
 8007330:	f000 f87a 	bl	8007428 <_printf_i>
 8007334:	e7eb      	b.n	800730e <_svfiprintf_r+0x1c2>
 8007336:	bf00      	nop
 8007338:	0800a17c 	.word	0x0800a17c
 800733c:	0800a186 	.word	0x0800a186
 8007340:	00000000 	.word	0x00000000
 8007344:	08007095 	.word	0x08007095
 8007348:	0800a182 	.word	0x0800a182

0800734c <_printf_common>:
 800734c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007350:	4616      	mov	r6, r2
 8007352:	4699      	mov	r9, r3
 8007354:	688a      	ldr	r2, [r1, #8]
 8007356:	690b      	ldr	r3, [r1, #16]
 8007358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800735c:	4293      	cmp	r3, r2
 800735e:	bfb8      	it	lt
 8007360:	4613      	movlt	r3, r2
 8007362:	6033      	str	r3, [r6, #0]
 8007364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007368:	4607      	mov	r7, r0
 800736a:	460c      	mov	r4, r1
 800736c:	b10a      	cbz	r2, 8007372 <_printf_common+0x26>
 800736e:	3301      	adds	r3, #1
 8007370:	6033      	str	r3, [r6, #0]
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	0699      	lsls	r1, r3, #26
 8007376:	bf42      	ittt	mi
 8007378:	6833      	ldrmi	r3, [r6, #0]
 800737a:	3302      	addmi	r3, #2
 800737c:	6033      	strmi	r3, [r6, #0]
 800737e:	6825      	ldr	r5, [r4, #0]
 8007380:	f015 0506 	ands.w	r5, r5, #6
 8007384:	d106      	bne.n	8007394 <_printf_common+0x48>
 8007386:	f104 0a19 	add.w	sl, r4, #25
 800738a:	68e3      	ldr	r3, [r4, #12]
 800738c:	6832      	ldr	r2, [r6, #0]
 800738e:	1a9b      	subs	r3, r3, r2
 8007390:	42ab      	cmp	r3, r5
 8007392:	dc26      	bgt.n	80073e2 <_printf_common+0x96>
 8007394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007398:	1e13      	subs	r3, r2, #0
 800739a:	6822      	ldr	r2, [r4, #0]
 800739c:	bf18      	it	ne
 800739e:	2301      	movne	r3, #1
 80073a0:	0692      	lsls	r2, r2, #26
 80073a2:	d42b      	bmi.n	80073fc <_printf_common+0xb0>
 80073a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073a8:	4649      	mov	r1, r9
 80073aa:	4638      	mov	r0, r7
 80073ac:	47c0      	blx	r8
 80073ae:	3001      	adds	r0, #1
 80073b0:	d01e      	beq.n	80073f0 <_printf_common+0xa4>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	68e5      	ldr	r5, [r4, #12]
 80073b6:	6832      	ldr	r2, [r6, #0]
 80073b8:	f003 0306 	and.w	r3, r3, #6
 80073bc:	2b04      	cmp	r3, #4
 80073be:	bf08      	it	eq
 80073c0:	1aad      	subeq	r5, r5, r2
 80073c2:	68a3      	ldr	r3, [r4, #8]
 80073c4:	6922      	ldr	r2, [r4, #16]
 80073c6:	bf0c      	ite	eq
 80073c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073cc:	2500      	movne	r5, #0
 80073ce:	4293      	cmp	r3, r2
 80073d0:	bfc4      	itt	gt
 80073d2:	1a9b      	subgt	r3, r3, r2
 80073d4:	18ed      	addgt	r5, r5, r3
 80073d6:	2600      	movs	r6, #0
 80073d8:	341a      	adds	r4, #26
 80073da:	42b5      	cmp	r5, r6
 80073dc:	d11a      	bne.n	8007414 <_printf_common+0xc8>
 80073de:	2000      	movs	r0, #0
 80073e0:	e008      	b.n	80073f4 <_printf_common+0xa8>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4652      	mov	r2, sl
 80073e6:	4649      	mov	r1, r9
 80073e8:	4638      	mov	r0, r7
 80073ea:	47c0      	blx	r8
 80073ec:	3001      	adds	r0, #1
 80073ee:	d103      	bne.n	80073f8 <_printf_common+0xac>
 80073f0:	f04f 30ff 	mov.w	r0, #4294967295
 80073f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f8:	3501      	adds	r5, #1
 80073fa:	e7c6      	b.n	800738a <_printf_common+0x3e>
 80073fc:	18e1      	adds	r1, r4, r3
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	2030      	movs	r0, #48	; 0x30
 8007402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007406:	4422      	add	r2, r4
 8007408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800740c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007410:	3302      	adds	r3, #2
 8007412:	e7c7      	b.n	80073a4 <_printf_common+0x58>
 8007414:	2301      	movs	r3, #1
 8007416:	4622      	mov	r2, r4
 8007418:	4649      	mov	r1, r9
 800741a:	4638      	mov	r0, r7
 800741c:	47c0      	blx	r8
 800741e:	3001      	adds	r0, #1
 8007420:	d0e6      	beq.n	80073f0 <_printf_common+0xa4>
 8007422:	3601      	adds	r6, #1
 8007424:	e7d9      	b.n	80073da <_printf_common+0x8e>
	...

08007428 <_printf_i>:
 8007428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800742c:	7e0f      	ldrb	r7, [r1, #24]
 800742e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007430:	2f78      	cmp	r7, #120	; 0x78
 8007432:	4691      	mov	r9, r2
 8007434:	4680      	mov	r8, r0
 8007436:	460c      	mov	r4, r1
 8007438:	469a      	mov	sl, r3
 800743a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800743e:	d807      	bhi.n	8007450 <_printf_i+0x28>
 8007440:	2f62      	cmp	r7, #98	; 0x62
 8007442:	d80a      	bhi.n	800745a <_printf_i+0x32>
 8007444:	2f00      	cmp	r7, #0
 8007446:	f000 80d8 	beq.w	80075fa <_printf_i+0x1d2>
 800744a:	2f58      	cmp	r7, #88	; 0x58
 800744c:	f000 80a3 	beq.w	8007596 <_printf_i+0x16e>
 8007450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007458:	e03a      	b.n	80074d0 <_printf_i+0xa8>
 800745a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800745e:	2b15      	cmp	r3, #21
 8007460:	d8f6      	bhi.n	8007450 <_printf_i+0x28>
 8007462:	a101      	add	r1, pc, #4	; (adr r1, 8007468 <_printf_i+0x40>)
 8007464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007468:	080074c1 	.word	0x080074c1
 800746c:	080074d5 	.word	0x080074d5
 8007470:	08007451 	.word	0x08007451
 8007474:	08007451 	.word	0x08007451
 8007478:	08007451 	.word	0x08007451
 800747c:	08007451 	.word	0x08007451
 8007480:	080074d5 	.word	0x080074d5
 8007484:	08007451 	.word	0x08007451
 8007488:	08007451 	.word	0x08007451
 800748c:	08007451 	.word	0x08007451
 8007490:	08007451 	.word	0x08007451
 8007494:	080075e1 	.word	0x080075e1
 8007498:	08007505 	.word	0x08007505
 800749c:	080075c3 	.word	0x080075c3
 80074a0:	08007451 	.word	0x08007451
 80074a4:	08007451 	.word	0x08007451
 80074a8:	08007603 	.word	0x08007603
 80074ac:	08007451 	.word	0x08007451
 80074b0:	08007505 	.word	0x08007505
 80074b4:	08007451 	.word	0x08007451
 80074b8:	08007451 	.word	0x08007451
 80074bc:	080075cb 	.word	0x080075cb
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	1d1a      	adds	r2, r3, #4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	602a      	str	r2, [r5, #0]
 80074c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0a3      	b.n	800761c <_printf_i+0x1f4>
 80074d4:	6820      	ldr	r0, [r4, #0]
 80074d6:	6829      	ldr	r1, [r5, #0]
 80074d8:	0606      	lsls	r6, r0, #24
 80074da:	f101 0304 	add.w	r3, r1, #4
 80074de:	d50a      	bpl.n	80074f6 <_printf_i+0xce>
 80074e0:	680e      	ldr	r6, [r1, #0]
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	2e00      	cmp	r6, #0
 80074e6:	da03      	bge.n	80074f0 <_printf_i+0xc8>
 80074e8:	232d      	movs	r3, #45	; 0x2d
 80074ea:	4276      	negs	r6, r6
 80074ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f0:	485e      	ldr	r0, [pc, #376]	; (800766c <_printf_i+0x244>)
 80074f2:	230a      	movs	r3, #10
 80074f4:	e019      	b.n	800752a <_printf_i+0x102>
 80074f6:	680e      	ldr	r6, [r1, #0]
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074fe:	bf18      	it	ne
 8007500:	b236      	sxthne	r6, r6
 8007502:	e7ef      	b.n	80074e4 <_printf_i+0xbc>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	6820      	ldr	r0, [r4, #0]
 8007508:	1d19      	adds	r1, r3, #4
 800750a:	6029      	str	r1, [r5, #0]
 800750c:	0601      	lsls	r1, r0, #24
 800750e:	d501      	bpl.n	8007514 <_printf_i+0xec>
 8007510:	681e      	ldr	r6, [r3, #0]
 8007512:	e002      	b.n	800751a <_printf_i+0xf2>
 8007514:	0646      	lsls	r6, r0, #25
 8007516:	d5fb      	bpl.n	8007510 <_printf_i+0xe8>
 8007518:	881e      	ldrh	r6, [r3, #0]
 800751a:	4854      	ldr	r0, [pc, #336]	; (800766c <_printf_i+0x244>)
 800751c:	2f6f      	cmp	r7, #111	; 0x6f
 800751e:	bf0c      	ite	eq
 8007520:	2308      	moveq	r3, #8
 8007522:	230a      	movne	r3, #10
 8007524:	2100      	movs	r1, #0
 8007526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800752a:	6865      	ldr	r5, [r4, #4]
 800752c:	60a5      	str	r5, [r4, #8]
 800752e:	2d00      	cmp	r5, #0
 8007530:	bfa2      	ittt	ge
 8007532:	6821      	ldrge	r1, [r4, #0]
 8007534:	f021 0104 	bicge.w	r1, r1, #4
 8007538:	6021      	strge	r1, [r4, #0]
 800753a:	b90e      	cbnz	r6, 8007540 <_printf_i+0x118>
 800753c:	2d00      	cmp	r5, #0
 800753e:	d04d      	beq.n	80075dc <_printf_i+0x1b4>
 8007540:	4615      	mov	r5, r2
 8007542:	fbb6 f1f3 	udiv	r1, r6, r3
 8007546:	fb03 6711 	mls	r7, r3, r1, r6
 800754a:	5dc7      	ldrb	r7, [r0, r7]
 800754c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007550:	4637      	mov	r7, r6
 8007552:	42bb      	cmp	r3, r7
 8007554:	460e      	mov	r6, r1
 8007556:	d9f4      	bls.n	8007542 <_printf_i+0x11a>
 8007558:	2b08      	cmp	r3, #8
 800755a:	d10b      	bne.n	8007574 <_printf_i+0x14c>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	07de      	lsls	r6, r3, #31
 8007560:	d508      	bpl.n	8007574 <_printf_i+0x14c>
 8007562:	6923      	ldr	r3, [r4, #16]
 8007564:	6861      	ldr	r1, [r4, #4]
 8007566:	4299      	cmp	r1, r3
 8007568:	bfde      	ittt	le
 800756a:	2330      	movle	r3, #48	; 0x30
 800756c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007570:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007574:	1b52      	subs	r2, r2, r5
 8007576:	6122      	str	r2, [r4, #16]
 8007578:	f8cd a000 	str.w	sl, [sp]
 800757c:	464b      	mov	r3, r9
 800757e:	aa03      	add	r2, sp, #12
 8007580:	4621      	mov	r1, r4
 8007582:	4640      	mov	r0, r8
 8007584:	f7ff fee2 	bl	800734c <_printf_common>
 8007588:	3001      	adds	r0, #1
 800758a:	d14c      	bne.n	8007626 <_printf_i+0x1fe>
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	b004      	add	sp, #16
 8007592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007596:	4835      	ldr	r0, [pc, #212]	; (800766c <_printf_i+0x244>)
 8007598:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800759c:	6829      	ldr	r1, [r5, #0]
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80075a4:	6029      	str	r1, [r5, #0]
 80075a6:	061d      	lsls	r5, r3, #24
 80075a8:	d514      	bpl.n	80075d4 <_printf_i+0x1ac>
 80075aa:	07df      	lsls	r7, r3, #31
 80075ac:	bf44      	itt	mi
 80075ae:	f043 0320 	orrmi.w	r3, r3, #32
 80075b2:	6023      	strmi	r3, [r4, #0]
 80075b4:	b91e      	cbnz	r6, 80075be <_printf_i+0x196>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	f023 0320 	bic.w	r3, r3, #32
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	2310      	movs	r3, #16
 80075c0:	e7b0      	b.n	8007524 <_printf_i+0xfc>
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	f043 0320 	orr.w	r3, r3, #32
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	2378      	movs	r3, #120	; 0x78
 80075cc:	4828      	ldr	r0, [pc, #160]	; (8007670 <_printf_i+0x248>)
 80075ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075d2:	e7e3      	b.n	800759c <_printf_i+0x174>
 80075d4:	0659      	lsls	r1, r3, #25
 80075d6:	bf48      	it	mi
 80075d8:	b2b6      	uxthmi	r6, r6
 80075da:	e7e6      	b.n	80075aa <_printf_i+0x182>
 80075dc:	4615      	mov	r5, r2
 80075de:	e7bb      	b.n	8007558 <_printf_i+0x130>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	6826      	ldr	r6, [r4, #0]
 80075e4:	6961      	ldr	r1, [r4, #20]
 80075e6:	1d18      	adds	r0, r3, #4
 80075e8:	6028      	str	r0, [r5, #0]
 80075ea:	0635      	lsls	r5, r6, #24
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	d501      	bpl.n	80075f4 <_printf_i+0x1cc>
 80075f0:	6019      	str	r1, [r3, #0]
 80075f2:	e002      	b.n	80075fa <_printf_i+0x1d2>
 80075f4:	0670      	lsls	r0, r6, #25
 80075f6:	d5fb      	bpl.n	80075f0 <_printf_i+0x1c8>
 80075f8:	8019      	strh	r1, [r3, #0]
 80075fa:	2300      	movs	r3, #0
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	4615      	mov	r5, r2
 8007600:	e7ba      	b.n	8007578 <_printf_i+0x150>
 8007602:	682b      	ldr	r3, [r5, #0]
 8007604:	1d1a      	adds	r2, r3, #4
 8007606:	602a      	str	r2, [r5, #0]
 8007608:	681d      	ldr	r5, [r3, #0]
 800760a:	6862      	ldr	r2, [r4, #4]
 800760c:	2100      	movs	r1, #0
 800760e:	4628      	mov	r0, r5
 8007610:	f7f8 fde6 	bl	80001e0 <memchr>
 8007614:	b108      	cbz	r0, 800761a <_printf_i+0x1f2>
 8007616:	1b40      	subs	r0, r0, r5
 8007618:	6060      	str	r0, [r4, #4]
 800761a:	6863      	ldr	r3, [r4, #4]
 800761c:	6123      	str	r3, [r4, #16]
 800761e:	2300      	movs	r3, #0
 8007620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007624:	e7a8      	b.n	8007578 <_printf_i+0x150>
 8007626:	6923      	ldr	r3, [r4, #16]
 8007628:	462a      	mov	r2, r5
 800762a:	4649      	mov	r1, r9
 800762c:	4640      	mov	r0, r8
 800762e:	47d0      	blx	sl
 8007630:	3001      	adds	r0, #1
 8007632:	d0ab      	beq.n	800758c <_printf_i+0x164>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	079b      	lsls	r3, r3, #30
 8007638:	d413      	bmi.n	8007662 <_printf_i+0x23a>
 800763a:	68e0      	ldr	r0, [r4, #12]
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	4298      	cmp	r0, r3
 8007640:	bfb8      	it	lt
 8007642:	4618      	movlt	r0, r3
 8007644:	e7a4      	b.n	8007590 <_printf_i+0x168>
 8007646:	2301      	movs	r3, #1
 8007648:	4632      	mov	r2, r6
 800764a:	4649      	mov	r1, r9
 800764c:	4640      	mov	r0, r8
 800764e:	47d0      	blx	sl
 8007650:	3001      	adds	r0, #1
 8007652:	d09b      	beq.n	800758c <_printf_i+0x164>
 8007654:	3501      	adds	r5, #1
 8007656:	68e3      	ldr	r3, [r4, #12]
 8007658:	9903      	ldr	r1, [sp, #12]
 800765a:	1a5b      	subs	r3, r3, r1
 800765c:	42ab      	cmp	r3, r5
 800765e:	dcf2      	bgt.n	8007646 <_printf_i+0x21e>
 8007660:	e7eb      	b.n	800763a <_printf_i+0x212>
 8007662:	2500      	movs	r5, #0
 8007664:	f104 0619 	add.w	r6, r4, #25
 8007668:	e7f5      	b.n	8007656 <_printf_i+0x22e>
 800766a:	bf00      	nop
 800766c:	0800a18d 	.word	0x0800a18d
 8007670:	0800a19e 	.word	0x0800a19e

08007674 <memmove>:
 8007674:	4288      	cmp	r0, r1
 8007676:	b510      	push	{r4, lr}
 8007678:	eb01 0402 	add.w	r4, r1, r2
 800767c:	d902      	bls.n	8007684 <memmove+0x10>
 800767e:	4284      	cmp	r4, r0
 8007680:	4623      	mov	r3, r4
 8007682:	d807      	bhi.n	8007694 <memmove+0x20>
 8007684:	1e43      	subs	r3, r0, #1
 8007686:	42a1      	cmp	r1, r4
 8007688:	d008      	beq.n	800769c <memmove+0x28>
 800768a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800768e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007692:	e7f8      	b.n	8007686 <memmove+0x12>
 8007694:	4402      	add	r2, r0
 8007696:	4601      	mov	r1, r0
 8007698:	428a      	cmp	r2, r1
 800769a:	d100      	bne.n	800769e <memmove+0x2a>
 800769c:	bd10      	pop	{r4, pc}
 800769e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076a6:	e7f7      	b.n	8007698 <memmove+0x24>

080076a8 <_realloc_r>:
 80076a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ac:	4680      	mov	r8, r0
 80076ae:	4614      	mov	r4, r2
 80076b0:	460e      	mov	r6, r1
 80076b2:	b921      	cbnz	r1, 80076be <_realloc_r+0x16>
 80076b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b8:	4611      	mov	r1, r2
 80076ba:	f7ff bbbd 	b.w	8006e38 <_malloc_r>
 80076be:	b92a      	cbnz	r2, 80076cc <_realloc_r+0x24>
 80076c0:	f7ff fb4e 	bl	8006d60 <_free_r>
 80076c4:	4625      	mov	r5, r4
 80076c6:	4628      	mov	r0, r5
 80076c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076cc:	f000 f81b 	bl	8007706 <_malloc_usable_size_r>
 80076d0:	4284      	cmp	r4, r0
 80076d2:	4607      	mov	r7, r0
 80076d4:	d802      	bhi.n	80076dc <_realloc_r+0x34>
 80076d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076da:	d812      	bhi.n	8007702 <_realloc_r+0x5a>
 80076dc:	4621      	mov	r1, r4
 80076de:	4640      	mov	r0, r8
 80076e0:	f7ff fbaa 	bl	8006e38 <_malloc_r>
 80076e4:	4605      	mov	r5, r0
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d0ed      	beq.n	80076c6 <_realloc_r+0x1e>
 80076ea:	42bc      	cmp	r4, r7
 80076ec:	4622      	mov	r2, r4
 80076ee:	4631      	mov	r1, r6
 80076f0:	bf28      	it	cs
 80076f2:	463a      	movcs	r2, r7
 80076f4:	f7ff fb1e 	bl	8006d34 <memcpy>
 80076f8:	4631      	mov	r1, r6
 80076fa:	4640      	mov	r0, r8
 80076fc:	f7ff fb30 	bl	8006d60 <_free_r>
 8007700:	e7e1      	b.n	80076c6 <_realloc_r+0x1e>
 8007702:	4635      	mov	r5, r6
 8007704:	e7df      	b.n	80076c6 <_realloc_r+0x1e>

08007706 <_malloc_usable_size_r>:
 8007706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800770a:	1f18      	subs	r0, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	bfbc      	itt	lt
 8007710:	580b      	ldrlt	r3, [r1, r0]
 8007712:	18c0      	addlt	r0, r0, r3
 8007714:	4770      	bx	lr
	...

08007718 <_init>:
 8007718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771a:	bf00      	nop
 800771c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771e:	bc08      	pop	{r3}
 8007720:	469e      	mov	lr, r3
 8007722:	4770      	bx	lr

08007724 <_fini>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	bf00      	nop
 8007728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772a:	bc08      	pop	{r3}
 800772c:	469e      	mov	lr, r3
 800772e:	4770      	bx	lr
